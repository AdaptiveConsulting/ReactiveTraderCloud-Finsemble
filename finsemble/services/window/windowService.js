/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:3375/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 240);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const LOCAL_ONLY_DEFAULT = false; // if true all logging will default to local console; will be overwritten by LoggerService's registration response
const ALWAY_ADD_STACKTRACE = false; // if true always add stacktrace data to all log messages (e.g. debug and verbose, not just errors, warning)
// capture everything at startup; will be filtered later as needed when LoggerService's registration response provides settings; overhead here is not too high
var DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true, Verbose: true, LocalOnly: LOCAL_ONLY_DEFAULT }; // if true captured for logger
var CONSOLE_DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true }; // if true then goes to console and captured for logger
const MAX_LOG_MESSAGE_SIZE = 50000;
const OVER_LOG_SIZE_LIMIT_MESSAGE = `Log argument greater than ${MAX_LOG_MESSAGE_SIZE / 1000}KB. Check local Console to see output of the object.`;
const MAX_QUEUE_SIZE = 5 * 1000; // maximum logger queue size; plenty of space although shouldn't need much since continuely sending to logger if working correctly;
const throttle = __webpack_require__(39);
const system_1 = __webpack_require__(4);
const localLogger_1 = __webpack_require__(23);
/**
 * @introduction
 *
 * <h2>Logger Client</h2>
 *
 * The Logger Client supports very efficent and configurable run-time logging to the <a href=tutorial-CentralLogger.html>Central Logger</a>.
 * Logging has a small performance overhead, so developers can liberally instrument their code with log messages for debugging and diagnostics.
 * By default, only error and warning messages are captured by the Logger, with the other message types (e.g., log, info, debug) disabled.
 * Which message types are enabled or disabled is fully controlled from the <a href=tutorial-CentralLogger.html>Central Logger</a>&mdash;this means developers can fully instrument their code once and dynamically enable and disable logging later, as needed, for debugging or field support.
 *
 * The Finsemble team uses the Central Logger to <a href=tutorial-Troubleshooting.html>capture log message for field support</a>.
 * Finsemble customers, building their own Finsemble applications, have the option to do the same.
 *
 * **Note:** The Logger Client **wraps** all console logging (e.g., `console.error`, `console.log`) so these message can also be captured and viewed in the Central Logger, but console logging is never disabled locally. For better performance, we recommend most of your code's instrumentation be based on the Logger Client (e.g., `FSBL.Clients.Logger.debug(...)` instead of the `console.debug(...)`).
 *
 * Using the Logger is similar to using the browser's console for logging (e.g., `console.error` or `console.log`), although the Logger Client is accessed through the FSBL object as shown in the examples below.
 *
 *```javascript
 * 			FSBL.Clients.Logger.error("an error message", anErrorOject);
 * 			FSBL.Clients.Logger.warn("a warning message", object1, object2, object3);
 * 			FSBL.Clients.Logger.log("logging message");
 * 			FSBL.Clients.Logger.info("logging message");
 * 			FSBL.Clients.Logger.log("log message");
 * 			FSBL.Clients.Logger.debug("debug message");
 *```
 * The Logger Client also supports system logging (e.g., `Logger.system.log`) for Finsemble's internal logging. All Finsemble client APIs are in the process of being instrumented to log their entry-point calls and parameters, as shown below.
 *
 *```javascript
 * 			Logger.system.info("RouterClient.transmit", "TO CHANNEL", toChannel, "EVENT", event);
 *```
 * Developers can view all system logging in the Central Logger, although only `Logger.system.info` messages (recording API interactions) are intended for use outside the Finsemble development team.
 *
 *<strong>Note:</strong> Any service can also use the Logger by directing requiring the client. The Logger can immediately be used, but log message will not be transmitted to the Central Logger until `Logger.start()` is invoked (as shown below).
 *```javascript
 *
 * 			var Logger = require("../../clients/logger").default;
 * 			Logger.log("Service Ready");
 * 			Logger.start();
 *```
 * @hideConstructor
 * @shouldBePublished true
 * @class Logger
 * @constructor
 */
exports.LoggerConstructor = function (dependencies) {
    var self = this;
    self.RouterClient = dependencies && dependencies.RouterClient;
    var isRegistering = false; // if registering start
    var isRegistered = false; // if registering complete
    var loggerConsole = self;
    var updatedLogState;
    var calibratedTimeStampOffset = 0;
    var newCalibratedTimeStampOffset;
    var filteredMessagesCounter = 0;
    this.startupTime = 0;
    var loggerQueue = [];
    var warningIssued = false; // used to limit warning messages
    if (typeof window === "undefined")
        return;
    var loggerClientName = system_1.System.Window.getCurrent().name.replace(/\./, "-");
    if (window.top !== window) { // amend name if iFrame
        loggerClientName += ".Frame";
    }
    var clientChannel = "finsemble.logger.client." + loggerClientName;
    //const CATEGORIES = ["console", "dev", "system", "perf"];
    // Will be updated on registration with Central Logger, but capture everything until then.
    var initialLogState = {
        console: CONSOLE_DEFAULT_LOG_SETTING,
        dev: DEFAULT_LOG_SETTING,
        system: DEFAULT_LOG_SETTING,
        perf: DEFAULT_LOG_SETTING,
    };
    var currentLogState = initialLogState;
    function LoggerMessage(category, type, data) {
        this.category = category;
        this.logClientName = loggerClientName;
        this.logType = type;
        this.logData = data;
        this.logTimestamp = window.performance.timing.navigationStart + window.performance.now() + calibratedTimeStampOffset;
    }
    function addToQueue(message) {
        if (loggerQueue.length < MAX_QUEUE_SIZE) {
            loggerQueue.push(message);
        }
        else {
            if (!warningIssued) {
                console.warn("Logging Queue Overflowed!", loggerQueue.length);
                warningIssued = true;
                let logState = { Error: false, Warn: false, Info: false, Log: false, Debug: false, Verbose: false, LocalOnly: false };
                let newState = {
                    console: logState,
                    dev: logState,
                    system: logState,
                    perf: logState,
                };
                setLogState(newState, false);
            }
        }
    }
    // if log state changes then update queue based on that data (e.g. if no longer logging debug messages, then remove them from the queue)
    function updateQueueBasedOnState(calibrateTimeFlag) {
        loggerConsole.system.debug("Logger updateQueueBasedOnState", calibrateTimeFlag, calibratedTimeStampOffset, "QUEUE LENGTH", loggerQueue.length, currentLogState);
        var newQueue = [];
        for (var i = 0, length = loggerQueue.length; i < length; i++) {
            if (currentLogState[loggerQueue[i].category][loggerQueue[i].logType] && !currentLogState[loggerQueue[i].category].LocalOnly) {
                if (calibrateTimeFlag) {
                    loggerQueue[i].logTimestamp += calibratedTimeStampOffset; // if flag set then timestamp hasn't been adjusted yet by calibrated offset time
                }
                newQueue.push(loggerQueue[i]);
            }
            else { // only now know LocalOnly for messages, so print those queued out otherwise they will be lost
                if (currentLogState[loggerQueue[i].category][loggerQueue[i].logType] && currentLogState[loggerQueue[i].category].LocalOnly) {
                    let msg = loggerQueue[i];
                    console.log(msg.category, msg.logType, msg.logTimestamp - window.performance.timing.navigationStart, msg.logData, "(Previously queued!)");
                }
            }
        }
        loggerQueue = newQueue;
    }
    this.setClientName = function (name) {
        loggerClientName = name;
    };
    this.getClientName = function (name) {
        return loggerClientName;
    };
    this.clearMessageList = function () {
        loggerQueue = [];
    };
    function setLogState(state, calibrateTimeFlag) {
        if (state && state.dev)
            currentLogState = state;
        updateQueueBasedOnState(calibrateTimeFlag);
    }
    // logger entry point to return callstack that can be included in a log message
    this.callStack = function () {
        return traceString();
    };
    this.setting = function () {
        return currentLogState;
    };
    function traceString() {
        function getPosition(string, subString, index) {
            return string.split(subString, index).join(subString).length;
        }
        function getErrorObject() {
            try {
                throw Error("");
            }
            catch (err) {
                return err;
            }
        }
        var stack = getErrorObject().stack;
        var position = getPosition(stack, "\n", 4);
        var tString = stack.substring(position); // strip off irrelevant part of stack
        var final = "Log Stack: \n" + tString.substr(1); // insert description
        return final;
    }
    // save original console functions since going to wrap/redefine each
    var orignalConsoleError = console.error;
    var orignalConsoleWarn = console.warn;
    var orignalConsoleInfo = console.info;
    var orignalConsoleLog = console.log;
    var orignalConsoleDebug = console.debug;
    function getRoughSizeOfObject(object) {
        var objectList = [];
        var stack = [object];
        var bytes = 0;
        //prevent infinite recursion
        var attempts = 0;
        while (stack.length && attempts < 1000) {
            attempts++;
            var value = stack.pop();
            if (typeof value === "boolean") {
                bytes += 4;
            }
            else if (typeof value === "string") {
                bytes += value.length * 2;
            }
            else if (typeof value === "number") {
                bytes += 8;
            }
            else if (typeof value === "object"
                && objectList.indexOf(value) === -1) {
                objectList.push(value);
                for (var i in value) {
                    stack.push(value[i]);
                }
            }
        }
        return bytes;
    }
    // filter out message containing certain substrings;
    function filterMessage(message) {
        var result = (message.logData.indexOf("heartbeat") !== -1);
        return result;
    }
    function formatAndQueueMessage(category, type, args) {
        var message;
        var noFilter = false;
        let CHECK_OBJECT_SIZE = true;
        if (args[0] === "forceObjectsToLogger") {
            noFilter = true;
            CHECK_OBJECT_SIZE = false;
            args.splice(0, 1);
        }
        //Kicks out overly-large objects to prevent the loggerService from jamming up.
        args = args.map((object) => {
            if (CHECK_OBJECT_SIZE) {
                let bytes = getRoughSizeOfObject(object);
                if (bytes > MAX_LOG_MESSAGE_SIZE) {
                    // @todo, Terry, instead of *not* sending the message at all, we should send the first X bytes of the message.
                    outputToConsole(orignalConsoleInfo, ["Message too large to send to the logger.", args]);
                    return OVER_LOG_SIZE_LIMIT_MESSAGE;
                }
            }
            return object;
        });
        try {
            for (let i = 0; i < args.length; i++) {
                // Convert arg into a string if it doesn't stringify properly. JavaScript Error class (such as thrown by an unhandled exception) doesn't stringify properly so you must coerce it to a string.
                if (args[i] instanceof Error) {
                    args[i] = args[i].toString();
                }
            }
            message = new LoggerMessage(category, type, JSON.stringify(args));
        }
        catch (err) {
            args.splice(0, args.length); // clear but don't redefine since must return updated value
            args.push(traceString());
            message = new LoggerMessage(category, type, "*** Logging Error: " + JSON.stringify(args));
        }
        if (noFilter || !filterMessage(message)) {
            addToQueue(message);
        }
        else {
            if (++filteredMessagesCounter <= 5) {
                let filterMsg = `"Filtered Logger Message (${filteredMessagesCounter} of first 5 shown)`;
                outputToConsole(orignalConsoleInfo, [filterMsg, message]); // put out a few filtered messages then stop so won't clutter console
            }
        }
        if (isRegistered) {
            transmitAndClearQueue();
        }
    }
    let transmitAndClearQueue = function () {
        if (loggerQueue.length > 0) {
            self.RouterClient.transmit("logger.service.logMessages", loggerQueue);
            loggerConsole.clearMessageList();
        }
    };
    if (loggerClientName === "routerService") {
        transmitAndClearQueue = throttle(transmitAndClearQueue, 100, { leading: false }); // HERE is the interval for transmitting queued messages to the logger service
    }
    else {
        transmitAndClearQueue = throttle(transmitAndClearQueue, 250, { leading: false }); // HERE is the interval for transmitting queued messages to the logger service
    }
    //Helper to flatten the array of arguments passed in, so we can log the full message locally.
    function flatten(arr) {
        return arr.reduce(function (flat, toFlatten) {
            return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);
        }, []);
    }
    function outputToConsole(consoleType, args) {
        try {
            consoleType.apply(console, flatten(args));
        }
        catch (err) {
            args = [];
            args.push(traceString());
            // [Terry] This has invalid syntax, "category" and "type" don't exist. I don't think this ever gets called.
            // message = new LoggerMessage(category, type, "*** Logging Error: " + JSON.stringify(args));
        }
    }
    /**
     * Log a dev error message.
     *
     * @param {any} message parameter of any type that can be stringified (e.g. string, object)
     *
     * @example
     *
     * FSBL.Clients.Logger.error("some message", parm1, parm2);
     */
    this.error = function () {
        var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
        args.push(traceString());
        if (currentLogState.dev.Error && !currentLogState.dev.LocalOnly) {
            formatAndQueueMessage("dev", "Error", args);
        }
        args.unshift("dev error (" + window.performance.now() + "):");
        outputToConsole(orignalConsoleError, args);
    };
    /**
     * Log a dev warning message.
     *
     * @param {any} message parameter of any type that can be stringified (e.g. string, object)
     *
     * @example
     *
     * FSBL.Clients.Logger.warn("some message", parm1, parm2);
     */
    this.warn = function () {
        if (currentLogState.dev.Warn) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            args.push(traceString());
            if (currentLogState.dev.Warn && !currentLogState.dev.LocalOnly) {
                formatAndQueueMessage("dev", "Warn", args);
            }
            if (currentLogState.dev.Warn && currentLogState.dev.LocalOnly) {
                args.unshift("dev warn (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleWarn, args);
            }
        }
    };
    /**
     * Log a dev info message.
     *
     * @param {any} message parameter of any type that can be stringified (e.g. string, object)
     *
     * @example
     *
     * FSBL.Clients.Logger.info("some message", parm1, parm2);
     */
    this.info = function () {
        if (currentLogState.dev.Info) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.dev.Info && !currentLogState.dev.LocalOnly) {
                formatAndQueueMessage("dev", "Info", args);
            }
            if (currentLogState.dev.Info && currentLogState.dev.LocalOnly) {
                args.unshift("dev info (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleInfo, args);
            }
        }
    };
    /**
     * Log a dev log message.
     *
     * @param {any} message parameter of any type that can be stringified (e.g. string, object)
     *
     * @example
     *
     * FSBL.Clients.Logger.log("some message", parm1, parm2);
     */
    this.log = function () {
        if (currentLogState.dev.Log) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.dev.Log && !currentLogState.dev.LocalOnly) {
                formatAndQueueMessage("dev", "Log", args);
            }
            if (currentLogState.dev.Log && currentLogState.dev.LocalOnly) {
                args.unshift("dev log (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleLog, args);
            }
        }
    };
    /**
     * Log a dev debug message.
     *
     * @param {any} message parameter of any type that can be stringified (e.g. string, object)
     *
     * @example
     *
     * FSBL.Clients.Logger.debug("some message", parm1, parm2);
     */
    this.debug = function () {
        if (currentLogState.dev.Debug) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.dev.Debug && !currentLogState.dev.LocalOnly) {
                formatAndQueueMessage("dev", "Debug", args);
            }
            if (currentLogState.dev.Debug && currentLogState.dev.LocalOnly) {
                args.unshift("dev debug (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleDebug, args);
            }
        }
    };
    /**
     * Log a dev verbose message (an extra level of verbose-debug output)
     *
     * @param {Array.<any>} messageParm message parameter of any type that can be stringified (e.g. string, object)
     *
     * @example
     *
     * FSBL.Clients.Logger.verbose("some message", parm1, parm2);
     */
    this.verbose = function () {
        if (currentLogState.dev.Verbose) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.dev.Verbose && !currentLogState.dev.LocalOnly) {
                formatAndQueueMessage("dev", "Verbose", args);
            }
            if (currentLogState.dev.Verbose && currentLogState.dev.LocalOnly) {
                args.unshift("dev verbose (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleDebug, args);
            }
        }
    };
    // system mode functions
    this.system = {};
    /**
     * @param {Array.<any>} arguments
    */
    this.system.error = function () {
        var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
        args.push(traceString());
        if (currentLogState.system.Error && !currentLogState.system.LocalOnly) {
            formatAndQueueMessage("system", "Error", args);
        }
        args.unshift("system error (" + window.performance.now() + "):");
        outputToConsole(orignalConsoleError, args);
    };
    this.system.warn = function () {
        if (currentLogState.system.Warn) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            args.push(traceString());
            if (currentLogState.system.Warn && !currentLogState.system.LocalOnly) {
                formatAndQueueMessage("system", "Warn", args);
            }
            if (currentLogState.system.Warn && currentLogState.system.LocalOnly) {
                args.unshift("system warn (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleWarn, args);
            }
        }
    };
    this.system.info = function () {
        if (currentLogState.system.Info) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.system.Info && !currentLogState.system.LocalOnly) {
                formatAndQueueMessage("system", "Info", args);
            }
            if (currentLogState.system.Info && currentLogState.system.LocalOnly) {
                args.unshift("system info (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleInfo, args);
            }
        }
    };
    this.system.log = function () {
        if (currentLogState.system.Log) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.system.Log && !currentLogState.system.LocalOnly) {
                formatAndQueueMessage("system", "Log", args);
            }
            if (currentLogState.system.Log && currentLogState.system.LocalOnly) {
                args.unshift("system log (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleLog, args);
            }
        }
    };
    this.system.debug = function () {
        if (currentLogState.system.Debug) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.system.Debug && !currentLogState.system.LocalOnly) {
                formatAndQueueMessage("system", "Debug", args);
            }
            if (currentLogState.system.Debug && currentLogState.system.LocalOnly) {
                args.unshift("system debug (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleDebug, args);
            }
        }
    };
    this.system.verbose = function () {
        if (currentLogState.system.Verbose) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.system.Verbose && !currentLogState.system.LocalOnly) {
                formatAndQueueMessage("system", "Verbose", args);
            }
            if (currentLogState.system.Verbose && currentLogState.system.LocalOnly) {
                var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
                args.unshift("system log (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleDebug, args);
            }
        }
    };
    // performance mode functions
    this.perf = {};
    this.perf.error = function () {
        var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
        args.push(traceString());
        if (currentLogState.perf.Error && !currentLogState.perf.LocalOnly) {
            formatAndQueueMessage("perf", "Error", args);
        }
        args.unshift("perf error (" + window.performance.now() + "):");
        outputToConsole(orignalConsoleError, args);
    };
    this.perf.warn = function () {
        if (currentLogState.perf.Warn) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            args.push(traceString());
            if (currentLogState.perf.Warn && !currentLogState.perf.LocalOnly) {
                formatAndQueueMessage("perf", "Warn", args);
            }
            if (currentLogState.perf.Warn && currentLogState.perf.LocalOnly) {
                args.unshift("perf warn (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleWarn, args);
            }
        }
    };
    this.perf.info = function () {
        if (currentLogState.perf.Info) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.perf.Info && !currentLogState.perf.LocalOnly) {
                formatAndQueueMessage("perf", "Info", args);
            }
            if (currentLogState.perf.Info && currentLogState.perf.LocalOnly) {
                args.unshift("perf info (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleInfo, args);
            }
        }
    };
    this.perf.log = function () {
        if (currentLogState.perf.Log) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.perf.Log && !currentLogState.perf.LocalOnly) {
                formatAndQueueMessage("perf", "Log", args);
            }
            if (currentLogState.perf.Log && currentLogState.perf.LocalOnly) {
                args.unshift("perf log (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleLog, args);
            }
        }
    };
    this.perf.debug = function () {
        if (currentLogState.perf.Debug) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.perf.Debug && !currentLogState.perf.LocalOnly) {
                formatAndQueueMessage("perf", "Debug", args);
            }
            if (currentLogState.perf.Debug && currentLogState.perf.LocalOnly) {
                args.unshift("perf debug (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleDebug, args);
            }
        }
    };
    this.perf.verbose = function () {
        if (currentLogState.perf.Verbose) {
            var args = Array.prototype.slice.call(arguments); // make a real array so can manipulate
            if (ALWAY_ADD_STACKTRACE) {
                args.push(traceString());
            }
            if (currentLogState.perf.Verbose && !currentLogState.perf.LocalOnly) {
                formatAndQueueMessage("perf", "Verbose", args);
            }
            if (currentLogState.perf.Verbose && currentLogState.perf.LocalOnly) {
                args.unshift("perf verbose (" + window.performance.now() + "):");
                outputToConsole(orignalConsoleDebug, args);
            }
        }
    };
    this.onClose = function () {
        this.unregisterClient();
    };
    function registerClient() {
        loggerConsole.system.debug("logger.service.registering", loggerClientName);
        if (!LOCAL_ONLY_DEFAULT) {
            self.RouterClient.query("logger.service.register", {
                clientName: loggerClientName,
                clientChannel,
                uuid: system_1.System.Window.getCurrent().uuid,
                windowName: system_1.System.Window.getCurrent().name
            }, function (error, queryMessage) {
                if (error) { // for some very early clients the logger may not be ready yet, so retry after a small wait
                    setTimeout(registerClient, 750);
                }
                else {
                    isRegistered = true;
                    loggerConsole.system.debug("logger.service.registered");
                    updatedLogState = queryMessage.data;
                    if (loggerClientName !== "routerService") {
                        calibratedTimeStampOffset = newCalibratedTimeStampOffset; // from now the real offset time will be used for all timestamps
                        setLogState(updatedLogState, true); // true indicates must adjust already queued timestamps by the new offset time
                    }
                    else { // router services doesn't need to calibrate time since it is the reference time
                        setLogState(updatedLogState, false);
                    }
                    formatAndQueueMessage("system", "Debug", ["Logger Registered"]);
                    transmitAndClearQueue();
                }
            });
        }
        self.RouterClient.addListener(clientChannel, function (error, message) {
            loggerConsole.system.debug("logger.client.setLogState", message.data);
            updatedLogState = message.data;
            setLogState(updatedLogState, false);
        });
    }
    function unregisterClient(params = {}, cb = Function.prototype) {
        loggerConsole.system.debug("logger.service.unregister", loggerClientName);
        transmitAndClearQueue(); // send any message currently in the log queue
        self.RouterClient.query("logger.service.unregister", loggerClientName, cb);
    }
    function registerOnceWhenStarted() {
        if (!isRegistering) {
            self.startupTime = performance.now() - self.startupTime;
            registerClient();
            isRegistering = true;
        }
    }
    this.unregisterClient = unregisterClient;
    this.isLogMessage = function (channel) {
        return (channel === "logger.service.logMessages");
    };
    this.status = "offline";
    /** Sets the router client for this instance of the Logger client.
     *
     * This is necessary to do after instantiation because the RouterClient
     * and the Logger have a mutual dependency on each other.
    */
    this.setRouterClient = (routerClient) => {
        this.RouterClient = routerClient;
    };
    this.start = function (routerClient) {
        this.startupTime = performance.now();
        var self = this;
        if (!self.RouterClient) {
            console.log("No instance of the RouterClient found for this instance of the Logger. Dynamically requireing it.");
            self.RouterClient = __webpack_require__(6).default;
        }
        let onlineSubscription, allActiveSubscription;
        //Wait for the service before coming online. can't use the dependency manager, because it uses the router, which uses the logger.
        function comeOnline() {
            self.status = "online";
            loggerConsole.system.debug("Logger onReady", loggerClientName);
            // timer calibration must be done so the messages will be correctly sorted in the central logger;
            // this is necessary because there is timer driff between windows --- this appears to be a Chromium
            // bug we have to work around it.  The timeOffset value adjusts the time using the routerService's
            // time as a central reference point.
            self.RouterClient.calibrateTimeWithRouterService(function (timeOffset) {
                newCalibratedTimeStampOffset = timeOffset;
                registerOnceWhenStarted();
            });
        }
        let onRouterReady = () => {
            allActiveSubscription = self.RouterClient.subscribe("Finsemble.Service.State.loggerService", function (err, event) {
                if (event.data.state === "ready") {
                    comeOnline();
                    self.RouterClient.unsubscribe(allActiveSubscription);
                }
            });
        };
        if (window.name === "routerService") {
            self.RouterClient.query("logger.service.register", {}, function (error, queryMessage) {
                if (error) { // for some very early clients the logger may not be ready yet, so retry after a small wait
                    setTimeout(onRouterReady, 750);
                }
                else {
                    onRouterReady();
                }
            });
        }
        else {
            self.RouterClient.onReady(onRouterReady);
        }
    };
};
/** When running unit tests, we don't want to use the real Logger.
 * `fin` is an easy indicator of our environment.
 * @TODO - refactor to some sort of global like FSBL.environment. */
exports.Logger = typeof fin !== "undefined" ?
    new exports.LoggerConstructor()
    : new localLogger_1.LocalLogger();
exports.default = exports.Logger;


/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if(!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true,
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
Object.defineProperty(exports, "__esModule", { value: true });
/** The global `window` object. We cast it to a specific interface here to be
 * explicit about what Finsemble-related properties it may have.*/
const Globals = 
/** In our testing environments (i.e, mocha running in node.js),
 * `window` is not defined. Therefore, we have to check that `window`
 * exists; otherwise, in node, `process` is the global context.
 */
typeof window !== "undefined" ?
    window
    : process;
class SystemWindow {
    constructor(params, cb, errCb) {
        return new fin.desktop.Window(params, cb);
    }
    static get getCurrent() {
        return fin.desktop.Window.getCurrent;
    }
    static get wrap() {
        return fin.desktop.Window.wrap;
    }
}
class Application {
    constructor(params, cb, errCb) {
        return new fin.desktop.Application(params, cb);
    }
    static get getCurrent() {
        return fin.desktop.Application.getCurrent;
    }
    static get wrap() {
        return fin.desktop.Application.wrap;
    }
}
class SystemNotification {
    constructor(params) {
        new fin.desktop.Notification(params);
    }
}
class System {
    static get Application() {
        return Application;
    }
    static get Window() {
        return SystemWindow;
    }
    static get Notification() {
        return SystemNotification;
    }
    static getMousePosition(cb) {
        fin.desktop.System.getMousePosition((mousePosition) => {
            if (mousePosition.left || mousePosition.left === 0)
                mousePosition.x = mousePosition.left;
            if (mousePosition.top || mousePosition.top === 0)
                mousePosition.y = mousePosition.top;
            cb(null, mousePosition);
        }, (err) => { cb(err, null); });
    }
    static getMonitorInfo(cb) {
        fin.desktop.System.getMonitorInfo((info) => {
            cb(info);
        });
    }
    // static get makes this behave like a static variable. so calling system.ready is eqivalent to fin.desktop.main.
    static get ready() {
        return fin.desktop.main;
    }
    static get getHostSpecs() {
        return fin.desktop.System.getHostSpecs;
    }
    static get launchExternalProcess() {
        return fin.desktop.System.launchExternalProcess;
    }
    static get terminateExternalProcess() {
        return fin.desktop.System.terminateExternalProcess;
    }
    static get getAllApplications() {
        return fin.desktop.System.getAllApplications;
    }
    static get exit() {
        return fin.desktop.System.exit;
    }
    static get clearCache() {
        return fin.desktop.System.clearCache;
    }
    static get showDeveloperTools() {
        return fin.desktop.System.showDeveloperTools;
    }
    static get getRuntimeInfo() {
        return fin.desktop.System.getRuntimeInfo || chrome.desktop.getDetails;
    }
    static get addEventListener() {
        /* events we use so far in Finsemble: monitor-info-changed, session-changed */
        return fin.desktop.System.addEventListener;
    }
    static get getVersion() {
        return fin.desktop.System.getVersion;
    }
    static get openUrlWithBrowser() {
        return fin.desktop.System.openUrlWithBrowser;
    }
    static get getAllWindows() {
        return fin.desktop.System.getAllWindows;
    }
    static FinsembleReady(cb) {
        if (Globals.FSBL && Globals.FSBL.addEventListener) {
            return Globals.FSBL.addEventListener("onready", cb);
        }
        return window.addEventListener("FSBLready", cb);
    }
    // This is not overriding or pointing to Openfin. This is the pattern used to close applications.
    static closeApplication(app, cb = Function.prototype) {
        const promiseResolver = (resolve) => {
            let t;
            let timeoutCleared = false;
            // Need to terminate after closing because otherwise applications sit around in OpenFin with isRunning: false.
            let terminateAndResolve = () => {
                if (timeoutCleared)
                    return;
                timeoutCleared = true;
                console.log("terminating ", app.uuid);
                clearTimeout(t);
                app.terminate(() => {
                    cb();
                    resolve();
                }, () => {
                    app.terminate();
                });
            };
            // Sometimes app.close() never calls back (only happens with logger). So after 2 seconds terminate.
            t = setTimeout(terminateAndResolve, 2000);
            console.log("closing ", app.uuid);
            // Try to close normally
            app.close(false, terminateAndResolve, () => {
                if (timeoutCleared)
                    return;
                clearTimeout(t);
                // If closing fails, force close
                console.log("force closing ", app.uuid);
                app.close(true, terminateAndResolve, terminateAndResolve);
            });
        };
        return new Promise(promiseResolver);
    }
}
exports.System = System;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(58);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    return exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (typeof process !== 'undefined' && 'env' in process) {
    return process.env.DEBUG;
  }
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @introduction
 * <h2>Router Client Instance</h2>
 * Exports a single shared instance of the router client.  See {@link RouterClientConstructor} for the complete API definition with examples.
 *
 * Example:
 *
 *	// get a shared instance of RouterClient (shared within the containing component or service)
 *	var RouterClient = require('./routerClientInstance').default;
 *
 * @namespace routerClientInstance
 * @shouldBePublished false
 */
const routerClientConstructor_1 = __webpack_require__(45);
const logger_1 = __webpack_require__(2);
let RCConstructor = routerClientConstructor_1.RouterClientConstructor;
/** The logger needs a router client, and the router client needs a logger.
 * To get around this fundamental circular dependency, we pass a reference
 * of the RouterClient to the Logger. Only after this is called will the
 * RouterClient and Logger be ready. If RouterClient is NOT required before
 * the Logger, then this file will be dynamically required at Logger.start().
 */
/** An instance of the IRouterClient interface, (that is, the Router Client).
 * All other clients are built on top of the RouterClient; its API is the
 * primary form of communication between the various components of Finsemble.
 */
let RouterClientInstance = new RCConstructor({ clientName: "RouterClient" });
logger_1.Logger.setRouterClient(RouterClientInstance);
exports.default = RouterClientInstance;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var keys = __webpack_require__(65);
var hasBinary = __webpack_require__(25);
var sliceBuffer = __webpack_require__(57);
var after = __webpack_require__(44);
var utf8 = __webpack_require__(75);

var base64encoder;
if (global && global.ArrayBuffer) {
  base64encoder = __webpack_require__(47);
}

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = __webpack_require__(48);

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if ('function' == typeof supportsBinary) {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if ('function' == typeof utf8encode) {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof global.Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  if (data === undefined) {
    return err;
  }
  // String data
  if (typeof data == 'string') {
    if (data.charAt(0) == 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      data = tryDecode(data);
      if (data === false) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

function tryDecode(data) {
  try {
    data = utf8.decode(data);
  } catch (e) {
    return false;
  }
  return data;
}

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!base64encoder) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary == 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data != 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data == '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = ''
    , n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (':' != chr) {
      length += chr;
    } else {
      if ('' == length || (length != (n = Number(length)))) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      msg = data.substr(i + 1, n);

      if (length != msg.length) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      if (msg.length) {
        packet = exports.decodePacket(msg, binaryType, true);

        if (err.type == packet.type && err.data == packet.data) {
          // parser error in individual packet - ignoring payload
          return callback(err, 0, 1);
        }

        var ret = callback(packet, i + n, l);
        if (false === ret) return;
      }

      // advance cursor
      i += n;
      length = '';
    }
  }

  if (length != '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  var numberTooLong = false;
  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] == 255) break;

      if (msgLength.length > 310) {
        numberTooLong = true;
        break;
      }

      msgLength += tailArray[i];
    }

    if(numberTooLong) return callback(err, 0, 1);

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Expose `Emitter`.
 */

if (true) {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__systemSettings__ = __webpack_require__(53);
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/


/**
 * @introduction
 * <h2>Finsemble Vaidate Functions</h2>
 *
 */

/**
 * Constructor for Finsemble argment validator.
 *
 * Validatation logic is ONLY RAN when SystemSettings diagnotics level is set to debug (i.e. 4 or above)
 * A failed validation will generate a warning message, but nothing more; however application logic can check the validation results.
 *
 * @param {string} console Finsemble console object used to display messages and check diagnotic level
 * @constructor
 * @shouldBePublished false
 */
var Validate = function () {

	function warningMsg(paramDescript, thisArg, thisArgType) {

		function getErrorObject() {
			try {
				throw Error('');
			} catch (err) {
				return err;
			}
		}

		var err = getErrorObject();

		var caller_line1 = err.stack.split("\n")[5];
		var index1 = caller_line1.indexOf("at ");
		var msgPart1 = caller_line1.slice(index1 + 2, caller_line1.length);

		var caller_line2 = err.stack.split("\n")[6];
		var index2 = caller_line2.indexOf("at ");
		var msgPart2 = caller_line2.slice(index2 + 2, caller_line2.length);

		console.warn("parameter validation failed: parameter " + paramDescript + " is of type '" + typeof thisArg + "' but should be of type '" + thisArgType + "' in" + msgPart1 + " called by" + msgPart2);
	}

	/**
  * Confirm parameters are valid. A variable number of parameter pairs are supported.
  * @param {any} param1 is arg to validate
  * @param {string} paramType1 is required type for parameter (if '=' suffix then parameter is optional). "any" represents any type (but not "undefined").
  * @param {any=} param2 is next arg to validate
  * @param {string=} paramType2 os required type for next arg
  * @return {boolean} returns turn if parameter list is valid; otherwise, false.
  *
  * @example
  *
  * var validate = new Validate(console);
  * validate.args(name, "string", age, "number")
  *
  * validate.args(topic, "string", initialState, "object="); // with optional paramter (represented by "=")
  *
  * validate.args(topic, "string", initialState, "any"); // with "any" type
  *
  * validate.args(subscribeIDStruct, "object") && validate.args(subscribeIDStruct.subscribeID, "string"); // only do second varidate if first test successful
  *
  * validate.args(subscribeIDStruct, "object", subscribeIDStruct.subscribeID, "string"); // only check second parm if first validated successful
  *
  * validate.args(topic, "any", initialState, "object=", params, "object="); // depending on logic, can break into separate validations
  * params = params || {};
  * validate.args(params.subscribeCallback, "function=", params.publishCallback, "function=", params.unsubscribeCallback, "function=");
  */
	this.args = function (param1, paramType1, param2, paramType2 /*.....optional more paramter pairs....*/) {
		var returnCode = true;
		if (__WEBPACK_IMPORTED_MODULE_0__systemSettings__["a" /* default */].validationEnabled()) {
			var parmCount = arguments.length;
			if ((parmCount + 1) % 2 !== 0) {
				// parameters must come in pairs (i.e. even number)
				for (var i = 0; i < parmCount; i = i + 2) {
					var optionalArg = false;
					var thisArg = arguments[i];
					var thisArgType = arguments[i + 1];
					if (thisArgType.slice(-1) === "=") {
						// if last char is "=" then optional argument
						thisArgType = thisArgType.slice(0, -1);
						optionalArg = true;
					}
					if (typeof thisArg !== thisArgType) {
						// confirms basic case -- the required type
						if (!optionalArg || typeof thisArg !== "undefined") {
							// but optional parms can be undefined
							if (typeof thisArg === "undefined" || thisArgType !== "any") {
								// but "any" type doesn't have to match but can't be undefined
								var parameterPosition = i / 2 + 1;
								warningMsg(parameterPosition, thisArg, thisArgType);
								returnCode = false;
								break;
							}
						}
					}
				}
			} else {
				console.warn("validate.args requires even number of parameters: " + JSON.stringify(arguments));
			}
		}
		return returnCode; // always return turn when validation is disable due debug lebel turned off
	};

	/**
  * Confirm parameters are valid. args2() has the same functionality as args() except a third "parameter description" is passed in for each argument varified
  * Typically this for passing in a properties name for better diagnostic messages when varifying object properties.
  * A variable number of parameter "triples"" are supported.
  *
  * @param {string} paramName1 is descriptive name of param1 (for diagnostic message)
  * @param {any} param1 is arg to validate
  * @param {string} paramType1 is required type for parameter (if '=' suffix then parameter is optional). "any" represents any type (but not "undefined").
  * @param {string} paramName2 is descriptive name of param1 (for diagnostic message)
  * @param {any} param2 is arg to validate
  * @param {string} paramType2 is required type for parameter (if '=' suffix then parameter is optional). "any" represents any type (but not "undefined").
  * @return {boolean} returns turn if parameter list is valid; otherwise, false.
  *
  * @example
  *
  * var validate = new Utils.Validate(console);
  * validate.args2("record.name", record.name, "string", "record.age", age, "number")
  *
  * // common case using args() and args2() together
  * validate.args(topic, "any", initialState, "object=", params, "object=") &&
  *   validate.args2("params.subscribeCallback", params.subscribeCallback, "function=", "params.publishCallback", params.publishCallback, "function=") &&
  *   validate.args2("params.unsubscribeCallback", params.unsubscribeCallback, "function=");
  */
	this.args2 = function (paramName1, param1, paramType1, paramName2, param2, paramType2 /*.....optional, more paramter sets of three....*/) {

		var returnCode = true;
		if (__WEBPACK_IMPORTED_MODULE_0__systemSettings__["a" /* default */].validationEnabled()) {
			var parmCount = arguments.length;
			if ((parmCount + 1) % 3 !== 0) {
				// parameters must come in sets of three
				for (var i = 0; i < parmCount; i = i + 3) {
					var optionalArg = false;
					var thisArgName = arguments[i];
					var thisArg = arguments[i + 1];
					var thisArgType = arguments[i + 2];
					if (thisArgType.slice(-1) === "=") {
						// if last char is "=" then optional argument
						thisArgType = thisArgType.slice(0, -1);
						optionalArg = true;
					}
					if (typeof thisArg !== thisArgType) {
						// confirms basic case -- the required type
						if (!optionalArg || typeof thisArg !== "undefined") {
							// but optional parms can be undefined
							if (typeof thisArg === "undefined" || thisArgType !== "any") {
								// but "any" type doesn't have to match but can't be undefined
								var parameterPosition = i / 2 + 1;
								warningMsg(thisArgName, thisArg, thisArgType);
								returnCode = false;
								break;
							}
						}
					}
				}
			} else {
				console.warn("validate.args requires even number of parameters: " + JSON.stringify(arguments));
			}
		}
		return returnCode; // always return turn when validation is disable due debug lebel turned off
	};
};

/* harmony default export */ __webpack_exports__["default"] = (new Validate());

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\validate.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\validate.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony export (immutable) */ __webpack_exports__["getOpenfinVersion"] = getOpenfinVersion;
/* harmony export (immutable) */ __webpack_exports__["castToPromise"] = castToPromise;
/* harmony export (immutable) */ __webpack_exports__["isPercentage"] = isPercentage;
/* harmony export (immutable) */ __webpack_exports__["crossDomain"] = crossDomain;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAllMonitors", function() { return getAllMonitors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonitorFromOpenFinXY", function() { return getMonitorFromOpenFinXY; });
/* harmony export (immutable) */ __webpack_exports__["getMonitorFromWindow"] = getMonitorFromWindow;
/* harmony export (immutable) */ __webpack_exports__["getFinWindow"] = getFinWindow;
/* harmony export (immutable) */ __webpack_exports__["getWindowDescriptor"] = getWindowDescriptor;
/* harmony export (immutable) */ __webpack_exports__["findMonitor"] = findMonitor;
/* harmony export (immutable) */ __webpack_exports__["getWhichMonitor"] = getWhichMonitor;
/* harmony export (immutable) */ __webpack_exports__["getMonitorFromCommand"] = getMonitorFromCommand;
/* harmony export (immutable) */ __webpack_exports__["windowOnMonitor"] = windowOnMonitor;
/* harmony export (immutable) */ __webpack_exports__["getMonitorByDescriptor"] = getMonitorByDescriptor;
/* harmony export (immutable) */ __webpack_exports__["getMonitor"] = getMonitor;
/* harmony export (immutable) */ __webpack_exports__["getMyWindowIdentifier"] = getMyWindowIdentifier;
/* harmony export (immutable) */ __webpack_exports__["camelCase"] = camelCase;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["getUniqueName"] = getUniqueName;
/* harmony export (immutable) */ __webpack_exports__["guuid"] = guuid;
/* harmony export (immutable) */ __webpack_exports__["injectJS"] = injectJS;
/* harmony export (immutable) */ __webpack_exports__["openSharedData"] = openSharedData;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__system__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__system___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__system__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__monitorsAndScaling__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_uuid_v1__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_uuid_v1___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_uuid_v1__);
/*!
 * Copyright 2017 by ChartIQ, Inc.
 * All rights reserved.
 */


const Monitors = new __WEBPACK_IMPORTED_MODULE_1__monitorsAndScaling__["a" /* default */](Function.prototype, Function.prototype, { System: __WEBPACK_IMPORTED_MODULE_0__system__["System"] });
/* harmony export (immutable) */ __webpack_exports__["Monitors"] = Monitors;




var allMonitors = [];

/*if (typeof fin !== "undefined") { //For Docking Tests -> removing this because Monitors are now handled bu the Monitors object. Docking tests will fail.
	System.ready(() => {
		System.addEventListener("monitor-info-changed", function () {
			allMonitors = [];
			getAllMonitors();
		});
	});
}*/

/**
 * Gets the openfin version in object form.
 */
function getOpenfinVersion(cb = Function.prototype) {
	return new Promise(function (resolve /*, reject*/) {
		__WEBPACK_IMPORTED_MODULE_0__system__["System"].getVersion(ver => {
			let verArr = ver.split(".").map(Number);
			let versionObject = {
				major: verArr[0],
				chromium: verArr[1],
				minor: verArr[2],
				patch: verArr[3]
			};
			cb(versionObject);
			resolve({ versionObject });
		});
	});
};
/**
	 * Given a function _that returns a value_, this method will return a thenable object.
	 * **NOTE** This will not work if your function doesn't return something.
	 *  <example>
	 *		function myFunc(){
				console.log('I promise that this is not a promise.');
			 }
		let myPromise = util.castToPromise(myFunc);
		myPromise().then(doSomethingElse);
		</example>

	 */
function castToPromise(f) {
	return function () {
		return new Promise((resolve, reject) => {
			//Calls f, checks to see if the returned object has a `then` method. if not, it will resolve the result from the intiial function.
			const result = f.apply(null, Array.from(arguments));
			try {
				return result.then(resolve, reject);
			} catch (e) {
				if (e instanceof TypeError) {
					resolve(result);
				} else {
					reject(e);
				}
			}
		});
	};
};

/**
 * @introduction
 * <h2>Finsemble Utility Functions</h2>
 */

function isPercentage(val) {
	if (typeof val !== "string") {
		return false;
	}
	return val.indexOf("%") !== -1;
};

function crossDomain(url) {
	var parser = document.createElement("a");
	parser.href = url;

	var isSameHost = window.location.hostname === parser.hostname;

	var isSameProtocol = window.location.protocol === parser.protocol;

	var wport = window.location.port === undefined ? window.location.port : 80;
	var pport = parser.port === undefined ? parser.port : 80;
	var isSamePort = wport === pport;

	var isCrossDomain = !(isSameHost && isSamePort && isSameProtocol);
	__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("Launcher crossDomain=" + isCrossDomain + " (" + isSameHost + ":" + isSameProtocol + ":" + isSamePort + ")");
	return isCrossDomain;
};

/**
 * Gets an array of monitor descriptors. Essentially rationalizing the results of OpenFin getMonitorInfo.
 * into a single array with additional information added.
 *
 * whichMonitor is set to the secondary monitor number, or "primary" if the primary monitor.
 * position is set to a zero index, where primary is the zero position, and each non-primary increments thereafter.
 *
 * Additionally, width and height are calculated and filled in for availableRect and monitorRect.
 *
 * @param {callback-array} cb Returns a list of monitor descriptors (optional or use promise)
 */
var getAllMonitors = Monitors.getAllMonitors;

/**
 * Retrieves a monitor descriptor given an absolute X Y on the OpenFin virtual screen
 * @param  {number} x The x position
 * @param  {number} y The y position
 * @param {callback-object}  cb Returns the monitor information from OpenFin.
 * "isPrimary" is set to true if it's the primary monitor.
 * null is returned if the x,y coordinates are beyond the bounds of the virtual screen.
 */
var getMonitorFromOpenFinXY = Monitors.getMonitorFromScaledXY;

/**
 * Retrieves a monitor descriptor for a window. If the window straddles two monitors
 * then the monitor from the top left is provided and "straddling" flag is set to true.
 *
 * @param  {WindowDescriptor}   windowDescriptor A windowDescriptor
 * @param  {Function} cb               Returns a monitor descriptor (optional or use promise)
 * @returns {Promise} A promise that resolves to a monitor descriptor
 */
function getMonitorFromWindow(windowDescriptor, cb) {
	var x = Number.isFinite(windowDescriptor.x) ? windowDescriptor.x : windowDescriptor.defaultLeft;
	var y = Number.isFinite(windowDescriptor.y) ? windowDescriptor.y : windowDescriptor.defaultTop;
	var x2 = x + windowDescriptor.defaultWidth;
	var y2 = y + windowDescriptor.defaultHeight;
	return new Promise(function (resolve, reject) {

		// get monitor of top-left
		Monitors.getMonitorFromScaledXY(x, y, function (monitor) {
			if (!monitor) {
				__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("getMonitorFromWindow - top-left is off screen, trying bottom right");
				// get monitor of bottom-right
				Monitors.getMonitorFromScaledXY(x2, y2, function (monitor) {
					if (!monitor) {
						__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("getMonitorFromWindow - bottom-right is off screen, getting primary");
						// get primary monitor - add message to the monitor saying that this window isn't really on a monitor
						Monitors.getAllMonitors(function (monitors) {
							if (monitors[0]) {
								if (cb) {
									cb(monitors[0]);
								}
								resolve(monitors[0]);
							} else {
								reject(new Error("Cannot find monitor for window."));
								if (cb) {
									cb(null);
								}
							}
						});
						return;
					}
					monitor = clone(monitor);
					var monitorRect = monitor.monitorRect;
					if (monitorRect.left < x || monitorRect.right < y) {
						monitor.straddling = true;
					}
					if (cb) {
						cb(monitor);
					}
					resolve(monitor);
				});
				return;
			}
			monitor = clone(monitor);
			var monitorRect = monitor.monitorRect;
			if (monitorRect.right > x2 || monitorRect.bottom > y2) {
				monitor.straddling = true;
			}
			if (cb) {
				cb(monitor);
			}
			resolve(monitor);
		});
	});
};

/**
 * Returns a finWindow or null if not found
 * @param  {WindowIdentifier}   windowIdentifier A window identifier
 * @param  {Function} cb               Optional callback containing finWindow or null if not found (or use Promise)
 * @return {Promise}                    Promise that resulves to a finWindow or rejects if not found
 */
function getFinWindow(windowIdentifier, cb) {
	return new Promise(function (resolve, reject) {
		// Default to current window
		var myWindow = __WEBPACK_IMPORTED_MODULE_0__system__["System"].Window.getCurrent();

		// Get OpenFin options (windowDescriptor) for current window
		// we need this info even if we're going to reference a different window
		myWindow.getOptions(function (options) {
			// If windowName is provided, then find that window
			if (windowIdentifier && windowIdentifier.windowName) {
				// If we didn't get a uuid from the caller, then assume
				// it's the same window as current window
				if (!windowIdentifier.uuid) {
					windowIdentifier.uuid = options.uuid;
				}
				/**
     * Try to wrap the window; if it exists, getInfo will get in
     *  to the success function. If not, it'll go into the error callback.
     */
				let remoteWindow = __WEBPACK_IMPORTED_MODULE_0__system__["System"].Window.wrap(windowIdentifier.uuid, windowIdentifier.windowName);
				remoteWindow.getInfo(() => {
					if (cb) {
						cb(remoteWindow);
					}

					resolve(remoteWindow);
				}, function () {
					if (cb) {
						cb(null);
					}
					reject("Window " + windowIdentifier.windowName + " not found." + `UUID: ${windowIdentifier.uuid}`);
					console.debug("util.getFinWindow: Window " + windowIdentifier.windowName + " not found");
					return;
				});
			} else if (windowIdentifier && windowIdentifier.componentType) {
				if (typeof LauncherService !== "undefined") {
					let remoteWindow = LauncherService.componentFinder(windowIdentifier);
					if (remoteWindow) {
						resolve(remoteWindow);
						if (cb) {
							cb(remoteWindow);
						}
					} else {
						reject("util.getFinWindow: Component " + windowIdentifier.componentType + " not found.");
						if (cb) {
							cb(null);
						}
					}
				} else {
					//@TODO, get this through a remote call to Launcher service
					reject("getFinWindow by componentType is currently only operable within LaunchService");
					if (cb) {
						cb(null);
					}
				}
			} else {
				// return windowDescriptor for current window
				if (cb) {
					cb(myWindow);
				}
				resolve(myWindow);
			}
		});
	});
};

/**
 * Retrieves a windowDescriptor given a windowIdentifier
 * @param {WindowIdentifier} [windowIdentifier] The window to locate. If empty then the current window is returned.
 * @param {function} cb Function to retrieve result (optional or use Promise)
 * @return {Promise} A promise that resolves to a WindowDescriptor
 */
function getWindowDescriptor(windowIdentifier, cb) {
	return new Promise(function (resolve, reject) {
		getFinWindow(windowIdentifier).then(function (finWindow) {
			finWindow.getOptions(function (options) {
				if (cb) {
					cb(options);
				}
				resolve(options);
			});
		}).catch(function (errorMessage) {
			console.warn(errorMessage);
			if (cb) {
				cb(null);
			}
			reject(errorMessage);
		});
	});
};

function findMonitor(monitors, field, value) {
	for (var i = 0; i < monitors.length; i++) {
		var monitor = monitors[i];
		if (monitor[field] === value) {
			return monitor;
		}
	}
	return null;
};
/**
 * @param {number} commandMonitor
 * @param {Array.<Object>} monitors
 * @param {number} launchingMonitorPosition
 * commandMonitor, monitors, launchingMonitorPosition
 */
function getWhichMonitor(params, cb) {
	//First release of this method took 3 params.
	if (arguments.length > 2) {
		params = {
			commandMonitor: arguments[0],
			monitors: arguments[1],
			launchingMonitorPosition: arguments[2]
		};
		cb = null;
	}
	var monitor;
	var { commandMonitor, monitors, launchingMonitorPosition } = params;
	var isANumber = commandMonitor && commandMonitor !== "" || commandMonitor === 0;
	if (commandMonitor === "primary") {
		monitor = findMonitor(monitors, "whichMonitor", "primary");
	} else if (commandMonitor === "next") {
		let position = launchingMonitorPosition + 1;
		if (position >= monitors.length) {
			position = 0;
		}
		monitor = monitors[position];
	} else if (commandMonitor === "previous") {
		let position = launchingMonitorPosition - 1;
		if (position < 0) {
			position = monitors.length - 1;
		}
		monitor = monitors[position];
	} else if (commandMonitor === "mine") {
		var waiting = true;
		//assuming this is always used in the launcher
		var w = activeWindows.getWindow(params.windowIdentifier.windowName);
		w._getBounds((err, bounds) => {
			if (!err) {
				Monitors.getMonitorFromScaledXY(bounds.left, bounds.top, monitor => {
					cb(monitor);
				});
			} else {
				monitor = monitors[0];
				cb(monitor);
			}
		});
	} else if (isANumber) {
		if (commandMonitor >= monitors.length) {
			commandMonitor = monitors.length - 1;
		}
		monitor = monitors.filter(monitor => monitor.position === commandMonitor)[0];
	} else if (launchingMonitorPosition) {
		monitor = monitors[launchingMonitorPosition];
	}

	if (!monitor) {
		// primary if no monitor found
		monitor = monitors[0];
	}

	if (!waiting) {
		if (cb) {
			cb(monitor);
		} else {
			//maintaining backwards compatibility
			return monitor;
		}
	}
};

/**
 * Gets a monitorInfo based on a command. A command is the typical "monitor" param
 * @param  {string} commandMonitor   Monitor command. See {@link LauncherClient#spawn}
 * @param  {object} windowIdentifier The windowIdentifier of the calling function. Necessary to support "next","previous" an default.
 * @param {function} [cb] Optional callback
 * @returns {Promise} A promise that resolves to a monitorInfo
 */
function getMonitorFromCommand(commandMonitor, windowIdentifier, cb) {
	return new Promise(function (resolve /*, reject*/) {
		getMonitor(windowIdentifier, function (monitorInfo) {
			Monitors.getAllMonitors(function (monitors) {
				let params = {
					commandMonitor: commandMonitor,
					monitors: monitors,
					launchingMonitorPosition: monitorInfo.position
				};
				getWhichMonitor(params, function (finalMonitorInfo) {
					if (cb) {
						cb(finalMonitorInfo);
					}
					resolve(finalMonitorInfo);
				});
			});
		});
	});
};

/**
 * @private
 * @param {WindowDescriptor} windowDescriptor
 * @param {monitorDimensions} monitorDimensions
 * @returns {boolean} Whether window is on the current monitor.
 */
function windowOnMonitor(windowDescriptor, monitorDimensions) {
	//if right or left edge is within the window's bounds.
	if (windowDescriptor.left >= monitorDimensions.left && windowDescriptor.left < monitorDimensions.right || windowDescriptor.right <= monitorDimensions.right && windowDescriptor.right > monitorDimensions.left) {
		return true;
	}
	return false;
};
/**
 * Convenience function to get the monitor for the current window
 * @param {WindowDescriptor} [windowIdentifier] The window to find the monitor for. Current window if empty.
 * @param  {Function} cb Returns a monitor descriptor (optional or use Promise)
 * @returns {Promise} A promise that resolves to a monitor descriptor
 */
function getMonitorByDescriptor(windowDescriptor, cb) {
	return new Promise(function (resolve /*, reject*/) {
		getMonitorFromWindow(windowDescriptor, function (monitor) {
			if (cb) {
				cb(monitor);
			}
			resolve(monitor);
		});
	});
};
/**
 * Convenience function to get the monitor for the current window
 * @param {WindowIdentifier} [windowIdentifier] The window to find the monitor for. Current window if empty.
 * @param  {Function} cb Returns a monitor descriptor (optional or use Promise)
 * @returns {Promise} A promise that resolves to a monitor descriptor
 */
function getMonitor(windowIdentifier, cb) {
	return new Promise(function (resolve, reject) {
		getWindowDescriptor(windowIdentifier, function (windowDescriptor) {
			if (!windowDescriptor) {
				reject("util.getMonitor: Can't locate windowDescriptor.");
			} else {
				getMonitorFromWindow(windowDescriptor, function (monitor) {
					if (cb) {
						cb(monitor);
					}
					resolve(monitor);
				});
			}
		});
	});
};
/**
 * Returns a windowIdentifier for the current window
 * @param {Function} cb Callback function returns windowIdentifier for this window (optional or use Promise)
 * @returns {Promise} A promise that resolves to a windowIdentifier
 */
// @TODO, [Terry] this should be eliminated in favor of calls to windowClient.getWindowIdentifier()
function getMyWindowIdentifier(cb) {
	var finWindow = __WEBPACK_IMPORTED_MODULE_0__system__["System"].Window.getCurrent();
	return new Promise(function (resolve) {
		finWindow.getOptions(windowDescriptor => {
			var componentType = null;

			// Figure out the component type from what was originally stored when we launched the window
			// options.customData is where our stuff is found
			var customData = windowDescriptor.customData;
			if (customData && customData.component) {
				componentType = customData.component.type;
			}
			var windowIdentifier = {
				windowName: finWindow.name,
				uuid: finWindow.uuid,
				componentType: componentType
			};

			if (cb) {
				cb(windowIdentifier);
			}
			resolve(windowIdentifier);
		});
	});
};
/**
 *	@returns {string} Transforms an array of strings into a camelcased string.
 * @memberof Utils
 */
function camelCase() {
	var str = "";
	for (var i = 0; i < arguments.length; i++) {
		str += " " + arguments[i];
	}
	return str.replace(/\s(.)/g, function ($1) {
		return $1.toUpperCase();
	}).replace(/\s/g, "").replace(/^(.)/, function ($1) {
		return $1.toLowerCase();
	});
};

/**
 * Convenience method for cloning an object.
 * @param  {any} from The thing you want to copy
 * @param {any=} to Where you want your copy to end up.
 * @return {any} to Where you want your copy gwe end up.
 */
function clone(from, to) {
	if (from === null || typeof from !== "object") {
		return from;
	}
	// if (from.constructor != Object && from.constructor != Array) return from;
	if (from.constructor == Date || from.constructor == RegExp || from.constructor == Function || from.constructor == String || from.constructor == Number || from.constructor == Boolean) {
		return new from.constructor(from);
	}

	to = to || new from.constructor();

	for (var n in from) {
		to[n] = typeof to[n] === "undefined" ? clone(from[n], null) : to[n];
	}

	return to;
}

function getUniqueName(baseName) {
	if (!baseName) {
		baseName = "RouterClient";
	}
	var uuid = baseName + "-" + Math.floor(Math.random() * 100) + "-" + Math.floor(Math.random() * 10000);
	return uuid;
};

function guuid() {
	return __WEBPACK_IMPORTED_MODULE_3_uuid_v1___default()(); // return global uuid
};

function injectJS(path, cb) {
	//Inject a script tag with the path given. Once the script is loaded, it executes the callback.
	var script = document.createElement("script");
	script.onload = cb;
	script.type = "text/javascript";
	script.async = true;
	script.src = path;
	var head = document.getElementsByTagName("head")[0];
	var firstScript = head.getElementsByTagName("script")[0];
	head.insertBefore(script, firstScript);
};

/**
 * This will either open a component with the shared data or publish the shared data using the linker client if the window is linked
 * @experimental
 *
 * @param {object} params
 * @param {object} [params.data]
 * @param {boolean} [params.publishOnly] if the component is linked, this will only publish the data, not force open a window if it does not exist. If the component is not linked, this is ignored.
 * @param {function} [params.multipleOpenerHandler] Optional. This function is called with on object that contains a map of componentTypes to the data types they can open. It must return a list of components to be opened. If no handler is provided, the first found component will be chosen. It is possible that the component opened may not handle all the data provided.
 * @param {function} cb callback invoked with action taken.
 *
 * @since 1.5: multipleOpenerHandler and callback added
 *
 */
function openSharedData(params, cb) {
	var launcherClient = FSBL.Clients.LauncherClient;
	var linkerClient = FSBL.Clients.LinkerClient;
	//If no handler is specified to deal with multiple components, use the first found
	if (!params.multipleOpenerHandler) params.multipleOpenerHandler = function (componentsMappedToData) {
		// find the component that can open the most amount of data
		var maxDataTypesOpened = 0;
		var componentToOpen;
		for (var componentType of Object.keys(componentsMappedToData)) {
			if (componentsMappedToData[componentType].length > maxDataTypesOpened) {
				componentToOpen = componentType;
				maxDataTypesOpened = componentsMappedToData[componentType].length;
			}
		}
		return [componentToOpen];
	};

	var errors = [];
	var componentsMappedToData = {};

	// Loop through the data
	launcherClient.getComponentsThatCanReceiveDataTypes({ dataTypes: Object.keys(params.data) }, function (err, dataTypeComponentMap) {
		for (var dataType of Object.keys(dataTypeComponentMap)) {
			if (!dataTypeComponentMap[dataType].componentTypes.length) {
				var error = "No Components Available to Handle the type: " + dataType;
				errors.push(error);
				__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.error(error);
			} else {
				for (var component of dataTypeComponentMap[dataType].componentTypes) {
					if (!componentsMappedToData[component]) {
						componentsMappedToData[component] = [dataType];
					} else componentsMappedToData[component].push(dataType);
				}
			}
		}

		// What if multiple components need to be opened?
		var componentsToOpen = Object.keys(componentsMappedToData);
		if (componentsToOpen.length) {
			if (componentsToOpen.length > 1) {
				componentsToOpen = params.multipleOpenerHandler(componentsMappedToData);
			}
			var linkerChannels = Object.keys(linkerClient.channels);
			if (linkerChannels.length) {
				//if linked
				var linkedWindows = linkerClient.getLinkedComponents({ componentTypes: componentsToOpen, windowIdentifier: linkerClient.windowIdentifier() });
				// TODO: deal with the case if not all componentTypes that need to be opened are linked
				if (linkedWindows.length || params.publishOnly) {
					// If pubishOnly is true then just publish, not spawn
					linkerClient.publish({
						dataType: "Finsemble.DragAndDropClient",
						data: params.data
					});
					if (cb) cb(errors.length ? errors : null, "Data published");
				} else {
					// spawn
					for (let component of componentsToOpen) {
						launcherClient.spawn(component, {
							data: {
								sharedData: params.data,
								linker: {
									channels: linkerChannels
								}
							},
							addToWorkspace: true
						});
					}
					if (cb) cb(errors.length ? errors : null, "Linked Window(s) spawned with data");
				}
			} else {
				if (!params.publishOnly) {
					for (let component of componentsToOpen) {
						launcherClient.spawn(component, {
							data: {
								sharedData: params.data
							},
							addToWorkspace: true
						});
					}
					if (cb) cb(errors.length ? errors : null, "New Window(s) spawned with data");
				}
			}
		} else {
			if (cb) cb(errors.length ? errors : null, null);
		}
	});
};

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\util.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\util.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(setImmediate, process, global, module) {(function (global, factory) {
   true ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.async = global.async || {})));
}(this, (function (exports) { 'use strict';

function slice(arrayLike, start) {
    start = start|0;
    var newLen = Math.max(arrayLike.length - start, 0);
    var newArr = Array(newLen);
    for(var idx = 0; idx < newLen; idx++)  {
        newArr[idx] = arrayLike[start + idx];
    }
    return newArr;
}

/**
 * Creates a continuation function with some arguments already applied.
 *
 * Useful as a shorthand when combined with other control flow functions. Any
 * arguments passed to the returned function are added to the arguments
 * originally passed to apply.
 *
 * @name apply
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {Function} fn - The function you want to eventually apply all
 * arguments to. Invokes with (arguments...).
 * @param {...*} arguments... - Any number of arguments to automatically apply
 * when the continuation is called.
 * @returns {Function} the partially-applied function
 * @example
 *
 * // using apply
 * async.parallel([
 *     async.apply(fs.writeFile, 'testfile1', 'test1'),
 *     async.apply(fs.writeFile, 'testfile2', 'test2')
 * ]);
 *
 *
 * // the same process without using apply
 * async.parallel([
 *     function(callback) {
 *         fs.writeFile('testfile1', 'test1', callback);
 *     },
 *     function(callback) {
 *         fs.writeFile('testfile2', 'test2', callback);
 *     }
 * ]);
 *
 * // It's possible to pass any number of additional arguments when calling the
 * // continuation:
 *
 * node> var fn = async.apply(sys.puts, 'one');
 * node> fn('two', 'three');
 * one
 * two
 * three
 */
var apply = function(fn/*, ...args*/) {
    var args = slice(arguments, 1);
    return function(/*callArgs*/) {
        var callArgs = slice(arguments);
        return fn.apply(null, args.concat(callArgs));
    };
};

var initialParams = function (fn) {
    return function (/*...args, callback*/) {
        var args = slice(arguments);
        var callback = args.pop();
        fn.call(this, args, callback);
    };
};

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

function fallback(fn) {
    setTimeout(fn, 0);
}

function wrap(defer) {
    return function (fn/*, ...args*/) {
        var args = slice(arguments, 1);
        defer(function () {
            fn.apply(null, args);
        });
    };
}

var _defer;

if (hasSetImmediate) {
    _defer = setImmediate;
} else if (hasNextTick) {
    _defer = process.nextTick;
} else {
    _defer = fallback;
}

var setImmediate$1 = wrap(_defer);

/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */
function asyncify(func) {
    return initialParams(function (args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if (isObject(result) && typeof result.then === 'function') {
            result.then(function(value) {
                invokeCallback(callback, null, value);
            }, function(err) {
                invokeCallback(callback, err.message ? err : new Error(err));
            });
        } else {
            callback(null, result);
        }
    });
}

function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (e) {
        setImmediate$1(rethrow, e);
    }
}

function rethrow(error) {
    throw error;
}

var supportsSymbol = typeof Symbol === 'function';

function isAsync(fn) {
    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
}

function wrapAsync(asyncFn) {
    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
}

function applyEach$1(eachfn) {
    return function(fns/*, ...args*/) {
        var args = slice(arguments, 1);
        var go = initialParams(function(args, callback) {
            var that = this;
            return eachfn(fns, function (fn, cb) {
                wrapAsync(fn).apply(that, args.concat(cb));
            }, callback);
        });
        if (args.length) {
            return go.apply(this, args);
        }
        else {
            return go;
        }
    };
}

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Built-in value references. */
var Symbol$1 = root.Symbol;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$1.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString$1.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]';
var undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]';
var funcTag = '[object Function]';
var genTag = '[object GeneratorFunction]';
var proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
var breakLoop = {};

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

function once(fn) {
    return function () {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}

var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

var getIterator = function (coll) {
    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
};

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER$1 : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]';
var arrayTag = '[object Array]';
var boolTag = '[object Boolean]';
var dateTag = '[object Date]';
var errorTag = '[object Error]';
var funcTag$1 = '[object Function]';
var mapTag = '[object Map]';
var numberTag = '[object Number]';
var objectTag = '[object Object]';
var regexpTag = '[object RegExp]';
var setTag = '[object Set]';
var stringTag = '[object String]';
var weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]';
var dataViewTag = '[object DataView]';
var float32Tag = '[object Float32Array]';
var float64Tag = '[object Float64Array]';
var int8Tag = '[object Int8Array]';
var int16Tag = '[object Int16Array]';
var int32Tag = '[object Int32Array]';
var uint8Tag = '[object Uint8Array]';
var uint8ClampedTag = '[object Uint8ClampedArray]';
var uint16Tag = '[object Uint16Array]';
var uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/** Detect free variable `exports`. */
var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports$1 && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$1.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;

  return value === proto;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? {value: coll[i], key: i} : null;
    }
}

function createES2015Iterator(iterator) {
    var i = -1;
    return function next() {
        var item = iterator.next();
        if (item.done)
            return null;
        i++;
        return {value: item.value, key: i};
    }
}

function createObjectIterator(obj) {
    var okeys = keys(obj);
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        return i < len ? {value: obj[key], key: key} : null;
    };
}

function iterator(coll) {
    if (isArrayLike(coll)) {
        return createArrayIterator(coll);
    }

    var iterator = getIterator(coll);
    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
}

function onlyOnce(fn) {
    return function() {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}

function _eachOfLimit(limit) {
    return function (obj, iteratee, callback) {
        callback = once(callback || noop);
        if (limit <= 0 || !obj) {
            return callback(null);
        }
        var nextElem = iterator(obj);
        var done = false;
        var running = 0;
        var looping = false;

        function iterateeCallback(err, value) {
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            }
            else if (value === breakLoop || (done && running <= 0)) {
                done = true;
                return callback(null);
            }
            else if (!looping) {
                replenish();
            }
        }

        function replenish () {
            looping = true;
            while (running < limit && !done) {
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) {
                        callback(null);
                    }
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
            }
            looping = false;
        }

        replenish();
    };
}

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
function eachOfLimit(coll, limit, iteratee, callback) {
    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
}

function doLimit(fn, limit) {
    return function (iterable, iteratee, callback) {
        return fn(iterable, limit, iteratee, callback);
    };
}

// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = once(callback || noop);
    var index = 0,
        completed = 0,
        length = coll.length;
    if (length === 0) {
        callback(null);
    }

    function iteratorCallback(err, value) {
        if (err) {
            callback(err);
        } else if ((++completed === length) || value === breakLoop) {
            callback(null);
        }
    }

    for (; index < length; index++) {
        iteratee(coll[index], index, onlyOnce(iteratorCallback));
    }
}

// a generic version of eachOf which can handle array, object, and iterator cases.
var eachOfGeneric = doLimit(eachOfLimit, Infinity);

/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @example
 *
 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
 * var configs = {};
 *
 * async.forEachOf(obj, function (value, key, callback) {
 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
 *         if (err) return callback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }, function (err) {
 *     if (err) console.error(err.message);
 *     // configs is now a map of JSON data
 *     doSomethingWith(configs);
 * });
 */
var eachOf = function(coll, iteratee, callback) {
    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
    eachOfImplementation(coll, wrapAsync(iteratee), callback);
};

function doParallel(fn) {
    return function (obj, iteratee, callback) {
        return fn(eachOf, obj, wrapAsync(iteratee), callback);
    };
}

function _asyncMap(eachfn, arr, iteratee, callback) {
    callback = callback || noop;
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = wrapAsync(iteratee);

    eachfn(arr, function (value, _, callback) {
        var index = counter++;
        _iteratee(value, function (err, v) {
            results[index] = v;
            callback(err);
        });
    }, function (err) {
        callback(err, results);
    });
}

/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callback
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @example
 *
 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
 *     // results is now an array of stats for each file
 * });
 */
var map = doParallel(_asyncMap);

/**
 * Applies the provided arguments to each function in the array, calling
 * `callback` after all functions have completed. If you only provide the first
 * argument, `fns`, then it will return a function which lets you pass in the
 * arguments as if it were a single function call. If more arguments are
 * provided, `callback` is required while `args` is still optional.
 *
 * @name applyEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s
 * to all call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {Function} - If only the first argument, `fns`, is provided, it will
 * return a function which lets you pass in the arguments as if it were a single
 * function call. The signature is `(..args, callback)`. If invoked with any
 * arguments, `callback` is required.
 * @example
 *
 * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
 *
 * // partial application example:
 * async.each(
 *     buckets,
 *     async.applyEach([enableSearch, updateSchema]),
 *     callback
 * );
 */
var applyEach = applyEach$1(map);

function doParallelLimit(fn) {
    return function (obj, limit, iteratee, callback) {
        return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);
    };
}

/**
 * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
 *
 * @name mapLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 */
var mapLimit = doParallelLimit(_asyncMap);

/**
 * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
 *
 * @name mapSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an array of the
 * transformed items from the `coll`. Invoked with (err, results).
 */
var mapSeries = doLimit(mapLimit, 1);

/**
 * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
 *
 * @name applyEachSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.applyEach]{@link module:ControlFlow.applyEach}
 * @category Control Flow
 * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all
 * call with the same arguments
 * @param {...*} [args] - any number of separate arguments to pass to the
 * function.
 * @param {Function} [callback] - the final argument should be the callback,
 * called when all functions have completed processing.
 * @returns {Function} - If only the first argument is provided, it will return
 * a function which lets you pass in the arguments as if it were a single
 * function call.
 */
var applyEachSeries = applyEach$1(mapSeries);

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

/**
 * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on
 * their requirements. Each function can optionally depend on other functions
 * being completed first, and each function is run as soon as its requirements
 * are satisfied.
 *
 * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence
 * will stop. Further tasks will not execute (so any other functions depending
 * on it will not run), and the main `callback` is immediately called with the
 * error.
 *
 * {@link AsyncFunction}s also receive an object containing the results of functions which
 * have completed so far as the first argument, if they have dependencies. If a
 * task function has no dependencies, it will only be passed a callback.
 *
 * @name auto
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Object} tasks - An object. Each of its properties is either a
 * function or an array of requirements, with the {@link AsyncFunction} itself the last item
 * in the array. The object's key of a property serves as the name of the task
 * defined by that property, i.e. can be used when specifying requirements for
 * other tasks. The function receives one or two arguments:
 * * a `results` object, containing the results of the previously executed
 *   functions, only passed if the task has any dependencies,
 * * a `callback(err, result)` function, which must be called when finished,
 *   passing an `error` (which can be `null`) and the result of the function's
 *   execution.
 * @param {number} [concurrency=Infinity] - An optional `integer` for
 * determining the maximum number of tasks that can be run in parallel. By
 * default, as many as possible.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback. Results are always returned; however, if an
 * error occurs, no further `tasks` will be performed, and the results object
 * will only contain partial results. Invoked with (err, results).
 * @returns undefined
 * @example
 *
 * async.auto({
 *     // this function will just be passed a callback
 *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
 *     showData: ['readData', function(results, cb) {
 *         // results.readData is the file's contents
 *         // ...
 *     }]
 * }, callback);
 *
 * async.auto({
 *     get_data: function(callback) {
 *         console.log('in get_data');
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         console.log('in make_folder');
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: ['get_data', 'make_folder', function(results, callback) {
 *         console.log('in write_file', JSON.stringify(results));
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(results, callback) {
 *         console.log('in email_link', JSON.stringify(results));
 *         // once the file is written let's email a link to it...
 *         // results.write_file contains the filename returned by write_file.
 *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
 *     }]
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('results = ', results);
 * });
 */
var auto = function (tasks, concurrency, callback) {
    if (typeof concurrency === 'function') {
        // concurrency is optional, shift the args.
        callback = concurrency;
        concurrency = null;
    }
    callback = once(callback || noop);
    var keys$$1 = keys(tasks);
    var numTasks = keys$$1.length;
    if (!numTasks) {
        return callback(null);
    }
    if (!concurrency) {
        concurrency = numTasks;
    }

    var results = {};
    var runningTasks = 0;
    var hasError = false;

    var listeners = Object.create(null);

    var readyTasks = [];

    // for cycle detection:
    var readyToCheck = []; // tasks that have been identified as reachable
    // without the possibility of returning to an ancestor task
    var uncheckedDependencies = {};

    baseForOwn(tasks, function (task, key) {
        if (!isArray(task)) {
            // no dependencies
            enqueueTask(key, [task]);
            readyToCheck.push(key);
            return;
        }

        var dependencies = task.slice(0, task.length - 1);
        var remainingDependencies = dependencies.length;
        if (remainingDependencies === 0) {
            enqueueTask(key, task);
            readyToCheck.push(key);
            return;
        }
        uncheckedDependencies[key] = remainingDependencies;

        arrayEach(dependencies, function (dependencyName) {
            if (!tasks[dependencyName]) {
                throw new Error('async.auto task `' + key +
                    '` has a non-existent dependency `' +
                    dependencyName + '` in ' +
                    dependencies.join(', '));
            }
            addListener(dependencyName, function () {
                remainingDependencies--;
                if (remainingDependencies === 0) {
                    enqueueTask(key, task);
                }
            });
        });
    });

    checkForDeadlocks();
    processQueue();

    function enqueueTask(key, task) {
        readyTasks.push(function () {
            runTask(key, task);
        });
    }

    function processQueue() {
        if (readyTasks.length === 0 && runningTasks === 0) {
            return callback(null, results);
        }
        while(readyTasks.length && runningTasks < concurrency) {
            var run = readyTasks.shift();
            run();
        }

    }

    function addListener(taskName, fn) {
        var taskListeners = listeners[taskName];
        if (!taskListeners) {
            taskListeners = listeners[taskName] = [];
        }

        taskListeners.push(fn);
    }

    function taskComplete(taskName) {
        var taskListeners = listeners[taskName] || [];
        arrayEach(taskListeners, function (fn) {
            fn();
        });
        processQueue();
    }


    function runTask(key, task) {
        if (hasError) return;

        var taskCallback = onlyOnce(function(err, result) {
            runningTasks--;
            if (arguments.length > 2) {
                result = slice(arguments, 1);
            }
            if (err) {
                var safeResults = {};
                baseForOwn(results, function(val, rkey) {
                    safeResults[rkey] = val;
                });
                safeResults[key] = result;
                hasError = true;
                listeners = Object.create(null);

                callback(err, safeResults);
            } else {
                results[key] = result;
                taskComplete(key);
            }
        });

        runningTasks++;
        var taskFn = wrapAsync(task[task.length - 1]);
        if (task.length > 1) {
            taskFn(results, taskCallback);
        } else {
            taskFn(taskCallback);
        }
    }

    function checkForDeadlocks() {
        // Kahn's algorithm
        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm
        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html
        var currentTask;
        var counter = 0;
        while (readyToCheck.length) {
            currentTask = readyToCheck.pop();
            counter++;
            arrayEach(getDependents(currentTask), function (dependent) {
                if (--uncheckedDependencies[dependent] === 0) {
                    readyToCheck.push(dependent);
                }
            });
        }

        if (counter !== numTasks) {
            throw new Error(
                'async.auto cannot execute tasks due to a recursive dependency'
            );
        }
    }

    function getDependents(taskName) {
        var result = [];
        baseForOwn(tasks, function (task, key) {
            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {
                result.push(key);
            }
        });
        return result;
    }
};

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;
var symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */
function charsEndIndex(strSymbols, chrSymbols) {
  var index = strSymbols.length;

  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

/**
 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the first unmatched string symbol.
 */
function charsStartIndex(strSymbols, chrSymbols) {
  var index = -1,
      length = strSymbols.length;

  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff';
var rsComboMarksRange = '\\u0300-\\u036f';
var reComboHalfMarksRange = '\\ufe20-\\ufe2f';
var rsComboSymbolsRange = '\\u20d0-\\u20ff';
var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
var rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

/** Used to compose unicode character classes. */
var rsAstralRange$1 = '\\ud800-\\udfff';
var rsComboMarksRange$1 = '\\u0300-\\u036f';
var reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f';
var rsComboSymbolsRange$1 = '\\u20d0-\\u20ff';
var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
var rsVarRange$1 = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange$1 + ']';
var rsCombo = '[' + rsComboRange$1 + ']';
var rsFitz = '\\ud83c[\\udffb-\\udfff]';
var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
var rsNonAstral = '[^' + rsAstralRange$1 + ']';
var rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
var rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
var rsZWJ$1 = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?';
var rsOptVar = '[' + rsVarRange$1 + ']?';
var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
var rsSeq = rsOptVar + reOptMod + rsOptJoin;
var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/**
 * Removes leading and trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trim('  abc  ');
 * // => 'abc'
 *
 * _.trim('-_-abc-_-', '_-');
 * // => 'abc'
 *
 * _.map(['  foo  ', '  bar  '], _.trim);
 * // => ['foo', 'bar']
 */
function trim(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return string.replace(reTrim, '');
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      chrSymbols = stringToArray(chars),
      start = charsStartIndex(strSymbols, chrSymbols),
      end = charsEndIndex(strSymbols, chrSymbols) + 1;

  return castSlice(strSymbols, start, end).join('');
}

var FN_ARGS = /^(?:async\s+)?(function)?\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /(=.+)?(\s*)$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;

function parseParams(func) {
    func = func.toString().replace(STRIP_COMMENTS, '');
    func = func.match(FN_ARGS)[2].replace(' ', '');
    func = func ? func.split(FN_ARG_SPLIT) : [];
    func = func.map(function (arg){
        return trim(arg.replace(FN_ARG, ''));
    });
    return func;
}

/**
 * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent
 * tasks are specified as parameters to the function, after the usual callback
 * parameter, with the parameter names matching the names of the tasks it
 * depends on. This can provide even more readable task graphs which can be
 * easier to maintain.
 *
 * If a final callback is specified, the task results are similarly injected,
 * specified as named parameters after the initial error parameter.
 *
 * The autoInject function is purely syntactic sugar and its semantics are
 * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.
 *
 * @name autoInject
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.auto]{@link module:ControlFlow.auto}
 * @category Control Flow
 * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of
 * the form 'func([dependencies...], callback). The object's key of a property
 * serves as the name of the task defined by that property, i.e. can be used
 * when specifying requirements for other tasks.
 * * The `callback` parameter is a `callback(err, result)` which must be called
 *   when finished, passing an `error` (which can be `null`) and the result of
 *   the function's execution. The remaining parameters name other tasks on
 *   which the task is dependent, and the results from those tasks are the
 *   arguments of those parameters.
 * @param {Function} [callback] - An optional callback which is called when all
 * the tasks have been completed. It receives the `err` argument if any `tasks`
 * pass an error to their callback, and a `results` object with any completed
 * task results, similar to `auto`.
 * @example
 *
 * //  The example from `auto` can be rewritten as follows:
 * async.autoInject({
 *     get_data: function(callback) {
 *         // async code to get some data
 *         callback(null, 'data', 'converted to array');
 *     },
 *     make_folder: function(callback) {
 *         // async code to create a directory to store a file in
 *         // this is run at the same time as getting the data
 *         callback(null, 'folder');
 *     },
 *     write_file: function(get_data, make_folder, callback) {
 *         // once there is some data and the directory exists,
 *         // write the data to a file in the directory
 *         callback(null, 'filename');
 *     },
 *     email_link: function(write_file, callback) {
 *         // once the file is written let's email a link to it...
 *         // write_file contains the filename returned by write_file.
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 *
 * // If you are using a JS minifier that mangles parameter names, `autoInject`
 * // will not work with plain functions, since the parameter names will be
 * // collapsed to a single letter identifier.  To work around this, you can
 * // explicitly specify the names of the parameters your task function needs
 * // in an array, similar to Angular.js dependency injection.
 *
 * // This still has an advantage over plain `auto`, since the results a task
 * // depends on are still spread into arguments.
 * async.autoInject({
 *     //...
 *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {
 *         callback(null, 'filename');
 *     }],
 *     email_link: ['write_file', function(write_file, callback) {
 *         callback(null, {'file':write_file, 'email':'user@example.com'});
 *     }]
 *     //...
 * }, function(err, results) {
 *     console.log('err = ', err);
 *     console.log('email_link = ', results.email_link);
 * });
 */
function autoInject(tasks, callback) {
    var newTasks = {};

    baseForOwn(tasks, function (taskFn, key) {
        var params;
        var fnIsAsync = isAsync(taskFn);
        var hasNoDeps =
            (!fnIsAsync && taskFn.length === 1) ||
            (fnIsAsync && taskFn.length === 0);

        if (isArray(taskFn)) {
            params = taskFn.slice(0, -1);
            taskFn = taskFn[taskFn.length - 1];

            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
        } else if (hasNoDeps) {
            // no dependencies, use the function as-is
            newTasks[key] = taskFn;
        } else {
            params = parseParams(taskFn);
            if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {
                throw new Error("autoInject task functions require explicit parameters.");
            }

            // remove callback param
            if (!fnIsAsync) params.pop();

            newTasks[key] = params.concat(newTask);
        }

        function newTask(results, taskCb) {
            var newArgs = arrayMap(params, function (name) {
                return results[name];
            });
            newArgs.push(taskCb);
            wrapAsync(taskFn).apply(null, newArgs);
        }
    });

    auto(newTasks, callback);
}

// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
// used for queues. This implementation assumes that the node provided by the user can be modified
// to adjust the next and last properties. We implement only the minimal functionality
// for queue support.
function DLL() {
    this.head = this.tail = null;
    this.length = 0;
}

function setInitial(dll, node) {
    dll.length = 1;
    dll.head = dll.tail = node;
}

DLL.prototype.removeLink = function(node) {
    if (node.prev) node.prev.next = node.next;
    else this.head = node.next;
    if (node.next) node.next.prev = node.prev;
    else this.tail = node.prev;

    node.prev = node.next = null;
    this.length -= 1;
    return node;
};

DLL.prototype.empty = function () {
    while(this.head) this.shift();
    return this;
};

DLL.prototype.insertAfter = function(node, newNode) {
    newNode.prev = node;
    newNode.next = node.next;
    if (node.next) node.next.prev = newNode;
    else this.tail = newNode;
    node.next = newNode;
    this.length += 1;
};

DLL.prototype.insertBefore = function(node, newNode) {
    newNode.prev = node.prev;
    newNode.next = node;
    if (node.prev) node.prev.next = newNode;
    else this.head = newNode;
    node.prev = newNode;
    this.length += 1;
};

DLL.prototype.unshift = function(node) {
    if (this.head) this.insertBefore(this.head, node);
    else setInitial(this, node);
};

DLL.prototype.push = function(node) {
    if (this.tail) this.insertAfter(this.tail, node);
    else setInitial(this, node);
};

DLL.prototype.shift = function() {
    return this.head && this.removeLink(this.head);
};

DLL.prototype.pop = function() {
    return this.tail && this.removeLink(this.tail);
};

DLL.prototype.toArray = function () {
    var arr = Array(this.length);
    var curr = this.head;
    for(var idx = 0; idx < this.length; idx++) {
        arr[idx] = curr.data;
        curr = curr.next;
    }
    return arr;
};

DLL.prototype.remove = function (testFn) {
    var curr = this.head;
    while(!!curr) {
        var next = curr.next;
        if (testFn(curr)) {
            this.removeLink(curr);
        }
        curr = next;
    }
    return this;
};

function queue(worker, concurrency, payload) {
    if (concurrency == null) {
        concurrency = 1;
    }
    else if(concurrency === 0) {
        throw new Error('Concurrency must not be zero');
    }

    var _worker = wrapAsync(worker);
    var numRunning = 0;
    var workersList = [];

    var processingScheduled = false;
    function _insert(data, insertAtFront, callback) {
        if (callback != null && typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;
        if (!isArray(data)) {
            data = [data];
        }
        if (data.length === 0 && q.idle()) {
            // call drain immediately if there are no tasks
            return setImmediate$1(function() {
                q.drain();
            });
        }

        for (var i = 0, l = data.length; i < l; i++) {
            var item = {
                data: data[i],
                callback: callback || noop
            };

            if (insertAtFront) {
                q._tasks.unshift(item);
            } else {
                q._tasks.push(item);
            }
        }

        if (!processingScheduled) {
            processingScheduled = true;
            setImmediate$1(function() {
                processingScheduled = false;
                q.process();
            });
        }
    }

    function _next(tasks) {
        return function(err){
            numRunning -= 1;

            for (var i = 0, l = tasks.length; i < l; i++) {
                var task = tasks[i];

                var index = baseIndexOf(workersList, task, 0);
                if (index === 0) {
                    workersList.shift();
                } else if (index > 0) {
                    workersList.splice(index, 1);
                }

                task.callback.apply(task, arguments);

                if (err != null) {
                    q.error(err, task.data);
                }
            }

            if (numRunning <= (q.concurrency - q.buffer) ) {
                q.unsaturated();
            }

            if (q.idle()) {
                q.drain();
            }
            q.process();
        };
    }

    var isProcessing = false;
    var q = {
        _tasks: new DLL(),
        concurrency: concurrency,
        payload: payload,
        saturated: noop,
        unsaturated:noop,
        buffer: concurrency / 4,
        empty: noop,
        drain: noop,
        error: noop,
        started: false,
        paused: false,
        push: function (data, callback) {
            _insert(data, false, callback);
        },
        kill: function () {
            q.drain = noop;
            q._tasks.empty();
        },
        unshift: function (data, callback) {
            _insert(data, true, callback);
        },
        remove: function (testFn) {
            q._tasks.remove(testFn);
        },
        process: function () {
            // Avoid trying to start too many processing operations. This can occur
            // when callbacks resolve synchronously (#1267).
            if (isProcessing) {
                return;
            }
            isProcessing = true;
            while(!q.paused && numRunning < q.concurrency && q._tasks.length){
                var tasks = [], data = [];
                var l = q._tasks.length;
                if (q.payload) l = Math.min(l, q.payload);
                for (var i = 0; i < l; i++) {
                    var node = q._tasks.shift();
                    tasks.push(node);
                    workersList.push(node);
                    data.push(node.data);
                }

                numRunning += 1;

                if (q._tasks.length === 0) {
                    q.empty();
                }

                if (numRunning === q.concurrency) {
                    q.saturated();
                }

                var cb = onlyOnce(_next(tasks));
                _worker(data, cb);
            }
            isProcessing = false;
        },
        length: function () {
            return q._tasks.length;
        },
        running: function () {
            return numRunning;
        },
        workersList: function () {
            return workersList;
        },
        idle: function() {
            return q._tasks.length + numRunning === 0;
        },
        pause: function () {
            q.paused = true;
        },
        resume: function () {
            if (q.paused === false) { return; }
            q.paused = false;
            setImmediate$1(q.process);
        }
    };
    return q;
}

/**
 * A cargo of tasks for the worker function to complete. Cargo inherits all of
 * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.
 * @typedef {Object} CargoObject
 * @memberOf module:ControlFlow
 * @property {Function} length - A function returning the number of items
 * waiting to be processed. Invoke like `cargo.length()`.
 * @property {number} payload - An `integer` for determining how many tasks
 * should be process per round. This property can be changed after a `cargo` is
 * created to alter the payload on-the-fly.
 * @property {Function} push - Adds `task` to the `queue`. The callback is
 * called once the `worker` has finished processing the task. Instead of a
 * single task, an array of `tasks` can be submitted. The respective callback is
 * used for every task in the list. Invoke like `cargo.push(task, [callback])`.
 * @property {Function} saturated - A callback that is called when the
 * `queue.length()` hits the concurrency and further tasks will be queued.
 * @property {Function} empty - A callback that is called when the last item
 * from the `queue` is given to a `worker`.
 * @property {Function} drain - A callback that is called when the last item
 * from the `queue` has returned from the `worker`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke like `cargo.idle()`.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke like `cargo.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke like `cargo.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.
 */

/**
 * Creates a `cargo` object with the specified payload. Tasks added to the
 * cargo will be processed altogether (up to the `payload` limit). If the
 * `worker` is in progress, the task is queued until it becomes available. Once
 * the `worker` has completed some tasks, each callback of those tasks is
 * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)
 * for how `cargo` and `queue` work.
 *
 * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers
 * at a time, cargo passes an array of tasks to a single worker, repeating
 * when the worker is finished.
 *
 * @name cargo
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An asynchronous function for processing an array
 * of queued tasks. Invoked with `(tasks, callback)`.
 * @param {number} [payload=Infinity] - An optional `integer` for determining
 * how many tasks should be processed per round; if omitted, the default is
 * unlimited.
 * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the cargo and inner queue.
 * @example
 *
 * // create a cargo object with payload 2
 * var cargo = async.cargo(function(tasks, callback) {
 *     for (var i=0; i<tasks.length; i++) {
 *         console.log('hello ' + tasks[i].name);
 *     }
 *     callback();
 * }, 2);
 *
 * // add some items
 * cargo.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * cargo.push({name: 'bar'}, function(err) {
 *     console.log('finished processing bar');
 * });
 * cargo.push({name: 'baz'}, function(err) {
 *     console.log('finished processing baz');
 * });
 */
function cargo(worker, payload) {
    return queue(worker, 1, payload);
}

/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
 *
 * @name eachOfSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Invoked with (err).
 */
var eachOfSeries = doLimit(eachOfLimit, 1);

/**
 * Reduces `coll` into a single value using an async `iteratee` to return each
 * successive step. `memo` is the initial state of the reduction. This function
 * only operates in series.
 *
 * For performance reasons, it may make sense to split a call to this function
 * into a parallel map, and then use the normal `Array.prototype.reduce` on the
 * results. This function is for situations where each step in the reduction
 * needs to be async; if you can get the data before reducing it, then it's
 * probably a good idea to do so.
 *
 * @name reduce
 * @static
 * @memberOf module:Collections
 * @method
 * @alias inject
 * @alias foldl
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee complete with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 * @example
 *
 * async.reduce([1,2,3], 0, function(memo, item, callback) {
 *     // pointless async:
 *     process.nextTick(function() {
 *         callback(null, memo + item)
 *     });
 * }, function(err, result) {
 *     // result is now equal to the last value of memo, which is 6
 * });
 */
function reduce(coll, memo, iteratee, callback) {
    callback = once(callback || noop);
    var _iteratee = wrapAsync(iteratee);
    eachOfSeries(coll, function(x, i, callback) {
        _iteratee(memo, x, function(err, v) {
            memo = v;
            callback(err);
        });
    }, function(err) {
        callback(err, memo);
    });
}

/**
 * Version of the compose function that is more natural to read. Each function
 * consumes the return value of the previous function. It is the equivalent of
 * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name seq
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.compose]{@link module:ControlFlow.compose}
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} a function that composes the `functions` in order
 * @example
 *
 * // Requires lodash (or underscore), express3 and dresende's orm2.
 * // Part of an app, that fetches cats of the logged user.
 * // This example uses `seq` function to avoid overnesting and error
 * // handling clutter.
 * app.get('/cats', function(request, response) {
 *     var User = request.models.User;
 *     async.seq(
 *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
 *         function(user, fn) {
 *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
 *         }
 *     )(req.session.user_id, function (err, cats) {
 *         if (err) {
 *             console.error(err);
 *             response.json({ status: 'error', message: err.message });
 *         } else {
 *             response.json({ status: 'ok', message: 'Cats found', data: cats });
 *         }
 *     });
 * });
 */
function seq(/*...functions*/) {
    var _functions = arrayMap(arguments, wrapAsync);
    return function(/*...args*/) {
        var args = slice(arguments);
        var that = this;

        var cb = args[args.length - 1];
        if (typeof cb == 'function') {
            args.pop();
        } else {
            cb = noop;
        }

        reduce(_functions, args, function(newargs, fn, cb) {
            fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {
                var nextargs = slice(arguments, 1);
                cb(err, nextargs);
            }));
        },
        function(err, results) {
            cb.apply(that, [err].concat(results));
        });
    };
}

/**
 * Creates a function which is a composition of the passed asynchronous
 * functions. Each function consumes the return value of the function that
 * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
 * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
 *
 * Each function is executed with the `this` binding of the composed function.
 *
 * @name compose
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {...AsyncFunction} functions - the asynchronous functions to compose
 * @returns {Function} an asynchronous function that is the composed
 * asynchronous `functions`
 * @example
 *
 * function add1(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n + 1);
 *     }, 10);
 * }
 *
 * function mul3(n, callback) {
 *     setTimeout(function () {
 *         callback(null, n * 3);
 *     }, 10);
 * }
 *
 * var add1mul3 = async.compose(mul3, add1);
 * add1mul3(4, function (err, result) {
 *     // result now equals 15
 * });
 */
var compose = function(/*...args*/) {
    return seq.apply(null, slice(arguments).reverse());
};

var _concat = Array.prototype.concat;

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.
 *
 * @name concatLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 */
var concatLimit = function(coll, limit, iteratee, callback) {
    callback = callback || noop;
    var _iteratee = wrapAsync(iteratee);
    mapLimit(coll, limit, function(val, callback) {
        _iteratee(val, function(err /*, ...args*/) {
            if (err) return callback(err);
            return callback(null, slice(arguments, 1));
        });
    }, function(err, mapResults) {
        var result = [];
        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                result = _concat.apply(result, mapResults[i]);
            }
        }

        return callback(err, result);
    });
};

/**
 * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
 * the concatenated list. The `iteratee`s are called in parallel, and the
 * results are concatenated as they return. There is no guarantee that the
 * results array will be returned in the original order of `coll` passed to the
 * `iteratee` function.
 *
 * @name concat
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,
 * which should use an array as its result. Invoked with (item, callback).
 * @param {Function} [callback(err)] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 * @example
 *
 * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
 *     // files is now a list of filenames that exist in the 3 directories
 * });
 */
var concat = doLimit(concatLimit, Infinity);

/**
 * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
 *
 * @name concatSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.concat]{@link module:Collections.concat}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.
 * The iteratee should complete with an array an array of results.
 * Invoked with (item, callback).
 * @param {Function} [callback(err)] - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is an array
 * containing the concatenated results of the `iteratee` function. Invoked with
 * (err, results).
 */
var concatSeries = doLimit(concatLimit, 1);

/**
 * Returns a function that when called, calls-back with the values provided.
 * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
 * [`auto`]{@link module:ControlFlow.auto}.
 *
 * @name constant
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {...*} arguments... - Any number of arguments to automatically invoke
 * callback with.
 * @returns {AsyncFunction} Returns a function that when invoked, automatically
 * invokes the callback with the previous given arguments.
 * @example
 *
 * async.waterfall([
 *     async.constant(42),
 *     function (value, next) {
 *         // value === 42
 *     },
 *     //...
 * ], callback);
 *
 * async.waterfall([
 *     async.constant(filename, "utf8"),
 *     fs.readFile,
 *     function (fileData, next) {
 *         //...
 *     }
 *     //...
 * ], callback);
 *
 * async.auto({
 *     hostname: async.constant("https://server.net/"),
 *     port: findFreePort,
 *     launchServer: ["hostname", "port", function (options, cb) {
 *         startServer(options, cb);
 *     }],
 *     //...
 * }, callback);
 */
var constant = function(/*...values*/) {
    var values = slice(arguments);
    var args = [null].concat(values);
    return function (/*...ignoredArgs, callback*/) {
        var callback = arguments[arguments.length - 1];
        return callback.apply(this, args);
    };
};

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

function _createTester(check, getResult) {
    return function(eachfn, arr, iteratee, cb) {
        cb = cb || noop;
        var testPassed = false;
        var testResult;
        eachfn(arr, function(value, _, callback) {
            iteratee(value, function(err, result) {
                if (err) {
                    callback(err);
                } else if (check(result) && !testResult) {
                    testPassed = true;
                    testResult = getResult(true, value);
                    callback(null, breakLoop);
                } else {
                    callback();
                }
            });
        }, function(err) {
            if (err) {
                cb(err);
            } else {
                cb(null, testPassed ? testResult : getResult(false));
            }
        });
    };
}

function _findGetResult(v, x) {
    return x;
}

/**
 * Returns the first value in `coll` that passes an async truth test. The
 * `iteratee` is applied in parallel, meaning the first iteratee to return
 * `true` will fire the detect `callback` with that result. That means the
 * result might not be the first item in the original `coll` (in terms of order)
 * that passes the test.

 * If order within the original `coll` is important, then look at
 * [`detectSeries`]{@link module:Collections.detectSeries}.
 *
 * @name detect
 * @static
 * @memberOf module:Collections
 * @method
 * @alias find
 * @category Collections
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 * @example
 *
 * async.detect(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // result now equals the first file in the list that exists
 * });
 */
var detect = doParallel(_createTester(identity, _findGetResult));

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name detectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findLimit
 * @category Collections
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 */
var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));

/**
 * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
 *
 * @name detectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.detect]{@link module:Collections.detect}
 * @alias findSeries
 * @category Collections
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.
 * The iteratee must complete with a boolean value as its result.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the `iteratee` functions have finished.
 * Result will be the first item in the array that passes the truth test
 * (iteratee) or the value `undefined` if none passed. Invoked with
 * (err, result).
 */
var detectSeries = doLimit(detectLimit, 1);

function consoleFunc(name) {
    return function (fn/*, ...args*/) {
        var args = slice(arguments, 1);
        args.push(function (err/*, ...args*/) {
            var args = slice(arguments, 1);
            if (typeof console === 'object') {
                if (err) {
                    if (console.error) {
                        console.error(err);
                    }
                } else if (console[name]) {
                    arrayEach(args, function (x) {
                        console[name](x);
                    });
                }
            }
        });
        wrapAsync(fn).apply(null, args);
    };
}

/**
 * Logs the result of an [`async` function]{@link AsyncFunction} to the
 * `console` using `console.dir` to display the properties of the resulting object.
 * Only works in Node.js or in browsers that support `console.dir` and
 * `console.error` (such as FF and Chrome).
 * If multiple arguments are returned from the async function,
 * `console.dir` is called on each argument in order.
 *
 * @name dir
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, {hello: name});
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.dir(hello, 'world');
 * {hello: 'world'}
 */
var dir = consoleFunc('dir');

/**
 * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in
 * the order of operations, the arguments `test` and `fn` are switched.
 *
 * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.
 * @name doDuring
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.during]{@link module:ControlFlow.during}
 * @category Control Flow
 * @param {AsyncFunction} fn - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `fn`. Invoked with (...args, callback), where `...args` are the
 * non-error args from the previous callback of `fn`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `fn` has stopped. `callback`
 * will be passed an error if one occurred, otherwise `null`.
 */
function doDuring(fn, test, callback) {
    callback = onlyOnce(callback || noop);
    var _fn = wrapAsync(fn);
    var _test = wrapAsync(test);

    function next(err/*, ...args*/) {
        if (err) return callback(err);
        var args = slice(arguments, 1);
        args.push(check);
        _test.apply(this, args);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (!truth) return callback(null);
        _fn(next);
    }

    check(null, true);

}

/**
 * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in
 * the order of operations, the arguments `test` and `iteratee` are switched.
 *
 * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.
 *
 * @name doWhilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - A function which is called each time `test`
 * passes. Invoked with (callback).
 * @param {Function} test - synchronous truth test to perform after each
 * execution of `iteratee`. Invoked with any non-error callback results of
 * `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped.
 * `callback` will be passed an error and any arguments passed to the final
 * `iteratee`'s callback. Invoked with (err, [results]);
 */
function doWhilst(iteratee, test, callback) {
    callback = onlyOnce(callback || noop);
    var _iteratee = wrapAsync(iteratee);
    var next = function(err/*, ...args*/) {
        if (err) return callback(err);
        var args = slice(arguments, 1);
        if (test.apply(this, args)) return _iteratee(next);
        callback.apply(null, [null].concat(args));
    };
    _iteratee(next);
}

/**
 * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the
 * argument ordering differs from `until`.
 *
 * @name doUntil
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}
 * @category Control Flow
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {Function} test - synchronous truth test to perform after each
 * execution of `iteratee`. Invoked with any non-error callback results of
 * `iteratee`.
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 */
function doUntil(iteratee, test, callback) {
    doWhilst(iteratee, function() {
        return !test.apply(this, arguments);
    }, callback);
}

/**
 * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that
 * is passed a callback in the form of `function (err, truth)`. If error is
 * passed to `test` or `fn`, the main callback is immediately called with the
 * value of the error.
 *
 * @name during
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {AsyncFunction} test - asynchronous truth test to perform before each
 * execution of `fn`. Invoked with (callback).
 * @param {AsyncFunction} fn - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `fn` has stopped. `callback`
 * will be passed an error, if one occurred, otherwise `null`.
 * @example
 *
 * var count = 0;
 *
 * async.during(
 *     function (callback) {
 *         return callback(null, count < 5);
 *     },
 *     function (callback) {
 *         count++;
 *         setTimeout(callback, 1000);
 *     },
 *     function (err) {
 *         // 5 seconds have passed
 *     }
 * );
 */
function during(test, fn, callback) {
    callback = onlyOnce(callback || noop);
    var _fn = wrapAsync(fn);
    var _test = wrapAsync(test);

    function next(err) {
        if (err) return callback(err);
        _test(check);
    }

    function check(err, truth) {
        if (err) return callback(err);
        if (!truth) return callback(null);
        _fn(next);
    }

    _test(check);
}

function _withoutIndex(iteratee) {
    return function (value, index, callback) {
        return iteratee(value, callback);
    };
}

/**
 * Applies the function `iteratee` to each item in `coll`, in parallel.
 * The `iteratee` is called with an item from the list, and a callback for when
 * it has finished. If the `iteratee` passes an error to its `callback`, the
 * main `callback` (for the `each` function) is immediately called with the
 * error.
 *
 * Note, that since this function applies `iteratee` to each item in parallel,
 * there is no guarantee that the iteratee functions will complete in order.
 *
 * @name each
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEach
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to
 * each item in `coll`. Invoked with (item, callback).
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOf`.
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @example
 *
 * // assuming openFiles is an array of file names and saveFile is a function
 * // to save the modified contents of that file:
 *
 * async.each(openFiles, saveFile, function(err){
 *   // if any of the saves produced an error, err would equal that error
 * });
 *
 * // assuming openFiles is an array of file names
 * async.each(openFiles, function(file, callback) {
 *
 *     // Perform operation on file here.
 *     console.log('Processing file ' + file);
 *
 *     if( file.length > 32 ) {
 *       console.log('This file name is too long');
 *       callback('File name too long');
 *     } else {
 *       // Do work to process file here
 *       console.log('File processed');
 *       callback();
 *     }
 * }, function(err) {
 *     // if any of the file processing produced an error, err would equal that error
 *     if( err ) {
 *       // One of the iterations produced an error.
 *       // All processing will now stop.
 *       console.log('A file failed to process');
 *     } else {
 *       console.log('All files have been processed successfully');
 *     }
 * });
 */
function eachLimit(coll, iteratee, callback) {
    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}

/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
function eachLimit$1(coll, limit, iteratee, callback) {
    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
}

/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */
var eachSeries = doLimit(eachLimit$1, 1);

/**
 * Wrap an async function and ensure it calls its callback on a later tick of
 * the event loop.  If the function already calls its callback on a next tick,
 * no extra deferral is added. This is useful for preventing stack overflows
 * (`RangeError: Maximum call stack size exceeded`) and generally keeping
 * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)
 * contained. ES2017 `async` functions are returned as-is -- they are immune
 * to Zalgo's corrupting influences, as they always resolve on a later tick.
 *
 * @name ensureAsync
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - an async function, one that expects a node-style
 * callback as its last argument.
 * @returns {AsyncFunction} Returns a wrapped function with the exact same call
 * signature as the function passed in.
 * @example
 *
 * function sometimesAsync(arg, callback) {
 *     if (cache[arg]) {
 *         return callback(null, cache[arg]); // this would be synchronous!!
 *     } else {
 *         doSomeIO(arg, callback); // this IO would be asynchronous
 *     }
 * }
 *
 * // this has a risk of stack overflows if many results are cached in a row
 * async.mapSeries(args, sometimesAsync, done);
 *
 * // this will defer sometimesAsync's callback if necessary,
 * // preventing stack overflows
 * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);
 */
function ensureAsync(fn) {
    if (isAsync(fn)) return fn;
    return initialParams(function (args, callback) {
        var sync = true;
        args.push(function () {
            var innerArgs = arguments;
            if (sync) {
                setImmediate$1(function () {
                    callback.apply(null, innerArgs);
                });
            } else {
                callback.apply(null, innerArgs);
            }
        });
        fn.apply(this, args);
        sync = false;
    });
}

function notId(v) {
    return !v;
}

/**
 * Returns `true` if every element in `coll` satisfies an async test. If any
 * iteratee call returns `false`, the main `callback` is immediately called.
 *
 * @name every
 * @static
 * @memberOf module:Collections
 * @method
 * @alias all
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 * @example
 *
 * async.every(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // if result is true then every file exists
 * });
 */
var every = doParallel(_createTester(notId, notId));

/**
 * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
 *
 * @name everyLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in parallel.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 */
var everyLimit = doParallelLimit(_createTester(notId, notId));

/**
 * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
 *
 * @name everySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.every]{@link module:Collections.every}
 * @alias allSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collection in series.
 * The iteratee must complete with a boolean result value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result will be either `true` or `false`
 * depending on the values of the async tests. Invoked with (err, result).
 */
var everySeries = doLimit(everyLimit, 1);

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

function filterArray(eachfn, arr, iteratee, callback) {
    var truthValues = new Array(arr.length);
    eachfn(arr, function (x, index, callback) {
        iteratee(x, function (err, v) {
            truthValues[index] = !!v;
            callback(err);
        });
    }, function (err) {
        if (err) return callback(err);
        var results = [];
        for (var i = 0; i < arr.length; i++) {
            if (truthValues[i]) results.push(arr[i]);
        }
        callback(null, results);
    });
}

function filterGeneric(eachfn, coll, iteratee, callback) {
    var results = [];
    eachfn(coll, function (x, index, callback) {
        iteratee(x, function (err, v) {
            if (err) {
                callback(err);
            } else {
                if (v) {
                    results.push({index: index, value: x});
                }
                callback();
            }
        });
    }, function (err) {
        if (err) {
            callback(err);
        } else {
            callback(null, arrayMap(results.sort(function (a, b) {
                return a.index - b.index;
            }), baseProperty('value')));
        }
    });
}

function _filter(eachfn, coll, iteratee, callback) {
    var filter = isArrayLike(coll) ? filterArray : filterGeneric;
    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);
}

/**
 * Returns a new array of all the values in `coll` which pass an async truth
 * test. This operation is performed in parallel, but the results array will be
 * in the same order as the original.
 *
 * @name filter
 * @static
 * @memberOf module:Collections
 * @method
 * @alias select
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @example
 *
 * async.filter(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, results) {
 *     // results now equals an array of the existing files
 * });
 */
var filter = doParallel(_filter);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name filterLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 */
var filterLimit = doParallelLimit(_filter);

/**
 * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
 *
 * @name filterSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @alias selectSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - A truth test to apply to each item in `coll`.
 * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
 * with a boolean argument once it has completed. Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results)
 */
var filterSeries = doLimit(filterLimit, 1);

/**
 * Calls the asynchronous function `fn` with a callback parameter that allows it
 * to call itself again, in series, indefinitely.

 * If an error is passed to the callback then `errback` is called with the
 * error, and execution stops, otherwise it will never be called.
 *
 * @name forever
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} fn - an async function to call repeatedly.
 * Invoked with (next).
 * @param {Function} [errback] - when `fn` passes an error to it's callback,
 * this function will be called, and execution stops. Invoked with (err).
 * @example
 *
 * async.forever(
 *     function(next) {
 *         // next is suitable for passing to things that need a callback(err [, whatever]);
 *         // it will result in this function being called again.
 *     },
 *     function(err) {
 *         // if next is called with a value in its first parameter, it will appear
 *         // in here as 'err', and execution will stop.
 *     }
 * );
 */
function forever(fn, errback) {
    var done = onlyOnce(errback || noop);
    var task = wrapAsync(ensureAsync(fn));

    function next(err) {
        if (err) return done(err);
        task(next);
    }
    next();
}

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.
 *
 * @name groupByLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 */
var groupByLimit = function(coll, limit, iteratee, callback) {
    callback = callback || noop;
    var _iteratee = wrapAsync(iteratee);
    mapLimit(coll, limit, function(val, callback) {
        _iteratee(val, function(err, key) {
            if (err) return callback(err);
            return callback(null, {key: key, val: val});
        });
    }, function(err, mapResults) {
        var result = {};
        // from MDN, handle object having an `hasOwnProperty` prop
        var hasOwnProperty = Object.prototype.hasOwnProperty;

        for (var i = 0; i < mapResults.length; i++) {
            if (mapResults[i]) {
                var key = mapResults[i].key;
                var val = mapResults[i].val;

                if (hasOwnProperty.call(result, key)) {
                    result[key].push(val);
                } else {
                    result[key] = [val];
                }
            }
        }

        return callback(err, result);
    });
};

/**
 * Returns a new object, where each value corresponds to an array of items, from
 * `coll`, that returned the corresponding key. That is, the keys of the object
 * correspond to the values passed to the `iteratee` callback.
 *
 * Note: Since this function applies the `iteratee` to each item in parallel,
 * there is no guarantee that the `iteratee` functions will complete in order.
 * However, the values for each key in the `result` will be in the same order as
 * the original `coll`. For Objects, the values will roughly be in the order of
 * the original Objects' keys (but this can vary across JavaScript engines).
 *
 * @name groupBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 * @example
 *
 * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {
 *     db.findById(userId, function(err, user) {
 *         if (err) return callback(err);
 *         return callback(null, user.age);
 *     });
 * }, function(err, result) {
 *     // result is object containing the userIds grouped by age
 *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};
 * });
 */
var groupBy = doLimit(groupByLimit, Infinity);

/**
 * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.
 *
 * @name groupBySeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.groupBy]{@link module:Collections.groupBy}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a `key` to group the value under.
 * Invoked with (value, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Result is an `Object` whoses
 * properties are arrays of values which returned the corresponding key.
 */
var groupBySeries = doLimit(groupByLimit, 1);

/**
 * Logs the result of an `async` function to the `console`. Only works in
 * Node.js or in browsers that support `console.log` and `console.error` (such
 * as FF and Chrome). If multiple arguments are returned from the async
 * function, `console.log` is called on each argument in order.
 *
 * @name log
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} function - The function you want to eventually apply
 * all arguments to.
 * @param {...*} arguments... - Any number of arguments to apply to the function.
 * @example
 *
 * // in a module
 * var hello = function(name, callback) {
 *     setTimeout(function() {
 *         callback(null, 'hello ' + name);
 *     }, 1000);
 * };
 *
 * // in the node repl
 * node> async.log(hello, 'world');
 * 'hello world'
 */
var log = consoleFunc('log');

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name mapValuesLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 */
function mapValuesLimit(obj, limit, iteratee, callback) {
    callback = once(callback || noop);
    var newObj = {};
    var _iteratee = wrapAsync(iteratee);
    eachOfLimit(obj, limit, function(val, key, next) {
        _iteratee(val, key, function (err, result) {
            if (err) return next(err);
            newObj[key] = result;
            next();
        });
    }, function (err) {
        callback(err, newObj);
    });
}

/**
 * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
 *
 * Produces a new Object by mapping each value of `obj` through the `iteratee`
 * function. The `iteratee` is called each `value` and `key` from `obj` and a
 * callback for when it has finished processing. Each of these callbacks takes
 * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
 * passes an error to its callback, the main `callback` (for the `mapValues`
 * function) is immediately called with the error.
 *
 * Note, the order of the keys in the result is not guaranteed.  The keys will
 * be roughly in the order they complete, (but this is very engine-specific)
 *
 * @name mapValues
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 * @example
 *
 * async.mapValues({
 *     f1: 'file1',
 *     f2: 'file2',
 *     f3: 'file3'
 * }, function (file, key, callback) {
 *   fs.stat(file, callback);
 * }, function(err, result) {
 *     // result is now a map of stats for each file, e.g.
 *     // {
 *     //     f1: [stats for file1],
 *     //     f2: [stats for file2],
 *     //     f3: [stats for file3]
 *     // }
 * });
 */

var mapValues = doLimit(mapValuesLimit, Infinity);

/**
 * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
 *
 * @name mapValuesSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.mapValues]{@link module:Collections.mapValues}
 * @category Collection
 * @param {Object} obj - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each value and key
 * in `coll`.
 * The iteratee should complete with the transformed value as its result.
 * Invoked with (value, key, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. `result` is a new object consisting
 * of each key from `obj`, with each transformed value on the right-hand side.
 * Invoked with (err, result).
 */
var mapValuesSeries = doLimit(mapValuesLimit, 1);

function has(obj, key) {
    return key in obj;
}

/**
 * Caches the results of an async function. When creating a hash to store
 * function results against, the callback is omitted from the hash and an
 * optional hash function can be used.
 *
 * If no hash function is specified, the first argument is used as a hash key,
 * which may work reasonably if it is a string or a data type that converts to a
 * distinct string. Note that objects and arrays will not behave reasonably.
 * Neither will cases where the other arguments are significant. In such cases,
 * specify your own hash function.
 *
 * The cache of results is exposed as the `memo` property of the function
 * returned by `memoize`.
 *
 * @name memoize
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function to proxy and cache results from.
 * @param {Function} hasher - An optional function for generating a custom hash
 * for storing results. It has all the arguments applied to it apart from the
 * callback, and must be synchronous.
 * @returns {AsyncFunction} a memoized version of `fn`
 * @example
 *
 * var slow_fn = function(name, callback) {
 *     // do something
 *     callback(null, result);
 * };
 * var fn = async.memoize(slow_fn);
 *
 * // fn can now be used as if it were slow_fn
 * fn('some name', function() {
 *     // callback
 * });
 */
function memoize(fn, hasher) {
    var memo = Object.create(null);
    var queues = Object.create(null);
    hasher = hasher || identity;
    var _fn = wrapAsync(fn);
    var memoized = initialParams(function memoized(args, callback) {
        var key = hasher.apply(null, args);
        if (has(memo, key)) {
            setImmediate$1(function() {
                callback.apply(null, memo[key]);
            });
        } else if (has(queues, key)) {
            queues[key].push(callback);
        } else {
            queues[key] = [callback];
            _fn.apply(null, args.concat(function(/*args*/) {
                var args = slice(arguments);
                memo[key] = args;
                var q = queues[key];
                delete queues[key];
                for (var i = 0, l = q.length; i < l; i++) {
                    q[i].apply(null, args);
                }
            }));
        }
    });
    memoized.memo = memo;
    memoized.unmemoized = fn;
    return memoized;
}

/**
 * Calls `callback` on a later loop around the event loop. In Node.js this just
 * calls `process.nextTick`.  In the browser it will use `setImmediate` if
 * available, otherwise `setTimeout(callback, 0)`, which means other higher
 * priority events may precede the execution of `callback`.
 *
 * This is used internally for browser-compatibility purposes.
 *
 * @name nextTick
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.setImmediate]{@link module:Utils.setImmediate}
 * @category Util
 * @param {Function} callback - The function to call on a later loop around
 * the event loop. Invoked with (args...).
 * @param {...*} args... - any number of additional arguments to pass to the
 * callback on the next tick.
 * @example
 *
 * var call_order = [];
 * async.nextTick(function() {
 *     call_order.push('two');
 *     // call_order now equals ['one','two']
 * });
 * call_order.push('one');
 *
 * async.setImmediate(function (a, b, c) {
 *     // a, b, and c equal 1, 2, and 3
 * }, 1, 2, 3);
 */
var _defer$1;

if (hasNextTick) {
    _defer$1 = process.nextTick;
} else if (hasSetImmediate) {
    _defer$1 = setImmediate;
} else {
    _defer$1 = fallback;
}

var nextTick = wrap(_defer$1);

function _parallel(eachfn, tasks, callback) {
    callback = callback || noop;
    var results = isArrayLike(tasks) ? [] : {};

    eachfn(tasks, function (task, key, callback) {
        wrapAsync(task)(function (err, result) {
            if (arguments.length > 2) {
                result = slice(arguments, 1);
            }
            results[key] = result;
            callback(err);
        });
    }, function (err) {
        callback(err, results);
    });
}

/**
 * Run the `tasks` collection of functions in parallel, without waiting until
 * the previous function has completed. If any of the functions pass an error to
 * its callback, the main `callback` is immediately called with the value of the
 * error. Once the `tasks` have completed, the results are passed to the final
 * `callback` as an array.
 *
 * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about
 * parallel execution of code.  If your tasks do not use any timers or perform
 * any I/O, they will actually be executed in series.  Any synchronous setup
 * sections for each task will happen one after the other.  JavaScript remains
 * single-threaded.
 *
 * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the
 * execution of other tasks when a task fails.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 * results from {@link async.parallel}.
 *
 * @name parallel
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 *
 * @example
 * async.parallel([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     // the results array will equal ['one','two'] even though
 *     // the second function had a shorter timeout.
 * });
 *
 * // an example using an object instead of an array
 * async.parallel({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     // results is now equals to: {one: 1, two: 2}
 * });
 */
function parallelLimit(tasks, callback) {
    _parallel(eachOf, tasks, callback);
}

/**
 * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name parallelLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.parallel]{@link module:ControlFlow.parallel}
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection of
 * [async functions]{@link AsyncFunction} to run.
 * Each async function can complete with any number of optional `result` values.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed successfully. This function gets a results array
 * (or object) containing all the result arguments passed to the task callbacks.
 * Invoked with (err, results).
 */
function parallelLimit$1(tasks, limit, callback) {
    _parallel(_eachOfLimit(limit), tasks, callback);
}

/**
 * A queue of tasks for the worker function to complete.
 * @typedef {Object} QueueObject
 * @memberOf module:ControlFlow
 * @property {Function} length - a function returning the number of items
 * waiting to be processed. Invoke with `queue.length()`.
 * @property {boolean} started - a boolean indicating whether or not any
 * items have been pushed and processed by the queue.
 * @property {Function} running - a function returning the number of items
 * currently being processed. Invoke with `queue.running()`.
 * @property {Function} workersList - a function returning the array of items
 * currently being processed. Invoke with `queue.workersList()`.
 * @property {Function} idle - a function returning false if there are items
 * waiting or being processed, or true if not. Invoke with `queue.idle()`.
 * @property {number} concurrency - an integer for determining how many `worker`
 * functions should be run in parallel. This property can be changed after a
 * `queue` is created to alter the concurrency on-the-fly.
 * @property {Function} push - add a new task to the `queue`. Calls `callback`
 * once the `worker` has finished processing the task. Instead of a single task,
 * a `tasks` array can be submitted. The respective callback is used for every
 * task in the list. Invoke with `queue.push(task, [callback])`,
 * @property {Function} unshift - add a new task to the front of the `queue`.
 * Invoke with `queue.unshift(task, [callback])`.
 * @property {Function} remove - remove items from the queue that match a test
 * function.  The test function will be passed an object with a `data` property,
 * and a `priority` property, if this is a
 * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.
 * Invoked with `queue.remove(testFn)`, where `testFn` is of the form
 * `function ({data, priority}) {}` and returns a Boolean.
 * @property {Function} saturated - a callback that is called when the number of
 * running workers hits the `concurrency` limit, and further tasks will be
 * queued.
 * @property {Function} unsaturated - a callback that is called when the number
 * of running workers is less than the `concurrency` & `buffer` limits, and
 * further tasks will not be queued.
 * @property {number} buffer - A minimum threshold buffer in order to say that
 * the `queue` is `unsaturated`.
 * @property {Function} empty - a callback that is called when the last item
 * from the `queue` is given to a `worker`.
 * @property {Function} drain - a callback that is called when the last item
 * from the `queue` has returned from the `worker`.
 * @property {Function} error - a callback that is called when a task errors.
 * Has the signature `function(error, task)`.
 * @property {boolean} paused - a boolean for determining whether the queue is
 * in a paused state.
 * @property {Function} pause - a function that pauses the processing of tasks
 * until `resume()` is called. Invoke with `queue.pause()`.
 * @property {Function} resume - a function that resumes the processing of
 * queued tasks when the queue is paused. Invoke with `queue.resume()`.
 * @property {Function} kill - a function that removes the `drain` callback and
 * empties remaining tasks from the queue forcing it to go idle. No more tasks
 * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.
 */

/**
 * Creates a `queue` object with the specified `concurrency`. Tasks added to the
 * `queue` are processed in parallel (up to the `concurrency` limit). If all
 * `worker`s are in progress, the task is queued until one becomes available.
 * Once a `worker` completes a `task`, that `task`'s callback is called.
 *
 * @name queue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`. Invoked with (task, callback).
 * @param {number} [concurrency=1] - An `integer` for determining how many
 * `worker` functions should be run in parallel.  If omitted, the concurrency
 * defaults to `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
 * attached as certain properties to listen for specific events during the
 * lifecycle of the queue.
 * @example
 *
 * // create a queue object with concurrency 2
 * var q = async.queue(function(task, callback) {
 *     console.log('hello ' + task.name);
 *     callback();
 * }, 2);
 *
 * // assign a callback
 * q.drain = function() {
 *     console.log('all items have been processed');
 * };
 *
 * // add some items to the queue
 * q.push({name: 'foo'}, function(err) {
 *     console.log('finished processing foo');
 * });
 * q.push({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 *
 * // add some items to the queue (batch-wise)
 * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
 *     console.log('finished processing item');
 * });
 *
 * // add some items to the front of the queue
 * q.unshift({name: 'bar'}, function (err) {
 *     console.log('finished processing bar');
 * });
 */
var queue$1 = function (worker, concurrency) {
    var _worker = wrapAsync(worker);
    return queue(function (items, cb) {
        _worker(items[0], cb);
    }, concurrency, 1);
};

/**
 * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
 * completed in ascending priority order.
 *
 * @name priorityQueue
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.queue]{@link module:ControlFlow.queue}
 * @category Control Flow
 * @param {AsyncFunction} worker - An async function for processing a queued task.
 * If you want to handle errors from an individual task, pass a callback to
 * `q.push()`.
 * Invoked with (task, callback).
 * @param {number} concurrency - An `integer` for determining how many `worker`
 * functions should be run in parallel.  If omitted, the concurrency defaults to
 * `1`.  If the concurrency is `0`, an error is thrown.
 * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
 * differences between `queue` and `priorityQueue` objects:
 * * `push(task, priority, [callback])` - `priority` should be a number. If an
 *   array of `tasks` is given, all tasks will be assigned the same priority.
 * * The `unshift` method was removed.
 */
var priorityQueue = function(worker, concurrency) {
    // Start with a normal queue
    var q = queue$1(worker, concurrency);

    // Override push to accept second parameter representing priority
    q.push = function(data, priority, callback) {
        if (callback == null) callback = noop;
        if (typeof callback !== 'function') {
            throw new Error('task callback must be a function');
        }
        q.started = true;
        if (!isArray(data)) {
            data = [data];
        }
        if (data.length === 0) {
            // call drain immediately if there are no tasks
            return setImmediate$1(function() {
                q.drain();
            });
        }

        priority = priority || 0;
        var nextNode = q._tasks.head;
        while (nextNode && priority >= nextNode.priority) {
            nextNode = nextNode.next;
        }

        for (var i = 0, l = data.length; i < l; i++) {
            var item = {
                data: data[i],
                priority: priority,
                callback: callback
            };

            if (nextNode) {
                q._tasks.insertBefore(nextNode, item);
            } else {
                q._tasks.push(item);
            }
        }
        setImmediate$1(q.process);
    };

    // Remove unshift function
    delete q.unshift;

    return q;
};

/**
 * Runs the `tasks` array of functions in parallel, without waiting until the
 * previous function has completed. Once any of the `tasks` complete or pass an
 * error to its callback, the main `callback` is immediately called. It's
 * equivalent to `Promise.race()`.
 *
 * @name race
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}
 * to run. Each function can complete with an optional `result` value.
 * @param {Function} callback - A callback to run once any of the functions have
 * completed. This function gets an error or result from the first function that
 * completed. Invoked with (err, result).
 * @returns undefined
 * @example
 *
 * async.race([
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ],
 * // main callback
 * function(err, result) {
 *     // the result will be equal to 'two' as it finishes earlier
 * });
 */
function race(tasks, callback) {
    callback = once(callback || noop);
    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));
    if (!tasks.length) return callback();
    for (var i = 0, l = tasks.length; i < l; i++) {
        wrapAsync(tasks[i])(callback);
    }
}

/**
 * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.
 *
 * @name reduceRight
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reduce]{@link module:Collections.reduce}
 * @alias foldr
 * @category Collection
 * @param {Array} array - A collection to iterate over.
 * @param {*} memo - The initial state of the reduction.
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * array to produce the next step in the reduction.
 * The `iteratee` should complete with the next state of the reduction.
 * If the iteratee complete with an error, the reduction is stopped and the
 * main `callback` is immediately called with the error.
 * Invoked with (memo, item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the reduced value. Invoked with
 * (err, result).
 */
function reduceRight (array, memo, iteratee, callback) {
    var reversed = slice(array).reverse();
    reduce(reversed, memo, iteratee, callback);
}

/**
 * Wraps the async function in another function that always completes with a
 * result object, even when it errors.
 *
 * The result object has either the property `error` or `value`.
 *
 * @name reflect
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} fn - The async function you want to wrap
 * @returns {Function} - A function that always passes null to it's callback as
 * the error. The second argument to the callback will be an `object` with
 * either an `error` or a `value` property.
 * @example
 *
 * async.parallel([
 *     async.reflect(function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff but error ...
 *         callback('bad stuff happened');
 *     }),
 *     async.reflect(function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     })
 * ],
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = 'bad stuff happened'
 *     // results[2].value = 'two'
 * });
 */
function reflect(fn) {
    var _fn = wrapAsync(fn);
    return initialParams(function reflectOn(args, reflectCallback) {
        args.push(function callback(error, cbArg) {
            if (error) {
                reflectCallback(null, { error: error });
            } else {
                var value;
                if (arguments.length <= 2) {
                    value = cbArg;
                } else {
                    value = slice(arguments, 1);
                }
                reflectCallback(null, { value: value });
            }
        });

        return _fn.apply(this, args);
    });
}

/**
 * A helper function that wraps an array or an object of functions with `reflect`.
 *
 * @name reflectAll
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.reflect]{@link module:Utils.reflect}
 * @category Util
 * @param {Array|Object|Iterable} tasks - The collection of
 * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.
 * @returns {Array} Returns an array of async functions, each wrapped in
 * `async.reflect`
 * @example
 *
 * let tasks = [
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     function(callback) {
 *         // do some more stuff but error ...
 *         callback(new Error('bad stuff happened'));
 *     },
 *     function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'two');
 *         }, 100);
 *     }
 * ];
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results[0].value = 'one'
 *     // results[1].error = Error('bad stuff happened')
 *     // results[2].value = 'two'
 * });
 *
 * // an example using an object instead of an array
 * let tasks = {
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'one');
 *         }, 200);
 *     },
 *     two: function(callback) {
 *         callback('two');
 *     },
 *     three: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 'three');
 *         }, 100);
 *     }
 * };
 *
 * async.parallel(async.reflectAll(tasks),
 * // optional callback
 * function(err, results) {
 *     // values
 *     // results.one.value = 'one'
 *     // results.two.error = 'two'
 *     // results.three.value = 'three'
 * });
 */
function reflectAll(tasks) {
    var results;
    if (isArray(tasks)) {
        results = arrayMap(tasks, reflect);
    } else {
        results = {};
        baseForOwn(tasks, function(task, key) {
            results[key] = reflect.call(this, task);
        });
    }
    return results;
}

function reject$1(eachfn, arr, iteratee, callback) {
    _filter(eachfn, arr, function(value, cb) {
        iteratee(value, function(err, v) {
            cb(err, !v);
        });
    }, callback);
}

/**
 * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
 *
 * @name reject
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.filter]{@link module:Collections.filter}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 * @example
 *
 * async.reject(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, results) {
 *     // results now equals an array of missing files
 *     createFiles(results);
 * });
 */
var reject = doParallel(reject$1);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name rejectLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 */
var rejectLimit = doParallelLimit(reject$1);

/**
 * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
 *
 * @name rejectSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.reject]{@link module:Collections.reject}
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {Function} iteratee - An async truth test to apply to each item in
 * `coll`.
 * The should complete with a boolean value as its `result`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Invoked with (err, results).
 */
var rejectSeries = doLimit(rejectLimit, 1);

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant$1(value) {
  return function() {
    return value;
  };
}

/**
 * Attempts to get a successful response from `task` no more than `times` times
 * before returning an error. If the task is successful, the `callback` will be
 * passed the result of the successful task. If all attempts fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name retry
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @see [async.retryable]{@link module:ControlFlow.retryable}
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an
 * object with `times` and `interval` or a number.
 * * `times` - The number of attempts to make before giving up.  The default
 *   is `5`.
 * * `interval` - The time to wait between retries, in milliseconds.  The
 *   default is `0`. The interval may also be specified as a function of the
 *   retry count (see example).
 * * `errorFilter` - An optional synchronous function that is invoked on
 *   erroneous result. If it returns `true` the retry attempts will continue;
 *   if the function returns `false` the retry flow is aborted with the current
 *   attempt's error and result being returned to the final callback.
 *   Invoked with (err).
 * * If `opts` is a number, the number specifies the number of times to retry,
 *   with the default interval of `0`.
 * @param {AsyncFunction} task - An async function to retry.
 * Invoked with (callback).
 * @param {Function} [callback] - An optional callback which is called when the
 * task has succeeded, or after the final failed attempt. It receives the `err`
 * and `result` arguments of the last attempt at completing the `task`. Invoked
 * with (err, results).
 *
 * @example
 *
 * // The `retry` function can be used as a stand-alone control flow by passing
 * // a callback, as shown below:
 *
 * // try calling apiMethod 3 times
 * async.retry(3, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 3 times, waiting 200 ms between each retry
 * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod 10 times with exponential backoff
 * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)
 * async.retry({
 *   times: 10,
 *   interval: function(retryCount) {
 *     return 50 * Math.pow(2, retryCount);
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod the default 5 times no delay between each retry
 * async.retry(apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // try calling apiMethod only when error condition satisfies, all other
 * // errors will abort the retry control flow and return to final callback
 * async.retry({
 *   errorFilter: function(err) {
 *     return err.message === 'Temporary error'; // only retry on a specific error
 *   }
 * }, apiMethod, function(err, result) {
 *     // do something with the result
 * });
 *
 * // to retry individual methods that are not as reliable within other
 * // control flow functions, use the `retryable` wrapper:
 * async.auto({
 *     users: api.getUsers.bind(api),
 *     payments: async.retryable(3, api.getPayments.bind(api))
 * }, function(err, results) {
 *     // do something with the results
 * });
 *
 */
function retry(opts, task, callback) {
    var DEFAULT_TIMES = 5;
    var DEFAULT_INTERVAL = 0;

    var options = {
        times: DEFAULT_TIMES,
        intervalFunc: constant$1(DEFAULT_INTERVAL)
    };

    function parseTimes(acc, t) {
        if (typeof t === 'object') {
            acc.times = +t.times || DEFAULT_TIMES;

            acc.intervalFunc = typeof t.interval === 'function' ?
                t.interval :
                constant$1(+t.interval || DEFAULT_INTERVAL);

            acc.errorFilter = t.errorFilter;
        } else if (typeof t === 'number' || typeof t === 'string') {
            acc.times = +t || DEFAULT_TIMES;
        } else {
            throw new Error("Invalid arguments for async.retry");
        }
    }

    if (arguments.length < 3 && typeof opts === 'function') {
        callback = task || noop;
        task = opts;
    } else {
        parseTimes(options, opts);
        callback = callback || noop;
    }

    if (typeof task !== 'function') {
        throw new Error("Invalid arguments for async.retry");
    }

    var _task = wrapAsync(task);

    var attempt = 1;
    function retryAttempt() {
        _task(function(err) {
            if (err && attempt++ < options.times &&
                (typeof options.errorFilter != 'function' ||
                    options.errorFilter(err))) {
                setTimeout(retryAttempt, options.intervalFunc(attempt));
            } else {
                callback.apply(null, arguments);
            }
        });
    }

    retryAttempt();
}

/**
 * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method
 * wraps a task and makes it retryable, rather than immediately calling it
 * with retries.
 *
 * @name retryable
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.retry]{@link module:ControlFlow.retry}
 * @category Control Flow
 * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
 * options, exactly the same as from `retry`
 * @param {AsyncFunction} task - the asynchronous function to wrap.
 * This function will be passed any arguments passed to the returned wrapper.
 * Invoked with (...args, callback).
 * @returns {AsyncFunction} The wrapped function, which when invoked, will
 * retry on an error, based on the parameters specified in `opts`.
 * This function will accept the same parameters as `task`.
 * @example
 *
 * async.auto({
 *     dep1: async.retryable(3, getFromFlakyService),
 *     process: ["dep1", async.retryable(3, function (results, cb) {
 *         maybeProcessData(results.dep1, cb);
 *     })]
 * }, callback);
 */
var retryable = function (opts, task) {
    if (!task) {
        task = opts;
        opts = null;
    }
    var _task = wrapAsync(task);
    return initialParams(function (args, callback) {
        function taskFn(cb) {
            _task.apply(null, args.concat(cb));
        }

        if (opts) retry(opts, taskFn, callback);
        else retry(taskFn, callback);

    });
};

/**
 * Run the functions in the `tasks` collection in series, each one running once
 * the previous function has completed. If any functions in the series pass an
 * error to its callback, no more functions are run, and `callback` is
 * immediately called with the value of the error. Otherwise, `callback`
 * receives an array of results when `tasks` have completed.
 *
 * It is also possible to use an object instead of an array. Each property will
 * be run as a function, and the results will be passed to the final `callback`
 * as an object instead of an array. This can be a more readable way of handling
 *  results from {@link async.series}.
 *
 * **Note** that while many implementations preserve the order of object
 * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
 * explicitly states that
 *
 * > The mechanics and order of enumerating the properties is not specified.
 *
 * So if you rely on the order in which your series of functions are executed,
 * and want this to work on all platforms, consider using an array.
 *
 * @name series
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection containing
 * [async functions]{@link AsyncFunction} to run in series.
 * Each function can complete with any number of optional `result` values.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This function gets a results array (or object)
 * containing all the result arguments passed to the `task` callbacks. Invoked
 * with (err, result).
 * @example
 * async.series([
 *     function(callback) {
 *         // do some stuff ...
 *         callback(null, 'one');
 *     },
 *     function(callback) {
 *         // do some more stuff ...
 *         callback(null, 'two');
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     // results is now equal to ['one', 'two']
 * });
 *
 * async.series({
 *     one: function(callback) {
 *         setTimeout(function() {
 *             callback(null, 1);
 *         }, 200);
 *     },
 *     two: function(callback){
 *         setTimeout(function() {
 *             callback(null, 2);
 *         }, 100);
 *     }
 * }, function(err, results) {
 *     // results is now equal to: {one: 1, two: 2}
 * });
 */
function series(tasks, callback) {
    _parallel(eachOfSeries, tasks, callback);
}

/**
 * Returns `true` if at least one element in the `coll` satisfies an async test.
 * If any iteratee call returns `true`, the main `callback` is immediately
 * called.
 *
 * @name some
 * @static
 * @memberOf module:Collections
 * @method
 * @alias any
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 * @example
 *
 * async.some(['file1','file2','file3'], function(filePath, callback) {
 *     fs.access(filePath, function(err) {
 *         callback(null, !err)
 *     });
 * }, function(err, result) {
 *     // if result is true then at least one of the files exists
 * });
 */
var some = doParallel(_createTester(Boolean, identity));

/**
 * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
 *
 * @name someLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anyLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in parallel.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 */
var someLimit = doParallelLimit(_createTester(Boolean, identity));

/**
 * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
 *
 * @name someSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.some]{@link module:Collections.some}
 * @alias anySeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async truth test to apply to each item
 * in the collections in series.
 * The iteratee should complete with a boolean `result` value.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called as soon as any
 * iteratee returns `true`, or after all the iteratee functions have finished.
 * Result will be either `true` or `false` depending on the values of the async
 * tests. Invoked with (err, result).
 */
var someSeries = doLimit(someLimit, 1);

/**
 * Sorts a list by the results of running each `coll` value through an async
 * `iteratee`.
 *
 * @name sortBy
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with a value to use as the sort criteria as
 * its `result`.
 * Invoked with (item, callback).
 * @param {Function} callback - A callback which is called after all the
 * `iteratee` functions have finished, or an error occurs. Results is the items
 * from the original `coll` sorted by the values returned by the `iteratee`
 * calls. Invoked with (err, results).
 * @example
 *
 * async.sortBy(['file1','file2','file3'], function(file, callback) {
 *     fs.stat(file, function(err, stats) {
 *         callback(err, stats.mtime);
 *     });
 * }, function(err, results) {
 *     // results is now the original array of files sorted by
 *     // modified date
 * });
 *
 * // By modifying the callback parameter the
 * // sorting order can be influenced:
 *
 * // ascending order
 * async.sortBy([1,9,3,5], function(x, callback) {
 *     callback(null, x);
 * }, function(err,result) {
 *     // result callback
 * });
 *
 * // descending order
 * async.sortBy([1,9,3,5], function(x, callback) {
 *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around
 * }, function(err,result) {
 *     // result callback
 * });
 */
function sortBy (coll, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    map(coll, function (x, callback) {
        _iteratee(x, function (err, criteria) {
            if (err) return callback(err);
            callback(null, {value: x, criteria: criteria});
        });
    }, function (err, results) {
        if (err) return callback(err);
        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));
    });

    function comparator(left, right) {
        var a = left.criteria, b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
    }
}

/**
 * Sets a time limit on an asynchronous function. If the function does not call
 * its callback within the specified milliseconds, it will be called with a
 * timeout error. The code property for the error object will be `'ETIMEDOUT'`.
 *
 * @name timeout
 * @static
 * @memberOf module:Utils
 * @method
 * @category Util
 * @param {AsyncFunction} asyncFn - The async function to limit in time.
 * @param {number} milliseconds - The specified time limit.
 * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)
 * to timeout Error for more information..
 * @returns {AsyncFunction} Returns a wrapped function that can be used with any
 * of the control flow functions.
 * Invoke this function with the same parameters as you would `asyncFunc`.
 * @example
 *
 * function myFunction(foo, callback) {
 *     doAsyncTask(foo, function(err, data) {
 *         // handle errors
 *         if (err) return callback(err);
 *
 *         // do some stuff ...
 *
 *         // return processed data
 *         return callback(null, data);
 *     });
 * }
 *
 * var wrapped = async.timeout(myFunction, 1000);
 *
 * // call `wrapped` as you would `myFunction`
 * wrapped({ bar: 'bar' }, function(err, data) {
 *     // if `myFunction` takes < 1000 ms to execute, `err`
 *     // and `data` will have their expected values
 *
 *     // else `err` will be an Error with the code 'ETIMEDOUT'
 * });
 */
function timeout(asyncFn, milliseconds, info) {
    var fn = wrapAsync(asyncFn);

    return initialParams(function (args, callback) {
        var timedOut = false;
        var timer;

        function timeoutCallback() {
            var name = asyncFn.name || 'anonymous';
            var error  = new Error('Callback function "' + name + '" timed out.');
            error.code = 'ETIMEDOUT';
            if (info) {
                error.info = info;
            }
            timedOut = true;
            callback(error);
        }

        args.push(function () {
            if (!timedOut) {
                callback.apply(null, arguments);
                clearTimeout(timer);
            }
        });

        // setup timer and call original function
        timer = setTimeout(timeoutCallback, milliseconds);
        fn.apply(null, args);
    });
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil;
var nativeMax = Math.max;

/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */
function baseRange(start, end, step, fromRight) {
  var index = -1,
      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);

  while (length--) {
    result[fromRight ? length : ++index] = start;
    start += step;
  }
  return result;
}

/**
 * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name timesLimit
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} count - The number of times to run the function.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see [async.map]{@link module:Collections.map}.
 */
function timeLimit(count, limit, iteratee, callback) {
    var _iteratee = wrapAsync(iteratee);
    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);
}

/**
 * Calls the `iteratee` function `n` times, and accumulates results in the same
 * manner you would use with [map]{@link module:Collections.map}.
 *
 * @name times
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.map]{@link module:Collections.map}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 * @example
 *
 * // Pretend this is some complicated async factory
 * var createUser = function(id, callback) {
 *     callback(null, {
 *         id: 'user' + id
 *     });
 * };
 *
 * // generate 5 users
 * async.times(5, function(n, next) {
 *     createUser(n, function(err, user) {
 *         next(err, user);
 *     });
 * }, function(err, users) {
 *     // we should now have 5 users
 * });
 */
var times = doLimit(timeLimit, Infinity);

/**
 * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
 *
 * @name timesSeries
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.times]{@link module:ControlFlow.times}
 * @category Control Flow
 * @param {number} n - The number of times to run the function.
 * @param {AsyncFunction} iteratee - The async function to call `n` times.
 * Invoked with the iteration index and a callback: (n, next).
 * @param {Function} callback - see {@link module:Collections.map}.
 */
var timesSeries = doLimit(timeLimit, 1);

/**
 * A relative of `reduce`.  Takes an Object or Array, and iterates over each
 * element in series, each step potentially mutating an `accumulator` value.
 * The type of the accumulator defaults to the type of collection passed in.
 *
 * @name transform
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {*} [accumulator] - The initial state of the transform.  If omitted,
 * it will default to an empty Object or Array, depending on the type of `coll`
 * @param {AsyncFunction} iteratee - A function applied to each item in the
 * collection that potentially modifies the accumulator.
 * Invoked with (accumulator, item, key, callback).
 * @param {Function} [callback] - A callback which is called after all the
 * `iteratee` functions have finished. Result is the transformed accumulator.
 * Invoked with (err, result).
 * @example
 *
 * async.transform([1,2,3], function(acc, item, index, callback) {
 *     // pointless async:
 *     process.nextTick(function() {
 *         acc.push(item * 2)
 *         callback(null)
 *     });
 * }, function(err, result) {
 *     // result is now equal to [2, 4, 6]
 * });
 *
 * @example
 *
 * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {
 *     setImmediate(function () {
 *         obj[key] = val * 2;
 *         callback();
 *     })
 * }, function (err, result) {
 *     // result is equal to {a: 2, b: 4, c: 6}
 * })
 */
function transform (coll, accumulator, iteratee, callback) {
    if (arguments.length <= 3) {
        callback = iteratee;
        iteratee = accumulator;
        accumulator = isArray(coll) ? [] : {};
    }
    callback = once(callback || noop);
    var _iteratee = wrapAsync(iteratee);

    eachOf(coll, function(v, k, cb) {
        _iteratee(accumulator, v, k, cb);
    }, function(err) {
        callback(err, accumulator);
    });
}

/**
 * It runs each task in series but stops whenever any of the functions were
 * successful. If one of the tasks were successful, the `callback` will be
 * passed the result of the successful task. If all tasks fail, the callback
 * will be passed the error and result (if any) of the final attempt.
 *
 * @name tryEach
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array|Iterable|Object} tasks - A collection containing functions to
 * run, each function is passed a `callback(err, result)` it must call on
 * completion with an error `err` (which can be `null`) and an optional `result`
 * value.
 * @param {Function} [callback] - An optional callback which is called when one
 * of the tasks has succeeded, or all have failed. It receives the `err` and
 * `result` arguments of the last attempt at completing the `task`. Invoked with
 * (err, results).
 * @example
 * async.tryEach([
 *     function getDataFromFirstWebsite(callback) {
 *         // Try getting the data from the first website
 *         callback(err, data);
 *     },
 *     function getDataFromSecondWebsite(callback) {
 *         // First website failed,
 *         // Try getting the data from the backup website
 *         callback(err, data);
 *     }
 * ],
 * // optional callback
 * function(err, results) {
 *     Now do something with the data.
 * });
 *
 */
function tryEach(tasks, callback) {
    var error = null;
    var result;
    callback = callback || noop;
    eachSeries(tasks, function(task, callback) {
        wrapAsync(task)(function (err, res/*, ...args*/) {
            if (arguments.length > 2) {
                result = slice(arguments, 1);
            } else {
                result = res;
            }
            error = err;
            callback(!err);
        });
    }, function () {
        callback(error, result);
    });
}

/**
 * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
 * unmemoized form. Handy for testing.
 *
 * @name unmemoize
 * @static
 * @memberOf module:Utils
 * @method
 * @see [async.memoize]{@link module:Utils.memoize}
 * @category Util
 * @param {AsyncFunction} fn - the memoized function
 * @returns {AsyncFunction} a function that calls the original unmemoized function
 */
function unmemoize(fn) {
    return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
    };
}

/**
 * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs.
 *
 * @name whilst
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Function} test - synchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` passes. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has failed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 * @returns undefined
 * @example
 *
 * var count = 0;
 * async.whilst(
 *     function() { return count < 5; },
 *     function(callback) {
 *         count++;
 *         setTimeout(function() {
 *             callback(null, count);
 *         }, 1000);
 *     },
 *     function (err, n) {
 *         // 5 seconds have passed, n = 5
 *     }
 * );
 */
function whilst(test, iteratee, callback) {
    callback = onlyOnce(callback || noop);
    var _iteratee = wrapAsync(iteratee);
    if (!test()) return callback(null);
    var next = function(err/*, ...args*/) {
        if (err) return callback(err);
        if (test()) return _iteratee(next);
        var args = slice(arguments, 1);
        callback.apply(null, [null].concat(args));
    };
    _iteratee(next);
}

/**
 * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when
 * stopped, or an error occurs. `callback` will be passed an error and any
 * arguments passed to the final `iteratee`'s callback.
 *
 * The inverse of [whilst]{@link module:ControlFlow.whilst}.
 *
 * @name until
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @see [async.whilst]{@link module:ControlFlow.whilst}
 * @category Control Flow
 * @param {Function} test - synchronous truth test to perform before each
 * execution of `iteratee`. Invoked with ().
 * @param {AsyncFunction} iteratee - An async function which is called each time
 * `test` fails. Invoked with (callback).
 * @param {Function} [callback] - A callback which is called after the test
 * function has passed and repeated execution of `iteratee` has stopped. `callback`
 * will be passed an error and any arguments passed to the final `iteratee`'s
 * callback. Invoked with (err, [results]);
 */
function until(test, iteratee, callback) {
    whilst(function() {
        return !test.apply(this, arguments);
    }, iteratee, callback);
}

/**
 * Runs the `tasks` array of functions in series, each passing their results to
 * the next in the array. However, if any of the `tasks` pass an error to their
 * own callback, the next function is not executed, and the main `callback` is
 * immediately called with the error.
 *
 * @name waterfall
 * @static
 * @memberOf module:ControlFlow
 * @method
 * @category Control Flow
 * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}
 * to run.
 * Each function should complete with any number of `result` values.
 * The `result` values will be passed as arguments, in order, to the next task.
 * @param {Function} [callback] - An optional callback to run once all the
 * functions have completed. This will be passed the results of the last task's
 * callback. Invoked with (err, [results]).
 * @returns undefined
 * @example
 *
 * async.waterfall([
 *     function(callback) {
 *         callback(null, 'one', 'two');
 *     },
 *     function(arg1, arg2, callback) {
 *         // arg1 now equals 'one' and arg2 now equals 'two'
 *         callback(null, 'three');
 *     },
 *     function(arg1, callback) {
 *         // arg1 now equals 'three'
 *         callback(null, 'done');
 *     }
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 *
 * // Or, with named functions:
 * async.waterfall([
 *     myFirstFunction,
 *     mySecondFunction,
 *     myLastFunction,
 * ], function (err, result) {
 *     // result now equals 'done'
 * });
 * function myFirstFunction(callback) {
 *     callback(null, 'one', 'two');
 * }
 * function mySecondFunction(arg1, arg2, callback) {
 *     // arg1 now equals 'one' and arg2 now equals 'two'
 *     callback(null, 'three');
 * }
 * function myLastFunction(arg1, callback) {
 *     // arg1 now equals 'three'
 *     callback(null, 'done');
 * }
 */
var waterfall = function(tasks, callback) {
    callback = once(callback || noop);
    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));
    if (!tasks.length) return callback();
    var taskIndex = 0;

    function nextTask(args) {
        var task = wrapAsync(tasks[taskIndex++]);
        args.push(onlyOnce(next));
        task.apply(null, args);
    }

    function next(err/*, ...args*/) {
        if (err || taskIndex === tasks.length) {
            return callback.apply(null, arguments);
        }
        nextTask(slice(arguments, 1));
    }

    nextTask([]);
};

/**
 * An "async function" in the context of Async is an asynchronous function with
 * a variable number of parameters, with the final parameter being a callback.
 * (`function (arg1, arg2, ..., callback) {}`)
 * The final callback is of the form `callback(err, results...)`, which must be
 * called once the function is completed.  The callback should be called with a
 * Error as its first argument to signal that an error occurred.
 * Otherwise, if no error occurred, it should be called with `null` as the first
 * argument, and any additional `result` arguments that may apply, to signal
 * successful completion.
 * The callback must be called exactly once, ideally on a later tick of the
 * JavaScript event loop.
 *
 * This type of function is also referred to as a "Node-style async function",
 * or a "continuation passing-style function" (CPS). Most of the methods of this
 * library are themselves CPS/Node-style async functions, or functions that
 * return CPS/Node-style async functions.
 *
 * Wherever we accept a Node-style async function, we also directly accept an
 * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.
 * In this case, the `async` function will not be passed a final callback
 * argument, and any thrown error will be used as the `err` argument of the
 * implicit callback, and the return value will be used as the `result` value.
 * (i.e. a `rejected` of the returned Promise becomes the `err` callback
 * argument, and a `resolved` value becomes the `result`.)
 *
 * Note, due to JavaScript limitations, we can only detect native `async`
 * functions and not transpilied implementations.
 * Your environment must have `async`/`await` support for this to work.
 * (e.g. Node > v7.6, or a recent version of a modern browser).
 * If you are using `async` functions through a transpiler (e.g. Babel), you
 * must still wrap the function with [asyncify]{@link module:Utils.asyncify},
 * because the `async function` will be compiled to an ordinary function that
 * returns a promise.
 *
 * @typedef {Function} AsyncFunction
 * @static
 */

/**
 * Async is a utility module which provides straight-forward, powerful functions
 * for working with asynchronous JavaScript. Although originally designed for
 * use with [Node.js](http://nodejs.org) and installable via
 * `npm install --save async`, it can also be used directly in the browser.
 * @module async
 * @see AsyncFunction
 */


/**
 * A collection of `async` functions for manipulating collections, such as
 * arrays and objects.
 * @module Collections
 */

/**
 * A collection of `async` functions for controlling the flow through a script.
 * @module ControlFlow
 */

/**
 * A collection of `async` utility functions.
 * @module Utils
 */

var index = {
    apply: apply,
    applyEach: applyEach,
    applyEachSeries: applyEachSeries,
    asyncify: asyncify,
    auto: auto,
    autoInject: autoInject,
    cargo: cargo,
    compose: compose,
    concat: concat,
    concatLimit: concatLimit,
    concatSeries: concatSeries,
    constant: constant,
    detect: detect,
    detectLimit: detectLimit,
    detectSeries: detectSeries,
    dir: dir,
    doDuring: doDuring,
    doUntil: doUntil,
    doWhilst: doWhilst,
    during: during,
    each: eachLimit,
    eachLimit: eachLimit$1,
    eachOf: eachOf,
    eachOfLimit: eachOfLimit,
    eachOfSeries: eachOfSeries,
    eachSeries: eachSeries,
    ensureAsync: ensureAsync,
    every: every,
    everyLimit: everyLimit,
    everySeries: everySeries,
    filter: filter,
    filterLimit: filterLimit,
    filterSeries: filterSeries,
    forever: forever,
    groupBy: groupBy,
    groupByLimit: groupByLimit,
    groupBySeries: groupBySeries,
    log: log,
    map: map,
    mapLimit: mapLimit,
    mapSeries: mapSeries,
    mapValues: mapValues,
    mapValuesLimit: mapValuesLimit,
    mapValuesSeries: mapValuesSeries,
    memoize: memoize,
    nextTick: nextTick,
    parallel: parallelLimit,
    parallelLimit: parallelLimit$1,
    priorityQueue: priorityQueue,
    queue: queue$1,
    race: race,
    reduce: reduce,
    reduceRight: reduceRight,
    reflect: reflect,
    reflectAll: reflectAll,
    reject: reject,
    rejectLimit: rejectLimit,
    rejectSeries: rejectSeries,
    retry: retry,
    retryable: retryable,
    seq: seq,
    series: series,
    setImmediate: setImmediate$1,
    some: some,
    someLimit: someLimit,
    someSeries: someSeries,
    sortBy: sortBy,
    timeout: timeout,
    times: times,
    timesLimit: timeLimit,
    timesSeries: timesSeries,
    transform: transform,
    tryEach: tryEach,
    unmemoize: unmemoize,
    until: until,
    waterfall: waterfall,
    whilst: whilst,

    // aliases
    all: every,
    allLimit: everyLimit,
    allSeries: everySeries,
    any: some,
    anyLimit: someLimit,
    anySeries: someSeries,
    find: detect,
    findLimit: detectLimit,
    findSeries: detectSeries,
    forEach: eachLimit,
    forEachSeries: eachSeries,
    forEachLimit: eachLimit$1,
    forEachOf: eachOf,
    forEachOfSeries: eachOfSeries,
    forEachOfLimit: eachOfLimit,
    inject: reduce,
    foldl: reduce,
    foldr: reduceRight,
    select: filter,
    selectLimit: filterLimit,
    selectSeries: filterSeries,
    wrapSync: asyncify
};

exports['default'] = index;
exports.apply = apply;
exports.applyEach = applyEach;
exports.applyEachSeries = applyEachSeries;
exports.asyncify = asyncify;
exports.auto = auto;
exports.autoInject = autoInject;
exports.cargo = cargo;
exports.compose = compose;
exports.concat = concat;
exports.concatLimit = concatLimit;
exports.concatSeries = concatSeries;
exports.constant = constant;
exports.detect = detect;
exports.detectLimit = detectLimit;
exports.detectSeries = detectSeries;
exports.dir = dir;
exports.doDuring = doDuring;
exports.doUntil = doUntil;
exports.doWhilst = doWhilst;
exports.during = during;
exports.each = eachLimit;
exports.eachLimit = eachLimit$1;
exports.eachOf = eachOf;
exports.eachOfLimit = eachOfLimit;
exports.eachOfSeries = eachOfSeries;
exports.eachSeries = eachSeries;
exports.ensureAsync = ensureAsync;
exports.every = every;
exports.everyLimit = everyLimit;
exports.everySeries = everySeries;
exports.filter = filter;
exports.filterLimit = filterLimit;
exports.filterSeries = filterSeries;
exports.forever = forever;
exports.groupBy = groupBy;
exports.groupByLimit = groupByLimit;
exports.groupBySeries = groupBySeries;
exports.log = log;
exports.map = map;
exports.mapLimit = mapLimit;
exports.mapSeries = mapSeries;
exports.mapValues = mapValues;
exports.mapValuesLimit = mapValuesLimit;
exports.mapValuesSeries = mapValuesSeries;
exports.memoize = memoize;
exports.nextTick = nextTick;
exports.parallel = parallelLimit;
exports.parallelLimit = parallelLimit$1;
exports.priorityQueue = priorityQueue;
exports.queue = queue$1;
exports.race = race;
exports.reduce = reduce;
exports.reduceRight = reduceRight;
exports.reflect = reflect;
exports.reflectAll = reflectAll;
exports.reject = reject;
exports.rejectLimit = rejectLimit;
exports.rejectSeries = rejectSeries;
exports.retry = retry;
exports.retryable = retryable;
exports.seq = seq;
exports.series = series;
exports.setImmediate = setImmediate$1;
exports.some = some;
exports.someLimit = someLimit;
exports.someSeries = someSeries;
exports.sortBy = sortBy;
exports.timeout = timeout;
exports.times = times;
exports.timesLimit = timeLimit;
exports.timesSeries = timesSeries;
exports.transform = transform;
exports.tryEach = tryEach;
exports.unmemoize = unmemoize;
exports.until = until;
exports.waterfall = waterfall;
exports.whilst = whilst;
exports.all = every;
exports.allLimit = everyLimit;
exports.allSeries = everySeries;
exports.any = some;
exports.anyLimit = someLimit;
exports.anySeries = someSeries;
exports.find = detect;
exports.findLimit = detectLimit;
exports.findSeries = detectSeries;
exports.forEach = eachLimit;
exports.forEachSeries = eachSeries;
exports.forEachLimit = eachLimit$1;
exports.forEachOf = eachOf;
exports.forEachOfSeries = eachOfSeries;
exports.forEachOfLimit = eachOfLimit;
exports.inject = reduce;
exports.foldl = reduce;
exports.foldr = reduceRight;
exports.select = filter;
exports.selectLimit = filterLimit;
exports.selectSeries = filterSeries;
exports.wrapSync = asyncify;

Object.defineProperty(exports, '__esModule', { value: true });

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(43).setImmediate, __webpack_require__(1), __webpack_require__(0), __webpack_require__(15)(module)))

/***/ }),
/* 12 */
/***/ (function(module, exports) {


module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
const routerClientInstance_1 = __webpack_require__(6);
const validate_1 = __webpack_require__(9); // Finsemble args validator
const logger_1 = __webpack_require__(2);
const system_1 = __webpack_require__(4);
const dependencyManager_1 = __webpack_require__(22);
/**
 * @introduction
 * <h2>Base Client</h2>
 * The Base Client is inherited by every client to provide common functionality to the clients. Clients communicate their status to each other through the Router and receive service status from the service manager. Once all dependecies are met, either client or service, the client's `onReady` method is fired.
 *
 * We're currently halfway through migrating our clients from extending a normal function prototype to an ES6 class.
 * "_BaseClient" represents the new class, while "BaseClient" is the original function. When the migration is complete,
 * we will remove the old function and rename "_BaseClient" to "BaseClient".
 * @constructor
 * @param {Object} params
 * @param {Function} params.onReady - A function to be called after the client has initialized.
 * @param {String} params.name - The name of the client
 * @shouldBePublished false
    @example
    import { _BaseClient as BaseClient } from "./baseClient";
    var NewClient = function (params) {
        BaseClient.call(this, params);
        var self = this;

        return this;
    };

    var clientInstance = new NewClient({
        onReady: function (cb) {
            Logger.system.log("NewClient Online");
            cb();
        },
        name:"NewClient"
    });
    clientInstance.requiredServices = [REPLACE_THIS_ARRAY_WITH_DEPENENCIES];
    clientInstance.initialize();
    module.exports = clientInstance;
    @private
 */
class _BaseClient {
    constructor(params) {
        /** The current status of this service. */
        this.status = "offline";
        this.startupTime = 0;
        this.initialized = false;
        this.startupDependencies = { services: [], clients: [] };
        /** Gets the current window. */
        this.finsembleWindow = null;
        /** Gets the current window name. */
        this.windowName = "";
        /** Queue of functions to process once the client goes online. */
        this.clientReadyQueue = [];
        this.processClientReadyQueue = () => {
            for (let cb of this.clientReadyQueue) {
                cb();
            }
            this.clientReadyQueue = [];
        };
        this.onReady = (cb) => {
            this.clientReadyQueue.push(cb);
            if (this.status === "online") {
                this.processClientReadyQueue();
            }
        };
        /** Check to see if the client can come online. We check this against the required services and clients */
        this.setClientOnline = () => {
            this.status = "online";
            const onReadyMessage = `STARTUP:CLIENT ONLINE:${this.finWindow.name}:${this.name}`;
            this.startupTime = window.performance.now() - this.startupTime;
            const readyCB = () => {
                this.logger.system.debug(onReadyMessage);
                this.processClientReadyQueue();
                dependencyManager_1.FSBLDependencyManagerSingleton.setClientOnline(this.name);
            };
            if (this._onReady) {
                this._onReady(readyCB);
            }
            else {
                readyCB();
            }
        };
        this.initialize = (cb = Function.prototype) => {
            if (this.initialized)
                return;
            this.initialized = true;
            this.startupTime = performance.now();
            this.routerClient.onReady(() => {
                // TODO, [terry] allow the finsembleWindow to be passed in, so we can support proxying windowClient in RPC
                this.finWindow = system_1.System.Window.getCurrent();
                this.windowName = this.finWindow.name;
                this.logger.system.debug("Baseclient Init Router Ready", this.name);
                dependencyManager_1.FSBLDependencyManagerSingleton.startup.waitFor(this.startupDependencies, () => {
                    cb();
                    this.setClientOnline();
                });
            });
        };
        this.onClose = (cb) => {
            if (cb)
                cb();
        };
        this.name = params.name;
        this._onReady = params.onReady;
        this.startupDependencies = params.startupDependencies || {
            services: [],
            clients: []
        };
        // @TODO - Refactor this to use DI.
        this.logger = logger_1.default;
        /**
         * Reference to the RouterClient
         */
        this.routerClient = routerClientInstance_1.default;
    }
}
exports._BaseClient = _BaseClient;
/**
 * @introduction
 * <h2>Base Client</h2>
 * The Base Client is inherited by every client to provide common functionality to the clients. Clients communicate their status to each other through the Router and receive service status from the service manager. Once all dependecies are met, either client or service, the client's `onReady` method is fired.
 * @constructor
 * @param {Object} params
 * @param {Function} params.onReady - A function to be called after the client has initialized.
 * @param {String} params.name - The name of the client
 * @shouldBePublished false
    @example
    import { _BaseClient as BaseClient } from "./baseClient";
    var NewClient = function (params) {
        BaseClient.call(this, params);
        var self = this;

        return this;
    };

    var clientInstance = new NewClient({
        onReady: function (cb) {
            Logger.system.log("NewClient Online");
            cb();
        },
        name:"NewClient"
    });
    clientInstance.requiredServices = [REPLACE_THIS_ARRAY_WITH_DEPENENCIES];
    clientInstance.initialize();
    module.exports = clientInstance;
    @private
 */
var BaseClient = function (params) {
    validate_1.default.args(params, "object=");
    var self = this;
    var status = "offline";
    var onReady;
    this.startupTime = 0;
    if (params) {
        if (params.onReady) {
            onReady = params.onReady;
        }
        this.name = params.name;
    }
    this.initialized = false;
    this.startupDependencies = params.startupDependencies || {
        services: [],
        clients: []
    };
    /**
     * Reference to the RouterClient
     *  @type {Object}
     */
    this.routerClient = routerClientInstance_1.default;
    /**
     * Gets the current openfin window - stays here for backward compatiblity
     * @type {object}
     */
    this.finWindow = null;
    /**
     * Gets the current window
     * @type {object}
     */
    this.finsembleWindow = null;
    /**
     * Gets the cusrrent window name
     *  @type {string}
     */
    this.windowName = ""; //The current window
    /**
     * Services the are required to be online before the service can come online
     *  @type {Array.<Object>}
     */
    this.requiredServices = [];
    /**
     * Clients the are required to be online before the service can come online
     *  @type {Array.<Object>}
     */
    this.requiredClients = [];
    /**
     * Queue of functions to process once the client goes online.
     * @private
     */
    this.clientReadyQueue = [];
    /**
     * Iterates through the clientReadyQueue, invoking each call to `.ready`.
     */
    this.processClientReadyQueue = function () {
        for (var i = 0; i < this.clientReadyQueue.length; i++) {
            let callback = this.clientReadyQueue[i];
            if (typeof callback === "function") {
                callback();
            }
        }
        this.clientReadyQueue = [];
    };
    /**
     * Method for adding callbacks to each client.
     */
    this.onReady = function (cb) {
        this.clientReadyQueue.push(cb);
        if (status === "online") {
            this.processClientReadyQueue();
        }
    };
    //Check to see if the client can come online. We check this against the required services and clients
    this.setClientOnline = function () {
        var self = this;
        status = "online";
        let onReadyMessage = `StARTUP:CLIENT ONLINE:${self.finWindow.name}:${self.name}`;
        self.startupTime = performance.now() - self.startupTime;
        if (onReady) {
            onReady(function () {
                logger_1.default.system.debug(onReadyMessage);
                self.processClientReadyQueue();
                dependencyManager_1.FSBLDependencyManagerSingleton.setClientOnline(self.name);
            });
        }
        else {
            logger_1.default.system.debug(onReadyMessage);
            self.processClientReadyQueue();
            dependencyManager_1.FSBLDependencyManagerSingleton.setClientOnline(self.name);
        }
    };
    /**
    * Starts the process of checking services and any other function required before the client can come online
    */
    this.initialize = function (cb = Function.prototype) {
        if (self.initialized) {
            return;
        }
        self.initialized = true;
        self.setClientOnline = self.setClientOnline.bind(self);
        self.startupTime = performance.now();
        self.routerClient.onReady(function () {
            // TODO, [terry] allow the finsembleWindow to be passed in, so we can support proxying windowClient in RPC
            self.finWindow = system_1.System.Window.getCurrent();
            self.windowName = self.finWindow.name;
            logger_1.default.system.debug("Baseclient Init Router Ready", self.name);
            dependencyManager_1.FSBLDependencyManagerSingleton.startup.waitFor({
                services: self.startupDependencies.services || [],
                clients: self.startupDependencies.clients || []
            }, () => {
                cb();
                self.setClientOnline();
            });
        });
    };
    this.onClose = function () { };
};
exports.default = BaseClient;


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__system__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__system___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__system__);
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/





/**
 *
 *
/**
 *
 *
/**
 *
 *
/**
 *
 *
 */
var ConfigUtil = function () {

	var self = this;

	/**
  * @introduction
  * <h2>Finsemble Configuration Utility Functions</h2>
  * @private
  * @class ConfigUtil
  */
	// run through the configuration object and resolve any variables definitions (i.e. $applicationRoot)
	this.resolveConfigVariables = function (finsembleConfig, startingConfigObject) {
		var pass = 0;
		var needsAnotherPass = true;

		/**
   * Called by resolveObject().
   * This function parses a string to find variables.
   * It looks up the value of any identified variables, replacing them in the string.
   * The completed string is then returned.
   * @TODO convert this function to use an actual tokenizer?
   **/
		function resolveString(configString) {
			var delimiters = /[/\\:?=&\s]/; // delimiters in regex form
			var tokens = configString.split(delimiters);
			for (var i = 0; i < tokens.length; i++) {
				if (tokens[i][0] === "$") {
					// special variable character $ has to first char in string
					var variableReference = tokens[i].substring(1); // string off the leading $
					var variableResolution = finsembleConfig[variableReference]; // the variable value is another config property, which already must be set
					var newValue = configString.replace(tokens[i], variableResolution); // replace the variable reference with new value
					__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.info("forceObjectsToLogger", "ConfigUtil.resolveConfigVariables:resolveString configString", tokens[i], variableReference, variableResolution, "oldvalue=", configString, "value=", newValue);
					needsAnotherPass = true; // <<-- here is the only place needsAnotherPass is set, since still resolving variables
					configString = newValue;
				}
			}
			return configString;
		}

		// process an array of config items looking for variables to resolve (a recursive routine)
		function resolveArray(configArray, pass, recursionLevel) {
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.info("forceObjectsToLogger", "resolveArray", "pass", pass, "recursionLevel", recursionLevel, "configArray:", configArray);
			for (var i = 0; i < configArray.length; i++) {
				var value = configArray[i];
				if (typeof value === "string" && value.indexOf("$") > -1) {
					configArray[i] = resolveString(value);
				} else if (value instanceof Array) {
					resolveArray(value, pass, recursionLevel + 1); // array reference passed so don't need return value
				} else if (typeof value === "object") {
					resolveObject(value, pass, recursionLevel + 1); // object reference passed so don't need return value
				}
			}
		}

		/**
   * Expand "variables" within a config object. Variables are strings that begin with "$".
   * For instance, `finsemble.bar:"help", foo:$bar` would be expanded into `finsemble.bar:"help",foo:"help"`
   * This is a recursive routine
   */
		function resolveObject(configObject, pass, recursionLevel) {
			configObject = configObject || {}; // don't error on bad config
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.info("forceObjectsToLogger", "ConfigUtil.resolveConfigVariables:resolveObject", "pass", pass, "recursionLevel", recursionLevel, "configObject:", configObject);
			Object.keys(configObject).forEach(function (key) {
				var value = configObject[key];
				if (typeof value === "string" && value.indexOf("$") > -1) {
					configObject[key] = resolveString(value);
				} else if (value instanceof Array) {
					resolveArray(value, pass, recursionLevel + 1); // array reference passed so don't need return value
				} else if (typeof value === "object") {
					resolveObject(value, pass, recursionLevel + 1); // object reference passed so don't need return value
				}
			});
		}

		// since variables may be nested, keep resolving till no more left
		while (needsAnotherPass) {
			needsAnotherPass = false; // don't need another pass afterwards unless a variable is resolved somewhere in finsembleConfig
			resolveObject(startingConfigObject, ++pass, 1);
		}
	};

	// This does mimimal processing of the manifest, just enough to support getting the router up, which is only expanding variables (e.g. moduleRoot) in the raw manifest
	this.getExpandedRawManifest = function (callback, errorCB) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("ConfigUtil.getExpandedRawManifest starting");

		function getRawManifest(callback, application, level) {
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("forceObjectsToLogger", "ConfigUtil.getExpandedRawManifest:getRawManifest", application, level);

			application.getManifest(function (manifest) {
				// get raw openfin manifest
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("forceObjectsToLogger", "ConfigUtil.getExpandedRawManifest:getExpandedRawManifest: manifest retrieved. Pre-variable resolution", manifest);
				self.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables first time so can fild config config location
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("forceObjectsToLogger", "ConfigUtil.getExpandedRawManifest:getExpandedRawManifest:Complete. post-variable resolution", manifest);
				callback(manifest);
			}, function (err) {
				if (err) {
					__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("ConfigUtil.getExpandedRawManifest:application.getManifest:err", err);
					if (errorCb) errorCB();
				}
				// no manifest so try parent
				application.getParentUuid(function (parentUuid) {
					var parentApplication = __WEBPACK_IMPORTED_MODULE_2__system__["System"].Application.wrap(parentUuid);
					__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("forceObjectsToLogger", "uuid", parentUuid, "parentApplication", parentApplication);
					if (level < 10) {
						getRawManifest(callback, parentApplication, ++level);
					} else {
						// still could find so must be a problem (i.e. avoid infinite loop)
						callback("could not find manifest in parent applications");
					}
				});
			});
		}

		__WEBPACK_IMPORTED_MODULE_2__system__["System"].ready(function () {
			// make sure openfin is ready
			var application = __WEBPACK_IMPORTED_MODULE_2__system__["System"].Application.getCurrent();
			getRawManifest(callback, application, 1);
		});
	};

	// async read of JSON config file
	this.readConfigFile = function (coreConfigFile, importCallback) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("fetching " + coreConfigFile);
		fetch(coreConfigFile, {
			credentials: "include"
		}).then(function (response) {
			return response.json();
		}).catch(function (err) {
			importCallback("failure importing: " + err, null);
		}).then(function (importObject) {
			importCallback(null, importObject);
		});
	};

	// This does a "first stage" processing of the manifest, providing enought config to start finsemble.
	// Pull in the initial manifest, which includes gettig the "hiddlen" core config file along with its import definitions, and expand all variables.
	// However, the full config processing, incluing actually doing the imports, is only done in the Config Service.
	this.getInitialManifest = function (callback) {

		__WEBPACK_IMPORTED_MODULE_2__system__["System"].ready(function () {
			// make sure openfin is ready
			var application = __WEBPACK_IMPORTED_MODULE_2__system__["System"].Application.getCurrent();
			application.getManifest(function (manifest) {
				// get raw openfin manifest
				manifest.finsemble = manifest.finsemble || {}; // don't error on bad config
				self.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables first time so can find config config location
				let CORE_CONFIG = manifest.finsemble.moduleRoot + "/configs/core/config.json"; // <<<--- here is the "hidden" core config file
				self.readConfigFile(CORE_CONFIG, function (error, newFinsembleConfigObject) {
					// fetch the core config file
					if (!error) {
						Object.keys(newFinsembleConfigObject).forEach(function (key) {
							if (key === "importConfig") {
								// add any importConfig items from the core to the existing importConifg
								manifest.finsemble.importConfig = manifest.finsemble.importConfig || [];
								for (let i = 0; i < newFinsembleConfigObject.importConfig.length; i++) {
									manifest.finsemble.importConfig.unshift(newFinsembleConfigObject.importConfig[i]);
								}
							} else if (key === "importThirdPartyConfig") {
								// add any importThirdPartyConfig items from the core to the existing importConifg
								manifest.finsemble.importThirdPartyConfig = manifest.finsemble.importThirdPartyConfig || [];
								for (let i = 0; i < newFinsembleConfigObject.importThirdPartyConfig.length; i++) {
									manifest.finsemble.importThirdPartyConfig.unshift(newFinsembleConfigObject.importThirdPartyConfig[i]);
								}
							} else {
								manifest.finsemble[key] = newFinsembleConfigObject[key];
							}
						});
						self.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables with finsemble config
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("forceObjectsToLogger", "ConfigUtil.getInitialManifest:getCoreConfig:Initial Manifest after variables Resolved", manifest);
					} else {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("ConfigUtil.getInitialManifest:getCoreConfig:failed importing into finsemble config", error);
					}
					callback(manifest);
				});
			});
		});
	};

	// output JSON objecvt to file
	this.promptAndSaveJSONToLocalFile = function (filename, jsonObject) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("saveJSONToLocalFile", filename, jsonObject);

		let dataStr = JSON.stringify(jsonObject, null, "\t");
		let dataUri = "data:application/json;charset=utf-8," + encodeURIComponent(dataStr);

		let exportFileDefaultName = filename + ".json";

		let linkElement = document.createElement("a");
		linkElement.setAttribute("href", dataUri);
		linkElement.setAttribute("download", exportFileDefaultName);
		linkElement.click();
	};

	// utility function for future use
	this.configFormatForExport = function (typeOfConfig, configObject) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("configFormatForExport starting", typeOfConfig, configObject);
		var exportConfig = __WEBPACK_IMPORTED_MODULE_0__util__["default"].clone(configObject);

		if (typeOfConfig === "raw") {
			// do nothing since config is ready to export as is
		} else if (typeOfConfig === "all") {
			delete exportConfig.importConfig;
			delete exportConfig.comment;
		} else if (typeOfConfig === "application") {
			delete exportConfig.importConfig;
			delete exportConfig.comment;
			delete exportConfig.system;
			delete exportConfig.services;
		} else if (typeOfConfig === "workspace") {
			exportConfig = { workspace: exportConfig };
		} else if (typeOfConfig === "workspaceTemplate") {
			let workspaceDefinition = {};
			workspaceDefinition[exportConfig.name] = exportConfig;
			exportConfig = { workspaceTemplates: workspaceDefinition };
		} else if (typeOfConfig === "services") {
			exportConfig = exportConfig.services;
		} else if (typeOfConfig === "components") {
			exportConfig = exportConfig.components;
		}

		return exportConfig;
	};

	/////////////////////////////////////////////////////////////////////////
	/////////////// Remaining code is for config verification ///////////////
	/////////////////////////////////////////////////////////////////////////

	// convenience constructor to return record used in configVerifyObject.
	this.VerifyConfigRecord = function (propertyType, propertyCondition) {
		this._verify = {
			type: propertyType,
			condition: propertyCondition
		};
	};

	// convenience constants for definiting verification object. See example usage in ServiceManager or ConfigService.
	// Required means startup will break without it, so error.
	// Optional means startup will not break without it; however, it is documented and expected as part of the config that should always be there.  So warning message only.
	// Deprecated mean startup will no break but old config format is used and should be updated.
	this.REQUIRED_STRING = new this.VerifyConfigRecord("string", "required");
	this.REQUIRED_OBJECT = new this.VerifyConfigRecord("object", "required");
	this.REQUIRED_BOOLEAN = new this.VerifyConfigRecord("boolean", "required");
	this.REQUIRED_ARRAY = new this.VerifyConfigRecord("array", "required");
	this.OPTIONAL_EXPECTED_STRING = new this.VerifyConfigRecord("string", "optional");
	this.OPTIONAL_EXPECTED_OBJECT = new this.VerifyConfigRecord("object", "optional");
	this.OPTIONAL_EXPECTED_BOOLEAN = new this.VerifyConfigRecord("boolean", "optional");
	this.OPTIONAL_EXPECTED_ARRAY = new this.VerifyConfigRecord("array", "optional");
	this.DEPRECATED_STRING = new this.VerifyConfigRecord("string", "DEPRECATED");
	this.DEPRECATED_OBJECT = new this.VerifyConfigRecord("object", "DEPRECATED");
	this.DEPRECATED_BOOLEAN = new this.VerifyConfigRecord("boolean", "DEPRECATED");
	this.DEPRECATED_ARRAY = new this.VerifyConfigRecord("array", "DEPRECATED");

	// check type of one config property. Return true if ok; otherwise false. Must handle null configProperty (returning false).
	function checkType(configProperty, type) {
		var typeOk = true;
		if (configProperty) {
			if (type == "array") {
				if (!Array.isArray(configProperty)) {
					typeOk = false;
				}
			} else {
				// note "array" type is being distinguished from "object" type, so configProperty type shouldn't be an array
				if (Array.isArray(configProperty) || typeof configProperty !== type) {
					typeOk = false;
				}
			}
		} else {
			typeOk = false;
		}
		return typeOk;
	}

	// Verifies one config property given it's corresponding verifyRecord and returns appropriate result.
	function verifyConfigProperty(fullPathName, configProperty, verifyRecord) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.verbose(`verifyConfigProperty for ${fullPathName}`, configProperty, verifyRecord);
		var resultOk = true;
		switch (verifyRecord._verify.condition) {
			case "required":
				resultOk = checkType(configProperty, verifyRecord._verify.type);
				if (!resultOk) {
					// required must exist and have correct type
					__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error(`Illegally formatted configuration.  Type of ${fullPathName} is not an expected ${verifyRecord._verify.type}`, configProperty, verifyRecord);
				}
				break;
			case "optional":
				if (!configProperty) {
					// missing optional only generates warning
					__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.warn(`CONFIGURATION WARNING: Expected configuration missing for ${fullPathName}.`, configProperty, verifyRecord);
				} else {
					resultOk = checkType(configProperty, verifyRecord._verify.type);
					if (!resultOk) {
						// optional only errors with wrong type
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error(`Illegally formatted configuration. Type of ${fullPathName} is not an expected ${verifyRecord._verify.type}`, configProperty, verifyRecord);
					}
				}
				break;
			case "DEPRECATED":
				if (configProperty) {
					// DEPRECATED generates warning
					__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.warn(`CONFIGURATION WARNING: DEPRECATED configuration ${fullPathName}.`, configProperty, verifyRecord);
					resultOk = checkType(configProperty, verifyRecord._verify.type);
					if (!resultOk) {
						// DEPRECATED only errors with wrong type
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error(`Config ${fullPathName} is DEPRECATED and illegally formatted.  Expected type is ${verifyRecord._verify.type}.`, configProperty, verifyRecord);
					}
				}
				break;
			default:
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error(`Illegally formatted config record.  Condition ${verifyRecord._verify.condition} unknown`, configProperty, verifyRecord);
		}
		return resultOk;
	}

	/**
  * Verifies config is correct and logs messages as needed. Recursively walks configObject and configVerifyObject.
  *
  * @param {object} fullPathName path name of config being verfied (e.g. "manifest", "manifest.finsemble"); used for error messages
  * @param {object} configObject the configuration object to verify (typically the manifest object or manifest.finsemble object)
  * @param {object} configVerifyObject object to drive the verification; data driven.
  *
  * Example configVerifyObject below.
  * 		Note verification records (e.g. REQUIRED_STRING) only go at the leaf level, but code must handle corresponding undefined config at all levels.
  *
  * 		var configVerifyObject = {
  *		finsemble: {
  *			applicationRoot: REQUIRED_STRING,
  *			moduleRoot: REQUIRED_STRING,
  *			system: {
  *				FSBLVersion: REQUIRED_STRING,
  *				requiredServicesConfig: REQUIRED_OBJECT,
  *			},
  *			splinteringConfig: {
  *				splinterAgents: OPTIONAL_EXPECTED_ARRAY
  *			},
  *			storage: {
  *				LocalStorageAdapter: DEPRECATED_STRING
  *			},
  *		}
  *	};
 	 *
  *
  * @returns If correct, return true (with no log messages generated); return false otherwise. For optional or DEPRECATED generate warning if not defined, but no error unless if wrong type.
  *
  * @example See ConfigService for example usuage.
  *
  * @private
  */
	this.verifyConfigObject = function (fullPathName, configObject, configVerifyObject) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.verbose(`verifyConfigObject for ${fullPathName}`, configObject, configVerifyObject);
		var verifyConfigObjectOk = true;

		if (configVerifyObject._verify) {
			// currently config records only defined at leaf level (could enhance by allowing at any level)
			verifyConfigObjectOk = verifyConfigProperty(fullPathName, configObject, configVerifyObject);
		} else {
			if (!configVerifyObject) {
				// shouldn't happen unless by api input
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error(`configUtil.verify: configVerifyObject not defined for ${fullPathName}`, configObject, configVerifyObject);
			} else {
				var propertyList = Object.keys(configVerifyObject);
				if (!propertyList) {
					// shouldn't happen unless by api input
					__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error(`configUtil.verify: illegally formatted verification record for ${fullPathName}`, configObject, configVerifyObject);
				} else {
					// not at leaf level so recursively iterate though all the properties
					for (let i = 0; i < propertyList.length; i++) {
						let property = propertyList[i];
						let thisPropertyPath = fullPathName + "." + property;
						let thisConfigProperty = null;
						if (configObject && property in configObject) {
							thisConfigProperty = configObject[property];
						}
						// the order of the conditional (i.e. "&&") insures verification will continue after error(s)
						verifyConfigObjectOk = this.verifyConfigObject(thisPropertyPath, thisConfigProperty, configVerifyObject[property]) && verifyConfigObjectOk;
					}
				}
			}
		}
		return verifyConfigObjectOk;
	};

	/**
  * Convenience function to get a default value from config.
  *
  * @param {object} base base path of config object
  * @param {string} path path string of config property
  * @param {any} defaultValue if path value not defined or null, then use default value
  *
  * @returns {object} return config value or default value
  *
  * @example
  *
  *		defaultAdaptor = ConfigUtil.getDefault(manifest, "manifest.finsemble.defaultStorage", "LocalStorageAdapter");
  *		sameDomainTransport = ConfigUtil.getDefault(finConfig, "finConfig.router.sameDomainTransport", "SharedWorker");
  *		var serverAddress = getDefault(params, "params.transportSettings.FinsembleTransport.serverAddress", "wss://localhost.chartiq.com:3376");
  *
  */
	this.getDefault = function (base, path, defaultValue) {
		var result = defaultValue;
		if (base) {
			try {
				let properties = path.split(".");
				let currentValue = base;
				for (let i = 1; i < properties.length; i++) {
					currentValue = currentValue[properties[i]];
				}
				result = currentValue;
			} catch (err) {
				result = defaultValue;
			}

			if (typeof result === "undefined") result = defaultValue;
		}
		return result;
	};
};

const ConfigUtilInstance = new ConfigUtil();
/* harmony export (immutable) */ __webpack_exports__["ConfigUtilInstance"] = ConfigUtilInstance;


 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\configUtil.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\configUtil.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.WRAPPERS = {
    /*
        TODO: For the time being these are just events our windows fire but not OpenFin (this is used in the OF wrapper. Long term we might have to reverse this)
        TODO: Event naming is inconsistent. Our events should not be camel case to mantain consistency.
    */
    EVENTS: ["title-changed", "bringToFront", "setBounds", "alwaysOnTop", "setOpacity"]
};
exports.APPLICATION_STATE_CHANNEL = "Finsemble.Application.State";
//These next four channels are used in service => service manager communication. The SM receives these messages and then pushes out state updates to the rest of the system.
exports.SERVICE_INITIALIZING_CHANNEL = "Finsemble.ServiceManager.serviceInitializing";
exports.SERVICE_READY_CHANNEL = "Finsemble.ServiceManager.serviceReady";
exports.SERVICE_CLOSING_CHANNEL = "Finsemble.ServiceManager.serviceClosing";
exports.SERVICE_CLOSED_CHANNEL = "Finsemble.ServiceManager.serviceClosed";
//This channel is where the aggregated state of all services is sent out on.
exports.SERVICES_STATE_CHANNEL = "Finsemble.State.Services";
exports.WINDOWSTATE = {
    NORMAL: 0,
    MINIMIZED: 1,
    MAXIMIZED: 2,
    HIDDEN: 3
};
//These channels are to start and stop services dynamically.
exports.SERVICE_START_CHANNEL = "Finsemble.Service.Start";
exports.SERVICE_STOP_CHANNEL = "Finsemble.Service.Stop";
// These channels are for interrupting events
exports.EVENT_INTERRUPT_CHANNEL = "Finsemble.Event.Interrupt";
exports.INTERRUPTIBLE_EVENTS = ["close-requested", "closed", "close-complete", "_container-close-handlers"];
exports.WORKSPACE = {
    STORAGE_TOPIC: "finsemble.workspace",
    CACHE_STORAGE_TOPIC: "finsemble.workspace.cache",
    API_CHANNELS: {
        SAVE: "Finsemble.Workspace.Save",
        RENAME: "Finsemble.Workspace.Rename",
        SAVE_AS: "Finsemble.Workspace.SaveAs",
        SWITCH_TO: "Finsemble.Workspace.SwitchTo",
        IMPORT: "Finsemble.Workspace.Import",
        EXPORT: "Finsemble.Workspace.Export",
        REMOVE: "Finsemble.Workspace.Remove",
        SAVE_GLOBAL_DATA: "Finsemble.Workspace.SaveGlobalData",
        SAVE_VIEW_DATA: "Finsemble.Workspace.SaveViewData",
        GET_GLOBAL_DATA: "Finsemble.Workspace.GetGlobalData",
        GET_VIEW_DATA: "Finsemble.Workspace.GetViewData",
        GET_WORKSPACES: "Finsemble.Workspace.GetWorkspaces",
        SET_WORKSPACE_ORDER: "Finsemble.Workspace.SetWorkspaceOrder",
        SET_ACTIVEWORKSPACE_DIRTY: "Finsemble.Workspace.SetActiveWorkspaceDirty",
        GET_TEMPLATES: "Finsemble.Workspace.GetTemplates",
        IMPORT_TEMPLATE: "Finsemble.Workspace.ImportTemplate",
        EXPORT_TEMPLATE: "Finsemble.Workspace.ExportTemplate",
        REMOVE_TEMPLATE: "Finsemble.Workspace.RemoveTemplate",
    }
};
// These channels are to publish LifeCycle events on.
// Currently unused but placeholder here for implementation, at least for Workspace.
exports.APPLICATION_LIFECYCLE = {};


/***/ }),
/* 17 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 18 */
/***/ (function(module, exports) {

/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var parser = __webpack_require__(7);
var Emitter = __webpack_require__(8);

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
  this.forceNode = opts.forceNode;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;
  this.localAddress = opts.localAddress;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' === this.readyState || '' === this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function (packets) {
  if ('open' === this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function (data) {
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// browser shim for xmlhttprequest module

var hasCORS = __webpack_require__(50);

module.exports = function (opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new global[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
    } catch (e) { }
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var debug = __webpack_require__(70)('socket.io-parser');
var json = __webpack_require__(51);
var Emitter = __webpack_require__(69);
var binary = __webpack_require__(68);
var isBuf = __webpack_require__(33);

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'ACK',
  'ERROR',
  'BINARY_EVENT',
  'BINARY_ACK'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    encodeAsBinary(obj, callback);
  }
  else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {
  var str = '';
  var nsp = false;

  // first is type
  str += obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    str += obj.attachments;
    str += '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' != obj.nsp) {
    nsp = true;
    str += obj.nsp;
  }

  // immediately followed by the id
  if (null != obj.id) {
    if (nsp) {
      str += ',';
      nsp = false;
    }
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    if (nsp) str += ',';
    str += json.stringify(obj.data);
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if ('string' == typeof obj) {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  }
  else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  }
  else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var p = {};
  var i = 0;

  // look up type
  p.type = Number(str.charAt(0));
  if (null == exports.types[p.type]) return error();

  // look up attachments if type binary
  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
    var buf = '';
    while (str.charAt(++i) != '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) != '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' == str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' == c) break;
      p.nsp += c;
      if (i == str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i == str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    p = tryParse(p, str.substr(i));
  }

  debug('decoded %s as %j', str, p);
  return p;
}

function tryParse(p, str) {
  try {
    p.data = json.parse(str);
  } catch(e){
    return error();
  }
  return p; 
};

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(data){
  return {
    type: exports.ERROR,
    data: 'parser error'
  };
}


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __webpack_require__(17);
const routerClientInstance_1 = __webpack_require__(6);
const STARTUP_TIMEOUT_DURATION = 10000;
const constants_1 = __webpack_require__(16);
/**
 * Small class to hold on to dependencies and callbacks. Also emits a timeout event that the startupManager is listening for. When it times out, the startupManager catches the event and generates a message that includes all of the offline clients and services. It then causes this class to emit an  err event that the baseService is listening for. This arrangement is set up for a couple of reasons.
 * 1. I can't use the logger in here because the logger uses the startupManager, and there'd be a circular dependency.
 * 2. FSBLDependencyManager is a singleton, and there can be multiple services living in a single window. I didn't want them all to log that they were offline if they weren't (e.g., if I'd put the emitter on the StartupManager instead of this class).
 */
class StartupDependency extends events_1.EventEmitter {
    constructor(params) {
        super();
        this.callback = params.callback;
        this.dependencies = params.dependencies;
        this.startupTimer = null;
        this.setStartupTimer = this.setStartupTimer.bind(this);
        this.clearStartupTimer = this.clearStartupTimer.bind(this);
        this.setStartupTimer();
    }
    /**
     * Removes the startup timer (because the dependency was resolved within the allotted time);
     */
    clearStartupTimer() {
        clearTimeout(this.startupTimer);
        delete this.startupTimer;
    }
    /**
     * If the dependency hasn't resolved within STARTUP_TIMEOUT_DURATION, emit a timeout event that the StartupManager can catch.
     */
    setStartupTimer() {
        let self = this;
        //+ coerces the result to a number, making typescript happy.
        this.startupTimer = +setTimeout(() => {
            self.emit("timeout");
        }, STARTUP_TIMEOUT_DURATION);
    }
}
/**
 * Used to generate a unique ID for the list of dependencies.
 */
function uuidv4() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c === "x" ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}
/**
 * @private
 */
class StartupManager {
    /**
     * @private
     */
    constructor() {
        this.servicesAreAllOnline = {};
        this.clientsAreAllOnline = {};
        this.onlineClients = [];
        this.onlineServices = [];
        this.dependencies = {};
        this.AuthorizationCompleted = false;
        this.startupTimers = {};
        this.startupTimerFired = false;
        this.bindCorrectContext();
    }
    /**
     * This function and `checkDependencies` are the most important parts of this class. This function accepts a FinsembleDependency object and a callback to be invoked when all required depenencies are ready.
     *
     * @param {FinsembleDependency} dependencies
     * @param {any} callback
     * @memberof StartupManager
     */
    waitFor(dependencies, callback) {
        let id = uuidv4();
        //Set defaults to an empty array if they aren't passed in.
        if (!dependencies.services)
            dependencies.services = [];
        if (!dependencies.clients)
            dependencies.clients = [];
        //The dependency manager can pass in a name to the dependency. If it does, we'll use it. If not, we won't.
        if (dependencies.clients.length) {
            if (this.AuthorizationCompleted === false && dependencies.clients.includes("authenticationClient")) {
                dependencies.clients.splice(dependencies.clients.indexOf("authenticationClient"), 1);
            }
            //Lowercase the first letter of the client.
            dependencies.clients = dependencies.clients.map(clientName => {
                return clientName.charAt(0).toLowerCase() + clientName.slice(1);
            });
        }
        let dependency = new StartupDependency({ dependencies, callback });
        //If the dependency times out, throw an error that the baseService can catch. It will then log out why it's not online.
        dependency.on("timeout", () => {
            this.onDependencyTimeout(dependency);
        });
        this.dependencies[id] = dependency;
        this.checkDependencies();
        return dependency;
    }
    /**
     * This method generates a helpful error message giving possible reasons for why the service is offline. After the message is generated, it emits an event on the dependency that's passed in as a parameter. The BaseService is listening for this event, and logs the error message to the central logger.
     * @param {Dependency} dependency
     */
    onDependencyTimeout(dependency) {
        const NEW_LINE = "\n", TAB = "\u0009", BULLET = "\u2022", BULLET_POINT = NEW_LINE + TAB + BULLET, STORAGE_ADAPTER_ERROR = "The default storage adapter failed to fully initialize, or has a syntax error. Ensure that the default storage adapter is up, connected, and sending/receiving data properly.";
        const HELPFUL_MESSAGES = {
            preferencesService: [
                `PreferencesService failed to start.${BULLET_POINT}Typically this is caused by a failure to retrieve data from your default storage adapter. ${STORAGE_ADAPTER_ERROR}`
            ],
            storageService: [
                `StorageService failed to start. Here are some common reasons for failure:${BULLET_POINT}${STORAGE_ADAPTER_ERROR}${BULLET_POINT}The data coming back from your adapter is improperly formatted or otherwise corrupted. Try clearing your storage and restarting. If the problem persists, the issue may not be in your adapter.`
            ],
            routerService: [
                "RouterService failed to start. This is a fatal error. Contact finsemble support."
            ],
            workspaceService: [
                `WorkspaceService failed to start. Here are some common reasons for failure:${BULLET_POINT}${STORAGE_ADAPTER_ERROR}.${BULLET_POINT}Your active workspace is corrupted.`
            ],
            assimilationService: [
                "AssimilationService failed to start. Check to see that the 'FinsembleAssimilation' is active in your taskManager. If it is, please contact finsemble support."
            ]
        };
        let offlineClients = this.getOfflineClients();
        let offlineServices = this.getOfflineServices();
        let errorMessage = `APPLICATION LIFECYCLE:STARTUP:Dependency not online after ${STARTUP_TIMEOUT_DURATION / 1000} seconds.`;
        if (offlineClients.length) {
            errorMessage += ` Waiting for these clients: ${offlineClients.join(", ")}.`;
        }
        if (offlineServices.length) {
            errorMessage += ` Waiting for these services: ${offlineServices.join(", ")}.`;
        }
        //For every service that's offline, check to see if we have any helpful messages for it. If so, iterate through the array and append to the error message.
        offlineServices.forEach((service) => {
            if (HELPFUL_MESSAGES[service]) {
                HELPFUL_MESSAGES[service].forEach((msg) => {
                    errorMessage += NEW_LINE + NEW_LINE + msg + NEW_LINE;
                });
                //puts a line between our helpful messages and the log stack.
                errorMessage += NEW_LINE;
            }
        });
        //The BaseService is listening for this event, and will log the errorMessage to the central logger.
        dependency.emit("err", errorMessage);
    }
    /**
     * This function loops through all of the registered dependencies and checks to see if the conditions have been met. If so, it invokes the callback and removes the reference to the dependency.
     *
     * @memberof StartupManager
     */
    checkDependencies() {
        for (let id in this.dependencies) {
            let dependency = this.dependencies[id];
            let { dependencies, callback } = dependency;
            if (dependencies.services.length && !this.servicesAreAllOnline[id]) {
                this.servicesAreAllOnline[id] = this.checkServices(dependencies.services);
                if (!this.servicesAreAllOnline[id]) {
                    continue;
                }
            }
            if (dependencies.clients.length && !this.clientsAreAllOnline[id]) {
                this.clientsAreAllOnline[id] = this.checkClients(dependencies.clients);
                if (!this.clientsAreAllOnline[id]) {
                    continue;
                }
            }
            delete this.dependencies[id];
            dependency.clearStartupTimer();
            if (callback) {
                callback();
            }
        }
    }
    getOfflineClients() {
        let offlineClients = [];
        for (let id in this.dependencies) {
            let { dependencies } = this.dependencies[id];
            offlineClients = offlineClients.concat(dependencies.clients.filter((dep) => !this.onlineClients.includes(dep)));
        }
        //return deduped list.
        return offlineClients.filter((client, i) => offlineClients.indexOf(client) === i);
    }
    getOfflineServices() {
        let offlineServices = [];
        for (let id in this.dependencies) {
            let { dependencies } = this.dependencies[id];
            offlineServices = offlineServices.concat(dependencies.services.filter((dep) => !this.onlineServices.includes(dep)));
        }
        return offlineServices.filter((client, i) => offlineServices.indexOf(client) === i);
    }
    /**
     * Iterates through required service list, returns false if any required service is offline.
     *
     * @param {any} serviceList
     * @memberof StartupManager
     */
    checkServices(serviceList) {
        return serviceList.every(service => this.onlineServices.includes(service));
    }
    /**
     * Iterates through required client list, returns false if any required client is offline.
     *
     * @param {any} clientList

     * @memberof StartupManager
     */
    checkClients(clientList) {
        return clientList.every(client => this.onlineClients.includes(client));
    }
    /**
     * When a service comes online, we push it onto our array of online services, and run through all of the registered dependencies.
     *
     * @param {any} serviceName
     * @memberof StartupManager
     */
    setServiceOnline(serviceName) {
        this.onlineServices.push(serviceName);
        this.checkDependencies();
    }
    /**
     * Sets an array of services online. Only happens once at startup.
     *
     * @param {any} serviceList
     * @memberof StartupManager
     */
    setServicesOnline(serviceList) {
        this.onlineServices = this.onlineServices.concat(serviceList);
        this.checkDependencies();
    }
    /**
     *
     *
     * @param {any} clientName

     * @memberof StartupManager
     */
    setClientOnline(clientName) {
        //This check is done because multiple clients of the same type can be on a page.
        if (this.onlineClients.includes(clientName)) {
            return;
        }
        this.onlineClients.push(clientName);
        this.checkDependencies();
    }
    /**
     * Returns the array of online clients.
     *

     * @memberof StartupManager
     */
    getOnlineClients() {
        return this.onlineClients;
    }
    /**
     * Returns the array of online services.
     *

     * @memberof StartupManager
     */
    getOnlineServices() {
        return this.onlineServices;
    }
    /**
     * Method to make sure that `this` is correct when the callbacks are invoked.
     *
     * @memberof StartupManager
     */
    bindCorrectContext() {
        this.checkDependencies = this.checkDependencies.bind(this);
        this.checkServices = this.checkServices.bind(this);
        this.checkClients = this.checkClients.bind(this);
        this.getOfflineClients = this.getOfflineClients.bind(this);
        this.getOfflineServices = this.getOfflineServices.bind(this);
        this.onDependencyTimeout = this.onDependencyTimeout.bind(this);
        this.waitFor = this.waitFor.bind(this);
    }
}
/**
 * @private
 */
class ShutdownManager {
    /**
     * @private
     */
    constructor() {
        this.offlineServices = [];
        this.dependencies = {};
        this.checkDependencies = this.checkDependencies.bind(this);
    }
    /**
     * This function and `checkDependencies` are the most important parts of this class. This function accepts a FinsembleDependency object and a callback to be invoked when all required depenencies are ready.
     *
     * @param {FinsembleDependency} dependencies
     * @param {any} callback
     * @memberof StartupManager
     */
    waitFor(dependencies, callback) {
        //Set defaults to an empty array if they aren't passed in.
        if (!dependencies.services) {
            dependencies.services = [];
        }
        let id = uuidv4();
        this.dependencies[id] = { dependencies, callback };
    }
    /**
     * This function loops through all of the registered dependencies and checks to see if the conditions have been met. If so, it invokes the callback and removes the reference to the dependency.
     *
     * @memberof ShutdownDependencies
     */
    checkDependencies() {
        console.debug("checkDependencies", this.dependencies);
        if (Object.keys(this.dependencies)) {
            for (let id in this.dependencies) {
                let { dependencies, callback } = this.dependencies[id];
                console.debug("checkDependency", dependencies.services, this.offlineServices);
                if (dependencies.services.length) {
                    let servicesAreAllOffline = this.checkServices(dependencies.services);
                    if (!servicesAreAllOffline) {
                        continue;
                    }
                }
                console.debug("checkDependencies callback");
                delete this.dependencies[id];
                if (callback) {
                    callback();
                }
            }
        }
    }
    /**
     * Iterates through required service list, returns false if any required service is offline.
     *
     * @param {any} serviceList

     * @memberof StartupManager
     */
    checkServices(serviceList) {
        return serviceList.every(service => this.offlineServices.includes(service));
    }
    setServiceOffline(service) {
        console.debug("setServiceOffline", service);
        this.offlineServices.push(service);
        this.checkDependencies();
    }
}
/**
 * This is a class that handles FSBL client/service dependnecy management. Given a list of services and/or clients, it will invoke a callback when all dependencies are ready. This is a singleton.
 * @shouldBePublished false
 * @private
 * @class FSBLDependencyManager
 */
class FSBLDependencyManager extends events_1.EventEmitter {
    constructor() {
        super();
        this.startup = new StartupManager();
        this.shutdown = new ShutdownManager();
        this.RouterClient = routerClientInstance_1.default;
        this.AuthorizationCompleted = false;
        this.bindCorrectContext();
        this.onAuthorizationCompleted(this.startup.checkDependencies);
        routerClientInstance_1.default.onReady(this.listenForServices);
    }
    /**
 * Method to make sure that `this` is correct when the callbacks are invoked.
 *
 * @memberof StartupManager
 */
    bindCorrectContext() {
        this.listenForServices = this.listenForServices.bind(this);
        this.onAuthorizationCompleted = this.onAuthorizationCompleted.bind(this);
    }
    setClientOnline(client) {
        this.startup.setClientOnline(client);
    }
    /*
    * handler for when a service changes its state. If a service comes online or goes offline, dependencies are checked and callbacks invoked.
    */
    onServiceStateChange(data) {
        let ServiceNames = Object.keys(data);
        //Iterate through all services. If it was online but isn't anymore, set it offline. If it was offline but now is, set it online.
        ServiceNames.forEach((serviceName) => {
            let state = data[serviceName].state;
            let wasOnline = this.startup.onlineServices.includes(serviceName);
            let isOnline = state === "ready";
            if (!wasOnline && isOnline) {
                this.startup.setServiceOnline(serviceName);
            }
            if (wasOnline && !isOnline && state === "closed") {
                this.shutdown.setServiceOffline(serviceName);
            }
        });
    }
    /**
     * Listens on the router for services to come online. The first subscriber gets the activeServices as of object instantiation. The 2nd subscriber listens for services to come online after the object is created. We should consider make this all one subscriber, though I see the advantage of having this setup.
     *
     */
    listenForServices() {
        console.debug("dependency manager: listenForServices in " + this.name);
        this.RouterClient.subscribe(constants_1.SERVICES_STATE_CHANNEL, (err, event) => {
            this.onServiceStateChange(event.data);
        });
        // TODO: The pubsub responder doesnt seem to work here. IT works for the above when not closing.
        this.RouterClient.addListener(constants_1.SERVICE_CLOSED_CHANNEL, (err, event) => {
            let services = {};
            services[event.data.name] = {
                state: "closed"
            };
            this.onServiceStateChange(services);
        });
        this.RouterClient.subscribe(constants_1.APPLICATION_STATE_CHANNEL, (err, response) => {
            switch (response.data.state) {
                //authenticated will only be caught by components/services that are up before auth does its thing. Otherwise, a component/service coming up will have the 'ready' application state. In either case, we need to do the things below. But only once.
                case "authenticated":
                case "ready":
                    //No need to send this message out twice.
                    if (this.AuthorizationCompleted)
                        break;
                    console.debug("Authorization Completed");
                    this.AuthorizationCompleted = true;
                    this.startup.AuthorizationCompleted = true;
                    this.emit("AuthorizationCompleted");
                    break;
                case "closing":
                    this.shutdown.checkDependencies();
                    break;
            }
        });
    }
    onAuthorizationCompleted(callback) {
        if (this.AuthorizationCompleted) {
            callback();
        }
        else {
            this.addListener("AuthorizationCompleted", callback);
        }
    }
}
/**
 * This is a class that handles FSBL client/service dependnecy management. Given a list of services and/or clients, it will invoke a callback when all dependencies are ready. This is a singleton.
 * @shouldBePublished false
 * @private
 * @class FSBLDependencyManager
 */
exports.FSBLDependencyManagerSingleton = new FSBLDependencyManager();
exports.default = exports.FSBLDependencyManagerSingleton;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
* Copyright 2018 by ChartIQ, Inc.
* All rights reserved.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const { debug, warn, log, /*info,*/ error } = console;
const info = () => { };
const verbose = info;
const logger = {
    warn, info, log, debug,
    error, verbose
};
// This is all stolen from the logger.
// @TODO - make consumers agnostic of this stuff and remove from the interface.
const LOCAL_ONLY_DEFAULT = false;
var DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true, Verbose: true, LocalOnly: LOCAL_ONLY_DEFAULT }; // if true captured for logger
var CONSOLE_DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true }; // if true then goes to console and captured for logger
var initialLogState = {
    console: CONSOLE_DEFAULT_LOG_SETTING,
    dev: DEFAULT_LOG_SETTING,
    system: DEFAULT_LOG_SETTING,
    perf: DEFAULT_LOG_SETTING,
}; // will be updated on registration with Central Logger, but capture everything until then
function IsLogMessage(channel) {
    return (channel === "logger.service.logMessages");
}
;
function traceString() {
    function getPosition(string, subString, index) {
        return string.split(subString, index).join(subString).length;
    }
    function getErrorObject() {
        try {
            throw Error("");
        }
        catch (err) {
            return err;
        }
    }
    var stack = getErrorObject().stack;
    var position = getPosition(stack, "\n", 4);
    var tString = stack.substring(position); // strip off irrelevant part of stack
    var final = "Log Stack: \n" + tString.substr(1); // insert description
    return final;
}
/** An implementation of the ICentralLogger interface that
 * merely logs straight to the console rather than going over to
 * Central Logging serice. Used in situations where use of the
 * Central Logging service is not possible (such as in test
 * environments, or in the Central Logging service itself).
 */
class LocalLogger {
    constructor() {
        // Loggery things.
        // @TODO - Make consumers agnostic of these and remove from interface.
        this.start = () => { };
        this.isLogMessage = IsLogMessage;
        this.setting = () => initialLogState;
        this.callStack = () => traceString();
        this.unregisterClient = (_) => { };
        this.setRouterClient = () => { };
        // Top level logging methods
        this.warn = warn;
        this.info = info;
        this.log = log;
        this.debug = debug;
        this.error = error;
        this.verbose = verbose;
        // "Namespaced" methods - they still point to console.
        this.system = logger;
        this.perf = logger;
    }
}
exports.LocalLogger = LocalLogger;


/***/ }),
/* 24 */
/***/ (function(module, exports) {

/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/*
 * Module requirements.
 */

var isArray = __webpack_require__(49);

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Right now only Buffer and ArrayBuffer are supported..
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(data) {

  function _hasBinary(obj) {
    if (!obj) return false;

    if ( (global.Buffer && global.Buffer.isBuffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
         (global.Blob && obj instanceof Blob) ||
         (global.File && obj instanceof File)
        ) {
      return true;
    }

    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
          if (_hasBinary(obj[i])) {
              return true;
          }
      }
    } else if (obj && 'object' == typeof obj) {
      // see: https://github.com/Automattic/has-binary/pull/4
      if (obj.toJSON && 'function' == typeof obj.toJSON) {
        obj = obj.toJSON();
      }

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
          return true;
        }
      }
    }

    return false;
  }

  return _hasBinary(data);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 26 */
/***/ (function(module, exports) {


var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

/***/ }),
/* 27 */
/***/ (function(module, exports) {

/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var eio = __webpack_require__(59);
var Socket = __webpack_require__(30);
var Emitter = __webpack_require__(8);
var parser = __webpack_require__(21);
var on = __webpack_require__(29);
var bind = __webpack_require__(24);
var debug = __webpack_require__(5)('socket.io-client:manager');
var indexOf = __webpack_require__(26);
var Backoff = __webpack_require__(46);

/**
 * IE6+ hasOwnProperty
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager (uri, opts) {
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' === typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connecting = [];
  this.lastPing = null;
  this.encoding = false;
  this.packetBuffer = [];
  this.encoder = new parser.Encoder();
  this.decoder = new parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function () {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
    }
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function () {
  for (var nsp in this.nsps) {
    if (has.call(this.nsps, nsp)) {
      this.nsps[nsp].id = this.engine.id;
    }
  }
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function (v) {
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function (v) {
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function (v) {
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function (v) {
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function (v) {
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function (v) {
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function () {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function (fn, opts) {
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function () {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function (data) {
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function () {
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function () {
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
};

/**
 * Called upon a ping.
 *
 * @api private
 */

Manager.prototype.onping = function () {
  this.lastPing = new Date();
  this.emitAll('ping');
};

/**
 * Called upon a packet.
 *
 * @api private
 */

Manager.prototype.onpong = function () {
  this.emitAll('pong', new Date() - this.lastPing);
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function (data) {
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function (err) {
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function (nsp, opts) {
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp, opts);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connecting', onConnecting);
    socket.on('connect', function () {
      socket.id = self.engine.id;
    });

    if (this.autoConnect) {
      // manually call here since connecting evnet is fired before listening
      onConnecting();
    }
  }

  function onConnecting () {
    if (!~indexOf(self.connecting, socket)) {
      self.connecting.push(socket);
    }
  }

  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function (socket) {
  var index = indexOf(this.connecting, socket);
  if (~index) this.connecting.splice(index, 1);
  if (this.connecting.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function (packet) {
  debug('writing packet %j', packet);
  var self = this;
  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function (encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i], packet.options);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function () {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function () {
  debug('cleanup');

  var subsLength = this.subs.length;
  for (var i = 0; i < subsLength; i++) {
    var sub = this.subs.shift();
    sub.destroy();
  }

  this.packetBuffer = [];
  this.encoding = false;
  this.lastPing = null;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function () {
  debug('disconnect');
  this.skipReconnect = true;
  this.reconnecting = false;
  if ('opening' === this.readyState) {
    // `onclose` will not fire because
    // an open event never happened
    this.cleanup();
  }
  this.backoff.reset();
  this.readyState = 'closed';
  if (this.engine) this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function (reason) {
  debug('onclose');

  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);

  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function () {
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function () {
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function (err) {
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function () {
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function () {
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};


/***/ }),
/* 29 */
/***/ (function(module, exports) {


/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on (obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function () {
      obj.removeListener(ev, fn);
    }
  };
}


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var parser = __webpack_require__(21);
var Emitter = __webpack_require__(8);
var toArray = __webpack_require__(73);
var on = __webpack_require__(29);
var bind = __webpack_require__(24);
var debug = __webpack_require__(5)('socket.io-client:socket');
var hasBin = __webpack_require__(25);

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  connecting: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1,
  ping: 1,
  pong: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket (io, nsp, opts) {
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  if (opts && opts.query) {
    this.query = opts.query;
  }
  if (this.io.autoConnect) this.open();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function () {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function () {
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' === this.io.readyState) this.onopen();
  this.emit('connecting');
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function () {
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function (ev) {
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var parserType = parser.EVENT; // default
  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
  var packet = { type: parserType, data: args };

  packet.options = {};
  packet.options.compress = !this.flags || false !== this.flags.compress;

  // event ack callback
  if ('function' === typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  delete this.flags;

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function (packet) {
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function () {
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' !== this.nsp) {
    if (this.query) {
      this.packet({type: parser.CONNECT, query: this.query});
    } else {
      this.packet({type: parser.CONNECT});
    }
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function (reason) {
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function (packet) {
  if (packet.nsp !== this.nsp) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function (packet) {
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function (id) {
  var self = this;
  var sent = false;
  return function () {
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
    self.packet({
      type: type,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function (packet) {
  var ack = this.acks[packet.id];
  if ('function' === typeof ack) {
    debug('calling ack %s with %j', packet.id, packet.data);
    ack.apply(this, packet.data);
    delete this.acks[packet.id];
  } else {
    debug('bad ack %s', packet.id);
  }
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function () {
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function () {
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function () {
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function () {
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function () {
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

Socket.prototype.compress = function (compress) {
  this.flags = this.flags || {};
  this.flags.compress = compress;
  return this;
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies
 */

var XMLHttpRequest = __webpack_require__(20);
var XHR = __webpack_require__(63);
var JSONP = __webpack_require__(62);
var websocket = __webpack_require__(64);

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling (opts) {
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname !== location.hostname || port !== opts.port;
    xs = opts.secure !== isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies.
 */

var Transport = __webpack_require__(19);
var parseqs = __webpack_require__(18);
var parser = __webpack_require__(7);
var inherit = __webpack_require__(12);
var yeast = __webpack_require__(34);
var debug = __webpack_require__(5)('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function () {
  var XMLHttpRequest = __webpack_require__(20);
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function () {
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function (onPause) {
  var self = this;

  this.readyState = 'pausing';

  function pause () {
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function () {
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function () {
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function () {
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function (data) {
  var self = this;
  debug('polling got data %s', data);
  var callback = function (packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' === self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' === packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' !== this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' === this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function () {
  var self = this;

  function close () {
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' === this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function (packets) {
  var self = this;
  this.writable = false;
  var callbackfn = function () {
    self.writable = true;
    self.emit('drain');
  };

  parser.encodePayload(packets, this.supportsBinary, function (data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
     ('http' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
module.exports = isBuf;

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
  , length = 64
  , map = {}
  , seed = 0
  , i = 0
  , prev;

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */
function encode(num) {
  var encoded = '';

  do {
    encoded = alphabet[num % length] + encoded;
    num = Math.floor(num / length);
  } while (num > 0);

  return encoded;
}

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */
function decode(str) {
  var decoded = 0;

  for (i = 0; i < str.length; i++) {
    decoded = decoded * length + map[str.charAt(i)];
  }

  return decoded;
}

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */
function yeast() {
  var now = encode(+new Date());

  if (now !== prev) return seed = 0, prev = now;
  return now +'.'+ encode(seed++);
}

//
// Map each character to its index.
//
for (; i < length; i++) map[alphabet[i]] = i;

//
// Expose the `yeast`, `encode` and `decode` functions.
//
yeast.encode = encode;
yeast.decode = decode;
module.exports = yeast;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

Object.defineProperty(exports, "__esModule", { value: true });
const validate_1 = __webpack_require__(9); // Finsemble args validator
const baseClient_1 = __webpack_require__(13);
const async_1 = __webpack_require__(11);
const logger_1 = __webpack_require__(2);
/**
 * @introduction
 * <h2>Config Client</h2>
 *
 * This client provides run-time access to Finsemble's configuration. See the [Configuration tutorial](tutorial-Configuration.html) for a configuration overview.
 * The Config Client functions similar to a global store created with the DistributedStoreClient and offers many of the same methods.
 * Values modified at runtime are not persisted.
 *
 * @hideconstructor
 * @constructor
 */
var ConfigClient = function (params) {
    var self = this;
    var listeners = [];
    baseClient_1.default.call(this, params);
    /**
     * Get a value from the config.
     * @param {Object | String} params - Params object. This can also be a string
     * @param {String} params.field - The field where the value is stored.
     * @param {Function} cb -  Will return the value if found.
     * @returns {any} - The value of the field. If no callback is given and the value is local, this will run synchronous
     * @example
     * 	FSBL.Clients.ConfigClient.getValue({field:'field1'},function(err,value){});
     *  FSBL.Clients.ConfigClient.getValue('field1',function(err,value){});
     */
    this.getValue = function (params, cb = Function.prototype) {
        if (typeof params === "string") {
            params = { field: params };
        }
        const promiseResolver = (resolve, reject) => {
            if (!params.field) {
                const err = "no field provided";
                reject(err);
                return cb(err);
            }
            self.routerClient.query("configService.getValue", { field: params.field }, function (err, response) {
                if (err) {
                    return cb(err);
                }
                resolve({ err, data: response.data });
                return cb(err, response.data);
            });
        };
        return new Promise(promiseResolver);
    };
    /**
     * Get multiple values from the config.
    * @param {Object[] | String[]} fields - An array of field objects. If there are no fields proviced, the complete configuration manifest are returned.
     * @param {String} fields[].field - The name of the field
     * @param {Function} [cb] -  Will return the value if found.
     * @returns {Object} - returns an object of with the fields as keys.If no callback is given and the value is local, this will run synchronous
     * @example
    FSBL.Clients.ConfigClient.getValues([{field:'field1'},{field2:'field2'}],function(err,values){});
    FSBL.Clients.ConfigClient.getValues(['field1','field2'],function(err,values){});
    FSBL.Clients.ConfigClient.get(null, callback); // returns the complete manifest containing the finsemble property
    */
    this.getValues = function (fields, cb = Function.prototype) {
        if (typeof fields === "function") {
            cb = fields;
            fields = null;
        }
        if (fields && !Array.isArray(fields)) {
            return this.getValue(fields, cb);
        }
        const promiseResolver = (resolve) => {
            self.routerClient.query("configService.getValues", {
                fields: fields
            }, function (err, response) {
                if (err) {
                    return cb(err);
                }
                resolve({ err, data: response.data });
                return cb(err, response.data);
            });
        };
        return new Promise(promiseResolver);
    };
    /**
     * Set a value in the config. Setting a value will trigger events that you can listen to using addListener
     * @param {Object} params - Params object
     * @param {String} params.field - The name of the field where data will be stored
     * @param {any} params.value - Value to be stored
     * @param {function} [cb] optional callback
     * @returns {null}
     *
     * @example
     * FSBL.Clients.ConfigClient.setValue({field:'field1',value:"new value"});
     */
    this.setValue = function (params, cb) {
        var data = {
            field: params.field,
            value: params.value
        };
        return self.routerClient.query("configService.setValue", data, function (err) {
            return cb ? cb(err) : null;
        });
    };
    /**
     * This will set multiple values in the config.
     * @param {Object} fields - An Array of field objects
     * @param {String} fields.field - The name of the field
     * @param {any} fields.value - Field value
     * @param {function} [cb] optional callback
     * @returns {null}
     *
     * @example
     * FSBL.Clients.ConfigClient.setValues([{field:'field1',value:"new value"}]);
     */
    this.setValues = function (fields, cb) {
        if (!fields) {
            return logger_1.default.system.error("ConfigClient.SetValues. No params given");
        }
        if (!Array.isArray(fields)) {
            return logger_1.default.system.error("ConfigClient.SetValues. Params must be an array");
        }
        return self.routerClient.query("configService.setValues", fields, function (err) {
            return cb ? cb(err) : null;
        });
    };
    /**
     * Remove a value from the config.
     * @param {Object | String} params - Either an object or string
     * @param {String} param.field - The name of the field
     * @param {Function} [cb] -  returns an error if there is one
     * @example
     * FSBL.Clients.ConfigClient.removeValue({field:'field1'},function(err,bool){});
     */
    this.removeValue = function (params, cb = Function.prototype) {
        if (!params.field) {
            if (params !== undefined) {
                params = { field: params };
            }
            else {
                return cb("no field provided");
            }
        }
        params.value = null;
        return self.setValue(params, cb);
    };
    /**
     * Removes multiple values from the config.
     * @param {Array.<Object>} params - An Array of field objects
     * @param {Function} [cb] -  returns an error if there is one.
     * @example
     * FSBL.Clients.ConfigClient.removeValue({field:'field1'},function(err,bool){});
     */
    this.removeValues = function (params, cb = Function.prototype) {
        if (!Array.isArray(params)) {
            return cb("The passed in parameter needs to be an array");
        }
        async_1.map(params, this.removeValue, function (err, data) {
            return cb(err, data);
        });
    };
    /**
     * make sure we dont have duplicate router subscribers
     * @private
     */
    this.changeSub = function (change) {
        if (!this.subs)
            this.subs = {};
        if (!this.subs[change]) {
            this.routerClient.query("configService.addListener", change, function (err, queryResponse) {
                self.routerClient.subscribe(change, handleChanges);
            });
            this.subs[change] = true;
        }
    };
    /**
    * Add a listener to the config at either the root config level or field level. If no field is given, the root config level is used. You can also listen for changes to config fields any number of levels deep -- finsemble.configitem.deeperconfigitem.evendeeperconfigitem
    * @param {Object} params - Params object
    * @param {String} [params.field] - The data field to listen for. If this is empty it listen to all changes of the store.
    * @param {Function} fn -  the function to call when a listener is triggered
    * @param {Function} [cb] - callback
    * @example
    *var myFunction = function(err,data){
    }
    * FSBL.Clients.ConfigClient.addListener({field:'field1'},myFunction,cb);

    */
    this.addListener = function (params, fn, cb) {
        var field = null;
        if (typeof params === "function") {
            fn = params;
            params = {};
        }
        if (params.field) {
            field = params.field;
        }
        var combined = "configService" + (field ? "." + field : "");
        if (listeners[combined]) {
            listeners[combined].push(fn);
        }
        else {
            listeners[combined] = [fn];
        }
        self.changeSub(combined);
        return cb ? cb() : null;
    };
    /**
     *
    * Add an array of listeners as objects or strings. If using strings, you must provide a function callback.
    * @param {Object | Array.<Object>} params - Params object
    * @param {String} params[].field - The data field to listen for.
    * @param {String} params[].listener - the function to call when a listener is triggered. If this is empty, fn is used.
    * @param {function} [fn] -  the function to call when a listener is triggered
    * @param {function} [cb]
    * @todo make the typing proper.
    * @example
    *var myFunction = function(err,data){

    }
    FSBL.Clients.ConfigClient.addListeners([{field:'field1',listener:myFunction},{field:'field2',listener:myFunction}],null,cb);

    FSBL.Clients.ConfigClient.addListeners([{field:'field1'},{field:'field2',listener:myFunction}],myFunction,cb);

    FSBL.Clients.ConfigClient.addListeners(['field1','field2'],myFunction,cb);
    */
    this.addListeners = function (params, fn, cb) {
        if (!Array.isArray(params)) {
            return this.addListener(params, fn, cb);
        }
        for (var i = 0; i < params.length; i++) {
            var field = null;
            var item = params[i];
            var ls;
            if (typeof item === "string") {
                field = item;
            }
            else if (item.field) {
                field = item.field;
                ls = params[i].listener;
            }
            var combined = "configService" + (field ? "." + field : "");
            if (!ls) {
                if (fn && typeof fn === "function") {
                    ls = fn;
                }
            }
            if (listeners[combined]) {
                listeners[combined].push(ls);
            }
            else {
                listeners[combined] = [ls];
            }
            self.changeSub(combined);
        }
        return cb ? cb() : null;
    };
    /**
     * Remove a listener from config. If no field is given, we look for a config root listener
     * @param {Object} params - Params object
     * @param {String} [params.field] - The data field
     * @param {function} [fn] -  the function to remove from the listeners
     * @param {function} [cb] -  returns true if it was succesfull in removing the listener.
     *
     * @example
     * var myFunction = function(err,data){
            }
     * FSBL.Clients.ConfigClient.removeListener({field:'field1'},MyFunction,function(bool){});
    FSBL.Clients.ConfigClient.removeListener(MyFunction,function(bool){});
     */
    this.removeListener = function (params, fn, cb) {
        var field = null;
        if (typeof params === "function") {
            cb = fn;
            fn = params;
            params = {};
        }
        if (params.field) {
            field = params.field;
        }
        var combined = this.name + (field ? "." + field : "");
        if (listeners[combined]) {
            for (var i = 0; i < listeners[combined].length; i++) {
                if (listeners[combined][i] === fn) {
                    listeners[combined].pop(i);
                    return cb ? cb(null, true) : null;
                }
            }
        }
        return cb ? cb(null, false) : null;
    };
    /**
     * Remove an array of listeners from the config
     * @param {Object | Array.<Object>} params - Params object
     * @param {String} params.field - The data field to listen for. If this is empty it listen to all changes of the store.
     * @param {function} params.listener - The listener function
     * @param {function} [fn] -  the function to remove from the listeners
     * @param {function} [cb] -  returns true if it was succesfull in removing the listener.
     *
     * @example
     * var myFunction = function(err,data){
            }
     * FSBL.Clients.ConfigClient.removeListeners({field:'field1'},MyFunction,function(bool){});
    FSBL.Clients.ConfigClient.removeListeners([{field:'field1',listener:MyFunction}],function(bool){});
    FSBL.Clients.ConfigClient.removeListeners(['field1'],MyFunction,function(bool){});
     */
    this.removeListeners = function (params, fn, cb) {
        if (!Array.isArray(params)) {
            if (typeof params === "function") {
                this.removeListener({}, params, cb);
            }
            else if (params.field) {
                this.removeListener(params, fn, cb);
            }
            return cb("missing fields");
        }
        var removeCount = 0;
        for (var i = 0; i < params.length; i++) {
            var field = null;
            var item = params[i];
            var ls;
            if (typeof item === "string") {
                field = item;
            }
            else if (item.field) {
                field = item.field;
                ls = params[i].listener;
            }
            var combined = "configService" + (field ? "." + field : "");
            if (!ls) {
                if (fn && typeof fn === "function") {
                    ls = fn;
                }
                else {
                    continue;
                }
            }
            for (var j = 0; j < listeners[combined].length; j++) {
                if (listeners[combined][j] === ls) {
                    listeners[combined].pop(i);
                    removeCount++;
                }
            }
        }
        if (removeCount < params.length) {
            return cb("All listeners could not be found", false);
        }
        return cb ? cb(null, true) : null;
    };
    //This handles all changes coming in from the service
    function handleChanges(err, response) {
        if (err) {
            logger_1.default.system.error(err);
        }
        if (!response.data.field) {
            response.data.field = null;
        }
        //var combined = "configService" + (response.data.field ? "." + response.data.field : "");
        var val = response.data.storeData ? response.data.storeData : response.data.value;
        triggerListeners(response.data.field ? response.data.field : "configService", val);
    }
    // Trigger any function that is listening for changes
    function triggerListeners(listenerKey, data) {
        if (listeners[listenerKey]) {
            for (var i = 0; i < listeners[listenerKey].length; i++) {
                if (typeof listeners[listenerKey][i] === "function") {
                    listeners[listenerKey][i](null, { field: listenerKey, value: data });
                }
                else {
                    logger_1.default.system.warn("ConfigClient:triggerListeners: listener is not a function", listenerKey);
                }
            }
        }
    }
    /**
     * Get all or a portion of the configuration from the Config Service. Typically this function is used to return Finsemble configuration
     * (e.g. "finesemble.components"); however, if can also return all or part of the manifest which contains the Finsemble config property.
     * If no configReference parameter is passed in (i.e. only the callback parameter is specified), then the complete manifest object is returned
     * (including manifest.finsemble).
     *
     * @param {object=} params field property indentifies specific config to return
     * @param {function} callback callback function(error, data) to get the configuration data
     * @private
     * @example
     *
     * FSBL.Clients.ConfigClient.get({ field: "finsemble" },function(err, finsemble) {
     *		if (!err) {
     *			finsembleConfig = finsemble;
     *		} else {
     *			console.error("failed to get finsemble configuration");
     *		}
     * });
     *
     * FSBL.Clients.ConfigClient.get({ field: "finsemble.isAuthEnabled" }, function(err, isAuthEnabled) {
     *		var authorizationOn = isAuthEnabled;
     * });
     *
     * FSBL.Clients.ConfigClient.get(callback); // returns the complete manifest containing the finsemble property
     * FSBL.Clients.ConfigClient.get(null, callback); // alternate form; returns the complete manifest containing the finsemble property
     * FSBL.Clients.ConfigClient.get({}, callback); // alternate form; returns the complete manifest containing the finsemble property
     * FSBL.Clients.ConfigClient.get({ field: "finsemble.components" }, callback);
     * FSBL.Clients.ConfigClient.get({ field: "finsemble.services" }, callback);
     * FSBL.Clients.ConfigClient.get({ field: "finsemble.components" },callback);
     * FSBL.Clients.ConfigClient.get({ field: "finsemble.assimilation.whitelist" }, callback);
     * FSBL.Clients.ConfigClient.get({ field: "runtime.version",callback) }; // returns the manifest's runtime.version property
     */
    this.get = function (params, callback) {
        logger_1.default.system.debug("ConfigClient.Get", params);
        logger_1.default.system.warn("This functionality has been deprecated. It will be removed in Finsemble version 3.0. Use getValue instead.", params);
        // if only one argument then assume no filtering parameters -- the complete manifest will be returned
        if (arguments.length === 1) {
            callback = params; // since only one arg, it must be the callback
            validate_1.default.args(callback, "function");
            params = {};
        }
        else {
            validate_1.default.args(params, "object", callback, "function");
        }
        this.routerClient.query("config.get", params, function (queryErr, queryResponse) {
            callback(queryErr, queryResponse ? queryResponse.data : null);
        });
    };
    /**
     * This is designed to mirror the get. Private because security TBD.
     * @private
     *
     * @param {object} params
     * @param {function} callback
     */
    function set(params, callback) {
        logger_1.default.system.debug("ConfigClient.Set", params);
        // if only one argument then assume no filtering parameters -- the complete manifest will be returned
        if (arguments.length === 1) {
            callback = params; // since only one arg, it must be the callback
            validate_1.default.args(callback, "function");
            params = {};
        }
        else {
            validate_1.default.args(params, "object", callback, "function");
        }
        this.routerClient.query("config.set", params, function (queryErr, queryResponse) {
            callback(queryErr, queryResponse ? queryResponse.data : null);
        });
    }
    /**
     * Dynamically set config values within the Finsemble configuration.  New config properties may be set or existing ones modified. Note that configuration changes will not necessarily dynamically modify the components or services that use the corresponding configuration -- it depends if the component or service handles the corresponding change notifications (either though PubSub or the Config's DataStore). Also, these changes do not persist in any config files.)
     *
     * Special Note: Anytime config is set using this API, the newConfig along with the updated manifest will by published to the PubSub topic "Config.changeNotification".  To get these notifications any component or service can subscribe to the topic. An example is shown below.
     *
     * Special Note: Anytime config is set using this API, the dataStore underlying configuration 'Finsemble-Configuration-Store' will also be updated. To get these dataStore events a listener can be set as shown in the example below. However, any config modifications made directly though the DataStore will not result in corresponding PubSub notifications.
     *
     * @param {object} params
     * @param {object} params.newConfig  provides the configuration properties to add into the existing configuration under manifest.finsemble. This config must match the Finsembe config requirements as described in [Understanding Finsemble's Configuration]{@tutorial Configuration}. It can include importConfig references to dynamically fetch additional configuration files.
     * @param {boolean=} params.overwrite if true then overwrite any preexisting config with new config (can only set to true when running from same origin, not cross-domain); if false then newConfig must not match properties of existing config, including service and component configuration.
     * @param {boolean=} params.replace true specifies any component or service definitions in the new config will place all existing non-system component and service configuration
     * @param {function} [cb] callback to be invoked upon task completion.
     * @example
     * // Examples using processAndSet()
     *FSBL.Clients.ConfigClient.processAndSet({ newConfig: { myNewConfigField: 12345 }, overwrite: false});
     *FSBL.Clients.ConfigClient.processAndSet(
     *{
     *	newConfig: {
     *		"myNewConfigField": 12345,
     *		"myNewConfigObject": {
     *			A: "this is a test",
     *			B: "more test"
     *		},
     *		"importConfig": [
     *			"$applicationRoot/configs/application/test.json",
     *		]
     *	},
     *	overwrite: true,
     *  replace: false,
     *},
     *	function (err, finsemble) {
     *		if (err) {
     *			console.error("ConfigClient.set", err);
     *		} else {
     *			console.log("new finsemble config", finsemble);
     *		}
     *	}
     * );
     *
     *  // example subscribing to PubSub to get notifications of dynamic updates
     *RouterClient.subscribe("Config.changeNotification", function (err, notify) {
     *		console.log("set notification", notify.data.newConfig, notify.data.finsemble);
     *	});
     *
     *  // example using DataStore to get notifications of dynamic updates
     *DistributedStoreClient.getStore({ store: 'Finsemble-Configuration-Store', global: true }, function (err, configStore) {
     *		configStore.addListener({ field: "finsemble" }, function (err, newFinsembleConfig) {
     *			console.log("new manifest.finsemble configuration", newFinsembleConfig);
     *		});
     *});
     *
     */
    this.processAndSet = function (params, callback) {
        logger_1.default.system.debug("ConfigClient.processAndSet", params);
        validate_1.default.args(params, "object", callback, "function=") &&
            validate_1.default.args2("params.newConfig", params.newConfig, "object", "params.overwrite", params.overwrite, "boolean=", "params.replace", params.replace, "boolean=");
        if (!params.overwrite && params.replace) {
            var errMsg = "cannot use replace option unless overwrite is also true";
            logger_1.default.system.warn("ConfigClient.processAndSet:", errMsg);
            if (callback) {
                callback(errMsg, null);
            }
        }
        else {
            this.routerClient.query("config.processAndSet", params, function (queryErr, queryResponse) {
                if (callback) {
                    callback(queryErr, queryResponse ? queryResponse.data : null);
                }
            });
        }
    };
    /**
     * Sets a value on the configStore and persists that value to storage. On application restart, this value will overwrite any application defaults.
     * @param {Object} params - Params object
     * @param {String} params.field - The name of the field where data will be stored
     * @param {any} params.value - Value to be stored
     * @param {function} callback - callback to be invoked when preferences have been retrieved from the service.
     * @example
     * FSBL.Clients.ConfigClient.setPreference({field: "finsemble.initialWorkspace", value: "Workspace 2" }, (err, response) => {
     * 		//preference has been set
     * });
     */
    this.setPreference = function (params, callback) {
        this.routerClient.query("PreferencesService.setPreference", params, function (queryErr, queryResponse) {
            if (callback) {
                callback(queryErr, queryResponse ? queryResponse.data : null);
            }
        });
    };
    /**
     * Retrieves all of the preferences set for the application.
     * @param {Object} params - parameters to pass to getPreferences. Optional. Defaults to null.
     * @param {function} callback - callback to be invoked when preferences have been retrieved from the service.
     * @example
     * FSBL.Clients.ConfigClient.getPreferences((err, preferences)=>{
     * 		//use preferences.
     * });
     */
    this.getPreferences = function (params, callback) {
        if (typeof params === "function") {
            callback = params;
            params = null;
        }
        this.routerClient.query("PreferencesService.getPreferences", params, function (queryErr, queryResponse) {
            if (callback) {
                callback(queryErr, queryResponse ? queryResponse.data : null);
            }
        });
    };
};
var configClient = new ConfigClient({
    onReady: function (cb) {
        if (cb) {
            cb();
        }
    },
    name: "configClient"
});
exports.default = configClient;


/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__configUtil__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_system__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_system___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__common_system__);
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/





var ConfigClient = null;

"use strict";

/**
 * @hideConstructor true
 * @constructor
 */
var UserNotification = function () {
	var alertOnceSinceStartUp = {};
	var alertCurrentCount = {};
	var defaultTemplateURL = null;

	/**
  * Gets the default template URL from the manifest at finsemble->notificationURL. If that doesn't exist then it falls back to the system template location.
  * @private
  */
	this.getDefaultTemplateURL = function (cb) {
		if (defaultTemplateURL) {
			setTimeout(function () {
				// Ensure async, just like else clause
				cb(defaultTemplateURL);
			}, 0);
		} else {
			// Require configClient here instead of at top of page to avoid a dependency error (Router uses UserNotification before config service is ready).
			if (!ConfigClient) ConfigClient = __webpack_require__(35).default;
			ConfigClient.get({ field: "finsemble" }, function (err, finConfig) {
				defaultTemplateURL = __WEBPACK_IMPORTED_MODULE_1__configUtil__["ConfigUtilInstance"].getDefault(finConfig, "finsemble.notificationURL", finConfig.moduleRoot + "/components/system/notification/notification.html");
				cb(defaultTemplateURL);
			});
		}
	};

	/**
  * Conditionally alerts the end user using a desktop notification.
  *
  * @param {string} topic specifies a category for the notification. Topic is currently unused, but in the future it will be used to filter notifications (e.g. applying regEx's defined in config to determine which notifications are displayed). Any topic string can be specified; however "system" is the recommended topic for system notifications applicable both to end uses and to developers. "dev" is the recommended topic for notifications applicable only during development (e.g. a notification that config.json has an illegal value).
  * @param {string} frequency Either "ALWAYS", "ONCE-SINCE-STARTUP", or "MAX-COUNT" to determine if alert should be displayed. Note, the frequencies are based on the number of notifications emitted from a window (as opposed to system wide.)
  * @param {string} identifier uniquely identifies this specific notification message. Used when "frequency" is set to "ONCE-SINCE-STARTUP" or "MAX-COUNT"
  * @param {any} message message to display in the notification. Typically a string. Finsemble's built in templating accepts and object. See src-built-in/components/notification/notification.html.
  * @param {object=} params
  * @param {number} params.maxCount specifies the max number of notifications to display for specified identifier when frequency="MAX-COUNT" (default is 1)
  * @param {number} params.duration time in milliseconds before auto-dismissing the notification (defaults to 24 hours)
  * @param {number} params.url the URL for for notification HTML. If not provided then the system default will be used. Defaults to Finsemble's built-in version at "/finsemble/components/system/notification/notification.html".
  *
  * @example
  *		FSBL.UserNotification.alert("system", "ONCE-SINCE-STARTUP", "MANIFEST-Error", message);
 *		FSBL.UserNotification.alert("dev", "ALWAYS", "Config-Error", message, { url: notificationURL, duration: 1000 * 5 });
 *		FSBL.UserNotification.alert("dev", "MAX-COUNT", "Transport-Failure", message, { url: notificationURL, maxCount: 2 });
 */

	this.alert = function (topic, frequency, identifier, message, params) {
		var self = this;
		// If the url for the template is passed in then don't bother fetching the config
		if (params && params.url) {
			this.alertInternal(topic, frequency, identifier, message, params, params.url);
		} else {
			// If no url, then we need to get the template from config
			this.getDefaultTemplateURL(function (url) {
				self.alertInternal(topic, frequency, identifier, message, params, url);
			});
		}
	};

	/**
  * @private
  */
	this.alertInternal = function (topic, frequency, identifier, message, params, url) {
		params = params || {};
		var alertUser = false;
		var key = "UserNotification.alert." + identifier;
		var duration = params.duration || 1000 * 60 * 60 * 24;

		switch (frequency) {
			case "ONCE-SINCE-STARTUP":
				if (key in alertOnceSinceStartUp) {
					alertUser = false;
				} else {
					// if no key then must be first time
					alertUser = true;
					alertOnceSinceStartUp[key] = true;
				}
				break;
			case "MAX-COUNT":
				let currentCount = 0;
				let maxCount = params.maxCount || 1;
				if (key in alertCurrentCount) {
					currentCount = alertCurrentCount[key];
				}
				alertCurrentCount[key] = ++currentCount; // increment and store
				if (currentCount <= maxCount) {
					alertUser = true;
				}
				break;
			default:
				// default to "ALWAYS"
				alertUser = true;
		}

		__WEBPACK_IMPORTED_MODULE_0__clients_logger___default.a.log("UserNotification.alert", topic, alertUser, frequency, identifier, message, params);
		if (alertUser) {
			var notifyObject = {
				url: url,
				message: message,
				timeout: duration
			};
			new __WEBPACK_IMPORTED_MODULE_2__common_system__["System"].Notification(notifyObject);
		}
	};
};

/* harmony default export */ __webpack_exports__["default"] = (new UserNotification());

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\userNotification.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\userNotification.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 37 */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;


/***/ }),
/* 38 */
/***/ (function(module, exports) {

// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));
if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = throttle;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(38);
var bytesToUuid = __webpack_require__(37);

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_events__);
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }


/** Singleton of the System class shared among all instances of Monitors
 * @TODO Refactor to instance member of class.
 */
let System;
class Monitors extends __WEBPACK_IMPORTED_MODULE_0_events__["EventEmitter"] {
	/**
  *
  * @param {function} readyCB Function to be invoked when monitors are retrieved from the system for the first time.
  * @param {function} changeCB Function to be invoked when monitor information changes
  * @param {Object} dependencies Dependency object that provides a system object capable of retrieving monitors.
  */
	constructor(readyCB, changeCB, dependencies) {
		super();
		if (dependencies && dependencies.System) {
			System = dependencies.System;
		} else {
			throw new Error("Monitors class requires dependency injection. Ensure that System is being passed in.");
		}
		this.bindAllFunctions();
		this.refreshMonitors(readyCB);

		System.addEventListener("monitor-info-changed", () => {
			this.refreshMonitors(changeCB);
		});

		//This is to handle 'wake events'. This is technically only going to handle unlock events (user locks screen or logs out then logs back in)
		//Technically, if the user has disabled 'lock on sleep', then this will not fire, but openfin does not have an event for waking/sleeping
		System.addEventListener("session-changed", params => {
			if (params.reason === "unlock") {
				this.refreshMonitors(changeCB);
			}
		});
	}

	bindAllFunctions() {
		let self = this;
		for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {
			let method = self[name];
			// skip constructor
			if (!(method instanceof Function) || method === Monitors) continue;
			self[name] = self[name].bind(self);
		}
	}

	asyncIt(data, cb) {
		cb(data);
		return data;
	}

	rationalizeMonitor(monitor) {
		monitor.monitorRect.width = monitor.monitorRect.right - monitor.monitorRect.left;
		monitor.monitorRect.height = monitor.monitorRect.bottom - monitor.monitorRect.top;
		monitor.availableRect.width = monitor.availableRect.right - monitor.availableRect.left;
		monitor.availableRect.height = monitor.availableRect.bottom - monitor.availableRect.top;
	}

	calculateMonitorScale(dipRect, scaledRect) {
		return (scaledRect.right - scaledRect.left) / (dipRect.right - dipRect.left);
	}

	refreshMonitors(cb = Function.prototype) {
		System.getMonitorInfo(monitorInfo => {
			//console.log("getAllMonitors");
			this.allMonitors = [];
			var primaryMonitor = monitorInfo.primaryMonitor;
			this.primaryMonitor = primaryMonitor;
			primaryMonitor.whichMonitor = "primary";
			primaryMonitor.deviceScaleFactor = this.calculateMonitorScale(primaryMonitor.monitor.dipRect, primaryMonitor.monitor.scaledRect);

			primaryMonitor.position = 0;
			this.allMonitors.push(primaryMonitor);
			for (let i = 0; i < monitorInfo.nonPrimaryMonitors.length; i++) {
				let monitor = monitorInfo.nonPrimaryMonitors[i];
				monitor.deviceScaleFactor = this.calculateMonitorScale(monitor.monitor.dipRect, monitor.monitor.scaledRect);
				monitor.whichMonitor = i;
				monitor.position = i + 1;
				this.allMonitors.push(monitor);
			}
			for (let i = 0; i < this.allMonitors.length; i++) {
				let monitor = this.allMonitors[i];
				this.rationalizeMonitor(monitor);
			}
			cb(this.allMonitors);
			this.ready = true;
			this.emit("monitors-changed", this.allMonitors);
		});
	}

	/**
  * Gets All Monitors.
  * @param {*} cb
  */
	getAllMonitors(cb = Function.prototype) {
		if (!this.ready) {
			if (cb) this.refreshMonitors(cb);else return "not ready";
		} else {
			return this.asyncIt(this.allMonitors, cb);
		}
	}

	/**
  * Gets the monitor on which the point is or null if not on any monitor. This assumes scaled dimensions for the monitor (For example from Openfin or WPF directly).
  * @param {*} x
  * @param {*} y
  * @param {*} cb
  */
	getMonitorFromScaledXY(x, y, cb = Function.prototype) {
		let promiseResolver = resolve => {
			if (!this.ready) {
				this.refreshMonitors(() => {
					this.getMonitorFromScaledXY(x, y, cb);
				});
				//This will recursively call until we have monitors.
				return "not ready";
			}
			let theMonitor = null;
			var monitors = this.allMonitors;
			for (var i = 0; i < monitors.length; i++) {
				var monitor = monitors[i];
				var monitorRect = monitor.monitorRect;
				// Are our coordinates inside the monitor? Note that
				// left and top are inclusive. right and bottom are exclusive
				// In OpenFin, two adjacent monitors will share a right and left pixel value!
				if (x >= monitorRect.left && x < monitorRect.right && y >= monitorRect.top && y < monitorRect.bottom) {
					theMonitor = monitor;
					break;
				}
			}
			resolve(theMonitor);
			cb(theMonitor);
		};
		return new Promise(promiseResolver);
	}

	/**
  * Gets the monitor on which the point is or null if not on any monitor. This assumes unscaled positions of x,y (for example from windows API).
  *
  * @param {any} x
  * @param {any} y
  * @param {any} [cb=function () { }]
  * @returns monitor if found or null
  * @memberof Monitors
  */
	getMonitorFromUnscaledXY(x, y, cb = Function.prototype) {
		if (!this.ready) {
			this.refreshMonitors(() => {
				this.getMonitorFromUnscaledXY(x, y, cb);
			});
			return "not ready";
		}
		var monitors = this.allMonitors;
		for (var i = 0; i < monitors.length; i++) {
			var monitor = monitors[i];
			var monitorRect = monitor.monitor.scaledRect;
			if (x >= monitorRect.left && x < monitorRect.right && y >= monitorRect.top && y < monitorRect.bottom) {
				return this.asyncIt(monitor, cb);
			}
		}
		return this.asyncIt(null, cb);
	}

	/**
  * Converts Point from scaled (e.g. from OpenFin/WPF) to unscaled (e.g. to give Windows API) position
  *
  * @param {any} point
  * @param {any} [cb=function () { }]
  * @returns monitor if found or null
  * @memberof Monitors
  */
	translatePointFromScaled(params, cb = Function.prototype) {
		var _this = this;

		return _asyncToGenerator(function* () {
			if (!_this.ready) {
				_this.refreshMonitors(function () {
					_this.translatePointFromScaled(params, cb);
				});
				return "not ready";
			}
			var point;
			if (params.point) point = params.point;else point = params;
			var monitor = params.monitor;
			if (!monitor) {
				let result = yield _this.getMonitorFromScaledXY(point.x, point.y);
				monitor = result.data;
			}

			let unscaledPoint = null;
			if (monitor) {
				var relativeX = point.x - monitor.monitorRect.left;
				var relativeY = point.y - monitor.monitorRect.top;
				var unscaledRelativeX = relativeX * monitor.deviceScaleFactor;
				var unscaledRelativeY = relativeY * monitor.deviceScaleFactor;
				unscaledPoint = {
					x: unscaledRelativeX + monitor.monitor.scaledRect.left,
					y: unscaledRelativeY + monitor.monitor.scaledRect.top
				};
			}

			cb(unscaledPoint);
			return Promise.resolve(unscaledPoint);
		})();
	}

	/**
  * Converts Point to scaled (e.g. from OpenFin/WPF) from unscaled (e.g. to give Windows API) position
  *
  * @param {any} point
  * @param {any} [cb=function () { }]
  * @returns point if on monitor or null
  * @memberof Monitors
  */
	translatePointToScaled(params, cb = Function.prototype) {
		if (!this.ready) {
			this.refreshMonitors(() => {
				this.translatePointToScaled(params, cb);
			});
			return "not ready";
		}
		var point;
		if (params.point) point = params.point;else point = params;
		var monitor = params.monitor || this.getMonitorFromUnscaledXY(point.x, point.y);
		if (!monitor) return this.asyncIt(null, cb);
		var relativeX = point.x - monitor.monitor.scaledRect.left;
		var relativeY = point.y - monitor.monitor.scaledRect.top;
		var scaledRelativeX = relativeX / monitor.deviceScaleFactor;
		var scaledRelativeY = relativeY / monitor.deviceScaleFactor;
		var scaledPoint = {
			x: scaledRelativeX + monitor.monitorRect.left,
			y: scaledRelativeY + monitor.monitorRect.top
		};
		return this.asyncIt(scaledPoint, cb);
	}

	/**
  * Converts Rectangle (top, left, bottom, right) from unscaled to scaled. Mainly for use to translate window locations to/from Windows API.
  *
  * @param {any} rect
  * @param {any} [cb=function () { }]
  * @returns rect
  * @memberof Monitors
  */
	translateRectToScaled(rect, cb = Function.prototype) {
		var _this2 = this;

		return _asyncToGenerator(function* () {
			if (!_this2.ready) {
				_this2.refreshMonitors(function () {
					_this2.translateRectToScaled(rect, cb);
				});
				return "not ready";
			}
			var topLeft = _this2.translatePointToScaled({ x: rect.left, y: rect.top });
			var bottomRight = _this2.translatePointToScaled({ x: rect.right, y: rect.bottom });
			if (!topLeft && bottomRight) {
				monitor = yield _this2.getMonitorFromScaledXY(bottomRight);
				topLeft = _this2.translatePointToScaled({
					monitor,
					point: { x: rect.left, y: rect.top }
				});
			}
			if (!bottomRight && topLeft) {
				monitor = yield _this2.getMonitorFromScaledXY(bottomRight);
				bottomRight = _this2.translatePointToScaled({
					monitor,
					point: { x: rect.right, y: rect.bottom }
				});
			}
			return _this2.asyncIt({
				top: topLeft ? topLeft.y : null,
				left: topLeft ? topLeft.x : null,
				bottom: bottomRight ? bottomRight.y : null,
				right: bottomRight ? bottomRight.x : null,
				height: topLeft && bottomRight ? bottomRight.y - topLeft.y : null,
				width: topLeft && bottomRight ? bottomRight.x - topLeft.x : null
			}, cb);
		})();
	}

	/**
  * Converts Rectangle (top, left, bottom, right) to unscaled from scaled. Mainly for use to translate window locations to/from Windows API.
  *
  * @param {any} rect
  * @param {any} [cb=function () { }]
  * @returns rect
  * @memberof Monitors
  */
	translateRectFromScaled(rect, cb = Function.prototype) {
		if (!this.ready) {
			this.refreshMonitors(() => {
				this.translateRectFromScaled(rect, cb);
			});
			return "not ready";
		}
		var topLeft = this.translatePointFromScaled({ x: rect.left, y: rect.top });
		var bottomRight = this.translatePointFromScaled({ x: rect.right, y: rect.bottom });
		if (!topLeft && bottomRight) {
			topLeft = this.translatePointFromScaled({
				monitor: this.getMonitorFromUnscaledXY(bottomRight),
				point: { x: rect.left, y: rect.top }
			});
		}
		if (!bottomRight && topLeft) {
			bottomRight = this.translatePointFromScaled({
				monitor: this.getMonitorFromUnscaledXY(topLeft),
				point: { x: rect.right, y: rect.bottom }
			});
		}
		return this.asyncIt({
			top: topLeft ? topLeft.y : null,
			left: topLeft ? topLeft.x : null,
			bottom: bottomRight ? bottomRight.y : null,
			right: bottomRight ? bottomRight.x : null,
			height: topLeft && bottomRight ? bottomRight.y - topLeft.y : null,
			width: topLeft && bottomRight ? bottomRight.x - topLeft.x : null
		}, cb);
	}
}
/* harmony default export */ __webpack_exports__["a"] = (Monitors);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\monitorsAndScaling.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\monitorsAndScaling.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__configUtil__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_socket_io_client__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_socket_io_client___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_socket_io_client__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_system__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_system___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__common_system__);
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

// This routerTransport module is shared between router clients and the router service.  It supports
// the addition of new transports without any change to the router code. Each transport is
// point-to-point between a router client and the router service (i.e. hub and spoke).  Each router
// client can use a different transport (i.e. the router service connects to them all).








/**
 * @introduction
 * <h2>Router Transport</h2>
 * **Service-Level Module**.  Manages and contains the point-to-point transports (i.e., Layer 2) supported by Finsemble.
 * Each transport communicates between a Finsemble services or component (i.e. a router client on one end) and the Finsemble router service (another router client on the other end).
 *
 * Integration into routerService.js is automatic on startup.
 *
 * Developer Notes on Adding New Transport:
 * 1) Create new transport constructor.
 * 2) Call RouterTransport.addTransport() to make the transport constructor (see the bottom of this file)
 *
 * Each transport constructor must be implemented with the following interface:
 *
 *	ExampleTransportConstructor(params, parentMessageHandler, source, destination) where
 *
 * 			params is a passed in object including data that may (or may not) be needed for implementing the transport
 * 					params.FinsembleUUID: globally unique identifier for Finsemble (one per host machine)
 *					params.applicationRoot:  value of manifest.finsemble.applicationRoot,
 *					params.routerDomainRoot: value of manifest.finsemble.moduleRoot,
 *					params.sameDomainTransport: transport to use for same domain clients
 *					params.crossDomainTransport: transport to use for cross domain clients
 *					params.transportSettings: transport settings from finsemble.router.transportSettings if defined, otherwise an empty object
 *
 * 			parentMessageHandler(incomingTransportInfo, routerMessage) where
 * 					incomingTransportInfo is a transport-specific object containing essential information to route back to the same client.
 * 						The same object will be returned on a send() so the transport can use to send the message to that client.
 * 						It's up to the developer to decide what to put in the incomingTransportInfo object. The RouterService never
 * 						directly uses the object, except to do a property-based comparison for equality (so equality must be based on the top-level properties within the object.)
 * 					routerMessage is an object containing a single router message. The transport generally does not need to know the contents --
 * 						it only sends and receives these messages. However, the router's header (routerMessage.header) is available to the transport if needed.
 *
 * 			source is either the source's client name or "RouterService" (when the RouterService is the source)
 *
 * 			destination is either the destination's client name or "RouterService" (when the RouterService is the desgination)
 *
 * 			callback(this) returns the constructor.  Normally a constructor is not asyncronous, but support in case the constructed transport requires async initialization.
 *
 * The transport constructor must implement two functions.
 * 		1) send(transport, routerMessage) -- transport object contains destination transport info; routerMessage is the message to send
 * 		2) identifier() -- returns transport's name
 *
 * These functions along with the parentMessageHandler callback all that's needed to interface with the higher-level router (either a client or router service):
 *
 * The three transports implemented at the bottom of this file can serve as examples.
 *
 * @namespace RouterTransport
 */
var RouterTransport = {

	activeTransports: {},

	/**
  * Adds a new type of router transport to pass message between RouterClient and RouterService.
  *
  * @param {string} transportName identifies the new transport
  * @param {object} transportConstructor returns an instance of the new transport
  */
	addTransport: function (transportName, transportConstructor) {
		this.activeTransports[transportName] = transportConstructor;
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.log(`RouterTransport ${transportName} added to activeTransports`);
	},

	/**
  * Gets array of active transports.  What is active depends both on config and what is supported by the environment. Typically, if OF IAB is defined then the IAB transport is added to active list.  Likewise, if SharedWorker defined, then SharedWork transport added to the active list.  Special transports that don't have backwards compatability (e.g. FinsembleTransport) are only added if specified in the config.
  *
  * @param {string} params transport paramters
  *
  * @returns array of active transport names
  */
	getActiveTransports: function (params) {
		var transportNames = [];

		// convenience funciton to add transport to active list only if it's not already in the list
		function addToActive(transportName) {
			if (transportNames.indexOf(transportName) === -1) {
				// if not already in the list, then add it
				transportNames.push(transportName);
			}
		}

		// if OpenFin IAB available, then add IAB to active list
		if (fin && fin.desktop && fin.desktop.InterApplicationBus) addToActive("OpenFinBus");

		// If electron, always have FinsembleTransport active
		if (fin && fin.container === "Electron") addToActive("FinsembleTransport");

		// if shared worker available, then add shared-worker transport to active list
		if (SharedWorker) addToActive("SharedWorker");

		// add whatever the sameDomainTrasnport is to the active list
		addToActive(params.sameDomainTransport);

		// add whatever the crossDomainTrasnport is to the active list
		addToActive(params.crossDomainTransport);

		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.log("getActiveTransports", transportNames);
		return transportNames;
	},

	/**
  * Get default transport for event router&mdash;this is the most reliable transport across all contexts.
  *
 	 * @param {object} params parameters for transport
  * @param {any} incomingMessageHandler
  * @param {any} source
  * @param {any} destination
  * @returns the transport object
  */
	getDefaultTransport: function (params, incomingMessageHandler, source, destination) {
		return RouterTransport.getTransport(params, "OpenFinBus", incomingMessageHandler, source, destination);
	},

	/**
  * Get best client transport based on the run-time context. Will only return cross-domain transport if current context is inter-domain.
  *
 	 * @param {object} params parameters for transport
  * @param {any} incomingMessageHandler
  * @param {any} source
  * @param {any} destination
  * @returns the transport object
  */
	getRecommendedTransport: function (params, incomingMessageHandler, source, destination) {

		// returns true if this window's location is in another domain
		function crossDomain() {
			var parser = document.createElement("a");
			parser.href = params.routerDomainRoot;

			var isSameHost = window.location.hostname === parser.hostname;

			var isSameProtocol = window.location.protocol === parser.protocol;

			var wport = window.location.port === undefined ? window.location.port : 80;
			var pport = parser.port === undefined ? parser.port : 80;
			var isSamePort = wport === pport;

			var isCrossDomain = !(isSameHost && isSamePort && isSameProtocol);
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("Transport crossDomain=" + isCrossDomain + " (" + isSameHost + ":" + isSameProtocol + ":" + isSamePort + ")");
			return isCrossDomain;
		}

		// returns name of the best transport for communicating with router service
		function recommendedTransportName() {
			var sameDomainTransport = params.sameDomainTransport;
			var crossDomainTransport = params.crossDomainTransport;

			var selectedTransport = sameDomainTransport;
			if (crossDomain()) {
				selectedTransport = crossDomainTransport;
			}

			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.log(`Transport Info: Selected=${selectedTransport} SameDomainDefault=${sameDomainTransport} CrossDomainDefault=${crossDomainTransport}`);
			console.log(`Transport Info: Selected=${selectedTransport} SameDomainDefault=${sameDomainTransport} CrossDomainDefault=${crossDomainTransport}`);

			return selectedTransport;
		}

		var transportName = recommendedTransportName();
		return RouterTransport.getTransport(params, transportName, incomingMessageHandler, source, destination);
	},

	/**
  * Get a specific transport by name. The transport must be in list of the active transports (i.e. previously added).
  *
 	 * @param {object} params parameters for transport
  * @param {any} transportName
  * @param {any} incomingMessageHandler
  * @param {any} source
  * @param {any} destination
  * @returns the transport object
  */
	getTransport: function (params, transportName, incomingMessageHandler, source, destination) {
		var self = this;
		return new Promise(function (resolve, reject) {
			var transportConstructor = self.activeTransports[transportName];
			if (transportConstructor) {
				new transportConstructor(params, incomingMessageHandler, source, destination, function (newTransport) {
					resolve(newTransport);
				});
			} else {
				reject("unknown router transport name: " + transportName);
			}
		});
	}
};

//////////////////////////////////////////////////////////////
// Below all transports are defined then added to active list
//////////////////////////////////////////////////////////////

var RouterTransportImplementation = {}; // a convenience namespace for router-transport implementations

/*
 * Implements the SharedWorker Transport.
 *
 * Required Functions (used by transport clients):
 * 		send(routerMessage) -- transports the event
 * 		identifier() -- returns transport name/identifier
 *
 * @param {object} params various parms to support transports
 * @param {any} parentMessageHandler callback for incoming event
 * @param {any} source either the client name or "RouterService"
 * @param {any} destination either the client name or "RouterService" (unused in SharedWorker)
 */
RouterTransportImplementation.SharedWorkerTransport = function (params, parentMessageHandler, source, destination, callback) {
	var routerThread;
	var self = this;

	// receives incoming shared-worker messages then passes on to parent with correct "wrapper"
	function sharedWorkerMessageHandler(swMessage) {
		var port = swMessage.data[0];
		var routerMessage = swMessage.data[1];
		var incomingTransportInfo = { "transportID": self.identifier(), "port": port };
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.verbose("SharedWorkerTransport Incoming Transport", incomingTransportInfo, "Message", routerMessage);
		parentMessageHandler(incomingTransportInfo, routerMessage);
	}

	//required function for parent (i.e. routeClient or routeService)
	this.send = function (transport, routerMessage) {
		// handle optional transport parm
		if (arguments.length === 1) {
			// clients use just one parm -- routerMessage
			routerMessage = arguments[0];
			transport = null;
		} else {
			// router services uses both parameters
			transport = arguments[0];
			routerMessage = arguments[1];
		}
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.verbose("SharedWorkerTransport Outgoing Transport", routerMessage);

		try {
			routerThread.port.postMessage([transport, routerMessage]);
		} catch (e) {
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("SharedWorkerTransport: post message failed: " + JSON.stringify(e), "Probable cause is sending illegal data type (e.g. function).");
		}
	};

	//required function for parent (i.e. routeClient or routeService)
	this.identifier = function () {
		return "SharedWorker";
	};

	var workerPath = params.transportSettings.SharedWorker && params.transportSettings.SharedWorker.workerPath ? params.transportSettings.SharedWorker.workerPath : params.routerDomainRoot + "/common/routerSharedWorker.js";

	__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.log(`SharedWorker Transport Initializing for ${source} using ${workerPath}`);
	console.log(`SharedWorker Transport Initializing for ${source} using ${workerPath}`);

	routerThread = new SharedWorker(workerPath, { name: "Finsemble", credentials: "included" });
	routerThread.port.onmessage = sharedWorkerMessageHandler;
	routerThread.onerror = function (e) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("SharedWorkerTransport Transport Error" + JSON.stringify(e));
	};
	routerThread.port.start();

	if (source === "RouterService") {
		// send first message though shared worker to identify router service
		routerThread.port.postMessage({ data: "connect", source: "RouterService" });
	}

	callback(this);
};

/*
 * Implements the OpenFin Bus Transport.
 *
 * Required Functions (used by transport clients):
 * 		send(transport, routerMessage) -- transport object contains destination transport info; routerMessage is the message to send
 * 		identifier() -- returns transport's name
 *
 * @param {object} params unused in OpenFin transport
 * @param {any} parentMessageHandler callback for incoming event
 * @param {any} source either the client name or "RouterService"
 * @param {any} destination either the client name or "RouterService"
 */
RouterTransportImplementation.OpenFinTransport = function (params, parentMessageHandler, source, destination, callback) {
	var uuid = __WEBPACK_IMPORTED_MODULE_3__common_system__["System"].Application.getCurrent().uuid;
	var self = this;

	// receives incoming OpenFin bus messages then passes on to parent with correct "wrapper"
	function openFinMessageHandler(routerMessage, senderUuid) {
		var incomingTransportInfo = { "transportID": self.identifier(), "senderUuid": senderUuid, "name": routerMessage.header.origin };
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.verbose("OpenFinTransport Incoming Transport", incomingTransportInfo, "Message", routerMessage);
		parentMessageHandler(incomingTransportInfo, routerMessage);
	}

	function subscribeFailure(reason) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("OpenFinBus Subscribe Failure: " + reason);
	}

	//required function for the parent (i.e. routeClient or routeService)
	this.send = function (transport, routerMessage) {
		var destTopic;

		// handle optional transport parm
		if (arguments.length === 1) {
			// client use just one parameter - routerMessage
			destTopic = destination;
			routerMessage = arguments[0];
		} else {
			// router service uses both parameters
			destTopic = transport.name;
			routerMessage = arguments[1];
		}

		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.verbose("OpenFinTransport Outgoing Transport", uuid, destTopic, "Message", routerMessage);
		fin.desktop.InterApplicationBus.publish(destTopic, routerMessage, function () {}, function (err) {});
	};

	//required function for the parent (i.e. routeClient or routeService)
	this.identifier = function () {
		return "OpenFinBus";
	};

	__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.log(`OpenFinBus Transport Initializing for ${source}`);
	console.log(`OpenFinBus Transport Initializing for ${source}`);
	fin.desktop.InterApplicationBus.subscribe("*", source, openFinMessageHandler, null, subscribeFailure);

	callback(this);
};

/*
 * Implements the FinsembleTransport (alternative to IAB without iFrame problems with supporting server commonly running on local server).
 *
 * Required Functions (used by transport clients):
 * 		send(event) -- transports the event
 * 		identifier() -- returns transport name/identifier
 *
 * @param {object} params various parms to support transports
 * @param {any} parentMessageHandler callback for incoming event
 * @param {any} source either the client name or "RouterService"
 * @param {any} destination either the client name or "RouterService" (unused in FinsembleTransport)
 */
RouterTransportImplementation.FinsembleTransport = function (params, parentMessageHandler, source, destination, callback) {
	/** @TODO - split into two separate vars for clarity. */
	var serverAddress = __WEBPACK_IMPORTED_MODULE_0__configUtil__["ConfigUtilInstance"].getDefault(params, "params.transportSettings.FinsembleTransport.serverAddress", __WEBPACK_IMPORTED_MODULE_0__configUtil__["ConfigUtilInstance"].getDefault(params, "params.IAC.serverAddress", "wss://localhost.chartiq.com:3376"));
	const SOCKET_SERVER_ADDRESS = serverAddress + "/router"; // "router" is the socket namespace used on server

	var self = this;

	// receives incoming messages then passes on to parent (what's passed to parent should be same routerMessage received in send()
	function finsembleMessageHandler(routerMessage) {
		var incomingTransportInfo = { "transportID": self.identifier(), "client": routerMessage.clientMessage.header.origin };
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.verbose("FinsembleTransport Incoming Transport", incomingTransportInfo, "Message", routerMessage);
		parentMessageHandler(incomingTransportInfo, routerMessage.clientMessage);
	}

	// Both sending and receiving is based on the following routing functionality located in a local node server (the below is a copy of the node server code)
	// 		// destination is RouterClient (message.client)
	//  	client.on('ROUTER_CLIENT', function(message) {
	// 			routerServer.emit(message.client, message);
	// 		});
	// 		// destination is RouterService
	// 		client.on('ROUTER_SERVICE', function(message) {
	// 			routerServer.emit('ROUTER_SERVICE_IN', message);
	// 		});

	//required function for the parent (i.e. routeClient or routeService)
	this.send = function (transport, routerMessage) {
		var dest;
		var newMessage;

		// decide how to route the message based on whether client or routerservice is sending
		if (arguments.length === 1) {
			// clients use just one parameter, so send client message to RouterService
			dest = "ROUTER_SERVICE";
			routerMessage = arguments[0];
			newMessage = { clientMessage: routerMessage }; // no client property needed to route on server since always going to router service
		} else {
			// router service uses both parameters, so send router-service mssage to a client
			dest = "ROUTER_CLIENT";
			routerMessage = arguments[1];
			newMessage = { client: transport.client, clientMessage: routerMessage }; // client property used to router on server
		}

		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.verbose("FinsembleTransport Outgoing Transport", dest, "NewMessage", newMessage);
		routerServerSocket.emit(dest, newMessage);
	};

	//required function for the parent (i.e. routeClient or routeService)
	this.identifier = function () {
		return "FinsembleTransport";
	};

	__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.log(`FinsembleTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);
	console.log(`FinsembleTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);

	function connectTimeoutHandler() {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error(`FinsembleTransport Connection Timeout for ${source}`);
		callback(self);
	}

	// set up for receiving incoming messages
	var routerServerSocket;
	if (SOCKET_SERVER_ADDRESS.indexOf("ws:") !== -1 || SOCKET_SERVER_ADDRESS.indexOf("wss:") !== -1) {
		routerServerSocket = __WEBPACK_IMPORTED_MODULE_2_socket_io_client___default.a.connect(SOCKET_SERVER_ADDRESS, { transports: ["websocket"], upgrade: false }); // if websocket address then use ws transport
	} else {
		routerServerSocket = __WEBPACK_IMPORTED_MODULE_2_socket_io_client___default.a.connect(SOCKET_SERVER_ADDRESS, {}); // if not ws then http
	}
	var connectTimer = setTimeout(connectTimeoutHandler, 3000); // cleared in setServiceOnline

	routerServerSocket.on("connect", function () {
		clearTimeout(connectTimer);
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.log("FinsembleTransport Connected to Server");
		console.log("FinsembleTransport Connected to Server");
		if (source === "RouterService") {
			// if this transport is for router service, use hardcoded socket address ("ROUTER_SERVICE_IN")
			routerServerSocket.on("ROUTER_SERVICE_IN", function (data) {
				finsembleMessageHandler(data);
			});
		} else {
			// for all other clients, the source == client name, so each socket address is based on client name
			routerServerSocket.on(source, function (data) {
				finsembleMessageHandler(data);
			});
		}
		callback(self);
	});
};

/*
 * Implements the FinsembleCloudTransport (a version of FinsembleTransport with server commonly running on remote server).
 *
 * Required Functions (used by transport clients):
 * 		send(event) -- transports the event
 * 		identifier() -- returns transport name/identifier
 *
 * @param {object} params various parms to support transports
 * @param {any} parentMessageHandler callback for incoming event
 * @param {any} source either the client name or "RouterService"
 * @param {any} destination either the client name or "RouterService" (unused in FinsembleCloudTransport)
 */
RouterTransportImplementation.FinsembleCloudTransport = function (params, parentMessageHandler, source, destination, callback) {
	var serverAddress;
	var defaultAddress = __WEBPACK_IMPORTED_MODULE_0__configUtil__["ConfigUtilInstance"].getDefault(params, "params.transportSettings.FinsembleCloudTransport.serverAddress", params.applicationRoot);
	var FinsembleUUID = params.FinsembleUUID;

	if (defaultAddress.substr(defaultAddress.length - 1) === "/") {
		serverAddress = defaultAddress.substring(0, defaultAddress.length - 1); // truncate and trailing slash because it causes problem with socket.io namespace
	} else {
		serverAddress = defaultAddress;
	}

	const SOCKET_SERVER_ADDRESS = serverAddress + "/router"; // "router" is the socket namespace used on server

	var self = this;

	// receives incoming messages then passes on to parent (what's passed to parent should be same routerMessage received in send()
	function finsembleMessageHandler(routerMessage) {
		var incomingTransportInfo = { "transportID": self.identifier(), "client": routerMessage.clientMessage.header.origin };
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.verbose("FinsembleCloudTransport Incoming Transport", incomingTransportInfo, "Message", routerMessage);
		parentMessageHandler(incomingTransportInfo, routerMessage.clientMessage);
	}

	//required function for the parent (i.e. routeClient or routeService)
	this.send = function (transport, routerMessage) {
		var dest;
		var newMessage;

		// decide how to route the message based on whether client or routerservice is sending
		if (arguments.length === 1) {
			// clients use just one parameter, so send client message to RouterService
			dest = "ROUTER_SERVICE";
			routerMessage = arguments[0];
			newMessage = { FinsembleUUID, clientMessage: routerMessage }; // no client property needed to route on server since always going to router service
		} else {
			// router service uses both parameters, so send router-service mssage to a client
			dest = "ROUTER_CLIENT";
			routerMessage = arguments[1];
			newMessage = { FinsembleUUID, client: transport.client, clientMessage: routerMessage }; // client property used to router on server
		}

		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.verbose("FinsembleCloudTransport Outgoing Transport", dest, "NewMessage", newMessage);
		routerServerSocket.emit(dest, newMessage);
	};

	//required function for the parent (i.e. routeClient or routeService)
	this.identifier = function () {
		return "FinsembleCloudTransport";
	};

	__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.log(`FinsembleCloudTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);
	console.log(`FinsembleCloudTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);

	function connectTimeoutHandler() {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error(`FinsembleCloudTransport Connection Timeout for ${source}`);
		callback(self);
	}

	// set up for receiving incoming messages
	var routerServerSocket;
	if (SOCKET_SERVER_ADDRESS.indexOf("ws:") !== -1) {
		routerServerSocket = __WEBPACK_IMPORTED_MODULE_2_socket_io_client___default.a.connect(SOCKET_SERVER_ADDRESS, { transports: ["websocket"], upgrade: false }); // if websocket address then use ws transport
	} else {
		routerServerSocket = __WEBPACK_IMPORTED_MODULE_2_socket_io_client___default.a.connect(SOCKET_SERVER_ADDRESS, {}); // if not ws then http
	}
	var connectTimer = setTimeout(connectTimeoutHandler, 3000); // cleared in setServiceOnline

	routerServerSocket.on("connect", function () {
		clearTimeout(connectTimer);
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.log("FinsembleCloudTransport Connected to Server", FinsembleUUID);
		console.log("FinsembleCloudTransport Connected to Server");
		if (source === "RouterService") {
			// if this transport is for router service, use hardcoded socket address ("ROUTER_SERVICE_IN") along with FinsembleUUID
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("Setting Up Socket Connection", "ROUTER_SERVICE_IN" + FinsembleUUID);
			console.log("Setting Up Socket Connection", "ROUTER_SERVICE_IN" + FinsembleUUID);
			routerServerSocket.on("ROUTER_SERVICE_IN" + FinsembleUUID, function (data) {
				finsembleMessageHandler(data);
			});
		} else {
			// for all other clients, the source == client name, so each socket address is based on client name along with FinsembleUUID
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("Setting Up Socket Connection", source + FinsembleUUID);
			console.log("SETTING UP Socket CONNECTION", source + FinsembleUUID);
			routerServerSocket.on(source + FinsembleUUID, function (data) {
				finsembleMessageHandler(data);
			});
		}
		callback(self);
	});
};

// add the transports to the available/active list
RouterTransport.addTransport("SharedWorker", RouterTransportImplementation.SharedWorkerTransport);
RouterTransport.addTransport("OpenFinBus", RouterTransportImplementation.OpenFinTransport);
RouterTransport.addTransport("FinsembleTransport", RouterTransportImplementation.FinsembleTransport);

/* harmony default export */ __webpack_exports__["default"] = (RouterTransport);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\routerTransport.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\routerTransport.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(54);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

Object.defineProperty(exports, "__esModule", { value: true });
const routerTransport_1 = __webpack_require__(42);
const Utils = __webpack_require__(10);
const configUtil_1 = __webpack_require__(14);
const validate_1 = __webpack_require__(9); // Finsemble args validator
const userNotification_1 = __webpack_require__(36);
const system_1 = __webpack_require__(4);
const logger_1 = __webpack_require__(2);
var queue = []; // should never be used, but message sent before router ready will be queue
const Globals = window;
const localLogger_1 = __webpack_require__(23);
let Logger = logger_1.Logger;
// Use global data for these objects in case multiple clients running in same window (a side effect of injection and perhaps other edge conditions).
Globals.FSBLData = Globals.FSBLData || {};
Globals.FSBLData.clientIDCounter = Globals.FSBLData.clientIDCounter || 1000;
Globals.FSBLData.RouterClients = Globals.FSBLData.RouterClients || {};
/**
 * @introduction
 *
 * <h2>Router Client</h2>
 *
 * The Router Client sends and receives event messages between Finsemble components and services. See the <a href=tutorial-TheRouter.html>Router tutorial</a> for an overview of the Router's functionality.
 *
 * Router callbacks for incoming messages are **always** in the form `callback(error, event)`. If `error` is null, then the incoming data is always in `event.data`. If `error` is set, it contains a diagnostic object and message. On error, the `event` parameter is not undefined.
 *
 *
 * @constructor
 * @hideconstructor
 * @publishedName RouterClient
 * @param {string} clientName router base client name for human readable messages (window name is concatenated to baseClientName)
 * @param {string=} transportName router transport name, currently either "SharedWorker" or "OpenFinBus" (usually this is autoconfigured internally but can be selected for testing or special configurations)
 */
// uncomment for optimization.
// console.time("FinMainStartup");
exports.RouterClientConstructor = function (params) {
    validate_1.default.args(params, "object") && validate_1.default.args2("params.clientName", params.clientName, "string", "params.transportName", params.transportName, "string=");
    // console.timeStamp("Router");
    // console.profile("Router");
    ///////////////////////////
    // Private Data
    ///////////////////////////
    var baseClientName = params.clientName;
    var transportName = params.transportName;
    var handshakeHandler;
    var timeCalibrationHandler;
    var mapListeners = {};
    var mapResponders = {};
    var mapPubSubResponders = {};
    var mapPubSubResponderState = {};
    var mapPubSubResponderRegEx = {};
    var pubsubListOfSubscribers = {};
    var mapSubscribersID = {};
    var mapSubscribersTopic = {};
    var mapQueryResponses = {};
    var mapQueryResponseTimeOut = {};
    var clientName;
    var transport = null;
    var isRouterReady = false;
    var parentReadyCallbackQueue = []; // must be queue because may be multiple waiters
    var self = this;
    this.startupTime = 0;
    /////////////////////////////////////////////////////////////////////
    // Private Message Contructors for Communicating with RouterService
    /////////////////////////////////////////////////////////////////////
    function InitialHandshakeMessage() {
        this.header = {
            "origin": clientName,
            "type": "initialHandshake",
        };
    }
    function TimeCalibrationHandshakeMessage(clientBaseTime, serviceBaseTime) {
        this.header = {
            "origin": clientName,
            "type": "timeCalibration",
        };
        this.clientBaseTime = clientBaseTime;
        this.serviceBaseTime = serviceBaseTime;
    }
    function AddListenerMessage(channel) {
        this.header = {
            "origin": clientName,
            "type": "addListener",
            "channel": channel
        };
    }
    function TransmitMessage(toChannel, data, options) {
        this.header = {
            "origin": clientName,
            "type": "transmit",
            "channel": toChannel
        };
        this.data = data;
        this.options = options;
    }
    function RemoveListenerMessage(channel) {
        this.header = {
            "origin": clientName,
            "type": "removeListener",
            "channel": channel
        };
    }
    function addResponderMessage(channel) {
        this.header = {
            "origin": clientName,
            "type": "addResponder",
            "channel": channel
        };
    }
    function QueryMessage(queryID, channel, data) {
        this.header = {
            "origin": clientName,
            "type": "query",
            "queryID": queryID,
            "channel": channel
        };
        this.data = data;
    }
    function QueryResponseMessage(queryID, error, data) {
        this.header = {
            "origin": clientName,
            "type": "queryResponse",
            "queryID": queryID,
            "error": error
        };
        this.data = data;
    }
    function RemoveResponderMessage(channel) {
        this.header = {
            "origin": clientName,
            "type": "removeResponder",
            "channel": channel
        };
    }
    function SubscribeMessage(subscribeID, topic) {
        this.header = {
            "origin": clientName,
            "type": "subscribe",
            "subscribeID": subscribeID,
            "topic": topic
        };
    }
    function UnsubscribeMessage(subscribeID, topic) {
        this.header = {
            "origin": clientName,
            "type": "unsubscribe",
            "subscribeID": subscribeID,
            "topic": topic
        };
    }
    function PublishMessage(topic, data) {
        this.header = {
            "origin": clientName,
            "type": "publish",
            "topic": topic
        };
        this.data = data;
    }
    function NotifyMessage(subscribeID, topic, error, data) {
        this.header = {
            "origin": clientName,
            "type": "notify",
            "subscribeID": subscribeID,
            "topic": topic,
            "error": error
        };
        this.data = data;
    }
    function AddPubSubResponderMessage(topic) {
        this.header = {
            "origin": clientName,
            "type": "addPubSubResponder",
            "topic": topic
        };
    }
    function RemovePubSubResponderMessage(topic) {
        this.header = {
            "origin": clientName,
            "type": "removePubSubResponder",
            "topic": topic
        };
    }
    function JoinGroupMessage(group) {
        this.header = {
            "origin": clientName,
            "type": "joinGroup",
            "group": group
        };
    }
    function LeaveGroupMessage(group) {
        this.header = {
            "origin": clientName,
            "type": "leaveGroup",
            "group": group
        };
    }
    function GroupTransmitMessage(group, toChannel, message, data) {
        this.header = {
            "origin": clientName,
            "type": "groupTransmit",
            "group": group,
            "channel": toChannel
        };
        this.data = data;
    }
    //////////////////////
    // Private Functions
    //////////////////////
    // router client is being terminated so cleanup
    function destructor(event) {
        Logger.system.info("WINDOW LIFECYCLE:Shutdown:RouterClient:Shutting down.");
        self.disconnectAll(); // this will let the router know the client is terminating
    }
    // invoked when router init is complete
    function onReadyCallBack() {
        self.startupTime = performance.now() - self.startupTime;
        Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient Ready");
        isRouterReady = true;
        // console.profileEnd("Router");
        // invoke all the parent callbacks waiting for router to be ready
        while (parentReadyCallbackQueue.length > 0) {
            Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient parentReady invoked");
            var nextParentCallback = parentReadyCallbackQueue.shift();
            nextParentCallback();
        }
    }
    // called once on router-client creation
    function constructor(clientName, transportName) {
        Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient Constructor:Name:", clientName);
        var callbackCounter = 0;
        function processManifest(manifest) {
            Logger.system.info("WINDOW LIFECYCLE:STARTUP:RouterClient:processManifest");
            //If manifest is a string, then there was an error getting the manifest because in a separate application
            if (!manifest || typeof (manifest) === "string") {
                Logger.system.error("WINDOW LIFECYCLE:STARTUP:RouterClient:processManifest failed -- fatal error", manifest);
            }
            else {
                asyncConnectToEventRouter(manifest, clientName, transportName, onReadyCallBack); /**** establish connection to router service ****/
            }
        }
        //This is the only place we need to wait for desktop.main
        system_1.System.ready(function () {
            var finWindow = system_1.System.Window.getCurrent();
            Logger.system.debug(`WINDOW LIFECYCLE:STARTUP: fin.main invoked in ${finWindow.name}`);
            window.console.debug(`WINDOW LIFECYCLE:STARTUP: fin.main invoked in ${finWindow.name}`);
            self.startupTime = performance.now();
            // uncomment for optimization.
            // console.timeEnd("FinMainStartup");
            if (callbackCounter++ === 0) { // this check should  not be needed; patch for OpenFin bug which invokes callback twice
                // catch "window closing" event so can cleanup
                //got rid of onClose destructors because it's handled inside of the baseService and inside of FSBL. if we disconnect all before other close handlers complete, we could end up with a hanging window.
                finWindow.getOptions((opts) => {
                    // now the manifest data is available in custom data for all windows except the service manager window (i.e. the first window)
                    if (opts.customData && opts.customData.manifest) {
                        Logger.system.debug("Router Init using custom data");
                        processManifest(opts.customData.manifest);
                    }
                    else {
                        configUtil_1.ConfigUtilInstance.getExpandedRawManifest(function (manifest) {
                            Logger.system.debug("Router Init using getExpandedRawManifest");
                            if (Globals.FinsembleUUID) {
                                manifest.finsemble.FinsembleUUID = Globals.FinsembleUUID; // every window except serviceManager has FinsembleUUID -- this case covers the service manager,
                            }
                            processManifest(manifest);
                        }, function (err) {
                            Logger.system.error("WINDOW LIFECYCLE:STARTUP:RouterClient:manifest error", err);
                        });
                    }
                }, function (err) {
                    Logger.system.error("WINDOW LIFECYCLE:STARTUP:finWindow.getOptions error", err);
                });
            }
        });
    }
    // connects to event-router service. will retry various ways if needed
    function asyncConnectToEventRouter(manifest, clientName, transportName, onReadyCallBack) {
        var transportNotSpecified = (typeof (transportName) === "undefined");
        var myTimer;
        var myRetryCounter;
        var isFinished = false;
        var handshakeFailedCount = 0;
        var finConfig = manifest.finsemble;
        var isElectron = fin && fin.container == "Electron";
        var routerParams = {
            FinsembleUUID: finConfig.FinsembleUUID,
            applicationRoot: finConfig.applicationRoot,
            routerDomainRoot: finConfig.moduleRoot,
            forceWindowTransport: configUtil_1.ConfigUtilInstance.getDefault(finConfig, "finConfig.router.forceWindowTransport", {}),
            sameDomainTransport: configUtil_1.ConfigUtilInstance.getDefault(finConfig, "finConfig.router.sameDomainTransport", "SharedWorker"),
            crossDomainTransport: configUtil_1.ConfigUtilInstance.getDefault(finConfig, "finConfig.router.crossDomainTransport", isElectron ? "FinsembleTransport" : "OpenFinBus"),
            transportSettings: configUtil_1.ConfigUtilInstance.getDefault(finConfig, "finConfig.router.transportSettings", {})
        };
        function getClientTransport() {
            Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient:getClientTransport", "ROUTER PARAMS:", routerParams);
            if (transportNotSpecified) {
                transport = routerTransport_1.default.getRecommendedTransport(routerParams, incomingMessageHandler, clientName, "RouterService")
                    .then(transportReady)
                    .catch(errHandler);
            }
            else { // tranport specified...typically only for regression testing
                transport = routerTransport_1.default.getTransport(routerParams, transportName, incomingMessageHandler, clientName, "RouterService")
                    .then(transportReady)
                    .catch(errHandler);
            }
        }
        function transportReady(transportObj) {
            myRetryCounter = 0;
            Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient:transport ready", "TRANSPORT OBJECT", transportObj);
            transport = transportObj;
            handshakeHandler = finished; // set function to receive handshake response
            sendHandshake();
            myTimer = setInterval(sendHandshake, 200); // start time to retry if response not recieved back from router service
        }
        function handshakeFailedHandler() {
            clearInterval(myTimer);
            handshakeFailedCount++;
            if (handshakeFailedCount <= 3) {
                Logger.system.error("WINDOW LIFECYCLE:STARTUP:RouterClient: failure to connect to router service. Retrying...", handshakeFailedCount, routerParams);
                getClientTransport();
            }
            else {
                let failureMessage = `Router ${transport.identifier()} failure for window ${window.name} after multiple retries.`;
                Logger.system.error(failureMessage, routerParams);
                let notificationURL = configUtil_1.ConfigUtilInstance.getDefault(finConfig, "finConfig.notificationURL", finConfig.moduleRoot + "/components/system/notification/notification.html");
                userNotification_1.default.alert("dev", "ONCE-SINCE-STARTUP", "FSBL-Internal-Transport-Failure", failureMessage, { url: notificationURL });
            }
        }
        function sendHandshake() {
            Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient: sendHandshake", myRetryCounter);
            sendToRouterService(new InitialHandshakeMessage());
            if (myRetryCounter++ > 50) {
                handshakeFailedHandler();
            }
        }
        function finished() {
            if (!isFinished) { // ensure only invoked once
                Logger.system.debug("WINDOW LIFECYCLE:STARTUP:RouterClient connected: Starting " + clientName + " with transport " + transport.identifier());
                isFinished = true;
                clearInterval(myTimer);
                if (queue) { // this should not happen with proper startup order, which waits on routerClient to be ready
                    for (var i = 0; i < queue.length; i++) {
                        Logger.system.debug("RouterClient: firing queued msg");
                        var msg = queue[i];
                        transport.send(msg);
                    }
                }
                // notify initialization is complete
                if (onReadyCallBack) {
                    onReadyCallBack();
                }
            }
        }
        function errHandler(errorMessage) {
            Logger.system.error("RouterClientError", errorMessage);
        }
        // main code for this asyncConnectToEventRouter function -- only executed once
        getClientTransport();
    }
    // provides unique id within one router client for queries
    function clientID() {
        return clientName + "." + (++Globals.FSBLData.clientIDCounter);
    }
    // returns true if this routerClient originated the message
    function originatedHere() {
        return this.header.origin === this.header.lastClient;
    }
    // invoke client callbacks in the input array (that are attached to a specific channel and listener type)
    function invokeListenerCallbacks(map, message) {
        var originalClientCallbackArray = map[message.header.channel] || {};
        var clientCallbackArray = [];
        if (clientCallbackArray === undefined) {
            Logger.system.warn("RouterClient: no listener for incoming transmit on channel " + message.header.channel + " from " + message.header.origin, message);
        }
        else {
            message.originatedHere = originatedHere; // add local function to test origin
            //@note, have to operate off of a copy because a callback may call removeListener, which will modify map[message.header.channel].
            originalClientCallbackArray.forEach(cb => {
                clientCallbackArray.push(cb);
            });
            for (var i = 0; i < clientCallbackArray.length; i++) { // for each callback defined for the channel
                if (!Logger.isLogMessage(message.header.channel)) { // logger messages
                    Logger.system.info("RouterClient: incoming transmit", "CHANNEL", message.header.channel, "FROM", message.header.origin, "MESSAGE", message);
                }
                clientCallbackArray[i](null, message); // invoke the callback; the error parameter is always null for this case
            }
        }
    }
    function sendQueryResponse(err, responseData) {
        //@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.
        Logger.system.info("RouterClient: outgoing query response", "CHANNEL", this.header.channel, "RESPONSE DATA", responseData, "QUERY ID", this.header.queryID);
        sendToRouterService(new QueryResponseMessage(this.header.queryID, err, responseData));
    }
    // invoke responder-listener callback (attached to a specific channel)
    function invokeResponderCallback(map, queryMessage) {
        var responderCallback = map[queryMessage.header.channel];
        if (responderCallback === undefined) {
            Logger.system.warn("RouterClient: no query responder define on channel " + queryMessage.header.channel + " incoming from " + queryMessage.header.origin, queryMessage);
            responderCallback(null, queryMessage); // invoke the callback (no error), queryMessage);
        }
        else {
            if (!queryMessage.header.error) {
                queryMessage.originatedHere = originatedHere; // add local function to test origin
                queryMessage.sendQueryResponse = sendQueryResponse.bind(queryMessage); // add callback function to message so responder can respond to query
                Logger.system.info("RouterClient: incoming query", "CHANNEL", queryMessage.header.channel, "FROM", queryMessage.header.origin, "QUERY MESSAGE", queryMessage);
                responderCallback(null, queryMessage); // invoke the callback (no error)
            }
            else { // invoke the callback with error since  flag in message (from router service)
                Logger.system.warn("RouterClient: queryResponder error", queryMessage);
                responderCallback(queryMessage.header.error, null);
                delete map[queryMessage.header.channel]; // this is a bad responder (e.g. duplicate) so remove it
            }
        }
    }
    // add a callbackHandler into the query-response map for the given queryID
    function addQueryResponseCallBack(map, queryID, responseCallback) {
        map[queryID] = responseCallback;
    }
    // add timer to wait for query response
    function addQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID, channel, timeout) {
        if (timeout > 0) {
            mapQueryResponseTimeOut[newQueryID] = setTimeout(function () {
                Logger.system.warn("RouterClient: timeout waiting on query response on channel " + channel + " for queryID " + newQueryID +
                    " on timer " + mapQueryResponseTimeOut[newQueryID] + " timeout=" + timeout);
            }, timeout);
        }
    }
    // delete timer waiting on query response (if it exists)
    function deleteQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID) {
        var theTimer = mapQueryResponseTimeOut[newQueryID];
        if (theTimer !== undefined) {
            clearTimeout(theTimer);
        }
    }
    // invoke query-response callback (that is attached to a specific channel and listener type)
    function invokeQueryResponseCallback(map, responseMessage) {
        var clientCallback = map[responseMessage.header.queryID];
        if (clientCallback === undefined) {
            Logger.system.warn("RouterClient: no handler for incoming query response", "QUERY ID", responseMessage.header.queryID);
        }
        else {
            // delete any existing timer waiting on the response
            deleteQueryResponseTimeout(mapQueryResponseTimeOut, responseMessage.header.queryID);
            if (!responseMessage.header.error) {
                //@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.
                Logger.system.info("RouterClient: incoming query response", "RESPONSE MESSAGE", responseMessage, "QUERY ID", responseMessage.header.queryID);
                clientCallback(null, responseMessage); // invoke the callback passing the response message
            }
            else {
                Logger.system.warn("RouterClient: incoming queryResponse error", responseMessage.header, "QUERY ID", responseMessage.header.queryID);
                clientCallback(responseMessage.header.error, responseMessage); // error from router service so pass it back instead of a message
            }
            delete map[responseMessage.header.queryID];
        }
    }
    // add responder callbackHandler for the given channel
    function addResponderCallBack(map, channel, callback) {
        var status = false;
        var clientCallback = map[channel];
        if (clientCallback === undefined) {
            map[channel] = callback;
            status = true;
        }
        return status;
    }
    // support function for sendNotifyToSubscriber -- maintains local list of subscribers for pubsub responder
    function addToPubSubListOfSubscribers(pubsubListOfSubscribers, topic, subscribeID) {
        if (!(topic in pubsubListOfSubscribers)) {
            pubsubListOfSubscribers[topic] = [subscribeID];
        }
        else {
            pubsubListOfSubscribers[topic].push(subscribeID);
        }
    }
    // support function for addPubSubResponder -- add pubsub responder callbackHandler for the given channel
    function addPubSubResponderCallBack(topic, subscribeCallback, publishCallback, unsubscribeCallback) {
        var status = false;
        var callbacks = mapPubSubResponders[topic.toString()];
        if (callbacks === undefined) {
            if (topic instanceof RegExp) {
                mapPubSubResponderRegEx[topic.toString()] = topic;
                Logger.system.info("RouterClient: PubSub RegEx added for topic " + topic.toString()); // Note: topic may be a RegEx, so use toString() where applicable
            }
            mapPubSubResponders[topic.toString()] = { "subscribeCallback": subscribeCallback, "publishCallback": publishCallback, "unsubscribeCallback": unsubscribeCallback };
            status = true;
        }
        return status;
    }
    // callback function for invokeSubscribePubSubCallback to notify new subscriber
    function sendNotifyToSubscriber(err, notifyData) {
        //@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.
        sendToRouterService(new NotifyMessage(this.header.subscribeID, this.header.topic, err, notifyData));
        if (!err) {
            // add new subscriber to list
            addToPubSubListOfSubscribers(pubsubListOfSubscribers, this.header.topic, this.header.subscribeID);
            Logger.system.info("RouterClient: incoming subscription added", "TOPIC", this.header.topic, "MESSAGE", this);
        }
        else {
            Logger.system.warn("RouterClient: incoming subscription rejected by pubsub responder", "TOPIC", this.header.topic, "MESSAGE", this);
        }
    }
    // for incoming subscribe: invoke notify callback for pubsub responder
    function invokeSubscribePubSubCallback(subscribeMessage) {
        var callbacks = mapPubSubResponders[subscribeMessage.header.topic];
        //@todo consider removing this log. Why log it? Why not log it _onlY_ if the dev wants a particular message logged. This can cause problems.
        if (callbacks === undefined) { // if undefined then may be a matching RegEx topic
            for (var key in mapPubSubResponderRegEx) {
                if (mapPubSubResponderRegEx[key].test(subscribeMessage.header.topic)) {
                    callbacks = mapPubSubResponders[key];
                    var initialState = mapPubSubResponderState[subscribeMessage.header.topic]; // may already be initial state defined from publish
                    if (initialState === undefined) { // if there isn't already state defined then use default from regEx
                        initialState = mapPubSubResponderState[key]; // initialize the state from RegEx topic
                    }
                    mapPubSubResponderState[subscribeMessage.header.topic] = initialState;
                    break;
                }
            }
        }
        if (callbacks === undefined) { // if still undefined
            Logger.system.warn("RouterClient: no pubsub responder defined for incoming subscribe", subscribeMessage);
        }
        else {
            if (subscribeMessage.header.error) { // the router service uses the subscribe message in this case to return a pubsub error (ToDO: consider a generic error message)
                Logger.system.warn("RouterClient: pubsub error received from router service: " + JSON.stringify(subscribeMessage.header.error));
            }
            else {
                subscribeMessage.sendNotifyToSubscriber = sendNotifyToSubscriber; // add callback function to message so pubsub responder can respond with Notify message
                if (callbacks.subscribeCallback) {
                    subscribeMessage.data = mapPubSubResponderState[subscribeMessage.header.topic];
                    callbacks.subscribeCallback(null, subscribeMessage); // invoke the callback (no error)
                }
                else { // since no subscribe callback defined, use default functionality
                    subscribeMessage.sendNotifyToSubscriber(null, mapPubSubResponderState[subscribeMessage.header.topic]); // must invoke from message to set this properly
                }
            }
        }
    }
    // support function for removeSubscriber callback --  remove one subscribeID from array for the given subscription topic
    function removeFromPubSubListOfSubscribers(pubsubListOfSubscribers, topic, subscribeID) {
        var removed = false;
        if (topic in pubsubListOfSubscribers) {
            var list = pubsubListOfSubscribers[topic];
            for (var i = 0; i < list.length; i++) {
                if (subscribeID === list[i]) {
                    list.splice(i, 1);
                    if (list.length === 0) {
                        delete pubsubListOfSubscribers[topic];
                    }
                    removed = true;
                    Logger.system.info("RouterClient: PubSub removeListener", "TOPIC", topic, "FROM", subscribeID);
                    break;
                }
            }
        }
        if (!removed) {
            Logger.system.warn("RouterClient: tried to remove non-existant listener on " + topic + " from " + JSON.stringify(subscribeID));
        }
    }
    // callback function for invokeUnsubscribePubSubCallback to remove the subscriber from the subscription
    function removeSubscriber() {
        removeFromPubSubListOfSubscribers(pubsubListOfSubscribers, this.header.topic, this.header.subscribeID);
    }
    // for incoming unsubscribe: invoke unsubscribe callback for pubsub servier
    function invokeUnsubscribePubSubCallback(unsubscribeMessage) {
        var callbacks = mapPubSubResponders[unsubscribeMessage.header.topic];
        if (callbacks === undefined) { // if undefined then may be a matching RegEx topic
            for (var key in mapPubSubResponderRegEx) {
                if (mapPubSubResponderRegEx[key].test(unsubscribeMessage.header.topic)) {
                    callbacks = mapPubSubResponders[key];
                    break;
                }
            }
        }
        if (callbacks === undefined) { // if still undefined
            Logger.system.warn("RouterClient: no pubsub responder defined for incoming unsubscribe", "TOPIC", unsubscribeMessage.header.topic, "UNSUBSCRIBE MESSAGE", unsubscribeMessage);
        }
        else {
            unsubscribeMessage.removeSubscriber = removeSubscriber; // add callback function to message for pubsub responder (but must always remove)
            if (callbacks.unsubscribeCallback) {
                Logger.system.info("RouterClient: incoming unsubscribe callback", "TOPIC", unsubscribeMessage.header.topic, "UNSUBSCRIBE MESSAGE", unsubscribeMessage);
                callbacks.unsubscribeCallback(null, unsubscribeMessage); // invoke the callback (no error)
            }
            else { // since no unsubscribe callback defined, use default functionality
                Logger.system.info("RouterClient: incoming unsubscribe", "TOPIC", unsubscribeMessage.header.topic, "UNSUBSCRIBE MESSAGE", unsubscribeMessage);
                unsubscribeMessage.removeSubscriber();
            }
        }
    }
    // callback function for invokePublishPubSubCallback to send Notify
    function sendNotifyToAllSubscribers(err, notifyData) {
        if (!err) {
            mapPubSubResponderState[this.header.topic] = notifyData; // store new state
            var listOfSubscribers = pubsubListOfSubscribers[this.header.topic];
            if (typeof (listOfSubscribers) !== "undefined") { // confirm subscribers to send to, if none then nothing to do
                for (var i = 0; i < listOfSubscribers.length; i++) {
                    Logger.system.info("RouterClient: sending pubsub notify", "TOPIC", this.header.topic, "NOTIFY DATA", notifyData);
                    sendToRouterService(new NotifyMessage(listOfSubscribers[i], this.header.topic, err, notifyData));
                }
            }
        }
        else {
            Logger.system.warn("RouterClient: income publish rejected by pubsub responder", err, notifyData);
        }
    }
    // for incoming Publish: invoke publish callback for pubsub servier
    function invokePublishPubSubCallback(publishMessage) {
        var callbacks = mapPubSubResponders[publishMessage.header.topic];
        if (callbacks === undefined) { // if undefined then may be a matching RegEx topic
            for (var key in mapPubSubResponderRegEx) {
                if (mapPubSubResponderRegEx[key].test(publishMessage.header.topic)) {
                    callbacks = mapPubSubResponders[key];
                    break;
                }
            }
        }
        if (callbacks === undefined) { // if still undefined
            Logger.system.warn("RouterClient: no pubsub responder defined for incoming publish", "TOPIC", publishMessage.header.topic, "PUBLISH MESSAGE", publishMessage);
        }
        else {
            publishMessage.sendNotifyToAllSubscribers = sendNotifyToAllSubscribers; // add callback function to message so pubsub responder can respond to publish
            if (callbacks.publishCallback) {
                Logger.system.info("RouterClient: incoming PubSub publish callback invoked", "TOPIC", publishMessage.header.topic, "PUBLISH MESSAGE", publishMessage);
                callbacks.publishCallback(null, publishMessage); // invoke the callback (no error)
            }
            else { // since no pubish callback defined, use default functionality
                Logger.system.info("RouterClient: incoming PubSub publish", "TOPIC", publishMessage.header.topic, "PUBLISH MESSAGE", publishMessage);
                publishMessage.sendNotifyToAllSubscribers(null, publishMessage.data); // must call from publish message (like a callback) so 'this' is properly set
            }
        }
    }
    // for incoming Notify: invoke notify callback (that are attached to a specific channel and listener type)
    function invokeNotifyCallback(mapSubscribersID, notifyMessage) {
        var notifyCallback = mapSubscribersID[notifyMessage.header.subscribeID];
        if (notifyCallback === undefined) {
            Logger.system.warn("RouterClient: no subscription handler defined for incoming notify for subscriberID", notifyMessage.header.subscribeID, notifyMessage);
        }
        else {
            if (!notifyMessage.header.error) {
                notifyMessage.originatedHere = originatedHere; // add local function to test origin
                Logger.system.info("RouterClient: incoming PubSub notify", "SUBSCRIBER ID", notifyMessage.header.subscribeID, "NOTIFY MESSAGE", notifyMessage);
                notifyCallback(null, notifyMessage); // invoke the callback passing the response message
            }
            else {
                Logger.system.info("RouterClient: incoming PubSub notify error for subscriberID", "SUBSCRIBER ID", notifyMessage.header.subscribeID, "NOTIFY MESSAGE", notifyMessage);
                notifyCallback(notifyMessage.header.error, notifyMessage); // error from router service so pass it back instead of a message
            }
        }
    }
    // outgoing Unsubscribe: remove subscriber callbackHandler for the given channel
    function removeSubscriberCallBack(mapSubscribersID, subscribeID) {
        var status = false;
        var notifyCallback = mapSubscribersID[subscribeID];
        if (notifyCallback !== undefined) {
            delete mapSubscribersID[subscribeID];
            status = true;
        }
        return status;
    }
    // for outgoing addSubscriber -- add a callback Handler for the subscribe
    function addSubscriberCallBack(mapSubscribersID, subscribeID, notifyCallback, topic) {
        mapSubscribersID[subscribeID] = notifyCallback;
        mapSubscribersTopic[subscribeID] = topic;
    }
    // for removePubSubResponder: remove responder callbackHandler for the given channel
    function removeResponderCallBack(map, channel) {
        var status = false;
        var clientCallback = map[channel];
        if (clientCallback !== undefined) {
            delete map[channel];
            status = true;
        }
        return status;
    }
    // for addListener: add a callbackHandler into the specified map (which depends on listener type) for the given channel
    function addListenerCallBack(map, channel, callback) {
        var firstChannelClient = false;
        var clientCallbackArray = map[channel];
        if (clientCallbackArray === undefined || clientCallbackArray.length === 0) {
            map[channel] = [callback];
            firstChannelClient = true;
        }
        else {
            clientCallbackArray.push(callback);
        }
        return firstChannelClient;
    }
    // for removeListener: remove a callbackHandler from the specified map (which depends on listener type) for the given channel
    function removeListenerCallBack(map, channel, callback) {
        var lastChannelClient = false;
        var clientCallbackArray = map[channel];
        if (clientCallbackArray !== undefined) {
            var index = clientCallbackArray.indexOf(callback);
            if (index > -1) {
                clientCallbackArray.splice(index, 1);
                if (clientCallbackArray.length === 0) {
                    lastChannelClient = true;
                }
            }
            else {
                Logger.system.warn("no listener defined for channel: " + channel);
            }
        }
        return lastChannelClient;
    }
    // route incoming message to appropriate callback, which depends on the message type and channel
    function routeIncomingMessage(incomingMessage) {
        Logger.system.verbose("Incoming Message Type", incomingMessage.header.type, incomingMessage);
        switch (incomingMessage.header.type) {
            case "transmit":
                invokeListenerCallbacks(mapListeners, incomingMessage);
                break;
            case "query":
                invokeResponderCallback(mapResponders, incomingMessage);
                break;
            case "queryResponse":
                invokeQueryResponseCallback(mapQueryResponses, incomingMessage);
                break;
            case "notify":
                invokeNotifyCallback(mapSubscribersID, incomingMessage);
                break;
            case "publish":
                invokePublishPubSubCallback(incomingMessage);
                break;
            case "subscribe":
                invokeSubscribePubSubCallback(incomingMessage);
                break;
            case "unsubscribe":
                invokeUnsubscribePubSubCallback(incomingMessage);
                break;
            case "timeCalibration":
                timeCalibrationHandler(incomingMessage);
                break;
            case "initialHandshakeResponse":
                handshakeHandler();
                break;
            default:
        }
    }
    // *** all incoming messages from underlying transport arrive here ***
    // although incoming transport information is available, it is not passed on because not needed
    function incomingMessageHandler(incomingTransportInfo, message) {
        // ToDo: good place to put a function to validate incoming message/data
        message.header.lastClient = clientName; // add last client for diagnostics
        message.header.incomingTransportInfo = incomingTransportInfo;
        routeIncomingMessage(message);
    }
    // *** all outbound messages exit here though the appropriate transport ***
    function sendToRouterService(message) {
        if (!transport || (transport instanceof Promise)) {
            Logger.system.warn("RouterClient: Queuing message since router initialization not complete", message);
            queue.push(message);
        }
        else {
            transport.send(message);
        }
    }
    /**
     * Estimates offset to align the reference time with Router Service.  Does this by exchanging messages with RouterService, getting the service's time, and estimating communication delay.
     *
     * @private
     */
    this.calibrateTimeWithRouterService = function (callback) {
        const TARGET_HANDSHAKE_COUNT = 5;
        var handshakeCounter = 0;
        var timeOffset;
        var offsetForFastest;
        var fastestRRT = Infinity;
        function calibrationCalculation(finalHandshakeMessage) {
            var timeOffset = 0;
            for (var i = 1; i < TARGET_HANDSHAKE_COUNT; i++) {
                var startClientTime = finalHandshakeMessage.clientBaseTime[i - 1];
                var stopClientTime = finalHandshakeMessage.clientBaseTime[i];
                var rtt = stopClientTime - startClientTime; // round-trip time
                var serviceTime = finalHandshakeMessage.serviceBaseTime[i - 1];
                var offset = serviceTime - (startClientTime + (rtt / 2));
                if (rtt < fastestRRT) {
                    fastestRRT = rtt;
                    offsetForFastest = offset;
                }
                timeOffset += offset;
                Logger.system.debug("calibrationCalculation Intermediate Values", "lastRRT", rtt, "lastOffset", offset, "fastestOffset", offsetForFastest, "fastestRRT", fastestRRT);
            }
            timeOffset /= (TARGET_HANDSHAKE_COUNT - 1);
            Logger.system.debug("RouterClient calibrationCalculation", "Average Offset", timeOffset, "Choosen FastestOffset", offsetForFastest, finalHandshakeMessage);
            callback(offsetForFastest); // use the offset with the shortest RTT since it is often the most accurate
        }
        function timeCalibrationHandlerFunction(message) {
            handshakeCounter++;
            if (handshakeCounter > TARGET_HANDSHAKE_COUNT) {
                calibrationCalculation(message); // enough handshake data gather, so do the calibration
            }
            else {
                message.clientBaseTime.push(window.performance.timing.navigationStart + window.performance.now());
                sendToRouterService(new TimeCalibrationHandshakeMessage(message.clientBaseTime, message.serviceBaseTime));
            }
        }
        timeCalibrationHandler = timeCalibrationHandlerFunction; // used in routeIncomingMessage to route handshake response back to handler
        timeCalibrationHandler(new TimeCalibrationHandshakeMessage([], [])); // invoke first time to start exchanging handshakes; will be invoked each time handshake message received back from FouterService
    };
    /**
     * Backward compatibility?
     * @private
     */
    this.ready = (cb) => this.onReady(cb);
    /**
 * Get router client name.
 *
 * @param {string} newClientName string identify the client
 * FSBL.Clients.RouterClient.setClientName("MyComponent");
 * @private
 */
    this.getClientName = function () {
        Logger.system.debug("RouterClient.getClientName", clientName);
        return clientName;
    };
    /////////////////////////////////////////////
    // Public Functions -- The Router Client API
    /////////////////////////////////////////////
    /**
     * Checks if router is ready. May be invoked multiple times. Invokes cb when ready, which may be immediately.  Router is not ready until underlying transport to router service is ready.
     *
     * @param {function} cb callback function to invoke when router is ready
     */
    this.onReady = function (cb) {
        validate_1.default.args(cb, "function");
        if (isRouterReady) {
            cb();
        }
        else {
            parentReadyCallbackQueue.push(cb);
        }
    };
    /**
     * Add listener for incoming transmit events on specified channel. Each of the incoming events will trigger the specified event handler. The number of listeners is not limited (either local to this Finsemble window or in a separate Finsemble window).
     *
     * See [transmit]{@link RouterClientConstructor#transmit} for sending a cooresponding event message to listener. See [removeListener]{@link RouterClientConstructor#removeListener} to remove the listener.
     *
     * @param {string} channel any unique string to identify the channel (must match correspond transmit channel name)
     * @param {function} eventHandler function (see example below)
     * @example
     *
     * FSBL.Clients.RouterClient.addListener("SomeChannelName", function (error, response) {
            if (error) {
                Logger.system.log("ChannelA Error: " + JSON.stringify(error));
            } else {
                var data = response.data;
                Logger.system.log("ChannelA Response: " + JSON.stringify(response));
            }
     * });
     *
     */
    this.addListener = function (channel, eventHandler) {
        Logger.system.info("RouterClient.addListener", "CHANNEL", channel);
        validate_1.default.args(channel, "string", eventHandler, "function");
        var firstChannelClient = addListenerCallBack(mapListeners, channel, eventHandler);
        if (firstChannelClient) {
            sendToRouterService(new AddListenerMessage(channel));
        }
    };
    /**
     * Transmit event to all listeners on the specified channel. If no listeners the event is discarded without error. All listeners to the channel in this Finsemble window and other Finsemble windows will receive the transmit.
     *
     * See [addListener]{@link RouterClientConstructor#addListener} to add a listener to receive the transmit.
     *
     * @param {string} toChannel any unique string to identify the channel (must match correspond listener channel name)
     * @param {any} event any object or primitive type to be transmitted
     * @param {object} [options] Options object for your transmit
     * @param {boolean} [options.suppressWarnings=false] By default, the Router will log warnings if you transmit to a channel with no listeners. Set this to true to eliminate those warnings.
     * @example
     *
     * FSBL.Clients.RouterClient.transmit("SomeChannelName", event);
     *
     */
    this.transmit = function (toChannel, event, options = { suppressWarnings: false }) {
        if (!Logger.isLogMessage(toChannel)) { // logger messages
            Logger.system.info("RouterClient.transmit", "TO CHANNEL", toChannel, "EVENT", event);
        }
        validate_1.default.args(toChannel, "string", event, "any");
        sendToRouterService(new TransmitMessage(toChannel, event, options));
    };
    /* @TODO - This works via object reference - it relies on the physical pointer to the function object originally passed in.
    This is very confusing, and not idiomatic. Moreover, it entirely prevents a user from using anonymous functions, which will fall
    quite unexpected if the user isn't prepared. A better API would be to pass in some unique ID, or have a unique ID automatically generated,
    that could then be passed to this function, e.g:

    RouterClient.addlistener('some-channel', 'my-unique-listener-id', () => { });
    RouterClient.removeListener('some-channel', 'my-unique-listeenr-id');*/
    /**
     * Remove event listener from specified channel for the specific event handler (only listeners created locally can be removed).
     *
     * See [addListener]{@link RouterClientConstructor#addListener} for corresponding add of a listener.
     *
     * @param {string} channel unique channel name to remove listener from
     * @param {function} eventHandler function used for the event handler when the listener was added
     */
    this.removeListener = function (channel, eventHandler) {
        Logger.system.info("RouterClient.removelistener", "CHANNEL", channel, "EVENT HANDLER", eventHandler);
        validate_1.default.args(channel, "string", eventHandler, "function");
        var lastChannelListener = removeListenerCallBack(mapListeners, channel, eventHandler);
        if (lastChannelListener) {
            sendToRouterService(new RemoveListenerMessage(channel));
        }
    };
    /**
     * Add a query responder to the specified channel. The responder's queryEventHander function will receive all incoming queries for the specified channel (whether from this Finsemble window or remote Finsemble windows).
     *
     * *Note:* Only one responder is allowed per channel within the Finsemble application.
     *
     * See [query]{@link RouterClientConstructor#query} for sending a corresponding query-event message to this responder.
     *
     * @param {string} channel any unique string to identify the channel (must match correspond query channel name); only one responder allower per channel
     * @param {function} queryEventHandler function to handle the incoming query (see example below); note incoming queryMessage contains function to send response
     * @example
     *
     * FSBL.Clients.RouterClient.addResponder("ResponderChannelName", function (error, queryMessage) {
     *	if (error) {
     *		Logger.system.log('addResponder failed: ' + JSON.stringify(error));
     *	} else {
            console.log("incoming data=" + queryMessage.data);
            var response="Back at ya"; // Responses can be objects or strings
     *		queryMessage.sendQueryResponse(null, response); // A QUERY RESPONSE MUST BE SENT OR THE REMOTE SIDE WILL HANG
     *	}
     * });
     *
     */
    this.addResponder = function (channel, queryEventHandler) {
        Logger.system.info("RouterClient.addResponder", "CHANNEL", channel);
        validate_1.default.args(channel, "string", queryEventHandler, "function");
        var status = addResponderCallBack(mapResponders, channel, queryEventHandler);
        if (status) {
            sendToRouterService(new addResponderMessage(channel));
        }
        else {
            Logger.system.warn("RouterClient.addResponder: Responder already locally defined for channel " + channel);
            queryEventHandler({
                "RouteClient QueryError": "Responder already locally defined for channel" + channel
            }, null); // immediately invoke callback passing error
        }
    };
    /**
     * Send a query to responder listening on specified channel. The responder may be in this Finsemble window or another Finsemble window.
     *
     * See [addResponder]{@link RouterClientConstructor#addResponder} to add a responder to receive the query.
     *
     * @param {string} responderChannel a unique string that identifies the channel (must match the channel name on which a responder is listening)
     * @param {object} queryEvent event message sent to responder
     * @param {any} params optional params
     * @param {number} [params.timeout=20000]  timeout value for a query-response timer.  Timer defaults to 5000 milliseconds if no params value is passed in. Set timeout to zero to wait indefinitely. If the timer expires, this function call will return with an error.
     * @param {function} responseEventHandler event handler to receive the query response (sent from a responder that is listening on this channel)
     *
     * @example
     *
     * FSBL.Clients.RouterClient.query("someChannelName", {}, function (error, queryResponseMessage) {
     *	if (error) {
     *		Logger.system.log('query failed: ' + JSON.stringify(error));
     *	} else {
     *		// process income query response message
     *		var responseData = queryResponseMessage.data;
     *		Logger.system.log('query response: ' + JSON.stringify(queryResponseMessage));
     *	}
     * });
     *
     * FSBL.Clients.RouterClient.query("someChannelName", { queryKey: "abc123"}, { timeout: 1000 }, function (error, queryResponseMessage) {
     *	if (!error) {
     *		// process income query response message
     *		var responseData = queryResponseMessage.data;
     *	}
     * }); */
    this.query = function (responderChannel, queryEvent, params, responseEventHandler = Function.prototype) {
        var newQueryID = `${clientID()}.${responderChannel}`;
        var timestamp = window.performance.timing.navigationStart + window.performance.now();
        var navstart = window.performance.timing.navigationStart;
        var timenow = window.performance.now(); // these timer values used for logging diagnostices
        Logger.system.info("RouterClient.query", "RESPONDER CHANNEL", responderChannel, "QUERY EVENT", queryEvent, "PARAMS", params, "QUERYID", newQueryID, { timestamp, navstart, timenow });
        if (arguments.length === 3) {
            responseEventHandler = params;
            params = { timeout: 20000 };
        }
        validate_1.default.args(responderChannel, "string", queryEvent, "any=", params, "object=", responseEventHandler, "function");
        params = params || {};
        validate_1.default.args2("params.timeout", params.timeout, "number");
        function promiseResolver(resolve) {
            //Allows us to await on queries, cleaning up code quite a bit.
            const modifiedHandler = (err, response) => {
                resolve({ err, response });
                responseEventHandler(err, response);
            };
            addQueryResponseCallBack(mapQueryResponses, newQueryID, modifiedHandler);
            addQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID, responderChannel, params.timeout);
            sendToRouterService(new QueryMessage(newQueryID, responderChannel, queryEvent));
        }
        return new Promise(promiseResolver);
    };
    /**
     * Remove query responder from specified channel. Only a locally added responder can be removed (i.e. a responder defined in the same component or service).
     *
     * See [addResponder]{@link RouterClientConstructor#addResponder} for corresponding add of a query responder.
     *
     * @param {string} responderChannel string identifying the channel to remove responder from
     *
     * @example
     *
     * FSBL.Clients.RouterClient.removeResponder("someChannelName");
     *
     */
    this.removeResponder = function (responderChannel) {
        Logger.system.info("RouterClient.removeResponder", "RESPONDER CHANNEL", responderChannel);
        validate_1.default.args(responderChannel, "string");
        var status = removeResponderCallBack(mapResponders, responderChannel);
        if (status) {
            sendToRouterService(new RemoveResponderMessage(responderChannel));
        }
    };
    /**
     * Add a PubSub responder for specified topic. All subscribes and publishes to the topic will comes to responder (whether from local window or another window). Only one PubSub responder allowed per topic value in Finsemble application; however, the topic value may be a regular-expression representing a set of related topics, in which case the PubSub responder will responder to all matching topics. When a regEx topic is used, the same default functionality is provides for each matching topic -- the difference is only one PubSub responder is needed to cover a set of related topics, plus the same callback handers can be used (if provided).
     *
     * All the callback function are optional because each PubSub responder comes with build-in default functionality (described below).
     *
     * Note an exact topic match will take precedence over a regEx match, but otherwise results are unpredictable for overlapping RegEx topics.
     *
     * See [subscribe]{@link RouterClientConstructor#subscribe} and [publish]{@link RouterClientConstructor#publish} for corresponding functions sending to the PubSub responder.
     *
     * @param {string} topic unique topic for this responder, or a topic RegEx (e.g. '/abc.+/') to handle a set of topics
     * @param {object} [initialState] initial state for the topic (defaults to empty struct); can be any object
     * @param {object} [params] optional parameters
     * @param {function} [params.subscribeCallback] allows responder know of incoming subscription and accept or reject it (default is to accept)
     * @param {function} [params.publishCallback] allows responder to use the publish data to form a new state (default is the publish data becomes the new state)
     * @param {function} [params.unsubscribeCallback] allows responder to know of the unsubscribe, but it must be accepted (the default accepts)
     * @param {function} [callback] optional callback(err,res) function. If addPubSubResponder failed then err set; otherwise, res set to "success"
     *
     * @example
     *
     * function subscribeCallback(error, subscribe) {
     * 	if (subscribe) {
     * 		// must make this callback to accept or reject the subscribe (default is to accept). First parm is err and second is the initial state
     * 		subscribe.sendNotifyToSubscriber(null, { "NOTIFICATION-STATE": "One" });
     * 	}
     * }
     * function publishCallback(error, publish) {
     * 	if (publish) {
     * 		// must make this callback to send notify to all subscribers (if error parameter set then notify will not be sent)
     * 		publish.sendNotifyToAllSubscribers(null, publish.data);
     * 	}
     * }
     * function unsubscribeCallback(error, unsubscribe) {
     * 	if (unsubscribe) {
     * 		// must make this callback to acknowledge the unsubscribe
     * 		unsubscribe.removeSubscriber();
     * 	}
     * }
     * FSBL.Clients.RouterClient.addPubSubResponder("topicABC", { "State": "start" },
     * 	{
     * 		subscribeCallback:subscribeCallback,
     * 		publishCallback:publishCallback,
     * 		unsubscribeCallback:unsubscribeCallback
     * 	});
     *
     *   or
     *
     * FSBL.Clients.RouterClient.addPubSubResponder("topicABC", { "State": "start" });
     *
     *   or
     *
     * FSBL.Clients.RouterClient.addPubSubResponder(\/topicA*\/, { "State": "start" });
     *
     */
    this.addPubSubResponder = function (topic, initialState, params, callback) {
        var error;
        var response;
        Logger.system.info("RouterClient.addPubSubResponder", "TOPIC", topic, "INITIAL STATE", initialState, "PARAMS", params);
        validate_1.default.args(topic, "any", initialState, "object=", params, "object=");
        params = params || {};
        validate_1.default.args2("params.subscribeCallback", params.subscribeCallback, "function=", "params.publishCallback", params.publishCallback, "function=") &&
            validate_1.default.args2("params.unsubscribeCallback", params.unsubscribeCallback, "function=");
        var status = addPubSubResponderCallBack(topic, params.subscribeCallback, params.publishCallback, params.unsubscribeCallback);
        if (status) {
            initialState = initialState || {};
            mapPubSubResponderState[topic.toString()] = Utils.clone(initialState);
            sendToRouterService(new AddPubSubResponderMessage(topic.toString()));
            response = "success";
        }
        else {
            error = "RouterClient.addPubSubResponder: Responder already locally defined for topic " + topic;
            Logger.system.warn(error);
        }
        if (callback) {
            callback(error, response);
        }
    };
    /**
     * Remove pubsub responder from specified topic. Only locally created responders (i.e. created in local window) can be removed.
     *
     * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder.
     *
     * @param {string} topic unique topic for responder being removed (may be RegEx, but if so much be exact regEx used previously with addPubSubResponder)
     *
     * @example
     *
     * FSBL.Clients.RouterClient.removePubSubResponder("topicABC");
     *
     */
    this.removePubSubResponder = function (topic) {
        Logger.system.info("RouterClient.removePubSubResponder", "TOPIC", topic);
        validate_1.default.args(topic, "any");
        var status = removeResponderCallBack(mapPubSubResponders, topic);
        if (status) {
            delete mapPubSubResponderState[topic.toString()]; // remove corresponding state
            delete mapPubSubResponderRegEx[topic.toString()]; // may be a RegEx
            sendToRouterService(new RemovePubSubResponderMessage(topic));
        }
        else {
            Logger.system.warn("RouterClient.removePubSubResponder failed: Could not find responder for topic " + topic);
        }
    };
    /**
     * Subscribe to a PubSub Responder. Each responder topic can have many subscribers (local in this window or remote in other windows). Each subscriber immediately (but asyncronouly) receives back current state in a notify; new notifys are receive for each publish sent to the same topic.
     *
     * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder to handle the subscribe. See [publish]{@link RouterClientConstructor#publish} for corresponding publish to notify the subscriber.
     *
     * @param {string} topic topic being subscribed to
     * @param {function} notifyCallback invoked for each income notify for the given topic (i.e. initial notify plus for each publish)
     * @returns {object} subscribe-id optionally used for unsubscribing later
     *
     * @example
     *
     * var subscribeId = RouterClient.subscribe("topicABC", function(err,notify) {
     *		if (!err) {
     *			var notificationStateData = notify.data;
     *			// do something with notify data
     *  	}
     * });
     *
     */
    this.subscribe = function (topic, notifyCallback) {
        Logger.system.info("RouterClient.subscribe", "TOPIC", topic);
        validate_1.default.args(topic, "string", notifyCallback, "function");
        var subscribeID = clientID();
        addSubscriberCallBack(mapSubscribersID, subscribeID, notifyCallback, topic);
        sendToRouterService(new SubscribeMessage(subscribeID, topic));
        return { "subscribeID": subscribeID, "topic": topic };
    };
    /**
     * Publish to a PubSub Responder, which will trigger a corresponding Notify to be sent to all subscribers (local in this window or remote in other windows). There can be multiple publishers for a topic (again, in same window or remote windows)
     *
     * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder to handle the publish (i.e. sending notifications to all subscriber). See [Subscribe]{@link RouterClientConstructor#addPubSubResponder} for corresponding subscription to receive publish results (in the form of a notify event)
     *
     * @param {string} topic topic being published to
     * @param {object} event topic state to be published to all subscriber (unless the SubPub responder optionally modifies in between)
     *
     * @example
     *
     * FSBL.Clients.RouterClient.publish("topicABC", topicState);
     *
     */
    this.publish = function (topic, event) {
        Logger.system.info("RouterClient.publish", "TOPIC", topic, "EVENT", event);
        validate_1.default.args(topic, "string", event, "any");
        sendToRouterService(new PublishMessage(topic, event));
    };
    /**
     * Unsubscribe from PubSub responder so no more notifications received (but doesn't affect other subscriptions). Only works from the window the PubSub responder was created in.
     *
     * See [subscribe]{@link RouterClientConstructor#subscribe} for corresponding subscription being removed.
     *
     * @param {object} subscribeID the id return from the corresponding subscribe for the topic
     *
     * @example
     *
     * FSBL.Clients.RouterClient.unsubscribe(subscribeId);
     *
     */
    this.unsubscribe = function (subscribeIDStruct) {
        Logger.system.info("RouterClient.unsubscribe", "SUBSCRIBE ID", subscribeIDStruct);
        validate_1.default.args(subscribeIDStruct, "object") && validate_1.default.args2("subscribeIDStruct.subscribeID", subscribeIDStruct.subscribeID, "string");
        var deletedSubscriber = removeSubscriberCallBack(mapSubscribersID, subscribeIDStruct.subscribeID);
        if (deletedSubscriber) {
            sendToRouterService(new UnsubscribeMessage(subscribeIDStruct.subscribeID, subscribeIDStruct.topic));
        }
        else {
            Logger.system.warn("RouterClient.unsubscribe: Could not find subscribeID for topic " + subscribeIDStruct.topic);
        }
    };
    /**
     * Test an incoming router message to see if it originated from the same origin (e.g. a trusted source...not cross-domain). Currently same origin is known only because a sharedWorker transport is used (by definition SharedWorkers do not work cross-domain).  This means any message coming in over the Inter-application Bus will not be trusted; however, by default all same-origin components and services connect to the router using a SharedWorker transport.
     * @param {object} incomingMessage an incoming router message (e.g. transmit, query, notification) to test to see if trusted.
     *
     * @example
     * FSBL.Clients.RouterClient.trustedMessage(incomingRouterMessage);
     */
    this.trustedMessage = function (incomingMessage) {
        var isTrusted = true; // temporarily make all trusted so no problems if changing router transport
        Logger.system.debug("RouterClient.trustedMessage header", incomingMessage.header);
        if (incomingMessage.header.originIncomingTransportInfo.transportID === "SharedWorker") {
            isTrusted = true;
        }
        return isTrusted;
    };
    /*
     * @TODO: consider adding disconnectAllListerns(), disconnectAllResponders(), disconnectAllSubscribers()
    */
    /**
     * Removes all listeners, responders, and subscribers for this router client -- automatically called when client is shutting down. Can be called multiple times.
     */
    this.disconnectAll = function () {
        Logger.system.info("RouterClient.disconnectAll");
        for (var channel in mapListeners) {
            Logger.system.debug("RouterClient.disconnectAll is removing listener on " + channel);
            sendToRouterService(new RemoveListenerMessage(channel));
            delete mapListeners[channel];
        }
        for (var responderChannel in mapResponders) {
            Logger.system.debug("RouterClient.disconnectAll is removing responder on " + responderChannel);
            sendToRouterService(new RemoveResponderMessage(responderChannel));
            delete mapResponders[responderChannel];
        }
        for (var topic in mapPubSubResponders) {
            Logger.system.debug("RouterClient.disconnectAll is removing pubsub responder on " + topic);
            sendToRouterService(new RemovePubSubResponderMessage(topic));
            delete mapPubSubResponders[topic.toString()]; // could be a RegEx
            delete mapPubSubResponderState[topic.toString()]; // remove corresponding state
            delete mapPubSubResponderRegEx[topic.toString()]; // may be a RegEx
        }
        for (var subscribeID in mapSubscribersID) {
            var stopic = mapSubscribersTopic[subscribeID];
            Logger.system.debug("RouterClient.disconnectAll is removing subscriber on " + stopic);
            sendToRouterService(new UnsubscribeMessage(subscribeID, stopic));
            delete mapSubscribersID[subscribeID];
            delete mapSubscribersTopic[subscribeID];
        }
    };
    //Prevent the loggerService window's routerClient from logging to itself. Instead, log locally for it. It's unlikely that we need to get the loggerService's routermessages. If we do, just uncomment this.
    if (system_1.System.Window.getCurrent().name === "loggerService") {
        Logger = new localLogger_1.LocalLogger();
    }
    clientName = baseClientName + "." + window.name;
    /** @TODO - Move this to factory function, something like getRouterClient. */
    if (clientName in Globals.FSBLData.RouterClients) { // if previously constructed then return that existing client
        Logger.system.debug(`"RouterClient Check: reusing existing client for ${clientName}`);
        console.debug(`"RouterClient Check: reusing existing client for ${clientName}`, window);
    }
    else {
        Logger.system.debug(`"RouterClient Check: constructing new client for ${clientName}`);
        console.debug(`"RouterClient Check: constructing new client for ${clientName}`, window);
        Globals.FSBLData.RouterClients[clientName] = this;
        constructor(clientName, transportName); // constructure new router client
    }
    return Globals.FSBLData.RouterClients[clientName];
};


/***/ }),
/* 46 */
/***/ (function(module, exports) {


/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};



/***/ }),
/* 47 */
/***/ (function(module, exports) {

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(){
  "use strict";

  var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  // Use a lookup table to find the index.
  var lookup = new Uint8Array(256);
  for (var i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
  }

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = lookup[base64.charCodeAt(i)];
      encoded2 = lookup[base64.charCodeAt(i+1)];
      encoded3 = lookup[base64.charCodeAt(i+2)];
      encoded4 = lookup[base64.charCodeAt(i+3)];

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})();


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder
  || global.WebKitBlobBuilder
  || global.MSBlobBuilder
  || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var a = new Blob(['hi']);
    return a.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if Blob constructor supports ArrayBufferViews
 * Fails in Safari 6, so we need to map to ArrayBuffers there.
 */

var blobSupportsArrayBufferView = blobSupported && (function() {
  try {
    var b = new Blob([new Uint8Array([1,2])]);
    return b.size === 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

function mapArrayBufferViews(ary) {
  for (var i = 0; i < ary.length; i++) {
    var chunk = ary[i];
    if (chunk.buffer instanceof ArrayBuffer) {
      var buf = chunk.buffer;

      // if this is a subarray, make a copy so we only
      // include the subarray region from the underlying buffer
      if (chunk.byteLength !== buf.byteLength) {
        var copy = new Uint8Array(chunk.byteLength);
        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
        buf = copy.buffer;
      }

      ary[i] = buf;
    }
  }
}

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  mapArrayBufferViews(ary);

  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }

  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

function BlobConstructor(ary, options) {
  mapArrayBufferViews(ary);
  return new Blob(ary, options || {});
};

module.exports = (function() {
  if (blobSupported) {
    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),
/* 50 */
/***/ (function(module, exports) {


/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = typeof XMLHttpRequest !== 'undefined' &&
    'withCredentials' in new XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = "function" === "function" && __webpack_require__(74);

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return JSON3;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}).call(this);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)(module), __webpack_require__(0)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

var rvalidchars = /^[\],:{}\s]*$/;
var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
var rtrimLeft = /^\s+/;
var rtrimRight = /\s+$/;

module.exports = function parsejson(data) {
  if ('string' != typeof data || !data) {
    return null;
  }

  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

  // Attempt to parse using the native JSON parser first
  if (global.JSON && JSON.parse) {
    return JSON.parse(data);
  }

  if (rvalidchars.test(data.replace(rvalidescape, '@')
      .replace(rvalidtokens, ']')
      .replace(rvalidbraces, ''))) {
    return (new Function('return ' + data))();
  }
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/

/**
 * @introduction
 * <h2>Finsemble system wide settings for use by all components and services</h2>
 *
 */

/**
 * Constructor for Finsemble SystemSettings
 * @private
 * @constructor
 */
var SystemSettings = function () {
	var currentDiagLevel = 3;

	/**
  * Returns diagnostic level
  *
  *@returns current diagnostic level
  */
	this.diagLevel = function () {
		return currentDiagLevel;
	};

	/**
  * Returns diagnostic level
  *
  *@returns current diagnostic level
  */
	this.setDiagLevel = function (level) {
		currentDiagLevel = level;
	};

	/**
  * Returns true if parameter validation is enabled
  *
  *@returns true if enable
  */
	this.validationEnabled = function () {
		return currentDiagLevel >= 4;
	};
};

/* harmony default export */ __webpack_exports__["a"] = (new SystemSettings());

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\systemSettings.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\systemSettings.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * Module dependencies.
 */

var url = __webpack_require__(56);
var parser = __webpack_require__(21);
var Manager = __webpack_require__(28);
var debug = __webpack_require__(5)('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup (uri, opts) {
  if (typeof uri === 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var path = parsed.path;
  var sameNamespace = cache[id] && path in cache[id].nsps;
  var newConnection = opts.forceNew || opts['force new connection'] ||
                      false === opts.multiplex || sameNamespace;

  var io;

  if (newConnection) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }
  if (parsed.query && !opts.query) {
    opts.query = parsed.query;
  } else if (opts && 'object' === typeof opts.query) {
    opts.query = encodeQueryString(opts.query);
  }
  return io.socket(parsed.path, opts);
}
/**
 *  Helper method to parse query objects to string.
 * @param {object} query
 * @returns {string}
 */
function encodeQueryString (obj) {
  var str = [];
  for (var p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
    }
  }
  return str.join('&');
}
/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = __webpack_require__(28);
exports.Socket = __webpack_require__(30);


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module dependencies.
 */

var parseuri = __webpack_require__(27);
var debug = __webpack_require__(5)('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url (uri, loc) {
  var obj = uri;

  // default to window.location
  loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' === typeof uri) {
    if ('/' === uri.charAt(0)) {
      if ('/' === uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.host + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' !== typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    } else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  var ipv6 = obj.host.indexOf(':') !== -1;
  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

  // define unique id
  obj.id = obj.protocol + '://' + host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

  return obj;
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 57 */
/***/ (function(module, exports) {

/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug.debug = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(67);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting
    args = exports.formatArgs.apply(self, args);

    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/[\\^$+?.()|[\]{}]/g, '\\$&').replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = __webpack_require__(60);


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {


module.exports = __webpack_require__(61);

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = __webpack_require__(7);


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var transports = __webpack_require__(31);
var Emitter = __webpack_require__(8);
var debug = __webpack_require__(5)('engine.io-client:socket');
var index = __webpack_require__(26);
var parser = __webpack_require__(7);
var parseuri = __webpack_require__(27);
var parsejson = __webpack_require__(52);
var parseqs = __webpack_require__(18);

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket (uri, opts) {
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' === typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.hostname = uri.host;
    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  } else if (opts.host) {
    opts.hostname = parseuri(opts.host).host;
  }

  this.secure = null != opts.secure ? opts.secure
    : (global.location && 'https:' === location.protocol);

  if (opts.hostname && !opts.port) {
    // if no port is specified manually, use the protocol default
    opts.port = this.secure ? '443' : '80';
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port
      ? location.port
      : (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' === typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.readyState = '';
  this.writeBuffer = [];
  this.prevBufferLen = 0;
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
    this.perMessageDeflate.threshold = 1024;
  }

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? null : opts.rejectUnauthorized;
  this.forceNode = !!opts.forceNode;

  // other options for Node.js client
  var freeGlobal = typeof global === 'object' && global;
  if (freeGlobal.global === freeGlobal) {
    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
      this.extraHeaders = opts.extraHeaders;
    }

    if (opts.localAddress) {
      this.localAddress = opts.localAddress;
    }
  }

  // set on handshake
  this.id = null;
  this.upgrades = null;
  this.pingInterval = null;
  this.pingTimeout = null;

  // set on heartbeat
  this.pingIntervalTimer = null;
  this.pingTimeoutTimer = null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = __webpack_require__(19);
Socket.transports = __webpack_require__(31);
Socket.parser = __webpack_require__(7);

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    agent: this.agent,
    hostname: this.hostname,
    port: this.port,
    secure: this.secure,
    path: this.path,
    query: query,
    forceJSONP: this.forceJSONP,
    jsonp: this.jsonp,
    forceBase64: this.forceBase64,
    enablesXDR: this.enablesXDR,
    timestampRequests: this.timestampRequests,
    timestampParam: this.timestampParam,
    policyPort: this.policyPort,
    socket: this,
    pfx: this.pfx,
    key: this.key,
    passphrase: this.passphrase,
    cert: this.cert,
    ca: this.ca,
    ciphers: this.ciphers,
    rejectUnauthorized: this.rejectUnauthorized,
    perMessageDeflate: this.perMessageDeflate,
    extraHeaders: this.extraHeaders,
    forceNode: this.forceNode,
    localAddress: this.localAddress
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
    transport = 'websocket';
  } else if (0 === this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function () {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function (transport) {
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function () {
    self.onDrain();
  })
  .on('packet', function (packet) {
    self.onPacket(packet);
  })
  .on('error', function (e) {
    self.onError(e);
  })
  .on('close', function () {
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 });
  var failed = false;
  var self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen () {
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' === msg.type && 'probe' === msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' === transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' === self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport () {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  // Handle any error that happens while probing
  function onerror (err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose () {
    onerror('transport closed');
  }

  // When the socket is closed while we're probing
  function onclose () {
    onerror('socket closed');
  }

  // When the socket is upgraded while we're probing
  function onupgrade (to) {
    if (transport && to.name !== transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  // Remove all listeners on the transport and on self
  function cleanup () {
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();
};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' === this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' === this.readyState || 'open' === this.readyState ||
      'closing' === this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(parsejson(packet.data));
        break;

      case 'pong':
        this.setPing();
        this.emit('pong');
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.onError(err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if ('closed' === this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' === self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api private
*/

Socket.prototype.ping = function () {
  var self = this;
  this.sendPacket('ping', function () {
    self.emit('ping');
  });
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function () {
  this.writeBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (0 === this.writeBuffer.length) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' !== this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, options, fn) {
  this.sendPacket('message', msg, options, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, options, fn) {
  if ('function' === typeof data) {
    fn = data;
    data = undefined;
  }

  if ('function' === typeof options) {
    fn = options;
    options = null;
  }

  if ('closing' === this.readyState || 'closed' === this.readyState) {
    return;
  }

  options = options || {};
  options.compress = false !== options.compress;

  var packet = {
    type: type,
    data: data,
    options: options
  };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  if (fn) this.once('flush', fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' === this.readyState || 'open' === this.readyState) {
    this.readyState = 'closing';

    var self = this;

    if (this.writeBuffer.length) {
      this.once('drain', function () {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  function close () {
    self.onClose('forced close');
    debug('socket closing - telling transport to close');
    self.transport.close();
  }

  function cleanupAndClose () {
    self.removeListener('upgrade', cleanupAndClose);
    self.removeListener('upgradeError', cleanupAndClose);
    close();
  }

  function waitForUpgrade () {
    // wait for upgrade to finish since we can't send packets while pausing a transport
    self.once('upgrade', cleanupAndClose);
    self.once('upgradeError', cleanupAndClose);
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);

    // clean buffers after, so users can still
    // grab the buffers on `close` event
    self.writeBuffer = [];
    self.prevBufferLen = 0;
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i < j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module requirements.
 */

var Polling = __webpack_require__(32);
var inherit = __webpack_require__(12);

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function (e) {
    self.onError('jsonp poll error', e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  if (insertAt) {
    insertAt.parentNode.insertBefore(script, insertAt);
  } else {
    (document.head || document.body).appendChild(script);
  }
  this.script = script;

  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch (e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function () {
      if (self.iframe.readyState === 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module requirements.
 */

var XMLHttpRequest = __webpack_require__(20);
var Polling = __webpack_require__(32);
var Emitter = __webpack_require__(8);
var inherit = __webpack_require__(12);
var debug = __webpack_require__(5)('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty () {}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR (opts) {
  Polling.call(this, opts);
  this.requestTimeout = opts.requestTimeout;

  if (global.location) {
    var isSSL = 'https:' === location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname !== global.location.hostname ||
      port !== opts.port;
    this.xs = opts.secure !== isSSL;
  } else {
    this.extraHeaders = opts.extraHeaders;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function (opts) {
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  opts.requestTimeout = this.requestTimeout;

  // other options for Node.js client
  opts.extraHeaders = this.extraHeaders;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function (data, fn) {
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function (err) {
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function () {
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function (data) {
    self.onData(data);
  });
  req.on('error', function (err) {
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request (opts) {
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined !== opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.requestTimeout = opts.requestTimeout;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  // other options for Node.js client
  this.extraHeaders = opts.extraHeaders;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function () {
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    try {
      if (this.extraHeaders) {
        xhr.setDisableHeaderCheck(true);
        for (var i in this.extraHeaders) {
          if (this.extraHeaders.hasOwnProperty(i)) {
            xhr.setRequestHeader(i, this.extraHeaders[i]);
          }
        }
      }
    } catch (e) {}
    if (this.supportsBinary) {
      // This has to be done after open because Firefox is stupid
      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
      xhr.responseType = 'arraybuffer';
    }

    if ('POST' === this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    try {
      xhr.setRequestHeader('Accept', '*/*');
    } catch (e) {}

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.requestTimeout) {
      xhr.timeout = this.requestTimeout;
    }

    if (this.hasXDR()) {
      xhr.onload = function () {
        self.onLoad();
      };
      xhr.onerror = function () {
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function () {
        if (4 !== xhr.readyState) return;
        if (200 === xhr.status || 1223 === xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function () {
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function () {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function () {
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function (data) {
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function (err) {
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function (fromError) {
  if ('undefined' === typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch (e) {}
  }

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function () {
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response || this.xhr.responseText;
    } else {
      if (!this.supportsBinary) {
        data = this.xhr.responseText;
      } else {
        try {
          data = String.fromCharCode.apply(null, new Uint8Array(this.xhr.response));
        } catch (e) {
          var ui8Arr = new Uint8Array(this.xhr.response);
          var dataArray = [];
          for (var idx = 0, length = ui8Arr.length; idx < length; idx++) {
            dataArray.push(ui8Arr[idx]);
          }

          data = String.fromCharCode.apply(null, dataArray);
        }
      }
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function () {
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function () {
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

Request.requestsCount = 0;
Request.requests = {};

if (global.document) {
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler, false);
  }
}

function unloadHandler () {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module dependencies.
 */

var Transport = __webpack_require__(19);
var parser = __webpack_require__(7);
var parseqs = __webpack_require__(18);
var inherit = __webpack_require__(12);
var yeast = __webpack_require__(34);
var debug = __webpack_require__(5)('engine.io-client:websocket');
var BrowserWebSocket = global.WebSocket || global.MozWebSocket;
var NodeWebSocket;
if (typeof window === 'undefined') {
  try {
    NodeWebSocket = __webpack_require__(76);
  } catch (e) { }
}

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

var WebSocket = BrowserWebSocket;
if (!WebSocket && typeof window === 'undefined') {
  WebSocket = NodeWebSocket;
}

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS (opts) {
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  this.perMessageDeflate = opts.perMessageDeflate;
  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
  if (!this.usingBrowserWebSocket) {
    WebSocket = NodeWebSocket;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function () {
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var uri = this.uri();
  var protocols = void (0);
  var opts = {
    agent: this.agent,
    perMessageDeflate: this.perMessageDeflate
  };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;
  if (this.extraHeaders) {
    opts.headers = this.extraHeaders;
  }
  if (this.localAddress) {
    opts.localAddress = this.localAddress;
  }

  try {
    this.ws = this.usingBrowserWebSocket ? new WebSocket(uri) : new WebSocket(uri, protocols, opts);
  } catch (err) {
    return this.emit('error', err);
  }

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  if (this.ws.supports && this.ws.supports.binary) {
    this.supportsBinary = true;
    this.ws.binaryType = 'nodebuffer';
  } else {
    this.ws.binaryType = 'arraybuffer';
  }

  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function () {
  var self = this;

  this.ws.onopen = function () {
    self.onOpen();
  };
  this.ws.onclose = function () {
    self.onClose();
  };
  this.ws.onmessage = function (ev) {
    self.onData(ev.data);
  };
  this.ws.onerror = function (e) {
    self.onError('websocket error', e);
  };
};

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function (packets) {
  var self = this;
  this.writable = false;

  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  var total = packets.length;
  for (var i = 0, l = total; i < l; i++) {
    (function (packet) {
      parser.encodePacket(packet, self.supportsBinary, function (data) {
        if (!self.usingBrowserWebSocket) {
          // always create a new object (GH-437)
          var opts = {};
          if (packet.options) {
            opts.compress = packet.options.compress;
          }

          if (self.perMessageDeflate) {
            var len = 'string' === typeof data ? global.Buffer.byteLength(data) : data.length;
            if (len < self.perMessageDeflate.threshold) {
              opts.compress = false;
            }
          }
        }

        // Sometimes the websocket has already been closed but the browser didn't
        // have a chance of informing us about it yet, in that case send will
        // throw an error
        try {
          if (self.usingBrowserWebSocket) {
            // TypeError is thrown when passing the second argument on Safari
            self.ws.send(data);
          } else {
            self.ws.send(data, opts);
          }
        } catch (e) {
          debug('websocket closed before onclose event');
        }

        --total || done();
      });
    })(packets[i]);
  }

  function done () {
    self.emit('flush');

    // fake drain
    // defer to next tick to allow Socket to clear writeBuffer
    setTimeout(function () {
      self.writable = true;
      self.emit('drain');
    }, 0);
  }
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function () {
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function () {
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function () {
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
    ('ws' === schema && Number(this.port) !== 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = yeast();
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  var ipv6 = this.hostname.indexOf(':') !== -1;
  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function () {
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 65 */
/***/ (function(module, exports) {


/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};


/***/ }),
/* 66 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),
/* 67 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000
var m = s * 60
var h = m * 60
var d = h * 24
var y = d * 365.25

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {}
  var type = typeof val
  if (type === 'string' && val.length > 0) {
    return parse(val)
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ?
			fmtLong(val) :
			fmtShort(val)
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
}

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str)
  if (str.length > 10000) {
    return
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
  if (!match) {
    return
  }
  var n = parseFloat(match[1])
  var type = (match[2] || 'ms').toLowerCase()
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y
    case 'days':
    case 'day':
    case 'd':
      return n * d
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n
    default:
      return undefined
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd'
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h'
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm'
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's'
  }
  return ms + 'ms'
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms'
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name
  }
  return Math.ceil(ms / n) + ' ' + name + 's'
}


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = __webpack_require__(66);
var isBuf = __webpack_require__(33);

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet){
  var buffers = [];
  var packetData = packet.data;

  function _deconstructPacket(data) {
    if (!data) return data;

    if (isBuf(data)) {
      var placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (isArray(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i]);
      }
      return newData;
    } else if ('object' == typeof data && !(data instanceof Date)) {
      var newData = {};
      for (var key in data) {
        newData[key] = _deconstructPacket(data[key]);
      }
      return newData;
    }
    return data;
  }

  var pack = packet;
  pack.data = _deconstructPacket(packetData);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  var curPlaceHolder = 0;

  function _reconstructPacket(data) {
    if (data && data._placeholder) {
      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
      return buf;
    } else if (isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i]);
      }
      return data;
    } else if (data && 'object' == typeof data) {
      for (var key in data) {
        data[key] = _reconstructPacket(data[key]);
      }
      return data;
    }
    return data;
  }

  packet.data = _reconstructPacket(packet.data);
  packet.attachments = undefined; // no longer useful
  return packet;
};

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((global.Blob && obj instanceof Blob) ||
        (global.File && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 69 */
/***/ (function(module, exports) {


/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks[event] = this._callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks = this._callbacks || {};

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks[event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(71);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage(){
  try {
    return window.localStorage;
  } catch (e) {}
}


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(72);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 72 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = '' + str;
  if (str.length > 10000) return;
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 73 */
/***/ (function(module, exports) {

module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}


/***/ }),
/* 74 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/wtf8 v1.0.0 by @mathias */
;(function(root) {

	// Detect free variables `exports`
	var freeExports = typeof exports == 'object' && exports;

	// Detect free variable `module`
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function wtf8encode(string) {
		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte.
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol() {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read the first byte.
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			var byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid WTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function wtf8decode(byteString) {
		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol()) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var wtf8 = {
		'version': '1.0.0',
		'encode': wtf8encode,
		'decode': wtf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return wtf8;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = wtf8;
		} else { // in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in wtf8) {
				hasOwnProperty.call(wtf8, key) && (freeExports[key] = wtf8[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.wtf8 = wtf8;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(15)(module), __webpack_require__(0)))

/***/ }),
/* 76 */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
const dependencyManager_1 = __webpack_require__(22);
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
const async_1 = __webpack_require__(11);
const system_1 = __webpack_require__(4);
const Constants = __webpack_require__(16);
const { SERVICE_INITIALIZING_CHANNEL, SERVICE_READY_CHANNEL, SERVICE_CLOSING_CHANNEL, SERVICE_CLOSED_CHANNEL, SERVICE_STOP_CHANNEL } = Constants;
const defaultBaseServiceParams = {
    startupDependencies: {
        services: [],
        clients: []
    },
    shutdownDependencies: {
        services: []
    },
    addOFWrapper: false,
    name: window.name
};
/*
 * @introduction
 * <h2>Base Service</h2>
 * Creates an instance of the Base Service which all service must inherit. Services are spawned from your *service.json* file and managed by a helper thread&mdash;the **Service Manager**.
 * Services communicate their status and receive status of other service through the Service Manager.
 * Services have an intial handshake with the Service Manager on load, and then either go online or wait for dependant services to come online.
 * Service intialization is completly asynchronous, which allows all services to load at the same time, as long as their dependencies have been met.
 * @constructor
*/
class BaseService {
    constructor(params = defaultBaseServiceParams) {
        fixParams(params);
        this.name = params.name ? params.name : window.name;
        this.startupDependencies = params.startupDependencies;
        this.shutdownDependencies = params.shutdownDependencies;
        this.Logger = logger_1.default;
        this.RouterClient = routerClientInstance_1.default;
        //This will be set to true after the debugServiceDelay is met. Defaults to 0, but devs can up it if they need to jump in and add breakpoints and are on a bad computer.
        this.waitedLongEnough = false;
        //this.parentUuid = System.Application.getCurrent().uuid;
        this.onBaseServiceReadyCB = null;
        this.setOnConnectionCompleteCB = null;
        this.listeners = {};
        this.start = this.waitForDependencies;
        this.started = false;
        /**
         * Service status
         * @type {ServiceState}
         */
        this.status = "initializing";
        this.setOnline = this.setOnline.bind(this);
        this.onBaseServiceReady = this.onBaseServiceReady.bind(this);
        this.handleShutdown = this.handleShutdown.bind(this);
        this.waitForDependencies();
    }
    /**
    * Waits for the dependencies. At the end of this function, it will trigger the child service's initialze function (or onBaseServiceReady).
    * @note This used to be BaseService.start
    * @private
    */
    waitForDependencies() {
        //For backwards compat. note Start used to be invoked after the constructor.
        //note do this later
        if (this.started)
            return;
        this.started = true;
        var service = this;
        logger_1.default.system.debug(`${this.name} starting`);
        function cacheCustomData(done) {
            logger_1.default.system.debug("BaseService.start.setParentUUID");
            system_1.System.Window.getCurrent().getOptions((opts) => {
                service.customData = opts.customData;
                service.parentUuid = opts.customData.parentUuid;
                done();
            });
        }
        function onRouterReady(done) {
            routerClientInstance_1.default.onReady(function () {
                routerClientInstance_1.default.transmit(SERVICE_INITIALIZING_CHANNEL, { name: service.name });
                window.addEventListener("beforeunload", service.RouterClient.disconnectAll);
                logger_1.default.system.debug("APPLICATION LIFECYCLE:STARTUP:SERVICE:BaseService.start.onRouterReady");
                done();
            });
        }
        function readyToGo(done) {
            logger_1.default.system.debug("APPLICATION LIFECYCLE:STARTUP:SERVICE:BaseService.start.readyToGo");
            console.log(performance.now(), "ReadyToGo called");
            console.log("Startup Dependencies for", service.name, service.startupDependencies);
            console.log("Shutdown Dependencies for", service.name, service.shutdownDependencies);
            service.waitedLongEnough = true;
            dependencyManager_1.FSBLDependencyManagerSingleton.shutdown.waitFor(service.shutdownDependencies, service.handleShutdown);
            routerClientInstance_1.default.transmit(`${system_1.System.Window.getCurrent().name}.onSpawned`, {});
            //`done` invoked when all dependencies are up
            let dependency = dependencyManager_1.FSBLDependencyManagerSingleton.startup.waitFor(service.startupDependencies, done);
            dependency.on("err", (err) => {
                logger_1.default.system.error(err);
            });
        }
        function showDeveloperTools(done) {
            const myWindow = system_1.System.Window.getCurrent();
            myWindow.isShowing((isShowing) => {
                if (isShowing && service.customData.showDevConsoleOnVisible) {
                    system_1.System.showDeveloperTools(myWindow.uuid, myWindow.name, done);
                }
                else {
                    logger_1.default.system.debug("APPLICATION LIFECYCLE:STARTUP:SERVICE:BaseService.start.delayStartup done");
                    done();
                }
            });
        }
        return new Promise((resolve, reject) => {
            async_1.series([
                onRouterReady,
                cacheCustomData,
                showDeveloperTools,
                readyToGo
            ], () => {
                resolve();
                this.onDependenciesReady();
            });
        });
    }
    /**
     * Transmits the serviceOnline message that the rest of the dependency manager objects system are listening for.
     */
    setOnline() {
        if (this.status !== "ready") {
            console.log("Setting service online", this.name);
            logger_1.default.system.log("APPLICATION LIFECYCLE:STARTUP:SERVICE ONLINE", this.name);
            routerClientInstance_1.default.transmit(SERVICE_READY_CHANNEL, { serviceName: this.name }); // notify service manager
            this.RouterClient.addListener(SERVICE_STOP_CHANNEL + "." + this.name, (err, response) => {
                this;
                dependencyManager_1.FSBLDependencyManagerSingleton.shutdown.checkDependencies();
            });
            this.status = "ready";
        }
    }
    /**
     * Invokes a method passed in (or on) the object that inherits from the BaseService. In other words, the service instance will have its initialize function called, unless it's using old code, in which case we will have cached the callback earlier.
     */
    onDependenciesReady() {
        logger_1.default.system.debug("APPLICATION LIFECYCLE:STARTUP:BaseService onDependenciesReady", this.name);
        this.status = "initializing"; // must change from offline here; otherwise race condition waiting to call this.setOnline
        routerClientInstance_1.default.onReady(() => {
            //These first two blocks are for backward compatibility. The 3rd (initialize) is how it should be done.
            if (this.onBaseServiceReadyCB) {
                // if inheriting service provided a "connection complete" callback, then invoke before sending online
                this.onBaseServiceReadyCB(this.setOnline);
            }
            else if (this.initialize) {
                this.initialize(this.setOnline);
            }
            else {
                //otherwise setOnline need sto be called manually.
                setTimeout(() => {
                    if (this.status !== "ready" && this.name !== "routerService") {
                        console.error("No onBaseServiceReadyCB on initialize function defined on your service. Ensure that service.setOnline is called");
                        logger_1.default.system.error("No onBaseServiceReadyCB on initialize function defined on your service. Ensure that service.setOnline is called");
                    }
                }, 3000);
            }
        });
    }
    onBaseServiceReady(func) {
        if (this.status === "initializing") {
            //onBaseServiceReady is backwards-compatability stuff.
            this.onBaseServiceReadyCB = () => {
                func(this.setOnline);
            };
        }
        else {
            func(this.setOnline);
        }
    }
    /**
     * Really only for shutdown right now. Simple array that gets looped through on shutdown.
     * @param {string} listenerType
     * @param {function} callback
     */
    addEventListener(listenerType, callback) {
        if (!this.listeners[listenerType]) {
            this.listeners[listenerType] = [];
        }
        this.listeners[listenerType].push(callback);
    }
    /**
     * When the application sends out a shutdown message, this function is invoked. It iterates through any registered cleanup methods. When all of them have finished (or 10 seconds elapses), it sends a response to the application saying that it's completed cleanup (`shutdownComplete`, below).
     * @private
    */
    onShutdown(cb) {
        this.addEventListener("onShutdown", cb);
    }
    /**
     * When the application sends out a shutdown message, this function is invoked. It iterates through any registered cleanup methods. When all of them have finished (or 10 seconds elapses), it sends a response to the application saying that it's completed cleanup (`shutdownComplete`, below).
     * @private
    */
    handleShutdown(err, message) {
        var self = this;
        function handleShutdownAction(handler, done) {
            let cleanup = async_1.asyncify(handler);
            cleanup = async_1.timeout(cleanup, 10000); // services may need some time to cleanup (depends on service)
            cleanup(null, done);
        }
        function shutdownComplete(err, data) {
            if (err) {
                logger_1.default.system.error(err);
            }
            self.shutdownComplete();
        }
        if (this.listeners.onShutdown) {
            routerClientInstance_1.default.transmit(SERVICE_CLOSING_CHANNEL, {
                waitForMe: true,
                name: this.name
            });
            async_1.each(this.listeners.onShutdown, handleShutdownAction, shutdownComplete);
        }
        else {
            routerClientInstance_1.default.transmit(SERVICE_CLOSING_CHANNEL, {
                waitForMe: false,
                name: this.name
            });
            self.shutdownComplete();
        }
    }
    /**
     * Fired when all cleanup methods have been finished.
     * @private
    */
    shutdownComplete() {
        logger_1.default.system.info(`"APPLICATION LIFECYCLE:SHUTDOWN:SERVICE SHUTDOWN: ${this.name}`);
        routerClientInstance_1.default.transmit(SERVICE_CLOSED_CHANNEL, {
            name: this.name,
            uuid: system_1.System.Application.getCurrent().uuid
        });
    }
}
exports.BaseService = BaseService;
// ensures all service errors will be caught
window.addEventListener("error", function (errorObject) {
    var stack = errorObject.error ? errorObject.error.stack.substring(errorObject.error.stack.search("at ")) : ""; // strip off irrelevant part of stack
    logger_1.default.error(errorObject.message, "File: " + errorObject.filename, "Line: " + errorObject.lineno, "Column: " + errorObject.colno, "Error Stack: \n    " + stack);
    return false;
});
//catch promise errors
window.addEventListener("unhandledrejection", function (event) {
    if (event.reason == "Cannot Wrap Service Manager or Services") {
        logger_1.default.warn("A service tried To wrap itself. This is a side effect of using Clients in services.");
    }
    else {
        logger_1.default.error("Unhandled rejection", "reason", event.reason);
    }
});
/**
 *
 * @private
 */
function fixParams(params) {
    if (params.startupDependencies) {
        if (!params.startupDependencies.services)
            params.startupDependencies.services = defaultBaseServiceParams.startupDependencies.services;
        if (!params.startupDependencies.clients)
            params.startupDependencies.clients = defaultBaseServiceParams.startupDependencies.clients;
    }
    else {
        params.startupDependencies = defaultBaseServiceParams.startupDependencies;
    }
    if (params.shutdownDependencies) {
        if (!params.shutdownDependencies.services)
            params.shutdownDependencies.services = defaultBaseServiceParams.shutdownDependencies.services;
    }
    else {
        params.shutdownDependencies = defaultBaseServiceParams.shutdownDependencies;
    }
}


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const baseClient_1 = __webpack_require__(13);
const StoreModel_1 = __webpack_require__(83);
/** I'm not sure why we previously deferred requiring StoreModel, but we did.
  * I've tried to stay as true to the original implementation as possible. -- Daniel 12/19/18 */
let _StoreModel;
/** The global `window` object. We cast it to a specific interface here to be
 * explicit about what Finsemble-related properties it may have. */
const Globals = window;
/**
 *
 * @introduction
 * <h2>Distributed Store Client</h2>
 * The Distributed Store Client handles creating, retrieving, and destroying stores. Stores are used to save and retrieve data either locally or globally.
 * This data is not persisted. You can add listeners at multiple levels (store or field), and get the updated data as it's updated in the store.
 * Fields are stored within the store as key/value pair.
 *
 * For more information, see the [Distributed Store tutorial](tutorial-DistributedStore.html).

 * @hideconstructor
 * @constructor
 */
var DistributedStoreClient = function (params) {
    baseClient_1.default.call(this, params);
    var self = this;
    var localStore = {};
    this.ls = localStore;
    /**
     * Get a store. If no store is set then we'll get the global Finsemble store. If global is not set we'll check local first then we'll check global.
     * @param {Object} params - Params object
     * @param {String} [params.store] -  The namespace of the value
     * @param {boolean} [params.global] - Is this a global store?
     * @param {function} cb -  Will return the value if found.
     * @returns {StoreModel} - returns the store
     * @example
     * DistributedStoreClient.getStore({store:'store1'},function(storeObject){});
     */
    this.getStore = function (params, cb) {
        if (params.global) {
            return getGlobalStore(params, cb);
        }
        if (localStore[params.store]) {
            return cb(null, localStore[params.store]);
        }
        return getGlobalStore(params, cb);
    };
    function getGlobalStore(params, cb) {
        function returnStore(err, response) {
            if (err) {
                return cb(err);
            }
            return cb(err, new _StoreModel(response.data, self.routerClient));
        }
        return self.routerClient.query("storeService.getStore", params, returnStore);
    }
    /**
     *Creates a store.
     * @param {Object} params - Params object
     * @param {String} params.store -  The namespace of to use
     * @param {any} [params.values]-  Starting values for the store
     * @param {boolean} [params.global] - Is this a global store?
     * @param {function} cb -  Will return the store on success.
     * @returns {function} - Callback will receive the store
     * @example
     * DistributedStoreClient.createStore({store:"store1",global:false,values:{}},function(storeObject){});
     */
    this.createStore = function (params, cb = Function.prototype) {
        const promiseResolver = (resolve, reject) => {
            if (params.global) {
                return this.routerClient.query("storeService.createStore", params, function (err, response) {
                    if (err) {
                        reject(err);
                        return cb(err);
                    }
                    const data = new _StoreModel(response.data, self.routerClient);
                    resolve({ err, data });
                    return cb(err, data);
                });
            }
            if (localStore[params.store]) {
                resolve({ err: null, data: localStore[params.store] });
                return cb(null, localStore[params.store]);
            }
            var ls = new _StoreModel(params, self.routerClient);
            localStore[ls.name] = ls;
            resolve({ err: null, data: ls });
            return cb(null, ls);
        };
        return new Promise(promiseResolver);
    };
    /**
     * Remove a store . If global is not set and a local store isn't found we'll try to remove the global store
     * @param {Object} params - Params object
     * @param {String} params.store -  The namespace of to use
     * @param {boolean} [params.global] - Is this a global store?
     * @param {function} cb
     * @example
     * DistributedStoreClient.removeStore({store:"store1",global:true},function(){});
     */
    this.removeStore = function (params, cb) {
        if (params.global) {
            return removeGlobalStore(params, cb);
        }
        if (localStore[params.store]) {
            delete localStore[params.store];
            return cb(null, true);
        }
        removeGlobalStore(params, cb); // If global flag is not set but we don't find it local, try global////Should we have this?
    };
    function removeGlobalStore(params, cb) {
        self.routerClient.query("storeService.removeStore", params, function (err, response) {
            if (err) {
                return cb(err, false);
            }
            return cb(err, response.data);
        });
    }
    this.load = function (cb) {
        cb();
    };
};
var storeClient = new DistributedStoreClient({
    startupDependencies: {
        services: ["dataStoreService"]
    },
    onReady: function (cb) {
        _StoreModel = StoreModel_1.default;
        storeClient.load(cb);
    },
    name: "distributedStoreClient"
});
Globals.distributedStoreClient = storeClient;
exports.default = storeClient;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const validate_1 = __webpack_require__(9);
const logger_1 = __webpack_require__(2);
const baseClient_1 = __webpack_require__(13);
/**
 *
 * @introduction
 * <h2>Storage Client</h2>
 * The Storage client handles saving and retrieving data for your application.
 * @hideconstructor
 *  @todo add clear method
 * @constructor
 */
var StorageClient = function (params) {
    validate_1.default.args(params, "object=") && params && validate_1.default.args2("params.onReady", params.onReady, "function=");
    var self = this;
    baseClient_1.default.call(this, params);
    /**
     * Define the username for storage (i.e., each user has unique storage)
     * @param {Object} params - Params object
     * @param {String} params.user -  user name
     * @param {function} [cb] -  callback to be called on success
     *
     * @example
     * StorageClient.setUser({ user: "JohnDoe"});
     */
    this.setUser = function (params, cb) {
        validate_1.default.args(params.user, "string", cb, "function=");
        self.routerClient.query("Storage.setUser", { user: params.user }, function (err, response) {
            let logMethod = logger_1.default.system.log;
            if (err) {
                logMethod = logger_1.default.system.error;
            }
            logMethod("APPLICATION LIFECYCLE:StorageClient.setUser", params, err, response);
            if (cb) {
                cb(err, response.data);
            }
        });
    };
    /**
     * Specifies the datastore.  For normal operation this function doesn't have to be invoked -- the default datastore is set in configuration.
     * @param {Object} params - Params object
     * @param {String} params.topic -  if specificed then data store is set only for topic
     * @param {string} params.dataStore -  identifies the data store (e.g. "localStorage", "redis")
     * @param {function} [cb] -  callback to be called on success
     *
     * @example
     * StorageClient.setStore({topic:"finsemble", dataStore:"redis"})
     */
    this.setStore = function (params, cb) {
        validate_1.default.args(params.topic, "string", params.dataStore, "string=", cb, "function=");
        logger_1.default.system.log("APPLICATION LIFECYCLE:StorageClient.setStore", params, cb);
        self.routerClient.query("Storage.setStore", params, function (err, response) {
            let logMethod = logger_1.default.system.info;
            if (err) {
                logMethod = logger_1.default.system.error;
            }
            logMethod("Storage.setStore", err, response);
            if (cb) {
                cb(err, response.data);
            }
        });
    };
    /**
     * Save a key value pair into storage.
     * @param {Object} params - Params object
     * @param {String} params.topic -  storage topic for key being stored
     * @param {String} params.key -  The key to be stored
     * @param {any} params.value -  The value to be stored
     * @param {function} [cb] -  callback to be called on success
     *
     * @example
     * StorageClient.save({topic:"finsemble", key:"testKey", value:"testValue"})
     */
    this.save = function (params, cb) {
        const promiseResolver = (resolve, reject) => {
            validate_1.default.args(params.topic, "string", params.key, "string", params.value, "any", cb, "function=");
            self.routerClient.query("Storage.save", params, function (err, response) {
                let logMethod = logger_1.default.system.debug;
                if (err) {
                    logMethod = logger_1.default.system.error;
                }
                logMethod("Storage.save", err, response);
                if (cb) {
                    cb(err, response.data);
                }
                if (err) {
                    reject({ err: err, data: null });
                }
                else {
                    resolve({ err: err, data: response.data });
                }
            });
        };
        return new Promise(promiseResolver);
    };
    /**
     * Get a value from storage.
     * @param {Object} params - Params object
     * @param {String} params.key -  The key to get from storage
     * @param {function} [cb] -  callback to be called on success
     *
     * @example
     * StorageClient.get({topic:"finsemble", key:"testKey"}, function(err, data){
     *	var myData = data;
     * });
     */
    this.get = function (params, cb = Function.prototype) {
        const promiseResolver = (resolve, reject) => {
            validate_1.default.args(params.topic, "string", params.key, "string", cb, "function=");
            self.routerClient.query("Storage.get", params, function (err, response) {
                if (err) {
                    logger_1.default.system.error("Storage.get", err, response);
                    cb(err, response ? response.data : null);
                    return reject(err, response ? response.data : null);
                }
                logger_1.default.system.info("Storage.get", err, response);
                cb(err, response.data);
                resolve(response.data);
            });
        };
        return new Promise(promiseResolver);
    };
    /**
     * Get all keys for the topic.
     * @param {Object} params - Params object
     * @param {String} params.topic -  topic for the keys to return
     * @param {String=} params.keyPrefix -  filter all keys that don't start with this prefix
     * @param {function} [cb] -  callback to be called on success
     *
     * @example
     * StorageClient.keys({topic:"finsemble", keyPrefix:"test"}, function(err, data){
     *	var myKeys = data;
     * });
     */
    this.keys = function (params, cb) {
        validate_1.default.args(params.topic, "string", cb, "function=");
        logger_1.default.system.debug("StorageClient.keys", params, cb);
        self.routerClient.query("Storage.keys", params, function (err, response) {
            let logMethod = logger_1.default.system.info;
            if (err) {
                logMethod = logger_1.default.system.error;
            }
            logMethod("Storage.keys", err, response);
            if (cb) {
                cb(err, response.data);
            }
        });
    };
    /**
     * Get a multiple values from storage based on regex.(coming soon)
     * @param {Object} params - Params object
     * @param {function} [cb] -  callback to be called on success
     * @private
     * @todo make this work.
     * @example
     * StorageClient.get({key:"testKey"});
     */
    this.getMultiple = function (params, cb) {
        logger_1.default.system.info("StorageClient.getMultiple", params, cb);
        self.routerClient.query("Storage.getMultiple", params, function (err, response) {
            let logMethod = logger_1.default.system.info;
            if (err) {
                logMethod = logger_1.default.system.error;
            }
            logMethod("StorageClient.getMultiple:", params, response);
            if (cb) {
                cb(err, response);
            }
        });
    };
    /**
     * Delete a value from storage.
     * @param {Object} params - Params object
     * @param {String} params.key -  The key to get from storage
     * @example
     * StorageClient.remove({key:"testKey"})
     */
    this.remove = function (params, cb) {
        const promiseResolver = (resolve, reject) => {
            validate_1.default.args(params.topic, "string", params.key, "string", cb, "function=");
            self.routerClient.query("Storage.delete", params, function (err, response) {
                let logMethod = logger_1.default.system.info;
                if (err) {
                    logMethod = logger_1.default.system.error;
                }
                logMethod("StorageClient.delete", err, response);
                if (cb) {
                    cb(err, response.data);
                }
                if (err) {
                    reject({ err: err, data: null });
                }
                else {
                    resolve({ err: err, data: response.data });
                }
            });
        };
        return new Promise(promiseResolver);
    };
    //Did this because "delete" is a reserved keyword; for autocomplete the client is exported as a namespace with a bunch of functions and wouldn't work with a function called delete.
    this.delete = this.remove;
    this.clearCache = function (cb) {
        validate_1.default.args(params.topic, "string", params.key, "string", cb, "function=");
        logger_1.default.system.log("StorageClient.clearCache", cb);
        self.routerClient.query("Storage.clearCache", null, function (err, response) {
            let logMethod = logger_1.default.system.info;
            if (err) {
                logMethod = logger_1.default.system.error;
            }
            logMethod("StorageClient.clearCache", err, response);
            if (cb) {
                cb(err, response.data);
            }
        });
    };
};
var storageClient = new StorageClient({
    startupDependencies: {
        services: ["storageService"]
    },
    onReady: function (cb) {
        if (cb) {
            cb();
        }
    },
    name: "storageClient"
});
exports.default = storageClient;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
const distributedStoreClient_1 = __webpack_require__(78);
const storageClient_1 = __webpack_require__(79);
const util = __webpack_require__(10);
const WindowEventManager_1 = __webpack_require__(89);
const constants = __webpack_require__(16);
const FinsembleEvent_1 = __webpack_require__(88);
const system_1 = __webpack_require__(4);
/** This import syntax helps the compiler infer the types. */
const clone = __webpack_require__(90);
distributedStoreClient_1.default.initialize();
storageClient_1.default.initialize();
const BOUNDS_SET = "bounds-set";
const BOUNDS_CHANGING = "bounds-change-request";
const BOUNDS_CHANGED = "bounds-changed";
const WORKSPACE_CACHE_TOPIC = "finsemble.workspace.cache";
if (!window._FSBLCache)
    window._FSBLCache = {
        storeClientReady: false,
        windowStore: null,
        windows: {},
        gettingWindow: [],
        windowAttempts: {}
    };
class FinsembleWindow {
    constructor(params) {
        this.eventlistenerHandlerMap = {};
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Handers to generate wrapper events from incoming transmits
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        this.handleWrapStateChange = (err, response) => {
            let state = response.data.state;
            if (state !== this.wrapState) {
                this.wrapState = state;
                this.eventManager.trigger("wrap-state-changed", {
                    state
                });
            }
        };
        this.types = {};
        //todo settle on a proper name for this property.
        this.wrapState = "initializing";
        this.componentState = {};
        this.windowState = FinsembleWindow.WINDOWSTATE.NORMAL;
        this.type = null;
        this.windowType = null;
        this.bounds = {};
        this.name;
        this.guid = Date.now() + "_" + Math.random();
        this.addListener = this.addEventListener;
        this.removeListener = this.removeEventListener;
        this.WINDOWSTATE = constants.WINDOWSTATE;
        this.windowOptions = {};
        //because we were doing this[i]=params[i] in the constructor jscrambler was creating a reference to "this" above _super_, causing everything to break and it made me cry.
        this.doConstruction(params);
        this.eventManager = new WindowEventManager_1.WindowEventManager({ name: this.name });
        this.TITLE_CHANGED_CHANNEL = "Finsemble." + this.name + ".titleChanged";
        this.componentKey = util.camelCase("activeWorkspace", this.name, this.name);
        this.windowKey = util.camelCase("activeWorkspace", this.name);
        FinsembleWindow.bindFunctions(this);
        this.setupListeners(this.name);
        this.listenForEvents();
    }
    //allows backwards compatibility.
    standardizeEventName(event) {
        switch (event) {
            //all of these should be deprecated in 3.5ish.
            case "bounds-set":
            case "stoppedMoving":
                return "bounds-change-end";
            case "startedMoving":
                return "bounds-change-start";
            case "bringToFront":
                return "broughtToFront";
            case "setParent":
                return "parent-set";
            case "clearParent":
                return "parent-unset";
        }
        return event;
    }
    _eventHandled(interceptor, guid, canceled = false) {
        logger_1.default.system.debug("FinsembleWindow._eventHandled public", interceptor.event, this.identifier.windowName, guid, canceled);
        if (interceptor.delayable)
            routerClientInstance_1.default.publish(constants.EVENT_INTERRUPT_CHANNEL + "." + guid, { canceled: canceled });
    }
    addEventListener(eventName, handler) {
        logger_1.default.system.info("EVENT TAG. Event listener added", eventName, "on ", this.name);
        eventName = this.standardizeEventName(eventName);
        // We send this guid so that Window service can keep track of individual listeners for event interruption.
        let guid = Date.now() + "_" + Math.random();
        this.queryWindowService("addEventListener", { eventName: eventName, guid: guid });
        this.eventManager.listenForRemoteEvent(eventName, handler);
        let delayable = constants.INTERRUPTIBLE_EVENTS.includes(eventName);
        let cancelable = constants.INTERRUPTIBLE_EVENTS.includes(eventName);
        let interceptor = new FinsembleEvent_1.FinsembleEvent({
            source: this,
            event: eventName,
            delayable: delayable,
            cancelable: cancelable
        });
        var internalHandler = (data) => {
            logger_1.default.system.info("EVENT TAG. Internal event handler", eventName, "on ", this.name);
            // TODO: need to create event list with properties:
            interceptor.setData(data);
            handler(interceptor); // this is where a handler can delay the event
            if (delayable && interceptor.delayed) { // if delayed, wait for done
                routerClientInstance_1.default.publish(constants.EVENT_INTERRUPT_CHANNEL + "." + guid, { delayed: true });
                interceptor.addListener("done", (response) => {
                    this._eventHandled(interceptor, guid, response.canceled);
                });
            }
            else { // if not delayed, it is done.
                this._eventHandled(interceptor, guid);
            }
        };
        //We want the final handler that's invoked is
        this.eventManager.addListener(eventName, internalHandler);
        if (!this.eventlistenerHandlerMap[eventName]) {
            this.eventlistenerHandlerMap[eventName] = [];
        }
        this.eventlistenerHandlerMap[eventName].push({
            handler: handler,
            internalHandler: internalHandler,
            interceptor: interceptor,
            guid: guid
        });
    }
    removeEventListener(eventName, handler) {
        eventName = this.standardizeEventName(eventName);
        const promiseResolver = async (resolve) => {
            if (!this.eventlistenerHandlerMap[eventName]) { // trying to remove non-existent handler.
                logger_1.default.system.error("trying to remove non-existent handler", eventName);
                return;
            }
            for (var i = this.eventlistenerHandlerMap[eventName].length - 1; i >= 0; i--) {
                let handlerStoredData = this.eventlistenerHandlerMap[eventName][i];
                if (handlerStoredData.handler === handler) {
                    this.eventManager.removeListener(eventName, handlerStoredData.internalHandler);
                    handlerStoredData.interceptor.removeAllListeners();
                    routerClientInstance_1.default.publish(constants.EVENT_INTERRUPT_CHANNEL + "." + handlerStoredData.guid, { delayed: false, canceled: false });
                    await this.queryWindowService("removeEventListener", { eventName: eventName, guid: handlerStoredData.guid });
                    this.eventlistenerHandlerMap[eventName].splice(i, 1);
                    resolve();
                }
            }
        };
        return new Promise(promiseResolver);
    }
    listenForEvents() {
        this.wrapStateChangeSubscription = routerClientInstance_1.default.subscribe("Finsemble.Component.State." + this.name, this.handleWrapStateChange);
    }
    windowServiceChannelName(channelTopic) { let name = this.name || this.windowName; return `WindowService-Request-${channelTopic}`; }
    eventChannelName(channelTopic) { let name = this.name || this.windowName; return `WindowService-Event-${name}-${channelTopic}`; }
    listenForBoundsSet() {
        this.eventManager.listenForRemoteEvents(["bounds-change-start", "bounds-changing", "bounds-change-end"]);
    }
    animate(params = {}, callback = Function.prototype) {
        this.queryWindowService("animate", params, callback);
    }
    getWindowStore(cb) {
        if (window._FSBLCache.windowStore) {
            return cb(window._FSBLCache.windowStore);
        }
        distributedStoreClient_1.default.createStore({ store: "Finsemble-Windows", global: true }, (err, store) => {
            window._FSBLCache.windowStore = store;
            cb(store);
        });
    }
    doConstruction(params) {
        //TODO this is the same as wrap (eventually this should spawn)
        if (!params.setWindowType && !params.windowType) { //Default WindowType
            params.windowType = "OpenFinWindow";
        }
        if (params.windowType) { //We need to make a specific kind of Window
            params.setWindowType = params.windowType;
            delete params.windowType; //Prevent infinite loop
            let BW = FinsembleWindow; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the FinsembleWindow here is of type any -- basically don't worry about its type.
            var childClassObject = new BW(params);
            //childClassObject.windowType = windowType;
            return childClassObject;
        } //We are a specfic kind of window
        if (params) {
            for (var i in params) {
                this[i] = params[i];
            }
        }
        if (!this.name)
            this.name = params.windowName;
        this.windowType = this.setWindowType;
    }
    static registerType(name, type) {
        let BW = FinsembleWindow; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the FinsembleWindow here is of type any -- basically don't worry about its type.
        if (!BW.types) {
            BW.types = {};
        }
        BW.types[name] = type;
    }
    /**
     * This is used to bind all functions only in FinsembleWindow and not in the child wrappers to the wrappers. Without this binding, the value of "this" in the functions is wrong.
     * @param {} obj
     */
    static bindFunctions(obj) {
        obj.setParent = obj.setParent.bind(obj);
        obj.getParent = obj.getParent.bind(obj);
        obj.eventChannelName = obj.eventChannelName.bind(obj);
        obj.windowServiceChannelName = obj.windowServiceChannelName.bind(obj);
        obj.setupListeners = obj.setupListeners.bind(obj);
        obj.onTitleChanged = obj.onTitleChanged.bind(obj);
        obj.handleWrapRemoveRequest = obj.handleWrapRemoveRequest.bind(obj);
        obj.listenForBoundsSet = obj.listenForBoundsSet.bind(obj);
        obj._eventHandled = obj._eventHandled.bind(obj);
    }
    // set up this window's listeners
    setupListeners(name) {
        logger_1.default.system.debug("FinsembleWindow parent change notification setup", name);
        this.parentSubscribeID = routerClientInstance_1.default.subscribe(`Finsemble.parentChange.${name}`, (err, message) => {
            if (err) {
                logger_1.default.system.error("FinsembleWindow parent change notification error", err);
            }
            else {
                var parentState = message.data;
                parentState = parentState || {};
                if (parentState.type == "Added") {
                    logger_1.default.system.debug("FinsembleWindow Parent Notification: window.addedToStack listener", parentState);
                    this.setParent(parentState.stackedWindowIdentifier);
                }
                else if (parentState.type == "Removed") {
                    logger_1.default.system.debug("FinsembleWindow Parent Notification: window.removedFromStack listener", parentState);
                    this.clearParent();
                }
                else if (parentState.type) { // if defined but unknown type
                    logger_1.default.system.error("FinsembleWindow Parent Notification: unknown type", parentState);
                }
            }
        });
        this.TITLE_CHANGED_SUBSCRIPTION = routerClientInstance_1.default.subscribe(this.TITLE_CHANGED_CHANNEL, this.onTitleChanged);
    }
    onTitleChanged(err, response) {
        if (!response || !response.data || typeof response.data !== "string")
            return;
        //this.windowOptions.title = response.data;
        this.eventManager.trigger("title-changed", {
            title: response.data
        });
    }
    static getInstance(params, cb = Function.prototype) {
        let myName = system_1.System.Window.getCurrent().name;
        if (params && params.windowName) {
            params.name = params.windowName;
        }
        params = clone(params); // this function modifies params so clone to be safe
        if (!params || !params.name)
            return cb("name is required");
        params.windowName = params.name;
        async function promiseResolver(resolve, reject) {
            //Return early if we already have the wrap cached.
            if (window._FSBLCache.windows[params.name]) {
                logger_1.default.system.debug("WRAP LIFECYCLE:", params.name, "Window found in the cache, returning without going to the Launcher");
                let wrap = window._FSBLCache.windows[params.name];
                //@exit
                resolve({ wrap });
                return cb(null, wrap);
            }
            //If we already have all of the information, just call createWrap.
            if (params.uuid && params.name) {
                if (!params.windowIdentifier) {
                    params.windowIdentifier = {
                        uuid: params.uuid,
                        name: params.name,
                        windowName: params.name,
                        windowType: params.windowType
                    };
                }
                if (params.waitForReady !== false) {
                    try {
                        await FinsembleWindow._windowReady(params.windowName); // wait to ensure the window is fully ready in the window service
                    }
                    catch (err) {
                        reject(err);
                        return cb(err, null);
                    }
                }
                logger_1.default.system.debug("WRAP LIFECYCLE:", params.name, "All information for wrap passed in, creating wrap locally");
                //Multiple requests for the same window could've come in at once. Right before we create this wrap, we should check that it hasn't been cached while we were waiting for _windowReady to resolve.
                if (window._FSBLCache.windows[params.name]) {
                    logger_1.default.system.debug("WRAP LIFECYCLE:", params.name, "Window found in the cache, returning without going to the Launcher");
                    let wrap = window._FSBLCache.windows[params.name];
                    //@exit
                    resolve({ wrap });
                    return cb(null, wrap);
                }
                let { wrap } = await FinsembleWindow._createWrap(params);
                //@exit
                resolve({ wrap });
                return cb(null, wrap);
            }
            if (params.waitForReady !== false) {
                try {
                    await FinsembleWindow._windowReady(params.windowName); // wait to ensure the window is fully ready in the window service
                }
                catch (err) {
                    reject(err);
                    return cb(err, null);
                }
            }
            //All we have is a windowName. we send a request to the launcher for more information so that we can construct the proper object. This also the place where
            routerClientInstance_1.default.query("WindowService-Request-getWindowIdentifier", { windowName: params.name, requester: myName }, onWrapInformationReceived);
            async function onWrapInformationReceived(err, response) {
                if (err) {
                    logger_1.default.system.error(err);
                    //@exit
                    reject(err);
                    return cb(err, null);
                }
                if (window._FSBLCache.windows[params.name]) {
                    let wrap = window._FSBLCache.windows[params.name];
                    logger_1.default.system.debug("WRAP LIFECYCLE:", params.name, "Information received from launcher, but wrap exists in cache. Returning cached wrap.");
                    //@exit
                    resolve({ wrap });
                    return cb(null, wrap);
                }
                let { identifier } = response.data;
                if (identifier.windowName) {
                    identifier.name = identifier.windowName;
                }
                logger_1.default.system.debug("WRAP LIFECYCLE:", params.name, "Information received from launcher. Creating wrap.");
                params.retrievedIdentifier = identifier;
                let { wrap } = await FinsembleWindow._createWrap(params);
                if (response.data.descriptor) {
                    wrap.descriptor = response.data.descriptor;
                }
                //@exit
                resolve({ wrap });
                cb(null, wrap);
            }
        }
        return new Promise(promiseResolver);
    }
    static _createWrap(params) {
        function promiseResolver(resolve, reject) {
            let identifier = params.retrievedIdentifier || params.windowIdentifier;
            let wrap = null;
            if (typeof window._FSBLCache.windowAttempts[params.name] === "undefined")
                window._FSBLCache.windowAttempts[params.name] = 0;
            //OpenfinApplication is essentially just an openfinWindow in its own process. We can wrap it just like a window.
            if (!params.setWindowType && !identifier.windowType || identifier.windowType === "OpenFinApplication") { //Default WindowType
                identifier.windowType = "OpenFinWindow";
            }
            //Top level keeps important info (e.g., uuid, name, windowType).
            let paramsForWindow = Object.assign({}, identifier);
            //Also pull in anything that was passed into the constructor (e.g., windowDescriptor, etc);
            paramsForWindow = Object.assign(paramsForWindow, params);
            paramsForWindow.setWindowType = paramsForWindow.windowType;
            delete paramsForWindow.windowType; //Prevent infinite loop
            logger_1.default.system.debug("WRAP LIFECYCLE: Placing wrap into the local cache.", identifier.windowName);
            let BW = FinsembleWindow; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the FinsembleWindow here is of type any -- basically don't worry about its type.
            window._FSBLCache.windows[identifier.windowName] = new BW(paramsForWindow);
            wrap = window._FSBLCache.windows[identifier.windowName];
            wrap.windowType = identifier.windowType;
            wrap.identifier = identifier;
            wrap.addEventListener("closed", wrap.handleWrapRemoveRequest);
            wrap.addEventListener("maximized", () => {
                wrap.windowState = FinsembleWindow.WINDOWSTATE.MAXIMIZED;
            });
            wrap.addEventListener("minimized", () => {
                wrap.windowState = FinsembleWindow.WINDOWSTATE.MINIMIZED;
            });
            wrap.addEventListener("restored", () => {
                wrap.windowState = FinsembleWindow.WINDOWSTATE.NORMAL;
            });
            //window.addEventListener("beforeunload", wrap.handleWrapRemoveRequest);
            resolve({ wrap });
        }
        return new Promise(promiseResolver);
    }
    static _getRemoveWrapChannel(name) {
        return `${system_1.System.Window.getCurrent().name}.removeWrap.${name}`;
    }
    // this routine handles the close event, but also called without event from FSBL
    async handleWrapRemoveRequest(event) {
        if (event)
            event.wait();
        logger_1.default.system.debug("WRAP Destructor. Removing cached window", this.name, "in ", window.name);
        //wrap is the openfin or stacked window. if the removeListeners function exists, we remove all listeners we added during the lifecycle of that window wrapper.
        if (this.removeListeners) {
            this.removeListeners();
        }
        //Remove all event listeners.
        for (let eventName in this.eventlistenerHandlerMap) {
            console.log("Event name in for loop", eventName);
            let events = this.eventlistenerHandlerMap[eventName];
            for (let i = 0; i < events.length; i++) {
                logger_1.default.system.log("WRAP Destructor. removeEventListener", eventName, this.name, "in", window.name);
                await this.removeEventListener(eventName, events[i].handler);
                console.log("Event name listener removed", eventName);
            }
        }
        logger_1.default.system.log("WRAP Destructor. removeEventListener DONE");
        console.log("handleWrapRemoveRequest name Done!");
        if (event)
            event.done();
        this.eventManager.cleanup();
        //If we were listening for title changes, unsubscribe.
        this.cleanupRouter();
        if (this.name !== window.name) {
            delete window._FSBLCache.windows[this.name];
            delete window._FSBLCache.windowAttempts[this.name];
        }
    }
    cleanupRouter() {
        const REMOVE_WRAP_CHANNEL = FinsembleWindow._getRemoveWrapChannel(this.name);
        routerClientInstance_1.default.removeResponder(REMOVE_WRAP_CHANNEL);
        if (this.TITLE_CHANGED_SUBSCRIPTION) {
            routerClientInstance_1.default.unsubscribe(this.TITLE_CHANGED_SUBSCRIPTION);
        }
        routerClientInstance_1.default.unsubscribe(this.wrapStateChangeSubscription);
    }
    onReady(callback) {
        if (this.wrapState === "ready") {
            callback();
        }
        this.eventManager.on("ready", callback);
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Common template for window-function requests to window service -- see public functions
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @param {string} methodName method name (e.g. "minimize", "maximize")
     * @param {object} params
     * @param {function=} callback
     * @memberof FinsembleWindow
     * @private
     */
    queryWindowService(methodName, params, callback = Function.prototype) {
        const promiseResolver = async (resolve) => {
            if (typeof params === "function") {
                callback = params;
                params = {};
            }
            params = params || {};
            params.windowIdentifier = this.identifier; // add this window's identifier
            // if Logger debug is enable, then add callstack to query parameters for debugging -- shows where public window requests originated
            if (logger_1.default.setting().system.Debug) {
                params.callstack = logger_1.default.callStack(); // add callstack to query for debugging -- shows where public window requests originated
            }
            logger_1.default.system.debug("FinsembleWindow.queryWindowService", this.windowServiceChannelName(methodName), params);
            var responseData = null;
            routerClientInstance_1.default.query(this.windowServiceChannelName(methodName), params, (err, queryResponseMessage) => {
                if (err) {
                    logger_1.default.system.warn(`WindowService.${methodName}: failed`, err);
                    console.debug(`WindowService.${methodName}: failed`, err);
                }
                else {
                    responseData = queryResponseMessage.data;
                    logger_1.default.system.debug(`${this.windowServiceChannelName(methodName)} successful`, responseData);
                    console.debug(`${this.windowServiceChannelName(methodName)} successful`, responseData);
                }
                resolve();
                callback(err, responseData);
            });
        };
        return new Promise(promiseResolver);
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Core Window Functions: can be invoked by any service or component.  Most are sent to the WindowService to be exectuted.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Core Public Window Functions: can be invoked by any service or component.  These are sent to the WindowService to be exectuted.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    minimize(params, callback) {
        this.queryWindowService("minimize", params, callback);
    }
    maximize(params, callback) {
        this.queryWindowService("maximize", params, callback);
    }
    restore(params, callback) {
        this.queryWindowService("restore", params, callback);
    }
    blur(params = {}, callback = Function.prototype) {
        this.queryWindowService("blur", params, callback);
    }
    focus(params = {}, callback = Function.prototype) {
        this.queryWindowService("focus", params, callback);
    }
    bringToFront(params, callback) {
        this.queryWindowService("bringToFront", params, callback);
    }
    isShowing(params, callback) {
        this.queryWindowService("isShowing", params, callback);
    }
    setBounds(params, callback) {
        if (typeof params !== "function" && !params.bounds) {
            let oldParams = params;
            params = {};
            params.bounds = oldParams;
        }
        this.queryWindowService("setBounds", params, callback);
    }
    getBounds(params, callback = Function.prototype) {
        const promiseResolver = (resolve) => {
            this.queryWindowService("getBounds", params, (err, bounds) => {
                resolve({ err, data: bounds });
                callback(err, bounds);
            });
        };
        return new Promise(promiseResolver);
    }
    updateOptions(params, callback) {
        this.queryWindowService("updateOptions", params, callback);
    }
    hide(params, callback) {
        this.queryWindowService("hide", params, callback);
    }
    show(params, callback) {
        this.queryWindowService("show", params, callback);
    }
    showAt(params, callback) {
        this.queryWindowService("showAt", params, callback);
    }
    close(params = {}, callback = Function.prototype) {
        logger_1.default.system.debug("WRAP CLOSE. Public close initiated for", this.name);
        this.queryWindowService("close", params, () => {
            logger_1.default.system.debug("WRAP CLOSE. Public close initiated for", this.name);
            callback();
        });
    }
    /**
     *Register a window with docking. Use this if you don't want to use the full initilization function
     *
     * @param {Object} params - can be anything that is passed to docking for window registration. @todo This should be removed soom
     * @param {Function} cb
     * @memberof FSBLWindow
     */
    registerWithDocking(params, cb) {
        routerClientInstance_1.default.query("DockingService.registerWindow", {
            type: this.type,
            windowType: this.windowType,
            windowMsg: params,
            name: this.windowName
        }, cb);
    }
    /**
     *Unregister a window with docking
     *
     * @memberof FSBLWindow
     */
    unRegisterWithDocking() {
        routerClientInstance_1.default.transmit("DockingService.deregisterWindow", { name: this.windowName });
    }
    /**
     *This is if we want to handle the full register/ready state inside of the window
     register with docking
     send the message to laucnher saying that component is ready
     *
     * @memberof FSBLWindow
     */
    initializeWindow(params, cb) {
        this.registerWithDocking(params, () => {
            routerClientInstance_1.default.publish("Finsemble." + this.windowName + ".componentReady", {
                name: this.windowName
            });
        });
    }
    wrapReady() {
        routerClientInstance_1.default.publish("Finsemble." + this.windowName + ".wrapReady", { name: this.windowName, state: "open" });
    }
    setOpacity(params, callback) {
        this.queryWindowService("setOpacity", params, callback);
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Other Baseclass Function: These are common functions shared across derived classess
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Invoked to indicate an operation (e.g. dragging out of tab region) has started. This signals the Docking service to start tracking the mouse location and invoking tiling behavior as needed. Typically inherited (base function only).
     * @param {object} params for future use
     *
     * @example
     *	// dragging tab example using tracking and group
     * 	FinsembleWindow.startTabTileMonitoring();
     *	// if dragging tab is in a group, then remove it given tracking results will decide what to do with the window
     * 	FinsembleWindow.Group.getGroupID(this.identifier, function (err, tileGroupId) {
     * 		if (!err) { // if no error then must be in a tile group
     *			self.Group.removeWindow(this.identifier);
     *		}
     *	});
     */
    startTabTileMonitoring(params) {
        logger_1.default.system.debug("FinsembleWindow.startTabTileMonitoring", params);
        routerClientInstance_1.default.transmit("TabTile.startTabTile", { params });
    }
    /**
     * Invoked by client originating a dragStart that it has has ended. Typically inherited (base function only).
     * @param {object} params for future use
         * @param {function=} callback option callback that support overriding default behavior
     *
     * 	FinsembleWindow.stopTabTileMonitoring(params, function(err, results, defaultTabTileAction) {
     * 		// . . . custom code goes here . . .
     *		defaultTabTileAction(results); // now take default action or call your own function instead
     * 	});
     *
     */
    stopTabTileMonitoring(params, callback) {
        logger_1.default.system.debug("FinsembleWindow.stopTabTileMonitoring", params);
        routerClientInstance_1.default.query("TabTile.stopTabTile", { params }, function (err, queryResponseMessage) {
            if (err) {
                logger_1.default.system.warn("TabTile.stopTabTile: query failed", err);
            }
            else {
                logger_1.default.system.debug("TabTile.stopTabTile results", queryResponseMessage.data);
            }
            var stopTabTileResults = queryResponseMessage.data;
            if (callback) {
                callback(err, stopTabTileResults, this.defaultStopTrackingAction);
            }
            else {
                this.defaultTabTileAction(stopTabTileResults);
            }
        });
    }
    /**
     * Defines default TabTile action for stopTabTileMonitoring.  May be overriden by client -- see example in stopTabTileMonitoring. Typically inherited (base function only).
     *
     * @param {any} stopTabTileResults
     * @memberof FinsembleWindow
     *
     * @private
     */
    defaultTabTileAction(stopTabTileResults) {
        let self = this;
        logger_1.default.system.debug("FinsembleWindow.defaultTabTileAction", stopTabTileResults);
        switch (stopTabTileResults.stoppedLocation) {
            case "OutsideWindow":
                // move window to drop location (since for now assuming only single-tabbed windows)
                break;
            case "TabSection":
                // WindowStack.addWindowToStack(callback) // for when we get to tabbing
                break;
            case "InsideWindow":
                if (stopTabTileResults.tileGroupId) { // if dropped in an existing tile group (which might be the same it was dragging from)
                    self.Group.addWindow(this.identifier, stopTabTileResults.tileGroupId, stopTabTileResults.dropCoordinates);
                }
                else { // if dropped in a separate window outside a tile group
                    self.Group.createGroup(function (newGroupId) {
                        // add dragging window to new tile group, but specify the dropped on window as the starting window in the tile group
                        self.Group.addWindow(this.identifier, newGroupId, stopTabTileResults.dropCoordinates, { startingWindowIdentifier: stopTabTileResults.droppedOnWindowIdentifier });
                    });
                }
                break;
            default:
                logger_1.default.system.error("stopTracking returned an unknown stoppedLocation result", stopTabTileResults);
        }
    }
    mergeBounds(bounds) {
        bounds.right = bounds.left + bounds.width;
        let newBounds = { left: bounds.left, right: bounds.right, width: bounds.width, top: bounds.top, bottom: bounds.top + bounds.height, height: bounds.height };
        let defaultBounds = { defaultLeft: bounds.left, defaultWidth: bounds.width, defaultTop: bounds.top, defaultHeight: bounds.height };
        Object.assign(this.windowOptions, newBounds);
        Object.assign(this.windowOptions, defaultBounds);
        this.windowOptions.bounds = newBounds;
    }
    startMove(params) {
        logger_1.default.system.debug("FinsembleWindow.startMove", params);
        params = params || {};
        params.windowIdentifier = this.identifier; // add this window's identifier
        routerClientInstance_1.default.transmit(this.eventChannelName("startedMoving"), {});
    }
    stopMove(params) {
        logger_1.default.system.debug("FinsembleWindow.stopMove", params);
        params = params || {};
        params.windowIdentifier = this.identifier; // add this window's identifier
        routerClientInstance_1.default.transmit(this.eventChannelName("stoppedMoving"), {});
    }
    /**
     * Get Monitor for this window
     *
     * @param {function} cb Callback
     */
    getMonitor(cb) {
        routerClientInstance_1.default.query("DockingService.getMonitorForWindow", { windowIdentifier: this.identifier }, (err, message) => message ? cb(message.data) : cb());
    }
    /**
     * Given params, will return the component state. Either the params to search for, or the entire state.
     *
     * @param {object} params
     * @param {string} params.field field
     *  @param {array} params.fields fields
     * @param {function} cb Callback
     */
    getComponentState(params, cb) {
        this.queryWindowService("getComponentState", params, cb);
    }
    /**
     * Given params, will return the window state. Either the params to search for, or the entire state.
     *
     * @param {object} params
     * @param {string} params.field field
     *  @param {array} params.fields fields
     * @param {function} cb Callback
     */
    getWindowState(params, cb) {
        this.queryWindowService("getWindowState", params, cb);
    }
    /**
     * Given params, will set the component state. Any fields included will be added to the state
     *
     * @param {object} params
     * @param {string} params.field field
     *  @param {array} params.fields fields
     * @param {function} cb Callback
     */
    setComponentState(params, cb) {
        this.queryWindowService("setComponentState", params, cb);
    }
    /**
     * Given params, will set the window state. Any fields included will be added to the state
     *
     * @param {object} params
     * @param {string} params.field field
     *  @param {array} params.fields fields
     * @param {function} cb Callback
     */
    setWindowState(params, cb) {
        this.queryWindowService("setWindowState", params, cb);
    }
    saveCompleteWindowState(params, cb) {
        this.queryWindowService("saveCompleteWindowState", params, cb);
    }
    /**
     *Cancels startTabTileMonitoring. Example use is a user "excapes" out of a drag operation.
     *
     * @param {object} params for future use
     * @memberof FinsembleWindow
     */
    cancelTabTileMonitoring(params) {
        logger_1.default.system.debug("FinsembleWindow.cancelTabTileMonitoring", params);
        routerClientInstance_1.default.transmit("TabTile.cancelTabTile", { params });
    }
    /**
     * Return the parent window's wrapper (e.g. StackedWindow).
     *
     */
    getParent(cb) {
        if (this.settingParent) {
            FinsembleWindow.getInstance(this.settingParent, (err, stackWrap) => {
                cb(null, stackWrap);
            });
        }
        else if (this.parentWindow) {
            cb(null, this.parentWindow);
        }
        else {
            cb(null, null);
        }
    }
    /**
     * Sets the parent window (e.g. stackedWindow) and emits "setParent" event to window listeners.
     *
     * @param {object} stackedWindowIdentifier identifer of window to set as parent (e.g. stackedWindowIdentifier).
     *
     */
    setParent(stackedWindowIdentifier, cb = Function.prototype) {
        if (this.settingParent)
            return cb("Too many calls to setParent", null); //TODO check if the parent is different
        this.settingParent = stackedWindowIdentifier;
        if (this.parentWindow && (this.parentWindow.name === stackedWindowIdentifier.windowName)) {
            logger_1.default.system.debug("FinsembleWindow.setParent already set", stackedWindowIdentifier);
            this.settingParent = false;
            cb(null, this.parentWindow);
        }
        else {
            this.queryWindowService("setParent", stackedWindowIdentifier, (err, message) => {
                logger_1.default.system.debug("FinsembleWindow.setParent", stackedWindowIdentifier);
                FinsembleWindow.getInstance(stackedWindowIdentifier, (err, wrappedStackedWindow) => {
                    if (!err) {
                        logger_1.default.system.debug("FinsembleWindow.setParent wrap success", stackedWindowIdentifier);
                        console.debug("FinsembleWindow.setParent wrap success", this, wrappedStackedWindow);
                        this.parentWindow = wrappedStackedWindow;
                        if (!this.parentWindow.windowType.includes("StackedWindow")) {
                            logger_1.default.system.error("FinsembleWindow.setParent error", this.parentWindow.name, stackedWindowIdentifier.windowName);
                        }
                    }
                    else {
                        logger_1.default.system.error("FinsembleWindow.setParent error", err);
                    }
                    this.settingParent = false;
                    this.eventManager.trigger("parent-set", { parentName: this.parentWindow.name });
                    cb(err, wrappedStackedWindow);
                });
            });
        }
    }
    /**
     * Clears the parent reference and emits "clearParent" event to window listeners. Used only internally.
     *
     * @private
     *
     */
    clearParent() {
        logger_1.default.system.debug("FinsembleWindow.clearParent", this.parentWindow);
        this.eventManager.trigger("parent-unset", {
            parentName: this.parentWindow.name
        });
        this.parentWindow = null;
    }
    setTitle(title) {
        logger_1.default.system.debug("Title change", title);
        routerClientInstance_1.default.publish(this.TITLE_CHANGED_CHANNEL, title);
    }
    //todo needs to be a windowService query..
    getOptions(cb = Function.prototype) {
        this.queryWindowService("getOptions", {}, cb);
    }
    //CANDIDATES FOR REMOVAL
    //window client adds a callback here. This way, whenever close is called _anywhere_ in the system, it's passed down to the window client and cleanup can happen in the component.
    listenForClose(cb) {
        // let listener = (err, response) => {
        let listener = () => {
            delete window._FSBLCache.windows[this.name];
            delete window._FSBLCache.windowAttempts[this.name];
            //If the window that the wrap belongs to is the one calling close, just call the openfin method. Otherwise, some other window is trying to close it - so we send a message to that window, which will eventually close itself.
            for (let event in this.eventlistenerHandlerMap) {
                for (let i = 0; i < this.eventlistenerHandlerMap[event].length; i++) {
                    this.eventlistenerHandlerMap[event][i].interceptor.removeAllListeners();
                }
            }
            this.eventManager.cleanup();
            routerClientInstance_1.default.removeListener(`${this.identifier.windowName}.close`, listener);
            // cb(response.data);
            cb();
        };
        this.eventManager.listenForRemoteEvent("closed", listener);
    }
    //TO BE REMOVED WHEN TABBING API IS PUT IN PLACe
    /**
     * Handles common housekeeping checks and modifications on params at the beginning of each private window-management function
     *
     * @param {string} methodName method name (e.g. "minimize", "maximize")
     * @param {object} params
     * @memberof StackedWindow
     * @private
     */
    _privateManagementPreface(methodName, params, callback) {
        if (typeof params === "function") {
            logger_1.default.system.error("StackedWindowWrapper.wrapPreface bad params", params);
        }
        params = params || {};
        params.stackedWindowIdentifier = { windowName: this.identifier.windowName, windowType: this.identifier.windowType }; // add this window's identifier
        logger_1.default.system.debug(`StackedWindow.${methodName}  _privateManagementPreface`, params);
        return params;
    }
    /**
     * Returns store for stacked window.  Example usuage below.
     *
     * @memberof StackedWindow
     *
     * @example
     * 		// get the state for one stacked window from the store
     * 		getStore().getValue({ field: stackedWindowIdentifier.name, function (err, stackedWindowState) {}
     *			where stackedWindowState is an object with the following properties
     *				{
     *					stackedWindowIdentifier: the stacked window identifier
     *					childWindowIdentifiers: the window identifiers for all children in the stacked window
     *					visibleWindowIdentifier: the window identifier for the currently visible window
     *					bounds: the current window bounds/corrdiantes for the stacked window (i.e. the current bounds of the visisble window)
     *				}
     */
    getStore(callback = Function.prototype) {
        return this.getWindowStore(callback);
    }
    /**
     * Adds window as a child to a stacked window.  Adds to the top of the stack, or if specied to a specific location in the stack;
     *
     * @param {object=} params
         * @param {object} params.stackedWindowIdentifier stacked window to operate on stacked window to operate on
         * @param {object} params.windowIdentifier window to add
         * @param {number=} params.position the location in the stack to push the window.  Location 0 is the bottom of the stack. Defaults to the top of stack.
         * @param {boolean=} params.noSave if true then don't save the store after updating it (will be saved by caller)
     * @param {function=} callback function(err)
     * @memberof StackedWindow
     */
    addWindow(params, callback = Function.prototype) {
        params = this._privateManagementPreface("addWindow", params);
        const promiseResolver = (resolve) => {
            routerClientInstance_1.default.query("StackedWindow.addWindow", params, (err, queryResponseMessage) => {
                logger_1.default.system.debug("StackedWindow.addWindow callback", err, queryResponseMessage);
                callback(err, queryResponseMessage.data);
                resolve({ err, data: queryResponseMessage.data });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Removes a child window from a stacked window.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.
     *
         * @param {object} params
    .	 * @param {object} params.stackedWindowIdentifier stacked window to operate on
     * @param {object} params.windowIdentifier window to remove
     * @param {boolean=} params.noDocking if true then do not register removed window with docking (the workspace is unaffected)
     * @param {function=} callback function(err)
     * @memberof StackedWindow
     */
    removeWindow(params, callback = Function.prototype) {
        params = this._privateManagementPreface("removeWindow", params);
        const promiseResolver = (resolve) => {
            routerClientInstance_1.default.query("StackedWindow.removeWindow", params, (err, queryResponseMessage) => {
                logger_1.default.system.debug("StackedWindow.removeWindow callback", err, queryResponseMessage);
                callback(err, queryResponseMessage.data);
                resolve({ err, data: queryResponseMessage.data });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Removes a window from the stack then closes it.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.
     *
         * @param {object} params
    .	 * @param {object} params.stackedWindowIdentifier stacked window to operate on
     * @param {object} params.windowIdentifier window to delete
     * @param {function=} callback function(err)
     * @memberof StackedWindow
     */
    deleteWindow(params, callback = Function.prototype) {
        params = this._privateManagementPreface("deleteWindow", params);
        const promiseResolver = (resolve) => {
            routerClientInstance_1.default.query("StackedWindow.deleteWindow", params, (err, queryResponseMessage) => {
                logger_1.default.system.debug("StackedWindow.deleteWindow callback", err, queryResponseMessage);
                callback(err, queryResponseMessage.data);
                resolve({ err, data: queryResponseMessage.data });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Sets the visible window within the stack.  The previously visible window in stack will be automatically hidden.
     *
         * @param {object} params
    .	 * @param {object} params.stackedWindowIdentifier stacked window to operate on
     * @param {object} params.windowIdentifier
     * @param {function=} callback function(err)
     * @memberof StackedWindow
     */
    setVisibleWindow(params, callback = Function.prototype) {
        params = this._privateManagementPreface("setVisibleWindow", params);
        const promiseResolver = (resolve) => {
            routerClientInstance_1.default.query("StackedWindow.setVisibleWindow", params, (err, queryResponseMessage) => {
                logger_1.default.system.debug("StackedWindow.setVisibleWindow callback", err, queryResponseMessage);
                callback(err, queryResponseMessage.data);
                resolve({ err, data: queryResponseMessage.data });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Reorders the stack, but odes not affect visibility
     *
         * @param {object} params
    .	 * @param {object} params.stackedWindowIdentifier stacked window to operate on
     * @param {array} params.windowIdentifiers array of windowIdentifiers which provides the new order
     * @param {function=} callback function(err)
     * @memberof StackedWindow
     */
    reorder(params, callback = Function.prototype) {
        params = this._privateManagementPreface("reorder", params);
        const promiseResolver = (resolve) => {
            routerClientInstance_1.default.query("StackedWindow.reorder", params, (err, queryResponseMessage) => {
                logger_1.default.system.debug("StackedWindow.reorder callback", err, queryResponseMessage);
                callback(err, queryResponseMessage.data);
                resolve({ err, data: queryResponseMessage.data });
            });
        };
        return new Promise(promiseResolver);
    }
}
FinsembleWindow.WINDOWSTATE = {
    NORMAL: 0,
    MINIMIZED: 1,
    MAXIMIZED: 2,
    HIDDEN: 3
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The window wrappers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Async wrap. Given a name/windowName, it will query the launcher for information required to wrap the window. Then it will return an object that can be operated on. Also this creates a cache of all wrapped windows for performance. Our clients wrap the same window often and this was causing excessive messaging to the store and degrading performance.
 * @param {*} params Need only name in most cases. For service and other cases where the window is not part of what the launcher considers active windows, name and uuid are required
 * @param {*} cb
 */
FinsembleWindow.wrap = FinsembleWindow.getInstance;
FinsembleWindow._windowReady = function (windowName) {
    logger_1.default.system.debug(`windowServiceReady: ${windowName} starting`);
    const promiseResolver = async (resolve, reject) => {
        if (windowName === "Finsemble" || windowName.toLowerCase().endsWith("service")) {
            reject("Cannot Wrap Service Manager or Services");
        }
        else { // wait only for components managed by the window service
            logger_1.default.system.debug(`windowServiceReady: ${windowName} waiting`);
            let subscribeId = routerClientInstance_1.default.subscribe("Finsemble.Component.State." + windowName, (err, response) => {
                let state = response.data.state;
                logger_1.default.system.debug(`windowServiceReady: ${windowName} state change: ${state}`);
                switch (state) {
                    case "ready":
                    case "reloading":
                    case "closing": // if ready state or any state beyond
                        logger_1.default.system.debug(`windowServiceReady: ${windowName} ${state}`);
                        routerClientInstance_1.default.unsubscribe(subscribeId);
                        resolve();
                        break;
                }
            });
        }
    };
    return new Promise(promiseResolver);
};
exports.FinsembleWindow = FinsembleWindow;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
const baseClient_1 = __webpack_require__(13);
const windowClient_1 = __webpack_require__(84);
const util = __webpack_require__(10);
const validate_1 = __webpack_require__(9); // Finsemble args validator
const system_1 = __webpack_require__(4);
const logger_1 = __webpack_require__(2);
const FinsembleWindow_1 = __webpack_require__(80);
/** The global `window` object. We cast it to a specific interface here to be
 * explicit about what Finsemble-related properties it may have. */
const Globals = window;
/**
 * An object that includes all the potential identifications for a window.
 * For instance, one can try and obtain a reference for a window if some of these values are known.
 *
 * @typedef WindowIdentifier
 * @property {string} [windowName] The name of the physical HTML window, or a reference to a native window that was launched with Assimilation service
 * @property {string} [uuid] Optional uuid of a particular OpenFin application process
 * @property {string} [componentType] The type of component
 * @property {number|string} [monitor] The number of the monitor. Potentially used to disambiguate multiple components with the same name (for searches only)
 */
/**
 * Finsemble windowDescriptor.
 * The windowDescriptor includes the following values.
 *
 * @typedef WindowDescriptor
 * @property {string} [url] url to load (if HTML5 component).
 * @property {string} [native] The name of the native app (if a native component launched by Assimilation service).
 * @property {string} name The name of the window (sometimes randomly assigned).
 * @property {string} componentType The type of component (from components.json).
 */
/**
 *
 * A convenient assembly of native JavaScript window, `OpenFin` window and windowDescriptor.
 *
 * @typedef RawWindowResult
 * @property {WindowDescriptor} windowDescriptor The window descriptor.
 * @property {fin.desktop.Window} finWindow The `OpenFin` window.
 * @property {Window} browserWindow The native JavaScript window.
 *
 */
// A map of related menus that is kept by handleToggle.
var okayToOpenMenu = {};
/**
 *
 * @introduction
 * <h2>Launcher Client</h2>
 * The Launcher Client handles spawning windows. It also maintains the list of spawnable components.
 *
 *
 *
 * @hideconstructor
 *
 * @constructor
 */
class LauncherClient extends baseClient_1._BaseClient {
    constructor(params) {
        super(params);
        validate_1.default.args(params, "object=") && params && validate_1.default.args2("params.onReady", params.onReady, "function=");
        this.windowClient = params.clients.windowClient;
    }
    /** @alias LauncherClient# */
    //var self = this;
    //BaseClient.call(this, params);
    /**
     * Get a list of registered components (those that were entered into *components.json*).
     *
     * @param {Function} [cb] Callback returns an object map of components. Each component object
     * contains the default config for that component.
     */
    getComponentList(cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve) => {
            this.routerClient.query("Launcher.componentList", {}, function (err, response) {
                cb(err, response.data);
                resolve({ err, data: response.data });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Get the component config (i.e. from components.json) for a specific component.
     *
     * @param {String} componentType The type of the component.
     * @param {Function} [cb] Callback returns the default config (windowDescriptor) for the requested componentType.
     *
     */
    getComponentDefaultConfig(componentType, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve) => {
            this.routerClient.query("Launcher.componentList", {}, function (err, response) {
                const data = response.data[componentType];
                cb(err, data);
                resolve({ err, data });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Gets monitorInfo (dimensions and position) for a given windowIdentifier or for a specific monitor.
     * If neither the identifier or monitor are provided then the monitorInfo for the current window is returned.
     *
     *
     * The information returned contains:
     *
     * **monitorRect** - The full dimensions for the monitor.
     *
     * **availableRect** - The dimensions for the available space on the monitor (less windows toolbars).
     *
     * **unclaimedRect** - The dimensions for available monitor space less any space claimed by components (such as the application Toolbar).
     *
     * Each of these is supplemented with the following additional members:
     *
     * **width** - The width as calculated (right - left).
     *
     * **height** - The height as calculated (bottom - top).
     *
     * **position** - The position of the monitor, numerically from zero to X. Primary monitor is zero.
     *
     * **whichMonitor** - Contains the string "primary" if it is the primary monitor.
     *
     * @param  {object} [params]               Parameters
     * @param  {WindowIdentifier} [params.windowIdentifier] The windowIdentifier to get the monitorInfo. If undefined, then the current window.
     * @param  {number|string} [params.monitor] If passed then a specific monitor is identified. Valid values are the same as for {@link LauncherClient#spawn}.
     * @param  {Function} [cb]               Returns a monitorInfo object containing the monitorRect, availableRect and unclaimedRect.
     */
    getMonitorInfo(params, cb = Function.prototype) {
        var self = this;
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve) => {
            util.getMyWindowIdentifier(function (myWindowIdentifier) {
                if (!params.windowIdentifier) {
                    params.windowIdentifier = myWindowIdentifier;
                }
                self.routerClient.query("Launcher.getMonitorInfo", params, function (err, response) {
                    if (cb) {
                        cb(err, response.data);
                    }
                    resolve({ err, data: response.data });
                });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Gets monitorInfo (dimensions and position) for all monitors. Returns an array of monitorInfo objects. See {@link LauncherClient#getMonitorInfo} for the format of a monitorInfo object.
     *
     *
     *
     * @param  {Function} [cb]               Returns an array of monitorInfo objects.
     */
    getMonitorInfoAll(cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve, reject) => {
            this.routerClient.query("Launcher.getMonitorInfoAll", {}, function (err, response) {
                if (err) {
                    reject({ err });
                    cb(err);
                }
                resolve({ err, data: response.data });
                cb(err, response.data);
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * A convenience method for dealing with a common use-case, which is toggling the appearance and disappearance of a child window when a button is pressed, aka drop down menus. Simply call this method from the click handler for your element. Your child window will need to close itself on blur events.
     * @param {HTMLElement|selector} element The DOM element, or selector, clicked by the end user
     * @param {windowIdentifier} windowIdentifier Identifies the child window
     * @param {object} params Parameters to be passed to {@link LauncherClient#showWindow} if the child window is allowed to open
     */
    toggleWindowOnClick(element, windowIdentifier, params) {
        var self = this;
        var key = windowIdentifier.windowName + ":" + windowIdentifier.uuid;
        if (!windowIdentifier.windowName)
            key = windowIdentifier.componentType;
        //If the element was clicked while the menu was open then return right away. The menu window will receive a blur event and close. This method is dependent on the fact that blur events are processed before click events. If this turns out to be a problem then put this call inside of a setTimeout().
        if (okayToOpenMenu[key] === false) {
            okayToOpenMenu[key] = true;
            return;
        }
        var onDisplayed = function (showError, showResponse) {
            if (!showResponse)
                return;
            let finWindow = showResponse.finWindow;
            var onBlur = function (blurResponse) {
                okayToOpenMenu[key] = true;
                self.windowClient.isMouseOverDOMElement(element, function (mouseIsOverElement) {
                    okayToOpenMenu[key] = !mouseIsOverElement;
                });
                finWindow.removeEventListener("blurred", onBlur);
            };
            finWindow.addEventListener("blurred", onBlur);
        };
        this.showWindow(windowIdentifier, params, onDisplayed);
    }
    /**
     * Displays a window and relocates/resizes it according to the values contained in params.
     *
     * @param  {WindowIdentifier}   windowIdentifier A windowIdentifier.
     * @param  {object}   params           Parameters. These are the same as {@link LauncherClient#spawn} with the folowing exceptions:
     * @param {any} [params.monitor] Same as spawn() except that null or undefined means the window should not be moved to a different monitor.
     * @param {number | string} [params.left] Same as spawn() except that null or undefined means the window should not be moved from current horizontal location.
     * @param {number | string} [params.top] Same as spawn() except that null or undefined means the window should not be moved from current vertical location.
     * @param {boolean} [params.spawnIfNotFound=false] If true, then spawns a new window if the requested one cannot be found.
     * *Note, only works if the windowIdentifier contains a componentType.*
     * @param {boolean} [params.slave] Cannot be set for an existing window. Will only go into effect if the window is spawned.
     * (In other words, only use this in conjunction with spawnIfNotFound).
     * @param {Function} [cb] Callback to be invoked after function is completed. Callback contains an object with the following information:
     * **windowIdentifier** - The {@link WindowIdentifier} for the new window.
     * **windowDescriptor** - The {@link WindowDescriptor} of the new window.
     * **finWindow** - An `OpenFin` window referencing the new window.
     */
    showWindow(windowIdentifier, params, cb = Function.prototype) {
        validate_1.default.args(windowIdentifier, "object", params, "object=", cb, "function=");
        var self = this;
        if (!params) {
            params = {};
        }
        params = util.clone(params);
        if (!params.staggerPixels && params.staggerPixels !== 0) {
            params.staggerPixels = 100;
        }
        params.windowIdentifier = windowIdentifier;
        const promiseResolver = (resolve) => {
            util.getMyWindowIdentifier(function (myWindowIdentifier) {
                if (!params.relativeWindow) {
                    params.relativeWindow = myWindowIdentifier;
                }
                self.routerClient.query("Launcher.showWindow", params, async function (err, response) {
                    if (err) {
                        resolve({ err });
                        return cb(err);
                    }
                    var newWindowIdentifier = response.data.windowIdentifier;
                    response.data.windowIdentifier.name = response.data.windowIdentifier.windowName;
                    let { wrap } = await FinsembleWindow_1.FinsembleWindow.getInstance({ name: newWindowIdentifier.windowName });
                    response.data.finWindow = wrap;
                    resolve({ err, data: response.data });
                    cb(err, response.data);
                });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Asks the Launcher service to spawn a new component. Any parameter below can also be specified in config/components.json, which will
     * then operate as the default for that value.
     *
     * The launcher parameters mimic CSS window positioning.
     * For instance, to set a full size window use `left=0`,`top=0`,`right=0`,`bottom=0`.
     * This is functionally equivalent to: left=0,top=0,width="100%",height="100%"
     *
     * @param {String} component - Type of the component to launch. If null or undefined, then params.url will be used instead.
     *
     * @param {object} params
     * @param {number|string} [params.monitor="mine"] Which monitor to place the new window.
     * **"mine"** - Place the window on the same monitor as the calling window.
     * A numeric value of monitor (where primary is zero).
     * **"primary"**,**"next"** and **"previous"** indicate a specific monitor.
     * **"all"** - Put a copy of the component on all monitors
     *
     * @param {string} [params.position=unclaimed] Defines a "viewport" for the spawn, with one of the following values:
     *
     * **"unclaimed"** (the default) Positioned based on the monitor space excluding space "claimed" by other components (such as toolbars).
     * For instance, `top:0` will place the new component directly below the toolbar.
     *
     * **"available"** Positioned according to the coordinates available on the monitor itself, less space claimed by the operating system (such as the windows toolbar).
     * For instance, `bottom:0` will place the new component with its bottom flush against the windows toolbar.
     *
     * **"monitor"** Positioned according to the absolute size of the monitor.
     * For instance, `top:0` will place the component overlapping the toolbar.
     *
     * **"relative"** Positioned relative to the relativeWindow.
     * For instance, `left:0;top:0` will join the top left corner of the new component with the top left corner of the relative window.
     *
     * **"virtual"** Positoned against coordinates on the virtual screen.
     * The virtual screen is the full viewing area of all monitors combined into a single theoretical monitor.
     * @param {boolean} [params.dockOnSpawn=false] If true, will automatically dock the window with the "relative" window (dock to the parent window unless specified in params.relativeWindow).
     * Note that you must also position the window in a valid position for docking, for example, by setting the "left" or "top" parameters to "adjacent".
     * @param {number | string} [params.left] A pixel value representing the distance from the left edge of the viewport as defined by "position".
     * A percentage value may also be used, representing the percentage distance from the left edge of the viewport relative to the viewport's width.
     *
     * **"adjacent"** will snap to the right edge of the spawning or relative window.
     *
     * **"center"** will center the window
     *
     * If neither left nor right are provided, then the default will be to stagger the window based on the last spawned window.
     * *Note - the staggering algorithm has a timing element that is optimized based on user testing.*
     *
     * @param {number | string} [params.top] Same as left except related to the top of the viewport.
     * @param {number | string} [params.right] Same as left except releated to the right of the viewport.
     * @param {number | string} [params.bottom] Same as left except related to the bottom of the viewport.
     *
     * @param {number | string} [params.height] A pixel or percentage value.
     * @param {number | string} [params.width] A pixel value or percentage value.
     * @param {boolean} [params.forceOntoMonitor] If true will attempt to make the window no have parts outside the monitor boundary.
     *
     * @param {boolean} [params.ephemeral=false] Indicates that this window is ephemeral.
     * An ephemeral window is a dialog, menu or other window that is temporarily displayed but usually hidden.
     * Ephemeral windows automatically have the following settings assigned: resizable: false, showTaskbarIcon: false, alwaysOnTop: true.
     * *Note, use `options:{autoShow: false}` to prevent an ephemeral widow from showing automatically.*
     *
     * @param {number} [params.staggerPixels=100] Number of pixels to stagger (default when neither left, right, top or bottom are set).

     * @param {boolean} [params.claimMonitorSpace] For use with permanent toolbars.
     * The available space for other components will be reduced by the amount of space covered by the newly spawned component.
     * This will be reflected in the `unclaimedRect` member from API calls that return monitorInfo. Users will be prevented
     * from moving windows to a position that covers the claimed space. See `position: 'unclaimed'`.

     * @param {WindowIdentifier} [params.relativeWindow=current window] The window to use when calculating any relative launches.
     * If not set then the window from which spawn() was called.

     * @param {boolean} [params.slave] If true then the new window will act as a slave to the relativeWindow (or the launching window if relativeWindow is not specified).
     * Slave windows will automatically close when their parent windows close.

     * @param {string} [params.url] Optional url to launch. Overrides what is passed in "component".


     * @param {string} [params.native] @deprecated Please use windowType instead. Optional native application to launch with Assimilation service. Overrides what is passed in "component".

     * @param {string} [params.windowType=openfin] Optional. Describes which type of component to spawn.
     *
     * **openfin** - A normal HTML window.
     *
     * **assimilation** - A window that is managed by the Finsemble assimilation process (usually a native window without source code access). Requires "path" to be specified, which may be the name of an executable on the system path, a system file path or system installed URI.
     *
     * **native** - A native window that has implemented finsemble.dll. Requires "path" to be specified. [For more information](tutorial-RPCService.html).
     *
     * **application** - A standalone application. This launch a component in its own browser process (splintered, giving it dedicated CPU and memory).
     * This can also point to a standalone web application (such as from a third party).
     *
     * @param {string} [params.alias] Used when windowType is "native" or "assimilation". Specifies the alias of a bundled asset.
     *
     * @param {string} [params.path] Used when windowType is "native" or "assimilation". Specifies the path to the application. The path can be:
     * The name of an exe that is on the system path (i.e. notepad.exe).
     * The full path to an executable on the user's machine (i.e. C:\Program Files\app.exe)
     * A system installed uri (i.e. myuri://myapp).
     *
     * When windowType is "native" then additional arguments will be automatically appended to the path or the uri. These arguments can be captured by the native application
     * in order to tie it to Finsemble's window tracking. When building an application with finsemble.dll, this is handled automatically. Those arguments are:
     *
     * **uuid** - A generated UUID that uniquely identifies this window.
     *
     * **left** - The x coordinate of the new window
     *
     * **top** - The y coordinate of the new window
     *
     * **width** - The width of the new window
     *
     * **height** - The height of the new window
     *
     * **openfinVersion** - The OpenFin version that Finsemble runs (necessary for native windows to connection on the OpenFin IAB)
     *
     * **openfinSocketPort** - The OpenFin socket used for the Inter-application Bus (IAB) (necessary for Java windows that wish to use the OpenFin IAB)
     *
     * **finsembleWindowName** - The name of the window in the Finsemble config
     *
     * **componentType** - The component type in the Finsemble config
     *
     * A common troublesome problem is when a native application needs to be launched from an intermediary application (such as a launcher or batch script). That intermediary
     * application can pass these parameters which will allow the final application to connect back to Finsemble.
     *
     * @param {string} [params.arguments] Used when windowType is "native" or "assimilation". Specifies the arguments to be sent to the application. This is used in conjunction with path.
     * Arguments should be separated by spaces: `--arg1 foo --arg2 bar` _except_ when `params.argumentsAsQueryString` is true, in which case set this parameter to be single string in URI format: `arg=1&arg=2`"
     *
     * @param {boolean} [params.argumentsAsQueryString] For native applications launched by URI: 1) the string is passed as the "arguments" parameter if appended as a query string; and 2) the automatically generated arguments described in "path" above are appended to the query string
     *
     * @param {any} [params.env] Sets environment variables for a spawned native application. Create a map (JSON) object of names to values. This is only available when running assimilation and with the config assimilation.useOpenFinSpawn=false.
     *
     * @param {any} [params.env] Sets environment variables for a spawned native application. Create a map (JSON) object of names to values. This is only available when running assimilation and with the config assimilation.useOpenFinSpawn=false.
     *
     * @param {string} [params.name] Optional window name. If not provided, then a random name will be assigned to the newly created `OpenFin` window.

     * @param {string} [params.groupName] Optional group name. Adds windows to a group (unrelated to docking or linking) that is used for window management functions. If the group does not exist it will be created.

     * @param {any} [params.data] Optional data to pass to the opening window.
     * If set, then the spawned window can use {@link WindowClient#getSpawnData} to retrieve the data.

     * @param {WindowDescriptor} [params.options] Properties to merge with the default windowDescriptor.
     * Any value set here will be sent directly to the `OpenFin` window, and will override the effect of relevant parameters to spawn(). By default, all Finsemble windows are frameless.

     * @param {boolean} [params.addToWorkspace=false] Whether to add the new component to the workspace.
     * Even when true, the window will still not be added to the workspace if addToWorkspace==false in components.json config for the component type.

     * @param {Function=} cb Callback to be invoked after function is completed. Callback contains an object with the following information:
     * windowIdentifier - The {@WindowIdentifier} for the new component.
     * windowDescriptor - The {@WindowDescriptor} for the new window.
     * finWindow - An `OpenFin` window object that contains the spawned component.
     *
     * @since 2.4.1 Added params.windowType (deprecated params.native), params.path, params.alias, params.argumentsAsQueryString - These are all for launching native apps.
     *
     */
    spawn(component, params, cb = Function.prototype) {
        var self = this;
        validate_1.default.args(component, "string", params, "object=", cb, "function=");
        if (!params) {
            params = {};
        }
        params = util.clone(params);
        params.component = component;
        if (!params.options) {
            params.options = {};
        }
        if (!params.options.customData) {
            params.options.customData = {};
        }
        if (!params.staggerPixels && params.staggerPixels !== 0) {
            params.staggerPixels = 50;
        }
        logger_1.default.system.debug(`Calling Spawn for componentType:${component}`);
        const promiseResolver = (resolve) => {
            util.getMyWindowIdentifier(function (windowIdentifier) {
                params.launchingWindow = windowIdentifier;
                self.callSpawn(params, (err, response) => {
                    resolve({ err, response });
                    cb(err, response);
                });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Returns an object that provides raw access to a remote window.
     * It returns an object that contains references to the Finsemble windowDescriptor, to
     * the `OpenFin` window, and to the native JavaScript (browser) window.
     *
     * *This will only work for windows that are launched using the Finsemble Launcher API.*
     *
     * As in any browser, you will not be able to manipulate a window that has been launched
     * cross domain or in a separate physical application (separate process). Caution
     * should be taken to prevent a window from being closed by the user if you plan on
     * referencing it directly. Due to these inherent limitations we strongly advise against a
     * paradigm of directly manipulating remote windows through JavaScript. Instead leverage the
     * RouterClient to communicate between windows and to use an event based paradigm!
     *
     * @param  {object} params Parameters
     * @param {string} params.windowName The name of the window to access.
     * @return {RawWindowResult} An object containing windowDescriptor, finWindow, and browserWindow. Or null if window isn't found.
     * @deprecated Finsemble now uses a splintering agent which disconnects windows from the main launcher.
     * It becomes impossible to access raw windows. See LauncherClient.getActiveDescriptors() and Util.getFinWindow()
     */
    getRawWindow(params) {
        var launcher = window.opener;
        if (launcher.name !== "launcherService") {
            logger_1.default.system.warn("LauncherClient.getNativeWindow: window not opened by Launcher Service");
        }
        return launcher.activeWindows.getWindow(params.windowName);
    }
    /**
     * @private
     */
    callSpawn(params, cb = Function.prototype) {
        var self = this;
        validate_1.default.args(cb, "function=");
        logger_1.default.perf.debug("CallSpawn", "start", "from spawn to callback", params);
        const promiseResolver = (resolve) => {
            function invokeSpawnCallback(error, data) {
                cb(error, data);
                resolve({ err: error, data });
            }
            self.routerClient.query("Launcher.spawn", params, async function (err, response) {
                logger_1.default.system.debug("CallSpawn", "Initial launcher callback params", err, response);
                logger_1.default.perf.debug("CallSpawn", "Initial launcher callback", response);
                if (err) {
                    invokeSpawnCallback(err, result);
                    return logger_1.default.system.error("LauncherClient.callSpawn", err);
                }
                response.data.windowIdentifier.name = response.data.windowIdentifier.windowName;
                var result = response.data;
                // Add a wrapped finWindow to the response (this can only be done client side)
                if (result.windowDescriptor.native)
                    return invokeSpawnCallback(err, result); /// This is way too slow for native windows so we just let this pass through and assume the window is ready.
                var newWindowIdentifier = result.windowIdentifier;
                let { wrap } = await FinsembleWindow_1.FinsembleWindow.getInstance({ name: newWindowIdentifier.windowName }); //TODO - replace with FinsembleWindow
                result.finWindow = wrap;
                let componentOnlineChannel = "Finsemble." + result.windowIdentifier.windowName + ".componentReady";
                let subscriberID = self.routerClient.subscribe(componentOnlineChannel, componentOnlineCallback);
                function componentOnlineCallback(err, response) {
                    if (err)
                        return logger_1.default.system.error(err);
                    //Ignore the initial "uninitialized" state message delivered by subscribe (a second message will contain the actual data)
                    if (response && Object.keys(response.data).length === 0)
                        return;
                    if (params.position === "relative" && (params.groupOnSpawn || params.dockOnSpawn)) {
                        let windows = [result.windowIdentifier.windowName, system_1.System.Window.getCurrent().name]; //TODO - replace with FinsembleWindow
                        self.routerClient.query("DockingService.groupWindows", {
                            windows: windows,
                            isMovable: true
                        }, function (error, response) {
                            logger_1.default.perf.debug("CallSpawn", "stop");
                            invokeSpawnCallback(err, result);
                        });
                    }
                    else {
                        logger_1.default.perf.debug("CallSpawn", "stop");
                        invokeSpawnCallback(err, result);
                    }
                    self.routerClient.unsubscribe(subscriberID);
                }
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Convenience function to get a monitor descriptor for a given windowIdentifier, or for the
     * current window.
     *
     * @param {WindowIdentifier} [windowIdentifier] The window to find the monitor for. Current window if undefined.
     * @param  {Function} cb Returns a monitor descriptor (optional or use returned Promise)
     * @returns {Promise} A promise that resolves to a monitor descriptor
     * @TODO this probably is unnecessary since a client can include util and a developer should be using this.getMonitorInfo which has full support for searching by component. Did Ryan need this?
     * @private
     */
    getMonitor(windowIdentifier, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve) => {
            util.getMonitor(windowIdentifier, (monitor) => {
                cb(monitor);
                resolve(monitor);
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Returns a {@link WindowIdentifier} for the current window
     *
     * @param {WindowIdentifier} cb Callback function returns windowIdentifier for this window (optional or use the returned Promise)
     * @returns {Promise} A promise that resolves to a windowIdentifier
     */
    // @TODO, [Terry] calls to launcherClient.myWindowIdentifier or launcherClient.getMyWindowIdentifier()
    // should be replaced with windowClient.getWindowIdentifier()
    getMyWindowIdentifier(cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve) => {
            util.getMyWindowIdentifier((wi) => {
                cb(wi);
                resolve(wi);
            });
        };
        return new Promise(promiseResolver);
    }
    /**
    * Gets the {@link WindowDescriptor} for all open windows.
    *
    * *Note: This returns descriptors even if the window is not part of the workspace*.
    *
    * @param {function} cb Callback returns an array of windowDescriptors
    *
    */
    getActiveDescriptors(cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve) => {
            this.routerClient.query("Launcher.getActiveDescriptors", {}, function (err, response) {
                if (err) {
                    return logger_1.default.system.error(err);
                }
                if (response) {
                    cb(err, response.data);
                    resolve({ err, data: response.data });
                }
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Adds a custom component. Private for now.
     * @private
     */
    addUserDefinedComponent(params, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve) => {
            this.routerClient.query("Launcher.userDefinedComponentUpdate", {
                type: "add",
                name: params.name,
                url: params.url
            }, function (err, response) {
                cb(err, response.data);
                resolve({ err, data: response.data });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Adds a custom component. Private for now.
     * @private
     */
    removeUserDefinedComponent(params, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve) => {
            this.routerClient.query("Launcher.userDefinedComponentUpdate", {
                type: "remove",
                name: params.name,
                url: params.url
            }, function (err, response) {
                cb(err, response.data);
                resolve({ err, data: response.data });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Gets components that can receive specfic data types. Returns an object containing a of ComponentTypes mapped to a list of dataTypes they can receive. This is based on the "advertiseReceivers" property in a component's config.
     * @param params
     * @param {Array.<string>} [params.dataTypes] An array of data types. Looks for components that can receive those data types
     *
     * @since 2.0
     *
     * @example
     * LauncherClient.getComponentsThatCanReceiveDataTypes({ dataTypes: ['chartiq.chart', 'salesforce.contact']}, function(err, response) {
     * 	//Response contains: {'chartiq.chart': ['Advanced Chart'], 'salesforce.contact': ['Salesforce Contact']}
     * })
     *
     */
    getComponentsThatCanReceiveDataTypes(params, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        if (params.dataTypes && !Array.isArray(params.dataTypes)) {
            params.dataTypes = [params.dataTypes];
        }
        validate_1.default.args(params.dataTypes, "array");
        const promiseResolver = (resolve) => {
            this.routerClient.query("LauncherService.getComponentsThatCanReceiveDataTypes", params, function (err, response) {
                cb(err, response.data);
                resolve({ err, data: response.data });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Brings a windows to front. If no windowList, groupName or componentType is specified, brings all windows to front.
     * @param params
     * @param {Array.<string | Object>} [params.windowList] Optional. An array of window names or window identifiers. Not to be used with componentType.
     * @param {string} [params.groupName] Optional. The name of a window group to bring to front.
     * @param {string} [params.componentType] Optional. The componentType to bring to front. Not to be used with windowList.
     *
     * @since TBD
     *
     * @example
     * LauncherClient.bringWindowsToFront({ windowList: ['AdvancedChart-123-123', 'Symphony-Chat-234-234']}, function(err, response) {
     *
     * })
     *
     * @private
     */
    bringWindowsToFront(params = {}, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        if (params.windowList && !Array.isArray(params.windowList)) {
            params.windowList = [params.windowList];
        }
        if (params.groupName) {
            validate_1.default.args(params.groupName, "string");
        }
        if (params.componentType) {
            validate_1.default.args(params.componentType, "string");
        }
        //Changed to query to allow for async bring to front and to do something when all windows have been brought to front
        this.routerClient.query("LauncherService.bringWindowsToFront", params, (err, response) => {
            cb();
        });
        return Promise.resolve();
    }
    /**
     * Minimizes all but a specific list or group of windows. Either groupName or windowList must be specified.
     * @param params
     * @param {Array.<string | Object>} [params.windowList] Optional. An array of window names or window identifiers. Not to be used with componentType.
     * @param {string} [params.groupName] Optional. The name of a window group to hyperFocus.
     * @param {string} [params.componentType] Optional. The Component Type to hyperFocus. Not to be used with windowList.
     *
     * @since TBD
     * @example
     * LauncherClient.hyperFocus({ windowList: ['AdvancedChart-123-123', 'Symphony-Chat-234-234']}, function(err, response) {
     *
     * })
     *
     * @private
     */
    hyperFocus(params, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        if (params.windowList && !Array.isArray(params.windowList)) {
            params.windowList = [params.windowList];
        }
        if (!params.windowList && !params.groupName && !params.componentType) {
            params.windowList = [this.myWindowIdentifier];
        }
        if (params.groupName) {
            validate_1.default.args(params.groupName, "string");
        }
        if (params.componentType) {
            validate_1.default.args(params.componentType, "string");
        }
        this.routerClient.transmit("LauncherService.hyperFocus", params);
        cb();
        return Promise.resolve();
    }
    /**
     * Minimize windows. If no windowList or groupName is specified, all windows will be minimized.
     * @param {*} params
     * @param {Array.<string | Object>} [params.windowList] Optional. An array of window names or window identifiers. Not to be used with componentType.
     * @param {string} [params.groupName] Optional. The name of a window group to minimize.
     * @param {string} [params.componentType] Optional. The component type of windows to Minimize. Not to be used with windowList.
     *
     * @since TBD
     * @private
     */
    minimizeWindows(params, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        if (params.windowList && !Array.isArray(params.windowList)) {
            params.windowList = [params.windowList];
        }
        if (params.groupName) {
            validate_1.default.args(params.groupName, "string");
        }
        if (params.componentType) {
            validate_1.default.args(params.componentType, "string");
        }
        this.routerClient.transmit("LauncherService.minimizeWindows", params);
        cb();
        return Promise.resolve();
    }
    /**
     * Create Window group
     * @param {*} params
     * @param {string} [params.groupName] The name of the window group to create
     * @param {Array.<string | Object>} [params.windowList] An array of window names or window identifiers to add to the group. Optional.
     * @param {function} [cb] callback to be called upon group creation
     *
     * @since TBD
     * @private
     */
    createWindowGroup(params, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        if (params.windowList && !Array.isArray(params.windowList)) {
            params.windowList = [params.windowList];
            delete params.groupName;
        }
        validate_1.default.args(params.groupName, "string");
        const promiseResolver = (resolve) => {
            if (!params.groupName) {
                let err = "Invalid Parameters";
                resolve({ err });
                cb(err);
                return;
            }
            this.routerClient.query("LauncherService.createWindowGroup", params, function (err, response) {
                cb(err, response);
                resolve({ err, data: response });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Add Windows to group
     * @param {*} params
     * @param {string} [params.groupName] The name of the window group
     * @param {Array.<string | Object>} [params.windowList] An array of window names or window identifiers to add to the group.
     * @param {function} [cb] callback to be called upon group creation
     *
     * @since TBD
     * @private
     */
    addWindowsToGroup(params, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve) => {
            if (!params.groupName || !params.windowList) {
                let err = "Invalid Parameters";
                resolve({ err });
                cb(err);
                return;
            }
            if (params.windowList && !Array.isArray(params.windowList)) {
                params.windowList = [params.windowList];
            }
            validate_1.default.args(params.groupName, "string");
            this.routerClient.query("LauncherService.addWindowsToGroup", params, function (err, response) {
                cb(err, response);
                resolve({ err, data: response });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Remove Windows from group
     * @param {*} params
     * @param {string} [params.groupName] The name of the window group
     * @param {Array.<string | Object>} [params.windowList] An array of window names or window identifiers to remove from the group.
     * @param {function} [cb] callback to be called upon group creation
     *
     * @since TBD
     * @private
     */
    removeWindowsFromGroup(params, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        const promiseResolver = (resolve) => {
            if (!params.groupName || !params.windowList) {
                let err = "Invalid Parameters";
                resolve({ err });
                cb(err);
                return;
            }
            if (params.windowList && !Array.isArray(params.windowList)) {
                params.windowList = [params.windowList];
            }
            this.routerClient.query("LauncherService.removeWindowsFromGroup", params, function (err, response) {
                cb(err, response);
                resolve({ err, data: response });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Get Window Groups that a window belongs to. If no windowIdentifier is specified, gets  the groups of the current window.
     * @param {*} params
     * @param {WindowIdentifier} [params.windowIdentifier] Optional. If not specified uses current window
     * @param {*} [cb] callback with a list of groups
     *
     * @since TBD
     * @private
     */
    getGroupsForWindow(params, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        if (typeof params === "function") {
            cb = params;
            params = null;
        }
        const promiseResolver = (resolve) => {
            if (!params || !params.windowIdentifier) {
                this.windowClient.getComponentState({ field: "finsemble:windowGroups" }, function (err, groups) {
                    resolve({ err, data: groups });
                    cb(err, groups);
                });
                return;
            }
            this.routerClient.query("LauncherService.getGroupsForWindow", params, function (err, response) {
                resolve({ err, data: response.data });
                cb(err, response.data);
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * @private
     * @param {*} params
     * @param {WindowIdentifier} [params.windowIdentifier] Optional. Current window is assumed if not specified.
     * @param {Array.<string>} [params.groupNames] List of groupnames to add window to. Groups will be created if they do not exist.
     * @param {*} cb
     */
    addToGroups(params, cb = Function.prototype) {
        validate_1.default.args(cb, "function=");
        validate_1.default.args(params.groupNames, "array");
        if (!params.windowIdentifier) {
            params.windowIdentifier = this.myWindowIdentifier;
        }
        const promiseResolver = (resolve) => {
            this.routerClient.query("LauncherService.addWindowToGroups", params, (err, response) => {
                cb(err, response);
                resolve({ err, data: response });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * _createWrap allows us to create a wrap without spawning a window
     *
     * @param {Object} params
     * @param {String} params.name
     * @param {Function} cb
     * @memberof LauncherClient
     */
    _createWrap(params, cb) {
        this.routerClient.query("LauncherService.createWrap", params, cb);
    }
    start(cb) {
        var self = this;
        // Get Group Updates (only if we are not in a service)
        if (typeof Globals.FSBL != "undefined") {
            // Get Groups from Component State on Load
            function subscribeToGroupUpdates() {
                self.routerClient.subscribe("Finsemble.LauncherService.updateGroups." + self.windowName, function (err, response) {
                    if (!Array.isArray(response.data))
                        return; //dont attempt to save the initial responder state.
                    self.windowClient.setComponentState({ field: "finsemble:windowGroups", value: response.data });
                });
            }
            // cannot add a windowClient dependency here so explicitedly wait for windowClient ready (ideally dependency manage could fully handle but maybe later)
            Globals.FSBL.addEventListener("onReady", function () {
                self.windowClient.onReady(() => {
                    self.windowClient.getComponentState({ field: "finsemble:windowGroups" }, function (err, groups) {
                        if (!err && groups) {
                            return self.addToGroups({
                                groupNames: groups
                            }, subscribeToGroupUpdates);
                        }
                        subscribeToGroupUpdates();
                    });
                });
            });
        }
        setInterval(function () {
            self.routerClient.transmit("Finsemble.heartbeat", { type: "component", windowName: self.windowName, componentType: "finsemble" });
        }, 1000);
        // @TODO, [Terry] remove in favor of calls to windowClient.getMyIdentifier()
        this.getMyWindowIdentifier((identifier) => {
            self.myWindowIdentifier = identifier;
            if (cb) {
                cb();
            }
        });
    }
}
function constructInstance(params) {
    params = params ? params : {};
    if (!params.windowClient)
        params.windowClient = windowClient_1.default;
    return new LauncherClient({
        clients: params,
        startupDependencies: {
            services: ["windowService"]
        },
        onReady: function (cb) {
            logger_1.default.system.debug("launcherClient ready", window.name);
            logger_1.default.perf.debug("LauncherClientReadyTime", "stop");
            launcherClient.start(cb);
        },
        name: "launcherClient"
    });
}
var launcherClient = constructInstance();
launcherClient.constructInstance = constructInstance;
exports.default = launcherClient;


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony export (immutable) */ __webpack_exports__["byString"] = byString;
/* harmony export (immutable) */ __webpack_exports__["initObject"] = initObject;
/* harmony export (immutable) */ __webpack_exports__["mapField"] = mapField;
/* harmony export (immutable) */ __webpack_exports__["checkForObjectChange"] = checkForObjectChange;
/**
 *
 * This file handles common functionality needed in both the client and service.
 *
 */
// Get a value from an object using a string. {abc:{123:"value"}} you would do byString(object,"abc.123")
function byString(o, s) {
	//Object,String
	s = s.replace(/\[(\w+)\]/g, ".$1"); // convert indexes to properties
	s = s.replace(/^\./, ""); // strip a leading dot
	var a = s.split(".");
	for (var i = 0, n = a.length; i < a.length; ++i) {
		// Loop through and find the attribute that matches the string passed in
		var k = a[i];
		if (!o) {
			return null;
		}
		if (typeof o === "string") return null; // Reached the end of the chain

		if (k in o) {
			o = o[k];
		} else {
			return null;
		}
	}
	return o;
}
//can add values to an object from a string. Must be in `.` form abc.123
const setPath = (object, path, value) => path.split(".").reduce((o, p) => o[p] = path.split(".").pop() === p ? value : o[p] || {}, object);
/* harmony export (immutable) */ __webpack_exports__["setPath"] = setPath;


// This handles the intial mapping for us. It will crawl through all child objects and map those too. Parent is the current location within the object(`parent.child`). Null is top level. The mapping is all flattened
function initObject(object, parent, mapping) {
	var mapLocation;

	if (!parent) {
		parent = null;
	}

	if (typeof object !== "object") {
		mapLocation = parent ? parent + "." + n : n;
		mapping[mapLocation] = parent;
		return;
	}

	for (let n in object) {
		if (typeof object[n] === "object" && object[n] !== "undefined") {
			mapLocation = parent ? parent + "." + n : n;
			mapping[mapLocation] = parent;
			initObject(object[n], mapLocation, mapping); // If we have another object, map it
		} else {
			mapLocation = parent ? parent + "." + n : n;
			mapping[mapLocation] = parent;
		}
	}
}
// Will map out a field in an object. So we don't have to loop through the whole thing everytime we have a change.
function mapField(object, s, mapping) {
	if (mapping[s]) {
		return;
	} // If we're already mapped move on.
	s = s.replace(/\[(\w+)\]/g, ".$1"); // convert indexes to properties
	s = s.replace(/^\./, ""); // strip a leading dot
	var a = s.split(".");
	var currentLocation = s;

	if (!mapping.hasOwnProperty(currentLocation)) {
		var newString = null;
		if (a.length > 1) {
			a.pop();
			newString = a.join(".");
		}

		mapping[currentLocation] = newString;
	}

	var newObject = byString(object, currentLocation);
	if (newObject === "undefined") {
		return;
	} // If the location doesnt exist exit.
	if (typeof newObject === "object") {
		for (var key in newObject) {
			mapField(object, currentLocation + "." + key, mapping); // If we need to ke
		}
	}
}
// To see if we're replacing an existing field/object with an object/field that would make some of the mapping obsolete.
function checkForObjectChange(object, field, mapping) {
	var objectReplacing = byString(object, field);
	if (objectReplacing === null) {
		return false;
	}
	if (typeof objectReplacing === "object") {
		// we're replacing an object which requires use to remapp at this level.
		return removeChildMapping(mapping, field);
	}
	if (typeof objectReplacing !== "object" && typeof field === "object") {
		//we're replacing a non object with an object. Need to map out this new object
		return removeChildMapping(mapping, field);
	}
	return null;
}
//This will remove an item from mapping and pass back an array so that we can send out notifications
function removeChildMapping(mapping, field) {
	var removals = [];
	for (var map in mapping) {
		var lookField = field + ".";
		if (map.includes(lookField)) {
			removals.push(map);
			delete mapping[map];
		}
	}
	return removals;
}

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\storeUtils.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\storeUtils.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const async_1 = __webpack_require__(11);
const storeUtils = __webpack_require__(82);
const logger_1 = __webpack_require__(2);
/** The global `window` object. We cast it to a specific interface here to be
 * explicit about what Finsemble-related properties it may have. */
const Globals = window;
/**
 *
 * @introduction
 * <h2>Store Model</h2>
 * The Store Model consists of store instances. It handles getters/setters of data.
 * @hideConstructor
 * @class
 */
var StoreModel = function (params, routerClient) {
    this.routerClient = routerClient;
    var isGlobal = params.global;
    var self = this;
    this.name = params.store ? params.store : "finsemble";
    this.values = params.values ? params.values : {};
    var listeners = [];
    this.lst = listeners;
    this.registeredDispatchListeners = [];
    var mapping = {};
    storeUtils.initObject(this.values, null, mapping);
    /** @member {Object}  - This is the Flux dispatcher. It can be used dispatch actions across stores. These action are not caught inside of the global store service. For more information, you can read the [Flux documentation](https://facebook.github.io/flux/docs/overview.html).

    * @example
    store.Dispatcher.register(function(action){
        if(action.actionType === "ACTION1"){

        // Do something with the action here
        }
    });

    store.Dispatcher.dispatch({actionType:ACTION1,data:myData});
    */
    this.Dispatcher = {
        register: function (fn) {
            self.registeredDispatchListeners.push(fn);
        },
        dispatch: function (data) {
            if (isGlobal) {
                self.routerClient.transmit("storeService.dispatch." + self.name, data);
            }
            else {
                self.handleDispatchedMessages(null, {
                    data: data
                });
            }
        }
    };
    /**
     * @param {*} err
     * @param {*} message
     * @private
     */
    this.handleDispatchedMessages = function (err, message) {
        for (var i = 0; i < self.registeredDispatchListeners.length; i++) {
            self.registeredDispatchListeners[i](message.data);
        }
    };
    // Add listeners for global stores. Not needed for local stores as everything happens internally.
    if (isGlobal) {
        this.routerClient.addListener("storeService.dispatch." + self.name, this.handleDispatchedMessages);
    }
    /**
     * Set a value in the store. Two events will be triggered with topics of: store and field.
     * @param {Object} params - Params object
     * @param {String} params.field - The name of the field where data will be stored
     * @param {String} params.value - Value to be stored
     * @param {function} [cb] callback
     * @returns {null}
     *
     * @example
     * store.setValue({field:'field1',value:"new value"});
     */
    this.setValue = function (params, cb) {
        if (!params.field) {
            logger_1.default.system.error("DistributedStore.setValue:no field provided", params);
        }
        if (!params.hasOwnProperty("value")) {
            logger_1.default.system.error("DistributedStore.setValue:no value provided", params);
        }
        if (isGlobal) {
            var data = {
                store: self.name,
                field: params.field,
                value: params.value
            };
            return Globals.distributedStoreClient.routerClient.query("storeService.setValue", data, function (err) {
                return cb ? cb(err) : null;
            });
        }
        var removals = storeUtils.checkForObjectChange(this.values, params.field, mapping);
        storeUtils.setPath(this.values, params.field, params.value);
        storeUtils.mapField(this.values, params.field, mapping);
        if (removals) {
            sendRemovals(removals);
        }
        var combined = this.name + (params.field ? "." + params.field : "");
        triggerListeners(self.name, this);
        publishObjectUpdates(params.field, mapping);
        return cb ? cb() : null;
    };
    // Handles changes to the store. Will publish from the field that was changed and back.
    function publishObjectUpdates(startfield, mappings) {
        var currentMapping = mappings;
        while (startfield) {
            triggerListeners(self.name + "." + startfield, storeUtils.byString(self.values, startfield));
            startfield = currentMapping[startfield];
        }
    }
    //Send items that are no longer mapped or had their map change. If a value is remapped we'll send out the new value.
    function sendRemovals(removals) {
        for (var i = 0; i < removals.length; i++) {
            triggerListeners(self.name + "." + removals[i], storeUtils.byString(self.values, removals[i]));
        }
    }
    /**
     * This will set multiple values in the store.
     * @param {Object[]} fields - An Array of field objects
     * @param {String} fields.field - The name of the field
     * @param {any} fields.value - Field value
     * @param {function} [cb] callback
     * @example
     * store.setValues([{field:'field1',value:"new value"}]);
     */
    this.setValues = function (fields, cb) {
        var self = this;
        if (!fields) {
            return logger_1.default.system.error("DistributedStore.setValues:no params given");
        }
        if (!Array.isArray(fields)) {
            return logger_1.default.system.error("DistributedStore.setValues:params must be an array");
        }
        async_1.each(fields, function (field, done) {
            self.setValue(field, done);
        }, function (err) {
            return cb ? cb(err) : null;
        });
    };
    /**
     * Get a value from the store. If global is not set, we'll check local first then we'll check global.
     * @param {string|object} params - Params object. This can also be a string
     * @param {String} params.field - The field where the value is stored.
     * @param {Function} [cb] -  Will return the value if found.
     * @returns {any} - The value of the field. If no callback is given and the value is local, this will run synchronous
     * @example
    store.getValue({field:'field1'},function(err,value){});
store.getValue('field1',function(err,value){});
     */
    this.getValue = function (params, cb) {
        if (typeof params === "string") {
            params = { field: params };
        }
        if (!params.field) {
            if (!cb) {
                return "no field provided";
            }
            return cb("no field provided");
        }
        if (isGlobal) {
            return getGlobalValue(params, cb);
        }
        var combined = this.name + (params.field ? "." + params.field : "");
        var fieldValue = storeUtils.byString(this.values, params.field);
        if (fieldValue !== undefined) {
            if (!cb) {
                return fieldValue;
            }
            return cb(null, fieldValue);
        }
        if (!cb) {
            return null;
        }
        return cb("couldn't find a value");
    };
    /**
     * Get multiple values from the store.
    * @param {Array.<object>|Array.<String>} fields - An Array of field objects. If there are no fields proviced, all values in the store are returned.
     * @param {Function} [cb] -  Will return the value if found.
     * @returns {Object} - returns an object of with the fields as keys.If no callback is given and the value is local, this will run synchronous
     * @example
     * store.getValues([{field:'field1'},{field2:'field2'}],function(err,values){});
store.getValues(['field1','field2'],function(err,values){});
     */
    this.getValues = function (fields, cb) {
        if (typeof fields === "function") {
            cb = fields;
            if (isGlobal) {
                return getGlobalValues(null, cb);
            }
            if (!cb) {
                return this.values;
            }
            return cb(null, this.values);
        }
        if (!Array.isArray(fields)) {
            return this.getValue(fields, cb);
        }
        if (isGlobal) {
            return getGlobalValues(fields, cb);
        }
        var values = {};
        for (var i = 0; i < fields.length; i++) {
            var item = fields[i];
            var field = typeof item === "string" ? item : item.field;
            var combined = this.name + (field ? "." + field : "");
            var fieldValue = storeUtils.byString(this.values, field);
            values[field] = fieldValue;
        }
        if (!cb) {
            return values;
        }
        return cb(null, values);
    };
    //get a single value from the global store
    function getGlobalValue(params, cb) {
        Globals.distributedStoreClient.routerClient.query("storeService.getValue", {
            store: self.name,
            field: params.field
        }, function (err, response) {
            if (err) {
                return cb(err);
            }
            return cb(err, response.data);
        });
    }
    //get values from the global store
    function getGlobalValues(params, cb) {
        Globals.distributedStoreClient.routerClient.query("storeService.getValues", {
            store: self.name,
            fields: params
        }, function (err, response) {
            if (err) {
                return cb(err);
            }
            return cb(err, response.data);
        });
    }
    /**
     * Remove a value from the store.
    * @param {Object | String} params - Either an object or string
     * @param {String} param.field - The name of the field
     * @param {Function} [cb] -  returns an error if there is one
     * @example
     * store.removeValue({field:'field1'},function(err,bool){});
     */
    this.removeValue = function (params, cb) {
        if (!params.field) {
            if (params !== undefined) {
                params = { field: params };
            }
            else {
                return cb("no field provided");
            }
        }
        params.value = null;
        return self.setValue(params, cb);
    };
    /**
     * Removes multiple values from the store.
     * @param {Object[] | String[]} params - An Array of field objects
     * @param {String} param[].field - The name of the field
     * @param {Function} [cb] -  returns an error if there is one.
     * @example
     * store.removeValue({field:'field1'},function(err,bool){});
     */
    this.removeValues = function (params, cb) {
        if (!Array.isArray(params)) {
            return cb("The passed in parameter needs to be an array");
        }
        async_1.map(params, this.removeValue, function (err, data) {
            return cb(err, data);
        });
    };
    /**
     * Destroys the store.
     * @param {Function} [cb] -  Will return the value if found.
     * @example
     * store.destroy();
     */
    this.destroy = function (cb) {
        var self = this;
        var params = {
            store: this.name,
            global: isGlobal,
        };
        Globals.distributedStoreClient.removeStore(params, function (err, response) {
            if (err) {
                return cb(err);
            }
            self = null;
            return cb(null, true);
        });
    };
    /**
     * NOTE: make sure we dont have duplicate router subscribers
     * @private
     */
    this.changeSub = function (change) {
        if (!this.subs)
            this.subs = [];
        if (!this.subs[change]) {
            if (isGlobal) {
                Globals.distributedStoreClient.routerClient.subscribe("storeService" + change, handleChanges);
            }
            this.subs[change] = true;
        }
    };
    /**
    * Add a listener to the store at either the store or field level. If no field is given, the store level is used. You can also listen to nested object -- field1.nestedField
    * @param {Object} params - Params object
    * @param {String} params.field - The data field to listen for. If this is empty it listen to all changes of the store.
    * @param {Function} fn -  the function to call when a listener is triggered
    * @param {Function} [cb] - callback
    * @example
    *var myFunction = function(err,data){
    }
    * store.addListener({field:'field1'},myFunction,cb);

    */
    this.addListener = function (params, fn, cb) {
        var field = null;
        if (typeof params === "function") {
            fn = params;
            params = {};
        }
        if (params.field) {
            field = params.field;
        }
        var combined = this.name + (field ? "." + field : "");
        if (listeners[combined]) {
            listeners[combined].push(fn);
        }
        else {
            listeners[combined] = [fn];
        }
        this.changeSub(combined);
        return cb ? cb() : null;
    };
    /**
    * Add an array of listeners as  objects or strings. If using strings, you must provide a function callback.
    * @param {Object[] | String[]} params - Params object
    * @param {String} params.field - The data field to listen for.
    * @param {String} [params.listener] - the function to call when a listener is triggered. If this is empty, fn is used.
    * @param {function} [fn] -  the function to call when a listener is triggered
    * @param {function} [cb] callback
    * @example
    *var myFunction = function(err,data){

    }
    store.addListeners([{field:'field1',listener:myFunction},{field:'field2',listener:myFunction}],null,cb);

    store.addListeners([{field:'field1'},{field:'field2',listener:myFunction}],myFunction,cb);

    store.addListeners(['field1','field2'],myFunction,cb);
    */
    this.addListeners = function (params, fn, cb) {
        if (!Array.isArray(params)) {
            return this.addListener(params, fn, cb);
        }
        for (var i = 0; i < params.length; i++) {
            var field = null;
            var item = params[i];
            var ls;
            if (typeof item === "string") {
                field = item;
            }
            else if (item.field) {
                field = item.field;
                ls = params[i].listener;
            }
            var combined = this.name + (field ? "." + field : "");
            if (!ls) {
                if (fn && typeof fn === "function") {
                    ls = fn;
                }
            }
            if (listeners[combined]) {
                listeners[combined].push(ls);
            }
            else {
                listeners[combined] = [ls];
            }
            this.changeSub(combined);
        }
        return cb ? cb() : null;
    };
    /**
     * Remove a listener from  store. If no field is given, we look for a store listener
     * @param {Object} params - Params object
     * @param {String} params.field - The data field
     * @param {function} [fn] -  the function to remove from the listeners
     * @param {function} [cb] -  returns true if it was succesfull in removing the listener.
     *
     * @example
     * var myFunction = function(err,data){
            }
     * store.removeListener({field:'field1'},MyFunction,function(bool){});
    StoreCstorelient.removeListener(MyFunction,function(bool){});
     */
    this.removeListener = function (params, fn, cb) {
        var field = null;
        if (typeof params === "function") {
            cb = fn;
            fn = params;
            params = {};
        }
        if (params.field) {
            field = params.field;
        }
        var combined = this.name + (field ? "." + field : "");
        if (listeners[combined]) {
            for (var i = 0; i < listeners[combined].length; i++) {
                if (listeners[combined][i] === fn) {
                    listeners[combined].pop(i);
                    return cb ? cb(null, true) : null;
                }
            }
        }
        return cb ? cb(null, false) : null;
    };
    /**
     * Remove an array of listeners from the store
     * @param {Object[] | String[]} params - Params object
     * @param {String} params.field - The data field to listen for. If this is empty it listen to all changes of the store.
     * @param {String} params.listener - The listener function
     * @param {function} [fn] -  the function to remove from the listeners
     * @param {function} [cb] -  returns true if it was succesfull in removing the listener.
     *
     * @example
     * var myFunction = function(err,data){
            }
     * store.removeListeners({field:'field1'},MyFunction,function(bool){});
    store.removeListeners([{field:'field1',listener:MyFunction}],function(bool){});
    store.removeListeners(['field1'],MyFunction,function(bool){});
     */
    this.removeListeners = function (params, fn, cb) {
        if (!Array.isArray(params)) {
            if (typeof params === "function") {
                this.removeListener({}, params, cb);
            }
            else if (params.field) {
                this.removeListener(params, fn, cb);
            }
            return cb("missing fields");
        }
        var removeCount = 0;
        for (var i = 0; i < params.length; i++) {
            var field = null;
            var item = params[i];
            var ls;
            if (typeof item === "string") {
                field = item;
            }
            else if (item.field) {
                field = item.field;
                ls = params[i].listener;
            }
            var combined = this.name + (field ? "." + field : "");
            if (!ls) {
                if (fn && typeof fn === "function") {
                    ls = fn;
                }
                else {
                    continue;
                }
            }
            for (var j = 0; j < listeners[combined].length; j++) {
                if (listeners[combined][j] === ls) {
                    listeners[combined].pop(i);
                    removeCount++;
                }
            }
        }
        if (removeCount < params.length) {
            return cb("All listeners could not be found", false);
        }
        return cb ? cb(null, true) : null;
    };
    //This handles all changes coming in from the service
    function handleChanges(err, response) {
        if (err) {
            logger_1.default.system.error("DistributedStoreClient", err);
        }
        if (!response.data.store) {
            return;
        }
        if (!response.data.field) {
            response.data.field = null;
        }
        var combined = self.name + (response.data.field ? "." + response.data.field : "");
        var val = response.data.storeData ? response.data.storeData : response.data.value;
        triggerListeners(combined, val);
    }
    // Trigger any function that is listening for changes
    function triggerListeners(listenerKey, data) {
        if (listeners[listenerKey]) {
            for (var i = 0; i < listeners[listenerKey].length; i++) {
                if (typeof listeners[listenerKey][i] === "function") {
                    logger_1.default.system.debug("DistributedStore.triggerListeners", listenerKey, data);
                    listeners[listenerKey][i](null, { field: listenerKey, value: data });
                }
                else {
                    logger_1.default.system.warn("DistributedStoreClient:triggerListeners: listener is not a function", listenerKey, i, listeners[listenerKey][i]);
                }
            }
        }
    }
    return this;
};
exports.default = StoreModel;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
const storageClient_1 = __webpack_require__(79);
const workspaceClient_1 = __webpack_require__(85);
const hotkeysClient_1 = __webpack_require__(86);
const util = __webpack_require__(10);
const system_1 = __webpack_require__(4);
const baseClient_1 = __webpack_require__(13);
const logger_1 = __webpack_require__(2);
const validate_1 = __webpack_require__(9); // Finsemble args validator
const FinsembleWindow_1 = __webpack_require__(80);
const configUtil_1 = __webpack_require__(14);
const deepEqual = __webpack_require__(91);
const async_1 = __webpack_require__(11);
const WORKSPACE_CACHE_TOPIC = "finsemble.workspace.cache"; // window data stored in this topic for access by workspace service
const constants_1 = __webpack_require__(16);
var finsembleWindow;
/**
 *
 * Helper to see if element has a class.
 * @param {HTMLElement} el
 * @param {String} className
 * @private
 * @return {HTMLElement}
 */
function hasClass(el, className) {
    if (el.classList) {
        return el.classList.contains(className);
    }
    return !!el.className.match(new RegExp("(\\s|^)" + className + "(\\s|$)"));
}
/**
 * Adds a class to an HTML element
 * @param {HTMLElement} el
 * @param {String} className
 * @private
 */
function addClass(el, className) {
    if (el.classList) {
        el.classList.add(className);
    }
    else if (!hasClass(el, className)) {
        el.className += " " + className;
    }
}
/**
 *
 * Removes class from HTML element
 * @param {HTMLElement} el
 * @param {String} className
 * @private
 */
function removeClass(el, className) {
    if (el.classList) {
        el.classList.remove(className);
    }
    else if (hasClass(el, className)) {
        var reg = new RegExp("(\\s|^)" + className + "(\\s|$)");
        el.className = el.className.replace(reg, " ");
    }
}
/**
 *
 *@introduction
  <h2>Window Client</h2>
  ----------
 * The Window Client is primarily responsible for managing the `windowState` (the window's bounds) and `componentState` (data inside of your component).
 * It also injects the **window title bar** control, which contains controls for minimizing, maximizing, closing, and restoring your window.
 * The reference below is provided in case you'd like to manually trigger events.
 *
 * This is the Window Client API reference.
 * If you're looking for information about the window title bar, please see the [Presentation Component tutorial](tutorial-PresentationComponents.html#window-title-bar) for more information.
 *
 * @hideconstructor
 * @param {object} params
 * @constructor
 * @returns {WindowClient}
 */
class WindowClient extends baseClient_1._BaseClient {
    constructor(params) {
        /** @alias WindowClient# */
        super(params);
        /**
         * Moves the window so that it's centered above the user's mouse.
         */
        this.showAtMousePosition = function () {
            this.routerClient.transmit("DockingService.showAtMousePosition", this.getWindowIdentifier());
        };
        validate_1.default.args(params, "object=") && params && validate_1.default.args2("params.onReady", params.onReady, "function=");
        //We store the options that the window is created with in this property.
        /**
        * A copy of the `finWindow`'s options value. This is where we store information like monitorDimensions, initialization information, and any other data that needs to be passed from the parent application into the created window.
        * @type object
        */
        this.options = {};
        //The hash we use to save data with.
        this.windowHash = "";
        //Window's title.
        this.title = null;
        //This is the bottom edge of the toolbar. The window's position will be offset by this much.
        //@todo move this value to a config.
        this.toolbarBottom = 40;
        //default value. The window assigns the containers it cares about before starting.
        this.containers = [];
        //window state for restoration purposes.
        this.componentState = {};
        //This can be either normal, minimized, or maximized.
        this.windowState = "normal";
        // This gets set to true if the window has a header
        this.hasHeader = false;
        this.bindFunctions();
        /**
         * Minmizes window along with all windows docked to it.
         * @param {function} [cb] Optional callback
         * @example
         * FSBL.Clients.WindowClient.minimizeWithDockedWindows();
         * @private
         */
        this.minimizeWithDockedWindows = this.minimize;
    }
    bindFunctions() {
        this.onWindowRestored = this.onWindowRestored.bind(this);
        this.onWindowMaximized = this.onWindowMaximized.bind(this);
        this.onWindowBlurred = this.onWindowBlurred.bind(this);
        this.onWindowFocused = this.onWindowFocused.bind(this);
        this.onMinimizedRestored = this.onMinimizedRestored.bind(this);
        this.onWindowMinimized = this.onWindowMinimized.bind(this);
        this.close = this.close.bind(this);
        this.getInitialOptions = this.getInitialOptions.bind(this);
        this.cacheInitialBounds = this.cacheInitialBounds.bind(this);
    }
    /**
     * This function is fired every time the window's bounds change. It saves the window's position.
     * @param {object} bounds
     * @private
     */
    onWindowRestored() {
        this.updateHeaderState("Maximize", { hide: false });
    }
    onWindowMaximized() {
        this.updateHeaderState("Maximize", { hide: true });
    }
    onWindowBlurred() {
        if (this.hasHeader) {
            this.setActive(false);
        }
    }
    onWindowFocused() {
        if (this.hasHeader) {
            this.setActive(true);
        }
    }
    onMinimizedRestored() {
        this.routerClient.transmit("DockingService.windowRestored", finsembleWindow.name);
        finsembleWindow.removeEventListener("restored", this.onMinimizedRestored);
    }
    onWindowMinimized() {
        this.routerClient.query("DockingService.windowMinimized", finsembleWindow.name, Function.prototype);
        finsembleWindow.addEventListener("restored", this.onMinimizedRestored);
    }
    /**
     * Closes Window.
     * @param {object} params
     * @param {boolean} params.removeFromWorkspace Whether to remove the window from the workspace.
     * @param {boolean} params.closeWindow Whether to close the window. On shutdown this method is closed, but we let the launcher close the window.
     * Defaults are to remove the window from the workspace if the user presses the X button, but not if the window is closed via an app-level request (e.g., we need to switch workspaces, so all windows need to close).
     * @param {function} [cb] callback
     * @example
     *	//Close window and remove from workspace (e.g., user closes the window).
     *	FSBL.Clients.WindowClient.close(true);
     *	//Close window and keep in workspace (e.g., application requests that all windows close themselves).
     *	FSBL.Clients.WindowClient.close(false);
     */
    close(params, cb = Function.prototype) {
        if (!params) {
            params = { removeFromWorkspace: true, closeWindow: true };
        }
        let parentWindow = finsembleWindow.parentWindow;
        if (params.userInitiated && parentWindow) {
            return parentWindow.close(params, cb);
        }
        else {
            finsembleWindow.close(params, cb);
        }
    }
    /**
     * @private
     * @returns {windowHash}
     */
    getWindowHash() {
        return this.windowHash;
    }
    /**
     * Retrieves the window's title.
     * @returns {String} title
     * @example
     * var windowTitle = FSBL.Clients.WindowClient.getWindowTitle();
     */
    getWindowTitle() {
        return this.title;
    }
    /**
     * This function retrieves the dimensions of the monitor that the window is on. It's currently used in the {@link launcherClient}.
     * @param {function} callback
     * @private
     * @todo  this is bad. The monitor can change if the window is moved. Use util monitor functions instead. Instead, use the util style getMyMonitor, and keep monitor dimensions up to date statically at FSBL level with a listener on launcher (unclaimedRect).
     */
    retrieveMonitorDimensions(callback = Function.prototype) {
        util.getMonitor(null, function (monitorInfo) {
            finsembleWindow.updateOptions({ options: { monitorDimensions: monitorInfo.monitorRect } });
            if (callback) {
                callback(monitorInfo.monitorRect);
            }
        });
    }
    /**
     * Listens for changes in the hash and persists the change to the url property, and then saves it.
     * @private
     */
    listenForHashChanges() {
        //get url on page load.
        finsembleWindow.updateOptions({ url: window.top.location.href }, () => {
            //StorageClient.save({ topic: WORKSPACE_CACHE_TOPIC, key: this.windowHash, value: finsembleWindow.windowOptions });
        });
        var self = this;
        //There's no pushState event in the browser. This is a monkey patched solution that allows us to catch hash changes. onhashchange doesn't fire when a site is loaded with a hash (e.g., salesforce).
        (function (history) {
            var pushState = history.pushState;
            history.pushState = function (state) {
                if (typeof history.onpushstate === "function") {
                    history.onpushstate({ state: state });
                }
                pushState.apply(history, arguments);
                finsembleWindow.updateOptions({ url: window.top.location.href }, () => {
                    //StorageClient.save({ topic: WORKSPACE_CACHE_TOPIC, key: self.windowHash, value: finsembleWindow.windowOptions });
                });
                return;
            };
            var replaceState = history.replaceState;
            history.replaceState = function (state) {
                if (typeof history.onreplacestate === "function") {
                    history.onreplacestate({ state: state });
                }
                replaceState.apply(history, arguments);
                finsembleWindow.updateOptions({ url: window.top.location.toString() });
                storageClient_1.default.save({ topic: WORKSPACE_CACHE_TOPIC, key: self.windowHash, value: finsembleWindow.windowOptions });
                return;
            };
        })(window.history);
        window.addEventListener("hashchange", () => {
            finsembleWindow.updateOptions({ url: window.top.location.toString() }, () => {
                //StorageClient.save({ topic: WORKSPACE_CACHE_TOPIC, key: this.windowHash, value: finsembleWindow.windowOptions });
            });
        });
    }
    ;
    /**
     * Gets the options from the window on startup and caches them on the object.
     * @private
     * @param {function} callback
     */
    getInitialOptions(callback) {
        if (!this.isInAService) {
            finsembleWindow.getOptions((err, options) => {
                //err happens if the window doesn't exist in the windowService (e.g., it's a service that's included the windowClient). This will be revisted in the future, but for now we need to make sure that the system doesn't have errors.
                if (err)
                    options = {};
                finsembleWindow.windowOptions = options;
                this.options = options;
                logger_1.default.system.verbose("WindowClient:getting options", options);
                callback();
            });
        }
        else {
            this.options = {};
            callback();
        }
    }
    /**
     * Gets the bounds for the window on startup and saves them to the workspace.
     * @private
     * @param {function} callback
     */
    cacheInitialBounds(callback) {
        this.cacheBounds((bounds) => {
            try {
                // TODO: saveCompleteWindowState is related to addToWorkspace, not persistWindowState. This causes workspaces to fail for windows where persistWindowState is not set but addToWorkspace is.
                if (!finsembleWindow.windowOptions.customData.foreign.components["Window Manager"].persistWindowState) {
                    return callback();
                }
                finsembleWindow.updateOptions({ options: { url: window.top.location.toString() } });
                //finsembleWindow.saveCompleteWindowState();
                //this.saveWindowBounds(bounds, false);
            }
            catch (e) {
                logger_1.default.system.warn("customData.foreign.components[\"Window Manager\" is undefined");
            }
            callback();
        });
    }
    /**
     * Sets initial state for the window. This data is modified on subsequent saves.
     * @param {function} callback
     * @private
     */
    setinitialWindowBounds(callback) {
        logger_1.default.system.warn("`FSBL.Clients.WindowClient.setInitialWindowBounds is deprecated and will be removed in a future version of finsemble. Use 'getInitialOptions' and 'cacheInitialBounds' instead.");
        async_1.parallel([
            this.getInitialOptions,
            this.cacheInitialBounds
        ], callback);
    }
    /**
     * Returns windowBounds as of the last save.
     * @returns {object}
     * @private
     */
    getWindowBounds() {
        return {
            top: finsembleWindow.windowOptions.defaultTop,
            left: finsembleWindow.windowOptions.defaultLeft,
            width: finsembleWindow.windowOptions.defaultWidth,
            height: finsembleWindow.windowOptions.defaultHeight
        };
    }
    /**
     *
     * Saves the window's state. Rarely called manually, as it's called every time your window moves.
     * @param {Object} bounds optional param.
     * @example <caption>The code below is the bulk of our listener for the <code>bounds-changed</code> event from the window. Every time the <code>bounds-changed</code> event is fired (when the window is resized or moved), we save the window's state. The first few lines just prevent the window from being dropped behind the toolbar.</caption>
     *finWindow.addEventListener('disabled-frame-bounds-changed', function (bounds) {
     * 	if (bounds.top < 45) {
     *		finWindow.moveTo(bounds.left, 45);
     *		return;
     *	}
     *	self.saveWindowBounds(bounds);
     *});
     */
    saveWindowBounds(bounds, setActiveWorkspaceDirty) {
        logger_1.default.system.debug("WINDOW LIFECYCLE:SavingBounds:", bounds, "setActiveWOrkspaceDirty", setActiveWorkspaceDirty);
        if (typeof setActiveWorkspaceDirty === "undefined") {
            setActiveWorkspaceDirty = false;
        }
        validate_1.default.args(bounds, "object") && validate_1.default.args2("bounds.top", bounds.top, "number");
        if (!bounds) {
            return;
        }
        // openfin looks at defaultTop, terry looks at top. for some reason, when the app started fresh, the window's position was being overwritten. We also were saving the position on `defaultTop`/`defaultLeft`, and the launcherService wasn't looking for that. We may be able to get rid of the first assignment on the left, but I want terry to fully look at this.
        finsembleWindow.updateOptions({
            options: {
                top: Math.round(bounds.top),
                defaultTop: Math.round(bounds.top),
                left: Math.round(bounds.left),
                defaultLeft: Math.round(bounds.left),
                width: Math.round(bounds.width),
                defaultWidth: Math.round(bounds.width),
                height: Math.round(bounds.height),
                defaultHeight: Math.round(bounds.height)
            }
        });
        try {
            if (!finsembleWindow.windowOptions.customData.foreign.components["Window Manager"].persistWindowState) {
                return;
            }
        }
        catch (e) {
            //prop doesn't exist.
            return;
        }
        //StorageClient.save({ topic: WORKSPACE_CACHE_TOPIC, key: self.windowHash, value: finsembleWindow.windowOptions });
        if (setActiveWorkspaceDirty) {
            logger_1.default.system.log("APPLICATION LIFECYCLE: Setting Active Workspace Dirty: Window Moved");
            this.dirtyTheWorkspace();
        }
    }
    ;
    /**
     * Minmizes window.
     * @param {function} [cb] Optional callback
     * @example
     * FSBL.Clients.WindowClient.minimize();
     */
    minimize(cb) {
        this.cacheBounds(function () {
            finsembleWindow.minimize(null, function (err) {
                if (!err) {
                    //self.windowState = "minimized";
                }
                else {
                    logger_1.default.system.error("WindowClient:minimize", err);
                }
                if (cb) {
                    cb(err);
                }
            });
        });
    }
    ;
    /**
     * Sets whether window is always on top.
     * @param {function} [cb] Optional callback
     * @example
     * FSBL.Clients.WindowClient.setAlwaysOnTop(true);
     */
    setAlwaysOnTop(alwaysOnTop, cb) {
        finsembleWindow.updateOptions({ options: { alwaysOnTop: alwaysOnTop } }, () => {
            if (cb)
                cb();
        });
    }
    /**
     * Restores window from a maximized state.
     * @param {function} [cb] Optional callback
     * @example
     * FSBL.Clients.WindowClient.restore();
     */
    restore(cb = Function.prototype) {
        //finsembleWindow.getState((err, windowState) => {
        finsembleWindow.restore(null, function (err) {
            if (!err) {
                //self.windowState = "normal";
            }
            else {
                logger_1.default.system.error("WindowClient:restore", err);
            }
            cb(err);
        });
    }
    ;
    cacheBounds(cb) {
        this.getBounds((err, bounds) => {
            if (err) {
                cb();
                return console.warn("Get bounds error.", err, "Window may not be registered with the window service");
            }
            finsembleWindow.updateOptions({
                options: {
                    cachedLeft: bounds.left,
                    defaultLeft: bounds.left,
                    cachedTop: bounds.top,
                    defaultTop: bounds.top,
                    cachedWidth: bounds.width,
                    defaultWidth: bounds.width,
                    cachedHeight: bounds.height,
                    defaultHeight: bounds.height
                }
            });
            if (cb) {
                cb(bounds);
            }
        });
    }
    /**
     * Maximizes the window. Also takes into account the application toolbar.
     * @param {function} [cb] Optional callback
     * @todo, when fixed components are a thing, make sure that maximize doesn't sit on top of them either.
     * @example
     * FSBL.Clients.WindowClient.maximize();
     */
    maximize(cb) {
        this.cacheBounds(function () {
            finsembleWindow.maximize();
            //finsembleWindow.windowState = "maximized";
            return cb();
        });
    }
    /**
     * FinWindow destructor (more or less). Removes all of the listeners that we added when the window was created.
     * @private
     */
    removeFinWindowEventListeners() {
        finsembleWindow.removeEventListener("maximized", this.onWindowMaximized);
        finsembleWindow.removeEventListener("restored", this.onWindowRestored);
        finsembleWindow.removeEventListener("blurred", this.onWindowBlurred);
        finsembleWindow.removeEventListener("focused", this.onWindowFocused);
        finsembleWindow.removeEventListener("close-requested", this.close);
        finsembleWindow.removeEventListener("minimized", this.onWindowMinimized);
    }
    ;
    /**
     * This function injects the header bar into all frameless windows that request it. This should only be used if you've decided not to use the provided <code>WindowClient.start()</code> method.
     *
     * **NOTE:** If you are using the finsemble windowTitleBar component, you do not need to call this function.
     * @private
     */
    injectDOM(headerHeight) {
        //for the aesthetics.
        if (document.getElementById("FSBLHeader")) {
            return;
        }
        // On slow loading components, the end user might have the opportunity to scroll the page before the window title bar is injected.
        // This triggers a chromium bug related to elements with position:fixed. Chromium loses track of where that element actually is on
        // the browser page. Chromium *thinks* the title bar is lower than it actually is, by the amount of pixels scrolled by the user.
        // The fix is to force the scroll position back to zero before we inject this fixed element.
        window.scrollTo(0, 0);
        // Now inject the window title bar
        var template = document.createElement("div");
        template.innerHTML = "<div id=\"FSBLHeader\"" + (headerHeight ? " style=height:" + headerHeight : "") + "></div>";
        document.body.insertBefore(template.firstChild, document.body.firstChild);
    }
    ;
    /**
     * Injects the windowTitleBar into the window.
     * @param {function} cb Callback function
     * @return {object} Reference to a RouterClient.query
     * @private
     */
    injectFSBL(params, cb) {
        //This flag is set by the launcher service. It tells us if FSBL was injected
        this.routerClient.query(`WindowService-Request-injectTitleBar`, { config: finsembleWindow.windowOptions, titleComponent: params.component }, (err, response) => {
            if (params.bodyMarginTop == "auto") {
                let setHeaderHeight = () => {
                    let header = document.getElementsByClassName("fsbl-header")[0];
                    if (!header) { //wait for header to be rendered
                        return setTimeout(setHeaderHeight, 100);
                    }
                    let headerHeight = window.getComputedStyle(header, null).getPropertyValue("height");
                    document.body.style.marginTop = headerHeight;
                    if (params.bumpElements && params.bumpElements.bumpBy === "auto") {
                        params.bumpElements.bumpBy = headerHeight;
                        this.bumpFixedElements(params.bumpElements);
                    }
                };
                setHeaderHeight();
            }
            if (cb) {
                cb(err, response);
            }
        });
    }
    ;
    /**
     * Given a field, this function retrieves app state. If no params are given you get the full state
     * @param {object} params
     * @param {string} [params.field] field
     * @param {Array.<string>} [params.fields] fields
     * @param {function} cb Callback
     * @example <caption>The example below shows how we retrieve data to restore the layout in our charts.</caption>
     * FSBL.Clients.WindowClient.getComponentState({
     *	 field: 'myChartLayout',
     *}, function (err, state) {
     *	if (state === null) {
     *		return;
     *	}
     *	importLayout(state);
     *});
     * FSBL.Clients.WindowClient.getComponentState({
     *	 fields: ['myChartLayout', 'chartType'],
     *}, function (err, state) {
     *	if (state === null) {
     *		return;
     *	}
     * 	var chartType = state['chartType'];
     *  var myChartLayout = state['myChartLayout'];
     *});
     **/
    getComponentState(params, cb) {
        if (!params) {
            params = {};
        }
        if (params.fields && !Array.isArray(params.fields)) {
            params.fields = [params.fields];
        }
        validate_1.default.args(params, "object", cb, "function");
        if (finsembleWindow) {
            return finsembleWindow.getComponentState(params, cb);
        }
        logger_1.default.system.warn("Attempt to use getComponentState before component is ready or in a service");
        //if (!finWindow) { finWindow = System.Window.getCurrent(); } //TODO: why are we checking here??
        if (!params.windowName)
            params.windowName = window.name; // using FSBL in services causes errors because finsembleWindow does not exist
        var hash = this.getContainerHash(params.windowName);
        storageClient_1.default.get({ topic: WORKSPACE_CACHE_TOPIC, key: hash }, (err, response) => {
            if (err) {
                logger_1.default.system.error("Error retreiving window client's component state.");
                cb(err);
                return;
            }
            var data = response;
            if (response && params.field) {
                this.componentState = data || {};
                cb(err, data[params.field]);
            }
            else if (params.fields) {
                var respObject = {};
                for (var i = 0; i < params.fields.length; i++) {
                    if (data[params.fields[i]]) {
                        respObject[params.fields[i]] = data[params.fields[i]];
                    }
                }
                return cb(null, respObject);
            }
            else if (response) {
                return cb(null, data);
            }
            else {
                logger_1.default.system.info("WindowClient:getComponentState:error, response, params", err, response, params);
                cb("Not found", response);
            }
        });
    }
    ;
    /**
     * Checks to see if this save makes the workspace 'dirty'. We use this when deciding whether to prompt the user to save their workspace.
     * @param {object} params
     * @param {string} params.field field
     * @param {string} params.windowName windowName
     * @param {function} cb Callback
     * @private
     */
    compareSavedState(params, cb = Function.prototype) {
        // if (!WorkspaceClient || WorkspaceClient.activeWorkspace.isDirty) { return; }
        /* Once upon a time, a component could have multiple sub-containers. This hash has the window name repeating
        twice because of that now defunct requirement. In the future we will eliminate the duplication but at the
        cost of backward compatibility issues. Ideally, implement a phase out approach. Read from "single" and if not found
        look for "double". Make all saves to "single". Over time, all databases will therefore be transformed.
        */
        var hash = util.camelCase("activeWorkspace", finsembleWindow ? finsembleWindow.name : window.name, params.windowName);
        console.info(WORKSPACE_CACHE_TOPIC, hash);
        storageClient_1.default.get({ topic: WORKSPACE_CACHE_TOPIC, key: hash }, (err, response) => {
            console.info(hash, params, response);
            logger_1.default.system.debug("comparing saved state response:", response, "params:", params);
            /**
             * We clone the value below because:
             *
             * let's say that the user passes this in:
             * {value: undefined,
             * anotherValue: true}.
             *
             * When that is persisted to localStorage, it'll come back as {anotherValue: true}. Those two values are different. So we stringify the value coming in to compare it to what was saved.
             */
            let cleanValue = JSON.parse(JSON.stringify(params.value));
            if (!response || !deepEqual(response[params.field], cleanValue)) {
                logger_1.default.system.debug("APPLICATION LIFECYCLE:  Setting Active Workspace Dirty: Saved state does not match current component state");
                this.dirtyTheWorkspace();
            }
            cb();
        });
    }
    ;
    /**
     * Given a field, this function sets and persists app state.
     * @param {object} params
     * @param {string} [params.field] field
     * @param {Array.<string>} [params.fields] fields
     * @param {function} [cb] Callback
     * @example <caption>The example below shows how we save our chart layout when it changes.</caption>
     * var s = stx.exportLayout(true);
     * //saving layout'
     * FSBL.Clients.WindowClient.setComponentState({ field: 'myChartLayout', value: s });
     * FSBL.Clients.WindowClient.setComponentState({ fields: [{field:'myChartLayout', value: s }, {field:'chartType', value: 'mountain'}]);
     **/
    setComponentState(params, cb = Function.prototype) {
        validate_1.default.args(params, "object", cb, "function=") && validate_1.default.args2("params.field", params.field, "string");
        if (finsembleWindow) {
            return finsembleWindow.setComponentState(params, cb);
        }
        // using FSBL in services causes errors because finsembleWindow does not exist
        if (!params.windowName)
            params.windowName = window.name;
        var hash = this.getContainerHash(params.windowName);
        let fields = params.fields;
        if (params.field) {
            fields = [{
                    field: params.field,
                    value: params.value
                }];
        }
        for (let i = 0; i < fields.length; i++) {
            let field = fields[i];
            if (!field.field || !field.value) {
                continue;
            }
            this.componentState[field.field] = field.value;
        }
        this.compareSavedState(params, () => {
            logger_1.default.system.debug("COMPONENT LIFECYCLE:SAVING STATE:", this.componentState);
            storageClient_1.default.save({ topic: WORKSPACE_CACHE_TOPIC, key: hash, value: this.componentState }, function (err, response) {
                if (cb) {
                    cb(err, response);
                }
            });
        });
    }
    getWindowNameForDocking() {
        let parent = finsembleWindow.parentWindow;
        return parent ? parent.name : finsembleWindow.name;
    }
    /**
     * Gets containerHash given a containerId.
     * @param {string} windowName The name of the window
     * @returns {string} Hash for the window
     * @private
     */
    getContainerHash(windowName) {
        return util.camelCase(this.windowHash, windowName);
    }
    /**
     * Forms a group with any window that is touching the border of this window.
     * @private
     */
    formGroup() {
        let windowName = this.getWindowNameForDocking();
        this.routerClient.transmit("DockingService.formGroup", { windowName });
        this.dirtyTheWorkspace(windowName);
    }
    /**
     * Makes the workspace dirty.
     * @private
     */
    dirtyTheWorkspace(windowName = finsembleWindow ? finsembleWindow.name : window.name) {
        if (workspaceClient_1.default && !workspaceClient_1.default.activeWorkspace.isDirty) {
            this.routerClient.transmit(constants_1.WORKSPACE.API_CHANNELS.SET_ACTIVEWORKSPACE_DIRTY, { windowName }, null);
        }
    }
    /**
     * This function is critical if you want docking and snapping to work. It transmits a message to the LauncherService, which registers it as a dockable window.
     *
     * **NOTE:** If you are using the finsemble windowTitleBar component, you do not need to call this function.
     * @param {object} params Parameters
     * @param {function} [cb] callback
     *
     * @example
     * FSBL.Clients.WindowClient.registerWithDockingManager();
     * @private
     */
    registerWithDockingManager(params, cb) {
        if (finsembleWindow.parentWindow) {
            // TABBING TBD: need more orderly startup with state managed from just one place (StackWindowManagerService also controls register/deregister)
            logger_1.default.system.debug("registerWithDockingManager ignore registration request if has a parent");
            if (cb)
                cb(); // return without error because stil want component to come up
        }
        var windowName = finsembleWindow.name;
        var uuid = finsembleWindow.uuid;
        this.startedRegistrationWithDocking = true;
        this.routerClient.query("DockingService.registerWindow", {
            name: windowName,
            uuid: uuid,
            options: params || {},
            windowType: "OpenFinWindow"
        }, () => {
            this.startedRegistrationWithDocking = false;
            if (this.deregisterPlease) {
                this.deregisterWithDockingManager();
                this.deregisterPlease = false;
            }
            logger_1.default.system.debug("WINDOW LIFECYCLE: Docking Registration complete.");
            if (cb) {
                cb();
            }
        });
        this.routerClient.addListener("DockingService." + windowName, (err, response) => {
            if (response.data.command === "saveWindowLocation") {
                //this.saveWindowBounds(response.data.bounds, true);
                this.dirtyTheWorkspace();
            }
        });
    }
    /**
     * This function is critical if you don't want to keep references of windows in the LauncherService after they close. It simply notifies the LauncherService that the window is no longer dockable. It's invoked when the window is closed.
     * **NOTE:** If you are using the finsemble windowTitleBar component, you do not need to call this function.
     * @param {boolean} removeFromWorkspace true to remove from workspace
     * @example
     * FSBL.Clients.WindowClient.deregisterWithDockingManager();
     * @private
     */
    deregisterWithDockingManager(removeFromWorkspace) {
        if (this.startedRegistrationWithDocking) {
            this.deregisterPlease = true;
        }
        var windowName = finsembleWindow.name;
        this.routerClient.transmit("DockingService.deregisterWindow", {
            name: windowName,
            userInitiated: removeFromWorkspace
        });
    }
    ;
    /**
     * @private
     */
    enableHotkeys() {
        this.enableDevToolsHotkey();
        this.enableReloadHotkey();
    }
    /**
     * Helper function to display devtools if you disable context-menus on your chromium windows. You must call this function if you want the hotkey to work.
     * @private
     */
    enableReloadHotkey() {
        window.addEventListener("keydown", function (e) {
            if (e.keyCode === 82 && e.altKey && e.ctrlKey) {
                system_1.System.clearCache({
                    cache: true,
                    cookies: false,
                    localStorage: false,
                    appcache: true,
                    userData: false
                });
                window.location.reload();
            }
        });
    }
    /**
     * Helper function to display devtools if you disable context-menus on your chromium windows. You must call this function if you want the hotkey to work.
     * @private
     */
    enableDevToolsHotkey() {
        window.addEventListener("keydown", function (e) {
            if (e.keyCode === 68 && e.altKey && e.ctrlKey) {
                var application = system_1.System.Application.getCurrent();
                application.getManifest(function (manifest) {
                    var uuid = manifest.startup_app.uuid;
                    var windowName = finsembleWindow.name;
                    system_1.System.showDeveloperTools(uuid, windowName);
                }, function (err) {
                    logger_1.default.system.error("devtools", err);
                });
            }
        });
    }
    /**
     * Bumps top-level containers down below the windowTitleBar.
     * @private
     */
    bumpFixedElements(params) {
        if (!params || !(params.absolute || params.fixed)) {
            return;
        }
        var elems = document.body.getElementsByTagName("*");
        var len = elems.length;
        for (var i = 0; i < len; i++) {
            if (elems[i].id === "FSBLHeader" || elems[i].classList.contains("fsbl-header")) {
                continue;
            }
            var style = window.getComputedStyle(elems[i], null), possibleZeros = ["0", "0px", 0];
            var topStyle = style.getPropertyValue("top");
            //only target top-level fixed/absolutely positioned containers.
            if (params.absolute && elems[i].parentNode === document.body && style.getPropertyValue("position") == "absolute") {
                if (params.absolute == "all") {
                    elems[i].style.top = "calc(" + topStyle + " + " + params.bumpBy + ")";
                }
                else if (params.absolute == "0Positioned" && possibleZeros.includes(topStyle)) {
                    elems[i].style.top = params.bumpBy;
                }
            }
            else if (params.fixed && style.getPropertyValue("position") == "fixed") {
                if (params.fixed == "all") {
                    elems[i].style.top = "calc(" + topStyle + " + " + params.bumpBy + ")";
                }
                else if (params.fixed == "0Positioned" && possibleZeros.includes(topStyle)) {
                    elems[i].style.top = params.bumpBy;
                }
            }
        }
    }
    /**
     * Forces window to sit on top of other windows.
     * @example
     * FSBL.Clients.WindowClient.bringWindowToFront();
     */
    bringWindowToFront() {
        finsembleWindow.isShowing(function (err, isShowing) {
            if (isShowing) {
                finsembleWindow.bringToFront({ forceFocus: true }, function (err) {
                    if (err) {
                        logger_1.default.system.error("WindowClient.bringWindowToFront: failure:" + err);
                    }
                    else {
                        logger_1.default.system.info("WindowClient.bringWindowToFront: success");
                    }
                });
            }
        });
    }
    /**
     * The Finsemble Window Title Bar is injected if FSBLHeader: true or FSBLHeader is an object with the same items as the properties of params below as this function is in the component's config. If you want to inject the Finsemble header later, you can do so by calling this function
     * @param {object} 	[params]
     * @param {string} [params.component] Component to inject. Default is "windowTitleBar"
     * @param {object} [params.bumpElements]
     * @param {boolean|string} [params.bumpElements.fixed] Either false, "all" or "0Positioned". If all, all fixed elements are moved. 0Positioned only moves elements that have top 0. Default is all.
     * @param {boolean|string} [params.bumpElements.absolute] Either false, "all" or "0Positioned". If all, all fixed elements are moved. 0Positioned only moves elements that have top 0. Only applies to children of the body. Default is all.
     * @param {string} [params.bumpElements.bumpBy] default is "25px".
     * @param {string} [params.bodyMarginTop] Sets the body margin. Default is "30px".
     * @param {string} [params.forceHeaderHeight] Sets a height to the main FSBLHeader div.
     */
    injectHeader(params, cb = Function.prototype) {
        //FIXME(Terry) windowService should inject directly from a config:
        // components."*".component.inject|preload="windowTitleBar.js" <-- set the windowTitleBar
        // components."welcome".component.inject|preload="windowTitleBar.js" <-- override the windowTitleBar
        // Everything from here down then goes into windowTitleBar.jsx inside FSBLREady()
        let self = this;
        if (this.hasHeader)
            return;
        this.hasHeader = true;
        var defaultParams = {
            component: "windowTitleBar",
            bumpElements: {
                fixed: "all",
                absolute: "all",
                bumpBy: "auto"
            },
            bodyMarginTop: "auto",
            forceHeaderHeight: false
        };
        if (!params || params === true) {
            params = defaultParams;
        }
        else {
            params = Object.assign(defaultParams, params);
        }
        this.injectDOM(params.forceHeaderHeight);
        if (params.bumpElements && params.bumpElements.bumpBy !== "auto") {
            this.bumpFixedElements(params.bumpElements);
        }
        if (params.bodyMarginTop && params.bodyMarginTop !== "auto") {
            document.body.style.marginTop = params.bodyMarginTop;
        }
        // initialize but if child of a stacked window then don't register with docking
        //finsembleWindow.getParent();
        self.injectFSBL(params, cb);
    }
    /**
     * This function is invoked inside of {@link WindowClient#start|WindowClient.start()}. It adds listeners for 'close' (when the workspace is switched), 'bringToFront', 'restore', and 'move' (used in AutoArrange).
     *
     * **NOTE:** If you are using the finsemble windowTitleBar component, you do not need to call this function.
     * @example
     * FSBL.Clients.WorkspaceClient.addWorkspaceListeners();
     * @private
     */
    addWorkspaceListeners() {
        // pubsub ensures close command can't be loss in a race condition (e.g. if close is issued while the destinateion window was reloading)
        this.routerClient.subscribe("WorkspaceService." + finsembleWindow.name, (err, response) => {
            if (response.data.state === "start") {
                // do nothing since normal startup
            }
            else if (response.data.state === "close") {
                // since going to close, reset this pubsub state back to default state (otherwise would keep closing);
                // note may not see local log of this outgoing publish because window is closing (but publish will go out before close)
                this.routerClient.publish("WorkspaceService." + finsembleWindow.name, { "state": "start" });
                this.close({
                    removeFromWorkspace: false
                });
            }
            else {
                logger_1.default.system.warn("incoming notify has unknown state", finsembleWindow.name, response.data);
            }
        });
        this.routerClient.addListener("WorkspaceService." + finsembleWindow.name, (err, response) => {
            switch (response.data.command) {
                case "bringToFront":
                    this.bringWindowToFront();
                    break;
                case "restore":
                    this.restore();
                    break;
                case "move":
                    finsembleWindow.animate({
                        transition: {
                            position: {
                                left: response.data.left,
                                top: response.data.top,
                                duration: 250
                            }
                        }, options: {}
                    }, (err) => {
                        if (err) {
                            logger_1.default.system.error("WindowClient:WorkspaceService: Animate failed: " + err);
                        }
                        else {
                            this.routerClient.transmit("DockingService.updateWindowPositions", {});
                            logger_1.default.system.debug("WindowClient:WorkspaceService successfully moved window.");
                            this.getBounds((err, bounds) => {
                                //this.saveWindowBounds(bounds, true);
                                this.dirtyTheWorkspace();
                            });
                        }
                    });
                    break;
            }
        });
    }
    ;
    injectStylesheetOverride() {
        var node = document.createElement("style");
        node.type = "text/css";
        node.appendChild(document.createTextNode(finsembleWindow.windowOptions.customData.cssOverride));
        document.body.appendChild(node);
    }
    /**
     * If we spawned this openfin app from our parent application, we listen on that application for certain events that might fire _if_ our parent goes down. If the parent goes down, we want to kill its children as well.
     * @private
     */
    checkIfChildApp() {
        if (finsembleWindow.windowOptions &&
            finsembleWindow.windowOptions.customData &&
            finsembleWindow.windowOptions.customData.parentUUID &&
            finsembleWindow.windowOptions.customData.parentUUID !== system_1.System.Application.getCurrent().uuid) {
            let parent = system_1.System.Application.wrap(finsembleWindow.windowOptions.customData.parentUUID);
            parent.addEventListener("crashed", this.close.bind(null, false));
            parent.addEventListener("initialized", this.close.bind(null, false));
            parent.addEventListener("out-of-memory", this.close.bind(null, false));
        }
    }
    /**
     * Prevents the browser's default behavior of loading files/images if they're dropped anywhere in the window.
     * If a component has a drop area that _doesn't_ preventDefault, the image/file will still be loaded.
     * This only prevents bad behavior from happening when the user drops an image/file on part of the window that _isn't_ listening for drag/drop events (usually by accident).
     */
    preventUnintendedDropEvents() {
        function preventDefault(e) { e.preventDefault(); }
        window.addEventListener("dragover", preventDefault, false);
        window.addEventListener("drop", preventDefault, false);
    }
    /**
    * If the user presses windows key + left or right it causes all kinds of abhorrent behavior. This function captures the hotkeys and essentially prevents the behavior.
    * @private
     */
    rejectWindowsKeyResizes() {
        let keysDown = {};
        //Checking here for windows key + arrowLeft or arrowRight. This triggers an aero-resize that really messes with docking/
        //When that combination is captured, we set our bounds back to where they were to begin with.
        const onKeyUp = async (e) => {
            let keys = Object.keys(keysDown);
            //which key was just pressed.
            let ArrowPressed = e.key === "ArrowLeft" || e.key === "ArrowRight";
            let WindowsKeyPressed = e.key === "Meta";
            //Which key was pressed previously.
            let ArrowIsDown = keys.includes("ArrowLeft") || keys.includes("ArrowRight");
            let WindowsKeyDown = keys.includes("Meta");
            //Either we pressed the arrow first or the windows key first. Doesn't matter. Code should still work.
            if ((ArrowIsDown && WindowsKeyPressed) || (WindowsKeyDown && ArrowPressed)) {
                let { data: bounds } = await finsembleWindow.getBounds();
                finsembleWindow.setBounds(bounds);
            }
            //Key isn't down any more. Delete it if it was down.
            delete keysDown[e.key];
        };
        //Store the key on our object.
        const onKeyDown = (e) => {
            keysDown[e.key] = true;
        };
        if (FSBL) {
            hotkeysClient_1.default.onReady(() => {
                //The browser's keyDown isn't capable of capturing keyChords if the first key pressed is the window's key. So we'll have to create a makeshift keystroke handler.
                //On keydown, we grab that key. Keyup can fire for different keys, so that's where the work happens.
                window.addEventListener("keyup", onKeyUp);
                window.addEventListener("keydown", onKeyDown);
            });
        }
    }
    /**
     * Adds listeners to handle hash changes and finWindow listeners.
     * @private
     * @param {function} [cb]
     */
    addListeners(cb = Function.prototype) {
        var self = this;
        this.listenForHashChanges();
        this.preventUnintendedDropEvents();
        this.rejectWindowsKeyResizes();
        //FinsembleWindow listenrs
        //@todo, make the openfin window trigger an event on the finsemble window, which will emit up. we then use addListener instead of addEventListener
        finsembleWindow.addListener("clearParent", () => {
            logger_1.default.system.info("WindowClient.clearParent registerWithDockingManager");
            //this.registerWithDockingManager(); // stack takes care of this
        });
        finsembleWindow.addListener("setParent", () => {
            logger_1.default.system.info("WindowClient.setParent deregisterWithDockingManager");
            this.deregisterWithDockingManager(); // stack takes care of this too but doesnt work at startup or workspace switch so do again here
        });
        finsembleWindow.addEventListener("maximized", this.onWindowMaximized);
        finsembleWindow.addEventListener("minimized", this.onWindowMinimized);
        finsembleWindow.addEventListener("restored", this.onWindowRestored);
        // On Blur remove the border from window
        finsembleWindow.addEventListener("blurred", this.onWindowBlurred);
        // On focus add a border to the window
        finsembleWindow.addEventListener("focused", this.onWindowFocused);
        if (typeof FSBL !== "undefined") {
            FSBL.onShutdown(() => {
                logger_1.default.system.info("WINDOW LIFECYCLE:SHUTDOWN: FSBL.onShutdown start");
                return new Promise((resolve) => {
                    logger_1.default.system.debug("FSBL.onShutdown");
                    FSBL.shutdownComplete();
                    this.close({
                        removeFromWorkspace: false,
                        ignoreParent: true,
                        closeWindow: false
                    }, resolve);
                });
            });
        }
        cb();
    }
    ;
    /**
     * Sends a command to the header. Commands affect the header state,
     * so that the UI reflects what is going on in the component window.
     * @param {string} command The state object to set
     * @param {object} state The new state (merged with existing)
     */
    updateHeaderState(command, state) {
        if (!this.commandChannel) {
            return;
        }
        this.commandChannel(command, state);
    }
    /**
     * Establishes a command channel with a header. The WindowClient can
     * update header state via this channel.
     * @param {function} commandChannel A function callback that receives commands
     */
    headerCommandChannel(commandChannel) {
        this.commandChannel = commandChannel;
    }
    /**
     * Ejects the window from the docking group
     * @private
     */
    ejectFromGroup() {
        let windowName = this.getWindowNameForDocking();
        FSBL.Clients.RouterClient.query("DockingService.leaveGroup", {
            name: windowName
        });
        this.dirtyTheWorkspace(windowName);
    }
    /**
     * This function does two things:
     *
     * 1. It sets the window's title in the windowTitleBar component, and
     * 2. It sets the title in the DOM.
     *
     * This is useful if you like to keep the window's title in sync with a piece of data (e.g., a Symbol);
     * @param {String} title Window title.
     * @todo Allow HTML or classes to be injected into the title.
     * @example <caption>The code shows how you would change your window title.</caption>
     *  FSBL.Clients.WindowClient.setWindowTitle("My Component's New Title");
     */
    setWindowTitle(title) {
        validate_1.default.args(title, "string");
        this.title = title;
        //document.title = title;  // casuses flickering in chromium 53
        this.updateHeaderState("Main", { windowTitle: title });
        finsembleWindow.setTitle(title);
    }
    /**
     * Retrieves data that was set with {@link LauncherClient#spawn}.
     * @return {object} The data or empty object if no data was set. *Note, this will never return null or undefined.*
     */
    getSpawnData() {
        if (!this.options.customData) {
            return {};
        }
        var spawnData = this.options.customData.spawnData;
        if (typeof spawnData === "undefined") {
            return {};
        }
        return spawnData;
    }
    ;
    /**
     * Returns a reference to the current window for the *component*. For most
     * components this will just return the finWindow, but for a compound component
     * it will return a CompoundWindow.
     * @returns {finWindow}
     */
    getCurrentWindow() {
        return system_1.System.Window.getCurrent();
    }
    ;
    /**
     * For the DOM element that has been passed in, this function returns a bounding box that is relative
     * to the OpenFin virtual monitor space. That is, it returns the position of the DOM element on the desktop.
     * @param {HTMLElement|string} element A selector or HTMLElement
     * @private
     * @todo convert to use monitor util function and make sure current bounds are correct. For some windows (e.g., toolbars/menus that don't track their own bounds because they don't have drag regions), options.default will represent the data _on spawn_, not the bounds when the function is called.
     */
    getDesktopBoundingBox(element) {
        var el = element;
        if (typeof (element) === "string") {
            el = document.querySelector(element);
        }
        let box = el.getBoundingClientRect();
        let boundingBox = {
            top: this.options.defaultTop - box.top,
            left: this.options.defaultLeft + box.left,
            width: box.width,
            height: box.height,
            right: 0,
            bottom: 0
        };
        boundingBox.right = boundingBox.left + boundingBox.width;
        boundingBox.bottom = boundingBox.top + boundingBox.height;
        return boundingBox;
    }
    isPointInBox(point, box) {
        if (!box.bottom)
            box.bottom = box.top + box.height;
        if (!box.right)
            box.right = box.left + box.width;
        return (point.x > box.left && point.x < box.right && point.y < box.bottom && point.y > box.top);
    }
    ;
    /**
     * Returns (via callback) true if the mouse is currently located (hovering) over the requested element.
     * @param {HTMLElement|string} element The element, or a selector, to check
     * @param {function} cb A function that returns a boolean
     * @private
     */
    isMouseOverDOMElement(element, cb) {
        var boundingBox = this.getDesktopBoundingBox(element);
        system_1.System.getMousePosition((err, position) => {
            cb(this.isPointInBox(position, boundingBox));
        });
    }
    ;
    /**
     * Returns the window identifier for the current component.
     * @returns {windowIdentifier}
     */
    getWindowIdentifier() {
        var componentType = null;
        if (this.options && this.options.customData && this.options.customData.component)
            componentType = this.options.customData.component.type;
        return {
            windowName: finsembleWindow ? finsembleWindow.name : window.name,
            uuid: finsembleWindow ? finsembleWindow.uuid : null,
            componentType: componentType
        };
    }
    ;
    /**
     * Highlights the window as active by creating a border around the window.
     *
     * @param {boolean} active  Set to false to turn off activity
     */
    setActive(active) {
        if (active) {
            addClass(document.documentElement, "desktop-active");
        }
        else {
            removeClass(document.documentElement, "desktop-active");
        }
    }
    ;
    /**
     * Returns the bounds for the current window.
     * @param {function} cb
     */
    getBounds(cb) {
        finsembleWindow.getBounds(function (err, bounds) {
            cb(err, bounds);
        });
    }
    ;
    /**
     *
     * @param {*} params - params.windowIdentifier is required.
     * @param {*} cb
     */
    startTilingOrTabbing(params, cb = Function.prototype) {
        FSBL.Clients.RouterClient.transmit("DockingService.startTilingOrTabbing", params);
        cb();
    }
    ;
    /**
     *
     * @param {*} params - put windowIdentifier in params.windowIdentifier. If not provided, must set params.waitForIdentifier true
     * @param {*} cb
     */
    cancelTilingOrTabbing(params, cb = Function.prototype) {
        console.debug("CancelTilingOrTabbing");
        FSBL.Clients.RouterClient.transmit("DockingService.cancelTilingOrTabbing", params);
        cb();
    }
    ;
    /**
     *
     * @param {*} params - windowIdentifier is required
     * @param {*} cb
     */
    sendIdentifierForTilingOrTabbing(params, cb = Function.prototype) {
        FSBL.Clients.RouterClient.transmit("DockingService.identifierForTilingOrTabbing", params);
        cb();
    }
    ;
    /**
     *
     * @param {*} params - params.windowIdentifier is required.
     * @param {*} cb
     */
    stopTilingOrTabbing(params = {}, cb = Function.prototype) {
        let windowPosition = {
            left: finsembleWindow.windowOptions.left,
            top: finsembleWindow.windowOptions.top,
            height: finsembleWindow.windowOptions.height,
            width: finsembleWindow.windowOptions.width,
            right: finsembleWindow.windowOptions.right,
            bottom: finsembleWindow.windowOptions.bottom,
        };
        let transmitAndQueryStop = () => {
            FSBL.Clients.RouterClient.query("DockingService.stopTilingOrTabbing", params, () => {
                cb();
            });
            FSBL.Clients.RouterClient.transmit("DockingService.stopTilingOrTabbing", params);
        };
        if (!params.mousePosition) {
            return system_1.System.getMousePosition((err, position) => {
                params.mousePosition = position;
                let pointIsInBox = this.isPointInBox(position, windowPosition);
                if (!params.allowDropOnSelf && pointIsInBox) {
                    logger_1.default.system.debug("StopTilingOrTabbing windowClient cancel 1:", params, windowPosition, err);
                    FSBL.Clients.RouterClient.transmit("DockingService.cancelTilingOrTabbing", params);
                    return cb();
                }
                logger_1.default.system.debug("StopTilingOrTabbing windowClient stop 1:", err, params, windowPosition, err);
                transmitAndQueryStop();
            });
        }
        let pointIsInBox = this.isPointInBox(params.mousePosition, windowPosition);
        if (!params.allowDropOnSelf && pointIsInBox) {
            logger_1.default.system.debug("StopTilingOrTabbing windowClient cancel 2:", params, windowPosition);
            FSBL.Clients.RouterClient.transmit("DockingService.cancelTilingOrTabbing", params);
            return cb();
        }
        logger_1.default.system.debug("StopTilingOrTabbing windowClient stop 2:", params, windowPosition);
        transmitAndQueryStop();
    }
    ;
    /**
     * Gets the stackedWindow (if this window is a child of a stacked window).
     *
     * If no stacked window then returns null.  But if null and params.create is set, then the stacked window will be automatically created and this window added as the first child.
     *
     * (Typically used by Tabbing Presentation component to manage tabs.)
     *
     * @param {object=} params
     * @param {array=} params.create if true and StackedWindow isn't defined, then it will be created
     * @param {array=} params.windowIdentifiers if creating, then can optionally specify an array of other windowIdentifiers to add to stack on creation (in addition to this window).
     * @param {function} cb cb(err, stackedWindowIdentifier)
     *
     * Typically used by Tabbing Presentation component.
     *
     */
    getStackedWindow(params, cb) {
        logger_1.default.system.debug("WindowClient.getStackedWindow", params);
        cb = cb || params;
        params = params || {};
        params.windowIdentifiers = params.windowIdentifiers || [];
        if (!finsembleWindow.parentWindow && params.create) {
            let onParentSet = (evt) => {
                let parentName = evt.data.parentName;
                finsembleWindow.setParent({ windowName: parentName }, (err2, windowWrapper) => {
                    cb(err2, windowWrapper);
                });
                finsembleWindow.removeListener("parent-set", onParentSet);
            };
            finsembleWindow.addListener("parent-set", onParentSet);
            FSBL.Clients.LauncherClient.spawn("StackedWindow", {
                windowType: "StackedWindow", data: { windowIdentifiers: params.windowIdentifiers }, options: { newStack: true }
            }, function (err, windowInfo) {
                logger_1.default.system.debug("WindowClient.getStackedWindow-success", err, windowInfo);
                if (!err) {
                    return;
                }
                cb(err, null);
            });
        }
        else {
            cb(null, finsembleWindow.getParent());
        }
    }
    /**
     * Private copy of getMonitorInfo from LauncherClient. We have to include it here to avoid a circular reference between LauncherClient and WindowClient.
     * @private
     */
    getMonitorInfo(params, cb) {
        util.getMyWindowIdentifier((myWindowIdentifier) => {
            if (!params.windowIdentifier) {
                params.windowIdentifier = myWindowIdentifier;
            }
            this.routerClient.query("Launcher.getMonitorInfo", params, function (err, response) {
                if (cb) {
                    cb(err, response.data);
                }
            });
        });
    }
    ;
    /**
     * Automatically resizes the height of the window to fit the full DOM of the current window..
     * @param {object} [params]
     * @param {object} [params.padding]
     * @param {number} [params.padding.height]
     * @param {number} [params.padding.width]
     * @param {function} [cb] Optional callback when complete
     */
    fitToDOM(params, cb) {
        var children = document.body.children;
        var element = document.getElementsByTagName("body")[0], style = window.getComputedStyle(element), marginTop = style.getPropertyValue("margin-top"), marginBottom = style.getPropertyValue("margin-bottom");
        var margin = parseInt(marginTop, 10) + parseInt(marginBottom, 10);
        if (isNaN(margin))
            margin = 0;
        var newHeight = margin;
        var newWidth = this.options.width;
        for (var i = 0; i < children.length; i++) {
            var child = children[i];
            newHeight += child.offsetHeight + margin;
            //elmMargin = parseInt(child.style.marginTop, 10) + parseInt(child.style.marginBottom, 10);
        }
        if (typeof (params) === "function") {
            cb = params;
            params = null;
        }
        if (params && params.padding) {
            if (params.padding.height) {
                newHeight += params.padding.height;
            }
            if (params.padding.width) {
                newWidth += params.padding.width;
            }
        }
        if (params && params.maxHeight && newHeight > params.maxHeight) {
            newHeight = params.maxHeight;
        }
        logger_1.default.system.debug("WindowClient.FitToDOM:newHeight", newHeight, params);
        //@todo, do this statically
        this.getMonitorInfo({}, (err, monitorInfo) => {
            //Logger.system.log("updates111 in here");
            let fixBounds = true;
            if (newHeight >= monitorInfo.unclaimedRect.height) {
                newHeight = monitorInfo.unclaimedRect.height;
                fixBounds = true;
            }
            if (newWidth >= monitorInfo.unclaimedRect.width) {
                newWidth = monitorInfo.unclaimedRect.width;
                fixBounds = true;
            }
            if (fixBounds) {
                //bounds.x and bounds.y are null on mac. Not sure if they're set on windows, but this manifested itself with an error on macs that didn't resize.
                logger_1.default.system.debug("WindowClient.FitToDOM:fixBounds", newHeight, newWidth);
                finsembleWindow.getBounds((err, bounds) => {
                    bounds.width = newWidth;
                    bounds.height = newHeight;
                    finsembleWindow.setBounds({ bounds }, cb);
                });
            }
            else if (cb) {
                setTimeout(cb, 0);
            }
        });
    }
    /**
     * Kicks off all of the necessary methods for the app. It
     * 1. Injects the header bar into the window.
     * 2. Sets up listeners to handle close and move requests from the appplication.
     * 3. Adds a listener that saves the window's state every time it's moved or resized.
     * @param {function} callback
     * See the [windowTitleBar tutorial](tutorial-PresentationComponents.html#window-title-bar) for more information.
     * @private
     */
    start(callback = Function.prototype) {
        validate_1.default.args(callback, "function");
        var customData = null, isCompoundWindow = false, shouldInjectHeader = false, shouldInjectCSS = false;
        //where we store componentState for the window.
        this.componentState = {};
        let getFinsembleWindow = (done) => {
            FinsembleWindow_1.FinsembleWindow.getInstance({ name: this.finWindow.name, uuid: this.finWindow.uuid }, (err, response) => {
                logger_1.default.system.debug(`FinsembleWindow.getInstance ${this.finWindow.name}`);
                if (err == "Cannot Wrap Service Manager or Services") {
                    this.isInAService = true;
                    this.windowHash = util.camelCase("activeWorkspace", window.name);
                    return done();
                }
                if (err || !response) {
                    logger_1.default.system.error("wrap failure", err);
                }
                this.finsembleWindow = response;
                finsembleWindow = this.finsembleWindow;
                this.windowHash = util.camelCase("activeWorkspace", finsembleWindow.name);
                this.addListeners();
                done();
            });
        };
        getFinsembleWindow(() => {
            this.retrieveMonitorDimensions();
            this.getInitialOptions(() => {
                //The functions above are necessary to finish initializing the windowClient. The functions below are independent of one another.
                // Note the extra test on the names is to ignore services that are including the windowClient, which needs to be removed
                if (!finsembleWindow || !finsembleWindow.windowOptions) {
                    if (!this.isInAService) {
                        logger_1.default.system.error("Something went wrong attempting to get the current window.");
                    }
                    return callback();
                }
                customData = finsembleWindow.windowOptions.customData;
                if (customData) {
                    isCompoundWindow = typeof customData.window === "undefined" ? false : customData.window.compound;
                    if (customData.cssOverride) {
                        logger_1.default.system.debug("Window has cssOverride. See local window to inspect object");
                        console.debug(customData.cssOverride);
                        shouldInjectCSS = true;
                    }
                    shouldInjectHeader = customData.foreign && !isCompoundWindow && customData.foreign.components["Window Manager"].FSBLHeader;
                }
                let self = this;
                async_1.parallel([
                    function addWorkspaceAndBoundsListeners(done) {
                        if (!isCompoundWindow) {
                            self.addWorkspaceListeners();
                        }
                        done();
                    },
                    function injectCSS(done) {
                        if (shouldInjectCSS) {
                            self.injectStylesheetOverride();
                        }
                        done();
                    },
                    function injectHeader(done) {
                        console.log('will attempt to injectHeader');
                        if (shouldInjectHeader) {
                            self.injectHeader(customData.foreign.components["Window Manager"].FSBLHeader, done);
                        }
                        else {
                            done();
                        }
                    },
                    function registerWithDocking(done) {
                        // Additional function to register any dockable components with docking.
                        // This will make docking aware of those dockable windows
                        // and allow control over docking to window edges/moving windows out of claimed space
                        if (customData && customData.component && customData.component.type !== "service") {
                            let isArrangable = configUtil_1.ConfigUtilInstance.getDefault(customData, "customData.foreign.services.dockingService.isArrangable", true);
                            let shouldRegister = configUtil_1.ConfigUtilInstance.getDefault(customData, "customData.window.dockable", isArrangable);
                            if (!shouldRegister)
                                return done();
                            //Determines whether a dockable component should retrieve its state from memory, or start with default (config defined) options everytime
                            customData.window.overwriteStartDocked = configUtil_1.ConfigUtilInstance.getDefault(customData, "customData.foreign.services.workspaceService.global", false);
                            //Determines whether a component should be capable of tabbing/tiling
                            customData.window.ignoreTilingAndTabbingRequests = configUtil_1.ConfigUtilInstance.getDefault(customData, "customData.foreign.services.dockingService.ignoreTilingAndTabbingRequests", false);
                            /* Determines wether a dockable component should be able to snap to other windows

                                 For purposes of snapping, 'ephemeral' and 'ignoreSnappingRequests' are aliases for each other.
                            */
                            const ignoreSnappingRequests = configUtil_1.ConfigUtilInstance.getDefault(customData, "customData.foreign.services.dockingService.ignoreSnappingRequests", false);
                            const ephemeral = configUtil_1.ConfigUtilInstance.getDefault(customData, "customData.window.ephemeral", false);
                            customData.window.ignoreSnappingRequests = ignoreSnappingRequests || ephemeral;
                            self.registerWithDockingManager(customData.window, () => {
                                self.cacheInitialBounds(done);
                            });
                        }
                        else {
                            return done();
                        }
                    }
                ], (err, results) => callback(err, results));
            });
        });
    }
    ;
}
var windowClient = new WindowClient({
    startupDependencies: {
        services: ["storageService", "windowService"]
    },
    onReady: function (cb) {
        windowClient.start(cb);
    },
    name: "windowClient"
});
exports.default = windowClient;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const baseClient_1 = __webpack_require__(13);
const Util = __webpack_require__(10);
const validate_1 = __webpack_require__(9);
const logger_1 = __webpack_require__(2);
const constants_1 = __webpack_require__(16);
function escapeRegExp(str) {
    return str.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");
}
// validates legal workspace definition
function validWorkspaceDefinition(workspaceJSON) {
    var result = false;
    if (typeof workspaceJSON === "object") {
        var workspaceName = Object.keys(workspaceJSON)[0];
        if (workspaceName && workspaceJSON[workspaceName].workspaceDefinitionFlag) {
            result = true;
        }
        else {
            logger_1.default.system.error("workspaceClient.workspaceClient.convertWorkspaceDefinitionToTemplate: not legal workspace JSON", workspaceJSON);
        }
    }
    else {
        logger_1.default.system.error("workspaceClient.workspaceClient.convertWorkspaceDefinitionToTemplate: input is not a legal object", workspaceJSON);
    }
    return result;
}
// constructor for new template given a workspace definition to derive it from
function WorkspaceTemplate(templateName, workspaceJSON) {
    var newTemplate = workspaceJSON;
    var workspaceName = Object.keys(workspaceJSON)[0];
    newTemplate = Util.clone(workspaceJSON);
    newTemplate[templateName] = newTemplate[workspaceName];
    newTemplate[templateName].templateDefinitionFlag = true;
    newTemplate[templateName].name = templateName; // name is also carried in object for use in service
    if (templateName !== workspaceName) { // if using same name then can't delete data associated with name
        delete newTemplate[workspaceName];
    }
    delete newTemplate[templateName].workspaceDefinitionFlag;
    return newTemplate;
}
//Constructor for a new workspace definition. Given a name, it returns an empty workspace. Given some JSON, it'll merge the windows property with the new workspace.
function WorkspaceDefinition(workspaceName, workspaceJSON) {
    var newWorkspace = {
        [workspaceName]: {
            workspaceDefinitionFlag: true,
            windows: [],
            name: workspaceName
        }
    };
    if (workspaceJSON) {
        let workspaceName = Object.keys(workspaceJSON)[0];
        let clonedWorkspace = Util.clone(workspaceJSON);
        if (clonedWorkspace[workspaceName] && clonedWorkspace[workspaceName].windows) {
            clonedWorkspace[workspaceName].windows = clonedWorkspace[workspaceName].windows;
        }
    }
    return newWorkspace;
}
/**
 * @introduction
 * <h2>Workspace Client</h2>
 * ----------
 * The Workspace Client manages all calls to load, save, rename, and delete workspaces. For an overview, please read the [Workspace tutorial](tutorial-Workspaces.html).
 *
 * @hideConstructor true
 * @constructor
 * @summary You don't need to ever invoke the constructor. This is done for you when WindowClient is added to the FSBL object.
 */
class WorkspaceClient extends baseClient_1._BaseClient {
    constructor(params) {
        super(params);
        //Backward Compatibility
        this.setWorkspaces = this.setWorkspaceOrder;
        this.createNewWorkspace = this.createWorkspace; //Backward Compatiblity
        this.getWorkspaceDefinition = this.export; //Backward Compatibility
        this.addWorkspaceDefinition = this.import; //Backward Compatiblity
        this.getWorkspaceTemplateDefinition = this.exportTemplate; //Backward Compatibility
        this.addWorkspaceTemplateDefinition = this.importTemplate; //Backward Compatibility
        this.removeWorkspaceTemplateDefinition = this.removeTemplate; // Backward Compatibilty
        this.saveWorkspaceTemplateToConfigFile = this.exportToFile;
        validate_1.default.args(params, "object=") && params && validate_1.default.args2("params.onReady", params.onReady, "function=");
        /**
        * List of all workspaces within the application.
        * @type {Array.<Object>}
        */
        this.workspaces = [];
        /**
        * Reference to the activeWorkspace object
        * @type {object}
        */
        this.activeWorkspace = {};
    }
    // Helper function to handle response from service
    _serviceResponseHandler(err, response, resolve, reject, cb = Function.prototype) {
        if (err) {
            reject(new Error(err));
            return cb(err);
        }
        if (!response)
            response = { data: null };
        resolve(response.data);
        cb(null, response.data);
    }
    /// CORE SAVE API - Currently Private. Eventually these will handle all saves. Workspace will just be a data provider.
    /**
     * Saves Data Globally to the Active Workspace (e.g. ComponentState, WindowList etc.)
     * @param {object} params
     * @param {string} params.field
     * @param {object} params.value
     * @param {FinsembleCallbackFunction} cb
     */
    saveGlobalData(params, cb) {
        logger_1.default.system.debug("WorkspaceClient.saveGlobalData", params);
        const saveGlobalDataPromiseResolver = (resolve, reject) => {
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.SAVE_GLOBAL_DATA, params, (err, response) => {
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(saveGlobalDataPromiseResolver);
    }
    /**
     * Saves View Specific Data (e.g. ComponentState, WindowList etc.) to the Currently Active Workspace View or all Views
     * When a window state changes, on
     * @param {object} params
     * @param {string} params.field
     * @param {object} params.value
     * @param {boolean} params.saveToAllViews
     * @param {FinsembleCallbackFunction} cb
     */
    saveViewData(params, cb) {
        logger_1.default.system.debug("WorkspaceClient.saveViewData", params);
        const saveViewDataPromiseResolver = (resolve, reject) => {
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.SAVE_VIEW_DATA, params, (err, response) => {
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(saveViewDataPromiseResolver);
    }
    // This is unnecessary. Window Service should call SaveGlobalData, saveViewData
    /**
     * Adds window to active workspace.
     * @private
     * @param {object} params
     * @param {string} params.name Window name
     * @param {function} [cb] Callback
     */
    addWindow(params, cb = Function.prototype) {
        validate_1.default.args(params, "object", cb, "function=") && params && validate_1.default.args2("params.name", params.name, "string");
        this.routerClient.query("WorkspaceService.addWindow", params, (err, response) => {
            logger_1.default.system.log(`WORKSPACE LIFECYCLE: Window added:WorkspaceClient.addWindow: Name (${params.name})`);
            cb(err, response);
        });
    }
    /**
     * Removes window from active workspace.
     * @private
     * @param {object} params
     * @param {string} params.name Window name
     * @param {function} [cb] Callback
     * @example <caption>This method removes a window from a workspace. It is rarely called by the developer. It is called when a window that is using the window manager is closed. That way, the next time the app is loaded, that window is not spawned.</caption>
     *FSBL.Clients.WorkspaceClient.removeWindow({name:windowName}, function(err, response){
         //do something after removing the window.
     });
     */
    removeWindow(params, cb = Function.prototype) {
        validate_1.default.args(params, "object", cb, "function=") && validate_1.default.args2("params.name", params.name, "string");
        this.routerClient.query("WorkspaceService.removeWindow", params, (err, response) => {
            if (err) {
                return logger_1.default.system.error(err);
            }
            logger_1.default.system.log(`WORKSPACE LIFECYCLE:WorkspaceClient.removeWindow:Window removed: Name (${params.name})`);
            if (response) {
                cb(err, response.data);
            }
            else {
                cb(err, null);
            }
        });
    }
    // Window Related Workspace Functions. Eventually these need to move to the Window Service
    /**
     * AutoArranges windows.
     * @param {object} params Parameters
     * @param {string} [params.monitor="mine"] Same options as {@link LauncherClient#showWindow}. Default is monitor of calling window.
     * @param {function} [cb] Callback
     * @example
     * FSBL.Clients.WorkspaceClient.autoArrange(function(err, response){
     * 		//do something after the autoarrange, maybe make all of the windows flash or notify the user that their monitor is now tidy.
     * });
     */
    autoArrange(params, cb = Function.prototype) {
        validate_1.default.args(params, "object", cb, "function=");
        params = params ? params : {};
        Util.getMyWindowIdentifier((myWindowIdentifier) => {
            FSBL.Clients.LauncherClient.getMonitorInfo({
                windowIdentifier: myWindowIdentifier
            }, (err, dimensions) => {
                params.monitorDimensions = dimensions.unclaimedRect;
                params.monitorDimensions.name = dimensions.name;
                this.routerClient.query("DockingService.autoArrange", params, cb);
            });
        });
    }
    /**
     * Minimizes all windows.
     * @param {object} params
     * @param {string} 	[params.monitor="all"] Same options as {@link LauncherClient#showWindow} except that "all" will work for all monitors. Defaults to all.
     * @param {function} [cb] Callback.
     * @example
     * FSBL.Clients.WorkspaceClient.bringWindowsToFront();
     */
    minimizeAll(params, cb = Function.prototype) {
        validate_1.default.args(params, "object", cb, "function=");
        params = params ? params : { monitor: "all" };
        Util.getMyWindowIdentifier((myWindowIdentifier) => {
            if (!params.windowIdentifier) {
                params.windowIdentifier = myWindowIdentifier;
            }
            this.routerClient.query("WorkspaceService.minimizeAll", params, cb);
        });
    }
    /**
     * Brings all windows to the front.
     * @param {object} params
     * @param {string} 	[params.monitor] Same options as {@link LauncherClient#showWindow} except that "all" will work for all monitors. Defaults to the monitor for the current window.
     * @param {function} [cb] Callback.
     * @example
     * FSBL.Clients.WorkspaceClient.bringWindowsToFront();
     */
    bringWindowsToFront(params, cb = Function.prototype) {
        validate_1.default.args(params, "object", cb, "function=");
        params = params ? params : { monitor: "all" };
        Util.getMyWindowIdentifier((myWindowIdentifier) => {
            if (!params.windowIdentifier) {
                params.windowIdentifier = myWindowIdentifier;
            }
            this.routerClient.query("WorkspaceService.bringWindowsToFront", params, cb);
        });
    }
    /**
     * Gets the currently active workspace.
     * @param {function} cb Callback
     * @example <caption>This function is useful for setting the initial state of a menu or dialog. It is used in the toolbar component to set the initial state.</caption>
     *
    FSBL.Clients.WorkspaceClient.getActiveWorkspace((err, response) => {
        //setState is a React component method.
        self.setState({
            workspaces: response
        });
    });
     */
    getActiveWorkspace(cb) {
        validate_1.default.args(cb, "function");
        logger_1.default.system.debug("WorkspaceClient.getActiveWorkspace");
        const getActiveWorkspacePromiseResolver = (resolve, reject) => {
            let err = null;
            if (!this.activeWorkspace)
                err = "No Active Workspace is Set";
            let response = { data: this.activeWorkspace };
            this._serviceResponseHandler(err, response, resolve, reject, cb);
        };
        return new Promise(getActiveWorkspacePromiseResolver);
    }
    /**
     * Returns the list of saved workspaces.
     * @param {function} cb Callback
     * @example <caption>This function is useful for setting the initial state of a menu or dialog.</caption>
     *
    FSBL.Clients.WorkspaceClient.getWorkspaces((err, response) => {
        //setState is a React component method.
        self.setState({
            workspaces: response
        });
    });
     */
    getWorkspaces(cb) {
        validate_1.default.args(cb, "function");
        logger_1.default.system.debug("WorkspaceClient.getWorkspaces");
        const getWorkspacesPromiseResolver = (resolve, reject) => {
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.GET_WORKSPACES, {}, (err, response) => {
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(getWorkspacesPromiseResolver);
    }
    setWorkspaceOrder(params, cb) {
        let { workspaces } = params;
        validate_1.default.args(cb, "function");
        logger_1.default.system.debug("WorkspaceClient.setWorkspaceOrder", params);
        const setWorkspaceOrderPromiseResolver = (resolve, reject) => {
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.SET_WORKSPACE_ORDER, params.workspaces || params, (err, response) => {
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(setWorkspaceOrderPromiseResolver);
    }
    /**
     * Removes a workspace. Either the workspace object or its name must be provided.
     * @param {object} params
     * @param {Object} 	[params.workspace] Workspace
     * @param {string} 	[params.name] Workspace Name
     * @param {function} [cb] Callback to fire after 'Finsemble.WorkspaceService.update' is transmitted.
     * @example <caption>This function removes 'My Workspace' from the main menu and the default storage tied to the applicaton.</caption>
     * FSBL.Clients.WorkspaceClient.remove({
        name: 'My Workspace'
      }, function(err, response){
            //You typically won't do anything here. If you'd like to do something when a workspace change happens, we suggest listening on the `Finsemble.WorkspaceService.update` channel.
      });
     */
    remove(params, cb = Function.prototype) {
        validate_1.default.args(params, "object", cb, "function=") && !(params.name || params.workspace) && validate_1.default.args2("params.name", params.name, "string");
        logger_1.default.system.debug("WorkspaceClient.remove", params);
        const removePromiseResolver = (resolve, reject) => {
            if (!params.name) {
                params.name = params.workspace.name;
                // we dont need to send workspace objects over the router if not needed.
                delete params.workspace;
            }
            // Cannot remove active workspace.
            if (params.name === this.activeWorkspace.name) {
                logger_1.default.system.error("APPLICATION LIFECYCLE:  Cannot remove active workspace: WorkspaceClient.remove:attempt to remove active workspace name:" + this.activeWorkspace.name);
                let err = "Cannot remove active workspace";
                return this._serviceResponseHandler(err, null, resolve, reject, cb);
            }
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.REMOVE, params, (err, response) => {
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(removePromiseResolver);
    }
    /**
     * Renames the workspace with the provided name. Also removes all references in storage to the old workspace's name.
     * @param {object} params
     * @param {string} params.oldName Name of workspace to rename.
     * @param {string} params.newName What to rename the workspace to.
     * @param {boolean} [params.removeOldWorkspace=true] Whether to remove references to old workspace after renaming.
     * @param {boolean} [params.overwriteExisting=false] Whether to overwrite an existing workspace.
     * @param {function} [cb] Callback
     * @example <caption>This method is used to rename workspaces. It is used in the main Menu component.</caption>
     * FSBL.Clients.WorkspaceClient.rename({
        oldName: 'My Workspace',
        newName: 'The best workspace',
        removeOldWorkspace: true,
      }, function(err, response){
            //Do something.
      });
     */
    rename(params, cb = Function.prototype) {
        validate_1.default.args(params, "object", cb, "function=") && validate_1.default.args2("params.oldName", params.oldName, "string", "params.newName", params.newName, "string");
        logger_1.default.system.debug("WorkspaceClient.rename", params);
        const renamePromiseResolver = (resolve, reject) => {
            if (!params.overwriteExisting && this.workspaceExists(params.newName)) {
                let err = "Workspace Already Exists";
                return this._serviceResponseHandler(err, null, resolve, reject, cb);
            }
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.RENAME, params, (err, response) => {
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(renamePromiseResolver);
    }
    /**
     * Makes a clone (i.e. copy) of the workspace.  The active workspace is not affected.
     * @private
     * @param {object} params
     * @param {string} params.name Name of workspace to clone.
     * @param {string} params.newName Name of workspace to clone.
     * @param {function} [cb] cb(err,response) with response set to the name of the cloned workspace if no error
     * @example <caption>This method is used to clone workspaces. </caption>
     * FSBL.Clients.WorkspaceClient.clone({
        name: 'The best workspace'
      }, function(err, response){
                //Do something.
      });
     */
    // Keeping for backward compatibility
    clone(params, cb = Function.prototype) {
        validate_1.default.args(params, "object", cb, "function=") && validate_1.default.args2("params.name", params.name, "string");
        params.oldName = params.name;
        delete params.name;
        if (!params.newName) {
            params.newName = params.name + "_clone";
        }
        params.removeOldWorkspace = false;
        return this.rename(params, cb);
    }
    ;
    /**
     * Saves the currently active workspace. It does not overwrite the saved instance of the workspace. It simply overwrites the <code>activeWorkspace</code> key in storage.
     * @param {function} [cb] Callback
     * @example <caption>This function persists the currently active workspace.</caption>
     * FSBL.Clients.WorkspaceClient.save(function(err, response){
                //Do something.
      });
     */
    save(cb = Function.prototype) {
        logger_1.default.system.debug("WorkspaceClient.save");
        const savePromiseResolver = (resolve, reject) => {
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.SAVE, {}, (err, response) => {
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(savePromiseResolver);
    }
    /**
     * Helper that tells us whether a workspace with this name exists.
     * @private
     */
    workspaceExists(workspaceName) {
        validate_1.default.args(workspaceName, "string");
        for (var i = 0; i < this.workspaces.length; i++) {
            if (workspaceName === this.workspaces[i].name) {
                return true;
            }
        }
        return false;
    }
    /**
     *
     * Saves the currently active workspace with the provided name.
     * @param {object} params
     * @param {string} params.name new name to save workspace under.
     * @param {string} [params.force=false] Whether to overwrite a workspace already saved with the provided name.
     * @param {function} [cb] Callback
     * @example <caption>This function persists the currently active workspace with the provided name.</caption>
     * FSBL.Clients.WorkspaceClient.saveAs({
        name: 'My Workspace',
      }, function(err, response){
                //Do something.
      });
     */
    saveAs(params, cb = Function.prototype) {
        validate_1.default.args(params, "object", cb, "function=") && validate_1.default.args2("params.name", params.name, "string");
        logger_1.default.system.debug("WorkspaceClient.saveAs", params);
        const saveAsPromiseResolver = (resolve, reject) => {
            if (!params.force && this.workspaceExists(params.name)) {
                return this._serviceResponseHandler("Workspace Already Exists", null, resolve, reject, cb);
            }
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.SAVE_AS, params, (err, response) => {
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(saveAsPromiseResolver);
    }
    /**
     * Switches to a workspace.
     * @param {object} params
     * @param {string} 	params.name Workspace Name
     * @param {function} [cb] Callback
     * @example <caption>This function loads the workspace 'My Workspace' from the storage tied to the application.</caption>
     * FSBL.Clients.WorkspaceClient.switchTo({
        name: 'My Workspace',
      }, function(err, response){
                //Do something.
      });
     */
    switchTo(params, cb = Function.prototype) {
        //Logger.system.log("APPLICATION LIFECYLE:Loading Workspace:WorkspaceClient.switchTo:" + params.name); This should be in the service.
        validate_1.default.args(params, "object", cb, "function") && validate_1.default.args2("params.name", params.name, "string");
        logger_1.default.system.debug("WorkspaceClient.switchTo");
        const switchToPromiseResolver = (resolve, reject) => {
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.SWITCH_TO, params, (err, response) => {
                if (response && response.data) {
                    this.activeWorkspace = response.data;
                }
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(switchToPromiseResolver);
        // TODO the previous version of this logged a bunch of lifecycle events. Those should be logged from the service instead.
    }
    /**
     * Checks to see if the workspace is dirty. If it's already dirty, the window doesn't need to compare its state to the saved state.
     * @param {Function} Callback cb(err,response) with response set to true if dirty and false otherwise (when no error)
     * @example <caption>This function will let you know if the activeWorkspace is dirty.</caption>
     * FSBL.Clients.WorkspaceClient.isWorkspaceDirty(function(err, response){
                //Do something like prompt the user if they'd like to save the currently loaded workspace before switching.
      });
     */
    isWorkspaceDirty(cb) {
        validate_1.default.args(cb, "function");
        logger_1.default.system.debug("WorkspaceClient.isWorkspaceDirty");
        const isWorkspaceDirtyPromiseResolver = (resolve, reject) => {
            this._serviceResponseHandler(null, this.activeWorkspace.isDirty, resolve, reject, cb);
        };
        return new Promise(isWorkspaceDirtyPromiseResolver);
    }
    /**
     * If more than one copy of the workspaceName has been saved, this function returns the next number in the sequence. See the example section for more. This is an internal helper.
     * @private
     * @param {string} workspaceName
     * @example
     * workspaceList = "apple banna ketchup"
     * getWorkspaceName("mayo") returns "mayo".
     *
     * workspaceList = "apple banna ketchup ketchup (1)"
     * getWorkspaceName("ketchup") returns "ketchup (2)".
     *
     * workspaceList = "apple banna ketchup ketchup (1) ketchup (2) ketchup (7)";
     * getWorkspaceName("ketchup") returns "ketchup (8)".
     *
     */
    getWorkspaceName(workspaceName) {
        var workspaces = FSBL.Clients.WorkspaceClient.workspaces;
        let workspaceNames = workspaces.map((workspace) => workspace.name);
        let escapedName = escapeRegExp(workspaceName);
        //match "name" or "name (143)" or "name (2)"
        //Number of modifiers already on the name.
        let existingModifiers = workspaceName.match(/\(\d+\)/g);
        let numModifiers = existingModifiers === null ? "{1}" : `{${existingModifiers.length++}}`;
        let matchString = `\\b(${escapedName})(\\s\\(\\d+\\)${numModifiers})?\\,`;
        let regex = new RegExp(matchString, "g");
        let matches = workspaceNames.sort().join(",").match(regex);
        if (matches && matches.length) {
            let lastMatch = matches.pop();
            //Find the last modifier at the end (NUMBER), and get rid of parens.
            let highestModifier = lastMatch.match(/\(\d+\)\,/g);
            // console.log(existingModifiers ? existingModifiers.length : 0, modifier ? modifier.length : 0);
            //If we're trying to create something stupid like "workspace (1) (1)", and workspace (1) (1) already exists, they'll spit out workspace (1) (1) (2).
            if (existingModifiers && existingModifiers.length != highestModifier.length) {
                workspaceName = lastMatch.replace(",", "") + " (1)";
            }
            else {
                if (highestModifier && highestModifier.length) {
                    highestModifier = highestModifier[highestModifier.length - 1];
                    highestModifier = highestModifier.replace(/\D/g, "");
                    highestModifier = parseInt(highestModifier);
                    highestModifier++;
                    workspaceName = lastMatch.replace(/\(\d+\)\,/g, `(${highestModifier})`);
                }
                else {
                    highestModifier = 1;
                    workspaceName += " (" + highestModifier + ")";
                }
            }
        }
        return workspaceName;
    }
    /**
     * Creates a new workspace. After creation the new workspace becomes the active workspace.
     * @param {String} workspaceName name for new workspace
     * @param {Object} [params] optional params
     * @param {string} [params.templateName] name of template to use when creating workspace; if no template then empty workspace will be created
     * @param {boolean} [params.switchAfterCreation = true] Whether to switch to the new workspace after creating it.
     * @param {Function} [cb] cb(err,response) with response set to new workspace object if no error
     * @example <caption>This function creates the workspace 'My Workspace'.</caption>
     * FSBL.Clients.WorkspaceClient.createWorkspace(function(err, response){
     *		if (!err) {}
     *			//Do something like notify the user that the workspace has been created.
     *		}
     * });
     */
    createWorkspace(workspaceName, params, cb = Function.prototype) {
        if (arguments.length === 2) { // if no params then second argument must be the cb
            cb = params;
            params = {};
        }
        var templateName = null;
        if (params && params.templateName) {
            templateName = params.templateName;
        }
        validate_1.default.args(workspaceName, "string", params, "object=", cb, "function=");
        logger_1.default.system.log(`APPLICATION LIFECYCLE:Create New Workspace:Workspacelient.createNewWorkspace: Name (${workspaceName})`);
        //makse sure we don't duplicate an existing workspace.
        workspaceName = this.getWorkspaceName(workspaceName);
        //Default behavior is to switch after creating workspace.
        if (params.switchAfterCreation !== false) {
            logger_1.default.system.log(`APPLICATION LIFECYCLE:Create New Workspace:Workspacelient.createNewWorkspace: Name (${workspaceName})`);
            this.switchTo({ name: workspaceName, templateName }, cb);
        }
        else {
            let workspace = WorkspaceDefinition(workspaceName, null);
            this.addWorkspaceDefinition({
                workspaceJSONDefinition: workspace
            }, cb);
        }
    }
    /**
     * Gets a workspace definition in JSON form.
     *
     * @param {object} params
     * @param {string} params.workspaceName the workspace name
     * @param {function} cb callback(error,workspaceDefinition)
     */
    export(params, cb) {
        validate_1.default.args(params, "object", cb, "function") && validate_1.default.args2("params.workspaceName", params.workspaceName, "string");
        logger_1.default.system.debug("WorkspaceClient.export", params);
        const exportPromiseResolver = (resolve, reject) => {
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.EXPORT, params, (err, response) => {
                let workspaceExport = {};
                workspaceExport[params.workspaceName] = response.data;
                this._serviceResponseHandler(err, { data: workspaceExport }, resolve, reject, cb);
            });
        };
        return new Promise(exportPromiseResolver);
    }
    /**
     * Adds a workspace definition to the list of available workspaces.
     *
     * @param {object} params
     * @param {object} params.workspaceJSONDefinition JSON for workspace definition
     * @param {function=} cb cb(err) where the operation was successful if !err; otherwise, err carries diagnostics
     *
     */
    import(params, cb) {
        validate_1.default.args(params, "object", cb, "function=") && validate_1.default.args2("params.workspaceJSONDefinition", params.workspaceJSONDefinition, "object");
        logger_1.default.system.debug("WorkspaceClient.import", params);
        const importPromiseResolver = (resolve, reject) => {
            // TODO: all this logic should be in the service.
            let workspaceDefinition = params.workspaceJSONDefinition;
            let workspaceName = Object.keys(workspaceDefinition)[0];
            // if workspace already exists, make a new name and replace with that name
            let viableWorkspaceName = this.getWorkspaceName(workspaceName);
            if (workspaceName !== viableWorkspaceName) {
                workspaceDefinition[viableWorkspaceName] = workspaceDefinition[workspaceName];
                delete workspaceDefinition[workspaceName];
                workspaceDefinition[viableWorkspaceName].name = viableWorkspaceName;
            }
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.IMPORT, { workspaceJSONDefinition: workspaceDefinition }, (err, response) => {
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(importPromiseResolver);
    }
    /**
     * Convert a workspace JSON definition to a template JSON definition
     * @param {object} params
     * @param {string} params.newTemplateName template name for the new converted definition
     * @param {object} params.workspaceDefinition a workspace JSON definition return from getWorkspaceDefinition()
     * @returns the new template definition. If null then an error occurred because workspaceDefinition wasn't a legal JSON definition for a workspace
     */
    convertWorkspaceDefinitionToTemplate(params) {
        logger_1.default.system.info("WorkspaceClient.convertWorkspaceDefinitionToTemplate", params);
        validate_1.default.args(params, "object") && validate_1.default.args2("params.newTemplateName", params.newTemplateName, "string", "params.workspaceDefinition", params.workspaceDefinition, "object");
        var templateJSON = null;
        if (validWorkspaceDefinition(params.workspaceDefinition)) {
            templateJSON = WorkspaceTemplate(params.newTemplateName, params.workspaceDefinition);
        }
        return templateJSON;
    }
    ;
    /**
     * Get a template definition in JSON format.
     *
     * @param {object} params
     * @param {string} params.templateName name of template
     * @param {function} cb
     * @private
     */
    exportTemplate(params, cb) {
        validate_1.default.args(params, "object", cb, "function") && validate_1.default.args2("params.newTemplateName", params.templateName, "string");
        logger_1.default.system.debug("WorkspaceClient.exportTemplate", params);
        const exportTemplatePromiseResolver = (resolve, reject) => {
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.EXPORT_TEMPLATE, { templateName: params.templateName }, (err, response) => {
                let exportFormat = {
                    [params.templateName]: response.data
                };
                this._serviceResponseHandler(err, { data: exportFormat }, resolve, reject, cb);
            });
        };
        return new Promise(exportTemplatePromiseResolver);
    }
    /**
     * Adds a template definition.  This adds to the template choices available when creating a new workspace.  The definition will persistent until removed with removeWorkspaceTemplateDefinition().
     *
     * @param {object} params
     * @param {object} params.workspaceTemplateDefinition JSON template definition typically from getWorkspaceTemplateDefinition() or convertWorkspaceDefinitionToTemplate()
     * @param {boolean} params.force if true an existing template with the same name will be overwritten
     * @param {function} cb
     * @private
     */
    importTemplate(params, cb) {
        validate_1.default.args(params, "object", cb, "function=") && validate_1.default.args2("params.workspaceTemplateJSONDefinition", params.workspaceTemplateJSONDefinition, "object");
        logger_1.default.system.debug("WorkspaceClient.importTemplate", params);
        const savePromiseResolver = (resolve, reject) => {
            let workspaceTemplateDefinition = params.workspaceTemplateDefinition;
            let error, result;
            logger_1.default.system.debug("workspaceClient.addWorkspaceTemplateDefinition workspaceTemplateDefinition", workspaceTemplateDefinition);
            if ("workspaceTemplates" in workspaceTemplateDefinition) { // if JSON object has wrapper used for config then remove it
                let workspaceTemplates = workspaceTemplateDefinition.workspaceTemplates;
                workspaceTemplateDefinition = workspaceTemplates;
                logger_1.default.system.debug("workspaceClient.addWorkspaceTemplateDefinition modified workspaceTemplateDefinition", workspaceTemplateDefinition);
            }
            if (typeof workspaceTemplateDefinition === "object") {
                var templateName = Object.keys(workspaceTemplateDefinition)[0];
                logger_1.default.system.debug("workspaceClient.addWorkspaceTemplateDefinition templateName", templateName);
                if (templateName && workspaceTemplateDefinition[templateName].templateDefinitionFlag) {
                    this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.IMPORT_TEMPLATE, { workspaceTemplateDefinition, params }, (err, response) => {
                        this._serviceResponseHandler(err, response, resolve, reject, cb);
                    });
                }
                else {
                    this._serviceResponseHandler("workspaceClient.addWorkspaceTemplateDefinition: illegal template JSON", null, resolve, reject, cb);
                }
            }
            else {
                this._serviceResponseHandler("workspaceClient.addWorkspaceTemplateDefinition: input is not a legal object", null, resolve, reject, cb);
            }
        };
        return new Promise(savePromiseResolver);
    }
    /**
     * Removes template definition (keep in mind if the template is defined in config then it will automatically be recreated on each startup)
     *
     * @param {object} params
     * @param {string} params.workspaceTemplateName
     * @param {function} [cb] callback(err) is invoked on completion. If !err then the operation was successful; otherwise, err carries diagnostics
     * @private
     */
    removeTemplate(params, cb) {
        validate_1.default.args(params, "object", cb, "function=") && validate_1.default.args2("params.workspaceTemplateName", params.workspaceTemplateName, "string");
        logger_1.default.system.debug("WorkspaceClient.removeTemplate");
        const removeTemplatePromiseResolver = (resolve, reject) => {
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.REMOVE_TEMPLATE, { workspaceTemplateName: params.workspaceTemplateName }, (err, response) => {
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(removeTemplatePromiseResolver);
    }
    /**
     * Saves one mor more template defintions in a selected file. Note the end user is prompted to identify file location during this save operation.  The file can optionally be imported during config initialization (see importConfig) although this requires administration support on the configuration/server side. The file can also be read using readWorkspaceTemplateFromConfigFile();
     *
     * @param {object} params
     * @param {object} params.workspaceTemplateDefinition legal template definition returned by either getWorkspaceTemplateDefinition() or convertWorkspaceDefinitionToTemplate()
     * @private
     */
    exportToFile(params) {
        // TODO: Make it possible to export both workspaces and templates.
        logger_1.default.system.info("workspaceClient.saveWorkspaceTemplateToConfigFile", params);
        validate_1.default.args(params, "object") && validate_1.default.args2("params.workspaceTemplateDefinition", params.workspaceTemplateDefinition, "object");
        var workspaceTemplateDefinition = params.workspaceTemplateDefinition;
        if (typeof workspaceTemplateDefinition === "object") {
            var templateName = Object.keys(workspaceTemplateDefinition)[0];
            if (templateName && workspaceTemplateDefinition[templateName].templateDefinitionFlag) { // confirm the object is a template definition
                var exportConfig = { workspaceTemplates: workspaceTemplateDefinition };
                FSBL.ConfigUtils.promptAndSaveJSONToLocalFile("workspaceConfig-" + templateName, exportConfig);
            }
            else {
                logger_1.default.system.error("workspaceClient.saveWorkspaceTemplateToConfigFile. Input is not a legal template");
            }
        }
        else {
            logger_1.default.system.error("workspaceClient.saveWorkspaceTemplateToConfigFile: Input is not a legal object");
        }
    }
    /**
     * Gets all workspace template definitions from workspace service.
     *
     * @param {function} cb callback(templateDefinitions) where templateDefinitions is an object containing all known template definitions; each property in templateDefinitions is a template
     * @private
     */
    getTemplates(cb) {
        validate_1.default.args(cb, "function");
        logger_1.default.system.debug("WorkspaceClient.getTemplates");
        const getTemplatesPromiseResolver = (resolve, reject) => {
            this.routerClient.query(constants_1.WORKSPACE.API_CHANNELS.GET_TEMPLATES, {}, (err, response) => {
                let templateDefinitions = {};
                if (!err) {
                    templateDefinitions = response.data;
                }
                this._serviceResponseHandler(err, response, resolve, reject, cb);
            });
        };
        return new Promise(getTemplatesPromiseResolver);
    }
    ;
    /**
     * Initializes listeners and sets default data on the WorkspaceClient object.
     * @private
     */
    start(cb) {
        /**
         * Initializes the workspace's state.
         */
        this.routerClient.subscribe("Finsemble.WorkspaceService.update", (err, response) => {
            logger_1.default.system.debug("workspaceClient init subscribe response", err, response);
            if (response.data && response.data.activeWorkspace) {
                this.workspaceIsDirty = response.data.activeWorkspace.isDirty;
                this.workspaces = response.data.workspaces;
                this.activeWorkspace = response.data.activeWorkspace;
            }
            this.getActiveWorkspace((err, response) => {
                this.activeWorkspace = response;
                this.getWorkspaces((err, response2) => {
                    this.workspaces = response2;
                    if (cb) {
                        cb();
                    }
                });
            });
        });
    }
}
var workspaceClient = new WorkspaceClient({
    startupDependencies: {
        services: ["workspaceService"],
        clients: []
    },
    onReady: (cb) => {
        workspaceClient.start(cb);
    },
    name: "workspaceClient"
});
exports.default = workspaceClient;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
Object.defineProperty(exports, "__esModule", { value: true });
/*
Overview of how this works:
-hotkeys are added/removed via methods, passing an array of strings representing keys pressed, a handler method, and (optionally) a callback

-When adding a hotkey, a node js event emitter is created on the client side to trigger the hotkey handler, and a router message is sent to the service to register the key combination with the windowname on the client side. Multiple hotkeys may be created for the same key combination, so long as they have different handler functions.

-When the service detects that all of the keys in the hotkey combination are pressed, it sends a message on the "HotkeyTriggered" channel (the method for this is "ListenForHotkeys") which contains the list of all windows registered with that hotkey combination. The client then reads the list of windows, and checks if it's one of those windows. If it is, it fires off the node js event emitter that was registered for that hotkey.

-Removing a hotkey clears the corresponding event emitter, and also sends a router message to the service to remove its windowid from the array of windows registered for the hotkey combination - if the window is registered with that hotkey combination multiple times, it will only remove one, allowing other hotkeys on the same window with the same key combination to still be registered.

*/
const baseClient_1 = __webpack_require__(13);
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
const keyMap = __webpack_require__(87).dictionary;
/** The global `window` object. We cast it to a specific interface here to be
 * explicit about what Finsemble-related properties it may have. */
const Globals = window;
const events_1 = __webpack_require__(17);
var eventEmitter = new events_1.EventEmitter();
/**
 * Translates an array representing a key combination, each element of which represents a key, using keyDict, an object containing key-value pairs where the untranslated key representations are the keys, and the translated versions ready to be used by the service are the values.
 *
 * If you'd like to create a keymap for translation, look at the values of the keymaps included in the common folder.
 * @private
 * @param {object} params
 * @param {object} params.keys array representing untranslated key representations
 * @param {object} keyDict
 */
function translateKeys(params, keyDict = keyMap) {
    var translatedKeys = [];
    params.keys.forEach((key) => {
        if (!(typeof key === "string")) {
            return logger_1.default.system.error("FSBL.Clients.HotkeyClient - one of the keys passed into a function was not a string: ", key);
        }
        key = key.toLowerCase();
        let mappedKey = keyDict[key];
        if (mappedKey) {
            translatedKeys.push(mappedKey);
        }
        else {
            return logger_1.default.system.error(`FSBL.Clients.HotkeyClient - At least one of the key codes does not map to a supported key - registering hotkey unsuccessful. Unsupported keys: ${key}`);
        }
    });
    return translatedKeys;
}
// Keystroke capture class taken from ChartIQ charting library
const Keystroke = function (cb) {
    this.cb = cb;
    this.shift = false;
    this.ctrl = false;
    this.cmd = false;
    this.capsLock = false;
    this.initialize();
};
Keystroke.prototype.keyup = function (e) {
    switch (e.key) {
        case "Shift":
            this.shift = false;
            this.cb({ key: e.key, e: e, keystroke: this });
            return;
        case "Control":
        case "Alt":
            this.ctrl = false;
            this.cb({ key: e.key, e: e, keystroke: this });
            return;
        case "Meta":
        case "Win":
            this.cmd = false;
            this.cb({ key: e.key, e: e, keystroke: this });
            return;
        default:
            break;
    }
    // This is where we handle the keystroke, regardless of whether we captured the key with a down or press event
    // The exception to this is the arrow keys, which are processed in keydown
    if (this.key)
        this.cb({ key: this.key, e: e, keystroke: this });
};
Keystroke.prototype.keydown = function (e) {
    if (this.noKeyCapture)
        return;
    this.key = e.key;
    switch (e.key) {
        case "Meta":
        case "Win":
            this.cmd = true;
            break;
        case "Shift":
            this.shift = true;
            break;
        case "Control":
        case "Alt":
            this.ctrl = true;
            break;
        case "CapsLock":
            this.capsLock = !this.capsLock;
            break;
        case "ArrowUp":
        case "ArrowDown":
        case "ArrowLeft":
        case "ArrowRight":
        case "Up":
        case "Down":
        case "Left":
        case "Right":
            // If you hold a key down, then keydown will repeat. These are the keys
            // that we want to capture repeat action.
            this.key = null;
            this.cb({ key: e.key, e: e, keystroke: this });
            break;
    }
};
Keystroke.prototype.keypress = function (e) {
    if (this.noKeyCapture)
        return;
    var keyCode = e.which;
    if (keyCode < 32 || keyCode > 222)
        return; // handled by keydown
    this.key = e.key;
};
/**
 * initializes member functions
 * @memberof CIQ.UI.Keystroke
 */
Keystroke.prototype.initialize = function () {
    var self = this;
    document.addEventListener("keyup", function (e) {
        self.keyup(e);
    });
    document.addEventListener("keydown", function (e) {
        self.downValue = e.key;
        self.keydown(e);
    });
    document.addEventListener("keypress", function (e) {
        self.keypress(e);
    });
    window.addEventListener("blur", function (e) {
        self.ctrl = false;
        self.cb({ key: "Control", e: e, keystroke: self });
    });
};
// Used to keep track of which browser key combinations are registered locally
var registeredBrowserKeys = [];
class HotkeyClient extends baseClient_1._BaseClient {
    constructor(params) {
        super(params);
        /**
         * Automatically unregisters all hotkeys when the window containing the client closes
         * @param {function} cb
         */
        this.onClose = (cb) => {
            this.removeAllHotkeys(cb);
        };
        this.keyMap = keyMap;
        this.listenForHotkeys = this.listenForHotkeys.bind(this);
        this.routerClient = routerClientInstance_1.default;
        this.routerClient.onReady(this.listenForHotkeys);
        //Local hotkeys need to only fire if the window is focused. The object below is a map of handlers passed in by the user.
        //The keys are the handler, and the value is the wrapped method that checks for focus.
        this.localListeners = {};
    }
    /**
     *Adds a local hotkey, firing only when the window calling the method is in focus. If you execute this function more than once for the same key combination, both hotkeys will coexist, and would need to be remove separately.
     * @param {Array.<string>} keyArr Array of strings representing hotkey key combination. We're not very picky about exactly what strings you use - for example "control", "ctrl" and "CTRL" all work for the control key.
     * @param {function} handler Function to be executed when the hotkey combination is pressed. It is recommended that you define a variable to represent the handler function, as the same function must be passed in order to remove the hotkey.
     * @param {function} [cb] Callback to be called after local hotkey is added.
     * @example
     * var myFunction = function () {...}
     * FSBL.Clients.HotkeyClient.addLocalHotkey(["ctrl","shift","s"],myFunction,cb)
     */
    addLocalHotkey(keyArr, handler, cb = Function.prototype) {
        logger_1.default.system.info("HotkeyClient.addLocalHotkey");
        logger_1.default.system.debug("HotkeyClient.addLocalHotkey, keyArr: ", keyArr);
        let keyString = translateKeys({ keys: keyArr }).sort().toString();
        //We create a new function that checks focus before invoking the method.
        //If assimilation wasn't on, we'd want to use window.addEventListener('keydown');
        let wrap = () => {
            if (document.hasFocus()) {
                handler();
            }
        };
        //Keep a reference to the handler so when the dev wants to remove it, we can.
        if (!this.localListeners[keyString]) {
            this.localListeners[keyString] = {};
        }
        this.localListeners[keyString][handler] = wrap;
        eventEmitter.addListener(keyString, wrap);
        this.routerClient.query("hotkeyService.registerGlobalHotkey", { "keys": keyString, windowName: this.windowName }, cb);
    }
    /**
     *Adds a local hotkey, firing only when the window calling the method is in focus. If you execute this function more than once for the same key combination, both hotkeys will coexist, and would need to be remove separately.
     * This function uses browser key capture, so it will work when assimilation is not running
     * @param {Array} [keyArr] Array of strings representing hotkey key combination. We're not very picky about exactly what strings you use - for example "control", "ctrl" and "CTRL" all work for the control key.
     * @param {function} [handler] Function to be executed when the hotkey combination is pressed. It is recommended that you define a variable to represent the handler function, as the same function must be passed in order to remove the hotkey.
     * @param {function} [cb] Callback to be called after local hotkey is added.
     * @todo Have addLocalHotkey automatically use this when assimilation is not running. Will eventually replace addLocalHotkey.
     * @private
     * @example
     * var myFunction = function () {...}
     * FSBL.Clients.HotkeyClient.addBrowserHotkey(["ctrl","shift","s"],myFunction,cb)
     */
    addBrowserHotkey(keyArr, handler) {
        // Lazily create a keystroke handler for this web page if one doesn't already exist
        if (!this.KeyStroke) {
            this.KeyStroke = new Keystroke(function (params) {
                let { key, keystroke } = params;
                var myKeyArray = [key];
                if (keystroke.ctrl)
                    myKeyArray.push("control");
                if (keystroke.shift)
                    myKeyArray.push("shift");
                if (keystroke.alt)
                    myKeyArray.push("alt");
                let myKeyString = myKeyArray.sort().toString();
                registeredBrowserKeys.forEach(function (obj) {
                    if (obj.keyString === myKeyString)
                        obj.handler();
                });
            });
        }
        let keyString = translateKeys({ keys: keyArr }).sort().toString();
        registeredBrowserKeys.push({ keyString: keyString, handler: handler });
    }
    /**
     *Removes a local hotkey.
     * @param {Array.<string>} keyArr Array of strings representing hotkey key combination. We're not very picky about exactly what strings you use - for example "control", "ctrl" and "CTRL" all work for the control key.
     * @param {function} handler Handler registered for the hotkey to be removed.
     * @param {function} [cb] Callback to be called after local hotkey is removed.
     * @example
     *
     * FSBL.Clients.HotkeyClient.removeLocalHotkey(["ctrl","shift","s"],myFunction,cb)
     */
    removeLocalHotkey(keyArr, handler, cb = Function.prototype) {
        logger_1.default.system.info("HotkeyClient.removeLocalHotkey");
        logger_1.default.system.debug("HotkeyClient.removeLocalHotkey, keyArr: ", keyArr);
        let keyString = translateKeys({ keys: keyArr }).sort().toString();
        let wrap = this.localListeners[keyString][handler];
        eventEmitter.removeListener(keyString, wrap);
        this.routerClient.query("hotkeyService.unregisterGlobalHotkey", { "keys": keyString, windowName: this.windowName }, cb); //TODO: query
    }
    /**
     *Adds a global hotkey, firing regardless of what window is in focus. If you execute this function more than once for the same key combination, both hotkeys will coexist, and would need to be remove separately.
     * @param {Array.<string>} keyArr Array of strings representing hotkey key combination. We're not very picky about exactly what strings you use - for example "control", "ctrl" and "CTRL" all work for the control key.
     * @param {function} handler Function to be executed when the hotkey combination is pressed. It is recommended that you define a variable to represent the handler function, as the same function must be passed in order to remove the hotkey.
     * @param {function} [cb] Callback to be called after local hotkey is added.
     * @example
     * var myFunction = function () {...}
     * FSBL.Clients.HotkeyClient.addGlobalHotkey(["ctrl","shift","s"],myFunction,cb)
     */
    addGlobalHotkey(keyArr, handler, cb = Function.prototype) {
        logger_1.default.system.info("HotkeyClient.addGlobalHotkey");
        logger_1.default.system.debug("HotkeyClient.addGlobalHotkey, keyArr: ", keyArr);
        let keyString = translateKeys({ keys: keyArr }).sort().toString();
        eventEmitter.addListener(keyString, handler);
        this.routerClient.query("hotkeyService.registerGlobalHotkey", { "keys": keyString, windowName: this.windowName }, cb);
    }
    /**
     *Removes a global hotkey.
     * @param {Array.<string>} keyArr Array of strings representing hotkey key combination. We're not very picky about exactly what strings you use - for example "control", "ctrl" and "CTRL" all work for the control key.
     * @param {function} handler Handler registered for the hotkey to be removed.
     * @param {function} [cb] Callback to be called after local hotkey is removed.
     * @example
     *
     * FSBL.Clients.HotkeyClient.removeGlobalHotkey(["ctrl","shift","s"],myFunction,cb)
     */
    removeGlobalHotkey(keyArr, handler, cb = Function.prototype) {
        logger_1.default.system.info("HotkeyClient.removeGlobalHotkey");
        logger_1.default.system.debug("HotkeyClient.removeGlobalHotkey, keyArr: ", keyArr);
        let keyString = translateKeys({ keys: keyArr }).sort().toString();
        eventEmitter.removeListener(keyString, handler);
        this.routerClient.query("hotkeyService.unregisterGlobalHotkey", { "keys": keyString, windowName: this.windowName }, cb); //TODO: query
    }
    /**
     * Not yet implemented - will return an object that contains all registered Hotkeys
     */
    /* getHotkeys() { //TODO: MAKE WORK
        Logger.system.info("HotkeyClient.getHotkeys");
        this.routerClient.transmit("hotkeyService.getRegisteredHotkeys", { request: true });
    } */
    /**
     * Handler for "hotkey triggered" messages from the service, called upon client initialization.
     * @private
     */
    listenForHotkeys() {
        var self = this;
        this.routerClient.addListener("HotkeyTriggered", function (error, response) {
            if (error) {
                console.error("Hotkey Channel Error: " + JSON.stringify(error));
            }
            else {
                if (response.data.windows.includes(self.windowName)) { //if this is one of the windows that the service means to trigger here
                    eventEmitter.emit(response.data.keys);
                }
            }
        });
    }
    /**
     * Unregisters all hotkeys, both locally and service-side.
     * @param {function} cb Optional callback function
     *
     */
    removeAllHotkeys(cb) {
        eventEmitter.removeAllListeners();
        this.routerClient.query("hotkeyService.removeAllHotkeysForWindow", { windowName: this.windowName }, cb);
    }
}
var hotkeyClient = new HotkeyClient({
    startupDependencies: {
        services: ["hotkeyService"]
    },
    onReady: function (cb) {
        if (cb) {
            cb();
        }
    },
    name: "hotkeyClient"
});
// @TODO - use proper exports instead of global scope.
Globals.Keystroke = Keystroke;
exports.default = hotkeyClient;


/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = {"dictionary":{"0":"0","1":"1","2":"2","3":"3","4":"4","5":"5","6":"6","7":"7","8":"8","9":"9","backspace":"backspace","bs":"backspace","bksp":"backspace","tab":"tab","escape":"escape","esc":"escape","clear":"clear","enter":"enter","return":"enter","shift":"shift","shft":"shift","lshift":"shift","lshft":"shift","left shift":"shift","leftshift":"shift","rshift":"shift","rshft":"shift","right shift":"shift","rightshift":"shift","control":"control","ctrl":"control","alt":"alt","alternate":"alt","pause":"pause","caps lock":"caps lock","capslock":"caps lock","spacebar":"spacebar","space":"spacebar","space bar":"space","page up":"page up","pgup":"page up","pg up":"page up","page down":"page down","pgdn":"page down","pg dn":"page down","end":"end","home":"home","left arrow":"left arrow","left":"left arrow","up arrow":"up arrow","up":"up arrow","right arrow":"right arrow","right":"right arrow","down arrow":"down arrow","down":"down arrow","select":"select","slct":"select","print":"print","prnt":"print","execute":"execute","print screen":"print screen","printscreen":"print screen","print scrn":"print screen","printscrn":"print screen","prnt scrn":"print screen","prntscrn":"print screen","prt scrn":"print screen","prtscrn":"print screen","prt scn":"print screen","prtscn":"print screen","prt scr":"print screen","prtscr":"print screen","prt sc":"print screen","prtsc":"print screen","pr sc":"print screen","prsc":"print screen","insert":"insert","ins":"insert","delete":"delete","del":"delete","help":"help","a":"a","b":"b","c":"c","d":"d","e":"e","f":"f","g":"g","h":"h","i":"i","j":"j","k":"k","l":"l","m":"m","n":"n","o":"o","p":"p","q":"q","r":"r","s":"s","t":"t","u":"u","v":"v","w":"w","x":"x","y":"y","z":"z","windows":"windows","left windows":"windows","right windows":"windows","applications":"applications","computer sleep":"computer sleep","sleep":"computer sleep","numpad 0":"0","numpad 1":"1","numpad 2":"2","numpad 3":"3","numpad 4":"4","numpad 5":"5","numpad 6":"6","numpad 7":"7","numpad 8":"8","numpad 9":"9","f1":"f1","fn1":"f1","function 1":"f1","f2":"f2","fn2":"f2","function 2":"f2","f3":"f3","fn3":"f3","function 3":"f3","f4":"f4","fn4":"f4","function 4":"f4","f5":"f5","fn5":"f5","function 5":"f5","f6":"f6","fn6":"f6","function 6":"f6","f7":"f7","fn7":"f7","function 7":"f7","f8":"f8","fn8":"f8","function 8":"f8","f9":"f9","fn9":"f9","function 9":"f9","f10":"f10","fn10":"f10","function 10":"f10","f11":"f11","fn11":"f11","function 11":"f11","f12":"f12","fn12":"f12","function 12":"f12","f13":"f13","fn":"f13","function 13":"f13","f14":"f14","fn14":"f14","function 14":"f14","f15":"f15","fn15":"f15","function 15":"f15","f16":"f16","fn16":"f16","function 16":"f16","num lock":"num lock","numlock":"num lock","number lock":"num lock","numeric lock":"num lock","scroll lock":"scroll lock","sclk":"scroll lock","scrlk":"scroll lock","slk":"scroll lock","menu":"menu","*":"*","+":"+","-":"-","/":"/",";":";","=":"=",",":",","_":"-",".":".","`":"`","[":"[","]":"]","'":"'"},"assimilationMap":{"1":"lmb","2":"rmb","4":"mmb","8":"backspace","9":"tab","13":"enter","16":"shift","17":"control","18":"alt","19":"pause","20":"caps lock","27":"escape","32":"spacebar","33":"page up","34":"page down","35":"end","36":"home","37":"left arrow","38":"up arrow","39":"right arrow","40":"down arrow","41":"select","42":"print","43":"execute","44":"print screen","45":"insert","46":"delete","47":"help","48":"0","49":"1","50":"2","51":"3","52":"4","53":"5","54":"6","55":"7","56":"8","57":"9","65":"a","66":"b","67":"c","68":"d","69":"e","70":"f","71":"g","72":"h","73":"i","74":"j","75":"k","76":"l","77":"m","78":"n","79":"o","80":"p","81":"q","82":"r","83":"s","84":"t","85":"u","86":"v","87":"w","88":"x","89":"y","90":"z","91":"windows","92":"windows","93":"applications","95":"computer sleep","96":"0","97":"1","98":"2","99":"3","100":"4","101":"5","102":"6","103":"7","104":"8","105":"9","106":"*","107":"+","109":"-","111":"/","112":"f1","113":"f2","114":"f3","115":"f4","116":"f5","117":"f6","118":"f7","119":"f8","120":"f9","121":"f10","122":"f11","123":"f12","124":"f13","125":"f14","126":"f15","127":"f16","144":"num lock","145":"scroll lock","160":"shift","161":"shift","162":"control","163":"control","164":"alt","165":"alt","186":";","187":"=","188":",","189":"-","190":".","191":"/","192":"`","219":"[","220":"\\","221":"]","222":"\\","223":"'","//note, backtick and apostrophe":"are reversed on uk and us keyboards"}}

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = __webpack_require__(17);
/**
 * Notes:
 * Client calls finsembleWindow.addEventListener("event", handler)
 *
 * hander gets called with handler(FinsembleEvent)
 *
 * in the handler:
 function handler(e) {
    if (e.delayable) {
        e.wait();
        function myStuff() {
            //my stuff here
            if (cancel && e.cancelable) {
                e.cancel();
            } else {
                e.done();
            }
        }
    }
}
 *
 *
 *
 */
/**
 * This object is passed to event handlers so they can interrupt events. This is used in conjunction with the implementation of add/remove event listeners in BaseWindow and FinsembleWindow
 */
class FinsembleEvent extends events_1.EventEmitter {
    constructor(params) {
        super();
        this.cancelable = false;
        this.delayable = false;
        this.delayed = false;
        if (params.event)
            this.event = params.event;
        if (params.cancelable)
            this.cancelable = true;
        if (params.data)
            this.data = params.data;
        if (params.delayable)
            this.delayable = true;
    }
    wait() {
        if (this.delayable)
            this.delayed = true;
    }
    cancel() {
        if (this.cancelable) {
            this.emit("done", {
                canceled: true
            });
        }
    }
    done() {
        this.emit("done", {
            canceled: false
        });
    }
    setData(data) {
        this.data = data;
    }
}
exports.FinsembleEvent = FinsembleEvent;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
const events_1 = __webpack_require__(17);
class WindowEventManager extends events_1.EventEmitter {
    /**
    * Array of events that we're subscribed to remotely. When receiving a remote event, the event manager will emit a local event.
    * @type {WindowEventName[]}
    * @memberof WindowEventManager
    */
    constructor(params) {
        super();
        this.windowName = params.name;
        this.remoteEventSubscriptions = {};
        //array of events we're listening for. to prevent multiple router listeners for the same event.
        this.listeningFor = [];
        this.setMaxListeners(25);
    }
    _addListener(event, listener) {
        super.addListener(event, listener);
    }
    /**
     * Disconnects all router listeners. Removes all listeners added to the event emitter.
     * @memberof WindowEventManager
     */
    cleanup() {
        logger_1.default.system.info("WindowEventManager.cleanup", this.windowName);
        //removes listeners added to the event emitter.
        this.removeAllListeners();
        //removes listeners added to the RouterClient.
        let eventSubscriptions = Object.keys(this.remoteEventSubscriptions);
        logger_1.default.system.info("WRAP CLOSE. WindowEventManager.cleanup. Removing router subscriptions", this.windowName, eventSubscriptions);
        eventSubscriptions.forEach(channelName => {
            let handlers = this.remoteEventSubscriptions[channelName];
            handlers.forEach(handler => {
                routerClientInstance_1.default.removeListener(channelName, handler);
            });
        });
    }
    /**
     * Single point of entry to the eventEmitter's `emit` method. This will be called when the router listener is fired in response to an event happening somewhere else in the system. Could also be triggered by an event fired from the underlying wrapper.
     *
     * @private
     * @param {WindowEventName} eventName
     * @param {WindowEvent | BoundsChangeEvent} data
     * @memberof WindowEventManager
     */
    emitLocalEvent(eventName, data) {
        logger_1.default.system.info("WindowEventManager.emitLocalEvent. Emitting Event", this.windowName, eventName, data);
        this.emit(eventName, data);
    }
    /**
     * Returns router channel name for a given window event + window name combination.
     *
     * @param {WindowEventName} eventName
     * @returns {string}
     * @memberof WindowEventManager
     */
    getChannelName(eventName) {
        return `WindowService-Event-${this.windowName}-${eventName}`;
    }
    /**
     * Adds a router listener for remote events if we are not already listening for that event. If the optional handler is passed in, will add a local event listener to be triggered the next time the event fires.
     *
     * @param {WindowEventName} eventName
     * @param {Function} [handler]
     * @memberof WindowEventManager
     */
    listenForRemoteEvent(eventName, handler) {
        logger_1.default.system.debug("WindowEventManager.listenForRemoteEvent", this.windowName, eventName);
        let channelName = this.getChannelName(eventName);
        const remoteEventHandler = (err, response) => {
            logger_1.default.system.debug("WindowEventManager. Received remote event", this.windowName, eventName);
            if (err) {
                throw new Error(err);
            }
            //todo need to accomodate wrap-state-changed events in here...maybe?
            let data = { eventName, name: this.windowName };
            if (eventName.includes("bounds") || eventName.includes("parent")) {
                //bounds events need to push out more data than just name/eventName. ...response.data will destructure the object and copy them into this new object.
                data = Object.assign({ eventName }, response.data);
            }
            if (!response.originatedHere()) {
                logger_1.default.system.debug("WindowEventManager. Received remote event emitted", this.windowName, eventName, data);
                this.emitLocalEvent(eventName, data);
            }
        };
        //We only want one router listener per event. Otherwise, we'll emit the same event multiple times.
        if (!this.listeningFor.includes(eventName)) {
            this.listeningFor.push(eventName);
            logger_1.default.system.debug("WindowEventManager.listenForRemoteEvent. Adding listener to the router", this.windowName, eventName);
            //When the remote event is triggered, emit an event locally.
            routerClientInstance_1.default.addListener(channelName, remoteEventHandler);
            //If a handler is passed in, listen locally for the event to be thrown.
            logger_1.default.system.debug("WindowEventManager.listenForRemoteEvent. Handler included, adding listener to local event emitter", this.windowName, eventName);
            this.rememberRouterChannelForLaterRemoval(channelName, remoteEventHandler);
        }
    }
    /**
     * Convenience function to allow wrap to receive multiple remote events. Dev would then need to add a handler for each event that they care about. May not be useful.
     *
     * @param {WindowEventName[]} eventList
     * @memberof WindowEventManager
     */
    listenForRemoteEvents(eventList) {
        //verbose because each event will be logged in listenForRemoteEvent.
        logger_1.default.system.verbose("WindowEventManager.listenForRemoteEvents. Listen for remote events", this.windowName, eventList);
        eventList.forEach(eventName => {
            this.listenForRemoteEvent(eventName);
        });
    }
    /**
     * Broadcasts an event to any event manager listening for this event.
     *
     * @param {WindowEventName} eventName
     * @param {WindowEvent | BoundsChangeEvent} data
     * @memberof WindowEventManager
     */
    transmitRemoteEvent(eventName, data) {
        logger_1.default.system.debug("WindowEventManager.transmitRemoteEvent. Transmitting event to public wrappers", eventName, data);
        let channelName = this.getChannelName(eventName);
        routerClientInstance_1.default.transmit(channelName, data, { suppressWarnings: true });
    }
    /**
 * Used by the window implementations in the window service. This method will emit an event up to the local process, and transmit an event out to the rest of the system.
 * @private
 * @param {WindowEventName[]} eventName
 * @param {WindowEvent | BoundsChangeEvent} data
 * @memberof WindowEventManager
 */
    trigger(eventName, data) {
        logger_1.default.system.info("WindowEventManager.trigger. Event triggered. Event will be emitted locally and transmitted to public wrappers. Window Name", this.windowName, "Event name", eventName, "Event data", data);
        //If we have data, annotate it. Otherwise, create a generic window event.
        if (data) {
            data.name = this.windowName;
            data.eventName = eventName;
        }
        else {
            data = {
                name: this.windowName,
                eventName: eventName
            };
        }
        this.emitLocalEvent(eventName, data);
        this.transmitRemoteEvent(eventName, data);
    }
    ;
    /**
 * Currently we cannot have a special routerClient for every object. So this method will keep track of channel/listener combinations so we can cleanup when the wrap calls cleanup.
 *
 * @param {*} eventName
 * @param {*} handler
 * @memberof WindowEventManager
 */
    rememberRouterChannelForLaterRemoval(channelName, handler) {
        logger_1.default.system.debug("WindowEventManager.rememberRouterChannelForLaterRemoval.", channelName);
        if (!this.remoteEventSubscriptions[channelName]) {
            this.remoteEventSubscriptions[channelName] = [];
        }
        this.remoteEventSubscriptions[channelName].push(handler);
    }
    ;
}
exports.WindowEventManager = WindowEventManager;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        return copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (!isArr) {
    var props = isFull ? getAllKeys(value) : keys(value);
  }
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  });
  return result;
}

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var result = new buffer.constructor(buffer.length);
  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, true, true);
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = cloneDeep;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(15)(module)))

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    asyncTag = '[object AsyncFunction]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    nullTag = '[object Null]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    proxyTag = '[object Proxy]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    undefinedTag = '[object Undefined]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = isEqual;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(15)(module)))

/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__clients_logger__);


class BoxMath {
	static isPointOnSegment(point, segment) {
		//y = mx + b;
		//Equation above transforms into this:
		//(y - y1)	 x - x1
		//-------- = --------
		//y2 - y1 	 x2 - x1

		//which is this:
		//(y - y1) * (x2 - x1) = (x - x1) * ( y2 - y1)
		var x = point.x,
		    y = point.y,
		    x1 = segment.min.x,
		    x2 = segment.max.x,
		    y1 = segment.min.y,
		    y2 = segment.max.y;

		var isInBounds = x >= x1 && x <= x2 && y >= y1 && y <= y2;
		//The equation above will tell us whether the point is on the line, assuming it has no start and end. This checks to see if the point is within the beginning and end of the segment. If not, it can't be on our segment.
		if (!isInBounds) {
			return false;
		}
		var isOnLine = (y - y1) * (x1 - x2) === (x - x1) * (y1 - y2);
		return isOnLine;
	}

	/**
 * @function {function name}
 * @param  {type} req {description}
 * @return {type} {description}
 */
	static getVertices(req) {
		return [
		//top left
		{
			x: req.left,
			y: req.top,
			label: "topLeft"
		},
		//top right
		{
			x: req.right,
			y: req.top,
			label: "topRight"
		}, {
			x: req.right,
			y: req.bottom,
			label: "bottomRight"
		}, {
			x: req.left,
			y: req.bottom,
			label: "bottomLeft"
		}];
	}

	/**
 * @function {function name}
 * @param  {type} segment {description}
 * @return {type} {description}
 */
	static getVertexOnSegment(segment) {
		for (let vertex in this.vertices) {
			if (BoxMath.isPointOnSegment(this.vertices[vertex], segment)) {
				return vertex;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} bounds     {description}
 * @param  {type} bufferSize {description}
 * @return {type} {description}
 */
	static getSnappingRegions(bounds, bufferSize = 0) {
		let { left, top, right, bottom } = bounds;
		let leftMinusBuffer = left - bufferSize,
		    leftPlusBuffer = left + bufferSize,
		    topMinusBuffer = top - bufferSize,
		    topPlusBuffer = top + bufferSize,
		    rightMinusBuffer = right - bufferSize,
		    rightPlusBuffer = right + bufferSize,
		    bottomPlusBuffer = bottom + bufferSize,
		    bottomMinusBuffer = bottom - bufferSize;
		return {
			topLeft: {
				min: {
					x: leftMinusBuffer,
					y: topMinusBuffer
				},
				max: {
					x: leftPlusBuffer,
					y: top
				}
			},
			topRight: {
				min: {
					x: rightMinusBuffer,
					y: topMinusBuffer
				},
				max: {
					x: rightPlusBuffer,
					y: top
				}
			},
			rightTop: {
				min: {
					x: right,
					y: top
				},
				max: {
					x: rightPlusBuffer,
					y: topPlusBuffer
				}
			},
			rightBottom: {
				min: {
					x: right,
					y: bottomMinusBuffer
				},
				max: {
					x: rightPlusBuffer,
					y: bottom
				}
			},

			bottomLeft: {
				min: {
					x: leftMinusBuffer,
					y: bottom
				},
				max: {
					x: leftPlusBuffer,
					y: bottomPlusBuffer
				}
			},
			bottomRight: {
				min: {
					x: rightMinusBuffer,
					y: bottom
				},
				max: {
					x: rightPlusBuffer,
					y: bottomPlusBuffer
				}
			},
			leftTop: {
				min: {
					x: leftMinusBuffer,
					y: top
				},
				max: {
					x: left,
					y: topPlusBuffer
				}
			},
			leftBottom: {
				min: {
					x: leftMinusBuffer,
					y: bottomMinusBuffer
				},
				max: {
					x: left,
					y: bottom
				}
			},
			left: {
				min: {
					x: leftMinusBuffer,
					y: topMinusBuffer
				},
				max: {
					x: leftPlusBuffer,
					y: bottomPlusBuffer
				}
			},
			bottom: {
				min: {
					x: leftMinusBuffer,
					y: bottom
				},
				max: {
					x: rightPlusBuffer,
					y: bottomPlusBuffer
				}
			},
			right: {
				min: {
					x: rightMinusBuffer,
					y: topPlusBuffer
				},
				max: {
					x: rightPlusBuffer,
					y: bottomPlusBuffer
				}
			},
			top: {
				min: {
					x: left,
					y: topMinusBuffer
				},
				max: {
					x: right,
					y: top
				}
			},
			inner: {
				min: {
					x: left,
					y: top
				},
				max: {
					x: right,
					y: bottom
				}
			}
		};
	}

	/**
 * @function {function name}
 * @param  {type} bounds {description}
 * @return {type} {description}
 */
	static getWindowBoundingBox(bounds) {
		return {
			min: {
				x: bounds.left,
				y: bounds.top
			},
			max: {
				x: bounds.right,
				y: bounds.bottom
			}
		};
	}

	static between(params) {
		var min = params.min,
		    max = params.max,
		    num = params.num,
		    inclusive = params.inclusive;
		if (inclusive) {
			return num >= min && num <= max;
		}
		return num > min && num < max;
	}

	/**
 * @function {function name}
 * @param  {type} window1 {description}
 * @param  {type} window2 {description}
 * @return {type} {description}
 */
	static intersectBoundingBoxes(window1, window2) {
		if (window1.max.x < window2.min.x) {
			return false;
		} // 1 is left of 2
		if (window1.min.x > window2.max.x) {
			return false;
		} // 1 is right of 2
		if (window1.max.y < window2.min.y) {
			return false;
		} // 1 is above 2
		if (window1.min.y > window2.max.y) {
			return false;
		} // 1 is below 2
		return true; // boxes overlap
	}

	/**
 * @function {function name}
 * @param  {type} num {description}
 * @param  {type} pct {description}
 * @return {type} {description}
 */
	static getPct(num, pct) {
		return pct * num;
	}

	/**
 * @function {function name}
 * @param  {type} num {description}
 * @param  {type} pct {description}
 * @return {type} {description}
 */
	static scaleProportionately(num, pct) {
		return Math.floor(num + this.getPct(num, pct));
	}

	/**
 * @function {function name}
 * @param  {type} num1 {description}
 * @param  {type} num2 {description}
 * @return {type} {description}
 */
	static getPercentChange(num1, num2) {
		var pctChange = Math.abs((num1 - num2) / num1);
		if (num2 < num1) {
			pctChange = -pctChange;
		}
		return pctChange;
	}

	/**
  * Gets the area of the overlap between two rectangles.
  * @param {*} rect1
  * @param {*} rect2
  */
	static getOverlap(rect1, rect2) {
		let x_overlap = Math.max(0, Math.min(rect1.right, rect2.right) - Math.max(rect1.left, rect2.left));
		let y_overlap = Math.max(0, Math.min(rect1.bottom, rect2.bottom) - Math.max(rect1.top, rect2.top));
		return x_overlap * y_overlap;
	}

	/**
  * Checks if point is in box (inclusive)
  * @param {*} point
  * @param {*} box
  */
	static isPointInBox(point, box) {
		if (point.left) point.x = point.left;
		if (point.top) point.y = point.top;
		if (!box.right) box.right = box.left + box.width;
		if (!box.bottom) box.bottom = box.top + box.height;
		if (point.x >= box.left && point.x <= box.right && point.y >= box.top && point.y <= box.bottom) {
			return true;
		}
		return false;
	}
	/**
  * Clip A with B. return where the boxes don't intersect.
  * @param {DockableBox} rectA
  * @param {DockableBox} rectB
  *
  * @memberof BoxMath
  */
	static clipRect(rectA, rectB, edge) {
		let clip = rectA;
		let corners = this.getVertices(rectB);
		//This array will hold the corners of the clipping rectangle that are within the clipped rectangle's boundaries.
		let cornersInBox = [];
		for (let i = 0; i < corners.length; i++) {
			let corner = corners[i];
			corner.label = corner.label.toLowerCase();
			//The goal here is to detect which edges of the clipping box exists within the clipped box's boundaries - EXCLUDING the edges of the clipped box.

			/**
    * The A = B + C. In other words, it's our hole. B is the window that we're using to fill the hole.
    *
   		In this case, A and B share their top right and top left corners. ALl we care about here is the bottom left and bottom right of B.
   		The result of this function is C.
    		+-------------------+
   		|                   |
   		|                   |
   		|                   |
   		|                   |
   		|         B         |
   		|                   |
   		|                   |
   		|                   |
   		+-------------------+
   		|                   |
   		|                   |
   		|                   |
   		|                   |
   		|         C         |
   		|                   |
   		|                   |
   		|                   |
   		|                   |
   		|                   |
   		+-------------------+
    * */

			//The block of code below kicks out any points on B that are corners on A.
			if (this.isPointInBox(corner, rectA)) {
				if (corner.label === "bottomright" && corner.y === rectA.bottom && corner.x === rectA.right) {
					continue;
				}

				if (corner.label === "bottomleft" && corner.y === rectA.bottom && corner.x === rectA.left) {
					continue;
				}

				if (corner.label === "topleft" && corner.x === rectA.left && corner.y === rectA.top) {
					continue;
				}

				if (corner.label === "topright" && corner.x === rectA.right && corner.y === rectA.top) {
					continue;
				}
				cornersInBox.push(corner.label);
			}
		}

		/**
   * Going back to our example earlier. Remember, A is the larger box that encompasses B and C. In this case, only two corners are within A. (bottom left, bottom right).
  		+-------------------+
  		|                   |
  		|                   |
  		|                   |
  		|                   |
  		|         B         |
  		|                   |
  		|                   |
  		|                   |
  		+-------------------+
  		|                   |
  		|                   |
  		|                   |
  		|                   |
  		|         C         |
  		|                   |
  		|                   |
  		|                   |
  		|                   |
  		|                   |
  		+-------------------+
  	* */
		if (cornersInBox.length === 2) {
			//left edge is in box.
			if (cornersInBox.includes("topleft") && cornersInBox.includes("bottomleft")) {
				clip.right = rectB.left;
			} else if (cornersInBox.includes("topright") && cornersInBox.includes("bottomright")) {
				clip.left = rectB.right;
			} else {
				if (cornersInBox.includes("topleft") && cornersInBox.includes("topright")) {
					clip.bottom = rectB.top;
				} else if (cornersInBox.includes("bottomleft") && cornersInBox.includes("bottomright")) {
					clip.top = rectB.bottom;
				}
			}
		} else {
			/****
   * In this case, A is the wide horizontal box. B is the tall vertical box. Their bottom left corners align at point X.
   *  In this case, only one corner (bottom left of B) is within the bounds of A.
   					    B
           +------------------+
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		|                  |
   		+---------------------------------------------------------------------+
   		|                  |                                                  |
   		|                  |                                                  |
   		|                  |                                                  |
   		|                  |                  CLIP                            |  A
   		|                  |                                                  |
   		|                  |                                                  |
   		+------------------+--------------------------------------------------+
   	   X
    */

			const ISLEFTORRIGHT = edge === "left" || edge === "right";
			const ISTOPORBOTTOM = edge === "top" || edge === "bottom";
			if (cornersInBox.includes("topleft")) {

				if (ISTOPORBOTTOM) {
					clip.right = rectB.left;
					if (rectB.top > rectA.bottom) {
						clip.bottom = rectB.top;
					}
				} else {
					clip.left = rectB.left;
					if (rectB.top < rectA.bottom) {
						clip.bottom = rectB.top;
					}
				}
			} else if (cornersInBox.includes("topright")) {
				if (ISTOPORBOTTOM) {
					clip.left = rectB.right;
					if (rectB.top > rectA.bottom) {
						clip.bottom = rectB.top;
					}
				} else {
					clip.right = rectB.right;
					if (rectB.top < rectA.bottom) {
						clip.bottom = rectB.top;
					}
				}
			} else if (cornersInBox.includes("bottomleft")) {

				if (ISLEFTORRIGHT) {
					if (rectB.bottom > rectA.top) {
						clip.top = rectB.bottom;
					}
				} else {
					clip.right = rectB.left;
					if (rectB.bottom < rectA.top) {
						clip.top = rectB.bottom;
					}
				}
			} else {

				if (ISLEFTORRIGHT) {
					if (rectB.bottom > rectA.top) {
						clip.top = rectB.bottom;
					}
				} else {
					clip.left = rectB.right;
					if (rectB.bottom < rectA.top) {
						clip.top = rectB.bottom;
					}
				}
			}
		}

		clip.width = clip.right - clip.left;
		clip.height = clip.bottom - clip.top;
		return clip;
	}

}
/* harmony default export */ __webpack_exports__["a"] = (BoxMath);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\boxMath.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\boxMath.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(38);
var bytesToUuid = __webpack_require__(37);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony export (immutable) */ __webpack_exports__["guuid"] = guuid;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_uuid__ = __webpack_require__(101);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_uuid__);

//Class without deep openfin/system dependencies.
function guuid() {
	return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_uuid__["v1"])(); // return global uuid
}

function clone(obj) {
	//This has been tested a good amount. Previous to this commit we were using a mix of deepmerge and JSON.parse(JSON.stringify()).
	//Trying lodash.deepclone made my tests take 2-3s.
	//JSON.parse everywhere made them take ~ 1s.
	//Using JSON.parse on arrays and deep merge on objects makes them take 7-900ms.
	if (Array.isArray(obj)) {
		return obj.slice();
	}
	try {
		return JSON.parse(JSON.stringify(obj));
	} catch (e) {
		Logger.system.error("clone error", e);
		return e;
	}
};

class MockLogger {
	constructor({ debug } = { debug: true }) {
		if (debug) {
			this.system = console;
			this.system.debug = console.log;
		} else {
			//Suppress everything but errors for tests
			this.system = {
				warn: Function.prototype,
				debug: Function.prototype,
				log: Function.prototype,
				info: Function.prototype,
				error: console.error
			};
		}
	}
	isLogMessage() {
		return true;
	}

	start() {}
};

const mockLogger = new MockLogger();
/* harmony export (immutable) */ __webpack_exports__["mockLogger"] = mockLogger;


 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\disentangledUtils.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\disentangledUtils.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boxMath__ = __webpack_require__(92);

class DockableBox {
	constructor(bounds) {
		if (bounds) {
			this.left = bounds.left;
			this.top = bounds.top;
			this.right = bounds.right;
			this.bottom = bounds.bottom;
			this.width = bounds.right - bounds.left;
			this.height = bounds.bottom - bounds.top;
			this.windowBoundingBox = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].getWindowBoundingBox(this.getBounds());
			this.setSnappingRegions();
		}
		this.getVertices = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].getVertices;
		return this;
	}
	/**
 * @function {function name}
 * @param  {type} format         {description}
 * @param  {type} includeCorners {description}
 * @return {type} {description}
 */
	getEdges(format, includeCorners) {
		if (includeCorners === undefined || includeCorners === true) {
			includeCorners = 0;
		} else {
			includeCorners = 1;
		}

		var top = {
			min: {
				x: this.left + includeCorners,
				y: this.top
			},
			max: {
				x: this.right - includeCorners,
				y: this.top
			}
		};
		var left = {
			min: {
				x: this.left,
				y: this.top + includeCorners
			},
			max: {
				x: this.left,
				y: this.bottom - includeCorners
			}
		};
		var right = {
			min: {
				x: this.right,
				y: this.top + includeCorners
			},
			max: {
				x: this.right,
				y: this.bottom - includeCorners
			}
		};
		var bottom = {
			min: {
				x: this.left + includeCorners,
				y: this.bottom
			},
			max: {
				x: this.right - includeCorners,
				y: this.bottom
			}
		};

		if (format === "obj") {
			return {
				top: top,
				right: right,
				bottom: bottom,
				left: left
			};
		}
		return [top, right, bottom, left];
	}

	getCorners() {
		return this.getCornerObject(this.getBounds());
	}

	/**
 * @function {function name}
 * @param  {type} point          {description}
 * @param  {type} includeCorners {description}
 * @return {type} {description}
 */
	pointIsOnBoundingBox(point, includeCorners) {
		//If it's on the top or bottom edge.
		var edges = this.getEdges("arr", includeCorners);

		for (var i = 0; i < edges.length; i++) {
			var segment = edges[i];
			if (__WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].isPointOnSegment(point, segment)) {
				return true;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} corner {description}
 * @return {type} {description}
 */
	getPointByVertex(corner) {

		corner = corner.toLowerCase();
		var point = {
			x: this.left,
			y: this.top
		};
		if (corner.includes("bottom")) {
			point.y = this.bottom;
		}
		if (corner.includes("right")) {
			point.x = this.right;
		}
		return point;
	}

	/**
 * @function {function name}
 * @param  {type} point     {description}
 * @param  {type} tolerance {description}
 * @return {type} {description}
 */
	getEdgeByPoint(point, tolerance) {
		var edges = this.getEdges("obj");

		for (var edge in edges) {
			if (__WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].isPointOnSegment(point, edges[edge])) {
				return edge;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} point     {description}
 * @param  {type} tolerance {description}
 * @return {type} {description}
 */
	getVertexByPoint(point, tolerance) {
		if (tolerance === undefined) {
			tolerance = 0;
		}
		var corner = null,
		    justAnEdge = true;
		if (point.y <= this.windowBoundingBox.max.y + tolerance && point.y >= this.windowBoundingBox.max.y - tolerance) {
			corner = "bottom";
		}
		if (point.y <= this.windowBoundingBox.min.y + tolerance && point.y >= this.windowBoundingBox.min.y - tolerance) {
			corner = "top";
		}

		if (!corner) {
			return corner;
		}

		if (point.x <= this.windowBoundingBox.min.x + tolerance && point.x >= this.windowBoundingBox.min.x - tolerance) {
			justAnEdge = false;
			corner += "Left";
		}

		if (point.x <= this.windowBoundingBox.max.x + tolerance && point.x >= this.windowBoundingBox.max.x - tolerance) {
			justAnEdge = false;
			corner += "Right";
		}
		if (justAnEdge) {
			return null;
		}
		return corner;
	}

	/**
 * @function getSharedEdges Determines if another window has edges to which our window may snap/dock
 * @param  {type} win2 {description}		* @param  {Window} win2 Window proxy (movement object) of other window to which our window may snap/dock
 * @return {type} {description}		* @param  {number} tolerance Buffer region around edges to determine region for snap / dock
 * @return {object} Object describing shared edges, with boolean top, bottom, left, and right properties
 */
	getSharedEdges(win2, tolerance) {
		if (!tolerance) {
			tolerance = 0;
		}
		//from perspective of stationary window;
		var sharedEdges = {
			top: false,
			left: false,
			right: false,
			bottom: false
		};
		// +--------------------------------+
		// |    Monitor2                    |
		// |                                |
		// |           +---------+          |
		// |           |         |          |
		// |           |  Win2   |          |
		// |           |         |          |
		// +--------------------------------+
		// |           |         |          |
		// |           | MyWindow|          |
		// |           |         |          |
		// |           +---------+          |
		// |    Monitor1                    |
		// |                                |
		// +--------------------------------+
		// Return all false if we aren't intersecting at all or snapping exactly across the monitor boundary,
		// e.g. (see above) if top of my window is snapped to bottom of the other window and the top of my other window is the top
		// of the monitor, return shared edges.
		const intersection = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].intersectBoundingBoxes(this.buffer, win2.windowBoundingBox);
		if (!intersection || this.monitor && (this.top === win2.bottom && this.top === this.monitor.top || this.left === win2.right && this.left === this.monitor.left || this.bottom === win2.top && this.bottom === this.monitor.bottom || this.right === win2.left && this.right === this.monitor.right)) {
			return sharedEdges;
		}
		var inRightTolerance = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].between({
			num: win2.right,
			min: this.left - tolerance,
			max: this.left + tolerance,
			inclusive: true
		});
		var inLeftTolerance = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].between({
			num: win2.left,
			min: this.right - tolerance,
			max: this.right + tolerance,
			inclusive: true
		});
		var inTopTolerance = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].between({
			num: win2.top,
			min: this.bottom - tolerance,
			max: this.bottom + tolerance,
			inclusive: true
		});
		var inBottomTolerance = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].between({
			num: win2.bottom,
			min: this.top - tolerance,
			max: this.top + tolerance,
			inclusive: true
		});

		if (inRightTolerance) {
			if (win2.bottom > this.top - tolerance && win2.top < this.bottom + tolerance) {
				sharedEdges.left = true;
			}
		}
		if (inLeftTolerance) {
			//if(600 > 0 && 300 < 300)
			if (win2.bottom > this.top - tolerance && win2.top < this.bottom + tolerance) {
				sharedEdges.right = true;
			}
		}

		if (inBottomTolerance) {
			if (win2.left < this.right + tolerance && win2.right > this.left - tolerance) {
				sharedEdges.top = true;
			}
		}

		if (inTopTolerance) {
			if (win2.left < this.right + tolerance && win2.right > this.left - tolerance) {
				sharedEdges.bottom = true;
			}
		}

		return sharedEdges;
	}

	/**
 * @function getSharedCorners Determines if another window has corners to which our window may snap/dock
 * @param  {type} win2 {description}		* @param  {Window} win2 Window proxy (movement object) of other window to which our window may snap/dock
 * @return {type} {description}		* @return {object} Object describing shared corners, including original vertices (topLeft, topRight, bottomRight, bottomLeft),
 *					and ammended vertices (rightTop, rightBottom, leftTop, leftBottom) to indicate shared tops or bottoms on
 *					on the left or right.
 */
	getSharedCorners(win2) {
		var sharedCorners = {
			topLeft: false,
			topRight: false,
			bottomLeft: false,
			bottomRight: false,

			//distinction is in the placement. a window placed to the side and top aligned would share the rightTop corner, but not the topRight
			rightTop: false,
			rightBottom: false,
			leftTop: false,
			leftBottom: false
		};

		// +--------------------------------+
		// |    Monitor2                    |
		// |                                |
		// |           +---------+          |
		// |           |         |          |
		// |           |  Win2   |          |
		// |           |         |          |
		// +--------------------------------+
		// |           |         |          |
		// |           | MyWindow|          |
		// |           |         |          |
		// |           +---------+          |
		// |    Monitor1                    |
		// |                                |
		// +--------------------------------+
		// Return all false if we aren't intersecting at all or snapping exactly across the monitor boundary,
		// e.g. (see above) if top of my window is snapped to bottom of the other window and the top of my other window is the top
		// of the monitor, return shared edges.
		const intersection = !__WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].intersectBoundingBoxes(this.innerBuffer, win2.windowBoundingBox) && __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].intersectBoundingBoxes(this.buffer, win2.windowBoundingBox);
		if (!intersection || this.monitor && (this.top === win2.bottom && this.top === this.monitor.top || this.left === win2.right && this.left === this.monitor.left || this.bottom === win2.top && this.bottom === this.monitor.bottom || this.right === win2.left && this.right === this.monitor.right)) {
			return sharedCorners;
		}
		let myCorners = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].getVertices(this.getBounds());
		let theirCorners = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].getVertices(win2);
		myCorners.forEach(corner => {
			for (var i = 0; i < theirCorners.length; i++) {
				var theirCorner = theirCorners[i];
				if (corner.x === theirCorner.x && corner.y === theirCorner.y) {
					sharedCorners[corner.label] = true;
				}
			}
		});
		var sharedEdges = {
			bottom: this.bottom === win2.bottom || this.bottom === win2.top,
			top: this.top === win2.top || this.top === win2.bottom,
			right: this.right === win2.left || this.right === win2.right,
			left: this.left === win2.right || this.left === win2.left
		};
		var sideTop = false,
		    sideBottom = false;
		if (this.top === win2.top) {
			sideTop = true;
		}
		if (this.bottom === win2.bottom) {
			sideBottom = true;
		}
		if (sharedEdges.right) {
			if (sideTop) {
				sharedCorners.rightTop = true;
			}
			if (sideBottom) {
				sharedCorners.rightBottom = true;
			}
		}

		if (sharedEdges.left) {
			if (sideBottom) {
				sharedCorners.leftBottom = true;
			}
			if (sideTop) {
				sharedCorners.leftTop = true;
			}
		}

		return sharedCorners;
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	getBounds() {
		return {
			left: this.left,
			right: this.right,
			top: this.top,
			bottom: this.bottom,
			width: this.width,
			height: this.height
		};
	}

	/**
 * @function {function name}
 * @param  {type} req {description}
 * @return {type} {description}
 */
	getCornerObject(req) {
		let corners = {};
		let vertices = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].getVertices(req);
		for (let i = 0; i < vertices.length; i++) {
			let corner = vertices[i];
			corners[corner.label] = corner;
		}
		return corners;
	}

	/**
 * @function {function name}
 * @param  {type} mouse {description}
 * @return {type} {description}
 */
	getGrabbedEdge(mouse) {
		//window.methodCalls["getGrabbedEdge"]++;
		var tolerance = 15;
		var mouseBox = {
			min: {
				x: mouse.x - tolerance,
				y: mouse.y - tolerance
			},
			max: {
				x: mouse.x + tolerance,
				y: mouse.y + tolerance
			}
		};
		var edges = ["top", "bottom", "left", "right"];
		for (var i = 0; i < edges.length; i++) {
			var edge = edges[i];
			if (__WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].intersectBoundingBoxes(mouseBox, this.snappingRegions[edge])) {
				return edge;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} request {description}
 * @return {type} {description}
 */
	getResizeHandle(request) {
		if (this.resizeHandle) {
			return this.resizeHandle;
		}
		var resizeHandle;
		if (request.mousePosition) {
			resizeHandle = this.getVertexByPoint(request.mousePosition, 15);
			if (!resizeHandle) {
				resizeHandle = this.getGrabbedEdge(request.mousePosition);
			}
		}

		if (!resizeHandle) {
			if (request.top !== this.top) {
				resizeHandle = "top";
				if (request.right !== this.right) {
					resizeHandle = "topRight";
				} else if (request.left !== this.left) {
					resizeHandle = "topLeft";
				}
			} else if (request.right !== this.right) {
				resizeHandle = "right";
				if (request.bottom !== this.bottom) {
					resizeHandle = "bottomRight";
				} else if (request.top !== this.top) {
					resizeHandle = "topRight";
				}
			} else if (request.bottom !== this.bottom) {
				resizeHandle = "bottom";

				if (request.left !== this.left) {
					resizeHandle = "bottomLeft";
				} else if (request.right !== this.right) {
					resizeHandle = "bottomRight";
				}
			} else if (request.left !== this.left) {
				resizeHandle = "left";
				if (request.top !== this.top) {
					resizeHandle = "topLeft";
				} else if (request.bottom !== this.bottom) {
					resizeHandle = "bottomLeft";
				}
			}
		}

		if (resizeHandle && request.changeType !== 0) {
			//if we didn't find a resizeHandle, then no edges moved. Send last handle.
			this.resizeHandle = resizeHandle;
		} else if (!resizeHandle && request.changeType === 0) {
			resizeHandle = "top";
		}
		return resizeHandle;
	}

	/**
 * @function {function name}
 * @param  {type} bufferSize {description}
 * @return {type} {description}
 */
	setBuffer(bufferSize) {
		if (bufferSize === undefined && this.bufferSize === null) {
			return;
		} else if (bufferSize !== undefined) {
			this.bufferSize = bufferSize;
		} else {
			bufferSize = this.bufferSize;
		}
		this.buffer = {
			min: {
				x: this.left - bufferSize,
				y: this.top - bufferSize
			},
			max: {
				x: this.right + bufferSize,
				y: this.bottom + bufferSize
			}
		};
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	setSnappingRegions() {
		this.snappingRegions = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].getSnappingRegions(this, this.bufferSize);
	}

	sharesACornerWith(win) {
		var sharedCorners = this.getSharedCorners(win);
		var corners = ["topLeft", "topRight", "rightTop", "leftTop", "bottomRight", "bottomLeft", "rightBottom", "leftBottom"];
		for (var i = 0; i < corners.length; i++) {
			var corner = corners[i];
			if (sharedCorners[corner]) {
				return true;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} win {description}
 * @return {type} {description}
 */
	sharesAnEdgeWith(win) {
		var sharedEdges = this.getSharedEdges(win);

		var edges = ["top", "right", "left", "bottom"];
		for (var i = 0; i < edges.length; i++) {
			var edge = edges[i];
			if (sharedEdges[edge]) {
				return true;
			}
		}
		return false;
	}

	/**
 * @function {function name}
 * @param  {type} request {description}
 * @return {type} {description}
 */
	canSnapToWindow(request) {
		if (this.sharesAnEdgeWith(request)) {
			return true;
		}
		return __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].intersectBoundingBoxes(this.buffer, request.windowBoundingBox) && !__WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].intersectBoundingBoxes(this.innerBuffer, request.windowBoundingBox);
	}
}
/* harmony default export */ __webpack_exports__["a"] = (DockableBox);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockableBox.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockableBox.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const ObjectPool_1 = __webpack_require__(100);
const WindowPool_1 = __webpack_require__(110);
const logger_1 = __webpack_require__(2);
const dependencies = {
    Logger: logger_1.default
};
const GroupPoolSingleton = new ObjectPool_1.ObjectPool("GroupPoolSingleton", dependencies);
exports.GroupPoolSingleton = GroupPoolSingleton;
const MonitorPoolSingleton = new ObjectPool_1.ObjectPool("MonitorPoolSingleton", dependencies);
exports.MonitorPoolSingleton = MonitorPoolSingleton;
//Generic list of all windows that the windowService knows about. Contains finsemble windows
const WindowPoolSingleton = new ObjectPool_1.ObjectPool("WindowPoolSingleton", dependencies);
exports.WindowPoolSingleton = WindowPoolSingleton;
//Specific pool of dockable windows.
const DockingPoolSingleton = new WindowPool_1.WindowPool("DockingPoolSingleton", dependencies);
exports.DockingPoolSingleton = DockingPoolSingleton;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// GENERAL NOTES RELATED TO WRAPPER CLEANUP
// 	TODO: only send events when there are listeners
// 	ToDO: fix name versus windowName
// 	TODO: should not be any checks for window methods: e.g. if (this.win._updateOptions) -- should have everything in base class
//	TODO: LauncherService should not be looking at workspace service bounds to determine monitor to use (need an architecture solution here)
// 	TODO: discuss BaseWindow.bindFunctions(this) (sidenote: I removed the extra bindings from the wrap)
Object.defineProperty(exports, "__esModule", { value: true });
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
const events_1 = __webpack_require__(17);
const util = __webpack_require__(10);
const lodash_1 = __webpack_require__(197);
const merge = __webpack_require__(102);
const WindowEventManager_1 = __webpack_require__(89);
const constants = __webpack_require__(16);
const FinsembleEvent_1 = __webpack_require__(88);
const system_1 = __webpack_require__(4);
//This is bad. I don't like it. But without this, the typescript compiler complains. Our clients are just functions that 'inherit' via BaseClient.call. Typescript isn't smart enough to infer the BaseClient's methods, so if you call StorageClient.initialize, it complains.
//This will go away as we move those things into proper classes.
const distributedStoreClient_1 = __webpack_require__(78);
const storageClient_1 = __webpack_require__(79);
distributedStoreClient_1.default.initialize();
storageClient_1.default.initialize();
const BOUNDS_SET = "bounds-set";
const BOUNDS_CHANGING = "bounds-change-request";
const BOUNDS_CHANGED = "disabled-frame-bounds-changed";
const WORKSPACE_CACHE_TOPIC = "finsemble.workspace.cache";
if (!window._FSBLCache)
    window._FSBLCache = {
        storeClientReady: false,
        windowStore: null,
        windows: {},
        gettingWindow: [],
        windowAttempts: {}
    };
class BaseWindow extends events_1.EventEmitter {
    constructor(params) {
        super();
        this.eventlistenerHandlerMap = {};
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Handers to generate wrapper events from incoming transmits
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        this.handleWrapStateChange = (err, response) => {
            let state = response.data.state;
            //closed gets emitted from the window. we don't want to emit a window closed event because the wrap state changed to closed.
            if (state && state !== this.wrapState && state !== "closed") {
                this.wrapState = state;
                this.eventManager.trigger(state);
            }
        };
        this.types = {};
        this.guid = util.guuid();
        //todo settle on a proper name for this property.
        this.wrapState = "initializing";
        this.componentState = {};
        this.windowState = BaseWindow.WINDOWSTATE.NORMAL;
        this.type = null;
        this.windowType = null;
        this.windowOptions = {};
        this.bounds = {};
        this.name;
        this.windowOptions = {};
        //because we were doing this[i]=params[i] in the constructor jscrambler was creating a reference to "this" above _super_, causing everything to break and it made me cry.
        this.doConstruction(params);
        this.TITLE_CHANGED_CHANNEL = "Finsemble." + this.name + ".titleChanged";
        this.componentKey = util.camelCase("activeWorkspace", this.name, this.name);
        this.windowKey = util.camelCase("activeWorkspace", this.name);
        BaseWindow.bindFunctions(this);
        this.wrapStateChangeSubscription = routerClientInstance_1.default.subscribe("Finsemble.Component.State." + this.name, this.handleWrapStateChange);
        this.eventManager = new WindowEventManager_1.WindowEventManager({ name: this.name });
    }
    windowServiceChannelName(channelTopic) { let name = this.name || this.windowName; return `WindowService-Request-${channelTopic}`; }
    eventChannelName(channelTopic) { let name = this.name || this.windowName; return `WindowService-Event-${name}-${channelTopic}`; }
    listenForBoundsSet() {
        this.eventManager.addListener("bounds-change-start", this.handleBoundsSet);
        this.eventManager.addListener("bounds-changing", this.handleBoundsSet);
        this.eventManager.addListener("bounds-change-end", this.handleBoundsSet);
    }
    listenForBoundsChanging() {
        //todo, need to switch from bounds-change-request into bounds-changing.
        routerClientInstance_1.default.addListener(this.eventChannelName(BOUNDS_CHANGING), this.handleBoundsChanging);
    }
    getWindowStore(cb) {
        if (window._FSBLCache.windowStore) {
            return cb(window._FSBLCache.windowStore);
        }
        distributedStoreClient_1.default.createStore({ store: "Finsemble-Windows", global: true }, (err, store) => {
            window._FSBLCache.windowStore = store;
            cb(store);
        });
    }
    doConstruction(params) {
        //TODO this is the same as wrap (eventually this should spawn)
        if (!params.setWindowType && !params.windowType) { //Default WindowType
            params.windowType = "OpenFinWindow";
        }
        if (params.windowType) { //We need to make a specific kind of Window
            params.setWindowType = params.windowType;
            delete params.windowType; //Prevent infinite loop
            let BW = BaseWindow; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the BaseWindow here is of type any -- basically don't worry about its type.
            var childClassObject = new BW.types[params.setWindowType](params);
            //childClassObject.windowType = windowType;
            return childClassObject;
        } //We are a specfic kind of window
        if (params) {
            for (var i in params) {
                this[i] = params[i];
            }
        }
        if (!this.name)
            this.name = params.windowName;
        this.windowType = this.setWindowType;
    }
    static registerType(name, type) {
        let BW = BaseWindow; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the BaseWindow here is of type any -- basically don't worry about its type.
        if (!BW.types) {
            BW.types = {};
        }
        BW.types[name] = type;
    }
    /**
     * This is used to bind all functions only in BaseWindow and not in the child wrappers to the wrappers. Without this binding, the value of "this" in the functions is wrong.
     * @param {} obj
     */
    static bindFunctions(obj) {
        obj.setParent = obj.setParent.bind(obj);
        obj.getParent = obj.getParent.bind(obj);
        obj.eventChannelName = obj.eventChannelName.bind(obj);
        obj.windowServiceChannelName = obj.windowServiceChannelName.bind(obj);
        obj.handleBoundsSet = obj.handleBoundsSet.bind(obj);
        obj.handleBoundsChanging = obj.handleBoundsChanging.bind(obj);
        obj.handleWindowHidden = obj.handleWindowHidden.bind(obj);
        obj.handleWindowShown = obj.handleWindowShown.bind(obj);
        obj.handleWindowMax = obj.handleWindowMax.bind(obj);
        obj.handleWindowMin = obj.handleWindowMin.bind(obj);
        obj.handleWindowRestore = obj.handleWindowRestore.bind(obj);
        obj.setupListeners = obj.setupListeners.bind(obj);
        obj.handleWindowBTF = obj.handleWindowBTF.bind(obj);
        obj.handleWindowStartMove = obj.handleWindowStartMove.bind(obj);
        obj.handleWindowStopMove = obj.handleWindowStopMove.bind(obj);
        obj.handleWindowDisabledFrameBoundsChanged = obj.handleWindowDisabledFrameBoundsChanged.bind(obj);
        obj.handleWindowStateChange = obj.handleWindowStateChange.bind(obj);
        obj.onTitleChanged = obj.onTitleChanged.bind(obj);
        obj.handleWrapRemoveRequest = obj.handleWrapRemoveRequest.bind(obj);
        obj.listenForBoundsChanging = obj.listenForBoundsChanging.bind(obj);
        obj._eventHandled = obj._eventHandled.bind(obj);
    }
    // set up this window's listeners
    setupListeners(name) {
        logger_1.default.system.debug("BaseWindow parent change notification setup", name);
        this.parentSubscribeID = routerClientInstance_1.default.subscribe(`Finsemble.parentChange.${name}`, (err, message) => {
            if (err) {
                logger_1.default.system.error("BaseWindow parent change notification error", err);
            }
            else {
                var parentState = message.data;
                parentState = parentState || {};
                if (parentState.type == "Added") {
                    logger_1.default.system.debug("BaseWindow Parent Notification: window.addedToStack listener", parentState);
                    this.setParent(parentState.stackedWindowIdentifier);
                }
                else if (parentState.type == "Removed") {
                    logger_1.default.system.debug("BaseWindow Parent Notification: window.removedFromStack listener", parentState);
                    this.clearParent();
                }
                else if (parentState.type) { // if defined but unknown type
                    logger_1.default.system.error("BaseWindow Parent Notification: unknown type", parentState);
                }
            }
        });
        this.TITLE_CHANGED_SUBSCRIPTION = routerClientInstance_1.default.subscribe(this.TITLE_CHANGED_CHANNEL, this.onTitleChanged);
    }
    onTitleChanged(err, response) {
        if (!response || !response.data || typeof response.data !== "string")
            return;
        this.windowOptions.title = response.data;
        this.emit("title-changed", {
            name: this.name,
            title: response.data
        });
    }
    static getInstance(params, cb = Function.prototype) {
        let myName = system_1.System.Window.getCurrent().name;
        if (params && params.windowName) {
            params.name = params.windowName;
        }
        if (!params || !params.name) {
            return cb("name is required");
        }
        params.windowName = params.name;
        async function promiseResolver(resolve, reject) {
            if (params.waitForReady !== false) {
                logger_1.default.system.debug("WRAP LIFECYCLE:WAIT FOR READY", params.name);
                await BaseWindow._windowReady(params.windowName); // wait to insure the window is fully ready in the window service
                logger_1.default.system.debug("WRAP LIFECYCLE:WAIT DONE -- READY", params.name);
            }
            //Return early if we already have the wrap cached.
            if (window._FSBLCache.windows[params.name]) {
                logger_1.default.system.debug("WRAP LIFECYCLE:", params.name, "Window found in the cache, returning without going to the Launcher");
                let wrap = window._FSBLCache.windows[params.name];
                resolve({ wrap });
                return cb(null, wrap);
            }
            //If we already have all of the information, just call createWrap. (Temporary code to cover services including FSBL.windowClient.)
            if ((params.name.toLowerCase().includes("finsemble") || params.name.toLowerCase().includes("service")) && params.uuid && params.name) {
                if (!params.windowIdentifier) {
                    params.windowIdentifier = {
                        uuid: params.uuid,
                        name: params.name,
                        windowName: params.name,
                        windowType: params.windowType
                    };
                }
                logger_1.default.system.debug("WRAP LIFECYCLE:", params.name, "All information for wrap passed in, creating wrap locally");
                let { wrap } = await BaseWindow._createWrap(params);
                //@exit
                resolve({ wrap });
                return cb(null, wrap);
            }
            //All we have is a windowName. we send a request to the launcher for more information so that we can construct the proper object. This also the place where
            routerClientInstance_1.default.query(`WindowService-Request-getWindowIdentifier`, { windowName: params.name, requester: myName }, onWrapInformationReceived);
            async function onWrapInformationReceived(err, response) {
                if (err) {
                    logger_1.default.system.error(err);
                    //@exit
                    reject(err);
                    return cb(err, null);
                }
                if (window._FSBLCache.windows[params.name]) {
                    let wrap = window._FSBLCache.windows[params.name];
                    logger_1.default.system.debug("WRAP LIFECYCLE:", params.name, "Information received from launcher, but wrap exists in cache. Returning cached wrap.");
                    //@exit
                    resolve({ wrap });
                    return cb(null, wrap);
                }
                let { identifier } = response.data;
                if (identifier.windowName) {
                    identifier.name = identifier.windowName;
                }
                logger_1.default.system.debug("WRAP LIFECYCLE:", params.name, "Information received from launcher. Creating wrap.");
                params.retrievedIdentifier = identifier;
                let { wrap } = await BaseWindow._createWrap(params);
                //@exit
                resolve({ wrap });
                cb(null, wrap);
            }
        }
        return new Promise(promiseResolver);
    }
    static _createWrap(params) {
        function promiseResolver(resolve, reject) {
            let identifier = params.retrievedIdentifier || params.windowIdentifier;
            let wrap = null;
            if (typeof window._FSBLCache.windowAttempts[params.name] === "undefined")
                window._FSBLCache.windowAttempts[params.name] = 0;
            //OpenfinApplication is essentially just an openfinWindow in its own process. We can wrap it just like a window.
            if (!params.setWindowType && !identifier.windowType || identifier.windowType === "OpenFinApplication") { //Default WindowType
                identifier.windowType = "OpenFinWindow";
            }
            //Top level keeps important info (e.g., uuid, name, windowType).
            let paramsForWindow = Object.assign({}, identifier);
            //Also pull in anything that was passed into the constructor (e.g., windowDescriptor, etc);
            paramsForWindow = Object.assign(paramsForWindow, params);
            paramsForWindow = Object.assign(paramsForWindow, identifier);
            paramsForWindow.setWindowType = paramsForWindow.windowType;
            delete paramsForWindow.windowType; //Prevent infinite loop
            logger_1.default.system.debug("WRAP LIFECYCLE: Placing wrap into the local cache.", identifier.windowName);
            let BW = BaseWindow; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the BaseWindow here is of type any -- basically don't worry about its type.
            if (window._FSBLCache.windows.hasOwnProperty(identifier.windowName)) {
                logger_1.default.system.error("DUPLICATE WRAPPER for", identifier.windowName);
            }
            else {
                window._FSBLCache.windows[identifier.windowName] = new BW.types[paramsForWindow.setWindowType](paramsForWindow);
            }
            wrap = window._FSBLCache.windows[identifier.windowName];
            wrap.windowType = identifier.windowType;
            wrap.identifier = identifier;
            //BaseWindow.bindFunctions(win); // not needed -- handled in constructor
            wrap.setupListeners(identifier.windowName);
            resolve({ wrap });
        }
        return new Promise(promiseResolver);
    }
    static _getRemoveWrapChannel(name) {
        return `${system_1.System.Window.getCurrent().name}.removeWrap.${name}`;
    }
    handleWrapRemoveRequest() {
        //wrap is the openfin or stacked window. if the removeListeners function exists, we remove all listeners we added during the lifecycle of that window wrapper.
        if (this.removeListeners) {
            this.removeListeners();
        }
        if (this.removeAllListeners) { //removeAllListeners is built into event emitter.
            this.removeAllListeners();
        }
        for (let event in this.eventlistenerHandlerMap) {
            for (let i = 0; i < this.eventlistenerHandlerMap[event].length; i++) {
                this.eventlistenerHandlerMap[event][i].interceptor.removeAllListeners();
            }
        }
        this.eventManager.cleanup();
        logger_1.default.system.debug("WRAP CLOSE. Deleting cached wrap.");
        delete window._FSBLCache.windows[this.name];
        delete window._FSBLCache.windowAttempts[this.name];
        this.cleanupRouter();
    }
    cleanupRouter() {
        const REMOVE_WRAP_CHANNEL = BaseWindow._getRemoveWrapChannel(this.name);
        routerClientInstance_1.default.removeResponder(REMOVE_WRAP_CHANNEL);
        if (this.TITLE_CHANGED_SUBSCRIPTION) {
            routerClientInstance_1.default.unsubscribe(this.TITLE_CHANGED_SUBSCRIPTION);
        }
        routerClientInstance_1.default.unsubscribe(this.wrapStateChangeSubscription);
    }
    onReady(callback) {
        if (this.wrapState === "ready") {
            return callback();
        }
        this.eventManager.on("ready", callback);
    }
    handleBoundsSet(err, response) {
        if (response.data && response.data.bounds) {
            this.mergeBounds(response.data.bounds);
        }
        logger_1.default.system.debug(`BaseWindow emitting bounds set for ${this.name}`, response.data);
        this.emit(BOUNDS_SET, response.data);
    }
    handleBoundsChanging(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting bounds changing for ${this.name}`, response.data);
        this.emit(BOUNDS_CHANGING, response.data);
    }
    handleWindowHidden(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting hidden for ${this.name}`, response.data);
        this.emit("hidden", this.windowName);
    }
    handleWindowShown(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting shown for ${this.name}`, response.data);
        this.emit("shown", this.windowName);
    }
    handleWindowBTF(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting BTF for ${this.name}`, response.data);
        this.emit("bringToFront", { name: this.name });
    }
    handleWindowMax(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting maximize for ${this.name}`, response.data);
        this.windowState = this.WINDOWSTATE.MAXIMIZED;
        this.emit("maximized", { name: this.name });
    }
    handleWindowMin(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting min for ${this.name}`, response.data);
        this.windowState = this.WINDOWSTATE.MINIMIZED;
        this.emit("minimized", { name: this.name });
    }
    handleWindowRestore(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting restore for ${this.name}`, response.data);
        this.windowState = this.WINDOWSTATE.NORMAL;
        this.emit("restored", { name: this.name });
    }
    handleWindowStartMove(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting startmove for ${this.name}`, response.data);
        this.emit("startedMoving", { name: this.name });
    }
    handleWindowStopMove(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting stop move for ${this.name}`, response.data);
        this.emit("stoppedMoving", { name: this.name });
    }
    handleWindowDisabledFrameBoundsChanged(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting disabled-frame-bounds-changed for ${this.name}`, response.data);
        this.emit("disabled-frame-bounds-changed", { name: this.name });
    }
    handleWindowStateChange(err, response) {
        logger_1.default.system.debug(`BaseWindow emitting window state change for ${this.name}`, response.data);
        this.windowState = response.data;
        switch (response.data) {
            case this.WINDOWSTATE.MAXIMIZED:
                this.emit("maximized", { name: this.name });
                break;
            case this.WINDOWSTATE.NORMAL:
                this.emit("restored", { name: this.name });
                break;
            case this.WINDOWSTATE.MINIMIZED:
                this.emit("minimized", { name: this.name });
                break;
            default:
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Common template for window-function requests to window service -- see public functions
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @param {string} methodName method name (e.g. "minimize", "maximize")
     * @param {object} params
     * @param {function=} callback
     * @memberof FinsembleWindow
     * @private
     */
    queryWindowService(methodName, params, callback = Function.prototype) {
        if (typeof params === "function") {
            callback = params;
            params = {};
        }
        params = params || {};
        params.windowIdentifier = this.identifier; // add this window's identifier
        logger_1.default.system.debug("FinsembleWindow.queryWindowService", this.windowServiceChannelName(methodName), params);
        console.debug("FinsembleWindow.queryWindowService", this, this.windowServiceChannelName(methodName), params);
        var responseData = null;
        routerClientInstance_1.default.query(this.windowServiceChannelName(methodName), params, (err, queryResponseMessage) => {
            if (err) {
                logger_1.default.system.warn(`WindowService.${methodName}: failed`, err);
                console.debug(`WindowService.${methodName}: failed`, err);
            }
            else {
                responseData = queryResponseMessage.data;
                logger_1.default.system.debug(`${this.windowServiceChannelName(methodName)} successful`, responseData);
                console.debug(`${this.windowServiceChannelName(methodName)} successful`, responseData);
            }
            if (callback)
                callback(err, responseData);
        });
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Core Window Functions: can be invoked by any service or component.  Most are sent to the WindowService to be exectuted.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    _eventHandled(interceptor, guid, canceled = false) {
        logger_1.default.system.debug("FinsembleWindow._eventHandled private", interceptor.event, this.identifier.windowName, guid, canceled);
        if (interceptor.delayable)
            routerClientInstance_1.default.publish(constants.EVENT_INTERRUPT_CHANNEL + "." + guid, { canceled: canceled });
    }
    addEventListener(eventName, handler) {
        // We send this guid so that Window service can keep track of individual listeners for event interruption.
        let guid = Date.now() + "_" + Math.random();
        // Please do not comment this code out: This is how we create Interruptible events in the private wrappers.
        if (constants.INTERRUPTIBLE_EVENTS.includes(eventName)) {
            this.queryWindowService("registerInterruptibleEvent", { eventName: eventName, guid: guid });
        }
        let delayable = constants.INTERRUPTIBLE_EVENTS.includes(eventName);
        let cancelable = constants.INTERRUPTIBLE_EVENTS.includes(eventName);
        let interceptor = new FinsembleEvent_1.FinsembleEvent({
            source: this,
            event: eventName,
            delayable: delayable,
            cancelable: cancelable
        });
        var internalHandler = (data) => {
            // TODO: need to create event list with properties:
            interceptor.setData(data);
            handler(interceptor); // this is where a handler can delay the event
            if (delayable && interceptor.delayed) { // if delayed, wait for done
                routerClientInstance_1.default.publish(constants.EVENT_INTERRUPT_CHANNEL + "." + guid, { delayed: true });
                interceptor.addListener("done", (response) => {
                    this._eventHandled(interceptor, guid, response.canceled);
                });
            }
            else { // if not delayed, it is done.
                this._eventHandled(interceptor, guid);
            }
        };
        this.eventManager.listenForRemoteEvent(eventName, handler);
        this.eventManager.addListener(eventName, internalHandler);
        if (!this.eventlistenerHandlerMap[eventName]) {
            this.eventlistenerHandlerMap[eventName] = [];
        }
        this.eventlistenerHandlerMap[eventName].push({
            handler: handler,
            internalHandler: internalHandler,
            interceptor: interceptor,
            guid: guid
        });
    }
    removeEventListener(eventName, handler) {
        if (!this.eventlistenerHandlerMap[eventName]) { // trying to remove non-existent handler.
            logger_1.default.system.error("trying to remove non-existent handler", eventName);
            return;
        }
        for (var i = this.eventlistenerHandlerMap[eventName].length - 1; i >= 0; i--) {
            let handlerStoredData = this.eventlistenerHandlerMap[eventName][i];
            if (handlerStoredData.handler === handler) {
                this.eventManager.removeListener(eventName, handlerStoredData.internalHandler);
                handlerStoredData.interceptor.removeAllListeners();
                routerClientInstance_1.default.publish(constants.EVENT_INTERRUPT_CHANNEL + "." + this.name, { eventName: eventName, guid: handlerStoredData.guid, delayed: false, canceled: false });
                this.eventlistenerHandlerMap[eventName].splice(i, 1);
            }
        }
    }
    /**
     *Register a window with docking. Use this if you don't want to use the full initilization function
     *
     * @param {Object} params - can be anything that is passed to docking for window registration. @todo This should be removed soom
     * @param {Function} cb
     * @memberof FSBLWindow
     */
    registerWithDocking(params, cb) {
        routerClientInstance_1.default.query("DockingService.registerWindow", {
            type: this.type,
            windowType: this.windowType,
            windowMsg: params,
            name: this.windowName
        }, cb);
    }
    /**
     *Unregister a window with docking
     *
     * @memberof FSBLWindow
     */
    unRegisterWithDocking() {
        routerClientInstance_1.default.transmit("DockingService.deregisterWindow", { name: this.windowName });
    }
    /**
     *This is if we want to handle the full register/ready state inside of the window
     register with docking
     send the message to laucnher saying that component is ready
     *
     * @memberof FSBLWindow
     */
    initializeWindow(params, cb) {
        this.registerWithDocking(params, () => {
            routerClientInstance_1.default.publish("Finsemble." + this.windowName + ".componentReady", {
                name: this.windowName
            });
        });
    }
    wrapReady() {
        routerClientInstance_1.default.publish("Finsemble." + this.windowName + ".wrapReady", { name: this.windowName, state: "open" });
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Core Private Window Functions: generally should only be directly invoked by the WindowService (an exception is _close)
    // Note: These private window functions can also optionally be invoked from the derived class definition.  See openfinWindowWrapper _minimize for example.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow).  All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _minimize(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._minimize", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._minimize(params, (err, result) => {
                logger_1.default.system.debug("BaseWindow._minimize parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _maximize(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._maximize", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._maximize(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._maximize parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _restore(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._restore", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._restore(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._restore parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    _blur(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._blur", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._blur(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._blur parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _focus(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._focus", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._focus(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._focus parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _bringToFront(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._bringToFront", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._bringToFront(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._bringToFront parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _isShowing(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._isShowing", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._isShowing(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._isShowing parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _setBounds(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._setBounds", params);
        params = params || {};
        let bounds = params.bounds;
        //Get the bounds that we have stored locally. If we have them, we compare later. If the bounds have changed, we emit the bounds-set method. Otherwise, we don't emit that event.
        let cachedBounds = {};
        if (this.windowOptions && this.windowOptions.bounds) {
            cachedBounds = this.windowOptions.bounds;
        }
        this.mergeBounds(bounds); //This happens twice...remove this
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._setBounds(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._setBounds parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _getBounds(params, cb) {
        logger_1.default.system.debug("BaseWindow._getBounds", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._getBounds(params, function (err, bounds) {
                logger_1.default.system.debug("BaseWindow._getBounds parent", bounds);
                cb(err, bounds); // shouldContinue not defined in return value, but implicitedly false
            });
        }
        else {
            cb(null, { shouldContinue: true }); // if should continue, bounds will be calculated by dervived class
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _updateOptions(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._updateOptions", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._updateOptions(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._updateOptions parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _hide(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._hide", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._hide(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._hide parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _show(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._show", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._show(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._show parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    //@todo fully document this function
    /**
     * Close
     * @param params
     * @param params.fromSystem Bool. If true, event bubbled up because of an alt+f4, task manager, etc. Something closed the window that wasn't Finsemble.
     * @param cb
     */
    _close(params, cb = Function.prototype) {
        logger_1.default.system.debug("WRAP CLOSE. BaseWindow._close", this.name, params);
        params = params || {};
        if (!params.invokedByParent && !params.ignoreParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            params.noDocking = true; // when removing from stacked window don't register child with docking
            this.parentWindow._removeWindow(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._close parent", result);
                cb(err, { shouldContinue: true });
            });
        }
        else if (params.fromSystem) {
            //if it's a system-close, we don't want to call finWindow.close. finWindow doesn't exist in that case. So we pass shouldContinue: false
            cb(null, { shouldContinue: false });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _alwaysOnTop(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._alwaysOnTop", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._alwaysOnTop(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._alwaysOnTop parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _setOpacity(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._setOpacity", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._setOpacity(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._setOpacity parent", result);
                cb(err, { shouldContinue: false });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    // Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.
    // If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.
    _saveWindowOptions(params, cb = Function.prototype) {
        logger_1.default.system.debug("BaseWindow._saveWindowOptions", params);
        params = params || {};
        if (!params.invokedByParent && this.parentWindow) {
            // if parent defined and not circuluar loop, invoke parent functionality.  Parent result passed back to caller
            params.windowIdentifier = this.identifier; // add this window's identifier for parent invocation
            this.parentWindow._saveWindowOptions(params, function (err, result) {
                logger_1.default.system.debug("BaseWindow._saveWindowOptions parent", result);
                cb(err, { shouldContinue: true });
            });
        }
        else {
            cb(null, { shouldContinue: true });
        }
    }
    _getOptions(params = null, cb = Function.prototype) {
        //todo get config or something.
        return cb(null, {});
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Other Baseclass Function: These are common functions shared across derived classess
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Invoked to indicate an operation (e.g. dragging out of tab region) has started. This signals the Docking service to start tracking the mouse location and invoking tiling behavior as needed. Typically inherited (base function only).
     * @param {object} params for future use
     *
     * @example
     *	// dragging tab example using tracking and group
     * 	BaseWindow.startTabTileMonitoring();
     *	// if dragging tab is in a group, then remove it given tracking results will decide what to do with the window
     * 	BaseWindow.Group.getGroupID(this.identifier, function (err, tileGroupId) {
     * 		if (!err) { // if no error then must be in a tile group
     *			self.Group.removeWindow(this.identifier);
     *		}
     *	});
     */
    startTabTileMonitoring(params) {
        logger_1.default.system.debug("BaseWindow.startTabTileMonitoring", params);
        routerClientInstance_1.default.transmit("TabTile.startTabTile", { params });
    }
    /**
     * Invoked by client originating a dragStart that it has has ended. Typically inherited (base function only).
     * @param {object} params for future use
         * @param {function=} callback option callback that support overriding default behavior
     *
     * 	BaseWindow.stopTabTileMonitoring(params, function(err, results, defaultTabTileAction) {
     * 		// . . . custom code goes here . . .
     *		defaultTabTileAction(results); // now take default action or call your own function instead
     * 	});
     *
     */
    stopTabTileMonitoring(params, callback) {
        logger_1.default.system.debug("BaseWindow.stopTabTileMonitoring", params);
        routerClientInstance_1.default.query("TabTile.stopTabTile", { params }, function (err, queryResponseMessage) {
            if (err) {
                logger_1.default.system.warn("TabTile.stopTabTile: query failed", err);
            }
            else {
                logger_1.default.system.debug("TabTile.stopTabTile results", queryResponseMessage.data);
            }
            var stopTabTileResults = queryResponseMessage.data;
            if (callback) {
                callback(err, stopTabTileResults, this.defaultStopTrackingAction);
            }
            else {
                this.defaultTabTileAction(stopTabTileResults);
            }
        });
    }
    /**
     * Defines default TabTile action for stopTabTileMonitoring.  May be overriden by client -- see example in stopTabTileMonitoring. Typically inherited (base function only).
     *
     * @param {any} stopTabTileResults
     * @memberof BaseWindow
     *
     * @private
     */
    defaultTabTileAction(stopTabTileResults) {
        let self = this;
        logger_1.default.system.debug("BaseWindow.defaultTabTileAction", stopTabTileResults);
        switch (stopTabTileResults.stoppedLocation) {
            case "OutsideWindow":
                // move window to drop location (since for now assuming only single-tabbed windows)
                break;
            case "TabSection":
                // WindowStack.addWindowToStack(callback) // for when we get to tabbing
                break;
            case "InsideWindow":
                if (stopTabTileResults.tileGroupId) { // if dropped in an existing tile group (which might be the same it was dragging from)
                    self.Group.addWindow(this.identifier, stopTabTileResults.tileGroupId, stopTabTileResults.dropCoordinates);
                }
                else { // if dropped in a separate window outside a tile group
                    self.Group.createGroup(function (newGroupId) {
                        // add dragging window to new tile group, but specify the dropped on window as the starting window in the tile group
                        self.Group.addWindow(this.identifier, newGroupId, stopTabTileResults.dropCoordinates, { startingWindowIdentifier: stopTabTileResults.droppedOnWindowIdentifier });
                    });
                }
                break;
            default:
                logger_1.default.system.error("stopTracking returned an unknown stoppedLocation result", stopTabTileResults);
        }
    }
    mergeBounds(bounds) {
        if (!bounds || !Number.isInteger(bounds.top)) {
            console.error("Invalid bounds", bounds);
            return; //TODO: figure out how this is even possible
        }
        //Without rounding, openfin becomes sad at fractional pixels (caused issues with autoarrange).
        let newBounds = {
            top: Math.round(bounds.top),
            left: Math.round(bounds.left),
            width: Math.round(bounds.width),
            height: Math.round(bounds.height)
        };
        newBounds.bottom = newBounds.top + newBounds.height;
        newBounds.right = newBounds.left + newBounds.width;
        //Old problem. Openfin uses these, we use the others. SAD!
        let defaultBounds = {
            defaultLeft: newBounds.left,
            defaultWidth: newBounds.width,
            defaultTop: newBounds.top,
            defaultHeight: newBounds.height
        };
        Object.assign(this.windowOptions, newBounds);
        Object.assign(this.windowOptions, defaultBounds);
        this.windowOptions.bounds = newBounds;
    }
    startMove(params) {
        logger_1.default.system.debug("BaseWindow.startMove", params);
        params = params || {};
        params.windowIdentifier = this.identifier; // add this window's identifier
        this.eventManager.trigger("bounds-change-start", Object.assign({}, this.windowOptions.bounds));
    }
    stopMove(params) {
        logger_1.default.system.debug("BaseWindow.stopMove", params);
        params = params || {};
        params.windowIdentifier = this.identifier; // add this window's identifier
        this.eventManager.trigger("bounds-change-end", Object.assign({ name: this.name, eventName: "bounds-change-end", dockedPosition: this.dockedPosition }, this.windowOptions.bounds));
    }
    /**
     * Given a field, this function retrieves component or window state. If no params are given you get the full state
     * @param {object} params
     * @param {string} params.stateVar A string containing "componentState" or "windowState"
     * @param {string} params.field field
     *  @param {array} params.fields fields
     * @param {function} cb Callback
     * @private
     **/
    getFSBLState(params, cb) {
        logger_1.default.system.debug("BaseWindow.getState", params);
        params.topic = WORKSPACE_CACHE_TOPIC;
        storageClient_1.default.get(params, (err, response) => {
            var data = response;
            if (params.stateVar === "componentState") {
                this.componentState = data;
            }
            else if (params.stateVar === "windowState") {
                this.windowState = data;
            }
            if (response && params.field) {
                cb(err, data[params.field]);
            }
            else if (params.fields) {
                var respObject = {};
                for (var i = 0; i < params.fields.length; i++) {
                    if (data[params.fields[i]]) {
                        respObject[params.fields[i]] = data[params.fields[i]];
                    }
                }
                return cb(null, respObject);
            }
            else if (response) {
                return cb(null, data);
            }
            else {
                logger_1.default.system.info("WindowClient:getComponentState:error, response, params", err, response, params);
                cb("Not found", response);
            }
        });
    }
    /**
     * Given params, will return the component state. Either the params to search for, or the entire state.
     *
     * @param {object} params
     * @param {string} params.field field
     *  @param {array} params.fields fields
     * @param {function} cb Callback
     */
    getComponentState(params, cb) {
        if (!params)
            params = {};
        if (params.fields && !Array.isArray(params.fields)) {
            params.fields = [params.fields];
        }
        params.key = this.componentKey;
        params.stateVar = "componentState";
        return this.getFSBLState(params, cb);
    }
    /**
     * Given params, will return the window state. Either the params to search for, or the entire state.
     *
     * @param {object} params
     * @param {string} params.field field
     *  @param {array} params.fields fields
     * @param {function} cb Callback
     */
    getWindowState(params, cb) {
        if (!params)
            params = {};
        if (params.fields && !Array.isArray(params.fields)) {
            params.fields = [params.fields];
        }
        params.key = this.windowKey;
        params.stateVar = "windowState";
        return this.getFSBLState(params, cb);
    }
    /**
     * Checks to see if this save makes the workspace 'dirty'. We use this when deciding whether to prompt the user to save their workspace.
     *
     * @param {object} params
     * @param {string} params.field field
     * @param {string} params.windowName windowName
     * @param {function} cb Callback
     * @private
     */
    setWorkspaceDirtyIfRequired(newState, oldState) {
        /**
         * We clone the value below because:
         *
         * let's say that the user passes this in:
         * {value: undefined,
         * anotherValue: true}.
         *
         * When that is persisted to localStorage, it'll come back as {anotherValue: true}. Those two values are different. So we stringify the value coming in to compare it to what was saved.
         */
        let cleanValue = JSON.parse(JSON.stringify(newState));
        if (!lodash_1.isEqual(oldState, cleanValue)) {
            logger_1.default.system.debug("APPLICATION LIFECYCLE:  Setting Active Workspace Dirty: Saved state does not match current component state");
            routerClientInstance_1.default.transmit(constants.WORKSPACE.API_CHANNELS.SET_ACTIVEWORKSPACE_DIRTY, { windowName: this.windowName });
        }
    }
    /**
     * Given params, will set the component state. Any fields included will be added to the state
     *
     * @param {object} params
     * @param {string} params.field field
     *  @param {array} params.fields fields
     * @param {function} cb Callback
     */
    setComponentState(params, cb) {
        if (!params)
            params = {};
        if (params.fields && !Array.isArray(params.fields)) {
            params.fields = [params.fields];
        }
        params.key = this.componentKey;
        params.stateVar = "componentState";
        return this.setFSBLState(params, cb);
    }
    /**
     * Given params, will set the window state. Any fields included will be added to the state
     *
     * @param {object} params
     * @param {string} params.field field
     *  @param {array} params.fields fields
     * @param {function} cb Callback
     */
    setWindowState(params, cb) {
        if (!params)
            params = {};
        if (params.fields && !Array.isArray(params.fields)) {
            params.fields = [params.fields];
        }
        params.key = this.windowKey;
        params.stateVar = "windowState";
        return this.setFSBLState(params, cb);
    }
    saveWindowState(state) {
        this.windowState = state;
    }
    saveCompleteWindowState(state, cb = Function.prototype) {
        if (!state)
            return cb("No State Provided");
        if (state.customData && state.customData.manifest) {
            delete state.customData.manifest;
        }
        let params = {
            topic: WORKSPACE_CACHE_TOPIC,
            key: this.windowKey,
            value: state
        };
        storageClient_1.default.save(params, cb);
    }
    deleteCompleteWindowState(cb) {
        let params = {
            topic: WORKSPACE_CACHE_TOPIC,
            key: this.windowKey
        };
        storageClient_1.default.delete(params, cb);
    }
    /**
     * Given a field, this function sets and persists app state.
     * @param {object} params
     * @param {string} [params.field] field
     * @param {array} [params.fields] fields
     * @param {function=} cb Callback
     **/
    setFSBLState(params, cb) {
        var getParams = {
            key: params.key,
            stateVar: params.stateVar
        };
        if (!getParams.key) {
            if (getParams.stateVar === "componentState") {
                getParams.key = this.componentKey;
            }
            else if (getParams.stateVar === "windowState") {
                getParams.key = this.windowKey;
            }
        }
        this.getFSBLState(getParams, () => {
            /* Sidd Notes: We are always comparing the entire saved state to see if things have changed instead of just the new fields - that is expensive. */
            logger_1.default.system.debug("BaseWindow.getState", params);
            params.topic = WORKSPACE_CACHE_TOPIC;
            let localComponentState = merge(this[params.stateVar], {});
            let fields = params.fields;
            if (params.field) {
                fields = [{
                        field: params.field,
                        value: params.value
                    }];
            }
            for (let i = 0; i < fields.length; i++) {
                let field = fields[i];
                if (!field.field || typeof field.value == "undefined") {
                    continue;
                }
                localComponentState[field.field] = field.value;
            }
            this.setWorkspaceDirtyIfRequired(localComponentState, this[params.stateVar]);
            params.value = localComponentState;
            logger_1.default.system.debug("COMPONENT LIFECYCLE: SAVING " + params.stateVar + ":", localComponentState);
            storageClient_1.default.save(params, (err, response) => {
                if (err)
                    return cb(err);
                this[params.stateVar] = localComponentState;
                if (cb) {
                    cb(err, response);
                }
            });
        });
    }
    /**
     *Cancels startTabTileMonitoring. Example use is a user "excapes" out of a drag operation.
     *
     * @param {object} params for future use
     * @memberof BaseWindow
     */
    cancelTabTileMonitoring(params) {
        logger_1.default.system.debug("BaseWindow.cancelTabTileMonitoring", params);
        routerClientInstance_1.default.transmit("TabTile.cancelTabTile", { params });
    }
    /**
     * Return the parent window's wrapper (e.g. StackedWindow).
     *
     */
    getParent() {
        return this.parentWindow;
    }
    /**
     * Sets the parent window (e.g. stackedWindow) and emits "setParent" event to window listeners.
     *
     * @param {object} stackedWindowIdentifier identifer of window to set as parent (e.g. stackedWindowIdentifier).
     *
     */
    setParent(windowIdentifier, cb = Function.prototype) {
        if (this.parentWindow && (this.parentWindow.name === windowIdentifier.windowName)) {
            logger_1.default.system.debug("BaseWindow.setParent already set", windowIdentifier);
            cb(null, windowIdentifier);
        }
        else {
            logger_1.default.system.debug("BaseWindow.setParent", windowIdentifier);
            // set up store listener to change if
            BaseWindow.getInstance(windowIdentifier, (err, wrappedStackedWindow) => {
                if (!err) {
                    logger_1.default.system.debug("BaseWindow.setParent wrap success", windowIdentifier);
                    console.debug("BaseWindow.setParent wrap success", this, wrappedStackedWindow);
                    this.parentWindow = wrappedStackedWindow;
                    this.eventManager.trigger("parent-set", { parentName: this.parentWindow.name });
                }
                else {
                    logger_1.default.system.error("BaseWindow.setParent error", err);
                }
                cb(err, windowIdentifier);
            });
        }
    }
    /**
     * Clears the parent reference and emits "clearParent" event to window listeners. Used only internally.
     *
     * @private
     *
     */
    clearParent() {
        logger_1.default.system.debug("BaseWindow.clearParent");
        this.parentWindow = null;
        this.emit("clearParent", this.parentWindow);
    }
    setTitle(title) {
        logger_1.default.system.debug("Title change", title);
        routerClientInstance_1.default.publish(this.TITLE_CHANGED_CHANNEL, title);
    }
    //public Window functions - needed to handle events properly e.g. for close.
    close(params = {}, callback) {
        this.queryWindowService("close", params, callback);
    }
    _animate(params, cb) {
        if (typeof params === "function") {
            cb = params;
            params = null;
        }
        cb("Method not implemented for window", { shouldContinue: true });
    }
}
BaseWindow.WINDOWSTATE = constants.WINDOWSTATE;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The window wrappers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Async wrap. Given a name/windowName, it will query the launcher for information required to wrap the window. Then it will return an object that can be operated on. Also this creates a cache of all wrapped windows for performance. Our clients wrap the same window often and this was causing excessive messaging to the store and degrading performance.
 * @param {*} params Need only name in most cases. For service and other cases where the window is not part of what the launcher considers active windows, name and uuid are required
 * @param {*} cb
 */
BaseWindow.wrap = BaseWindow.getInstance;
BaseWindow._windowReady = function (windowName) {
    const promiseResolver = async (resolve) => {
        if (windowName.toLowerCase().includes("finsemble") || windowName.toLowerCase().includes("service")) {
            resolve();
        }
        else { // wait only for components managed by the window service
            logger_1.default.system.debug(`windowServiceReady: ${windowName} waiting`);
            let subscribeId = routerClientInstance_1.default.subscribe("Finsemble.Component.State." + windowName, (err, response) => {
                let state = response.data.state;
                logger_1.default.system.debug(`windowServiceReady: ${windowName} state change: ${state}`);
                switch (state) {
                    case "ready":
                    case "reloading":
                    case "closing": // if ready state or any state beyond
                        logger_1.default.system.debug(`windowServiceReady: ${windowName} ${state}`);
                        routerClientInstance_1.default.unsubscribe(subscribeId);
                        resolve();
                        break;
                    default:
                        logger_1.default.system.debug(`windowServiceReady default: ${windowName} ${state}`);
                }
            });
        }
    };
    return new Promise(promiseResolver);
};
exports.BaseWindow = BaseWindow;


/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {

const EDGES = ["top", "left", "bottom", "right"];
/* harmony export (immutable) */ __webpack_exports__["EDGES"] = EDGES;

const CORNERS = ["topLeft", "topRight", "bottomLeft", "bottomRight"];
/* harmony export (immutable) */ __webpack_exports__["CORNERS"] = CORNERS;

const MINIMUM_HEIGHT = 32;
/* harmony export (immutable) */ __webpack_exports__["MINIMUM_HEIGHT"] = MINIMUM_HEIGHT;

const MINIMUM_WIDTH = 98;
/* harmony export (immutable) */ __webpack_exports__["MINIMUM_WIDTH"] = MINIMUM_WIDTH;

const OPPOSITE_EDGE_MAP = {
	left: "right",
	right: "left",
	top: "bottom",
	bottom: "top",
	topLeft: "bottomRight",
	topRight: "bottomLeft",
	bottomLeft: "topRight",
	bottomRight: "topLeft"
};
/* harmony export (immutable) */ __webpack_exports__["OPPOSITE_EDGE_MAP"] = OPPOSITE_EDGE_MAP;

const SPLIT_HANDLE_MAP = {
	bottomLeft: ["bottom", "left"],
	bottomRight: ["bottom", "right"],
	leftBottom: ["left", "bottom"],
	rightBottom: ["right", "bottom"],
	topRight: ["top", "right"],
	topLeft: ["top", "left"],
	rightTop: ["right", "top"],
	leftTop: ["left", "top"],
	left: ["left"],
	right: ["right"],
	top: ["top"],
	bottom: ["bottom"]
};
/* harmony export (immutable) */ __webpack_exports__["SPLIT_HANDLE_MAP"] = SPLIT_HANDLE_MAP;


 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\constants.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\constants.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 99 */,
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/** Singleton of the Logger class shared among all instances of ObjectPool
 * @TODO Refactor to instance member of class.
 */
let Logger;
class ObjectPool {
    constructor(name, dependencies) {
        if (dependencies) {
            Logger = dependencies.Logger;
        }
        else {
            throw new Error("ObjectPool class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.");
        }
        this.objects = {};
        this.poolName = name;
    }
    get(name, throwError = true) {
        var result;
        if (!this.objects.hasOwnProperty(name)) {
            if (throwError && name && !(name.toLowerCase().includes("finsemble") || name.toLowerCase().includes("service"))) {
                Logger.system.warn(`${this.poolName} pool.get failed for ${name}`);
            }
        }
        else {
            result = this.objects[name];
        }
        return result;
    }
    remove(name) {
        Logger.system.debug(`${this.poolName} pool.remove for ${name}`);
        if (!this.objects.hasOwnProperty(name)) {
            Logger.system.warn(`${this.poolName} pool.remove operating on non-existant value for ${name}`);
        }
        delete this.objects[name];
    }
    add(name, obj) {
        Logger.system.debug(`${this.poolName} pool.add for ${name}`);
        if (this.objects.hasOwnProperty(name)) {
            Logger.system.warn(`${this.poolName} pool.add overwritting existing value for ${name}`);
        }
        this.objects[name] = obj;
    }
    *iterator() {
        for (let name in this.objects) {
            let obj = this.get(name);
            yield obj;
        }
    }
    getAll() {
        return this.objects;
    }
}
exports.ObjectPool = ObjectPool;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var v1 = __webpack_require__(40);
var v4 = __webpack_require__(93);

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
    return Array.isArray(val) ? [] : {}
}

function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true;
    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
}

function defaultArrayMerge(target, source, optionsArgument) {
    var destination = target.slice();
    source.forEach(function(e, i) {
        if (typeof destination[i] === 'undefined') {
            destination[i] = cloneIfNecessary(e, optionsArgument);
        } else if (isMergeableObject(e)) {
            destination[i] = deepmerge(target[i], e, optionsArgument);
        } else if (target.indexOf(e) === -1) {
            destination.push(cloneIfNecessary(e, optionsArgument));
        }
    });
    return destination
}

function mergeObject(target, source, optionsArgument) {
    var destination = {};
    if (isMergeableObject(target)) {
        Object.keys(target).forEach(function(key) {
            destination[key] = cloneIfNecessary(target[key], optionsArgument);
        });
    }
    Object.keys(source).forEach(function(key) {
        if (!isMergeableObject(source[key]) || !target[key]) {
            destination[key] = cloneIfNecessary(source[key], optionsArgument);
        } else {
            destination[key] = deepmerge(target[key], source[key], optionsArgument);
        }
    });
    return destination
}

function deepmerge(target, source, optionsArgument) {
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

    if (!sourceAndTargetTypesMatch) {
        return cloneIfNecessary(source, optionsArgument)
    } else if (sourceIsArray) {
        var arrayMerge = options.arrayMerge || defaultArrayMerge;
        return arrayMerge(target, source, optionsArgument)
    } else {
        return mergeObject(target, source, optionsArgument)
    }
}

deepmerge.all = function deepmergeAll(array, optionsArgument) {
    if (!Array.isArray(array) || array.length < 2) {
        throw new Error('first argument should be an array with at least two elements')
    }

    // we are sure there are at least 2 values, so it is safe to have no initial value
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, optionsArgument)
    })
};

var deepmerge_1 = deepmerge;

module.exports = deepmerge_1;


/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_async__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_async___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_async__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__constants__);


/** Singleton of the Logger class shared among all instances of ObjectPool
 * @TODO Refactor to instance member of class.
 */
let Logger;
const groupStates = {
	NORMAL: 0,
	MINIMIZING: 1,
	MINIMIZED: 2,
	RESTORING: 3
};
class WindowGroup {
	/**
  *
  * @param {object} params Params
  * @param {string} params.name name of the group
  * @param {object} params.windows array of windows in the group
  * @param {object} dependencies Depdenency object that provides a Logger.
  * @param {Logger} dependencies.Logger
  */
	constructor(params, dependencies) {
		Logger = dependencies.Logger;
		this.name = params.name;
		this.groupState = groupStates.NORMAL;
		this.GROUPSTATES = groupStates;
		this.isAlwaysOnTop = false;
		if (params.windows) {
			this.windows = params.windows;
		} else {
			this.windows = {};
		}
	}

	destroy() {
		delete this.windows;
		delete this.name;
	}

	setWindows(windows) {
		this.windows = windows;
	}

	getWindows() {
		return this.windows;
	}

	addWindow(win) {
		Logger.system.debug("windowGroup.addWindow", win.name);
		this.windows[win.name] = win;
		if (this.isMovable) win.alwaysOnTop(this.isAlwaysOnTop);
	}

	/**
  *
  * @param {*} arr either a window name or window identifier or a list of window names or identifiers
  */
	removeWindows(arr, cb = Function.prototype) {
		var windowName;
		if (!Array.isArray(arr)) {
			arr = [arr];
		}
		var self = this;
		arr.forEach(function (win) {
			if (typeof win === "string" || win instanceof String) {
				windowName = win;
			} else {
				windowName = win.windowName || win.name;
			}
			Logger.system.debug("windowGroup.removeWindows", windowName);

			if (this.windows[windowName]) {
				delete self.windows[windowName];
			} else {
				return;
			}
		}, this);
		cb();
	}

	/**
  *
  * @param {*} win either a window name or window identifier
  */
	getWindow(win) {
		if (typeof win === "string" || win instanceof String) {
			//we have a window name
			return this.windows[win];
		} // we have an identifier
		if (win && (win.windowName || win.name)) {
			return this.windows[win.windowName || win.name];
		}
		return null;
	}

	getWindowNames() {
		let names = [];
		for (let name in this.windows) {
			names.push(name);
		}
		return names;
	}

	addWindows(arr) {
		if (!Array.isArray(arr)) {
			arr = [arr];
		}
		var self = this;
		arr.forEach(function (win) {
			Logger.system.debug("windowGroup.addWindows", win.name);

			self.windows[win.name] = win;
			if (this.isMovable) win.alwaysOnTop(this.isAlwaysOnTop);
		}, this);
	}

	getWindowArray() {
		let arr = [];
		for (let windowName in this.windows) {
			arr.push(this.windows[windowName]);
		}
		return arr;
	}

	minimizeAll() {
		if (this.groupState == groupStates.RESTORING) {
			this.interruptRestore = true;
			this.groupState = groupStates.NORMAL;
		}
		if (this.groupState !== groupStates.NORMAL) return;
		this.groupState = groupStates.MINIMIZING;
		for (let windowName in this.windows) {
			let win = this.windows[windowName];
			if (win.windowState != __WEBPACK_IMPORTED_MODULE_1__constants__["WINDOWSTATE"].MINIMIZED) win.minimize();
		}
		this.groupState = groupStates.MINIMIZED;
		this.interruptRestore = false;
	}

	minimize(params) {
		if (!params) {
			return this.minimizeAll();
		}
		let { windowList, componentType } = params;
		if (componentType) windowList = this.findAllByComponentType(componentType);

		for (let w of windowList) {
			let win;
			if (!(typeof w === "string" || w instanceof String)) {
				win = this.getWindow(w.windowName || w.name);
			} else {
				win = this.getWindow(w);
			}
			if (win && win.windowState != __WEBPACK_IMPORTED_MODULE_1__constants__["WINDOWSTATE"].MINIMIZED) {
				win.minimize();
			}
		}
	}

	restoreAll(cb = Function.prototype) {
		if (this.groupState !== groupStates.MINIMIZED) return cb();
		var self = this;
		this.groupState = groupStates.RESTORING;
		function restoreWindow(windowName, done) {
			if (self.interruptRestore) return done("restore interrupted");
			let win = self.windows[windowName];
			if (win.restore) {
				if (win.windowState != __WEBPACK_IMPORTED_MODULE_1__constants__["WINDOWSTATE"].NORMAL) self.windows[windowName].restore({}, done);else done();
			} else {
				Logger.system.error(windowName + " does not implment restore");
				done();
			}
		}
		__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_async__["forEach"])(Object.keys(this.windows), restoreWindow, function (err, data) {
			self.interruptRestore = false;
			if (!err) {
				self.groupState = groupStates.NORMAL;
			}
			cb(err, data);
		});
	}
	//takes an array of window names.
	restore(params, cb) {
		let { windowList } = params;
		var self = this;
		function restoreWindow(windowName, done) {
			let win = self.windows[windowName];
			if (win.restore) {
				self.windows[windowName].restore({}, done);
			} else {
				Logger.system.error(windowName + " does not implment restore");
				done();
			}
		}
		__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_async__["forEach"])(windowList, restoreWindow, cb);
	}

	// Bring all windoes to top. Also sets the state of the group to always on top and new windows added to the group inherit the state of thw window
	allAlwaysOnTop(alwaysOnTop) {
		this.isAlwaysOnTop = alwaysOnTop;
		this.alwaysOnTop({ windowList: Object.keys(this.windows), restoreWindows: true, alwaysOnTop: alwaysOnTop });
	}

	// Set specific windows to top. Generally should call allAlwaysOnTop
	alwaysOnTop(params) {
		if (!params || params && Object.keys(params).length === 0) {
			params = { windowList: Object.keys(this.windows), restoreWindows: true };
		}
		let { windowList, componentType } = params;
		if (windowList && typeof windowList[0] !== "string") {
			windowList = windowList.map(win => win.windowName);
		}
		if (componentType) windowList = this.findAllByComponentType(componentType);
		var self = this;
		if (!windowList) windowList = Object.keys(this.windows);
		for (let w in windowList) {
			let win;
			if (Array.isArray(windowList)) w = windowList[w];

			if (!(typeof w === "string" || w instanceof String)) {
				win = self.getWindow(w.windowName || w.name);
			} else {
				win = self.getWindow(w);
			}
			if (win) {
				win.alwaysOnTop(params.alwaysOnTop);
			}
		}
	}

	/**
  * Brings a group of windows to the front (BTF). In other words, puts those windows on top of any other windows so that they can be seen
  * @param {object} params
  * @param {bool=true} params.restoreWindows If true then windows will attempt to be restored (unminimized) before being brought to front
  * @param {array} params.windowList The list of windows to BTF. Defaults to the windows that are in this window group. This can be a list of window names, or a list of actual window instances.
  * @param {string} params.componentType Optionally provide a componentType to BTF only those windows of that type in the list of windows.
  */
	bringToFront(params, cb = Function.prototype) {
		var self = this;
		if (!params) params = {};
		if (typeof params.restoreWindows == "undefined") params.restoreWindows = true;

		// TODO, [terry] this "windowList" logic is copy and pasted many times in windowGroup.js. It should be in a helper function.
		let { windowList, componentType } = params;
		// Determine if the windowList is a list of window names, or a list of actual windows (in which case we extract the name)
		if (windowList && typeof windowList[0] !== "string") {
			windowList = windowList.map(win => win.windowName);
		}

		// Get all windows *in this group* of this component type, then convert them into an array of strings to be passed into the other group functions.
		if (componentType) {
			windowList = [];
			let windows = this.findAllByComponentType(componentType);
			windows.forEach(win => {
				if (win && win.name) {
					windowList.push(win.name);
				}
			});
		}

		// Default to the windows in this group, actually the most common case
		if (!windowList) windowList = Object.keys(this.windows);

		function doBTF() {
			// TODO, [terry] this chunk of code is repeated three times in windowGroup.js. It should be abstracted away
			// TODO, [sidd] this code now uses async, previously was not using using the callback properly. Make all group functions do this

			__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_async__["each"])(windowList, (w, callback) => {
				let win;
				//if (Array.isArray(windowList)) w = windowList[w];

				if (!(typeof w === "string" || w instanceof String)) {
					win = self.getWindow(w.windowName || w.name);
				} else {
					win = self.getWindow(w);
				}
				if (win) {
					win.bringToFront(callback);
				} else {
					callback();
				}
			}, () => {
				cb();
			});
		}

		if (params.restoreWindows) {
			if (typeof windowList[0] !== "string") {
				windowList = Object.keys(windowList);
			}
			this.restore({ windowList }, doBTF);
		} else {
			doBTF();
		}
	}

	hyperFocus(params) {
		let windowList = params.windowList;
		// If we got a list of identifiers, convert to names
		for (let w in windowList) {
			let win = windowList[w];
			if (!(typeof win === "string" || win instanceof String)) {
				windowList[w] = win.windowName || win.name;
			}
		}

		for (let windowName in this.windows) {
			if (!windowList.includes(windowName)) {
				this.windows[windowName].minimize();
			} else {
				this.windows[windowName].restore(() => {
					this.windows[windowName].bringToFront();
				});
			}
		}
	}

	findAllByComponentType(componentType) {
		var windowList = [];
		for (let windowName in this.windows) {
			let theWindow = this.windows[windowName];
			let descriptor = theWindow.windowDescriptor;
			if (componentType === (descriptor.component ? descriptor.component.type : descriptor.customData.component.type)) {
				//TODO - figure out why this is different in some cases
				windowList.push(this.windows[windowName]);
			}
		}
		return windowList;
	}

}
/* harmony export (immutable) */ __webpack_exports__["a"] = WindowGroup;


 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\windowGroup.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\common\\window\\windowGroup.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 104 */,
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseWindow__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseWindow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__BaseWindow__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__openfinWindowWrapper__ = __webpack_require__(218);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__externalWindowWrapper__ = __webpack_require__(217);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__stackedWindowWrapper__ = __webpack_require__(219);





__WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].registerType("OpenFinWindow", __WEBPACK_IMPORTED_MODULE_1__openfinWindowWrapper__["a" /* default */]);
__WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].registerType("NativeWindow", __WEBPACK_IMPORTED_MODULE_2__externalWindowWrapper__["a" /* default */]);
__WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].registerType("StackedWindow", __WEBPACK_IMPORTED_MODULE_3__stackedWindowWrapper__["a" /* default */]);

const FinsembleWindowInternal = __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"];
/* harmony export (immutable) */ __webpack_exports__["FinsembleWindowInternal"] = FinsembleWindowInternal;


 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\WindowAbstractions\\FinsembleWindowInternal.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\WindowAbstractions\\FinsembleWindowInternal.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
//tslint:disable
var thisApp, manifest, finWindow;
/**
 * This file receives SpawnRequests from a master `SplinterAgent`.
 */
const routerClientInstance_1 = __webpack_require__(6);
routerClientInstance_1.default.onReady(onRouterReady);
const logger_1 = __webpack_require__(2);
logger_1.default.start();
logger_1.default.system.debug("SpltinerAgentSlave loaded.");
const system_1 = __webpack_require__(4);
function onSetTitle(err, message) {
    document.title = message.data.title;
}
function onRouterReady() {
    thisApp = system_1.System.Application.getCurrent();
    finWindow = system_1.System.Window.getCurrent();
    //Listen for close, unregister from the logger.
    finWindow.addEventListener("close-requested", () => {
        logger_1.default.unregisterClient({ deleteFromPersistence: true });
        finWindow.close(true);
    });
    logger_1.default.system.debug("SpltinerAgentSlave ready.");
    routerClientInstance_1.default.addListener(`${thisApp.uuid}.spawn`, onSpawnRequest);
    routerClientInstance_1.default.addListener(`${thisApp.uuid}.setTitle`, onSetTitle);
    finWindow.getOptions((opts) => {
        manifest = opts.customData.manifest;
        routerClientInstance_1.default.transmit(`${thisApp.window.name}.onSpawned`, {});
    });
    setInterval(function () {
        routerClientInstance_1.default.transmit("Finsemble.heartbeat", { type: "agent", windowName: system_1.System.Window.getCurrent().name });
    }, 5000);
}
/**
 * Spawns a new window by interfacing with the underlying container (OpenFin or Electron).
 *
 * @param err
 * @param message Object containing the windowDescriptor in its data property.
 * @param manifestToUse Leave undefined in OpenFin environments (i.e, when splintering
 * is turned on). When splintering is short-circuited (i.e in Electron), you must pass in the correct manifest.
 */
function onSpawnRequest(err, message, manifestToUse = manifest) {
    logger_1.default.system.debug("SplinterAgentSlave.onSpawnRequest.", message.data.windowDescriptor);
    let descriptor = message.data.windowDescriptor;
    if (!descriptor) {
        logger_1.default.system.error("SplinterAgentSlave.onSpawnRequest ERROR: No windowDescriptor", message);
        return;
    }
    if (descriptor.customData) {
        manifestToUse.finsemble.FinsembleUUID = descriptor.customData.manifest.finsemble.FinsembleUUID; // copy FinsembleUUID from incoming descriptor to manifest
        descriptor.customData.manifest = manifestToUse;
    }
    else {
        descriptor.customData = { manifest: manifestToUse };
    }
    new system_1.System.Window(descriptor, function () {
        logger_1.default.system.debug(`SplinterAgentSlave.onSpawnRequest: Window successfully spawned. WindowName: ${descriptor.name}`, descriptor);
    }, function (err) {
        logger_1.default.system.error("SplinterAgentSlave.onSpawnRequest ERROR", err);
    });
}
exports.onSpawnRequest = onSpawnRequest;


/***/ }),
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const ObjectPool_1 = __webpack_require__(100);
class WindowPool extends ObjectPool_1.ObjectPool {
    *iterator() {
        for (let windowName in this.objects) {
            let win = this.get(windowName);
            if (!win.isMinimized && !win.isHidden) {
                yield win;
            }
        }
    }
}
exports.WindowPool = WindowPool;


/***/ }),
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_window_windowGroup__ = __webpack_require__(103);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__dockableBox__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constants__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__boxMath__ = __webpack_require__(92);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };





/** Singleton of the Logger class shared among all instances of DockableGroup
 * @TODO Refactor to instance member of class.
 */
let Logger;
const clone = function (obj) {
	//This has been tested a good amount. Previous to this commit we were using a mix of deepmerge and JSON.parse(JSON.stringify()).
	//Trying lodash.deepclone made my tests take 2-3s.
	//JSON.parse everywhere made them take ~ 1s.
	//Using JSON.parse on arrays and deep merge on objects makes them take 7-900ms.
	if (Array.isArray(obj)) {
		return obj.slice();
	}
	try {
		return JSON.parse(JSON.stringify(obj));
	} catch (e) {
		Logger.system.error("clone error", e);
		return e;
	}
};

class DockableGroup extends __WEBPACK_IMPORTED_MODULE_0__common_window_windowGroup__["a" /* WindowGroup */] {
	/**
  *
  * @param {*} config Config for the group. See WindowGroup for more.
  * @param {*} dependencies Dependency object that provides a Logger.
  */
	constructor(config, dependencies) {
		super(config, dependencies);
		if (dependencies) {
			Logger = dependencies.Logger;
		} else {
			throw new Error("DockableGroup class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.");
		}
		this.setMinimums(config);
		this.name = config.name;
		this.isMovable = typeof config.isMovable !== "undefined" ? config.isMovable : false;
		this.windowBoundingBox = {
			min: {
				x: 0,
				y: 0
			},
			max: {
				x: 0,
				y: 0
			}
		};

		//Number of time's we've tried to fill a particular time. It's limited to 20 attempts to prevent infinite loops. Logs are emitted if we get into that state. Better to throw a warning than an infinite loop.
		this.fillAttempts = 0;
		// Add all dockablebox methods to this
		this.dockableBox = new __WEBPACK_IMPORTED_MODULE_1__dockableBox__["a" /* default */]();
		this.inheritDockableBox();
		this.removeWindow = this.removeWindow.bind(this);
	}

	inheritDockableBox() {
		var self = this;
		var dockableBoxMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(this.dockableBox)).filter(function (p) {
			if (p != "constructor") {
				return typeof self.dockableBox[p] === "function";
			}
			return false;
		});
		for (let i = 0; i < dockableBoxMethods.length; i++) {
			let methodName = dockableBoxMethods[i];
			if (!this[methodName]) {
				this[methodName] = function () {
					return self.dockableBox[methodName].call(self, ...arguments);
				};
			}
		}
	}
	addWindow(win) {
		if (Object.keys(this.windows).length === 0) {
			this.windowBoundingBox = clone(win.windowBoundingBox);
		}
		if (this.isMovable) win.win._updateOptions({
			options: {
				"taskbarIconGroup": this.name
			}
		});
		super.addWindows(win);
		this.updateBounds();
		if (this.isMovable) this.bringToFront({ restoreWindows: false });
	}

	updateBounds() {
		let groupBounds = this.calculateOuterBounds();
		if (!groupBounds) {
			return;
		}
		this.windowBoundingBox = groupBounds;
		this.setBuffer();
		this.setBounds({
			left: groupBounds.min.x,
			top: groupBounds.min.y,
			right: groupBounds.max.x,
			bottom: groupBounds.max.y
		});
	}

	saveIndividualWindowStates() {
		let windowList = this.getWindows();
		for (let windowName in windowList) {
			let win = this.getWindow(windowName);
			win.win.saveCompleteWindowState();
		}
	}

	startMove() {
		let windowList = this.getWindows();
		for (let windowName in windowList) {
			let win = this.getWindow(windowName);
			win.win.startMove();
		}
	}
	stopMove() {
		let windowList = this.getWindows();
		for (let windowName in windowList) {
			let win = this.getWindow(windowName);
			win.win.stopMove();
		}
	}
	getWindowsOnEdges() {
		let windowsOnSegment = {};
		let windowList = this.getWindows();
		for (let windowName in windowList) {
			let win = this.getWindow(windowName);
			for (let i = 0; i < __WEBPACK_IMPORTED_MODULE_2__constants__["EDGES"].length; i++) {
				let edge = __WEBPACK_IMPORTED_MODULE_2__constants__["EDGES"][i];
				if (win[edge] === this[edge]) {
					windowsOnSegment[win.name] = win;
				}
			}
		}
		return windowsOnSegment;
	}

	isARectangle() {
		this.updateBounds();
		let windows = this.getWindows();
		let groupArea = this.width * this.height;
		let windowArea = 0;
		for (let windowName in windows) {
			let win = this.getWindow(windowName);
			windowArea += win.width * win.height;
		}
		return groupArea === windowArea;
	}

	/**
  * When you move a group of windows left to right, the anchor algo finds the left-most window, and then sorts all of the windows on how close they are to that window. This function just finds the approrpiate anchor for that move.
  * @param {*} movingDirection
  */
	getMoveAnchor(movingDirection) {

		const DIMENSIONAL_MAP = {
			LeftTop: {
				primaryDimension: "bottom",
				secondaryDimension: "right"
			},
			LeftBottom: {
				primaryDimension: "top",
				secondaryDimension: "right"
			},
			TopLeft: {
				primaryDimension: "right",
				secondaryDimension: "bottom"
			},
			BottomLeft: {
				primaryDimension: "right",
				secondaryDimension: "top"
			},
			RightTop: {
				primaryDimension: "bottom",
				secondaryDimension: "left"
			},
			RightBottom: {
				primaryDimension: "top",
				secondaryDimension: "left"
			},
			TopRight: {
				primaryDimension: "left",
				secondaryDimension: "bottom"
			},
			BottomRight: {
				primaryDimension: "left",
				secondaryDimension: "top"
			},
			Right: {
				primaryDimension: "left",
				secondaryDimension: "top"
			},
			Left: {
				primaryDimension: "right",
				secondaryDimension: "top"
			},
			Top: {
				primaryDimension: "top",
				secondaryDimension: "left"
			},
			Bottom: {
				primaryDimension: "bottom",
				secondaryDimension: "left"
			}
		};
		//Had this happen but not reliably. Possible that it fires when the window isn't moving at all and the direction isn't set. Stopgap.
		if (!DIMENSIONAL_MAP[movingDirection]) {
			console.debug(`"${movingDirection}" is not a valid argument. Valid options are ${Object.keys(DIMENSIONAL_MAP).join(", ")}.`);
			return "NotMoving";
		}

		let { primaryDimension, secondaryDimension } = DIMENSIONAL_MAP[movingDirection];
		let windowArray = this.getWindowArray();
		//Sorts on the primary dimension; if they're tied, it sorts on the secondary dimension.
		return windowArray.sort((a, b) => {
			let aDim = a[primaryDimension],
			    bDim = b[primaryDimension],
			    comparingDimension = primaryDimension;
			if (aDim === bDim) {
				aDim = a[secondaryDimension];
				bDim = b[secondaryDimension];
				comparingDimension = secondaryDimension;
			}

			if (comparingDimension === "top" || comparingDimension === "left") {
				//Will order the array in ascending order.
				//In OF's virtual screen, the top-left is the 0,0 point (though it could be (-2000, 2000), or whatever). The higher the top or left, the further to the right the window is. The higher the top number, the closer to the bottom of the screen the window is.
				return aDim - bDim;
			}
			//sort the array in descending order.
			//The higher the right value, the closer the window is to the right of the screen. The higher the bottom number, the closer it is to the toolbar/top of the monitor.
			return bDim - aDim;
		})[0];
	}

	/**
  * Used for resize. Grabs the windows on the opposite side of the resize handle.
 * @function {function name}
 * @param  {type} handle {description}
 * @return {type} {description}
 */
	getAnchors(handle) {
		let edges = {
			top: "bottom",
			right: "left",
			bottom: "top",
			left: "right"
		};

		let edgeArray = handle.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		let anchorNames = [];
		let self = this;

		for (let windowName in this.windows) {
			if (anchorNames.includes(windowName)) {
				continue;
			}
			let win = this.windows[windowName];
			let isAnchor = true;
			edgeArray.forEach(requestedEdge => {
				let edge = edges[requestedEdge];
				if (win[edge] !== self[edge]) {
					isAnchor = false;
				}
			});
			if (isAnchor) {
				anchorNames.push(windowName);
			}
		}

		return anchorNames;
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	calculateOuterBounds() {
		let groupBounds = null;

		for (let windowName in this.windows) {
			let win = this.windows[windowName];
			// sometimes we get into a state where right and bottom are not set so groups break regtangularity.
			if (!win.right) win.right = win.left + win.width;
			if (!win.bottom) win.bottom = win.top + win.height;
			if (!groupBounds) {
				groupBounds = {
					min: {
						x: win.left,
						y: win.top
					},
					max: {
						x: win.right,
						y: win.bottom
					}
				};
				continue;
			}

			//Did some testing and this is much faster than ternary operators.
			if (win.left < groupBounds.min.x) {
				groupBounds.min.x = win.left;
			}

			if (win.top < groupBounds.min.y) {
				groupBounds.min.y = win.top;
			}

			if (win.bottom > groupBounds.max.y) {
				groupBounds.max.y = win.bottom;
			}

			if (win.right > groupBounds.max.x) {
				groupBounds.max.x = win.right;
			}
		}
		return groupBounds;
	}

	/**
 * @function {function name}
 * @param  {type} name {description}
 * @return {type} {description}
 */
	removeWindow(name) {
		let win = this.getWindow(name);
		if (this.isMovable) win.win._updateOptions({
			options: {
				"taskbarIconGroup": win.win.uuid
			}
		});
		super.removeWindows(name);
		this.updateBounds();
	}

	/**
 * @function {function name}
 * @param  {type} bounds {description}
 * @return {type} {description}
 */
	getDelta(bounds) {
		return {
			left: bounds.left - this.left,
			right: bounds.right - this.right,
			height: bounds.height - this.height,
			width: bounds.width - this.width
		};
	}

	/**
 * @function {function name}
 * @param  {type} bounds {description}
 * @return {type} {description}
 */
	setBounds(bounds) {
		this.left = bounds.left;
		this.right = bounds.right;
		this.bottom = bounds.bottom;
		this.top = bounds.top;
		this.width = bounds.right - bounds.left;
		this.height = bounds.bottom - bounds.top;
		this.vertices = this.getCornerObject(bounds);
	}
	//Leaving here in case we discover bugs in the new scale.
	deprecatedScale(newBounds, anchor, calculator, cb) {
		if (typeof newBounds.right === "undefined") {
			newBounds.right = newBounds.left + newBounds.width;
			newBounds.bottom = newBounds.top + newBounds.height;
		}
		var splitHandle = anchor.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		let groupIter = calculator.groupWindowIterator(this, splitHandle[0]);
		var movements = {};
		for (let win of groupIter) {
			win.onGroupEdge = {};
			win.resizeHandle = splitHandle[0];
			["top", "right", "left", "bottom"].forEach(handle => {
				if (win[handle] === this[handle]) {
					win.onGroupEdge[handle] = true;
				}
			});
			var newHeight = Math.round(newBounds.height * (win.height / this.height));
			var newWidth = Math.round(newBounds.width * (win.width / this.width));
			var request = win.getBounds();
			request.width = newWidth;
			request.height = newHeight;
			request.right = request.left + request.width;
			request.bottom = request.top + request.height;
			request.name = win.name;

			movements[request.name] = calculator.checkShortCircuits(request);
		}
		splitHandle.forEach(handle => {
			groupIter = calculator.groupWindowIterator(this);
			//cleans up the edges of the group in case rounding error messed us up.
			var oppEdge = __WEBPACK_IMPORTED_MODULE_2__constants__["OPPOSITE_EDGE_MAP"][handle];
			for (var win of groupIter) {
				var moveRequest = movements[win.name];
				if (win.onGroupEdge && win.onGroupEdge[oppEdge] && moveRequest[oppEdge] !== newBounds[oppEdge]) {
					moveRequest.name = win.name;
					moveRequest[oppEdge] = newBounds[oppEdge];
					if (oppEdge === "bottom") {
						moveRequest.top = moveRequest.bottom - moveRequest.height;
					}
					if (oppEdge === "top") {
						moveRequest.bottom = moveRequest.top + moveRequest.height;
					}
					if (oppEdge === "left") {
						moveRequest.right = moveRequest.left + moveRequest.width;
					}
					if (oppEdge === "right") {
						moveRequest.left = moveRequest.right - moveRequest.width;
					}
					moveRequest.width = moveRequest.right - moveRequest.left;
					moveRequest.height = moveRequest.bottom - moveRequest.top;
					movements[win.name] = calculator.checkShortCircuits(moveRequest, win);
				}
			}
		});

		for (var windowName in movements) {
			//TODO: make the actual move only happen once. Looks like it happens here and in group.UpdateBounds
			calculator.moveWindow(movements[windowName]);
		}

		var alreadyDanced = [];
		splitHandle.forEach(handle => {
			var groupIter = calculator.groupWindowIterator(this);
			alreadyDanced = [];
			for (let anchor of groupIter) {
				if (!alreadyDanced.includes(anchor.name)) {
					var b = doTheConga(anchor, handle);b;
				}
			}
			// group.updateBounds();
			groupIter = calculator.groupWindowIterator(this);
			//cleans up the edges of the group in case rounding error messed us up.
			for (var win of groupIter) {
				if (win.onGroupEdge && win.onGroupEdge[handle] && win[handle] !== newBounds[handle]) {
					var moveRequest = win.getBounds();
					moveRequest.name = win.name;
					moveRequest[handle] = newBounds[handle];

					moveRequest.width = moveRequest.right - moveRequest.left;
					moveRequest.height = moveRequest.bottom - moveRequest.top;

					calculator.moveWindow(calculator.checkShortCircuits(moveRequest, win));
					var b = doTheConga(win, handle);b;
				}
			}
			this.updateBounds();
		});

		if (cb) cb();

		function doTheConga(win, handle) {
			if (!win) {
				Logger.system.warn("INVESTIGATE: No win passed to doTheConga");
				return;
			}
			var oppEdge = __WEBPACK_IMPORTED_MODULE_2__constants__["OPPOSITE_EDGE_MAP"][handle];

			for (var i = 0, len = win.snappedWindows.length; i < len; i++) {
				var snappedWindowObj = win.snappedWindows[i];
				var snappedWin = calculator.getWindow(snappedWindowObj.name);
				if (!snappedWin) {
					Logger.system.warn(`INVESTIGATE: No Dockable Window found for ${snappedWindowObj.name}`);
					continue;
				}
				let groupIntersection = snappedWin.groupNames.some(name => win.groupNames.includes(name));
				if (!snappedWindowObj.edges[handle] || !groupIntersection) {
					continue;
				}

				var req = snappedWin.getBounds();
				req.name = snappedWin.name;

				snappedWin[oppEdge] = win[handle];
				var top = snappedWin.top,
				    left = snappedWin.left;
				if (handle === "top") {
					top = win.top - snappedWin.height;
				}

				if (handle === "bottom") {
					top = win.bottom;
				}

				if (handle === "right") {
					left = win.right;
				}

				if (handle === "left") {
					left = win.left - snappedWin.width;
				}

				snappedWin.moveTo(left, top);
				var b = doTheConga(snappedWin, handle);b;
				alreadyDanced.push(snappedWin.name);
			}
		}
	}

	/**
  *
  * @param {bounds} newBounds Bounds to scale the group to
  * @param {string} anchor
  * @param {DockingCalculator} calculator
  * @param {function} cb
  */
	scale(newBounds, anchor, calculator, cb) {
		//If you go bananas and try to make the group have negative height or width, many problems arise. Check to make sure the bounds aren't negative or too tiny.
		newBounds = calculator.checkShortCircuits(newBounds, this);
		let windowList = this.getWindowArray().map(win => {
			return _extends({}, win.getBounds(), {
				name: win.name
			});
		});
		let scaleDescriptor = DockableGroup.getScaleDescriptor(this.getBounds(), newBounds);
		///eventually Fix this. Right now it'll just go to the top left.
		let corners = JSON.parse(JSON.stringify(this.vertices));
		for (let corner in corners) {
			corners[corner.toLowerCase()] = corners[corner];
		}

		let anchorPoint = {};
		//The "Anchor" Is where the group is offset by. It's a point. Top/left is a misnomer. After scaling, each window will be shifted by deltaX and deltaY, where the delta is the distance between that window's top left and the anchor's point.
		if (__WEBPACK_IMPORTED_MODULE_2__constants__["EDGES"].includes(anchor)) {
			anchorPoint.top = newBounds.top;
			anchorPoint.left = newBounds.left;
			switch (anchor) {
				case "left":
					//When resizing from the left, we want to make sure the right edge of the group doesn't move.
					anchorPoint.left = newBounds.right;
					break;
				case "top":
					//When resizing from the top, we want to make sure the bottom edge of the group doesn't move.
					anchorPoint.top = newBounds.bottom;
					break;
			}
		} else if (__WEBPACK_IMPORTED_MODULE_2__constants__["CORNERS"].includes(anchor)) {
			//Get the opposite corner; that's the anchor.
			//e.g., when resizing from the top right, the bottom left shouldn't move at all.
			let corner = corners[__WEBPACK_IMPORTED_MODULE_2__constants__["OPPOSITE_EDGE_MAP"][anchor]];
			anchorPoint = {
				top: corner.y,
				left: corner.x
			};
		}
		//Pass in the list of windows and how we much we want to scale it. This returns a list of mutated window bounds objects.
		let scaledWindowList = DockableGroup.getScaledWindowList({
			windowList,
			scaleDescriptor,
			anchor: anchorPoint,
			MINIMUM_HEIGHT: this.MINIMUM_WINDOW_HEIGHT,
			MINIMUM_WIDTH: this.MINIMUM_WINDOW_WIDTH
		});

		//Actually move the windows.
		scaledWindowList.forEach(scaledBounds => {
			calculator.moveWindow(scaledBounds);
		});
		var windowBounds = {};

		this.getWindowArray().forEach(win => windowBounds[win.name] = win.getBounds());

		calculator.cleanupSharedEdges(this, windowBounds);

		this.updateBounds();
	}

	/**
  * Sets the minimum height and width for windows. This is used when scaling windows. It prevents us from creating very tiny windows when scaling an entire group.
  * @param {object} cfg
  * @param {number} cfg.MINIMUM_HEIGHT Minimum height a window can scale to.
  * @param {number} cfg.MINIMUM_WIDTH Minimum width a window can scale to.
  */
	setMinimums(cfg) {
		if (cfg) {
			this.MINIMUM_WINDOW_HEIGHT = cfg.MINIMUM_HEIGHT;
			this.MINIMUM_WINDOW_WIDTH = cfg.MINIMUM_WIDTH;
		}
	}

	/**
  * Returns an array of windows that have an edge on a given line segment.
  * @param {object} segment
  * @param {object} segment.min minimum point for the line segment.
  * @param {number} segment.min.x X coordinate for the minimum point for the line segment.
  * @param {number} segment.min.y y coordinate for the minimum point for the line segment.
  * @param {object} segment.min maximum point for the line segment.
  * @param {number} segment.max.x X coordinate for the maximum point for the line segment.
  * @param {number} segment.max.y y coordinate for the maximum point for the line segment.
  * @returns {array} windowsOnSegment Array of dockable windows that have an edge on the line segment.
  */
	getWindowsOnSegment(segment) {
		var windowsOnSegment = [];
		var winPool = this.getWindowNames();
		var points = [segment.min, segment.max];

		for (var i = 0; i < winPool.length; i++) {
			let win = this.getWindow(winPool[i]);
			for (var p = 0, len = points.length; p < len; p++) {
				var point = points[p];
				if (win.pointIsOnBoundingBox(point)) {
					let snapObj = {
						name: win.name,
						edge: win.getEdgeByPoint(point)
					};
					snapObj.segment = win.getEdges("obj")[snapObj.edge];
					windowsOnSegment.push(snapObj);
					break;
				}
			}
		}
		return windowsOnSegment;
	}

	/**
 * Not sure why this function doesn't use the one above. Similar functionality, but you can pass in a string instead of a line segment.
 * @todo, make it use the function above.
 * @param  {dockableWindow} win
 * @param  {string} edge E.g., 'left', 'right', etc.
 * @return {array}
 */
	getWindowsOnEdge(win, edge, includeCorners) {
		if (includeCorners === undefined) {
			includeCorners = false;
		}
		var windowsOnEdge = [];
		if (!edge) {

			//@todo, what went wrong to cause this.................
			return [];
		}
		var splitEdge = edge.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		var oppEdge = __WEBPACK_IMPORTED_MODULE_2__constants__["OPPOSITE_EDGE_MAP"][edge];
		var windowSegment = win.getEdges("obj", includeCorners)[edge];

		for (let windowName in this.windows) {
			let possibleSnapper = this.windows[windowName];
			if (possibleSnapper.name === win.name) {
				continue;
			}
			let segment = possibleSnapper.getEdges("obj", includeCorners)[oppEdge];
			var shouldPush = false;
			let points = [{
				name: possibleSnapper.name,
				val: segment.min
			}, {
				name: possibleSnapper.name,
				val: segment.max
			}, {
				name: win.name,
				val: windowSegment.min
			}, {
				name: win.name,
				val: windowSegment.max
			}];
			if (["top", "bottom"].includes(edge)) {
				if (segment.min.y !== windowSegment.min.y) {
					continue;
				}
				points = points.sort((a, b) => {
					return a.val.x > b.val.x;
				});
			}

			if (["left", "right"].includes(edge)) {
				if (segment.min.x !== windowSegment.min.x) {
					continue;
				}
				points = points.sort((a, b) => {
					return a.val.y > b.val.y;
				});
			}
			if (points[0].name !== points[1].name) {
				shouldPush = true;
			}
			if (shouldPush) {
				let snapObj = {
					name: possibleSnapper.name,
					edge: oppEdge
				};
				windowsOnEdge.push(snapObj);
			}
		}

		return windowsOnEdge;
	}

	/**
  * Given a hole, this function recursively fills the hole, expanding 1 window at a time - until the hole is filled.
  * @param {object} hole
  * @param {*} cb
  */
	fillHole(hole, cb = Function.prototype) {
		this.fillAttempts++;

		let myHole = new __WEBPACK_IMPORTED_MODULE_1__dockableBox__["a" /* default */](hole);

		//First, we need to see which windows in this group border our hole.

		//Get the edges in array format, don't include corners in the calculations.
		let edges = myHole.getEdges("arr", false);
		let candidates = edges.map(edge => this.getWindowsOnSegment(edge));

		//flatten the array.
		candidates = [].concat.apply([], candidates);
		//If we have no windows bordering the hole, there's nothing we can do.
		if (!candidates.length) return;

		//We need some of the methods on the docking calculator. This isn't an ideal way to do things. Would be nice if there was some kind of bridge that could allow move requests without needing the calculator.
		//Chalk that up to a @todo
		const calculator = this.getWindow(candidates[0].name).calculator;

		//Bounding box is needed for `sharesAnEdgeWith`.
		myHole.windowBoundingBox = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getWindowBoundingBox(myHole);

		//If the hole takes up the whole width or whole height of the group, we should scale the remaining windows to fill the hole.
		if ((myHole.width === this.width || myHole.height === this.height) && this.sharesAnEdgeWith(myHole)) {
			let bounds = {};
			//calculates the bounds of the group prior to the hole being created.
			bounds.left = Math.min(myHole.left, this.left);
			bounds.right = Math.max(myHole.right, this.right);
			bounds.top = Math.min(myHole.top, this.top);
			bounds.bottom = Math.max(myHole.bottom, this.bottom);
			bounds.height = bounds.bottom - bounds.top;
			bounds.width = bounds.right - bounds.left;
			let edge = null;

			//These are opposite. When the window leaves the group, the bounds are updated. So here, we compare the edge of the window that left to the group. If it was on the left side of the group - the right side of that window will be butted up against the left side of the group after it leaves.
			if (myHole.width === this.width) {
				if (myHole.top === this.bottom) edge = "bottom";
				if (myHole.bottom === this.top) edge = "top";
			}
			if (myHole.height === this.height) {
				if (myHole.left === this.right) edge = "right";
				if (myHole.right === this.left) edge = "left";
			}
			if (!edge) {
				return new Error("No edge found in fillHoles");
			}
			return this.scale(bounds, edge, calculator);
		}

		//Once we know that we aren't going to have to scale all of the windows, we get here.
		//The goal is to do the least amount of damage possible. So if there are 4 windows that border the hole, we will choose the one that will cascade into the fewest windows. If they all impact no other windows, we just choose the first.
		let potentialImpact = [];
		for (let i = 0; i < candidates.length; i++) {
			let candidate = candidates[i];
			let win = this.getWindow(candidate.name);
			let edge = candidate.edge;

			//These are the windows that would be affected if we resized the candidate window.
			let impactedWindows = this.getWindowsOnEdge(win, edge, false);
			candidate.impactedWindows = impactedWindows.length;
			candidate.win = win;
			potentialImpact.push(candidate);
		}

		//Goes through and gets the window whose resize would trigger a resize on the fewest windows possible.
		let leastImpactfulChange = potentialImpact.reduce(function (p, v) {
			return p.impactedWindows < v.impactedWindows ? p : v;
		});

		//Which edge we're resizing.
		let impactedEdge = leastImpactfulChange.edge;
		//Clone so we don't impact the original windows. Calculate the bounds for our window. We'll use this window if none of the other candidates are better matches.
		let newBounds = JSON.parse(JSON.stringify(leastImpactfulChange.win.getBounds()));
		newBounds[impactedEdge] = myHole[impactedEdge];
		newBounds.height = newBounds.bottom - newBounds.top;
		newBounds.width = newBounds.right - newBounds.left;

		//We'll use this later.
		let holeArea = hole.width * hole.height;
		let leastImpactfulArea = newBounds.width * newBounds.height;
		for (let i = 0; i < candidates.length; i++) {
			let candidate = candidates[i];
			let proposedBounds = JSON.parse(JSON.stringify(candidate.win.getBounds()));
			let proposedImpactedEdge = candidate.edge;
			proposedBounds[proposedImpactedEdge] = myHole[proposedImpactedEdge];
			proposedBounds.height = proposedBounds.bottom - proposedBounds.top;
			proposedBounds.width = proposedBounds.right - proposedBounds.left;
			let candidateArea = proposedBounds.height * proposedBounds.width;

			//If the candidateArea is less than the holeArea, if the candidateArea is larger than the currently chosen window, and resizing it would cause no more damage than the currently chosen window, it becomes the window to resize.
			if (candidateArea - holeArea > 0 && candidateArea > leastImpactfulArea && candidate.impactedWindows <= leastImpactfulChange.impactedWindows) {
				leastImpactfulChange = candidate;
				leastImpactfulArea = candidateArea;
				impactedEdge = proposedImpactedEdge;
				newBounds = proposedBounds;
			}
		}
		//Once we have the window that will cause the least amount of damage, we create a moveRequest to pass to docking. This will be a resize, and it will cascade onto other affected windows.
		newBounds.changeType = 1;
		newBounds.name = leastImpactfulChange.win.name;
		newBounds.resizeHandle = impactedEdge;
		newBounds.forceResizeHandle = true;
		calculator.requestMove(newBounds, () => {
			this.updateBounds();

			//If we only partially filled the hole, calculate the remaining hole, and recurse.
			if (!this.isARectangle()) {
				if (this.fillAttempts === 20) {
					let windowBounds = JSON.stringify(this.getWindowArray().map(win => win.getBounds()));
					Logger.system.warn("forceObjectsToLogger", "FillHoles failed after 20 attempts. Use first string for test case. Second string is hole", windowBounds, JSON.stringify(myHole.getBounds()));
					this.fillAttempts = 0;
					return;
				}
				let leftovers = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].clipRect(myHole, new __WEBPACK_IMPORTED_MODULE_1__dockableBox__["a" /* default */](newBounds), impactedEdge);
				this.fillHole(leftovers);
			} else {
				calculator.onMouseUp();
				this.fillAttempts = 0;
				return;
			}
		});
	}

	moveTo(bounds, cb = Function.prototype) {
		let anchor = this.getMoveAnchor("BottomRight");
		const calculator = anchor.calculator;
		bounds.name = anchor.name;
		bounds.changeType = 0;
		calculator.requestMove(bounds, () => {
			this.updateBounds();
			//Tell the calculator's mouse up function that this action was triggered
			//by auto arrange and we don't want to delete the cached windows positions
			calculator.onMouseUp(bounds.triggeredByAutoArrange);
			cb();
		});
	}
	/**
  * In certain configurations, whether a group is a rectangle is _NOT_ the deciding factor in scaling it. Instead, that decision is made based on whether the user is dragging a corner or an edge. If it's a corner, it must not be on another window's edge. If those conditions are met, we scale the group. This function returns the list of x,y points that will trigger this behavior.
  */
	getCornersThatCauseScaling() {
		let { corners, edges } = this.getCornersAndEdgesOfAllWindows();
		let uniqueCorners = corners.filter((value, index, self) => {
			let firstOccurance = self.findIndex(val => {
				return val.x === value.x && val.y === value.y;
			});
			return firstOccurance === index;
		});
		let cornersNotOnEdges = uniqueCorners.filter(corner => {
			let otherEdges = edges.filter(edge => edge.window !== corner.window);
			return !otherEdges.some(edge => __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].isPointOnSegment(corner, edge));
		});
		return cornersNotOnEdges;
	}

	/**
  * @typedef cornerLabel
  * @param {"topLeft"|"topRight"|"bottomLeft"|"bottomRight"} Label for the corner.
  */

	/**
  * @typedef cornerObject
  * @param {string?} window Name of the window the corner belongs to
  * @param {number} x X coordinate of the corner
  * @param {number} y Y coordinate of the corner
  * @param {cornerLabel} label for the corner.
  */
	/**
  * @typedef edgeObject
  * @param {string?} window Name of the window the edge belongs to
  * @param {object} min Minimum point for line segment
  * @param {number} min.x X coordinate of the minimum point for the edge's line segment.
  * @param {number} min.y Y coordinate of the minimum point for the edge's line segment.
  * @param {object} max maximum point for line segment
  * @param {number} max.x X coordinate of the maximum point for the edge's line segment
  * @param {number} max.y Y coordinate of the maximum point for the edge's line segment
  */
	/**
  * @typedef {object} cornersAndEdges
  * @param {Array<cornerObject>} corners
  * @param {Array<edgeObject>} edges
  */
	/**
  * Helper function that will return all corners and all edges for each window in the group.
  * @returns {cornersAndEdges} cornersAndEdges Corners and edges.
 
  */
	getCornersAndEdgesOfAllWindows() {
		let edges = [];

		let corners = this.getWindowArray().map(win => {
			let crn = win.getVertices(win.getBounds());
			crn = crn.map(c => {
				c.window = win.name;
				return c;
			});
			return crn;
		});

		corners = corners.reduce((acc, val) => acc.concat(val));

		edges = this.getWindowArray().map(win => {
			let edg = win.getEdges("arr", true);
			edg = edg.map(e => {
				e.window = win.name;
				return e;
			});
			return edg;
		});
		edges = edges.reduce((acc, val) => acc.concat(val));
		return { corners, edges };
	}
	/**
  * Returns the scale of bounds 1 relative to bounds 2.
  * If bounds1 is 1, and bounds2 is 2, the scale will come out as 2.
  * If boudns1 is 10 and bounds2 is 5, the scale will come out as 0.5. This is done for both x and y
  * @param {bounds} bounds1
  * @param {bounds} bounds2
  */
	static getScaleDescriptor(bounds1, bounds2) {
		const xScale = bounds2.width / bounds1.width;
		const yScale = bounds2.height / bounds1.height;
		return {
			x: xScale,
			y: yScale
		};
	}

	/**
  * Essentiually moves the window's top-left to the x/y coordinates passed in.
  * @param {object} params
  * @param {num} params.x x coordinate of a cartesian coordinate pair.
  * @param {num} params.y y coordinate of a cartesian coordinate pair.
  * @param {bounds} params.bounds bounds object that is being offset
  */
	static getCoordinatesByOffset(params) {
		const { x, y, bounds } = params;
		let offsetX = bounds.left - x;
		let offsetY = bounds.top - y;
		let newBounds = {
			top: bounds.top - offsetY,
			left: bounds.left - offsetX
		};
		newBounds.height = bounds.height;
		newBounds.width = bounds.width;
		newBounds.right = newBounds.left + bounds.width;
		newBounds.bottom = newBounds.top + bounds.height;
		return newBounds;
	}
	/**
  * Given bounds and a scaleDescriptor, returns a scaled bounds object.
  * @param {*} params
  * @param {object} params.bounds Bounds.
  * @param {object} params.scaleDescriptor Tells us how much to scale in the X and Y directions.
  * @param {num} params.scaleDescriptor.x 0-Infinity; how much to scale the window in the x direction
  * @param {num} params.scaleDescriptor.y 0-Infinity; how much to scale the window in the y direction
  * @returns {object} bounds
  */
	static scaleWindow(params) {
		let { bounds, scaleDescriptor } = params;

		//"move" the window to 0,0 -- makes scaling calculations correct.
		const scaledBounds = {
			left: Math.round(bounds.left * scaleDescriptor.x),
			top: Math.round(bounds.top * scaleDescriptor.y),
			height: Math.round(bounds.height * scaleDescriptor.y),
			width: Math.round(bounds.width * scaleDescriptor.x)
		};
		scaledBounds.right = scaledBounds.left + scaledBounds.width;
		scaledBounds.bottom = scaledBounds.top + scaledBounds.height;

		return scaledBounds;
	}

	/**
  * Called after performing scale operations on the group. Depending on where the user scaled the group from, we re-anchor the group so that the move makes sense. Internally, resizes are calculated as if the group was at 0,0. After we do those calculations, we need to re-anchor the group so that the move makes intuitive sense.
  * @param {object} params
  * @param {array} params.windowList Array of bounds objects. Or windows. Haven't decided.ANGLE_instanced_arrays
  * @param {object} params.offset object describing by how much the top and left of a window's bounds should be offset.
  * @param {num} params.offset.left how much to offset the left edge of each window in the group.
  * @param {num} params.offset.top how much to offset the left edge of each window in the group.
  */
	static offsetGroup(params) {
		let { windowList, offset } = params;
		return windowList.map(bounds => {
			bounds.left -= offset.left;
			bounds.top -= offset.top;
			bounds.right = bounds.left + bounds.width;
			bounds.bottom = bounds.top + bounds.height;
			return bounds;
		});
	}

	/**
  * The workhorse of scaling operations. Given a list of windows, how we want to scale them, where to put them after scaling, and a minimum height and width, it will do everything.
  * 1. Moves the group to 0,0.
  * 2. Calculates the size of each window in the array.
  * 3. Actually scales each window.
  * 4. Makes sure no windows got too narrow or too short (check minimum height/width).
  * 5. Fixes any windows that were too small/too narrow.
  * 6. Re-anchors the group so that the move "feels" right. See DockableGroup.'offsetGroup' for a better explanation of what "feels right" means.
  * @param {params} params
  * @param {Array<bounds>} params.windowList
  * @param {scaleDescriptor} params.scaleDescriptor how much to scale in the x and y dimensions.
  * @param {num} param.scaleDescriptor.x How much to scale in the x direction
  * @param {num} param.scaleDescriptor.y How much to scale in the y direction
  * @param {object} param.anchor top/left coordinates of the 'anchor' for the list of windows. After scaling the windows, we need to make sure every window is reset to this anchor. If one resizes from the bottom right of a group, the top left of the group shouldn't change. If you resize from the top left, the bottom right shouldn't move after scaling.
  */
	static getScaledWindowList(params) {
		let { windowList, scaleDescriptor, anchor, MINIMUM_HEIGHT, MINIMUM_WIDTH } = params;
		///MOVE IT TO 0,0
		windowList = this.offsetGroup({
			windowList,
			offset: {
				left: anchor.left,
				top: anchor.top
			}
		});

		///SCALE EVERY WINDOW
		windowList = windowList.map(bounds => {
			let scaledBounds = this.scaleWindow({
				bounds,
				scaleDescriptor
			});

			scaledBounds.name = bounds.name;
			return scaledBounds;
		});

		//find smallest window. If it's beneath the minimum width/height, scale back out.
		let narrowestWindow = windowList.reduce((previousWindow, currentWindow, currentIndex) => {
			return previousWindow.width < currentWindow.width ? previousWindow : currentWindow;
		});

		let shortestWindow = windowList.reduce((previousWindow, currentWindow, currentIndex) => {
			return previousWindow.height < currentWindow.height ? previousWindow : currentWindow;
		});

		const scaleWidthOut = narrowestWindow.width < MINIMUM_WIDTH;
		const scaleHeightOut = shortestWindow.height < MINIMUM_HEIGHT;

		//Our narrowest window is _too_ narrow. We need to scale the group back out to make sure windows aren't too narrow.
		if (scaleWidthOut) {
			let correctedBounds = JSON.parse(JSON.stringify(narrowestWindow));
			correctedBounds.width = MINIMUM_WIDTH;
			correctedBounds.right = correctedBounds.left + MINIMUM_WIDTH;

			let newScaleDescriptor = this.getScaleDescriptor(narrowestWindow, correctedBounds);
			windowList = windowList.map(bounds => {
				let scaledBounds = this.scaleWindow({
					bounds,
					scaleDescriptor: newScaleDescriptor
				});

				scaledBounds.name = bounds.name;
				return scaledBounds;
			});
		}

		if (scaleHeightOut) {
			let correctedBounds = JSON.parse(JSON.stringify(shortestWindow));
			correctedBounds.height = MINIMUM_HEIGHT;
			correctedBounds.bottom = correctedBounds.top + MINIMUM_HEIGHT;

			let newScaleDescriptor = this.getScaleDescriptor(shortestWindow, correctedBounds);
			windowList = windowList.map(bounds => {
				let scaledBounds = this.scaleWindow({
					bounds,
					scaleDescriptor: newScaleDescriptor
				});
				scaledBounds.name = bounds.name;
				return scaledBounds;
			});
		}
		///MOVE IT BACK TO WHERE THE ANCHOR IS
		windowList = this.offsetGroup({
			windowList,
			offset: {
				left: -anchor.left,
				top: -anchor.top
			}
		});
		return windowList;
	}
}

//DockableGroup.prototype = DockableBox;
/* harmony default export */ __webpack_exports__["a"] = (DockableGroup);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockableGroup.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockableGroup.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boxMath__ = __webpack_require__(92);

function DockableMonitor(params) {
	let bounds;

	//Pre-dockable components this function only took bounds. For backwards compatibility if the incoming params do now have a 'bounds' prop, we assume params = bounds
	if (!params.hasOwnProperty("bounds")) {
		bounds = params;
	} else {
		bounds = params.bounds;
	}

	this.left = bounds.left;
	this.top = bounds.top;
	this.right = bounds.right;
	this.bottom = bounds.bottom;
	this.rawMonitor = params.monitor instanceof DockableMonitor ? params.monitor.rawMonitor : params.monitor; //Need this later in order to do docking related tasks
	this.unclaimedRect = this.rawMonitor.unclaimedRect;
	this.availableRect = this.rawMonitor.availableRect;
	this.bufferSize = 15;
	/**
 * @function {function name}
 * @param  {type} bufferSize {description}
 * @return {type} {description}
 */
	this.setBufferSize = function (bufferSize) {
		this.bufferSize = bufferSize;
		this.bounds = this.getWindowBoundingBox();
		this.calculateSnappingRegions();
	};

	/**
 * @function {function name}
 * @return {type} {description}
 */
	this.getWindowBoundingBox = function () {
		return {
			min: {
				x: this.left,
				y: this.top
			},
			max: {
				x: this.right,
				y: this.bottom
			}
		};
	};
	/**
 * @function {function name}
 * @param  {type} bounds {description}
 * @param  {type} edge   {description}
 * @return {type} {description}
 */
	this.getSnappingRegion = function (bounds, edge) {
		let map = {
			left: {
				min: {
					x: bounds.left - this.bufferSize,
					y: bounds.top
				},
				max: {
					x: bounds.left + this.bufferSize,
					y: bounds.bottom
				}
			},
			right: {
				min: {
					x: bounds.right - this.bufferSize,
					y: bounds.top
				},
				max: {
					x: bounds.right + this.bufferSize,
					y: bounds.bottom
				}
			},
			bottom: {
				min: {
					x: bounds.left,
					y: bounds.bottom - this.bufferSize
				},
				max: {
					x: bounds.right,
					y: bounds.bottom + this.bufferSize
				}
			},
			top: {
				min: {
					x: bounds.left,
					y: bounds.top - this.bufferSize
				},
				max: {
					x: bounds.right,
					y: bounds.top + this.bufferSize
				}
			}
		};
		return map[edge];
	};
	/**
 * @function {function name}
 * @return {type} {description}
 */
	this.calculateSnappingRegions = function () {
		this.snappingRegions = {
			top: this.getSnappingRegion(bounds, "top"),
			right: this.getSnappingRegion(bounds, "right"),
			bottom: this.getSnappingRegion(bounds, "bottom"),
			left: this.getSnappingRegion(bounds, "left")
		};
	};
	/**
 * @function {function name}
 * @param  {type} region  {description}
 * @param  {type} request {description}
 * @return {type} {description}
 */
	this.canSnapToRegion = function (region, request) {
		var innerAdjustment = 0 - this.bufferSize;
		return __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].intersectBoundingBoxes(this.snappingRegions[region], {
			min: {
				x: request.snappingRegions[region].min.x - innerAdjustment,
				y: request.snappingRegions[region].min.y - innerAdjustment
			},
			max: {
				x: request.snappingRegions[region].max.x + innerAdjustment,
				y: request.snappingRegions[region].max.y + innerAdjustment
			}
		});
	};
	/**
 * @function {function name}
 * @param  {type} request {description}
 * @return {type} {description}
 */
	this.canSnapToWindow = function (request) {
		for (var region in this.snappingRegions) {
			if (this.canSnapToRegion(region, request)) {
				return true;
			}
		}
		return false;
	};
	/**
  * Determines if supplied window (or request) is near a given edge of the monitor
  *
  * @param {object} request The move request
  * @return {string} A string containing any edges of the monitor the given requiest is near
  */
	this.getSnappedEdge = function (request) {
		let snappedEdge = "";
		if (request.top === this.bounds.min.y) {
			snappedEdge += "top";
		} else if (request.bottom === this.bounds.max.y) {
			snappedEdge += "bottom";
		}
		return snappedEdge;
	};
	/**
 * @function {function name}
 * @param  {type} request {description}
 * @return {type} {description}
 */
	this.snapWindow = function (request) {
		var regionsToSnap = [];
		for (var region in this.snappingRegions) {
			if (this.canSnapToRegion(region, request)) {
				regionsToSnap.push(region);
			}
		}
		//let originalRequest = Object.assign({}, request);
		regionsToSnap = regionsToSnap.join("");
		if (regionsToSnap) {
			if (regionsToSnap.includes("left")) {
				//if req is to the right of the monitor's left edge.
				if (request.left >= this.snappingRegions.left.min.x) {
					request.left = this.bounds.min.x;
				}
			}
			if (regionsToSnap.includes("top")) {
				//Top edge of request must be below the top edge of the monitor..
				if (request.top >= this.snappingRegions.top.min.y) {
					request.top = this.bounds.min.y;
				}
			}

			if (regionsToSnap.includes("right")) {
				//right edge of request must be to the left of the right edge of the monitor.
				if (request.right <= this.snappingRegions.right.max.x) {
					//move
					if (request.changeType === 0) {
						request.left = this.bounds.max.x - request.width;
					} else {
						request.right = this.bounds.max.x;
					}
				}
			}

			if (regionsToSnap.includes("bottom")) {
				if (request.bottom <= this.snappingRegions.bottom.max.y) {
					if (request.changeType === 0) {
						request.top = this.bounds.max.y - request.height;
					} else {
						request.bottom = this.bounds.max.y;
					}
				}
			}

			if (request.changeType === 0) {
				request.right = request.left + request.width;
				request.bottom = request.top + request.height;
			} else {
				request.width = request.right - request.left;
				request.height = request.bottom - request.top;
			}
			return request;
		}

		return false;
	};
	/**
  * Takes any snapped edges and a given request (window) and sets the appropriate bounds of the window (when docking, the windows width is expanded to take full screen)
  * @param {string} edge A string containing any edges the window could snap to
  * @param {object} request The window to dock
  * @return {object} The modified request object
  */
	this.getDockedPosition = function (edge, request) {
		if (edge === "") return false;
		if (edge.includes("top")) {
			//Top edge of request must be below the top edge of the monitor..
			if (request.top >= this.snappingRegions.top.min.y) {
				request.top = this.bounds.min.y;
				request.width = this.bounds.max.x - this.bounds.min.x;
				request.left = this.bounds.min.x;
				request.right = this.bounds.max.x;
				request.bottom = request.top + request.height;
			}
		}

		if (edge.includes("bottom")) {
			if (request.bottom <= this.snappingRegions.bottom.max.y) {
				request.top = this.bounds.max.y - request.height;
				request.width = this.bounds.max.x - this.bounds.min.x;
				request.left = this.bounds.min.x;
				request.right = this.bounds.max.x;
				request.bottom = this.bounds.max.y;
			}
		}
		return request;
	};
	/**
  * Docks a window to an edge if it needs to be. Calls to update dockableMonitor/dockableWindow properties
  * @param {object} request The move request
  */
	this.dockWindowToMonitor = function (request, width, height) {
		let oldBounds = {
			width: width ? width : request.width,
			height: height ? height : request.height
		};

		request.height = request.dockedHeight;
		delete request.dockedHeight;

		let snappedEdge = request.hasOwnProperty("snappedEdge") ? request.snappedEdge.toLowerCase() : this.getSnappedEdge(request);
		delete request.snappedEdge;
		let dockedPos = this.getDockedPosition(snappedEdge, request);

		if (snappedEdge) {
			this.onClaimedSpaceChanged({ win: dockedPos, oldBounds: oldBounds, location: snappedEdge });
			return request;
		}
		return false;
	};

	/**
  * JSON override method
  */
	this.toJSON = function () {
		return {
			bounds: this.bounds,
			availableRect: this.availableRect,
			monitorRect: this.monitorRect,
			unclaimedRect: this.unclaimedRect,
			name: this.name,
			top: this.top,
			right: this.right,
			bottom: this.bottom,
			left: this.left
		};
	};

	/**
  * Undocks a window
  * @param {object} request The move request
  */
	this.undockWindowFromMonitor = function (request) {
		//Old bounds is used by DockableWindow to determine its width and height when its undocked. In this scenario, since we're undocking and will use the oldBounds already stored in DockableWindow, we want to pass in an empty object since oldBounds will be empty when the component is undocked
		this.onClaimedSpaceChanged({ win: request, oldBounds: {}, location: "NONE" });
		return request;
	};
	this.bounds = this.getWindowBoundingBox();
	this.calculateSnappingRegions();
	this.name = bounds.name;

	return this;
}

/* harmony default export */ __webpack_exports__["a"] = (DockableMonitor);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockableMonitor.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockableMonitor.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__boxMath__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__dockableBox__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_disentangledUtils__ = __webpack_require__(94);
/* global RouterClient */




/** Singleton of the Logger class shared among all instances of DockableWindow
 * @TODO Refactor to instance member of class.
 */
let Logger;
/** Singleton of the System class shared among all instances of DockableWindow
 * @TODO Refactor to instance member of class.
 */
let System;
/** Singleton of the Calculator class shared among all instances of DockableWindow
 * @TODO Refactor to instance member of class.
 */
let calculator;
//Need config service in order to see if a particular window is dockable presentationalComponents -> components.Toolbar.component.dockable = true?
const _throttle = __webpack_require__(39);

//defaults for the openfin version.
/*var OF_VERSION = {
	major: 7,
	patch: 0
};*/
var OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT = true;
const BOUNDS_CHANGING = "bounds-change-request";
const BOUNDS_CHANGED = "bounds-changed";

var warningsSent = {
	disableFrame: false,
	setOpacity: false,
	addEventListener: false,
	removeEventListener: false
};

class DockableWindow extends __WEBPACK_IMPORTED_MODULE_1__dockableBox__["a" /* default */] {
	/**
  *
  * @param {*} win Window object; OpenfinWindow, ExternalWindow, etc.
  * @param {bounds} bounds initial bounds for the window.
  * @param {object} dependencies Dependency object that provides the calculator, System, and Logger.
  * @param {DockingCalculator} dependencies.calculator
  * @param {System} dependencies.System
  * @param {Logger} dependencies.Logger
  */
	constructor(win, bounds, dependencies) {
		super(bounds);
		if (dependencies) {
			calculator = dependencies.calculator;
			System = dependencies.System;
			Logger = dependencies.Logger;
		} else {
			throw new Error("DockableWindow class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.");
		}

		/**@todo Document these vars */
		this.win = win;
		this.bufferSize = 15;
		this.canGroup = this.win.canGroup;
		this.name = this.win.name;
		this.uuid = this.win.uuid;
		this.guid = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__common_disentangledUtils__["guuid"])();
		this.disableFrame();
		this.top = bounds.top;
		this.left = bounds.left;
		this.right = bounds.right;
		this.bottom = bounds.bottom;
		this.width = bounds.width;
		this.height = bounds.height;
		this.opacity = 1;
		this.events = {};
		this.groupNames = [];
		this.snappedWindows = [];
		this.type = win.type;
		this.calculator = calculator;
		this.finishInitialize = this.finishInitialize.bind(this);
		this.buildDefaultDockingOptions = this.buildDefaultDockingOptions.bind(this);
		this.onBoundsChanged = this.onBoundsChanged.bind(this);
		this.onBoundsChanging = this.onBoundsChanging.bind(this);
		this.addEventListener = this.addEventListener.bind(this);
		this.removeEventListener = this.removeEventListener.bind(this);
		this.requestBoundsChange = this.requestBoundsChange.bind(this);
		this.getDockedStringFromLocation = this.getDockedStringFromLocation.bind(this);
		this.hiddenUnclaimSpace = this.hiddenUnclaimSpace.bind(this);
		this.unhiddenClaimSpace = this.unhiddenClaimSpace.bind(this);
		this.dock = this.dock.bind(this);
		this.undock = this.undock.bind(this);
		this.resizeThrottlePeriod = 5;
		const startTime = Date.now();
		this.lastBoundsAdjustment = startTime;
		this.resizeHandle = null;

		//Needed for dockable components that don't have a static grabber on the side of the component (mostly for when there are dockable windows). When a user undocks the component, they can undock it from anywhere in the components header bar, this will center the window on the undock, so that when the window shrinks back to its old size, the mouse will be in the center
		this.shouldOffsetByMouse = false;

		//A DockableWindow can refuse tabbing or tiling requests with the right config props
		this.ignoreTilingAndTabbingRequests = win.ignoreTilingAndTabbingRequests;

		this.setBoundingBoxes();
		this.addListeners();
		//Disable the frame so that users cannot move the window. Only we move the window after we verify that their intended movement shouldn't result in a snap.
		this.setOpacity = _throttle(this.setOpacity, 100, { trailing: true });

		let options = win.hasOwnProperty("dockingOptions") ? win.dockingOptions : null;
		let dockingDefaults = options !== null ? this.buildDefaultDockingOptions(options) : { isDockable: false };

		this.isDockableComponent = dockingDefaults.isDockable;
		this.monitorDockablePositions = {};
		if (dockingDefaults.isDockable) {
			if (Array.isArray(options.dockable)) {
				options.dockable.map((option, i) => {
					//make upper case
					option = option.toUpperCase();

					if (option === "TOP") this.monitorDockablePositions.TOP = 0;
					if (option === "LEFT") this.monitorDockablePositions.LEFT = 1;
					if (option === "RIGHT") this.monitorDockablePositions.RIGHT = 2;
					if (option === "BOTTOM") this.monitorDockablePositions.BOTTOM = 3;
				});
				this.monitorDockablePositions.NONE = 4;
			} else {
				//If options.dockable is not supplied, or it is just 'true' that means this window can dock everywhere
				this.monitorDockablePositions = {
					TOP: 0,
					LEFT: 1,
					RIGHT: 2,
					BOTTOM: 3,
					NONE: 4
				};
			}
		}
		//pass through from the windowWrap. This property is added during the registration. Options include, min/max height/width, whether the window is dockable, whether it starts docked, etc.
		this.dockingOptions = win.dockingOptions;
		this.dockedPosition = this.monitorDockablePositions.NONE;
		this.ignoreSnappingRequests = options && options.ignoreSnappingRequests || options && options.ephemeral; // OR if isEphemeral is true
		this.dockedDimensions = {
			width: dockingDefaults.dockedWidth,
			height: dockingDefaults.dockedHeight
		};

		//If overwriteDockedOptions is true we should expect there to be some information regarding this component in memory. That saved information will provide bounds for where the window should spawn
		let startsDocked = options !== null && typeof options.startsDocked === "string" ? options.startsDocked : "none";

		if (this.isDockableComponent && options && options.overwriteDockedOptions) {
			this.win.getComponentState({}, (err, result) => {
				if (err && err !== "Not found") {
					Logger.system.error("Error retreiving component state. Using defaults.");
					this.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];
					this.undockedPosition = {
						width: dockingDefaults.undockedWidth,
						height: dockingDefaults.undockedHeight
					};
					this.finishInitialize(options);
					return;
				}
				let windowBounds = result && result.hasOwnProperty("window-bounds") && result["window-bounds"] !== null ? result["window-bounds"] : null;
				if (!windowBounds) {
					this.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];
				} else {
					this.top = windowBounds.top;
					this.bottom = windowBounds.bottom;
					this.left = windowBounds.left;
					this.right = windowBounds.right;
					this.width = windowBounds.width;
					this.height = windowBounds.height;
					this.dockedPosition = windowBounds.dockedPosition;
				}

				this.undockedPosition = {
					width: dockingDefaults.undockedWidth,
					height: dockingDefaults.undockedHeight
				};

				this.dockedParams = {
					width: dockingDefaults.dockedWidth,
					height: dockingDefaults.dockedHeight
				};
				//@todo here we should check to see if the window's bounds match monitor bounds. If so, dock it. For now, we have a hack to not save the toolbar's location on dock.
				this.finishInitialize(options);
			});
		} else if (dockingDefaults.isDocked && this.monitorDockablePositions.hasOwnProperty(startsDocked.toUpperCase())) {
			this.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];
			this.undockedPosition = {
				width: dockingDefaults.undockedWidth,
				height: dockingDefaults.undockedHeight
			};
			this.finishInitialize(options);
		}
	}
	// For diagnostics.
	// 	this.wipeMethodCalls = this.wipeMethodCalls.bind(this);
	// 	this.wipeMethodCalls();
	// 	window.wipeMethodCalls = this.wipeMethodCalls;
	// }
	// wipeMethodCalls() {
	// 	for (let m in this) {
	// 		if (typeof this[m] === "function") {
	// 			console.log("FUNCTION", m);
	// 			//window.methodCalls[m] = 0;
	// 		} else {
	// 			console.log("NON FUNCTION", m);
	// 		}
	// 	}
	// 	//window.methodCalls['setBounds'] = 0;
	// }

	/**
  * Returns a string representation of the docked location
  * @param {number} dockedPosition The integer value of the docked position
  */
	getDockedStringFromLocation(dockedPosition) {
		let locValue = null;
		for (let i = 0; i < Object.keys(this.monitorDockablePositions).length; i++) {
			let key = Object.keys(this.monitorDockablePositions)[i];
			if (this.monitorDockablePositions[key] === this.dockedPosition) {
				locValue = key.toUpperCase();
				break;
			}
		}
		return locValue;
	}

	/**
  * Finishes the initialization of this dockable window
  * @param {object} dockingDefaults Defaults that have been determined by incoming config
  * @param {object} options
  */
	finishInitialize(options) {
		//This allows the config to specify wether a dockable component should show on the taskbar
		this.shouldShowTaskbarIcon = options !== null && options.hasOwnProperty("showTaskbarIcon") ? options.showTaskbarIcon : true;
		this.isDocked = this.dockedPosition !== this.monitorDockablePositions.NONE ? true : false;

		//If the registering window is dockable, and wants to 'start docked' we need to determine which of the dockable positions it requests to start docked in. If the position is found, we call to dock it which will set the appropriate variables and move any launched windows out of its space.
		if (this.isDocked) {
			//We only dock the window if it's visible. If it's hidden, we don't want to claim space.
			let locValue = this.getDockedStringFromLocation(this.dockedPosition);
			if (locValue !== null) {
				let monitor = this.calculator.getMonitorForWindow(this);
				let windowBounds = {
					top: this.top,
					bottom: this.bottom,
					left: this.left,
					right: this.right,
					width: this.width,
					height: this.height
				};

				//Handles dimensions that need window specific calculations
				switch (locValue) {
					case "TOP":
						windowBounds.height = this.dockedParams.height;
						windowBounds.top = monitor.top;
						windowBounds.bottom = monitor.top + windowBounds.height;
						break;
					case "BOTTOM":
						windowBounds.height = this.dockedParams.height;
						windowBounds.top = monitor.bottom - windowBounds.height;
						windowBounds.bottom = monitor.bottom;
						break;
					default:
						break;
				}

				//Handles dimensions that need monitor specific calculations
				switch (locValue) {
					case "TOP":
					case "BOTTOM":
						windowBounds.left = monitor.left;
						windowBounds.right = monitor.right;
						windowBounds.width = monitor.unclaimedRect.width;
						break;
					case "LEFT":
					case "RIGHT":
						windowBounds.top = monitor.top;
						windowBounds.bottom = monitor.bottom;
						windowBounds.height = monitor.unclaimedRect.height;
						break;
					default:
						break;
				}

				this.setBounds(windowBounds, err => {
					if (err) {
						Logger.system.error("Error moving dockable component to default docked position");
					}
					this.dockedHeight = this.dockedParams.height;
					console.log("DOCKING TO MONITOR", locValue);
					monitor.dockWindowToMonitor(this, this.undockedPosition.width, this.undockedPosition.height);
				});
			}
		}
	}
	/**
  * Builds default docking options for dockable windows
  * @param {object} options Taken from the incoming config
  * @return {object} The docking defaults
  */
	buildDefaultDockingOptions(options) {
		//Building a default options object based on the incoming config props. Since windows can have different dockable areas and different starting docked positions, we must build starting props based on those options.
		let hasUndockedParams = this.win.hasOwnProperty("dockingOptions") && this.win.dockingOptions.hasOwnProperty("undockedParams");
		let hasDockedParams = this.win.hasOwnProperty("dockingOptions") && this.win.dockingOptions.hasOwnProperty("dockedParams");
		let dockingDefaults = {
			isDockable: options !== null && (options.dockable === true || Array.isArray(options.dockable)) ? true : false,
			undockedWidth: hasUndockedParams ? this.win.dockingOptions.undockedParams.width : 300,
			undockedHeight: hasUndockedParams ? this.win.dockingOptions.undockedParams.height : 30,
			isDocked: options !== null && options.hasOwnProperty("startsDocked") ? true : false,
			dockedWidth: hasDockedParams ? this.win.dockingOptions.dockedParams.width : 300,
			dockedHeight: hasDockedParams ? this.win.dockingOptions.dockedParams.height : 39
		};
		return dockingDefaults;
	}

	/**
  * Function to handle chain of events when a dockable component type is docked
  *
  * @param {object} monitor Information about the monitor the component was docked to
  * @param {string} location A string containing the location to dock to: "TOP", "LEFT", "BOTTOM", and "RIGHT" are the acceptable values
  */
	dock(monitor, oldBounds, location) {
		if (this.isDockableComponent) {
			let dockPos = -1;
			this.undockedPosition = {
				width: oldBounds.width,
				height: oldBounds.height
			};

			//Assuming the re-assignment of positions/size doesn't need to take place
			//we don't need a switch here
			switch (location) {
				case this.monitorDockablePositions.TOP:
					dockPos = this.monitorDockablePositions.TOP;
					break;
				case this.monitorDockablePositions.LEFT:
					dockPos = this.monitorDockablePositions.LEFT;
					break;
				case this.monitorDockablePositions.RIGHT:
					dockPos = this.monitorDockablePositions.RIGHT;
					break;
				case this.monitorDockablePositions.BOTTOM:
					dockPos = this.monitorDockablePositions.BOTTOM;
					break;
				default:
					break;
			}

			this.dockedPosition = dockPos;
			this.isDocked = true;
		}
	}

	/**
  * Function to handle chain of events when a dockable component type is undocked
  */
	undock() {
		if (this.isDockableComponent) {
			this.isDocked = false;
			this.dockedPosition = this.monitorDockablePositions.NONE;
		}
	}

	hiddenUnclaimSpace() {
		if (this.isDocked && this.isClaimingSpace) {
			let locValue = this.getDockedStringFromLocation(this.dockedPosition);
			this.monitor.onClaimedSpaceChanged({
				win: this,
				oldBounds: this.undockedPosition,
				location: locValue,
				unchangedDockState: true,
				action: "undock"
			});
		}
	}

	unhiddenClaimSpace() {
		if (this.isDocked && !this.isClaimingSpace) {
			let locValue = this.getDockedStringFromLocation(this.dockedPosition);
			this.monitor.onClaimedSpaceChanged({
				win: this,
				oldBounds: {},
				location: locValue,
				unchangedDockState: true,
				action: "dock"
			});
		}
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	onBoundsChanged() {
		//window.methodCalls["onBoundsChanged"]++;
		//this represents the dockableWindow's context
		this.setOpacity({ opacity: 1 });
		this.resizeHandle = null;
		let timestamp = Date.now();
		this.onboundschanged = timestamp;
		this.lastBoundsAdjustment = timestamp;
		this.monitor = this.calculator.getMonitorForWindow(this);
		this.calculator.onMouseUp();
	}

	/**
 * @function {function name}
 * @param  {type} request  {description}
 * @param  {type} callback {description}
 * @return {type} {description}
 */
	onBoundsChanging(event, callback) {
		//this makes me cri
		let request = event.data || event;
		//window.methodCalls["onBoundsChanging"]++;
		this.finished = false;
		try {
			request.timestamp = Date.now();
		} catch (e) {
			return;
		}
		var self = this;
		System.getMousePosition(function (err, position) {
			function finishMove() {
				if (callback) {
					callback();
				}
				self.lastBoundsAdjustment = Date.now();
				self.win.eventManager.addListener(BOUNDS_CHANGING, self.onBoundsChanging);
			}
			var invalidateRequest = false;
			var shouldThrottle = request.timestamp < self.lastBoundsAdjustment + self.resizeThrottlePeriod;

			//@note this conditional here is for testing. Node is faster than JS or something. In openfin, we need to also exlude requests that came in at the same time as the request we last processed. I think they sometimes send multiple events and in my testing, that never happens. Truthfully though I don't know why this bit has to be different in the different environments. But I do remember losing a day when I ported this stuff from test-world to openfin. Don't delete it. --Brad
			if (typeof fin === "undefined") {
				invalidateRequest = shouldThrottle || request.timestamp < self.lastBoundsAdjustment;
			} else {
				invalidateRequest = shouldThrottle || request.timestamp <= self.lastBoundsAdjustment;
			}

			if (invalidateRequest) {
				Logger.system.debug("DOCKING: Invalid request", "TIMESTAMPS:", JSON.stringify(request.timestamp), JSON.stringify(self.lastBoundsAdjustment));
				if (callback) {
					callback();
				}
				return;
			}

			//For some reason their bounds are wrong for `move` changeTypes. How can a changeType be 0 and the width and height change? c'mon openfin. Gimme that logical consistency.
			if (OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT) {
				request.width = self.width && request.changeType === 0 ? self.width : request.width;
				request.height = self.height && request.changeType === 0 ? self.height : request.height;
			}

			//This comparison used to check right and bottom...props that don't exist on the request.
			//If all of the bounds haven't changed, don't waste time processing it.
			if (request.left === self.left && request.top === self.top && request.width === self.width && request.height === self.height) {
				console.log("No change being requested. Dropping.");
				if (callback) callback();
				return;
			}
			self.win.eventManager.removeListener(BOUNDS_CHANGING, self.onBoundsChanging);

			request.right = request.left + request.width;
			request.bottom = request.top + request.height;
			request.groupNames = self.groupNames;
			request.mousePosition = request.mousePosition || position;
			self.calculator.requestMove(request, function (bounds) {

				if (!bounds) {
					finishMove();
					return;
				}

				self.setBounds(bounds, function () {
					finishMove();
				}, function (err) {
					Logger.system.error("ERROR IN SET BOUNDS", err);
				});
			});
		});
	}

	setResizeThrottlePeriod(throttlePeriod) {
		//window.methodCalls["setResizeThrottlePeriod"]++;
		this.resizeThrottlePeriod = throttlePeriod;
	}

	/**
  * This removes event listeners. I can't be entirely certain, but from my testing, it _appears_ that openfin isn't actually deleting these objects. if you close the window, then load the window with the same name, old listeners are still registered with your new window. So if you reload a workspace, and then try to move a window, you get weird scenarios where onBoundsChanging is called twice with different values (presumably for old eventlisteners). Removing the eventListeners on close seems to handle this.
  */
	removeEventListeners() {
		//window.methodCalls["removeEventListeners"]++;
		this.removeEventListener(BOUNDS_CHANGING, this.onBoundsChanging);
		this.removeEventListener(BOUNDS_CHANGED, this.onBoundsChanged);
		//This reason this is necessary is hard to explain.
		//When the dockableWindow is created we call win.addEventListener(BOUNDS_CHANGING, blah blah).
		//This forces the openfin window to bubble bounds events up to us. This function also goes out to the router and is pretty heavy for rapid addition/removal. Inside of onBoundsChanging, we add and remove handlers _on the event manager_. So when removeEventListeners is called, the two handlers above are removed. However, there's still that lingering listener that we added to the event manager inside of finishMove. If we don't remove that listener, we could get events thrown from other older incarnations of the same dockable window.
		this.win.eventManager.removeListener(BOUNDS_CHANGING, this.onBoundsChanging);
	}

	/********************************************
  *											*
  *			Window Moving Methods			*
  *											*
  ********************************************/

	/**
  * Hides taskbar icon for openfin windows. This prevents them from being clobbered by aeroshake.
  */
	hideTaskbarIcon() {
		//window.methodCalls["hideTaskbarIcon"]++;
		//Check to see if the method exists. It wouldn't on an external window wrapper.
		if (this.win._updateOptions) {
			this.win._updateOptions({ showTaskbarIcon: false });
		}
	}

	/**
  * This shows the taskbar icon for a given window.
  */
	showTaskbarIcon() {
		//window.methodCalls["showTaskbarIcon"]++;

		if (this.win._updateOptions && this.shouldShowTaskbarIcon) {
			this.win._updateOptions({ showTaskbarIcon: true });
		}
	}

	/**
 * @function {function name}
 * @param  {type} event {description}
 * @param  {type} cb    {description}
 * @return {type} {description}
 */
	addEventListener(event, cb) {
		//window.methodCalls["addEventListener"]++;
		var self = this;
		if (self.win.addEventListener) {
			self.win.addEventListener(event, cb);
			if (!this.events[event]) {
				this.events[event] = [];
			}
			this.events[event].push(cb);
		} else if (!warningsSent.addEventListener) {
			warningsSent.addEventListener = true;
			Logger.system.warn("Window wrapper does not have an addEventListener Method.");
		}
	}

	/**
 * @function {function name}
 * @param  {type} event {description}
 * @param  {type} cb    {description}
 * @return {type} {description}
 */
	removeEventListener(event, cb) {
		//window.methodCalls["removeEventListener"]++;
		var self = this;
		if (self.win.removeEventListener) {
			self.win.removeEventListener(event, cb);
			this.events[event].splice(this.events[event].indexOf(cb), 1);
		} else if (!warningsSent.removeEventListener) {
			warningsSent.removeEventListener = true;
			Logger.system.warn("Window wrapper does not have an removeEventListener Method.");
		}
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	disableFrame() {
		//window.methodCalls["disableFrame"]++;
		if (this.win.disableFrame) {
			this.win.disableFrame();
		} else if (!warningsSent.disableFrame) {
			warningsSent.disableFrame = true;
			Logger.system.warn("Window wrapper does not have a disableFrame Method");
		}
	}

	setOpacity(params = { opacity: 1, persist: false }) {
		//window.methodCalls["setOpacity"]++;
		// if (opacity === this.opacity) return;
		this.opacity = params.opacity;
		if (this.win._setOpacity) {
			this.win._setOpacity(params);
		} else if (!warningsSent.setOpacity) {
			warningsSent.setOpacity = true;
			Logger.system.warn("Window wrapper does not have a setOpacity Method");
		}
	}

	/**
  * Sets bounds for internal calculations.
  */
	setInternalBounds(bounds) {
		//window.methodCalls["setInternalBounds"]++;
		//Bunch of if statements was quicker than ternary operators when inside of loops.
		this.left = typeof bounds.left === "undefined" ? this.left : bounds.left;
		this.top = typeof bounds.top === "undefined" ? this.top : bounds.top;
		this.width = typeof bounds.width === "undefined" ? this.width : bounds.width;
		this.height = typeof bounds.height === "undefined" ? this.height : bounds.height;
		this.right = typeof bounds.right === "undefined" ? this.left + this.width : bounds.right;
		this.bottom = typeof bounds.bottom === "undefined" ? this.top + this.height : bounds.bottom;
		this.setBoundingBoxes();
	}

	/**
 * @function {function name}
 * @param  {type} bounds    {description}
 * @param  {type} successCB {description}
 * @param  {type} errCB     {description}
 * @return {type} {description}
 */
	setBounds(bounds, successCB, errCB) {
		this.setInternalBounds(bounds);
		bounds = {
			left: bounds.left,
			width: bounds.width,
			height: bounds.height,
			top: bounds.top,
			right: bounds.right,
			bottom: bounds.bottom,
			persistBounds: bounds.persistBounds
		};
		//window.methodCalls["setBounds"]++;
		this.win._setBounds({ bounds }, function () {
			if (successCB) {
				successCB();
			}
		}, errCB);
	}

	/**
 * @function {function name}
 * @param  {type} left {description}
 * @param  {type} top  {description}
 * @return {type} {description}
 */
	moveTo(left, top) {
		//window.methodCalls["moveTo"]++;
		this.setBounds({
			left: left,
			top: top,
			right: left + this.width,
			bottom: top + this.height,
			width: this.width,
			height: this.height
		});
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	getGroupNames() {
		return this.groupNames;
	}

	/**
 * @function {function name}
 * @param  {type} request  {description}
 * @param  {type} callback {description}
 * @return {type} {description}
 */
	requestBoundsChange(request, callback) {
		//window.methodCalls["requestBoundsChange"]++;
		//for testing purposes only - TODO: this is probably broken
		var self = this;
		if (!callback) {
			callback = self.onBoundsChanged;
		}
		System.getMousePosition((err, position) => {
			self.onBoundsChanging({
				data: {
					corners: this.getCornerObject(request),
					left: request.left,
					top: request.top,
					width: request.width,
					height: request.height,
					changeType: request.changeType,
					name: this.name,
					uuid: this.uuid,
					mousePosition: request.mousePosition || position
				}
			}, () => {
				if (callback) {
					callback();
				}
			});
		});
	}

	/********************************************
  *											*
  *			Helper Functions				*
  *											*
  ********************************************/

	/**
 * @function {function name}
 * @return {type} {description}
 */
	calculateInnerBoundingBox() {
		//window.methodCalls["calculateInnerBoundingBox"]++;
		var adjustment = this.bufferSize * 2;
		return {
			min: {
				x: this.left + adjustment,
				y: this.top + adjustment
			},
			max: {
				x: this.right - adjustment,
				y: this.bottom - adjustment
			}
		};
	}

	getInnerBoundingBox() {
		return this.innerBuffer;
	}

	/**
 * @function {function name}
 * @param  {type} bufferSize {description}
 * @return {type} {description}
 */
	setBufferSize(bufferSize) {
		this.bufferSize = bufferSize;
		this.setBoundingBoxes();
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	setBoundingBoxes() {
		let myBounds = this.getBounds();
		this.setBuffer();
		this.innerBuffer = this.calculateInnerBoundingBox();
		this.windowBoundingBox = __WEBPACK_IMPORTED_MODULE_0__boxMath__["a" /* default */].getWindowBoundingBox(myBounds);
		this.setSnappingRegions();
		this.vertices = this.getCornerObject(myBounds);
	}

	getSnappingRegions() {
		return this.snappingRegions;
	}

	updateState() {
		this.win._getBounds(null, (err, bounds) => {
			this.setBounds(bounds);
		});
	}

	hide(cb = Function.prototype) {
		this.win._hide(cb);
	}

	show(cb = Function.prototype) {
		this.win._show(cb);
	}

	minimize(cb = Function.prototype) {
		this.isMinimized = true;
		this.win._minimize(cb);
	}

	restore(cb) {
		this.isMinimized = false;
		this.win._restore(cb);
	}

	alwaysOnTop(isAlwaysOnTop) {
		try {
			this.win._alwaysOnTop({ alwaysOnTop: isAlwaysOnTop });
		} catch (e) {
			Logger.system.debug("Implement alwaysOnTop");
		}
	}

	bringToFront() {
		//window.methodCalls["bringToFront"]++;
		try {
			this.win._bringToFront();
		} catch (e) {
			Logger.system.error("Implement bringToFront");
		}
	}

	notifyWindowTitleBarOfGroupMembership() {
		if (typeof RouterClient !== "undefined") {
			RouterClient.transmit(this.name + ".groupMembershipChange", {
				type: "joined"
			});
		}
	}

	notifyWindowTitleBarOfGroupEjection() {
		if (typeof RouterClient !== "undefined") {
			RouterClient.transmit(this.name + ".groupMembershipChange", {
				type: "ejected"
			});
		}
	}

	addSnappedWindow(snapObj) {
		if (!this.snappedWindows) {
			this.snappedWindows = [];
		}
		var shouldAdd = true;
		for (var i = 0; i < this.snappedWindows.length; i++) {
			var snappedWin = this.snappedWindows[i];
			if (snappedWin.name === snapObj.name) {
				shouldAdd = false;
				break;
			}
		}

		if (shouldAdd) {
			this.snappedWindows.push(snapObj);
		}
	}

	removeSnappedWindow(name) {
		if (this.snappedWindows) {
			for (var i = 0; i < this.snappedWindows.length; i++) {
				var snappedWin = this.snappedWindows[i];
				if (name === snappedWin.name) {
					// Logger.system.log("Removing", name, "from", this.name);
					this.snappedWindows.splice(i, 1);
					return;
				}
			}
		}
	}

	animatePositionAndHeight(params, cb) {
		this.setInternalBounds(params);
		if (false) {
			//temporarily disable animations - look for this function in autoarrange.js
			this.win.animate({
				transitions: {
					position: {
						top: params.top || 0,
						left: params.left || 0,
						duration: params.duration || 175
					},
					size: {
						height: params.height || 100,
						width: params.width || 100,
						duration: params.duration || 175
					}
				}, options: null
			}, {
				persistBounds: true
			}, cb);
		} else if (this.win._setBounds) {
			params.persistBounds = true;
			this.win._setBounds({ bounds: params }, cb);
		}
	}

	isGrouped() {
		return this.groups.length;
	}

	/**
  * Adds eventListenrs so that when the finWIndow moves, we can do things with that data.
  */
	addListeners() {
		this.addEventListener(BOUNDS_CHANGED, this.onBoundsChanged);
		//this.addEventListener('bounds-changed', onBoundsChangedOutside);
		this.addEventListener(BOUNDS_CHANGING, this.onBoundsChanging);
		this.win.addEventListener("hidden", this.hiddenUnclaimSpace);
		this.win.addEventListener("shown", this.unhiddenClaimSpace);
	}
}
/* harmony default export */ __webpack_exports__["a"] = (DockableWindow);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockableWindow.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockableWindow.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 119 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__dockableMonitor__ = __webpack_require__(117);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__dockableGroup__ = __webpack_require__(116);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dockableBox__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__boxMath__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__maskBoundsCalculator__ = __webpack_require__(120);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__maskBoundsCalculator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__maskBoundsCalculator__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_async__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_async___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_async__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Common_Pools_PoolSingletons__ = __webpack_require__(96);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Common_Pools_PoolSingletons___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__Common_Pools_PoolSingletons__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__constants__ = __webpack_require__(98);








/** Singleton of the Logger class shared among all instances of DockingCalculator
 * @TODO Refactor to instance member of class.
 */
let Logger;
/** Singleton of the System class shared among all instances of DockingCalculator
 * @TODO Refactor to instance member of class.
 */
let System;
var RouterClient = null;
if (typeof window !== "undefined") {
	if (window.RouterClient) {
		//docking serviec
		RouterClient = window.RouterClient;
	}
}
if (typeof FSBL !== "undefined") {
	if (FSBL && FSBL.Clients.RouterClient) {
		//test runner
		RouterClient = FSBL.Clients.RouterClient;
	}
}

var MINIMUM_HEIGHT, MINIMUM_WIDTH, ALLOW_GROUPS_TO_SNAP;

var SNAPPING_OPACITY = 0.8;
var debug = false;
var restrictedAreas = [];

function uuidv4() {
	return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
		var r = Math.random() * 16 | 0,
		    v = c === "x" ? r : r & 0x3 | 0x8;
		return v.toString(16);
	});
}

/**
 * The pools are just the collection of windows that the DockingCalculator is concerned with
 */

var groupPool = __WEBPACK_IMPORTED_MODULE_6__Common_Pools_PoolSingletons__["GroupPoolSingleton"],

//@todo, investigate why I made this a global.
snappableWindows,

//Amount of wiggle room to give when trying to figure out whether the user was clicking a corner or not. Since windows can have different resize regions, there's no guarantee that the user will click directly on the corner of a window.
cornerTolerance = 15,

//Stationary and moving window are cached onMouseDown and cleared onMouseUp.
stationaryWindow = null,

//Windows to ignore for grouping functions (e.g., toolbar - it can snap, but shouldn't group)
groupBlacklist = [],

//@todo, investigate why I made this global. I suspect it was a mistake, or an early pass. This is used when resizing interior windows of a group.
joinedWindowNames = [],
    joinedWindows = [],

//This allows us to defer adding windows/removing windows from a group until onMouseDown. It's modified onMouseMove. @todo, just calculate it onMouseDown, ya dummy.
groupAction = {
	name: null,
	windows: []
},
    shortCircuit = false,
    monitorPool = __WEBPACK_IMPORTED_MODULE_6__Common_Pools_PoolSingletons__["MonitorPoolSingleton"];

function setBoundsErrorCB(err) {
	Logger.system.error(err);
}

/**
 *
 *
 * @returns
 */
class DockingCalculator {
	/**
  * @param {object} params Config for the Calclator
  * @param {object} dependencies Dependency object that provides the System, and Logger.
  * @param {System} dependencies.System
  * @param {Logger} dependencies.Logger
  */
	constructor(params, dependencies) {
		if (dependencies) {
			Logger = dependencies.Logger;
			System = dependencies.System;
		} else {
			throw new Error("DockingCalculator class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.");
		}

		//object that's created onMouseDown. Used to cache potentially expensive operations and common information needed accros functions.
		this.resizeObject = {};
		this.groupMode = {
			enabled: true
		};
		this.groupMask = null;
		//Placedholder for the moveRequest. @todo, see if this is necessary. Pretty sure I just pass the reference around everywhere.
		this.moveRequest = null;
		this.dockingPool = __WEBPACK_IMPORTED_MODULE_6__Common_Pools_PoolSingletons__["DockingPoolSingleton"];
		//See comment above.
		this.stationaryWindow = null;
		this.movingWindow = null;
		//Default bufferSize. Can be overwritten by `setBufferSize`.
		this.bufferSize = 15;
		this.resizeEventThrottlePeriod = 0;
		this.moveCount = 0;
		this.intersection = null;
		//The groupmask operations are asynchronous and take a variable amount of time. Generally speaking, show takes longer to complete than hide. So if you call show, and 4ms later call hide, you can finish hiding the group mask before the show has completed. This boolean tells the calculator whether the mask should be hidden or shown. Before calling .show or .hide, we check to see if the last function called matches. So if we expect the mask to be hidden, but we're about to call .show, we exit early.
		this.groupMaskExpectedState = "hidden";
		this.groupMaskQueue = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_async__["queue"])(function (task, callback) {
			task(callback);
		});
	}

	/****************************************
  * Core Loop
  * Docking works like this:
  * A dockableWindow receives a `bounds-change-request` event from the window object that it wraps (e.g., an openfin window). Then the docking calculator gets to work.
  * 1. `this.requestMove`.
  * 2. `this.onMouseDown`.
  * 3. `this.onMouseMove`.
  *
  * As the user moves her mouse around, steps 1 and 3 are executed.When she releases her mouse, the dockableWindow throws a `bounds-changed` event, which in turn calls `this.onMouseUp`.
  * The general idea is that the user says "Hey, I'd like to move my window 10px to the right of this window. The calculator spins through, notices that the window that the user is moving is within a snapping buffer around the other window. So it responds, "You're too close to that window, sorry, but we're snapping you.". If the movingWindow isn't within the stationaryWindow's buffer, we give the window the all clear to proceed.
  ****************************************/
	/**
 * This is the core controller of the program. It routes the window's moveRequest to the appropriate place, and it recieves the modified bounds afterwards. It communicates the modified bounds to the window via the CB.
 * @param  {moveRequest} Request from the `dockableWindow`.
 * @param  {function} cb What to do after the window's new bounds have been calculated.
 */
	requestMove(userRequest, cb) {
		// console.log("REQUEST MOVE", userRequest.changeType);
		if (!userRequest) {
			Logger.system.warn("INVESTIGATE: userRequest null or undefined in requestMove.");
			cb(null);
			return;
		}
		let win = this.getWindow(userRequest.name);

		if (!win) {
			cb(null);
			return Logger.system.warn("Got Move Request From Window Not Registered With Docking", userRequest.name);
		}

		if (win.isMaximized) {
			cb(null);
			return;
		}
		//Occasionally openfin bubbles up an incorrect change type. A resize from the top right would start with a changeType of 0. The next move will have the proper change type. If we detect that scenario, we need to reset the resizeObject.
		if (this.moveRequest && this.moveRequest === 0 && userRequest.changeType !== 0) {
			this.resizeObject = this.constructResizeObject(moveRequest);
		}
		// Force minimum height and width even if not in group.
		if (userRequest.changeType !== 0) userRequest = this.checkShortCircuits(userRequest);

		if (this.shiftKey && userRequest.changeType === 0 && userRequest.groupNames.length) {
			//Remove from group and move
			let groupNames = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(userRequest.groupNames);
			groupNames.forEach(groupName => {
				this.removeWindowFromGroup(userRequest.name, groupName);
				this.wipeSnapRelationships(userRequest.name);
			});

			if (this.updateGroupData) {
				this.updateGroupData();
			}
			userRequest.groupName = null;
		}
		function afterMove(bounds) {
			self.onMouseMove(bounds, cb);
		}
		groupAction = {
			name: null,
			windows: []
		};

		/***
   * The check below is to see whether we should call onMouseDown, which resets a lot of cached information for docking. There are a couple of cases where we want to call onMouseDown.
  	1. We don't have a cached movingWindow reference. This can mean that onMouseDown hasn't been called, _or_ the moving window was removed from docking before onMouseUp was called. This can be triggered by tiling operations.
  	2. We don't have a cached moveRequest.
  	3. We have a moverequest, but the incoming request has a different change type. The only time we've seen that is in the case of aero-snap. if you aero-snap a window to the side or top of a monitor, then move it, it sends in a changeType of 2 - change in position in size. In any normal world, this is a resize. But it comes in as though a user moved the window. That confuses docking.
   */
		if (!this.movingWindow || !this.moveRequest || this.moveRequest && this.moveRequest.changeType !== userRequest.changeType) {
			this.onMouseDown(userRequest);
		}

		var moveRequest = this.setMoveRequest(userRequest),
		    self = this;

		if (moveRequest.changeType === undefined) {
			moveRequest.changeType = 0;
		}

		moveRequest.groupNames = this.movingWindow.groupNames;
		moveRequest.movingRegion = this.resizeObject.correctedHandle;
		moveRequest.resizeHandle = moveRequest.forceResizeHandle ? moveRequest.resizeHandle : this.resizeObject.correctedHandle;

		if (this.groupMode.enabled && moveRequest.groupNames.length) {
			///Do something if in a group.
			this.handleGroup(moveRequest, afterMove);
			return;
		}

		this.checkBuffers(moveRequest, afterMove);
	}

	/**
  * Makes sure that the requested move is occuring in space that is unclaimed by toolbars or other components. This should prevent a window from resizing/moving on top of a toolbar until it passes a threshold.
  * @param {object} moveRequest moverequest.
  */
	makeSureMoveIsInUnclaimedSpace(moveRequest) {
		var unclaimedSpaceOverlaps = this.getUnclaimedSpaceOverlaps(moveRequest);
		var win = this.getWindow(moveRequest.name);
		for (var i = 0, len = unclaimedSpaceOverlaps.length; i < len; i++) {
			var overlap = unclaimedSpaceOverlaps[i];
			for (var e = 0, edgeLen = __WEBPACK_IMPORTED_MODULE_8__constants__["EDGES"].length; e < edgeLen; e++) {
				var edge = __WEBPACK_IMPORTED_MODULE_8__constants__["EDGES"][e];
				if (__WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].intersectBoundingBoxes(moveRequest.snappingRegions[edge], overlap)) {
					if (overlap.position === "top") {
						moveRequest.top = overlap.max.y;
						if (moveRequest.changeType === 0 && moveRequest.top === win.top) {
							moveRequest.bottom = moveRequest.top + win.height;
							moveRequest.height = win.height;
						} //do stuff;
					}
					if (overlap.position === "bottom") {
						moveRequest.bottom = overlap.min.y;
						if (moveRequest.changeType === 0 && moveRequest.bottom === win.bottom) {
							moveRequest.top = moveRequest.bottom - win.height;
							moveRequest.height = win.height;
						} //do stuff;
					}
					if (overlap.position === "right") {
						moveRequest.right = overlap.min.x;
						if (moveRequest.changeType === 0 && moveRequest.left === win.left) {
							moveRequest.left = moveRequest.right - win.width;
							moveRequest.width = win.width;
						}
					}
					if (overlap.position === "left") {
						moveRequest.left = overlap.max.x;
						if (moveRequest.changeType === 0 && moveRequest.right === win.right) {
							moveRequest.right = moveRequest.left + win.width;
							moveRequest.width = win.width;
						}
					}
				}
			}
		}
		if (moveRequest.changeType !== 0) {
			moveRequest.height = moveRequest.bottom - moveRequest.top;
			moveRequest.width = moveRequest.right - moveRequest.left;
		}

		return moveRequest;
	}

	/**
  * This function goes through the restricted areas, or claimedSpaces as they're called in the launcherService. If the moveRequest would cause the window to overlap with the claimed space, we return True - this is an invalid request. requestMove then just drops the request on the floor.
  */
	getUnclaimedSpaceOverlaps(moveRequest) {
		var innerBoundary = {
			min: {
				x: moveRequest.left + moveRequest.width * .25,
				y: moveRequest.top + moveRequest.height * .25
			},
			max: {
				x: moveRequest.right - moveRequest.width * .25,
				y: moveRequest.bottom - moveRequest.bottom * .25
			}
		};
		if (restrictedAreas.length) {
			var overlaps = [];
			for (var i = 0, len = restrictedAreas.length; i < len; i++) {
				var boundingBox = restrictedAreas[i];
				if (__WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].intersectBoundingBoxes(innerBoundary, boundingBox)) {
					return false;
				}
				if (__WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].intersectBoundingBoxes(__WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getWindowBoundingBox(moveRequest), boundingBox)) {
					overlaps.push(boundingBox);
				}
			}
			return overlaps;
		}
		return false;
	}

	/**
  * Windows can be part of two groups - one that can move, and one that allows shared border resizing/group resizing. When N windows are snapped together but not explicitly grouped together, they form an "immobileGroup". A movable group is one that the user has explicitly formed. This function returns the appropriate group, given a moveRequest.
  * @param {object} moveRequest moverequest.
  */
	getMovingGroup(moveRequest) {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "getMovingGroup", moveRequest.name);
		}

		//If snapped windows can't resize, we always want to return the movable group first.
		if (this.groupMode.allowSnappedWindowsToResize && moveRequest.changeType !== 0) {
			return this.getImmobileGroup(moveRequest.name) || this.getMovableGroup(moveRequest.name);
		}

		return this.getMovableGroup(moveRequest.name) || this.getImmobileGroup(moveRequest.name);
	}

	/**
  * This function caches information in the resizeObject so that it doesn't need to be calculated onMouseMove.
  */
	onMouseDown(moveRequest) {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "onMouseDown", moveRequest.name);
		}
		if (RouterClient) RouterClient.transmit("Assimilation.taskbar", { visible: false });

		if (this.moveCount === 0) {
			this.recalculateSnaps();
		}
		this.moveCount++;
		this.movingWindow = this.getWindow(moveRequest.name);
		this.movingWindow.resizeHandle = null;
		if (!this.movingWindow) {
			throw new Error("Window not found");
		}

		//When we mouse down on a dockable component, we need to store the monitor its on immediately. Sometimes, in a multi-monitor configuration, when the window undocks it will momentarily jump to another monitor (since the grabber when docked is always near a monitor edge). To prevent the moveAllWindowsOutOfClaimedSpace calculation from using the wrong monitor, we store it on the window to remove it later.
		if (this.movingWindow.isDockableComponent && this.movingWindow.isDocked) {
			this.movingWindow.dockedMonitor = this.getMonitorForWindow(this.movingWindow); // Not sure why this.movingWindow.monitor is wrong on restart (is always display1)
		}
		this.movingGroup = this.getMovingGroup(moveRequest);
		if (this.movingGroup) {
			this.movingGroup.startMove();
		} else {
			this.movingWindow.win.startMove();
		}
		if (this.groupMode.behavior === "explicit") {
			//If there's no moving group, then we're moving an individual window. if it's part of a resizableGroup, it needs to be removed from that group.
			if (moveRequest.changeType === 0 && this.movingGroup && !this.movingGroup.isMovable) {
				this.removeWindowFromGroup(moveRequest.name, this.movingGroup.name);
				this.wipeSnapRelationships(moveRequest.name);
			}
		}
		this.resizeObject = this.constructResizeObject(moveRequest);

		let dockingPoolIterator = this.dockingPool.iterator();
		for (let win of dockingPoolIterator) {
			if (win.name !== moveRequest.name) {
				win.hideTaskbarIcon();
			}
		}

		if (this.resizeObject.scalingGroup) {
			let groupIter = this.groupWindowIterator(this.movingGroup);
			for (let win of groupIter) {
				win.hide();
			}
			__WEBPACK_IMPORTED_MODULE_4__maskBoundsCalculator___default.a.mouseDown(this.movingGroup.getBounds(), moveRequest.mousePosition, this.resizeObject);
			this.showGroupMask({ bounds: this.movingGroup.getBounds(), opacity: 0.5 }, () => {});
		}
	}

	hideGroupMask(cb = Function.prototype) {
		this.groupMaskExpectedState = "hidden";
		this.groupMaskQueue.push(done => {
			if (this.groupMaskExpectedState === "shown") {
				cb();
				return done();
			}
			this.groupMask.win._hide({}, () => {
				this.groupMaskIsVisible = false;
				cb();
				done();
			});
		});
	}

	/**
  * Transparency breaks often with group mask. So use this to show it.
  *
  * @param {any} bounds
  * @param {number} [opacity=0.5]
  * @param {any} [cb=Function.prototype]
  * @memberof DockingCalculator
  */
	showGroupMask(params, cb = Function.prototype) {
		this.groupMaskExpectedState = "shown";
		//console.log("in show group mask", this.groupMaskIsVisible);
		let bounds = params.bounds;
		let groupMaskBounds = this.groupMask.getBounds();
		if (this.groupMaskIsVisible && groupMaskBounds.top == bounds.top && groupMaskBounds.left == bounds.left && groupMaskBounds.height == bounds.height && groupMaskBounds.width == bounds.width) {
			return cb();
		}

		this.groupMask.setBounds(params.bounds, () => {
			this.groupMask.win._updateOptions({ opacity: params.opacity }, () => {
				this.groupMaskQueue.push(done => {
					if (this.groupMaskExpectedState === "hidden") {
						cb();
						return done();
					}
					this.groupMask.win._show({}, () => {
						this.groupMask.win._bringToFront({}, () => {
							this.groupMaskIsVisible = true;
							cb();
							done();
						});
					});
				});
			});
		});
	}

	/**
  * Show the modal scrim
  *
  * @memberof DockingCalculator
  */
	showModalScrim(params, cb = Function.prototype) {
		System.getMonitorInfo(info => {
			let bounds = info.virtualScreen;
			bounds.width = bounds.right - bounds.left;
			bounds.height = bounds.bottom - bounds.top;
			this.modalScrim.setBounds(bounds, () => {
				this.modalScrim.win._updateOptions({ opacity: 0.01 }, () => {
					this.modalScrim.show(() => {
						this.modalScrim._bringToFront(() => {
							cb();
						});
					});
				});
			});
		});
	}

	hideModalScrim() {
		this.modalScrim.win._updateOptions({ opacity: 0 }, () => {
			this.modalScrim.setBounds({ top: -40, left: -40, height: 40, width: 40 }, () => {
				this.modalScrim.hide();
			}, () => {
				this.modalScrim.hide();
			});
		});
	}

	/**
  * This function happens _after_ the calculations have been made. The request comes in, `this.requestMove` routes the request to the appropriate place, and modified bounds are passed into this function. It's a choke point for all docking-sanctioned window movement.
  */
	onMouseMove(bounds, cb) {
		this.fixWindowOpacity({
			checkForSnappability: true
		});
		if (this.resizeObject.scalingGroup) {
			this.moveGroupMask();
		}
		if (bounds.finished) {
			if (typeof bounds.top !== "undefined") {
				this.moveWindow(bounds);
			}
			cb(null);
		}
	}

	/**
 * When the user lifts her mouse, this is fired. It cleans up opacity, shows windows if we were moving a group, and cleans up global variables.
 *
 * @param {boolean} triggeredByAutoArrange [false] Tells the mouse up routine if this was fired by auto arrange, if it was we don't want to delete cached window positions
 */
	onMouseUp(triggeredByAutoArrange = false) {
		if (!this.movingWindow) return;
		if (this.movingWindow && this.movingWindow.isMaximized) {
			return;
		}
		if (RouterClient) RouterClient.transmit("Assimilation.taskbar", { visible: true });
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "onMouseUp", "movingAGroupOfWindows", this.movingAGroupOfWindows, "groupMode", this.groupMode, "resizeObject", this.resizeObject);
		}

		if (this.movingAGroupOfWindows) {
			//@todo refactor. correct sounds dumb.
			this.resizeObject = this.correctResizeObject(this.movingWindow, this.resizeObject);
			this.movingGroup.scale(this.groupMask.getBounds(), this.resizeObject.handle, this);
			this.hideGroupMask();
			var groupIter = this.groupWindowIterator(this.movingGroup);
			for (let win of groupIter) {
				win.show();
			}
			this.movingAGroupOfWindows = false;
		}

		let dockingPoolIterator = this.dockingPool.iterator();
		for (let win of dockingPoolIterator) {
			this.buildSnapRelationships(win);
			if (win.snappedWindows.length === 0 && win.groupNames.length) {
				this.removeWindowFromAllGroups(win);
			}

			//Band-aid to prevent aeroshake from pummeling the application.
			win.showTaskbarIcon();
		}

		let movedWin = {
			name: this.movingWindow.name,
			monitor: this.getMonitorForWindow(this.movingWindow)
		};

		stationaryWindow = null;
		dockingPoolIterator = this.dockingPool.iterator();
		for (let win of dockingPoolIterator) {
			win.resizeHandle = null;
			if (win.groupNames.length) {
				win.groupNames.forEach(groupName => {
					let group = this.getGroup(groupName);
					group.updateBounds();
				});
			}
		}

		joinedWindows = [];
		joinedWindowNames = [];
		//If we did a group operation, call stopMove, which triggers a bounds save.
		if (this.movingGroup) {
			this.movingGroup.stopMove();
		} else {
			this.movingWindow.win.stopMove();
		}

		//If we mouse up on a dockable component we need to check if it should be docked. If it should, we have to call to move the window since we also want to expand one side or another. Since a docked window expands to take the width (or height) of the monitor.
		let monitor = movedWin.monitor;
		let modifiedRequest = this.moveRequest;
		if (modifiedRequest) {
			if (this.movingWindow.isDockableComponent && !this.movingWindow.isDocked && this.movingWindow.snappedMonitor) {
				modifiedRequest.dockedHeight = this.movingWindow.dockedParams.height; //TODO: This will only work when docking top/bottom (which is all that's allowed for now)
				modifiedRequest = monitor.dockWindowToMonitor(this.moveRequest);
				if (modifiedRequest) {
					this.moveWindow(modifiedRequest, Function.prototype);
				}
			}
		}
		this.hideGroupMask();

		this.movingGroup = null;
		this.movingWindow = null;
		this.resizeObject = {};
		//moveRequest is null on groupmask resizes..sometimes.
		//@todo, investigate.
		if (this.moveRequest && this.groupMode.enabled && groupAction.name) {
			// let group = this.getGroup(groupAction.name);
			// for (let windowName in groupAction.windows) {
			// 	if (groupBlacklist.includes(windowName)) {
			// 		delete groupAction.windows[windowName];
			// 	}
			// }

			// if (group || (Object.keys(groupAction.windows).length > 1)) {
			// 	for (let windowName in groupAction.windows) {
			// 		Logger.system.verbose(windowName);
			// 		this.addWindowToGroup({
			// 			groupName: groupAction.name,
			// 			win: this.getWindow(windowName)
			// 		});
			// 	}
			// }
			this.formGroup(this.moveRequest.name, { isMovable: false });
		}
		this.moveRequest = null;
		this.fixWindowOpacity({
			checkForSnappability: false,
			persist: true
		});

		shortCircuit = false;

		//function below defined by the service. Tell it which monitor the window was on when it moved.
		if (this.onMoveComplete) {
			this.onMoveComplete(movedWin, triggeredByAutoArrange);
		}
	}

	/**
 * Moves one window into claimed space, if outside of said space.
 *
 * @param {object} dockedWin The window that has been docked. Its height/width will be used to determine where to move other windows to
 * @param {array} monitors An array of monitors. Will be used to determine what windows are where, and what needs to move
 * @param {object} windowName the window to move
 * @param {function} done callback on completion
 */
	moveWindowOutOfClaimedSpace(dockedWin, monitors, windowName, done = Function.prototype) {
		var self = this;

		let win = self.getWindow(windowName);
		if (win.name === dockedWin.name) return done();
		//gets set once we find the monitor for the window.
		let isDone = false;
		for (let i = 0; i < monitors.length; i++) {
			let mon = monitors[i];
			//Only need to move windows if the current monitor is the one we docked too and if the current window is on said monitor
			if (dockedWin.monitor.name === mon.name && win.monitor.name === mon.name) {
				let { availableRect, unclaimedRect } = mon.rawMonitor;
				let newBounds = {
					left: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(win.left),
					right: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(win.right),
					top: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(win.top),
					bottom: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(win.bottom),
					height: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(win.height),
					width: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(win.width),
					changeType: 1,
					name: win.name,
					hasChanged: false,
					processSnaps: false
				};

				//If we're docking a window to the top of the monitor, and the top another window is in claimed space, resize it so that the window shrinks by the height of the newly docked window. This basically squishes the window out of space it shouldn't be in.
				if (dockedWin.monitorDockablePositions.TOP === dockedWin.dockedPosition) {
					if (win.top <= availableRect.top) {
						newBounds.top = unclaimedRect.top + dockedWin.bottom;
						newBounds.height = newBounds.bottom - newBounds.top;
						newBounds.hasChanged = true;
						newBounds.mousePosition = {
							x: win.left + win.width / 2,
							y: newBounds.top
						};
					}
				}

				if (dockedWin.monitorDockablePositions.BOTTOM === dockedWin.dockedPosition) {
					if (win.bottom >= availableRect.bottom) {
						newBounds.bottom = dockedWin.top;
						newBounds.height = newBounds.bottom - newBounds.top;
						newBounds.hasChanged = true;
						newBounds.mousePosition = {
							x: win.left + win.width / 2,
							y: newBounds.bottom
						};
					}
				}

				if (newBounds.hasChanged) {
					delete newBounds.hasChanged;
					isDone = true;
					self.requestMove(newBounds, res => {
						self.onMouseUp(false);
						done();
					});
				}
			}
		}

		if (!isDone) {
			done();
		}
	}

	/**
  * Loops through monitors/windows and moves any windows that are in claimed space outside of said space.
  *
  * @param {object} dockedWin The window that has been docked. Its height/width will be used to determine where to move other windows to
  * @param {array} monitors An array of monitors. Will be used to determine what windows are where, and what needs to move
  */
	moveAllWindowsOutOfClaimedSpace(dockedWin, monitors) {
		this.movingWindow = null;
		let windowNames = this.getWindowNames();

		var moveOne = (windowName, done) => {
			this.moveWindowOutOfClaimedSpace(dockedWin, monitors, windowName, done);
		};

		__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_async__["eachSeries"])(windowNames, moveOne, Function.prototype);
	}

	/**
  * Adjusts the claimed/available space of a monitor based on the docked window supplied to it
  *
  * @param {object} params
  * @param {string} params.action "dock" or "undock". The action determines wether space is claimed or released.
  * @param {object} params.win The window being docked
  * @param {object} params.monitor The monitor the window is docking to
  * @param {integer} params.location An enum from DockableWindow. A number that ties back to a docking location
  */
	adjustClaimedSpace(params) {
		if (params.action === undefined || params.dockableWin === undefined || params.dockableMonitor === undefined || params.location === undefined) {
			return;
		}
		let { action, dockableWin: win, dockableMonitor: monitor, location } = params;
		Logger.system.warn("Adjust claimed space", action, location);

		let adjustedMonitor;
		switch (action) {
			case "dock":
				adjustedMonitor = this.claimSpace(win, monitor, location);
				win.isClaimingSpace = true;
				break;
			case "undock":
				adjustedMonitor = this.releaseClaimedSpace(win, monitor);
				win.isClaimingSpace = false;
				break;
			default:
				break;
		}

		return adjustedMonitor;
	}

	/**
  * Releases claimed space for an undocked window.
  *
  * @param {object} win The window being undocked
  * @param {object} monitor The monitor the window is undocking from
  * @return {object} The modified monitor with new unclaimedRect (released space)
  */
	releaseClaimedSpace(win, monitor) {
		let availableRect = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(monitor.availableRect);

		Logger.debug("RELEASING CLAIMED SPACE, unclaimedRect is being set to availableRect");
		monitor.unclaimedRect = availableRect;
		["left", "top", "right", "bottom", "height", "width"].forEach(dimension => {
			monitor[dimension] = availableRect[dimension];
		});
		monitor.calculateSnappingRegions();
		return monitor;
	}

	/**
  * Called when a window is docked in order to claim that space and not allow other windows inside of it
  *
  * @param {object} win The window being docked
  * @param {object} monitor The monitor the window is being docked to
  * @param {integer} location An enum from DockableWindow. A number that ties back to a docking location
  * @return {object} The modified monitor with new unclaimedRect (claimed space)
  */
	claimSpace(win, monitor, location) {
		let unclaimedRect = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(monitor.unclaimedRect);

		//TODO: Handle LEFT and RIGHT cases.
		switch (location) {
			case win.monitorDockablePositions.TOP:
				unclaimedRect.top = unclaimedRect.top + win.dockedParams.height;
				Logger.debug("CLAIMING SPACE, unclaimed.top now: ", unclaimedRect.top);
				break;
			case win.monitorDockablePositions.BOTTOM:
				unclaimedRect.bottom = unclaimedRect.bottom - win.dockedParams.height;
				Logger.debug("CLAIMING SPACE, unclaimed.bottom now: ", unclaimedRect.bottom);
				break;
			default:
				break;
		}
		//!NOTE: This may need to be moved inside of the TOP and BOTTOM blocks as it won't be applicable when docking left or right
		unclaimedRect.height = unclaimedRect.bottom - unclaimedRect.top;
		["left", "top", "right", "bottom", "height", "width"].forEach(dimension => {
			monitor[dimension] = unclaimedRect[dimension];
		});
		monitor.unclaimedRect = unclaimedRect;
		return monitor;
	}

	/**
  * Updates local references of monitor information. Happens when a user removes/adds a monitor.
  */
	updateMonitorInfo(monitorUpdate) {
		restrictedAreas = [];
		//@todo, pick up zones that are off limits from terry's update.
		monitorUpdate.forEach(monitor => {
			//Push updated bounds to the pool.
			if (monitor instanceof __WEBPACK_IMPORTED_MODULE_0__dockableMonitor__["a" /* default */]) {
				//Monitor needs to be removed and then readded. The old code monitorPool[monitor.name] = monitor will no longer work since there is an inner object in a pool called 'objects'. This needs to be updated by the pools getters and setters.
				monitorPool.remove(monitor.name);
				monitorPool.add(monitor.name, monitor);
			}
			if (monitor.availableRect.top !== monitor.unclaimedRect.top) {
				restrictedAreas.push({
					min: {
						x: monitor.unclaimedRect.left,
						y: monitor.availableRect.top
					},
					max: {
						x: monitor.unclaimedRect.right,
						y: monitor.unclaimedRect.top
					},
					position: "top"
				});
			}
			if (monitor.availableRect.left !== monitor.unclaimedRect.left) {
				restrictedAreas.push({
					min: {
						x: monitor.availableRect.left,
						y: monitor.unclaimedRect.top
					},
					max: {
						x: monitor.unclaimedRect.right,
						y: monitor.unclaimedRect.bottom
					},
					position: "left"

				});
			}

			if (monitor.availableRect.right !== monitor.unclaimedRect.right) {
				restrictedAreas.push({
					min: {
						x: monitor.unclaimedRect.right,
						y: monitor.unclaimedRect.top
					},
					max: {
						x: monitor.availableRect.right,
						y: monitor.unclaimedRect.bottom
					},
					position: "right"

				});
			}
			if (monitor.availableRect.bottom !== monitor.unclaimedRect.bottom) {
				restrictedAreas.push({
					min: {
						x: monitor.unclaimedRect.left,
						y: monitor.unclaimedRect.bottom
					},
					max: {
						x: monitor.unclaimedRect.right,
						y: monitor.availableRect.bottom
					},
					position: "bottom"

				});
			}
		});
	}

	/****************************************
  *	  Calculators - Window Collections 	*
  ****************************************/
	formGroup(name, params) {
		let { isMovable, whitelist, isAlwaysOnTop } = params;
		var self = this;
		if (!whitelist) {
			whitelist = this.getWindowNames();
		}
		let win = this.getWindow(name);
		let windows = win.snappedWindows.map(snapObj => snapObj.name).filter(name => {
			return whitelist.includes(name);
		});

		let processed = [win.name];
		function getSnappedWindows(windo) {
			processed.push(windo.name);
			let snappedWindows = windo.snappedWindows.map(snapObj => snapObj.name).filter(name => {
				return whitelist.includes(name);
			});
			windo.snappedWindows.forEach(snapObj => {
				if (!processed.includes(snapObj.name) && whitelist.includes(snapObj.name)) {
					let snapWin = self.getWindow(snapObj.name);
					let grandSnaps = getSnappedWindows(snapWin);
					snappedWindows = snappedWindows.concat(grandSnaps);
				}
			});
			return snappedWindows;
		}

		win.snappedWindows.forEach(snapObj => {
			if (whitelist.includes(snapObj.name)) {
				let snapWin = self.getWindow(snapObj.name);
				let snappedWindows = getSnappedWindows(snapWin);
				windows = windows.concat(snappedWindows);
			}
		});
		//dedupe.
		windows = windows.filter(function (el, i, arr) {
			return arr.indexOf(el) === i;
		});
		if (windows.length) {
			this.groupWindows({ windows, isMovable: isMovable, isAlwaysOnTop: isAlwaysOnTop });
		}
		return windows;
	}

	/**
 * Spins through all of the windows that can group and creates groups based on window position.
 */
	constituteGroups() {
		for (var groupName in this.getGroups()) {
			this.removeGroup(groupName);
		}
		this.eliminateGaps();
		var dockingPoolIterator = this.dockingPool.iterator();
		for (var win of dockingPoolIterator) {
			if (groupBlacklist.includes(win.name)) {
				continue;
			}

			var groupList = this.getGroupNames();
			if (!Object.keys(groupList).length) {
				this.addWindowToGroup({
					groupName: uuidv4(),
					win: win
				});
				continue;
			}
			this.buildSnapRelationships(win);
			var snappedWindows = win.snappedWindows;
			for (var i = 0, len = snappedWindows.length; i < len; i++) {
				var snapObj = snappedWindows[i];
				var snappedWindow = this.getWindow(snapObj.name);
				if (win.groupNames.length) {
					win.groupNames.forEach(groupName => {
						this.addWindowToGroup({
							groupName: groupName,
							win: snappedWindow
						});
					});
				} else if (snappedWindow && snappedWindow.groupNames.length) {
					snappedWindow.groupNames.forEach(groupName => {
						this.addWindowToGroup({
							groupName: groupName,
							win: win
						});
					});
				} else {
					let groupParams = {
						name: uuidv4(),
						MINIMUM_HEIGHT: this.MINIMUM_HEIGHT,
						MINIMUM_WIDTH: this.MINIMUM_WIDTH
					};
					var newGroup = new __WEBPACK_IMPORTED_MODULE_1__dockableGroup__["a" /* default */](groupParams, {
						Logger
					});
					this.addGroup(newGroup);
					this.addWindowToGroup({
						groupName: newGroup.name,
						win: win
					});
					this.addWindowToGroup({
						groupName: newGroup.name,
						win: snappedWindow
					});
				}
			}
		}
	}

	/**
 * Given a moveRequest, it returns an array of windowNames. The check essentially boils down to "is this window within my snapping buffer?"
 * @param  {moveRequest} moveRequest
 */
	getSnappableWindows(moveRequest) {
		var snappableWindows = [];
		var windowIter = this.dockingPool.iterator();
		for (let win of windowIter) {
			//if moveRequest puts the window inside of the stationary window's buffer, snap.
			if (moveRequest.name === win.name) {
				continue;
			}
			if (!win.ignoreSnappingRequests && win.canSnapToWindow(moveRequest) && !moveRequest.ignoreSnappingRequests) {
				snappableWindows.push(win.name);
			}
		}

		return snappableWindows;
	}

	/**
 * Checks to see if the window is within the snapping region of any monitor.
 * @todo, make setBufferSize trickles down to monitors.
 */
	getSnappableMonitors(moveRequest) {
		var monitorNames = Object.keys(monitorPool.getAll()),
		    snappableMonitors = [];
		for (var i = 0, len = monitorNames.length; i < len; i++) {
			var monitorName = monitorNames[i];
			var monitor = monitorPool.get(monitorName);

			if (monitor.canSnapToWindow(moveRequest)) {
				snappableMonitors.push(monitorName);
			}
		}

		return snappableMonitors;
	}

	/**
  * Returns an object that describes the edges and corners that are shared between two windows.
  */
	getSnapObj(win1, win2) {
		return {
			canGroup: !groupBlacklist.includes(win2.name),
			name: win2.name,
			edges: win1.getSharedEdges(win2),
			corners: win1.getSharedCorners(win2)
		};
	}

	/**
  * Snaps two windows..
  */
	snapTwoWindows(win1, win2) {
		if (groupBlacklist.includes(win1.name) || groupBlacklist.includes(win2.name)) {
			return;
		}
		win1.addSnappedWindow(this.getSnapObj(win1, win2));
		win2.addSnappedWindow(this.getSnapObj(win2, win1));
	}

	/**
  * Wipes all relationships between windows and recalculates them.
  */
	recalculateSnaps() {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "RECALCULATING SNAP RELATIONSHIPS");
		}
		var windowIter = this.dockingPool.iterator();
		for (let win of windowIter) {
			this.buildSnapRelationships(win);
			if (win.groupNames.length) {
				win.groupNames.forEach(groupName => {
					let group = this.getGroup(groupName);
					group.updateBounds();
				});
			}
		}
	}

	/**
 * Returns an array of `snapObject`s. Just name, shared edges, shared corners, and whether the window canGroup.
 * @param  {dockableWindow} win
 */
	buildSnapRelationships(win) {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "ws buildSnapRelationships", win.name);
		}
		if (win.snappedWindows.length) {
			this.wipeSnapRelationships(win.name);
		}
		var snappedWindows = [];
		var dockingPoolIterator = this.dockingPool.iterator();

		for (var snappedWindow of dockingPoolIterator) {
			if (debug) {
				Logger.system.debug("forceObjectsToLogger", "ws dockingPoolIterator", snappedWindow.name);
			}
			if (snappedWindow.name === win.name) {
				continue;
			}
			if (debug) {
				Logger.system.debug("forceObjectsToLogger", "ws win.sharesAnEdgeWith(snappedWindow)", win.sharesAnEdgeWith(snappedWindow));
			}
			if (win.sharesAnEdgeWith(snappedWindow) || win.sharesACornerWith(snappedWindow)) {
				this.snapTwoWindows(win, snappedWindow);
			}
		}
		return snappedWindows;
	}

	/**
 * Returns any window with a vertex on a segment.
 * @param  {segment} segment A line segment. An array with 2 points in it (start and end).
 * @return {type}
 */
	getWindowsOnSegment(segment) {
		var windowsOnSegment = [];
		var dockingPoolIterator = this.dockingPool.iterator();
		var points = [segment.min, segment.max];
		for (var win of dockingPoolIterator) {
			for (var p = 0, len = points.length; p < len; p++) {
				var point = points[p];
				if (win.pointIsOnBoundingBox(point)) {
					let snapObj = {
						name: win.name,
						edge: win.getEdgeByPoint(point)
					};
					snapObj.segment = win.getEdges("obj")[snapObj.edge];
					windowsOnSegment.push(snapObj);
					break;
				}
			}
		}
		return windowsOnSegment;
	}

	/**
 * Not sure why this function doesn't use the one above. Similar functionality, but you can pass in a string instead of a line segment.
 * @todo, make it use the function above.
 * @param  {dockableWindow} win
 * @param  {string} edge E.g., 'left', 'right', etc.
 * @return {array}
 */
	getWindowsOnEdge(win, edge, includeCorners) {
		if (includeCorners === undefined) {
			includeCorners = false;
		}
		var windowsOnEdge = [];
		if (!edge) {

			//@todo, what went wrong to cause this.................
			return [];
		}
		var splitEdge = edge.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});
		if (splitEdge.length > 1) {
			let cornerPoint = win.getPointByVertex(edge);
			var windowsAtCorner = this.getWindowsAtPoint(cornerPoint);

			for (let i = 0, len = windowsAtCorner.length; i < len; i++) {
				let possibleSnapper = this.getWindow(windowsAtCorner[i]);

				windowsOnEdge.push({
					name: possibleSnapper.name,
					edge: possibleSnapper.getVertexByPoint(cornerPoint)
				});
			}
		} else {
			var oppEdge = __WEBPACK_IMPORTED_MODULE_8__constants__["OPPOSITE_EDGE_MAP"][edge];
			var dockingPoolIterator = this.dockingPool.iterator();
			var windowSegment = win.getEdges("obj", includeCorners)[edge];

			for (let possibleSnapper of dockingPoolIterator) {
				if (possibleSnapper.name === win.name) {
					continue;
				}
				let segment = possibleSnapper.getEdges("obj", includeCorners)[oppEdge];
				var shouldPush = false;
				let points = [{
					name: possibleSnapper.name,
					val: segment.min
				}, {
					name: possibleSnapper.name,
					val: segment.max
				}, {
					name: win.name,
					val: windowSegment.min
				}, {
					name: win.name,
					val: windowSegment.max
				}];
				if (["top", "bottom"].includes(edge)) {
					if (segment.min.y !== windowSegment.min.y) {
						continue;
					}
					points = points.sort((a, b) => {
						return a.val.x > b.val.x;
					});
				}

				if (["left", "right"].includes(edge)) {
					if (segment.min.x !== windowSegment.min.x) {
						continue;
					}
					points = points.sort((a, b) => {
						return a.val.y > b.val.y;
					});
				}
				if (points[0].name !== points[1].name) {
					shouldPush = true;
				}
				if (shouldPush) {
					if (debug) {
						Logger.system.debug("forceObjectsToLogger", windowSegment, segment, win.name, possibleSnapper.name, edge);
					}
					let snapObj = {
						name: possibleSnapper.name,
						edge: oppEdge
					};
					windowsOnEdge.push(snapObj);
				}
			}
		}

		return windowsOnEdge;
	}

	/**
 * Returns a list of windows that straddle a given edge.
 *	+-----------+------------+
 *	|           |            |
 *	|           |            |
 *	|    A      |     B      |
 *	|           |            |
 *	+-----------+--+---------+
 *	|              |         |
 *	|    C         |   D     |
 *	|              |         |
 *	+--------------+---------+
 *
 * In the drawing above, B straddles the left edge of D and the right Edge of C.
 * @param  {dockableWindow} win
 * @param  {string} edge E.g., 'left', 'right', etc.
 */
	getStraddlers(win, edge) {
		var straddlers = [];
		var dockingPoolIterator = this.dockingPool.iterator();
		for (var straddler of dockingPoolIterator) {

			if (straddler.name === win.name) {
				continue;
			}

			var corners = straddler.vertices;
			for (var corner in corners) {
				if (win.pointIsOnBoundingBox(corners[corner], false)) {
					straddlers.push({
						name: straddler.name,
						edge: win.getEdgeByPoint(corners[corner])
					});
				}
			}
		}
		return straddlers;
	}

	/**
 * Given an X, Y point, it returns a list of windows with that point on their boundingBox.
 * @param  {object} point
 * @return {array}
 */
	getWindowsAtPoint(point) {
		var windows = [];

		var dockingPoolIterator = this.dockingPool.iterator();
		for (var win of dockingPoolIterator) {
			if (groupBlacklist.includes(win.name)) {
				continue;
			}
			if (win.pointIsOnBoundingBox(point)) {
				windows.push(win.name);
			}
		}
		return windows;
	}

	/**
 * Just a helper to say whether a window has an edge on the edge of the group.
 * @todo refactor to just compare win[edge] to group[edge].
 * @param  {dockableWindow} win
 * @param  {dockableGroup} group
 */
	windowIsOnExteriorEdgeOfGroup(win, group) {
		var winBounds = win.windowBoundingBox;
		var groupBounds = group.bounds;
		//left
		if (winBounds.min.x === groupBounds.min.x) {
			return true;
		}
		//bottom
		if (winBounds.max.y === groupBounds.max.y) {
			return true;
		}
		//right
		if (winBounds.max.x === groupBounds.max.x) {
			return true;
		}
		//top
		if (winBounds.min.y === groupBounds.min.y) {
			return true;
		}

		return false;
	}

	/**
  * Lets the program know that shift is being held down. This is used when moving a window that's explicitly grouped (if assimilation is turned on). In that case, the window moves out of the group.
  */
	setShift(bool) {
		this.shiftKey = bool;
	}

	/**
 * Returns an ordered Object. Sorts by Top, then Left.
 * @return {Object} Object where the keys are names of the window.
 */
	orderWindows(windowList, anchor) {
		//TODO: move this into group (see groupWindowIterator, scaleGroup, group.scale)
		//sort windows by top so that when we constitute groups it won't randomly compare windows in the bottom to ones in the top of the monitor.
		var sortableArray = [];
		if (windowList === undefined) {
			windowList = this.dockingPool.getAll();
		}
		for (var windowName in windowList) {
			var win = this.getWindow(windowName);
			sortableArray.push(win);
		}
		sortableArray.sort(function (a, b) {
			var aTop = a.top;
			var aLeft = a.left;

			var bTop = b.top;
			var bLeft = b.left;
			//if the window's top is above the anchor's top, compare its bottom to the anchor's top. In a 3x3 grid, this will ensure that windows in row 2 end up after windows in row 3. Looking at the grid below, if we just compared the window's top to the anchor's top, window D would appear in the array before D, even though D is closer to G. By comparing the bottoms of windows above the anchor, we force the algo to look at the left instead of the top. That all may be a crock of shit, too. I Basically, if I resize from the top-right of this group I want it to go: G, H, I, D, E, F, A, B, C. The algo below does that.
			/**
    * +-----------+--------------+-------------+
    * |           |              |             |
    * |           |              |             |
    * |    A      |      B       |     C       |
    * |           |              |             |
    * |           |              |             |
    * +-----------+              +-------------+
    * |           +--------------+             |
    * |           |              |             |
    * |    D      |      E       |      F      |
    * |           |              |             |
    * +----------------------------------------+
    * |           |              |             |
    * |           |              |             |
    * |   G       |       H      |      I      |
    * |           |              |             |
    * |           |              |             |
    * +-----------+--------------+-------------+
    */
			if (anchor) {
				let aDelta = {
					left: Math.abs(anchor.left - a.left),
					top: a.bottom === anchor.top ? Math.abs(anchor.top - a.bottom) : Math.abs(anchor.top - a.top)
				};
				let bDelta = {
					left: Math.abs(anchor.left - b.left),
					top: b.bottom === anchor.top ? Math.abs(anchor.top - b.bottom) : Math.abs(anchor.top - b.top)
				};

				if (aDelta.left === bDelta.left) {
					return aDelta.top > bDelta.top;
				}
				return aDelta.left > bDelta.left;
			}
			//orders windows ascending by their Top values.
			if (aTop === bTop) {
				return aLeft - bLeft;
			}
			return aTop - bTop;
		});

		return sortableArray;
	}

	/****************************************
  *			Getters/Setters				*
  ****************************************/
	/**
 * Registers the window with the calculator
 * @param  {string} name
 * @param  {dockableWindow} val
 */
	addWindow(name, val) {
		val.setBufferSize(this.bufferSize);
		val.setResizeThrottlePeriod(this.resizeEventThrottlePeriod);
		this.dockingPool.add(name, val);
		val.limits = {
			minHeight: val.dockingOptions.minHeight,
			minWidth: val.dockingOptions.minWidth,
			maxHeight: val.dockingOptions.maxHeight,
			maxWidth: val.dockingOptions.maxWidth
		};
		val.monitor = this.getMonitorForWindow(val);
		if (val.groupName) {
			let group = this.getGroup(val.groupName);
			group.addWindow(val);
		}
		this.buildSnapRelationships(val);
	}

	/**
  * Virtually unsnaps a window from all other windows. This doesn't affect physical positioning. Only the relationships that Docking is a warae of.
  */
	wipeSnapRelationships(name) {
		let win = this.getWindow(name);
		if (win && win.snappedWindows) {
			let snappedWindows = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(win.snappedWindows);
			for (var i = 0, len = snappedWindows.length; i < len; i++) {
				var snapObj = snappedWindows[i];
				var snappedWindow = this.getWindow(snapObj.name);
				win.removeSnappedWindow(snappedWindow.name);
				if (snappedWindow) {
					snappedWindow.removeSnappedWindow(win.name);
				}
			}
		}
	}

	/**
  * Removes a window from all groups.
  */
	removeWindowFromAllGroups(win, deleteGroupsWithOneWindow = true) {
		if (!win) {
			Logger.system.warn("INVESTIGATE: No win passed to removeWindowFromAllGroups.");
			return;
		}
		let groupNames = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(win.groupNames);
		for (var i = 0, len = groupNames.length; i < len; i++) {
			var groupName = groupNames[i];
			this.removeWindowFromGroup(win.name, groupName, deleteGroupsWithOneWindow);
		}
	}

	/**
 * Deregisters the window.
 * @param  {string} name
 */
	removeWindow(name, removeListeners = true) {

		let win = this.getWindow(name);
		if (!win) {
			Logger.system.warn("window was not found:", name);
			return;
		}
		//Removes event listeners from the window.
		if (removeListeners) {
			win.removeEventListeners();
		}
		if (!win) {
			Logger.system.warn(`INVESTIGATE: No win found for ${name} in removeWindow.`);
		}
		if (win && win.groupNames.length) {
			//If we aren't removing listeners, we're removing the window for tiling purposes (so it doesn't mess up other windows resizing). In that case, we don't want to remove groups with a single window, which is what the 2nd param here does.
			this.removeWindowFromAllGroups(win, !removeListeners);
		}
		//If we're removing the window that was last cached on mouseDown, wipe the reference. This way, onMouseUp, the window's bounds-changed event will not trigger, and it will not break everything.
		if (this.movingWindow && this.movingWindow.name === win.name) {
			this.movingWindow = null;
		}
		this.wipeSnapRelationships(win.name);
		this.dockingPool.remove(name);
	}

	/**
  * Returns an array of window names.
  */
	getWindowNames() {
		return Object.keys(this.dockingPool.getAll());
	}

	/**
 * @return {dockingPool}
 */
	getWindows() {
		return this.dockingPool.getAll();
	}
	getUnignoredWindows() {
		let windowIter = this.dockingPool.iterator();
		let ret = [];
		for (let win of windowIter) {
			ret.push(win);
		}
		return ret;
	}
	/**
  * Gets a window object by name.
 * @param  {type} name
 * @param  {type} throwError Usually we want to throw the error, but sometimes we use this function to filter (e.g., autoarrange).
 * @return {type}
 */
	getWindow(name, throwError) {
		let win = this.dockingPool.get(name, throwError);
		if (!win && (typeof throwError === "undefined" || throwError)) {
			Logger.system.debug(`No win found for ${name}.`);
		}
		return win;
	}

	/**
  * Given a list of monitors, returns the one that overlaps the most with the window.
  * @param {string} win
  * @param {array} monitors
  */
	getMonitorByMajority(win, monitors) {
		let overlaps = [];
		//Sometimes bad objects get passed into this function. They shouldn't, but they do. if we can't retrieve bounds, it's not a window. Try to get a window. If there's no window, return the first monitor.
		if (!win.getBounds && win.name) win = this.getWindow(win.name);
		if (!win.getBounds) return monitors[0];
		let boundingBox = win.getBounds();
		monitors.forEach(monitor => {
			overlaps.push({
				monitor: monitor,
				overlap: __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getOverlap(boundingBox, monitor.availableRect || monitor.monitorRect)
			});
		});
		//Gets the monitor with the greatest overlap. The reduce function pulls the proper object with the greats overlap value. We return the monitor property of that object.
		return overlaps.reduce((prev, current) => prev.overlap > current.overlap ? prev : current).monitor;
	}

	/**
  * returns the monitor that the window is on. If the left edge of the window is on two or more monitors, we calculate the monitor that houses the majority of the window.
  * @param {string} windowName
  */
	getMonitorForWindow(win) {
		//monitors is an array of monitors that the window's top-left edge is on. This can be 1, 2 (e.g., snapped to the edge of two monitors), or none(top-left is off in virtual space). If it's none or more than 1, we call getMonitorByMajority.
		let monitors = [],
		    allMonitors = [];
		let iterator = monitorPool.iterator();
		for (let monitor of iterator) {
			let rect = monitor.availableRect || monitor.monitorRect;
			if (win.left >= rect.left && win.left <= rect.right && win.top <= rect.bottom && win.top >= rect.top) {
				monitors.push(monitor);
			}
			allMonitors.push(monitor);
		}
		if (monitors.length === 1) {
			return monitors[0];
		}
		return this.getMonitorByMajority(win, allMonitors);
	}
	/**
  * Returns a monitor object.
  * @param {string} name name of monitor.
  */
	getMonitor(name) {
		return monitorPool.get(name);
	}
	/**
  * Registers a monitor with the calculator.
 * @param  {type} bounds
 */
	addMonitor(bounds, onChange) {
		var monitor = new __WEBPACK_IMPORTED_MODULE_0__dockableMonitor__["a" /* default */]({ bounds: bounds, monitor: bounds._monitor });
		monitor.onClaimedSpaceChanged = onChange;
		monitor.setBufferSize(this.bufferSize);
		monitorPool.add(monitor.name, monitor);
	}
	/**
 * Deregisters a monitor with the calculator.
 * @param  {type} name
 * @return {type}
 */
	removeMonitor(name) {
		monitorPool.remove(name);
	}

	/**
 * @return {monitorPool}
 */
	getMonitors() {
		return monitorPool.getAll();
	}

	/**
  * Returns a list of 'rawMonitors' from openfin. These are only available when they are actually passed into the DockableMonitor when its instantiated.
  */
	getRawMonitors() {
		let rawMonitors = [];
		let iterator = monitorPool.iterator();
		for (var monitor of iterator) {
			rawMonitors.push(monitor.rawMonitor);
		}
		return rawMonitors;
	}

	/**
  * Returns the monitors in an array
  */
	getMonitorArray() {
		let monitors = [];
		let iterator = monitorPool.iterator();
		for (var monitor of iterator) {
			monitors.push(monitor);
		}
		return monitors;
	}

	/**
  *
  */
	removeAllMonitors() {
		let iterator = monitorPool.iterator();
		for (var monitor of iterator) {
			this.removeMonitor(monitor.name);
		}
	}

	/**
  * Sets the resize throttle period. This allows the system to drop events that occur too quickly.
  */
	setResizeThrottlePeriod(throttlePeriod) {
		Logger.system.log("DockingService.SetThrottle", JSON.stringify(throttlePeriod));
		this.resizeEventThrottlePeriod = throttlePeriod;
		let windowIter = this.dockingPool.iterator();
		for (let win of windowIter) {
			win.setResizeThrottlePeriod(throttlePeriod);
		}
	}

	/**
  * Sets the opacity that windows take when entering another window's snapping region.
  */
	setSnappingOpacity(opacity) {
		SNAPPING_OPACITY = opacity;
	}

	/**
  * At one point we weren't sure if we were going to allow groups to snap because of bugs. This is vestigal and should be removed at some point.
  */
	setAllowGroupsToSnap(bool) {
		ALLOW_GROUPS_TO_SNAP = bool;
	}

	/**
  * whether to push debug to the logger.
  * @param {boolean} bool
  */
	setDebug(bool) {
		debug = bool;
	}

	/**
  * Sets the size of the region around windows that will trigger a snap.
  */
	setBufferSize(buffer) {
		Logger.system.info("Setting buffer size", `${buffer}`);
		this.bufferSize = buffer;
		var dockingPoolIterator = this.dockingPool.iterator();
		for (var win of dockingPoolIterator) {
			win.setBufferSize(buffer);
		}
		let monitorIterator = monitorPool.iterator();
		for (const monitor in monitorIterator) {
			monitor.setBufferSize(buffer);
		}
	}

	/**
  * Will prevent a window from being added to groups.
  */
	addToGroupBlacklist(windowName) {
		groupBlacklist.push(windowName);
	}

	/**
  * Will allow a window previously blacklisted to be included in group operations.
  */
	removeFromGroupBlacklist(windowName) {
		if (groupBlacklist.includes(windowName)) {
			groupBlacklist.splice(groupBlacklist.indexOf(windowName), 1);
		}
	}

	/**
  * Adds a group to the calculator.
 * @param  {type} group
 */
	addGroup(group) {
		groupPool.add(group.name, group);
	}
	/**
 * Removes a group from the calculator.
 * @param  {type} groupName
 */
	removeGroup(groupName) {
		let group = this.getGroup(groupName);
		let groupIter = this.groupWindowIterator(group);
		if (group) {
			if (group.getWindowNames().length) {
				for (var win of groupIter) {
					if (debug) {
						Logger.system.debug("forceObjectsToLogger", "removing group", win.name);
					}
					this.removeWindowFromGroup(win.name, groupName);
				}
			}
			groupPool.remove(groupName);
		} else {
			console.warn(`Tried removing a group that was already removed. ${groupName}.`);
		}
	}

	/**
  * Returns a list of groups that are capable of moving together.
  */
	getMovableGroups() {
		let groupNames = this.getGroupNames();
		let groups = {};

		for (let i = 0, len = groupNames.length; i < len; i++) {
			let groupName = groupNames[i];
			let group = this.getGroup(groupName);
			if (group.isMovable) {
				groups[groupName] = group;
			}
		}
		return groups;
	}

	/**
 * Returns the group Pool
 * @return {type}
 */
	getGroups() {
		return groupPool.getAll();
	}

	/**
 * Gets a group by name.
 * @param  {type} name
 * @return {type}
 */
	getGroup(name) {
		return groupPool.get(name, false);
	}

	/**
 * Gets an array of group names.
 * @return {type}
 */
	getGroupNames() {
		var names = [];
		let iter = groupPool.iterator();
		for (let group of iter) {
			names.push(group.name);
		}
		return names;
	}

	/**
  * Imagine 3 windows snapped horizontally. All are grouped ([A][B][C]). You ungroup B. This function will remove A and C. It iterates through all of the windows in the group and makes sure it's still attached to the group.
  */
	checkGroupMembership(win) {
		if (!win) {
			Logger.system.warn("INVESTIGATE: No win passed in to checkGroupMembership.");
			return;
		}

		let groupNames = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(win.groupNames);
		let snappedWindowGroupNames = win.snappedWindows.map(snapObj => {
			let snapWin = this.getWindow(snapObj.name);
			if (snapWin) {
				return snapWin.groupNames;
			}
			Logger.system.warn(`INVESTIGATE: SnapWin does not exist. ${JSON.stringify(snapObj)}.`);
			return [];
		});
		groupNames.forEach(groupName => {
			let hasSnappedWindowAttachedToGroup = snappedWindowGroupNames.some(arr => {
				return arr.includes(groupName);
			});
			if (!hasSnappedWindowAttachedToGroup) {
				this.removeWindowFromGroup(win.name, groupName);
			}
		});
	}

	/**
  * Removes a window from a group. When tiling, we do not delete groups with only one window. We could be doing an operation on a group with two windows, and we want to retain group membership so that hole-filling works appropriately.
  */
	removeWindowFromGroup(windowName, groupName, deleteGroupsWithOneWindow = true) {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "removing window from group", windowName, groupName);
		}
		let win = this.getWindow(windowName);
		if (!win || !groupName || !win.groupNames.includes(groupName)) {
			return;
		}
		win.groupNames.splice(win.groupNames.indexOf(groupName), 1);
		let group = this.getGroup(groupName);
		if (!group) {
			return;
		}

		group.removeWindow(win.name);
		if (deleteGroupsWithOneWindow && group.getWindowNames().length === 1) {
			this.removeWindowFromGroup(group.getWindowNames()[0], group.name);
			this.removeGroup(group.name);
		}
	}

	/**
  * Groups n-Windows.
  *
  * @param {any} params
  * @param {any} cb
  */
	groupWindows(params, cb) {
		var groupName = params.groupName || uuidv4();
		for (var i = 0, len = params.windows.length; i < len; i++) {
			var windowName = params.windows[i];
			let win = this.getWindow(windowName);
			this.addWindowToGroup({
				win: win,
				groupName: groupName,
				isMovable: typeof params.isMovable !== "undefined" ? params.isMovable : false
			});
		}
		if (cb) {
			cb(null);
		}
	}

	/**
 * @param  {type} groupName
 * @param  {dockableWindow} win
 */
	addWindowToGroup(params, cb) {
		let { groupName, win } = params;
		if (!win) {
			Logger.system.warn("INVESTIGATE: No win passed in to addWindowToGroup.");
			return;
		}
		//in the explicit paradigm, groups default to not being immobile, but resizable.
		let isMovable = typeof params.isMovable !== "undefined" ? params.isMovable : false;
		let isAlwaysOnTop = typeof params.isAlwaysOnTop !== "undefined" ? params.isAlwaysOnTop : false;

		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "add to group", win.name, isMovable, groupName);
		}
		if (groupBlacklist.includes(win.name)) {
			return;
		}
		if (win.groupNames.includes(groupName)) {
			return;
		}

		let groupParams = {
			name: groupName,
			isMovable: isMovable,
			isAlwaysOnTop: isAlwaysOnTop
		};

		var group = this.getGroup(groupName);

		if (!group) {
			if (!groupName) {
				groupName = uuidv4();
			}
			groupParams.name = groupName;
			groupParams.MINIMUM_HEIGHT = this.MINIMUM_HEIGHT;
			groupParams.MINIMUM_WIDTH = this.MINIMUM_WIDTH;
			group = new __WEBPACK_IMPORTED_MODULE_1__dockableGroup__["a" /* default */](groupParams, {
				Logger
			});
			this.addGroup(group);
		}
		//You can only be in two groups at a time. a movable one, and a resizable one.
		if (group.isMovable) {
			let movableGroup = this.getMovableGroup(win.name);
			if (movableGroup) {
				this.removeWindowFromGroup(win.name, movableGroup.name);
			}
		} else {
			let immobileGroup = this.getImmobileGroup(win.name);
			if (immobileGroup) {
				this.removeWindowFromGroup(win.name, immobileGroup.name);
			}
		}

		win.groupNames.push(groupName);
		group.addWindow(win);
		if (group.isMovable) {
			group.bringToFront();
		}
		if (cb) {
			cb(group);
		}
		return group;
	}

	/**
  * Vestigal function; used to pop a window out of a group. Can likely be removed in the future.
  */
	ejectWindow(name) {
		var win = this.getWindow(name);
		var newBounds = win;
		newBounds.left += 40;
		newBounds.top -= 40;
		newBounds.name = win.name;
		this.moveWindow(newBounds);
	}

	/**
 * @return {boolean}
 */
	getGroupMode() {
		return this.groupMode;
	}

	/**
 * @todo refactor the way config is set. This is so bad.
 * @param  {object} groupMade
 * @param  {boolean} groupMade.enabled Whether group mode is enabled.
 * @param  {number} groupMode.headerHeight How large the header is in windows. This shouldn't be in this config. So bad.
 * @param  {number} groupMode.groupTileBuffer How large the buffer is on the edge of a group to trigger a group-tile operation.
 * @param  {boolean} groupMode.allowSnappedWindowsToResize Whether snapped windows will resize as a group.
 * @param  {boolean} groupMode.fillHolesOnUndock Whether leaving a group triggers a hole-filling opeartion
 * @param  {boolean} groupMode.undockDisbandsEntireGroup Whether clicking the undock button on one window will disband the entire group.
 * @param  {boolean} groupMode.requireRectangularityForGroupResize Whether a group must be a rectangle to scale the individual windows as a unit.
 */
	setGroupMode(groupMode) {
		let bool = groupMode.enabled;
		if (!bool) {
			shortCircuit = false;
			this.getGroupNames().forEach(groupName => {
				this.removeGroup(groupName);
			});
		} else if (bool) {
			this.constituteGroups();
			this.groupTileBuffer = groupMode.groupTileBuffer;
			this.headerHeight = groupMode.headerHeight;
		}

		if (typeof groupMode.allowSnappedWindowsToResize === "undefined") groupMode.allowSnappedWindowsToResize = true;
		if (typeof groupMode.fillHolesOnUndock === "undefined") groupMode.fillHolesOnUndock = true;
		if (typeof groupMode.undockDisbandsEntireGroup === "undefined") groupMode.undockDisbandsEntireGroup = false;
		if (typeof groupMode.requireRectangularityForGroupResize === "undefined") groupMode.requireRectangularityForGroupResize = true;

		this.groupMode = groupMode;
	}

	/**
 * Adds useful properties to a raw request.
 * @param  {moveRequest} req
 * @return {moveRequest}
 */
	setMoveRequest(req, win) {

		req.windowBoundingBox = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getWindowBoundingBox(req);
		req.innerBuffer = this.getInnerBoundingBox(req);
		req.snappingRegions = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getSnappingRegions(req, this.bufferSize);
		req = this.makeSureMoveIsInUnclaimedSpace(req);

		this.moveRequest = req;
		return req;
	}

	/**
 * @param  {dockableWindow} win
 */
	setStationaryWindow(win) {
		stationaryWindow = win;
	}

	/**
 * @param  {dockableWindow} win
 */
	setMovingWindow(win) {
		this.movingWindow = win;
	}

	/**
 * Convenience function I used for like 2 minutes.
 * @todo, remove this funciton.
 * @param  {dockableWindow} stationary
 * @param  {dockableWindow} moving
 */
	setWindows(stationary, moving) {
		stationaryWindow = stationary;
		this.movingWindow = moving;
	}

	/****************************************************
  *													*
  *		Calculators - Multiple Positions/Sizes		*
  *													*
  ****************************************************/

	/**
  * when a non-docking movement is made, we don't grab the bounds changing events.
  * So this updates everything. Example: auto-arrange.
  */
	updateWindowPositions() {
		var dockingPoolIterator = this.dockingPool.iterator();
		for (var win of dockingPoolIterator) {
			win.updateState();
		}
	}

	/**
  * Returns the movableGroup for a window.
  */
	getMovableGroup(windowName) {
		let win = this.getWindow(windowName);
		if (!win) {
			Logger.system.debug(`INVESTIGATE: getMovableGroup failure. No win found for ${windowName}`);
			return null;
		}
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "Getting movable group", windowName, win.groupNames);
		}
		for (var i = 0, len = win.groupNames.length; i < len; i++) {
			var groupName = win.groupNames[i];
			let group = this.getGroup(groupName);
			if (group.isMovable) {
				if (debug) {
					Logger.system.debug("forceObjectsToLogger", "Found movableGroup", groupName);
				}
				return group;
			}
		}
		return null;
	}

	/**
  * Returns the immobile group for a window. This is one where it is snapped to other windows, but not explicitly grouped by the user.
  */
	getImmobileGroup(windowName) {
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "Getting immobileGroup", windowName);
		}
		let win = this.getWindow(windowName);
		if (!win) {
			Logger.system.warn("INVESTIGATE: getImmobileGroup failure. No win found for ${windowName}");
			return null;
		}
		for (var i = 0, len = win.groupNames.length; i < len; i++) {
			var groupName = win.groupNames[i];
			let group = this.getGroup(groupName);
			if (group.isMovable) {
				continue;
			}
			return group;
		}
		return null;
	}

	/**
 * Basically just code flow controller. Figures out whether the move will affect just a couple, a single window, or all windows in the group.
 * @param  {moveRequest} moveRequest
 * @param  {function} cb
 */
	handleGroup(moveRequest, cb) {
		this.setMoveRequest(moveRequest);
		moveRequest = this.moveRequest;
		if (this.movingGroup.isMovable && moveRequest.changeType === 0) {
			this.handleGroupMove(moveRequest, cb); //Move a group
		} else {
			if (this.resizeObject.scalingGroup) {
				this.movingAGroupOfWindows = true;
			} else {
				this.resizeInteriorWindow(moveRequest);
			}
			cb({ finished: true });
		}
	}

	/**
  * I wrote this to kill any gap that may have happened after scaling a group proportionately. It seems to work.
  * @todo, make sure this is necessary. Consider a better way to do it.
  */
	eliminateGaps() {
		var self = this;
		var dimensionsToChange = {
			left: "width",
			right: "width",
			bottom: "height",
			top: "height"
		};
		var dockingPoolIterator = this.dockingPool.iterator();
		for (var win of dockingPoolIterator) {
			var snappableWindows = this.getSnappableWindows(win);
			var bounds = win.getBounds();
			snappableWindows.forEach(windowName => {
				var snappedWin = self.getWindow(windowName);
				var sharedEdges = win.getSharedEdges(snappedWin, self.bufferSize);
				for (var edge in sharedEdges) {
					var oppEdge = __WEBPACK_IMPORTED_MODULE_8__constants__["OPPOSITE_EDGE_MAP"][edge];
					if (sharedEdges[edge] && win[edge] !== snappedWin[oppEdge]) {
						bounds[edge] = snappedWin[oppEdge];
						if (edge === "left") {
							bounds.right = bounds.left + bounds.width;
						}

						if (edge === "right") {
							bounds.left = bounds.right - bounds.width;
						}

						if (edge === "top") {
							bounds.bottom = bounds.top + bounds.height;
						}
						if (edge === "bottom") {
							bounds.top = bounds.bottom - bounds.height;
						}
					}
				}
				bounds.name = win.name;
				self.moveWindow(bounds);
			});
		}
	}

	/****************************************************
  *													*
  *	Calculators - Individual Window Position/Size	*
  *													*
  ****************************************************/
	/**
 * Returns a modified moveRequest. If the code gets here, its' because the moving window was inside of the stationary window's buffer, and a snap needed to occur.
 * @param  {moveRequest} request
 * @return {moveRequest}
 */
	snapWindow(request) {
		var intersection = null;
		//order matters here. corners should take precedence, as they'll also handle the vanilla bottom/top/left/right order. The algo stops with the first intersection.
		var regions = ["bottomLeft", "bottomRight", "topLeft", "topRight", "leftTop", "leftBottom", "rightTop", "rightBottom", "top", "left", "right", "bottom"];

		var stationaryBoundingBoxes = stationaryWindow.snappingRegions;
		var movingBoundingBoxes = request.snappingRegions;
		var intersectionFound = false;
		for (var i = 0, len = regions.length; i < len; i++) {
			var region = regions[i];
			if (intersectionFound && request.changeType !== 0) {
				break;
			}
			intersection = null;
			//Two checks:
			//1) Is it inside of the stationary window? If so, exit.
			//2) Is it within one of the region bounding boxes.

			if (__WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].intersectBoundingBoxes(stationaryBoundingBoxes[region], request.windowBoundingBox)) {
				if (request.changeType === 0) {
					request.movingRegion = this.getIntersections(request, stationaryWindow, region)[0];
				}
				var movingRegion = request.movingRegion;

				if (movingRegion && __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].intersectBoundingBoxes(stationaryBoundingBoxes[region], movingBoundingBoxes[movingRegion])) {
					intersection = {
						stationaryRegion: region,
						movingRegion: movingRegion
					};
					intersectionFound = true;
				}
			}
			if (intersection) {
				this.intersection = intersection;
				request = this.getNewCoordinates({
					eventType: request.changeType === 0 ? "move" : "resize",
					intersection: intersection,
					stationaryWindow: stationaryWindow,
					request: request
				});
				this.movingWindow.removedBoundsChanging = true;

				//if moving window isn't in a group, see if stationary window is. if so, add moving to the stationary group. if not, create a new group with them.
				//GroupAction is just a placeholder. We only modify groups on mouseDown defers this
				let sharedEdges = stationaryWindow.getSharedEdges(request);
				let sharedEdgesArr = Object.keys(sharedEdges).map(edge => {
					return { edge: sharedEdges[edge] };
				});
				if (!sharedEdgesArr.some(obj => obj.edge)) {
					let sharedCorners = stationaryWindow.getSharedCorners(request);
					let sharedCornersArr = Object.keys(sharedCorners).map(corner => {
						return { corner: sharedCorners[corner] };
					});
					if (!sharedCornersArr.some(obj => obj.corner)) {
						return request;
					}
				}

				if (!groupBlacklist.includes(stationaryWindow.name)) {
					groupAction = this.getDeferredGroupAction(stationaryWindow, this.movingWindow);
				}
			} else {
				this.intersection = {
					stationaryRegion: null,
					movingRegion: null
				};
			}
		}

		this.requestMade = request;
		return request;
	}

	/**
  * When moving a window, we don't want to add it to a group until all the calculations are complete. If two windows snap, this function is called. It figures out which group that the windows should form. Note: It always forms an immobile group (one that allows shared-border resizing). This is because a snap is not an explicit group.
  */
	getDeferredGroupAction(stationaryWin, movingWin) {
		let action = groupAction;
		let stationaryGroup = this.getImmobileGroup(stationaryWin.name);
		let movingWindowGroup = this.getImmobileGroup(movingWin.name);
		if (stationaryGroup && !movingWindowGroup) {
			action.name = stationaryGroup.name;
			action.windows[movingWin.name] = true;
		} else if (movingWindowGroup && !stationaryGroup) {
			action.name = movingWindowGroup.name;
			action.windows[stationaryWin.name] = true;
		} else if (!movingWindowGroup && !stationaryGroup) {
			action.name = uuidv4();
			action.windows[stationaryWin.name] = true;
			action.windows[movingWin.name] = true;
		} else {
			action.name = stationaryGroup.name;
			action.windows[stationaryWin.name] = true;
			action.windows[movingWin.name] = true;
		}
		return action;
	}

	/**
 * Calculates resize bounds.
 * @param  {object} params
 * @return {moveRequest}
 */
	adjustSize(params) {
		var request = params.request,
		    stationaryWindow = params.stationaryWindow,
		    stationaryRegion = params.intersection.stationaryRegion;
		var intersections = this.getIntersections(request, stationaryWindow, stationaryRegion).toString().toLowerCase();
		if (!intersections) {
			return request;
		}

		switch (stationaryRegion) {
			case "leftBottom":
			case "bottomLeft":
				if (intersections.includes("top") || intersections.includes("topleft") || intersections.includes("topright")) {
					request.top = stationaryWindow.bottom;
				}
				if (intersections.includes("topright") || intersections.includes("right")) {
					request.right = stationaryWindow.left;
				}
				if (intersections.includes("topleft") || intersections.includes("left")) {
					request.left = stationaryWindow.left;
				}
				if (intersections.includes("bottom")) {
					request.bottom = stationaryWindow.bottom;
				}
				break;
			case "rightBottom":
			case "bottomRight":
				if (intersections.includes("top") || intersections.includes("topleft") || intersections.includes("topright")) {
					request.top = stationaryWindow.bottom;
				}
				if (intersections.includes("topleft") || intersections.includes("left")) {
					request.left = stationaryWindow.right;
				}

				if (intersections.includes("topright") || intersections.includes("right")) {
					request.right = stationaryWindow.right;
				}
				if (intersections.includes("bottom")) {
					request.bottom = stationaryWindow.bottom;
				}

				break;
			case "topLeft":
			case "leftTop":
				if (intersections.includes("bottom") || intersections.includes("bottomleft") || intersections.includes("bottomright")) {
					request.bottom = stationaryWindow.top;
				}
				if (intersections.includes("bottomleft") || intersections.includes("left")) {
					request.bottom = stationaryWindow.top;
					request.left = stationaryWindow.left;
				}
				if (intersections.includes("bottomright") || intersections.includes("right")) {
					request.right = stationaryWindow.left;
				}
				if (intersections.includes("top")) {
					request.top = stationaryWindow.top;
				}

				break;
			case "rightTop":
			case "topRight":
				if (intersections.includes("bottom") || intersections.includes("bottomleft") || intersections.includes("bottomright")) {
					request.bottom = stationaryWindow.top;
				}
				if (intersections.includes("bottomleft") || intersections.includes("left")) {
					request.left = stationaryWindow.right;
				}
				if (intersections.includes("bottomright") || intersections.includes("right")) {
					request.right = stationaryWindow.right;
				}
				if (intersections.includes("top")) {
					request.top = stationaryWindow.top;
				}
				break;
			case "top":
				if (intersections.includes("bottom")) {
					request.bottom = stationaryWindow.top;
				}
				break;
			case "right":
				if (intersections.includes("left")) {
					request.left = stationaryWindow.right;
				}
				break;
			case "bottom":
				if (intersections.includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				break;
			case "left":
				if (intersections.includes("right")) {
					request.right = stationaryWindow.left;
				}
				break;
		}

		request.width = request.right - request.left;
		request.height = request.bottom - request.top;

		request = this.checkShortCircuits(request);
		return request;
	}

	/**
  * Checks to see if a window has gotten too narrow, or too short.
  */
	checkShortCircuitsWithEdge(request, edge) {
		let win = this.getWindow(request.name);
		//The code for resizing groups goes through here. It just passes bounds, not a window. Here, use the global minimums and no maximums (until a global max is allowed...).
		if (!win) {
			win = {
				limits: {
					minHeight: MINIMUM_HEIGHT,
					minWidth: MINIMUM_WIDTH,
					maxHeight: Infinity,
					maxWidth: Infinity
				}
			};
		}

		//Checks to see if the height/widths are below the window's minimum height/width. If so, it sets them to the minimum values.
		switch (edge) {
			case "top":
				if (request.height <= win.limits.minHeight) {
					request.height = win.limits.minHeight;
					request.bottom = request.top + win.limits.minHeight;
				} else if (request.height >= win.limits.maxHeight) {
					request.height = win.limits.maxHeight;
					request.bottom = request.top + win.limits.maxHeight;
				}
				break;
			case "bottom":
				if (request.height <= win.limits.minHeight) {
					request.height = win.limits.minHeight;
					request.top = request.bottom - win.limits.minHeight;
				} else if (request.height >= win.limits.maxHeight) {
					request.height = win.limits.maxHeight;
					request.top = request.bottom - win.limits.maxHeight;
				}
				break;
			case "left":
				if (request.width < win.limits.minWidth) {
					request.width = win.limits.minWidth;
					request.right = request.left + win.limits.minWidth;
				} else if (request.width > win.limits.maxWidth) {
					request.width = win.limits.maxWidth;
					request.right = request.left + win.limits.maxWidth;
				}
				break;
			case "right":
				if (request.width < win.limits.minWidth) {
					request.width = win.limits.minWidth;
					request.left = request.right - win.limits.minWidth;
				} else if (request.width > win.limits.maxWidth) {
					request.width = win.limits.maxWidth;
					request.left = request.right - win.limits.maxWidth;
				}
				break;
		}
		return request;
	}

	/**
  * Checks to see if a request is allowed. Are you trying to make my window -20px? or 10px? Get out of here.
  * @todo, rename. 'shortcircuitRequest' or something.
  */
	checkShortCircuits(request, win) {
		var currentBounds;

		const defaultLimits = {
			minHeight: MINIMUM_HEIGHT,
			minWidth: MINIMUM_WIDTH,
			maxHeight: Infinity,
			maxWidth: Infinity
		};

		if (typeof win === "undefined") {
			win = this.getWindow(request.name);
		}
		//@note from Daniel, PR Review on 12/4. Address this at some point.
		//Looking at the code isolated from it's calling context, it's not obvious to me that this won't throw a null reference error. You're checking to see if request.name is truthy, which to me implies it's optional, but you're accessing it before this check, which looks really dangerous.We should switch the order, and only access request.name when we've confirmed it's really there.
		if (request.name) {
			currentBounds = win.getBounds();
		} else {
			currentBounds = request;
			//The code for resizing groups goes through here. It just passes bounds, not a window. Here, use the global minimums and no maximums (until a global max is allowed...).
			win = {};
		}

		win.limits = Object.assign(defaultLimits, win.limits || {});

		//@todo consider consolidation. The code for adjusting the bounds are the same. The only difference is the inputs (e.g, we change the height or width, and the anchor);

		//CASE: WINDOW IS TOO NARROW
		//handles shortCircuits for the moving window.
		if (request.width <= win.limits.minWidth) {
			request.width = win.limits.minWidth;

			//If we're dragging the left edge around, anchor the right edge.
			if (request.left !== currentBounds.left) {
				request.right = currentBounds.right;
				request.left = request.right - request.width;
			} else if (request.right !== currentBounds.right) {
				//If we're dragging the right edge around, anchor the left edge.
				request.left = currentBounds.left;
				request.right = request.left + request.width;
			}
		} else if (request.width >= win.limits.maxWidth) {
			//CASE: WINDOW IS TOO WIDE
			request.width = win.limits.maxWidth;

			//If we're dragging the left edge around, anchor the right edge.
			if (request.left !== currentBounds.left) {
				request.right = currentBounds.right;
				request.left = request.right - request.width;
			} else if (request.right !== currentBounds.right) {
				//If we're dragging the right edge around, anchor the left edge.
				request.left = currentBounds.left;
				request.right = request.left + request.width;
			}
		}
		//CASE: WINDOW IS TOO SHORT
		if (request.height <= win.limits.minHeight) {
			request.height = win.limits.minHeight;

			//If we're dragging the top edge around, anchor on the bottom.
			if (request.top !== currentBounds.top) {
				request.bottom = currentBounds.bottom;
				request.top = request.bottom - request.height;
			} else if (request.bottom !== currentBounds.bottom) {
				//If we're dragging the bottom edge around, anchor on the top.
				request.top = currentBounds.top;
				request.bottom = request.top + request.height;
			}
		} else if (request.height >= win.limits.maxHeight) {
			//CASE: WINDOW IS TOO TALL
			request.height = win.limits.maxHeight;

			//If we're dragging the top edge around, anchor on the bottom.
			if (request.top !== currentBounds.top) {
				request.bottom = currentBounds.bottom;
				request.top = request.bottom - request.height;
			} else if (request.bottom !== currentBounds.bottom) {
				//If we're dragging the bottom edge around, anchor on the top.
				request.top = currentBounds.top;
				request.bottom = request.top + request.height;
			}
		}
		return request;
	}

	/**
 * Use when a window is moving and needs to be snapped. Width/Height aren't modified like in `this.adjustSize`.
 * @param  {type} params
 * @return {type}
 */
	getNewCoordinates(params) {
		var request = params.request,
		    stationaryWindow = params.stationaryWindow,
		    movingRegion = params.intersection.movingRegion,
		    stationaryRegion = params.intersection.stationaryRegion;

		if (params.eventType === "resize") {
			return this.adjustSize(params);
		}

		switch (stationaryRegion) {
			case "bottomLeft":
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.left - request.width;
				}
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.left;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.bottom - request.height;
				}
				break;
			case "bottomRight":
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.right;
				}
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.right - request.width;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.bottom - request.height;
				}
				break;
			case "topLeft":
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.top - request.height;
				}
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.left;
				}

				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.left - request.width;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.top;
				}
				break;
			case "topRight":
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.top - request.height;
				}
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.right;
				}
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.right - request.width;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.top;
				}
				break;
			case "leftTop":
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.left - request.width;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.top;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.top - request.height;
				}
				break;
			case "leftBottom":
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.left - request.width;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.bottom - request.height;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				break;
			case "rightTop":
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.right;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.top;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.top - request.height;
				}
				break;
			case "rightBottom":
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.right;
				}
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.bottom - request.height;
				}
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				break;
			case "top":
				if (movingRegion.toLowerCase().includes("bottom")) {
					request.top = stationaryWindow.top - request.height;
				}
				break;
			case "right":
				if (movingRegion.toLowerCase().includes("left")) {
					request.left = stationaryWindow.right;
				}
				break;
			case "bottom":
				if (movingRegion.toLowerCase().includes("top")) {
					request.top = stationaryWindow.bottom;
				}
				break;
			case "left":
				if (movingRegion.toLowerCase().includes("right")) {
					request.left = stationaryWindow.left - request.width;
				}
				break;
		}
		request.right = request.left + request.width;
		request.bottom = request.top + request.height;
		return request;
	}

	/**
 * Helper function for figuring out why snapping isn't working.
 * @todo, consider deleting.
 * @return {type}
 */
	getDiagnostics() {
		return {
			requestMade: this.moveRequest,
			stationaryWindow: stationaryWindow,
			movingWindow: this.movingWindow,
			stationaryBoundingBoxes: stationaryWindow.snappingRegions,
			movingBoundingBoxes: this.moveRequest.snappingRegions,
			intersection: this.intersection
		};
	}

	/**
  * Helper to return an object that says which edges are moving.
  * @todo, why not just use splitHandle and a regex? This seems unnecessary.
 * @function this.getMovingEdgesFromResizeHandle
 * @param  {type} handle
 * @return {type}
 */
	getMovingEdgesFromResizeHandle(handle) {
		var edges = {
			top: false,
			right: false,
			left: false,
			bottom: false
		};
		if (!handle) {
			return edges;
		}
		handle = handle.toLowerCase();
		for (var edge in edges) {
			if (handle.includes(edge)) {
				edges[edge] = true;
			}
		}
		return edges;
	}

	/**
  * NOT CALLED RIGHT NOW.
  * Will basically be like `this.onMouseUp`, but for groups...once I can get that stuff working.
  */
	onGroupMaskMoved(cb) {

		var initialWindowBounds = this.movingWindow.initialBounds || this.movingWindow.getBounds();
		var groupName = this.movingGroup.name;
		var boundsDelta = this.getBoundsDelta(this.movingWindow, initialWindowBounds);
		if (debug) {
			Logger.system.debug("forceObjectsToLogger", "ongroupmaskmoved", boundsDelta);
		}
		if (boundsDelta.height === 0 && boundsDelta.width === 0) {
			//move group.
			this.handleGroupMove(groupName, boundsDelta.left, boundsDelta.top);
		} else {
			this.handleGroupResize(boundsDelta);
		}

		var groupIter = this.groupWindowIterator(this.movingGroup);
		for (var win of groupIter) {
			win.show();
		}
		// this.resizeObject = {};
		this.movingWindow.initialBounds = null;
		this.fixWindowOpacity({
			checkForSnappability: false
		});
	}

	/**
  * This is being used
  * bounds are calculated in maskBoundsCalculator.js
  */
	moveGroupMask() {
		this.groupMask.setBounds(__WEBPACK_IMPORTED_MODULE_4__maskBoundsCalculator___default.a.mousePosToBounds(this.moveRequest.mousePosition));
	}
	/**
  * NOT CURRENTLY USED.
  * Will be like `onMouseMove`, but for groups. Goal is to only move all grouped windows `onMouseUp`. In the interim, just move the mask around. Right now I move every window on every resizeEvent
  */
	_moveGroupMaskOld() {
		let moveRequest = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(this.moveRequest);
		let bounds = this.groupMask.getBounds();
		if (moveRequest.changeType !== 0) {
			let resizeHandle = this.resizeObject.correctedHandle;
			//@todo figure out why the handle wouldn't be set. sometimes, under strange circumstances (e.g., resizing a group of windows), this is undefined.
			if (resizeHandle) {
				let splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {
					return s.toLowerCase();
				});

				splitHandle.forEach(handle => {
					if (handle === "top" || handle === "bottom") {
						bounds[handle] = moveRequest.mousePosition.y || moveRequest.mousePosition.top;
					}
					if (handle === "right" || handle === "left") {
						bounds[handle] = moveRequest.mousePosition.x || moveRequest.mousePosition.left;
					}
				});
			}
		}
		bounds.width = bounds.right - bounds.left;
		bounds.height = bounds.bottom - bounds.top;
		bounds.name = "groupMask";
		this.groupMask.setBounds(bounds);
	}
	/**
  * Scales a group of windows proportionately.
  * @param {moveRequest} moveRequest
  */
	scaleGroup(moveRequest) {
		//TODO: see group.scale and conver this to use that
		var self = this;
		var group = this.getMovingGroup(moveRequest);
		var groupIter;
		var resizeHandle = this.resizeObject.correctedHandle;
		var newGroupDimensions = {
			height: self.groupMask.height,
			width: self.groupMask.width
		};
		var splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		var anchors = group.getAnchors(resizeHandle);

		groupIter = this.groupWindowIterator(group, anchors[0]);
		var movements = {};
		for (let win of groupIter) {
			win.onGroupEdge = {};
			win.resizeHandle = this.resizeObject.correctedHandle;
			["top", "right", "left", "bottom"].forEach(handle => {
				if (win[handle] === group[handle]) {
					win.onGroupEdge[handle] = true;
				}
			});
			var newHeight = Math.round(newGroupDimensions.height * (win.height / group.height));
			var newWidth = Math.round(newGroupDimensions.width * (win.width / group.width));
			var request = win.getBounds();
			request.width = newWidth;
			request.height = newHeight;
			request.right = request.left + request.width;
			request.bottom = request.top + request.height;
			request.name = win.name;

			movements[request.name] = this.checkShortCircuits(request);
		}
		splitHandle.forEach(handle => {
			groupIter = this.groupWindowIterator(group);
			//cleans up the edges of the group in case rounding error messed us up.
			var oppEdge = __WEBPACK_IMPORTED_MODULE_8__constants__["OPPOSITE_EDGE_MAP"][handle];
			for (var win of groupIter) {
				var moveRequest = movements[win.name];
				if (win.onGroupEdge && win.onGroupEdge[oppEdge] && moveRequest[oppEdge] !== self.groupMask[oppEdge]) {
					moveRequest.name = win.name;
					moveRequest[oppEdge] = self.groupMask[oppEdge];
					if (oppEdge === "bottom") {
						moveRequest.top = moveRequest.bottom - moveRequest.height;
					}
					if (oppEdge === "top") {
						moveRequest.bottom = moveRequest.top + moveRequest.height;
					}
					if (oppEdge === "left") {
						moveRequest.right = moveRequest.left + moveRequest.width;
					}
					if (oppEdge === "right") {
						moveRequest.left = moveRequest.right - moveRequest.width;
					}
					moveRequest.width = moveRequest.right - moveRequest.left;
					moveRequest.height = moveRequest.bottom - moveRequest.top;
					movements[win.name] = self.checkShortCircuits(moveRequest, win);
				}
			}
		});
		for (var windowName in movements) {
			self.moveWindow(movements[windowName]);
		}
	}

	/**
 * This basically will re-snap all windows after the movingWindow moves.
 * @todo, document inline.
 * @param  {type} group
 * @param  {function} cb
 */
	cleanupGroupResize(group, cb) {
		// TODO: see group.scale (replace scaleGroup and this with group.scale)
		var resizeHandle = group.resizeHandle || this.resizeObject.correctedHandle;
		var splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		var self = this;
		var alreadyDanced = [];
		splitHandle.forEach(handle => {
			var groupIter = this.groupWindowIterator(group);
			alreadyDanced = [];
			for (var anchor of groupIter) {
				if (!alreadyDanced.includes(anchor.name)) {
					var b = doTheConga(anchor, handle);b;
				}
			}
			// group.updateBounds();
			groupIter = this.groupWindowIterator(group);
			//cleans up the edges of the group in case rounding error messed us up.
			for (var win of groupIter) {
				if (win.onGroupEdge && win.onGroupEdge[handle] && win[handle] !== self.groupMask[handle]) {
					var moveRequest = win.getBounds();
					moveRequest.name = win.name;
					moveRequest[handle] = self.groupMask[handle];

					moveRequest.width = moveRequest.right - moveRequest.left;
					moveRequest.height = moveRequest.bottom - moveRequest.top;

					self.moveWindow(self.checkShortCircuits(moveRequest, win));
					var b = doTheConga(win, handle);b;
				}
			}
			group.updateBounds();
		});

		function doTheConga(win, handle) {
			if (!win) {
				Logger.system.warn("INVESTIGATE: No win passed to doTheConga");
				return;
			}
			var oppEdge = __WEBPACK_IMPORTED_MODULE_8__constants__["OPPOSITE_EDGE_MAP"][handle];

			for (var i = 0, len = win.snappedWindows.length; i < len; i++) {
				var snappedWindowObj = win.snappedWindows[i];
				var snappedWin = self.getWindow(snappedWindowObj.name);
				if (!snappedWin) {
					Logger.system.warn(`INVESTIGATE: No Dockable Window found for ${snappedWindowObj.name}`);
					continue;
				}
				let groupIntersection = snappedWin.groupNames.some(name => win.groupNames.includes(name));
				if (!snappedWindowObj.edges[handle] || !groupIntersection) {
					continue;
				}

				var req = snappedWin.getBounds();
				req.name = snappedWin.name;

				snappedWin[oppEdge] = win[handle];
				var top = snappedWin.top,
				    left = snappedWin.left;
				if (handle === "top") {
					top = win.top - snappedWin.height;
				}

				if (handle === "bottom") {
					top = win.bottom;
				}

				if (handle === "right") {
					left = win.right;
				}

				if (handle === "left") {
					left = win.left - snappedWin.width;
				}

				snappedWin.moveTo(left, top);
				var b = doTheConga(snappedWin, handle);b;
				alreadyDanced.push(snappedWin.name);
			}
		}
	}

	/**
  * This returns an object with all of the bounds of all of the windows in a given group. This should be moved in to the dockabeGroup.
  */
	getBoundsOfGroupWindows(group) {
		var groupIter = this.groupWindowIterator(group);
		var bounds = {};
		for (var win of groupIter) {
			bounds[win.name] = win.getBounds();
			//bounds[win.name].name = win.name;
		}
		return bounds;
	}

	/**
  * For a group, it will iterate through its windows and set bounds on each of them.
  */
	setBoundsOfGroupWindows(group, windowBounds, stopMove = false) {
		var groupIter = this.groupWindowIterator(group);
		for (var win of groupIter) {
			windowBounds[win.name].name = win.name;
			this.moveWindow(windowBounds[win.name]);
			if (stopMove) win.win.stopMove();
		}
	}
	/**
  * Exports an array of bounds for the windows that are currently being managed by docking. This makes it easy to generate oddball test cases.
  */
	export() {
		let windowList = this.getWindowNames().map((name, i) => {
			let win = this.getWindow(name);
			let bounds = win.getBounds();
			bounds.name = `window${i}`;
			return bounds;
		});
		if (windowList) {
			return JSON.stringify(windowList);
		}
		return "";
	}

	cleanupSharedEdges(group, windowBounds) {
		let groupIter = this.groupWindowIterator(group);
		for (let win of groupIter) {
			let edges = {
				"right": 0,
				"left": 0,
				"top": 0,
				"bottom": 0
			};
			// How many things is this window snapped to on each edge??
			for (let sWin of win.snappedWindows) {
				for (let i in sWin.edges) {
					if (sWin.edges[i]) edges[i]++;
				}
			}

			// If we are only snapped to one thing and are disconnected, reconnect:
			for (let sWin of win.snappedWindows) {
				for (let edge in sWin.edges) {
					if (sWin.edges[edge] && edges[edge] === 1) {
						let snappedWin = windowBounds[sWin.name];
						;

						//if a window is snapped to a window (but not grouped with it), that window won't be in the movable group's window bounds. So make sure it exists first.
						if (snappedWin) {
							if (win[edge] !== snappedWin[__WEBPACK_IMPORTED_MODULE_8__constants__["OPPOSITE_EDGE_MAP"][edge]]) {
								windowBounds[win.name][edge] = snappedWin[__WEBPACK_IMPORTED_MODULE_8__constants__["OPPOSITE_EDGE_MAP"][edge]];
								if (["right", "left"].includes(edge)) {
									windowBounds[win.name].width = windowBounds[win.name].right - windowBounds[win.name].left;
								} else {
									windowBounds[win.name].height = windowBounds[win.name].bottom - windowBounds[win.name].top;
								}
							}
						}
					}
				}
			}
		}
		this.setBoundsOfGroupWindows(group, windowBounds);
		return windowBounds;
	}

	/**
  * A resize-helper that needs better documentation. I'm pretty sure this re-snaps windows during group resizes.
  *
  * @todo @deprecate at 4.0
  */
	cleanupSharedEdges_old(group, windowBounds) {
		var groupIter = this.groupWindowIterator(group);

		// find everything attached to right and bottom of group mask
		let alignRight = [],
		    alignBottom = [];

		for (var win of groupIter) {
			var bounds = windowBounds[win.name];
			if (bounds.right == this.groupMask.right) {
				alignRight.push(win);
			}
			if (bounds.bottom == this.groupMask.bottom) {
				alignBottom.push(win);
			}
			bounds = this.checkShortCircuitsWithEdge(bounds, "left");
			bounds = this.checkShortCircuitsWithEdge(bounds, "top");
		}

		this.setBoundsOfGroupWindows(group, windowBounds);
		let anchor = this.movingWindow;
		if (this.resizeObject) {
			anchor = group.getMoveAnchor(this.resizeObject.handle);
		}
		groupIter = this.groupWindowIterator(group, anchor);
		// move stuff right / down
		for (let win of groupIter) {
			win.snappedWindows.forEach(val => {
				let sWin = this.getWindow(val.name);
				var bounds = windowBounds[win.name];
				var snappedWindowBounds = windowBounds[sWin.name];
				//windows can be snapped but in different groups.
				if (snappedWindowBounds) {
					var sharedEdges = val.edges;
					if (sharedEdges.right) {
						if (bounds.right !== snappedWindowBounds.left) {
							snappedWindowBounds.left = bounds.right;
							snappedWindowBounds.width = snappedWindowBounds.right - snappedWindowBounds.left;
						}
					}

					if (sharedEdges.bottom) {
						if (bounds.bottom !== snappedWindowBounds.top) {
							snappedWindowBounds.top = bounds.bottom;
							snappedWindowBounds.bottom = snappedWindowBounds.height + snappedWindowBounds.top;
						}
					}
					if (sharedEdges.left) {
						if (bounds.left !== snappedWindowBounds.right) {
							snappedWindowBounds.right = bounds.left;
							snappedWindowBounds.width = snappedWindowBounds.right - snappedWindowBounds.left;
						}
					}
				}
			});
		}

		this.setBoundsOfGroupWindows(group, windowBounds);

		groupIter = this.groupWindowIterator(group, anchor);
		// resize to fit
		for (let win of groupIter) {
			win.snappedWindows.forEach(val => {
				let sWin = this.getWindow(val.name);
				var bounds = windowBounds[win.name];
				var snappedWindowBounds = windowBounds[sWin.name];
				if (snappedWindowBounds) {
					var sharedEdges = val.edges;
					if (sharedEdges.right) {
						if (snappedWindowBounds.left > bounds.right) {
							bounds.right = snappedWindowBounds.left;
							bounds.width = bounds.right - bounds.left;
						}
					}
					if (sharedEdges.bottom) {
						if (snappedWindowBounds.top > bounds.bottom) {
							bounds.bottom = snappedWindowBounds.top;
							bounds.height = bounds.bottom - bounds.top;
						}
					}

					if (sharedEdges.left) {
						if (bounds.left !== snappedWindowBounds.right) {
							snappedWindowBounds.right = bounds.left;
							snappedWindowBounds.width = snappedWindowBounds.right - snappedWindowBounds.left;
						}
					}
				}
			});
		}

		groupIter = this.groupWindowIterator(group);

		var maxRight = false;
		var maxBottom = false;
		var minLeft = false;
		var minTop = false;

		for (let win of groupIter) {
			let bounds = windowBounds[win.name];
			if (maxRight === false || bounds.right > maxRight) {
				maxRight = bounds.right;
			}
			if (maxBottom === false || bounds.bottom > maxBottom) {
				maxBottom = bounds.bottom;
			}
			if (minLeft === false || bounds.left < minLeft) {
				minLeft = bounds.left;
			}
			if (minTop === false || bounds.top < minTop) {
				minTop = bounds.top;
			}
		}

		groupIter = this.groupWindowIterator(group);

		for (let win of groupIter) {
			let bounds = windowBounds[win.name];
			if (win.onGroupEdge && win.onGroupEdge.right && maxRight > bounds.right) {
				bounds.right = maxRight;
				bounds.width = bounds.right - bounds.left;
			}

			if (win.onGroupEdge && win.onGroupEdge.bottom && maxBottom > bounds.bottom) {
				bounds.bottom = maxBottom;
				bounds.height = bounds.bottom - bounds.top;
			}

			if (win.onGroupEdge && win.onGroupEdge.left && minLeft < bounds.left) {
				bounds.left = minLeft;
				bounds.width = bounds.right - bounds.left;
			}

			if (win.onGroupEdge && win.onGroupEdge.top && minTop < bounds.top) {
				bounds.top = minTop;
				bounds.height = bounds.bottom - bounds.top;
			}
		}
		return windowBounds;
	}

	/**
  * Run after everything, it removes any gaps that might have occured (e.g., from fractional pixels, rounding, etc). It needs better inline documentation.
  */
	cleanupGaps(group, windowBounds) {
		var groupIter = this.groupWindowIterator(group);

		var xs = [];
		var ys = [];
		for (var win of groupIter) {
			var bounds = windowBounds[win.name];
			//if (!xs.length) xs.push(bounds.left);
			let found = false;
			for (let i = 0, len = xs.length; i < len; i++) {
				var x = xs[i];
				if (Math.abs(bounds.left - x) < 5) {
					bounds.left = x;
					found = true;
					break;
				}
			}
			if (!found) {
				xs.push(bounds.left);
			}

			found = false;
			for (let i = 0, len = xs.length; i < len; i++) {
				var x = xs[i];
				if (Math.abs(bounds.right - x) < 5) {
					bounds.right = x;
					found = true;
					break;
				}
			}
			if (!found) {
				xs.push(bounds.right);
			}

			bounds.width = bounds.right - bounds.left;

			//if (!ys.length) ys.push(bounds.top);
			found = false;
			for (let i = 0, len = ys.length; i < len; i++) {
				var y = ys[i];
				if (Math.abs(bounds.top - y) < 5) {
					bounds.top = y;
					found = true;
					break;
				}
			}
			if (!found) {
				ys.push(bounds.top);
			}

			found = false;
			for (let i = 0, len = ys.length; i < len; i++) {
				var y = ys[i];
				if (Math.abs(bounds.bottom - y) < 5) {
					bounds.bottom = y;
					found = true;
					break;
				}
			}
			if (!found) {
				ys.push(bounds.bottom);
			}

			bounds.height = bounds.bottom - bounds.top;
			//win.setBounds(bounds)
		}

		return windowBounds;
	}

	shouldShortCircuit(request) {
		let shouldShortCircuit = {
			width: false,
			height: false
		};
		let win = this.getWindow(request.name);
		if (win) {
			if (request.width <= win.limits.minWidth || request.width >= win.limits.maxWidth) {
				shouldShortCircuit.width = true;
			}
			if (request.height <= win.limits.minHeight || request.height >= win.limits.maxHeight) {
				shouldShortCircuit.height = true;
				if (debug) {
					Logger.system.debug("forceObjectsToLogger", "short circuiting height because of", request.name, request.height);
				}
			}
		}

		return shouldShortCircuit;
	}
	/**
  * Resizes a window or group of windows on the interior of a group
  * @param {moveRequest} moveRequest
  */
	resizeInteriorWindow(moveRequest) {
		var shortCircuits = this.shouldShortCircuit(moveRequest);
		var resizeHandle = this.resizeObject.correctedHandle;
		//Hole filling algo for tiling calls this method. It passes in the resize handle. It'll never be a corner. No need for the resizeObject here.
		if (moveRequest.forceResizeHandle) {
			resizeHandle = moveRequest.resizeHandle;
		}

		var self = this;
		if (!resizeHandle) {
			return;
		}

		var movements = {};
		var snappableWindows = this.getSnappableWindows(moveRequest);
		var modifiedRequest = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(moveRequest);
		var splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {
			return s.toLowerCase();
		});

		var snappedWindowNames = [];
		for (let i = 0, len = this.movingWindow.snappedWindows.length; i < len; i++) {
			let snapObj = this.movingWindow.snappedWindows[i];
			for (var h = 0, handleLen = splitHandle.length; h < handleLen; h++) {
				let handle = splitHandle[h];
				if (snapObj.edges[handle] || snapObj.corners[resizeHandle]) {
					snappedWindowNames.push(snapObj.name);
					break;
				}
			}
		}
		//will snap the window to other windows before goign and modifying the rest of it
		for (let i = 0, len = snappableWindows.length; i < len; i++) {

			if (snappedWindowNames.includes(snappableWindows[i]) || snappableWindows[i] === this.movingWindow.name) {
				continue;
			}
			if (groupBlacklist.includes(snappableWindows[i])) {
				continue;
			}
			let win = this.getWindow(snappableWindows[i]);

			this.setStationaryWindow(win);
			modifiedRequest.movingRegion = resizeHandle;
			var shouldContinue = false;
			for (let h = 0, handleLen = splitHandle.length; h < handleLen; h++) {
				var handle = splitHandle[h];
				if (modifiedRequest[handle] === moveRequest[handle]) {
					shouldContinue = true;
					break;
				}
			}
			modifiedRequest = this.snapWindow(modifiedRequest);

			if (shouldContinue) {
				continue;
			}

			modifiedRequest.snappingRegions = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getSnappingRegions(modifiedRequest, this.bufferSize);

			modifiedRequest.windowBoundingBox = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getWindowBoundingBox(modifiedRequest);
			break;
		}
		moveRequest = modifiedRequest;
		movements[moveRequest.name] = moveRequest;

		var movingWindowSnappedWindows = [];
		var terds = [];

		function recurse(snappedWindows, handle, originalHandle) {
			var oppEdge = __WEBPACK_IMPORTED_MODULE_8__constants__["OPPOSITE_EDGE_MAP"][handle];
			for (let i = 0, len = snappedWindows.length; i < len; i++) {
				let snapObj = snappedWindows[i];

				let snappedWindow = self.getWindow(snapObj.name);
				if (!terds.includes(snapObj.name + oppEdge)) {
					terds.push(snapObj.name + oppEdge);
					movingWindowSnappedWindows.push({
						name: snapObj.name,
						edge: oppEdge,
						handle: originalHandle
					});
					var a = recurse(self.getWindowsOnEdge(snappedWindow, oppEdge), oppEdge, originalHandle);
				}
			}
			return;
		}
		function recurseCorner(cornerWindows, handle, originalHandle) {

			for (let i = 0, len = cornerWindows.length; i < len; i++) {

				let snapObj = cornerWindows[i];

				let snappedWindow = self.getWindow(snapObj.name);
				if (snapObj.corner && !terds.includes(snapObj.name + snapObj.corner)) {
					var splitHandle = snapObj.corner.split(/(?=[A-Z])/).map(function (s) {
						return s.toLowerCase();
					});
					splitHandle.forEach(handle => {
						//if splitHandle == bottomLeft and the originalHandle is bottom, we don't want to do anything with the Left edge. The algo will run through this function twice.
						var doStuff = handle === originalHandle || handle === __WEBPACK_IMPORTED_MODULE_8__constants__["OPPOSITE_EDGE_MAP"][originalHandle];
						if (doStuff && !terds.includes(snapObj.name + handle)) {
							movingWindowSnappedWindows.push({
								name: snapObj.name,
								edge: handle,
								handle: originalHandle
							});
							var a = recurse(self.getWindowsOnEdge(snappedWindow, handle), handle, originalHandle);
							terds.push(snapObj.name + handle);
						}
					});
				}

				// recurseCorner(snappedWindow, snapObj.corner);
			}
			return;
		}

		var movingCorner = __WEBPACK_IMPORTED_MODULE_8__constants__["CORNERS"].includes(resizeHandle);
		if (movingCorner) {
			var cornerPoint = self.movingWindow.getPointByVertex(resizeHandle);
			var cornerWindows = self.getWindowsAtPoint(cornerPoint).map((val, i) => {
				return {
					name: val,
					corner: self.getWindow(val).getVertexByPoint(cornerPoint),
					edge: self.getWindow(val).getEdgeByPoint(cornerPoint)
				};
			});

			splitHandle.forEach(handle => {
				var b = recurseCorner(cornerWindows, resizeHandle, handle);
			});
		} else {
			var clonedSnaps = self.getWindowsOnEdge(self.movingWindow, resizeHandle);
			var b = recurse(clonedSnaps, resizeHandle, resizeHandle);
		}

		for (let i = 0, len = movingWindowSnappedWindows.length; i < len; i++) {
			let snapObj = movingWindowSnappedWindows[i];

			var snappedWindow = self.getWindow(snapObj.name);
			let newBounds = movements[snapObj.name] ? movements[snapObj.name] : snappedWindow.getBounds();
			newBounds.name = snapObj.name;
			newBounds[snapObj.edge] = moveRequest[snapObj.handle];

			newBounds.width = newBounds.right - newBounds.left;
			newBounds.height = newBounds.bottom - newBounds.top;

			if (newBounds.width <= snappedWindow.limits.minWidth || newBounds.width >= snappedWindow.limits.maxWidth) {
				shortCircuits.width = true;
			}

			if (newBounds.height <= snappedWindow.limits.minHeight || newBounds.width >= snappedWindow.limits.maxHeight) {
				shortCircuits.height = true;
				if (debug) {
					Logger.system.debug("forceObjectsToLogger", "short circuiting height because of", newBounds.name, newBounds.height);
				}
			}

			newBounds = self.checkShortCircuits(newBounds, snappedWindow);
			movements[newBounds.name] = newBounds;
		}
		for (var windowName in movements) {
			if (groupBlacklist.includes(windowName)) {
				continue;
			}
			var movement = movements[windowName];
			let win = this.getWindow(windowName);
			if (shortCircuits.width) {
				movement.width = win.width;
				movement.left = win.left;
				movement.right = win.right;
			}
			if (shortCircuits.height) {

				movement.height = win.height;
				movement.top = win.top;
				movement.bottom = win.bottom;
			}

			this.moveWindow(movement);
		}
	}

	/**
  * function for debugging a 3x3 grid.
 */
	logger() {
		var boundingBoxes = {};
		var dockingPoolIterator = this.dockingPool.iterator();
		for (var win of dockingPoolIterator) {
			boundingBoxes[windowName] = JSON.stringify(win.windowBoundingBox);
		}
		var box = "";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["A"] + "          |    " + boundingBoxes["B"] + "         |   " + boundingBoxes["C"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["D"] + "          |    " + boundingBoxes["E"] + "         |   " + boundingBoxes["F"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["G"] + "          |    " + boundingBoxes["H"] + "         |   " + boundingBoxes["I"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		global.Logger.system.verbose(box);
	}

	/**
 	* Helper to determine whether a moveRequest will affect a window, the group, or just a local collection of windows that are snapped to the movingWindow.
 	*/
	shouldScaleGroup(moveRequest) {
		if (this.groupMode.requireRectangularityForGroupResize) {
			return this.shouldMoveAffectGroup(moveRequest);
		}

		if (!this.groupMode.enabled) {
			return false;
		}
		var win = this.getWindow(moveRequest.name);

		if (!win || !win.groupNames.length) {
			return false;
		}

		var group = this.getMovingGroup(moveRequest);
		let req = new __WEBPACK_IMPORTED_MODULE_2__dockableBox__["a" /* default */](moveRequest);

		//if the handle that's being dragged is on an exterior edge of a group resizing all.
		//This used to be derived from the window because it was only calculated on mouseDown. Now that it can be calculated at any time, we need to derive the handle from the request that's coming in. On group resizes, window bounds are only modified on mouse up.
		let resizeHandle = req.getResizeHandle(moveRequest);

		if (moveRequest.changeType !== 0 && __WEBPACK_IMPORTED_MODULE_8__constants__["CORNERS"].includes(resizeHandle)) {
			var cornerPoint = win.getPointByVertex(resizeHandle);
			let cornersThatCauseScaling = group.getCornersThatCauseScaling();
			let shouldScale = cornersThatCauseScaling.some(corner => {
				return corner.x === cornerPoint.x && corner.y === cornerPoint.y;
			});
			return shouldScale;
		}
		return false;
	}
	/**
  * Helper to determine whether a moveRequest will affect a window, the group, or just a local collection of windows that are snapped to the movingWindow.
  */
	shouldMoveAffectGroup(moveRequest) {
		if (!this.groupMode.enabled) {
			return false;
		}
		var win = this.getWindow(moveRequest.name);

		if (!win || !win.groupNames.length) {
			return false;
		}

		var group = this.getMovingGroup(moveRequest);
		if (!group.isARectangle()) {
			return false;
		}

		//if the handle that's being dragged is on an exterior edge of a group resizing all.
		var resizeHandle = this.resizeObject.correctedHandle || win.getResizeHandle(moveRequest);

		var edges = ["top", "left", "right", "bottom"];
		if (moveRequest.changeType !== 0 && __WEBPACK_IMPORTED_MODULE_8__constants__["CORNERS"].includes(resizeHandle)) {
			var cornerPoint = win.getPointByVertex(resizeHandle);
			return group.pointIsOnBoundingBox(cornerPoint);
		}

		if (moveRequest.changeType !== 0) {
			return win[resizeHandle] === group[resizeHandle];
		}
		//never used, but could be used if you wanted to only allow exterior windows the ability to move the group.
		for (var i = 0, len = edges.length; i < len; i++) {
			var edge = edges[i];
			if (win[edge] === group[edge]) {
				return true;
			}
		}

		return false;
	}

	/**
  * Should use this. Computes the difference between two boundsObjects.
  * @param {moveRequest} newBounds
  * @param {moveRequest} old
  */
	getBoundsDelta(newBounds, old) {
		var boundsDelta = {};
		var widthDelta = newBounds.width - old.width;

		var heightDelta = newBounds.height - old.height;

		boundsDelta.width = widthDelta;
		boundsDelta.height = heightDelta;
		boundsDelta.top = Math.abs(newBounds.top - old.top);
		boundsDelta.left = Math.abs(newBounds.left - old.left);
		if (newBounds.top < old.top) {
			boundsDelta.top = -boundsDelta.top;
		}
		if (newBounds.left < old.left) {
			boundsDelta.left = -boundsDelta.left;
		}

		return boundsDelta;
	}

	/**
 * Will move a group of windows.
 * @param  {moveRequest} moveRequest
 * @param  {function} cb
 */
	handleGroupMove(moveRequest, cb) {
		const invokeCallback = function () {
			cb({ finished: true });
		};
		if (this.movingWindow.isMaximized) {
			return invokeCallback();
		}
		let self = this;
		let group = this.getMovableGroup(moveRequest.name);
		let movingDirection = this.getMovingDirection(moveRequest, this.movingWindow);
		let moveAnchor = group.getMoveAnchor(movingDirection);
		if (moveAnchor === "NotMoving") {
			return invokeCallback();
		}
		let updateGroupWindowsByDelta = function (delta, moveWindows, cb) {
			// console.log("updateGroupWindowsByDelta", delta);
			var groupIter = self.groupWindowIterator(group, moveAnchor);
			//don't need to add anything if the delta is 0.
			var modifyBounds = delta.x || delta.y;
			for (let win of groupIter) {
				let bounds = win.getBounds();
				if (modifyBounds) {
					var newLeft = win.left + delta.x;
					var newTop = win.top + delta.y;
					bounds.left = newLeft;
					bounds.top = newTop;
					bounds.bottom = newTop + bounds.height;
					bounds.right = newLeft + bounds.width;
					bounds.name = win.name;
				}
				//don't want wrappers saving here..
				bounds.persistBounds = false;
				if (moveWindows) {
					//I'm breaking my own rule by calling setBounds directly. Sadly, isJiggling was being triggered (I think...didn't really investigate), and the window wasn't moving with small adjustments. Set bounds fixes that.
					if (debug) {
						Logger.system.verbose("Docking: setBounds", win.name);
					}
					win.setBounds(bounds);
				} else {
					win.setInternalBounds(bounds);
				}
			}
			group.updateBounds();
			if (cb) {
				cb();
			}
		};
		let initialBounds = group.getBounds();

		let delta = self.getMoveDelta(moveRequest);
		//processSnaps was added for moving groups out of claimed space. When you snapped a window to a movable group, the movable group would dsnap to the top of the other window rather than being dumped below the claimed space. Basically the first request whould shift it down 40px, but then it'd snap to the top of the other window. When we move windows out of claimed space, processSnaps is false.
		if (ALLOW_GROUPS_TO_SNAP) {
			//make the group get its new bounds, but don't move the windows until the snap calculation is finished.
			updateGroupWindowsByDelta(delta, false);
			let preSnapBounds = group.getBounds();
			let mr = group.getBounds();
			mr.name = moveRequest.name;
			let groupMoveRequest = this.setMoveRequest(mr, initialBounds);
			groupMoveRequest.changeType = 0;
			this.checkBuffers(groupMoveRequest, function (modifiedRequest) {
				if (modifiedRequest.finished) {
					var delta = self.getMoveDelta(modifiedRequest, preSnapBounds);
					updateGroupWindowsByDelta(delta, true, invokeCallback);
				}
			});
		} else {
			updateGroupWindowsByDelta(delta, true, invokeCallback);
		}
	}

	/**
 * Calculates the % change that a moveRequest inflicts on a group of windows.
 * @param  {moveRequest} moveRequest
 * @return {type}
 */
	getGroupDelta(groupName, moveRequest) {
		var group = this.getGroup(groupName);
		var win = this.getWindow(moveRequest.name);
		var widthDelta = moveRequest.width - win.width;
		var heightDelta = moveRequest.height - win.height;

		var delta = {
			height: __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getPercentChange(group.height, group.height + heightDelta),
			width: __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getPercentChange(group.width, group.width + widthDelta)
		};
		return delta;
	}

	/**
  * Creates the resizeObject. Put anything here that should be cached onMouseDown. Will be cleared onMouseUp.
  * @param {moveRequest} moveRequest
  * @return {resizeObject}
  */
	constructResizeObject(moveRequest) {
		var win = this.getWindow(moveRequest.name);
		let req = new __WEBPACK_IMPORTED_MODULE_2__dockableBox__["a" /* default */](moveRequest);

		//if the handle that's being dragged is on an exterior edge of a group resizing all.
		var resizeObject = {
			//This used to be derived from the window because it was only calculated on mouseDown. Now that it can be calculated at any time, we need to derive the handle from the request that's coming in. On group resizes, window bounds are only modified on mouse up.
			handle: req.getResizeHandle(moveRequest),
			type: "edge",
			scalingGroup: moveRequest.changeType !== 0 ? this.shouldScaleGroup(moveRequest) : false
		};

		resizeObject.correctedHandle = resizeObject.handle;
		if (__WEBPACK_IMPORTED_MODULE_8__constants__["CORNERS"].includes(resizeObject.handle)) {
			resizeObject.type = "corner";
			if (resizeObject.scalingGroup) {
				resizeObject = this.correctResizeObject(win, resizeObject);
			}
		}

		resizeObject.movingEdges = this.getMovingEdgesFromResizeHandle(resizeObject.correctedHandle);
		win.resizeHandle = resizeObject.correctedHandle;

		return resizeObject;
	}

	/**
  * If a corner of a window is on the edge of the group, but it's not an actual corner, we need to treat that as an edge resize. See inline documentation for more. This is basically correcting errant resize-handles.
  * @note this behavior is locked behind `requireRectangularityForGroupResize`. Without that flag turned on, there's no need to change the resizehandle.
  */
	correctResizeObject(win, resizeObject, force) {
		//If we don't require rectangularity, we don't need to  change the resize handle.
		if (this.groupMode.requireRectangularityForGroupResize && __WEBPACK_IMPORTED_MODULE_8__constants__["CORNERS"].includes(resizeObject.handle)) {
			let group = this.movingGroup;
			let cornerPoint = win.getPointByVertex(resizeObject.handle);
			let groupEdge = group.getEdgeByPoint(cornerPoint);
			if (group.pointIsOnBoundingBox(cornerPoint, false)) {
				let splitHandle = resizeObject.handle.split(/(?=[A-Z])/).map(function (s) {
					return s.toLowerCase();
				});

				if (this.moveRequest) {
					//E.g., 'bottomRight'. Takes and resets the bottom to whatever it was before the user started moving. So even if I grab the bottom right corner and drag it down, the window's bottom edge will not shift.
					this.moveRequest[splitHandle[0]] = this.movingWindow[splitHandle[0]];
					this.moveRequest.height = this.moveRequest.bottom - this.moveRequest.top;
					this.moveRequest.width = this.moveRequest.right - this.moveRequest.left;
				}
				resizeObject.type = "edge";
				//e.g., bottomRight; this will just choose 'right'. This happens when you grab the corner of a window that's also on the edge of the window...but isn't the corner of the group.

				resizeObject.correctedHandle = groupEdge;
			}
		}

		return resizeObject;
	}

	/**
 * Resizes a window based on some delta.
 * @param  {dockableWindow} win
 * @param  {Object} delta Object with a width/height change.
 * @return {type}
 */
	resizeByDelta(win, delta) {
		var bounds = win.getBounds();
		bounds.width = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].scaleProportionately(win.width, delta.width);
		bounds.height = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].scaleProportionately(win.height, delta.height);
		if (win.resizeHandle.toLowerCase().includes("right")) {
			bounds.right = bounds.left + bounds.width;
		}
		if (win.resizeHandle.toLowerCase().includes("bottom")) {

			bounds.bottom = bounds.top + bounds.height;
		}

		if (win.resizeHandle.toLowerCase().includes("top")) {

			bounds.top = bounds.bottom - bounds.height;
		}

		if (win.resizeHandle.toLowerCase().includes("left")) {

			bounds.left = bounds.right - bounds.width;
		}
		return bounds;
	}

	getMovingDirection(bounds, win) {
		if (!win) {
			win = this.getWindow(bounds.name);
		}
		let direction = "";
		if (win.left > bounds.left) {
			direction = "Left";
		}
		if (win.left < bounds.left) {
			direction += "Right";
		}
		if (win.top > bounds.top) {
			direction += "Top";
		}
		if (win.top < bounds.top) {
			direction += "Bottom";
		}
		return direction;
	}

	/**
 * Does the dirty work of actually moving windows.
 * @todo, shortCircuit moves that try to squash windows beyond a minimum width/height.
 * @param  {moveRequest} bounds
 * @param  {function} callback
 */
	moveWindow(bounds, callback) {
		//if window resize causes ANY window to be smaller than the minimum_width, quit that shit.
		if (!bounds) {
			if (callback) {
				callback();
			}
			return;
		}

		if (!callback) {
			callback = function noop() {};
		}
		var win = this.getWindow(bounds.name);
		if (win) {
			bounds.persistBounds = false;
			win.setBounds(bounds, callback, setBoundsErrorCB);
		}
	}

	/**
 * Checks to see whether a window can be snapped to other windows/monitors.
 * @param  {moveRequest} bounds
 * @param  {function} callback
  */
	checkBuffers(moveRequest, cb) {
		if (this.movingWindow && this.movingWindow.ignoreSnappingRequests) {
			moveRequest.ignoreSnappingRequests = true;
		}
		var snappableWindows = this.getSnappableWindows(moveRequest);
		var snappableMonitors = this.getSnappableMonitors(moveRequest);

		//When a window is moved (ends up inside checkBuffers) and it is docked, we can safely assume the window is being undocked (why else would you move a window that takes up the width of the window (or height)?). Here, we set the new bounds of the move request and call to undock the window, which will propegate to all the necessary items changing (the window will shrink, undock, etc).
		let dockableWin = this.movingWindow;
		if (dockableWin.isDocked) {
			//if the user tries to resize a docked component, ignore it.
			if (moveRequest.changeType !== 0) {
				let req = this.movingWindow.getBounds();
				req.name = this.movingWindow.name;
				req.finished = true;
				this.hideGroupMask();
				return cb(req);
			}

			if (dockableWin.dockedPosition === dockableWin.monitorDockablePositions.TOP) {
				moveRequest.top = dockableWin.top + this.bufferSize * 2;
				moveRequest.bottom = moveRequest.top + dockableWin.height;
			} else if (dockableWin.dockedPosition === dockableWin.monitorDockablePositions.BOTTOM) {
				moveRequest.bottom = dockableWin.bottom - this.bufferSize * 2;
				moveRequest.top = moveRequest.bottom - dockableWin.height;
			}
			moveRequest.height = dockableWin.undockedPosition.height;
			moveRequest.width = dockableWin.undockedPosition.width;

			let monitor = dockableWin.monitor;
			if (dockableWin.dockedMonitor) {
				moveRequest.dockedMonitor = dockableWin.dockedMonitor;
				this.movingWindow.dockedMonitor = null;
			}
			monitor.undockWindowFromMonitor(moveRequest);
			this.hideGroupMask();

			//Force exit
			dockableWin.snappedMonitor = null;
			snappableWindows = [];
			snappableMonitors = [];
		}

		//TODO: This may not be needed anymore. Or at least not in v1 of dockable components (since it will only be toolbar at first). This is so that when you undock a window without a specific grabber, the window would center on the mouse. This isn't necessary when there is a static grabber (like in toolbar)
		if (dockableWin.shouldOffsetByMouse) {
			moveRequest.left = moveRequest.mousePosition.left - moveRequest.width / 2;
			moveRequest.right = moveRequest.left + moveRequest.width;
		}

		//processSnaps was added for moving groups out of claimed space. When you snapped a window to a movable group, the movable group would dsnap to the top of the other window rather than being dumped below the claimed space. Basically the first request whould shift it down 40px, but then it'd snap to the top of the other window. When we move windows out of claimed space, processSnaps is false.
		if (moveRequest.processSnaps === false || !snappableWindows.length && !snappableMonitors.length && cb) {
			moveRequest.finished = true;
			this.hideGroupMask();
			cb(moveRequest);
			return;
		}

		var modifiedRequest;

		for (let i = 0, len = snappableMonitors.length; i < len; i++) {
			var monitor = monitorPool.get(snappableMonitors[i]);
			let snapRequest = monitor.snapWindow(moveRequest);

			if (dockableWin.isDockableComponent) {
				//If we've made it this far we're moving a dockable component and it isn't already docked (which means we're constantly checking for wether we need to dock). Here we do calculations to determine if a 'dockable mask' should be shown.
				dockableWin.snappedMonitor = monitor;
				let clonedRequest = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_7__common_disentangledUtils__["clone"])(snapRequest);
				snapRequest.dockedMonitor = monitor.name;
				let maskBounds = monitor.getSnappedEdge(clonedRequest);
				let newBounds = monitor.getDockedPosition(maskBounds, clonedRequest);
				if (newBounds) {
					this.showGroupMask({ bounds: newBounds });
				}
				snappableWindows = []; //Force exit if window docks to monitor
			}
			if (snapRequest) {
				moveRequest = snapRequest;
			}

			if (i === snappableMonitors.length - 1 && snappableWindows.length === 0) {
				moveRequest.finished = true;
				cb(moveRequest);
				break;
			}
		}

		for (var i = 0, len = snappableWindows.length; i < len; i++) {
			var win = this.getWindow(snappableWindows[i]);
			this.setStationaryWindow(win);
			win.setOpacity({ opacity: SNAPPING_OPACITY });
			modifiedRequest = this.snapWindow(moveRequest);
			//The original request has been changed because of a snap to anstraddler window. replace the reference so new comparisons are made against the newly snapped window.
			moveRequest = modifiedRequest;

			moveRequest.windowBoundingBox = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getWindowBoundingBox(moveRequest);
			if (i === snappableWindows.length - 1) {
				modifiedRequest.finished = true;
			}

			cb(modifiedRequest);
		}
	}

	/**
 * Spins through windows and fixes opacity. For onMouseMove, we skip any windows that could be snapped to the movingWindow. onMouseUp, everything gets hit.
 * @todo, see if I can keep a list of windows that are set to 0.5. I don't need to loop through all windows here. Only the ones that aren't set to 1.
 * @param  {object} params
 * @param  {object} params.checkForSnappability
 */
	fixWindowOpacity(params) {
		var dockingPoolIterator = this.dockingPool.iterator();
		for (var win of dockingPoolIterator) {
			if (params.checkForSnappability) {
				if (win.canSnapToWindow(this.moveRequest)) {
					continue;
				}
			}
			params.opacity = 1;
			win.setOpacity(params);
		}
	}

	/**
  * Happens when config is loaded from the configClient.
  */
	setGlobalMinimums(serviceConfig) {
		MINIMUM_HEIGHT = serviceConfig.MINIMUM_HEIGHT;
		MINIMUM_WIDTH = serviceConfig.MINIMUM_WIDTH;
		//@todo, set minimums on all windows.
		this.MINIMUM_HEIGHT = serviceConfig.MINIMUM_HEIGHT;
		this.MINIMUM_WIDTH = serviceConfig.MINIMUM_WIDTH;
		let groups = this.getGroupNames();

		groups.forEach(name => {
			let group = this.getGroup(name);
			group.setMinimums(serviceConfig);
		});
	}

	/****************************************
  *			Calculators - general		*
 ****************************************/
	/**
 * Given an object, will set boundingboxes on it. If it's a dockableWindow, it'll let the window set itself up.
 * @param  {dockableWindow} win
 * @return {type}
 */
	setBoundingBoxes(win) {

		if (win.setBoundingBoxes) {
			win.setBoundingBoxes();
		} else {
			win.buffer = this.getBuffer(win);
			win.snappingRegions = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getSnappingRegions(win, this.bufferSize);
			win.windowBoundingBox = __WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].getWindowBoundingBox(win);
			win.innerBuffer = this.getInnerBoundingBox(win);
		}
		return win;
	}

	/**
  * Returns the difference between the movingWindow's location and the requested movement.
 * @param  {moveRequest} moveRequest
 * @return {type}
 */
	getMoveDelta(moveRequest, oldBounds) {
		var movingWin = oldBounds || this.getWindow(moveRequest.name);
		var delta = {
			x: moveRequest.left - movingWin.left,
			y: moveRequest.top - movingWin.top
		};
		return delta;
	}

	/**
 * Returns the inner bounds. We use this to give the windows some internal stickiness.
 * @param  {type} bounds
 * @return {object}
 */
	getInnerBoundingBox(bounds) {
		return {
			min: {
				x: bounds.left + this.bufferSize,
				y: bounds.top + this.bufferSize
			},
			max: {
				x: bounds.right - this.bufferSize,
				y: bounds.bottom - this.bufferSize
			}
		};
	}

	/**
 * Gets the snapping buffer of a request.
 * @param  {type} request
 * @return {type}
 */
	getBuffer(request) {
		return {
			min: {
				x: request.left - this.bufferSize,
				y: request.top - this.bufferSize
			},
			max: {
				x: request.right + this.bufferSize,
				y: request.bottom + this.bufferSize
			}
		};
	}

	/**
 * Given a request, a window, and a region, it'll tell you whether they intersect. We use this to figure out which corner/edge to snap to.
 * @param  {moveRequest} moveRequest
 * @param  {dockableWindow} stationaryWindow
 * @param  {string} stationaryRegion
 * @return {object}
 */
	getIntersections(moveRequest, stationaryWindow, stationaryRegion) {

		var movingBoundingBoxes = moveRequest.snappingRegions;
		var stationaryBoundingBoxes = stationaryWindow.snappingRegions;
		var intersections = [];
		for (var movingRegion in movingBoundingBoxes) {

			if (movingRegion === "inner") {
				continue;
			}
			if (__WEBPACK_IMPORTED_MODULE_3__boxMath__["a" /* default */].intersectBoundingBoxes(stationaryBoundingBoxes[stationaryRegion], movingBoundingBoxes[movingRegion])) {
				intersections.push(movingRegion);
			}
		}
		return intersections;
	}

	/****************************************
  *				Iterators				*
 ****************************************/
	*groupWindowIterator(group, orderAnchor = this.movingWindow) {
		//TODO: move this into group so you can do group.windowITerator (also will help clenaup group.scale)
		let windows = this.orderWindows(group.windows, orderAnchor);
		//preserves order..for .. in does not.
		for (let i = 0; i < windows.length; i++) {
			yield windows[i];
		}
	}

	setRouterClient(client) {
		this.routerClient = client;
	}
}
/* harmony default export */ __webpack_exports__["a"] = (DockingCalculator);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockingCalculator.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockingCalculator.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(0), __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Wanted to do ES6 export but that didn't work in current WP configurations, not sure why
module.exports = {
	mouseDown,
	mousePosToBounds
};
// The following variables refers to last known state of
// group mask, mouse down position and the resize object.
let oldBounds = null;
let resizeObject = null;
let mouseDownPosition = null;

/**
 * Caches the passed 3 arguments which are the old and last known group mask bounds
 * the mouse down position and the resize object.
 * @param {object} initialBounds The current group mask bounds (width, height, top, left)
 * @param {object} mousePosition The onMouseDown mouse's position (top, left)
 * @param {object} resizeObj The resize object, we need from this object the movingEdges property
 * @returns {object}
 */
function mouseDown(initialBounds, mousePosition, resizeObj) {
	oldBounds = initialBounds;
	mouseDownPosition = mousePosition;
	resizeObject = resizeObj;
	return {
		oldBounds,
		mouseDownPosition,
		resizeObj
	};
}
/**
 * Takes the latest mouse position top and left and calculates where and how many pixels
 * should we shift the mask and return the newly calculated bounds as an object
 * @param {object} mousePosition The moveRequest's mousePosition (top and left)
 */
function mousePosToBounds(mousePosition) {
	// We will use the next 2 variales to decide whether we are modifying the width
	// or height or both
	const noHorResize = !resizeObject.movingEdges.left && !resizeObject.movingEdges.right;
	const noVertResize = !resizeObject.movingEdges.top && !resizeObject.movingEdges.bottom;
	const topPixels = mousePosition.y - mouseDownPosition.y;
	const leftPixels = mousePosition.x - mouseDownPosition.x;
	const bounds = {
		width: oldBounds.width + (noHorResize ? 0 : leftPixels),
		height: oldBounds.height + (noVertResize ? 0 : topPixels),
		top: oldBounds.top,
		left: oldBounds.left,
		name: "groupMask"
	};
	// If we are chnaging the top position if the mask
	// we know this when movingEdges.top is true
	if (resizeObject.movingEdges.top) {
		bounds.top = bounds.top + topPixels;
		if (mousePosition.y > mouseDownPosition.y) {
			// If wondering why *2, its because we initially added those 
			// pixels above, see const bounds = {}
			bounds.height = bounds.height - Math.abs(topPixels * 2);
		} else {
			bounds.height = bounds.height + Math.abs(topPixels * 2);
		}
	}
	// If we are chnaging the left position of the mask 
	// we know this when movingEdges.left is true
	if (resizeObject.movingEdges.left) {
		bounds.left = bounds.left + leftPixels;
		if (mousePosition.x > mouseDownPosition.x) {
			bounds.width = bounds.width - Math.abs(leftPixels * 2);
		} else {
			bounds.width = bounds.width + Math.abs(leftPixels * 2);
		}
	}
	// Return newly calculated bounds
	return bounds;
}

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\maskBoundsCalculator.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\maskBoundsCalculator.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__baseService__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__baseService___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__baseService__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_async__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_async___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_async__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_dependencyManager__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_dependencyManager___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__common_dependencyManager__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__clients_distributedStoreClient__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__clients_distributedStoreClient___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__clients_distributedStoreClient__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Docking_dockingMain__ = __webpack_require__(208);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Launcher_launcher__ = __webpack_require__(166);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Launcher_launcher___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__Launcher_launcher__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__ServiceEntryPoints_setupAllEntryPoints__ = __webpack_require__(214);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__StackedWindowManager_stackedWindowManager__ = __webpack_require__(171);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__StackedWindowManager_stackedWindowManager___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__StackedWindowManager_stackedWindowManager__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__clients_configClient__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__clients_configClient___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__clients_configClient__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__clients_logger__);










__WEBPACK_IMPORTED_MODULE_4__clients_distributedStoreClient___default.a.initialize();


__WEBPACK_IMPORTED_MODULE_9__clients_configClient___default.a.initialize();


__WEBPACK_IMPORTED_MODULE_10__clients_logger___default.a.start();

class WindowService extends __WEBPACK_IMPORTED_MODULE_0__baseService__["BaseService"] {
	constructor(params) {
		params.name = "windowService";
		super(params);
		this.params = params;
		this.doShutdown = this.doShutdown.bind(this);
		this.onShutdown(this.doShutdown);
	}

	initialize(manifest, callback) {
		__WEBPACK_IMPORTED_MODULE_10__clients_logger___default.a.system.debug("WindowService.initialize start");

		window.RouterClient = __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a;

		window.stackedWindowManager = __WEBPACK_IMPORTED_MODULE_8__StackedWindowManager_stackedWindowManager___default.a;
		window.stackedWindowManager.initialize(manifest.finsemble); // pass in available config so stacked window has on startup (without having to query)

		let dockingMain = new __WEBPACK_IMPORTED_MODULE_5__Docking_dockingMain__["a" /* default */](this.params, {
			Logger: __WEBPACK_IMPORTED_MODULE_10__clients_logger___default.a
		});
		window.DockingMain = dockingMain;

		let launcher = new __WEBPACK_IMPORTED_MODULE_6__Launcher_launcher__["Launcher"](manifest, stackedWindowManager);
		window.launcher = launcher;

		// setup external interfaces (i.e. the API supported by the window service)
		let setupAllEntryPoints = new __WEBPACK_IMPORTED_MODULE_7__ServiceEntryPoints_setupAllEntryPoints__["a" /* ServiceEntryPoints */](manifest, dockingMain, launcher, window.stackedWindowManager);
		window.setupAllEntryPoints = setupAllEntryPoints;

		// an ordered initialization -- on completion the window service is ready
		__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_async__["series"])([done => {
			dockingMain.initialize(done);
		}, done => {
			launcher.initialize(done);
		}, done => {
			setupAllEntryPoints.initialize(done);
		}], callback);
	}

	// This method handles the shutdown sequence for the launcherService. TODO: this currently doesn't finish preventing the service from shutting down
	doShutdown() {
		const promiseResolver = resolve => {
			__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_async__["series"])([done => {
				window.setupAllEntryPoints.shutdown(done);
			}, done => {
				window.launcher.shutdown(done);
			}, done => {
				window.setupAllEntryPoints.shutdown(done);
			}, resolve]);
		};
		return new Promise(promiseResolver);
	}
}

var serviceInstance = new WindowService({
	name: "windowService",
	startupDependencies: {
		services: [],
		clients: ["configClient", "distributedStoreClient"]
	},
	addOFWrapper: false
});

serviceInstance.onBaseServiceReady(function (callback) {
	__WEBPACK_IMPORTED_MODULE_9__clients_configClient___default.a.getValues(null, (err, manifest) => {
		serviceInstance.initialize(manifest, callback);
	});
});

window.WindowService = serviceInstance;
serviceInstance.start();

/* harmony default export */ __webpack_exports__["default"] = (serviceInstance);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\windowService.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\windowService.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The system needs to use certain functionality on windows that aren't managed by the window service. This code lives inside of the old 'docking' code, which operates on dockableWindows. For windows that aren't managed by the window service, we need to create a functional interface so that we don't have to rewrite all that code. This is used in getMonitorForWindow. Given an object with a name and some bounds, it'll create a dummy object that won't throw errors when we try to operate on it.
 */
class MockDockableWindow {
    constructor(params) {
        this.getBounds = () => {
            return {
                left: this.left,
                top: this.top,
                right: this.right,
                bottom: this.bottom,
                width: this.width,
                height: this.height
            };
        };
        if (!params || !params.name)
            throw new Error("No params passed to MockDocakbleWindow.");
        this.name = params.name;
        this.left = params.left;
        this.top = params.top;
        this.right = params.right;
        this.bottom = params.bottom;
        this.width = params.width;
        this.height = params.height;
    }
}
exports.MockDockableWindow = MockDockableWindow;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function LauncherDefaults() {
    // We must provide a clean slate of properties otherwise new windows will spawn with the same
    // properties as the main window (from the openfin manifest). Here we set reasonable defaults
    // for every window. We allow some properties to carry through from the manifest (such as cornerRounding).
    //
    // A developer can then override any of *these* values by specifying an "options" entry in the component
    // config, or by passing an "options" argument to spawn().
    this.windowDescriptor = {
        alias: "",
        path: "",
        arguments: "",
        autoShow: true,
        backgroundColor: "#151f28",
        alwaysOnTop: false,
        fixedPosition: false,
        frame: false,
        frameConnect: "",
        hoverFocus: false,
        defaultCentered: false,
        maxHeight: -1,
        maximizable: true,
        maxWidth: -1,
        minHeight: 0,
        minimizable: true,
        minWidth: 0,
        opacity: 1,
        resizable: true,
        contextMenu: false,
        resizeRegion: {
            size: 5,
            bottomCorner: 10
        },
        saveWindowState: false,
        showTaskbarIcon: true,
        state: "normal",
        waitForPageLoad: false,
        accelerator: {
            devtools: true,
            reload: true,
            zoom: false,
            reloadIgnoringCache: true
        },
        //so that child-apps inherit taskbar icon from the main application. This prevents apps (eg, symphony) from showinge up as the taskbar icon.
        icon: null,
        customData: {
            component: {
                type: "",
                canMinimize: true
            },
            foreign: {
                services: {
                    dockingService: {
                        isArrangeable: false
                    },
                    launcherService: {
                        inject: false
                    }
                },
                components: {
                    "App Launcher": {
                        launchableByUser: true
                    },
                    "Window Manager": {
                        persistWindowState: true,
                        FSBLHeader: true,
                        showLinker: false
                    }
                }
            }
        }
    };
    this.componentDescriptor = {
        "window": {
            "url": "",
            "frame": false,
            "resizable": true,
            "autoShow": true,
            "top": "center",
            "left": "center",
            "width": 400,
            "height": 432
        },
        "component": {
            "inject": false,
            "spawnOnStartup": false,
        },
        "foreign": {
            "services": {
                "dockingService": {
                    "canGroup": true,
                    "isArrangable": true
                }
            },
            "components": {
                "App Launcher": {
                    "launchableByUser": true
                },
                "Window Manager": {
                    "showLinker": true,
                    "FSBLHeader": true,
                    "persistWindowState": true,
                    "title": "Welcome"
                },
                "Toolbar": {
                    "iconClass": "ff-component"
                }
            }
        }
    };
}
exports.default = LauncherDefaults;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
class WrapManagerSingleton {
    constructor() {
        this.wraps = {};
    }
    add(params) {
        let { windowIdentifier, windowDescriptor } = params;
        if (!windowIdentifier.uuid && windowDescriptor.uuid) {
            windowIdentifier.uuid = windowDescriptor.uuid;
        }
        this.wraps[windowIdentifier.windowName] = {
            identifier: windowIdentifier,
            descriptor: windowDescriptor,
            owners: []
        };
        logger_1.default.system.debug("WRAP. adding window", windowIdentifier.windowName);
        routerClientInstance_1.default.publish("Finsemble." + windowIdentifier.windowName + ".wrapReady", { name: windowIdentifier.windowName, state: "open" });
    }
    get(params, cb = Function.prototype) {
        let { windowName, requester } = params;
        let wrap = this.wraps[windowName];
        let err = null;
        logger_1.default.system.debug("WRAP. wrap requested from", requester, "for", windowName);
        if (wrap) {
            if (!wrap.owners.includes(requester))
                wrap.owners.push(requester);
        }
        else {
            err = `No wrap found for ${windowName}`;
            logger_1.default.system.error("WRAPMANAGER.get Error", err, requester, "for", windowName);
        }
        cb(err, wrap);
        return Promise.resolve({ err, data: wrap });
    }
    remove(params, cb) {
        let { identifier } = params;
        let requestCleanup = (owner, done) => {
            logger_1.default.system.debug("WRAP. requesting cleanup from", owner, "for", identifier.windowName);
            //shortcut. when a window closes we should remove it from any list where it's an owner.
            //can ignore all that aren' tservices once this work.
            routerClientInstance_1.default.publish("Finsemble." + identifier.windowName + ".wrapReady", { name: identifier.windowName, state: "closed" });
            return routerClientInstance_1.default.query(`${owner}.removeWrap.${identifier.windowName}`, { identifier }, () => {
                logger_1.default.system.debug("WRAP. cleanup confirmed from", owner, "for", identifier.windowName);
                done();
            });
        };
    }
    setUuid(name, uuid) {
        if (this.wraps[name]) {
            this.wraps[name].identifier.uuid = uuid;
            this.wraps[name].descriptor.uuid = uuid;
        }
        else {
            logger_1.default.system.error("WrapManager.setUuid. Wrap not found for", name);
        }
    }
}
exports.WrapManager = new WrapManagerSingleton();


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
const FinsembleWindowInternal_1 = __webpack_require__(105);
const distributedStoreClient_1 = __webpack_require__(78);
const SplinterAgentPool_1 = __webpack_require__(216);
const WrapManager_1 = __webpack_require__(164);
const PoolSingletons_1 = __webpack_require__(96);
const SplinterAgentSlave_1 = __webpack_require__(106);
const async_1 = __webpack_require__(11);
const util = __webpack_require__(10);
const system_1 = __webpack_require__(4);
class CreateSplinterAndInject {
    constructor(manifest, stackedWindowManager) {
        this.manifest = manifest;
        this.stackedWindowManager = stackedWindowManager;
        this.finsembleConfig = manifest.finsemble;
        this.bindAllFunctions();
        this.eventInterruptors = {};
    }
    initialize(callback = Function.prototype) {
        const initializePromiseResolver = async (resolve) => {
            await this.processConfig();
            await this.createStores();
            await this.createSplinterAgentPool();
            resolve();
            callback();
        };
        return new Promise(initializePromiseResolver);
    }
    windowServiceChannelName(channelTopic) { return `WindowService-Request-${channelTopic}`; }
    bindAllFunctions() {
        let self = this;
        for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {
            if (self[name] instanceof Function) {
                self[name] = self[name].bind(self); // only bind function properties
            }
        }
    }
    // invoked by serviceEntryPoint shutdown
    shutdown(done) {
        this.shutdownSplinterAgentPool(done);
    }
    async createWindow(params, callback = Function.prototype) {
        var realWindowIdentifier;
        var wrapState;
        logger_1.default.system.debug(`CreateSplinterAndInject.createWindow for ${params.windowDescriptor.name}`, params);
        let { windowDescriptor } = params;
        if (!windowDescriptor) {
            logger_1.default.system.error(`no windowDescriptor for WindowService-Request.createWindow`);
        }
        let { err, windowIdentifier } = await this.doSpawn(windowDescriptor);
        if (err) {
            logger_1.default.system.error("COMPONENT LIFECYCLE: createWindow error: ", err);
            callback(err);
        }
        else {
            realWindowIdentifier = {
                name: windowIdentifier.name,
                windowName: windowIdentifier.windowName,
                uuid: windowIdentifier.uuid,
            };
            wrapState = "created";
            logger_1.default.system.log("COMPONENT LIFECYCLE: STATE CHANGE: ", wrapState, windowIdentifier.windowName);
            routerClientInstance_1.default.publish("Finsemble.Component.State." + windowIdentifier.windowName, { state: wrapState });
            let { wrap } = await FinsembleWindowInternal_1.FinsembleWindowInternal.getInstance({ waitForReady: false, name: realWindowIdentifier.name || realWindowIdentifier.windowName });
            PoolSingletons_1.WindowPoolSingleton.add(windowIdentifier.name, wrap);
            wrapState = "ready";
            logger_1.default.system.log("COMPONENT LIFECYCLE: STATE CHANGE: ", wrapState, windowIdentifier.name);
            routerClientInstance_1.default.publish("Finsemble.Component.State." + windowIdentifier.name, { state: wrapState });
        }
        callback(err, realWindowIdentifier);
    }
    // probably only a temporary routine -- currently supports public wrapper
    async getWindowIdentifier(params, callback) {
        logger_1.default.system.debug(`"CreateSplinterAndInject.getWindowIdentifier for  ${params.windowName}`, params);
        let { err, data } = await WrapManager_1.WrapManager.get(params);
        callback(err, data);
    }
    // may replace with preload
    async injectTitleBar(params, callback) {
        logger_1.default.system.debug(`"CreateSplinterAndInject.injectTitleBar ${params.config.name}`, params);
        this.doTitleBarInjection(params, function (err, data) {
            callback(err, data);
        });
    }
    doTitleBarInjection(data, cb) {
        var config = data.config.customData; //why?
        var component = data.titleComponent;
        var win = system_1.System.Window.wrap(data.config.uuid || data.config.windowIdentifier.uuid, data.config.name || data.config.windowIdentifier.name); //TODO: need to figure out why this differs
        //var baseURL = finsembleConfig.moduleRoot;
        var request = new XMLHttpRequest();
        const onReadyStateChange = function () {
            if (request.readyState === 4) {
                const execJsSuccess = function () {
                    logger_1.default.system.debug("inject header successful", component);
                    cb();
                };
                const execJsError = function (err) {
                    var errMsg = `inject header failed: ${err}  for ${component}`;
                    logger_1.default.system.error(errMsg);
                    cb(errMsg);
                };
                win.executeJavaScript(request.responseText, execJsSuccess, execJsError);
            }
        };
        if (!config.window || !config.window.compound) { // why are we relying on the data for the config? we should already have the config here.
            // Inject the titlebar URL contents directly into the finWindow
            //request.open("GET", Components[component].window.url, false);
            var urlToInject = this.manifest.finsemble.components[component].window.url;
            logger_1.default.system.debug("getting header to inject", component, urlToInject);
            request.open("GET", urlToInject, false);
            request.onreadystatechange = onReadyStateChange;
            return request.send();
        }
    }
    async processConfig() {
        logger_1.default.system.debug("CreateSplinterAndInject.processConfig");
        const promiseResolver = async (resolve) => {
            var splinteringConfig = this.finsembleConfig.splinteringConfig;
            let { versionObject } = await util.getOpenfinVersion();
            //Due to a bug in chromium 53, we can't splinter _and_ spawn child windows (quickly) without crashing render processes. This was fixed somewhere between chromium 53 and 56, and the bug does not present in OF version 8.
            this.ALLOW_SPLINTERING = (versionObject.major > 7 || fin.container == "Electron") && splinteringConfig.enabled;
            resolve();
        };
        return new Promise(promiseResolver);
    }
    createStores() {
        logger_1.default.system.debug("CreateSplinterAndInject.createStores");
        const promiseResolver = async (resolve) => {
            logger_1.default.system.debug("CreateSplinterAndInject: createGroupStore");
            let onStoreClientReady = async () => {
                const { err: e2, data: windowStore } = await distributedStoreClient_1.default.createStore({ store: "Finsemble-Windows", global: true });
                if (e2)
                    return logger_1.default.system.error(e2);
                this.windowStore = windowStore;
                resolve();
            };
            distributedStoreClient_1.default.onReady(onStoreClientReady);
        };
        return new Promise(promiseResolver);
    }
    doSpawn(windowDescriptor) {
        const promiseResolver = async (resolve) => {
            let windowType = windowDescriptor.customData.window.windowType;
            if (windowType == "openfin")
                windowType = "OpenFinWindow"; // Config friendly naming
            if (windowType == "assimilation")
                windowType = "NativeWindow"; // Config friendly naming
            if (windowType == "assimilated")
                windowType = "NativeWindow"; // Config friendly naming
            if (windowType == "native")
                windowType = "FinsembleNativeWindow"; // Config friendly naming
            if (windowType == "application")
                windowType = "OpenFinApplication"; // Config friendly naming
            if (windowDescriptor.customData.window.native)
                windowType = "NativeWindow"; //Backward Compatibility
            if (windowDescriptor.type === "openfinApplication")
                windowType = "OpenFinApplication"; //Backward Compatibility
            if (windowDescriptor.customData.window.compound)
                windowType = "CompoundWindow";
            if (!windowType)
                windowType = "OpenFinWindow";
            if (windowType == "FinsembleNativeWindow") {
                windowType = "NativeWindow";
                windowDescriptor.isWPF = true;
            }
            windowDescriptor.uuid = windowDescriptor.uuid || util.guuid(); // Temp fix for stackedWindow (whole section needs rework)
            // By default, any OpenFin windows that are opened cross-domain are opened as an "application" rather than a "window".
            // This forces OpenFin to recognize them as applications, and thus they will show up in process monitor.
            // If we don't do this, then chromium creates them as new applications under the sheets but they don't show up in process monitor.
            // A developer can set isolateCrossDomainComponents=false to override this behavior if for some reason they need to.
            //@note [07-06-18] Brad: I THINK the reason this abomination of a negation exists is so that undefined or true will cause us to spawn cross domain windows as applications. At some point in the future we should try `isolateCrossDomain = isolateCrossDomainComponents !== false;`
            var dontIsolateCrossDomain = (this.finsembleConfig.isolateCrossDomainComponents === false);
            if (windowType === "OpenFinWindow" && !dontIsolateCrossDomain) {
                //Push cross domain windows into their own process.
                if (util.crossDomain(windowDescriptor.url)) {
                    windowType = "OpenFinApplication";
                }
            }
            windowDescriptor.windowType = windowType;
            logger_1.default.system.debug("WindowService.doSpawn", windowDescriptor, windowType);
            // Hack to get the wrap before it's ready. Added by ryan, commit d781a.
            let result = {
                windowIdentifier: {
                    windowName: windowDescriptor.name,
                    uuid: windowDescriptor.uuid,
                    componentType: windowDescriptor.componentType,
                    monitor: windowDescriptor.monitorInfo,
                    windowType: windowDescriptor.windowType
                },
                windowDescriptor: windowDescriptor
            };
            WrapManager_1.WrapManager.add(result);
            logger_1.default.system.debug("WindowService.doSpawn-time before", windowType, windowDescriptor.name);
            switch (windowType) {
                case "NativeWindow":
                    var { data } = await this.spawnExternalWindow(windowDescriptor);
                    WrapManager_1.WrapManager.setUuid(result.windowIdentifier.windowName, data.uuid);
                    break;
                case "OpenFinWindow":
                    if (this.ALLOW_SPLINTERING) {
                        logger_1.default.system.debug("WindowService.doSpawn-time splinter", windowType, windowDescriptor.name);
                        var { data } = await this.splinter(windowDescriptor);
                    }
                    else {
                        var { data } = await this.spawnOpenFinWindow(windowDescriptor);
                    }
                    WrapManager_1.WrapManager.setUuid(result.windowIdentifier.windowName, data.uuid);
                    break;
                case "OpenFinApplication":
                    var { data } = await this.spawnOpenfinApplication(windowDescriptor);
                    WrapManager_1.WrapManager.setUuid(result.windowIdentifier.windowName, data.uuid);
                    break;
                case "StackedWindow":
                    var { data } = await this.spawnStackedWindow(windowDescriptor);
                    break;
            }
            // makes sure both types of names are set -- will delete later after naming cleanup
            data.name = data.name || data.windowName;
            data.windowName = data.name;
            logger_1.default.system.debug("WindowService.doSpawn-time end", windowType, windowDescriptor.name, data);
            resolve({ err: null, windowIdentifier: data });
        };
        return new Promise(promiseResolver);
    }
    spawnExternalWindow(windowDescriptor) {
        const promiseResolver = (resolve) => {
            function spawnedListener(err, response) {
                routerClientInstance_1.default.removeListener(windowDescriptor.name + ".onSpawned", spawnedListener);
                windowDescriptor.uuid = response.data.uuid;
                let fw = windowDescriptor;
                // @TODO, capture close event and remove from our activeWindows
                resolve({ err: null, data: fw });
            }
            routerClientInstance_1.default.addListener(windowDescriptor.name + ".onSpawned", spawnedListener);
            routerClientInstance_1.default.query("Assimilation.spawnNative", windowDescriptor, function () { });
        };
        return new Promise(promiseResolver);
    }
    // Spawns a java app.
    spawnNativeWindow(windowDescriptor) {
        const promiseResolver = (resolve) => {
            function spawnedListener(err, response) {
                windowDescriptor = Object.assign(windowDescriptor, response.data);
                routerClientInstance_1.default.removeListener(windowDescriptor.name + ".onSpawned", spawnedListener);
                // @TODO, capture close event and remove from our activeWindows
                resolve({ err: null, data: windowDescriptor });
            }
            routerClientInstance_1.default.addListener(windowDescriptor.name + ".onSpawned", spawnedListener);
            routerClientInstance_1.default.query("FinsembleNative.spawn", windowDescriptor, (err, cb) => { });
        };
        return new Promise(promiseResolver);
    }
    // Spawns an OpenFin window
    spawnOpenFinWindow(windowDescriptor) {
        // This will ensure that the window is actually opened before returning. Seemingly an OpenFin bug means we
        // can't rely on new System.Window callback. We believe this exhibits for cross-domain windows.
        const promiseResolver = (resolve) => {
            windowDescriptor.uuid = windowDescriptor.uuid || system_1.System.Application.getCurrent().uuid;
            let fw;
            let spawnedListener = (err, response) => {
                if (!fw) {
                    fw = system_1.System.Window.wrap(windowDescriptor.uuid, windowDescriptor.name);
                    fw.addEventListener("closed", () => {
                        routerClientInstance_1.default.removeListener(windowDescriptor.name + ".onSpawned", spawnedListener);
                    });
                }
                this.injectMindControl(windowDescriptor, fw);
                resolve({ err: null, data: fw });
            };
            routerClientInstance_1.default.addListener(windowDescriptor.name + ".onSpawned", spawnedListener);
            new system_1.System.Window(windowDescriptor, function () { });
        };
        return new Promise(promiseResolver);
    }
    // Spawns a new openfin application.
    spawnOpenfinApplication(componentConfig) {
        let descriptor = this.compileOpenfinApplicationDescriptor(componentConfig);
        const self = this;
        const promiseResolver = (resolve) => {
            let fw;
            const onAppSpawned = () => {
                if (!fw) {
                    fw = system_1.System.Window.wrap(descriptor.uuid, descriptor.name);
                    fw.addEventListener("closed", () => {
                        routerClientInstance_1.default.removeListener(descriptor.name + ".onSpawned", onAppSpawned);
                    });
                }
                self.injectMindControl(descriptor, fw);
                resolve({ err: null, data: fw });
            };
            let finApp = new system_1.System.Application(descriptor, function onAppCreated() {
                routerClientInstance_1.default.addListener(descriptor.name + ".onSpawned", onAppSpawned);
                /** Because we mess with the `this` of System.Application,
                 * the compiler gets confused, so we have to cast to the right thing.
                 */
                finApp.run();
            }, function createAppError(err) {
                logger_1.default.system.error("Failed to create openfin Application", err);
            });
        };
        return new Promise(promiseResolver);
    }
    compileOpenfinApplicationDescriptor(componentConfig) {
        componentConfig.uuid = componentConfig.name;
        let descriptor = componentConfig;
        let parentUUID = system_1.System.Application.getCurrent().uuid;
        if (!descriptor.customData)
            descriptor.customData = {};
        descriptor.customData.parentUUID = parentUUID;
        descriptor.parentUUID = parentUUID;
        if (descriptor.external) {
            delete descriptor.preload;
        }
        else {
            descriptor.taskbarIconGroup = this.manifest.startup_app.uuid;
            // descriptor.mainWindowOptions.preload = typeof descriptor.preload === 'undefined' ? finsembleConfig.finsembleLibraryPath : descriptor.preload;
            descriptor.icon = this.manifest.startup_app.applicationIcon;
        }
        return descriptor;
    }
    // Spawns a new StackedWindow (a virtual window holding "tabbed" windows)
    spawnStackedWindow(componentConfig, cb = Function.prototype) {
        const promiseResolver = (resolve) => {
            //var stackedWindowIdentifer = { windowName: componentConfig.name, windowType: componentConfig.windowType, windowIdentifiers: componentConfig.windowIdentifiers || componentConfig.customData.spawnData.windowIdentifiers };
            logger_1.default.system.debug("CreateSplinterAndInject.spawnStackedWindow", componentConfig);
            this.stackedWindowManager.createStackedWindow(componentConfig, (err, windowIdentifer) => {
                if (err) {
                    logger_1.default.system.warn("StackedWindowManagerAPI.createStackedWindow: failed", err);
                    return cb(err, null);
                    resolve({ err, data: null });
                }
                else {
                    logger_1.default.system.debug("StackedWindowManagerAPI.createStackedWindow successful", windowIdentifer);
                    cb(err, windowIdentifer);
                    resolve({ err, data: windowIdentifer });
                }
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * The actual splinter method.
     * If a process is available and has room left for additional children, we request that the process fulfill the spawn request.
     * If there is no process available, we queue our spawn request. When the pool has created a new render process, we process the queue.
     */
    splinter(windowDescriptor) {
        const promiseResolver = async (resolve) => {
            windowDescriptor.taskbarIconGroup = windowDescriptor.external ? null : this.manifest.startup_app.uuid;
            windowDescriptor.icon = windowDescriptor.external ? null : this.manifest.startup_app.applicationIcon;
            windowDescriptor.uuid = windowDescriptor.uuid || system_1.System.Application.getCurrent().uuid;
            let fw;
            // The onSpawned listener fires when the component is spawned and every time it navigates to a new page or reloads.
            let spawnedListener = (err, response) => {
                if (!fw) {
                    fw = system_1.System.Window.wrap(windowDescriptor.uuid, windowDescriptor.name);
                    fw.addEventListener("closed", () => {
                        routerClientInstance_1.default.removeListener(windowDescriptor.name + ".onSpawned", spawnedListener);
                    });
                }
                this.injectMindControl(windowDescriptor, fw);
                resolve({ err: null, data: fw });
            };
            routerClientInstance_1.default.addListener(windowDescriptor.name + ".onSpawned", spawnedListener);
            // In Electron environments, pool won't be defined.
            if (this.SplinterAgentPool) {
                this.SplinterAgentPool.routeSpawnRequest(windowDescriptor); // sometimes fails here!!!!!!!!!!!!!!!
            }
            else {
                // Reassign manifest.finsemble to just a subset of its keys.
                const { FinsembleUUID, applicationRoot, moduleRoot, router } = windowDescriptor.customData.manifest.finsemble;
                windowDescriptor.customData.manifest.finsemble = { FinsembleUUID, applicationRoot, moduleRoot, router };
                /** This method is borrowed from SplinterAgentSlave. It does some checks then calls new System.Window,
                 * which calls through to the underlying container (OpenFin or Electron) to spawn the new window. */
                SplinterAgentSlave_1.onSpawnRequest(null, { data: { windowDescriptor } }, this.manifest);
            }
            //this.injectMindControl(windowDescriptor, fw);
            //resolve({ err: null, data: fw });
        };
        return new Promise(promiseResolver);
    }
    // This function is called when the LauncherService starts up. It pre-populates a single render process for each pool that's defined in the splinteringConfig.
    createSplinterAgentPool() {
        const promiseResolver = async (resolve) => {
            /** If we're running in Electron, splintering is not efficient, and is replaced instead with affinities, so
             * we short circuit splintering here.
             */
            if (fin.container === "Electron") {
                logger_1.default.system.debug("CreateSplinterAndInject: Detected Electron environmnet. Short-circuiting splintering.");
                resolve();
                return;
            }
            var finsembleConfig = this.finsembleConfig;
            logger_1.default.system.debug("CreateSplinterAndInject: createSplinterAgentPool", finsembleConfig, this.ALLOW_SPLINTERING);
            if (this.ALLOW_SPLINTERING) {
                let initialAgentList = finsembleConfig.splinteringConfig.splinterAgents.filter(agent => {
                    return agent.components && agent.components.length > 0;
                });
                let poolConfig = {
                    finsembleConfig,
                    agentList: initialAgentList,
                    manifest: this.manifest,
                    windowStore: this.windowStore,
                    maxWindowsForDefaultAgent: finsembleConfig.splinteringConfig.maxWindowsForDefaultAgent,
                };
                this.SplinterAgentPool = new SplinterAgentPool_1.default(poolConfig, resolve);
                // let onWindowRemoved = (descriptor) => {
                // 	self.remove(descriptor.name); //TBD
                // };
                // let onAddAgent = (agentName) => {
                // 	if (!self.agents) self.agents = {};
                // 	self.agents[agentName] = { lastHeartbeat: Date.now() };
                // };
                // let onAgentRemoved = (agentName) => {
                // 	delete self.agents[agentName];
                // };
                //heartbeat listeners
                //this.SplinterAgentPool.on("windowRemoved", onWindowRemoved);
                // this.SplinterAgentPool.on("addAgent", onAddAgent);
                //this.SplinterAgentPool.on("processRemoved", onAgentRemoved);
            }
            else {
                resolve();
            }
        };
        return new Promise(promiseResolver);
    }
    doShutdown() {
        const promiseResolver = (resolve) => {
            async_1.series([
                (finish) => { this.shutdownSplinterAgentPool(finish); },
                resolve,
            ]);
        };
        return new Promise(promiseResolver);
    }
    shutdownSplinterAgentPool(done) {
        if (this.SplinterAgentPool) {
            logger_1.default.system.debug("shutdownSplinterAgentPoolFinished start SplinterAgentPool.shutdown");
            this.SplinterAgentPool.shutdown(() => {
                logger_1.default.system.debug("shutdownSplinterAgentPoolnFinished SplinterAgentPool.shutdown");
                done();
            });
        }
        else {
            done();
        }
    }
    // Injects mind control scripts.
    injectMindControl(data, win) {
        var config = data.customData;
        if (config.component.inject) {
            var inject = data.customData.component.inject;
            if (!Array.isArray(inject)) {
                inject = [inject];
            }
            //To allow for code splitting, we must also inject our vendor bundle.
            inject = [this.finsembleConfig.applicationRoot + "/vendor.bundle.js"].concat(inject);
            for (let i = 0; i < inject.length; i++) {
                let req = new XMLHttpRequest();
                const onReadyStateChange = function () {
                    if (req.readyState === 4) {
                        win.executeJavaScript(req.responseText, function () {
                            logger_1.default.system.debug(inject + " injected");
                        }, function () {
                            logger_1.default.system.error(data.customData.component.inject + " injection failed");
                        });
                    }
                };
                try {
                    var injectURL = new URL(inject[i]);
                    inject[i] = injectURL.href;
                }
                catch (e) {
                    inject[i] = this.finsembleConfig.applicationRoot + "/components/mindcontrol/" + inject[i];
                }
                req.open("GET", inject[i], false);
                req.onreadystatechange = onReadyStateChange;
                try {
                    req.send(); // we were failing here which caused everything to fail.
                }
                catch (err) {
                    logger_1.default.system.error("Injecting mind control script failed:", inject[i]);
                }
            }
        }
    }
}
exports.CreateSplinterAndInject = CreateSplinterAndInject;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
const util = __webpack_require__(10);
const system_1 = __webpack_require__(4);
const logger_1 = __webpack_require__(2);
const configClient_1 = __webpack_require__(35);
const configUtil_1 = __webpack_require__(14);
const workspaceClient_1 = __webpack_require__(85);
const routerClientInstance_1 = __webpack_require__(6);
const distributedStoreClient_1 = __webpack_require__(78);
const launcherGroup_1 = __webpack_require__(212);
const FinsembleWindowInternal_1 = __webpack_require__(105);
const createSplinterAndInject_1 = __webpack_require__(165);
const LauncherDefaults_1 = __webpack_require__(163);
const async_1 = __webpack_require__(11);
const lodash_difference_1 = __webpack_require__(175);
const merge = __webpack_require__(102);
// For regression testing
__webpack_require__(211);
const clone = __webpack_require__(90);
var activeWindows = new launcherGroup_1.LauncherGroup({
    name: "LauncherService.allWindows",
});
const NAME_STORAGE_KEY = "finsemble.NameCountData";
var Components = {};
var componentArray = [];
distributedStoreClient_1.default.initialize();
/**
 * The Launcher Service receives calls from the launcherClient, and spawns windows.
 * @TODO, finish spawn (makeRoom, findEmptySpace, position=virtual, add abstraction for 0,0 by monitor, available, claimed)
 * @TODO, clean out old monitor routines from utils
 * @TODO, retrofit all code that appends customData to use "data/spawnData" instead
 * @constructor
 */
class Launcher {
    constructor(manifest, stackedWindowManager) {
        logger_1.default.system.log("Starting Launcher");
        this.createSplinterAndInject = new createSplinterAndInject_1.CreateSplinterAndInject(manifest, stackedWindowManager);
        this.finsembleConfig = manifest.finsemble;
        this.appConfig = {};
        this.pendingWindows = {}; // Note that pending windows only contains properties that are used, does not contain actual windows.
        self = this;
        //Window groups that are created via the launcher client.
        this.windowGroups = {};
        //todo possibly remove this. We used to inject an overwrites file before we gave people the finsemble.css.
        this.cssOverride = "";
        //Map of info about the last window that was opened.
        this.lastOpenedMap = {};
        this.lastAdjustedMap = {};
        //Whether to persist URL changes on the component.
        this.persistURL = false;
        //When we're shutting down, we ignore spawn requests. This gets set to true.
        this.shuttingDown = false;
        //Local copy of monitors, this will prevent us from having to fetch them everytime
        this.monitors = null;
        /**
         * Namespace to prevent collisions.
         */
        this.shutdownList = {};
        /**
         * This will be populated with the number of components that have told the Launcher whether they will require time to cleanup.
         */
        this.shutdownList.componentsResponded = [];
        /**
         * This will be populated with the components who are doing some cleanup.
         */
        this.shutdownList.waitFor = [];
        this.shutdownList.componentsOpenAtShutdown = 0;
        //@todo remove globals
        window.doingMonitorAdjustments = false;
        window.activeWindows = activeWindows; // make it available for access to rawWindow
        window.pendingWindows = this.pendingWindows;
        window.windowGroups = this.windowGroups;
        window.Launcher = this;
        this.bringWindowsToFront = this.bringWindowsToFront.bind(this);
        this.hyperFocus = this.hyperFocus.bind(this);
        this.minimizeWindows = this.minimizeWindows.bind(this);
        //Removes sequential names queued up last time the app was open. We use local storage to remember how many toolbars we've spawned.
        //todo, why are we using local storage??
        this.clearSequentialNames(); // invoke on startup
    }
    /**
     * Main function that starts everything up.
     * @param {*} callback
     */
    async initialize(callback) {
        logger_1.default.system.debug("Launcher.initialize");
        this.heartbeat();
        util.Monitors.on("monitors-changed", this.doMonitorAdjustments.bind(this));
        await this.createSplinterAndInject.initialize();
        async_1.series([
            this.getConfig.bind(this),
            this.loadComponents,
            this.getRawManifest,
            this.addPredefinedComponents.bind(this)
        ], () => {
            logger_1.default.system.debug("Launcher ready");
            callback(); // essentially ready now
            this.getMonitorInfoAll(function getMonitorInfoCallback(err, monitors) {
                logger_1.default.system.debug("Launcher monitors", monitors);
                routerClientInstance_1.default.addPubSubResponder("monitorInfo", monitors); //@TODO, this should be prefixed Launcher.monitorInfo
            });
        });
    }
    /**
     * This method handles the shutdownList sequence for the Launcher.
     */
    shutdown(allDone) {
        //bool to prevent new components from being spawned.
        self.shuttingDown = true;
        const smallTimeout = (callback) => {
            //I think I put this timeout in to allow the openfin IPC to catch up. It may not be necessary. Leaving it in until we have time to try pulling it out.
            setTimeout(callback, 1);
        };
        const promiseResolver = (resolve) => {
            async_1.series([
                self.shutdownComponents.bind(this),
                smallTimeout,
                //'resolve' will resolve the shutdownList, which then calls shutdownComplete in the baseService.
                resolve,
            ], (err) => {
                if (err) {
                    logger_1.default.system.error("shutdown error", err);
                }
                allDone();
            });
        };
        return new Promise(promiseResolver);
    }
    // returns list of known components
    getComponents() {
        return Components;
    }
    //Adds windows to several groups.
    addWindowsToGroups(params) {
        let err = null;
        let { groupName, windowList } = params;
        if (self.windowGroups[groupName]) {
            let actualWindowList = self.getWindowsFromNamesOrIdentifiers(windowList);
            self.windowGroups[groupName].addWindows(actualWindowList);
            self.sendUpdatesToWindows(actualWindowList);
        }
        else {
            err = "Group Does Not Exist";
        }
        return err;
    }
    // return list of window names for a give group name
    getWindowsInGroup(groupName) {
        let group = self.windowGroups[groupName];
        let windowList = self.windowGroups[groupName];
        return windowList;
    }
    removeWindowsFromGroup(params) {
        let err = null;
        let { groupName, windowList } = params;
        if (self.windowGroups[groupName]) {
            self.windowGroups[groupName].removeWindows(windowList);
            let actualWindowList = self.getWindowsFromNamesOrIdentifiers(windowList);
            self.sendUpdatesToWindows(actualWindowList);
        }
        else {
            err = "Group Does Not Exist";
        }
        return err;
    }
    //Adds a window to several groups.
    addWindowToGroups(data) {
        logger_1.default.system.debug("Add Window To Groups", data.groupNames, data.windowIdentifier);
        var win = activeWindows.getWindow(data.windowIdentifier);
        if (win) {
            for (let g in data.groupNames) {
                let groupName = data.groupNames[g];
                let group = self.windowGroups[groupName];
                if (!group) {
                    self.windowGroups[groupName] = new launcherGroup_1.LauncherGroup({
                        name: groupName,
                    });
                    group = self.windowGroups[groupName];
                }
                group.addWindow(win);
            }
            self.sendUpdatesToWindows([win]);
        }
    }
    /**
     * "StackedWindow" is a special built-in component that the launcher uses internally. We need
     * to make sure that the StackedWindow is *always* in the component list.
     * @private
     * @param {Function} cb
     */
    addPredefinedComponents(cb = Function.prototype) {
        logger_1.default.system.info("Launcher.AddPredefinedComponents");
        Components["StackedWindow"] = {
            window: {
                windowType: "StackedWindow",
                addToWorkspace: true
            },
            foreign: {
                services: {
                    dockingService: {
                        isArrangeable: true
                    }
                },
                components: {
                    "App Launcher": {
                        launchableByUser: false
                    },
                    "Window Manager": {
                        persistWindowState: true
                    }
                }
            },
            component: {
                type: "StackedWindow"
            }
        };
        this.update();
        cb(null);
    }
    addUnclaimedRectToMonitor(monitor) {
        if (!monitor) {
            return;
        }
        // Get the claims on space
        var claimsOffset = self.getClaimsOffset(monitor);
        // Now we'll assemble an unclaimedRect in the same format as OF's availableRect
        let availableRect = monitor.availableRect;
        let unclaimedRect = {
            top: availableRect.top + claimsOffset.top,
            bottom: availableRect.bottom - claimsOffset.bottom,
            left: availableRect.left + claimsOffset.left,
            right: availableRect.right - claimsOffset.right,
            width: null,
            height: null
        };
        unclaimedRect.width = unclaimedRect.right - unclaimedRect.left;
        unclaimedRect.height = unclaimedRect.bottom - unclaimedRect.top;
        // Return the complete set of all three monitorRect, availableRect, unclaimedRect back to the client
        monitor.unclaimedRect = unclaimedRect;
    }
    addUserDefinedComponent(message, cb) {
        var name = message.data.name;
        var config = {
            window: {
                url: message.data.url,
                windowType: message.data.windowType
            },
            foreign: {
                services: {
                    dockingService: {
                        isArrangeable: true
                    },
                    launcherService: {
                        inject: true
                    }
                },
                components: {
                    "App Launcher": {
                        launchableByUser: true
                    },
                    "Window Manager": {
                        persistWindowState: true
                    },
                    "Toolbar": {
                        iconURL: "https://plus.google.com/_/favicon?domain_url=" + message.data.url
                    }
                }
            },
            component: {
                type: name,
                isUserDefined: true
            }
        };
        var err = null;
        if (Components[name]) {
            err = "Component of type " + name + " already exists.";
        }
        else {
            Components[name] = config;
        }
        this.update();
        cb(err, null);
    }
    /**
     * Brings a list, group, componentType or all windows to front
     * @param {*} response.data.windowList list of window names or window identifiers.
     * @param {*} response.data.groupName group name
     * @param {*} response.data.componentType component type.
     */
    bringWindowsToFront(err, response, cb = Function.prototype) {
        if (!response)
            response = {};
        response.functionName = "bringToFront";
        this.executeWindowGroupFunctionByListGroupOrType(response, cb);
    }
    calculateBounds(foundMonitor, windowDescriptor, launcherParams) {
        var position = launcherParams.position;
        var monitors = launcherParams.monitors;
        var previousMonitor = launcherParams.previousMonitor;
        var monitor = previousMonitor;
        // Client can optionally override by picking a monitor
        var commandMonitor = launcherParams.monitor;
        if ((commandMonitor && commandMonitor !== "mine") || commandMonitor === 0) {
            monitor = foundMonitor;
        }
        if (!monitor)
            monitor = foundMonitor;
        // Set monitorDimensions since other services reference this.
        // @TODO, get rid of this [Terry] Probably not a good idea, since monitor dimensions can change dynamically
        // better for any services to use the util functions on the fly when they need monitorDimensions
        if (!windowDescriptor.customData) {
            windowDescriptor.customData = {};
        } // just in case we don't send an actual windowDescriptor in
        windowDescriptor.customData.monitorDimensions = monitor.availableRect;
        self.addUnclaimedRectToMonitor(monitor);
        /* Now that we know which monitor, set some variables to use in calculations
        var monitorWidth = monitor.unclaimedRect.width, monitorHeight = monitor.unclaimedRect.height;
        var monitorX = monitor.availableRect.left, monitorY = monitor.availableRect.top;*/
        // Set variables for calculations based on the dimensions of the opening window
        var previousWindowBounds = launcherParams.previousWindowBounds;
        var previousX = previousWindowBounds ? launcherParams.previousWindowBounds.left : monitor.availableRect.left;
        var previousY = previousWindowBounds ? launcherParams.previousWindowBounds.top : monitor.availableRect.top;
        var previousWidth = previousWindowBounds ? previousWindowBounds.width : launcherParams.width;
        var previousHeight = previousWindowBounds ? previousWindowBounds.height : launcherParams.height;
        var staggerPixels; //In order we will check the local launcherParams.staggerPixels. If that is undefined, we will
        //check the this.finsembleConfig, if _that_ is undefined, we default to 40. (This magic number was here previously.)
        if (launcherParams.hasOwnProperty("staggerPixels") && Number(launcherParams.staggerPixels) !== NaN) { //eslint-disable-line
            staggerPixels = launcherParams.staggerPixels;
        }
        else if (this.finsembleConfig.servicesConfig && this.finsembleConfig.servicesConfig.hasOwnProperty("launcher") &&
            this.finsembleConfig.servicesConfig.launcher.hasOwnProperty("staggerPixels")) {
            staggerPixels = this.finsembleConfig.servicesConfig.launcher.staggerPixels;
        }
        else {
            staggerPixels = 40;
        }
        // The viewport is a box that is identified by coordinates in the virtual space (all monitors)
        // left, right, top, bottom calculations are done in that space
        var viewport;
        if (position === "available") {
            viewport = monitor.availableRect;
        }
        else if (position === "monitor") {
            viewport = monitor.monitorRect;
        }
        else if (position === "relative") {
            viewport = {
                left: previousX,
                top: previousY,
                right: previousX + previousWidth,
                bottom: previousY + previousHeight,
                width: previousWidth,
                height: previousHeight
            };
        }
        else if (position === "virtual") {
            let virtualLeft = 0, virtualTop = 0, virtualWidth = 0, virtualHeight = 0;
            monitors.forEach((monitor) => {
                let dims = monitor.availableRect;
                virtualWidth += Math.abs(dims.right - dims.left);
                virtualHeight += Math.abs(dims.bottom - dims.top);
                if (dims.left < virtualLeft) {
                    virtualLeft = dims.left;
                }
                if (dims.top < virtualTop) {
                    virtualTop = dims.top;
                }
            });
            viewport = {
                left: virtualLeft,
                top: virtualTop,
                width: virtualWidth,
                height: virtualHeight
            };
        }
        else {
            viewport = monitor.unclaimedRect;
        }
        // Width & height default to the component defaults, which is set earlier in the stack
        var width = 800, height = 600;
        if (launcherParams.width || launcherParams.width === 0) {
            if (util.isPercentage(launcherParams.width)) {
                width = viewport.width * parseFloat(launcherParams.width) / 100;
            }
            else {
                width = parseFloat(launcherParams.width);
            }
        }
        if (launcherParams.height || launcherParams.height === 0) {
            if (util.isPercentage(launcherParams.height)) {
                height = viewport.height * parseFloat(launcherParams.height) / 100;
            }
            else {
                height = parseFloat(launcherParams.height);
            }
        }
        // Various x,y placement commands are possible.
        var leftCommand = launcherParams.left, topCommand = launcherParams.top;
        var rightCommand = launcherParams.right, bottomCommand = launcherParams.bottom;
        // Initialize the lastOpenedMap if not already. First window will open in top left corner of screen. This
        // only gets updated when a window is opened without any specific location. The entire thing resets if the user
        // hasn't opened a window in over a minute.
        let resetStaggerTimer = 1000 * 60;
        let lastOpened = self.lastOpenedMap[monitor.position];
        if (!lastOpened || (Date.now() - lastOpened.then) > resetStaggerTimer) {
            self.resetSpawnStagger({ monitorPosition: monitor.position });
            lastOpened = self.lastOpenedMap[monitor.position];
        }
        // For "adjacent" we want to automatically align the new component (unless specified otherwise by the developer)
        if (leftCommand === "adjacent" || rightCommand === "adjacent") {
            if (!topCommand && topCommand !== 0) {
                topCommand = "aligned";
            }
        }
        else if (topCommand === "adjacent" || bottomCommand === "adjacent") {
            if (!leftCommand && leftCommand !== 0) {
                leftCommand = "aligned";
            }
        }
        var left, right, top, bottom, updateX, updateY, lastY = lastOpened.y, lastX = lastOpened.x;
        if (leftCommand === "center") {
            let center = viewport.left + (viewport.width / 2);
            left = center - (width / 2);
        }
        else if (leftCommand === "adjacent") {
            left = previousX + previousWidth;
        }
        else if (leftCommand === "aligned") {
            left = previousX;
        }
        else if (leftCommand || leftCommand === 0) {
            if (util.isPercentage(leftCommand)) {
                left = viewport.left + viewport.width * parseFloat(leftCommand) / 100;
            }
            else {
                left = viewport.left + parseFloat(leftCommand);
            }
        }
        else if (!rightCommand && rightCommand !== 0) {
            //Make sure last opened window was on our viewport.
            if (!(lastX >= monitor.unclaimedRect.left && lastX <= monitor.unclaimedRect.right)) {
                lastX = monitor.unclaimedRect.left;
                lastY = monitor.unclaimedRect.top;
            }
            if (isNaN(lastX)) {
                lastX = null;
            }
            // stagger if neither left nor right commands
            if (launcherParams.relativeWindow) {
                lastOpened.x = previousX;
            }
            else if (lastX === null) { // start at 0
                lastX = monitor.unclaimedRect.left - staggerPixels;
            }
            left = lastX + staggerPixels;
            // Make sure we don't go off right edge of monitor
            if (left + width > monitor.unclaimedRect.right) {
                left = monitor.unclaimedRect.right - width;
            }
            updateX = true;
        }
        if (rightCommand === "adjacent") {
            left = previousX - width;
        }
        else if (rightCommand === "aligned") {
            left = previousX + previousWidth - width;
        }
        else if (rightCommand || rightCommand === 0) {
            if (util.isPercentage(rightCommand)) {
                right = viewport.right - (viewport.width * parseFloat(rightCommand) / 100);
            }
            else {
                right = viewport.right - parseFloat(rightCommand);
            }
            if (left || left === 0) {
                // If we have a left command and right command, then set the width
                width = right - left;
            }
            else {
                // If we only have a right command and a width, then we back into the left
                left = right - width;
            }
        }
        if (topCommand === "center") {
            let center = viewport.top + (viewport.height / 2);
            top = center - (height / 2);
        }
        else if (topCommand === "adjacent") {
            top = previousY + previousHeight;
        }
        else if (topCommand === "aligned") {
            top = previousY;
        }
        else if (topCommand || topCommand === 0) {
            if (util.isPercentage(topCommand)) {
                top = viewport.top + viewport.height * parseFloat(topCommand) / 100;
            }
            else {
                top = viewport.top + parseFloat(topCommand);
            }
        }
        else if (!bottomCommand && bottomCommand !== 0) {
            //Make sure last opened window was on our viewport.
            if (!(lastY <= monitor.unclaimedRect.bottom && lastY >= monitor.unclaimedRect.top)) {
                lastY = monitor.unclaimedRect.top;
                lastX = monitor.unclaimedRect.left;
            }
            if (isNaN(lastY)) {
                lastY = null;
            }
            // stagger
            if (launcherParams.relativeWindow) {
                lastOpened.y = previousY;
            }
            else if (lastY === null) { // start at 0
                lastY = monitor.unclaimedRect.top - staggerPixels;
            }
            top = lastY + staggerPixels;
            // Make sure we don't go off right edge of monitor
            if (top + height > monitor.unclaimedRect.bottom) {
                top = monitor.unclaimedRect.bottom - height;
            }
            updateY = true;
        }
        if (bottomCommand === "adjacent") {
            top = previousY - height;
        }
        else if (bottomCommand === "aligned") {
            top = previousY + previousHeight - height;
        }
        else if (bottomCommand || bottomCommand === 0) {
            if (util.isPercentage(bottomCommand)) {
                bottom = viewport.bottom - (viewport.height * parseFloat(bottomCommand) / 100);
            }
            else {
                bottom = viewport.bottom - parseFloat(bottomCommand);
            }
            if (top || top === 0) {
                height = bottom - top;
            }
            else {
                top = bottom - height;
            }
        }
        // Make sure we have a right and a bottom
        if (!right && Number.isFinite(left)) {
            right = left + width;
        }
        if (!bottom && Number.isFinite(top)) {
            bottom = top + height;
        }
        // Force to be on monitor
        if (launcherParams.forceOntoMonitor) {
            if (right > monitor.unclaimedRect.right) {
                left = left - (right - monitor.unclaimedRect.right);
                right = monitor.unclaimedRect.right;
            }
            if (bottom > monitor.unclaimedRect.bottom) {
                //Before, the bottom of the window being shown would line up with the bottom of the monitor. If this was a menu, this was problematic because the menu would overlap the toolbar. Instead, we line up the bottom of the window with the top of the relative window.
                if (topCommand === "adjacent") {
                    bottom = previousY;
                }
                else {
                    top = top - (bottom - monitor.unclaimedRect.bottom);
                }
                top = bottom - height;
            }
            //left after right in case window bigger than viewport
            if (left < monitor.unclaimedRect.left) {
                left = monitor.unclaimedRect.left;
                right = left + width;
            }
            if (top < monitor.unclaimedRect.top) {
                top = monitor.unclaimedRect.top;
                bottom = top + height;
            }
        }
        // Only if both x and y were unassigned do we save the information so that we can stagger again later
        if (updateX && updateY) {
            if (launcherParams.options && typeof launcherParams.options.defaultLeft === "undefined") { // defaultLeft is set when being restored from workspace. We don't want those to affect the stagger algorithm.
                logger_1.default.system.debug("lastOpened.x", left, launcherParams);
                lastOpened.x = left;
                lastOpened.y = top;
            }
            lastOpened.then = Date.now();
        }
        if (left || left === 0) {
            windowDescriptor.defaultLeft = Math.round(left);
        }
        if (top || top === 0) {
            windowDescriptor.defaultTop = Math.round(top);
        }
        if (width || width === 0) {
            windowDescriptor.defaultWidth = Math.round(width);
        }
        if (height || height === 0) {
            windowDescriptor.defaultHeight = Math.round(height);
        }
        windowDescriptor.monitorInfo = monitor.position; //only this position is used elsewhere so stop putting the entire object in the windowDescriptor so as not to overload the store
        if (typeof (launcherParams.claimMonitorSpace) !== "undefined") {
            windowDescriptor.claimMonitorSpace = launcherParams.claimMonitorSpace;
        }
        windowDescriptor = this.adjustBoundsToBeOnMonitor(windowDescriptor);
        this.lastOpenedMap[monitor.position] = {
            x: windowDescriptor.defaultLeft,
            y: windowDescriptor.defaultTop
        };
        return Promise.resolve(windowDescriptor);
    }
    /**
     * Calculate the new bounds of a window if moved onto the monitor by pulling the monitor along the line
     * between the top-left of the window and the center of the monitor
     * @param {*} monitor a monitor
     * @param {*} bounds current window bounds
     */
    getNewBoundsWhenMovedToMonitor(monitor, bounds) {
        // Depending if the monitor has claimed space, determine rectangle
        let monitorRect = monitor.unclaimedRect || monitor.availableRect || monitor.monitorRect;
        // Placeholder for new bounds
        let newBounds = Object.create(bounds);
        // adjust vertical offset from monitor by moving top down or bottom up
        if (bounds.top < monitorRect.top) {
            newBounds.top = monitorRect.top;
        }
        else if (bounds.top > monitorRect.bottom - bounds.height) {
            newBounds.top = monitorRect.bottom - bounds.height;
        }
        // Adjust horizontal offset from monitor by moving left-edge rightward or right-edge leftward
        if (bounds.left < monitorRect.left) {
            newBounds.left = monitorRect.left;
        }
        else if (bounds.left > monitorRect.right - bounds.width) {
            newBounds.left = monitorRect.right - bounds.width;
        }
        // Recalculate bottom / right, based on movement of top / left, maintaining width / height
        newBounds.bottom = newBounds.top + newBounds.height;
        newBounds.right = newBounds.left + newBounds.width;
        // Truncate portions off monitor in case we are downsizing from a maximized window
        if (newBounds.right > monitorRect.right)
            newBounds.right = monitorRect.right;
        if (newBounds.top < monitorRect.top)
            newBounds.top = monitorRect.top;
        if (newBounds.left < monitorRect.left)
            newBounds.left = monitorRect.left;
        if (newBounds.bottom > monitorRect.bottom)
            newBounds.bottom = monitorRect.bottom;
        // Recalculate width, height in case of truncation to ensure the window fits on the new monitor
        newBounds.height = newBounds.bottom - newBounds.top;
        newBounds.width = newBounds.right - newBounds.left;
        // Calculate distance the window moved
        let distanceMoved = Math.sqrt((bounds.left - newBounds.left) ** 2 + (bounds.top - newBounds.top) ** 2);
        return {
            newBounds: newBounds,
            distanceMoved: distanceMoved,
            monitor: monitor
        };
    }
    /**
     * Takes the window's bounds and makes sure it's on a monitor. If the window isn't on a monitor, we determine the closest monitor
     * based on the distance from the top-left corner of the window to the center of the monitor, and then pull the monitor along that line
     * until the window is on the edge of the monitor
     * @param {*} windowDescriptor Window descriptor, e.g. from a saved workspace
     * @param {*} previousWindowBounds not used, unfortunately
     * @returns windowDescriptor updated window descriptor
     */
    adjustBoundsToBeOnMonitor(windowDescriptor) {
        if (windowDescriptor && windowDescriptor.customData && windowDescriptor.customData.window) {
            if (windowDescriptor.customData.window.allowToSpawnOffScreen) {
                return windowDescriptor;
            }
        }
        let bounds = {
            left: windowDescriptor.defaultLeft,
            top: windowDescriptor.defaultTop,
            height: windowDescriptor.defaultHeight,
            width: windowDescriptor.defaultWidth,
            right: null,
            bottom: null
        };
        bounds.right = bounds.left + bounds.width;
        bounds.bottom = bounds.top + bounds.height;
        //@note, will be used later.
        let boundsWereAdjusted = false;
        if (windowDescriptor.customData && windowDescriptor.customData.monitorDimensions) {
            // Determine if on a monitor, and if not, pull top-left corner directly toward center of monitor until it completely onscreen
            let isOnAMonitor = util.Monitors.allMonitors.some((monitor) => {
                // use entire monitor rather than relying on unclaimed space
                let monitorRect = monitor.monitorRect;
                // Check to see tf it's to the right of the left side of the monitor,
                // to the left of the right side, etc.basically is it within the monitor's bounds.
                let isOnMonitor = bounds.left >= monitorRect.left && bounds.left <= monitorRect.right
                    && bounds.right >= monitorRect.left && bounds.right <= monitorRect.right
                    && bounds.top >= monitorRect.top && bounds.top <= monitorRect.bottom
                    && bounds.bottom >= monitorRect.top && bounds.bottom <= monitorRect.bottom;
                return isOnMonitor;
            });
            if (!isOnAMonitor) {
                // calculate if the window is on any monitor, and the distance between the top left and the center of the window
                let monitorAdjustments = util.Monitors.allMonitors.map((monitor) => this.getNewBoundsWhenMovedToMonitor(monitor, bounds));
                // Get the closest monitor, the one with minimum distanceMoved
                let monitorAdjustmentClosest = monitorAdjustments.sort((md1, md2) => md1.distanceMoved - md2.distanceMoved)[0];
                // notify the movement
                logger_1.default.system.info("Launcher.adjustBoundsToBeOnMonitor", windowDescriptor.name, bounds, monitorAdjustmentClosest.monitor.name, monitorAdjustmentClosest.newBounds);
                // assign bounds
                bounds = monitorAdjustmentClosest.newBounds;
                boundsWereAdjusted = true;
            }
            // update windowDescriptor
            windowDescriptor.defaultLeft = bounds.left;
            windowDescriptor.defaultTop = bounds.top;
            windowDescriptor.left = bounds.left;
            windowDescriptor.top = bounds.top;
            windowDescriptor.height = bounds.height;
            windowDescriptor.width = bounds.width;
            windowDescriptor.right = bounds.left + bounds.width;
            windowDescriptor.bottom = bounds.top + bounds.height;
        }
        return windowDescriptor;
    }
    // clears counters from local storage -- counters will restart at 1 for new names
    clearSequentialNames() {
        localStorage.removeItem(NAME_STORAGE_KEY);
    }
    /**
     * @private
     */
    compileWindowDescriptor(config, params, baseDescriptor, resultFromDeriveBounds) {
        var windowDescriptor = baseDescriptor;
        // Pushes affinity option further down callstack for eventual consumption by E2O.
        if (params.affinity) {
            windowDescriptor.affinity = params.affinity;
        }
        // Ephemeral windows, such as dialogs, menus, linker, etc
        if (params.ephemeral) {
            windowDescriptor.resizable = false;
            windowDescriptor.showTaskbarIcon = false;
            windowDescriptor.alwaysOnTop = true;
            // ephemeral objects shouldn't be added to the workspace, unless explicitly set in their config
            // @TODO, this should really look at foreign:services:workspaceService
            if (typeof config.window.addToWorkspace === "undefined") {
                config.window.addToWorkspace = false;
            }
        }
        // Override all settings with any "options" from the config
        if (config.window.options) {
            windowDescriptor = merge(windowDescriptor, config.window.options);
        }
        //Merging first so that any params that the dev passes in overwrite what we calculate.
        windowDescriptor = merge(windowDescriptor, resultFromDeriveBounds);
        // Add the config entries into customData so that it's available to the new window
        windowDescriptor.customData = merge(windowDescriptor.customData, config);
        // Any data passed by argument is added to spawnData so that it's available to the new window
        if (params.data) {
            windowDescriptor.customData.spawnData = params.data;
        }
        // Final override of any "options" that were passed in as an argument
        if (params.options) {
            windowDescriptor = merge(windowDescriptor, params.options);
        }
        windowDescriptor.customData.manifest = this.rawManifest; // pass in custom data so router can use
        logger_1.default.system.debug("Launcher.compileWindowDescriptor", windowDescriptor);
        return windowDescriptor;
    }
    /**
     * Locates a window based on a componentType
     * @param {object} windowIdentifier The parameters
     * @param  {string}   windowIdentifier.componentType	 The type of component
     * @return {finWindow} Returns a finWindow for the component, or null if not found
     */
    componentFinder(windowIdentifier) {
        var windowsOfComponentType = activeWindows.findAllByComponentType(windowIdentifier.componentType);
        if (windowsOfComponentType.length) {
            return windowsOfComponentType[0];
        }
        return null;
    }
    /**
     * Create Window Group
     */
    createWindowGroup(err, message) {
        logger_1.default.system.debug("Creating Group", message);
        if (!message.data.groupName) {
            return message.sendQueryResponse("No Groupname Specified");
        }
        // Build Window List from window names/identifiers
        var actualWindowList = self.getWindowsFromNamesOrIdentifiers(message.data.windowList, true);
        self.windowGroups[message.data.groupName] = new launcherGroup_1.LauncherGroup({
            name: message.data.groupName,
            windows: actualWindowList
        });
        self.sendUpdatesToWindows(self.getWindowsFromNamesOrIdentifiers(message.data.windowList));
        if (message.sendQueryResponse)
            message.sendQueryResponse(null, "Success");
    }
    deleteWindowGroup(err, message) {
        logger_1.default.system.debug("Deleting Group", message.data.groupName);
        if (!message.data.groupName) {
            return message.sendQueryResponse("No Groupname Specified");
        }
        let groupName = message.data.groupName;
        if (self.windowGroups[groupName]) {
            let group = self.windowGroups[groupName];
            let windowList = group.getWindows();
            group.destroy();
            delete self.windowGroups[message.data.groupName];
            self.sendUpdatesToWindows(windowList);
        }
        message.sendQueryResponse(null, "Success");
    }
    /**
     * Sets the dimensions and placement of the window by translating the launcherParams
     * to the requires settings for an OpenFin windowDescriptor.
     *
     * @params	object	launcherParams Params from spawn()
     * @returns {Promise} A promise that resolves to a new windowDescriptor that describes the new window.
     * with defaultLeft, defaultTop, defaultWidth, defaultHeight, and claimMonitorSpace set.
     */
    deriveBounds(launcherParams) {
        var windowDescriptor = {};
        // Default to same monitor of the relativeWindow passed in (usually the window that launched us)
        // Get windowDescriptor for the previous window (the caller or relativeWindow)
        function addPreviousWindow(params) {
            async function promiseResolver(resolve) {
                var whichWindow = params.relativeWindow || params.launchingWindow;
                if (whichWindow) {
                    params.previousWindow = activeWindows.getWindow(whichWindow.windowName);
                    // TBD Cleanup: this was wrapping windows before they were created -- not clear needed
                    // if (!params.previousWindow) {
                    // 	Logger.system.debug(":wrap: deriveBounds addPreviousWindow", whichWindow);
                    // 	let { wrap } = await FinsembleWindow.getInstance(whichWindow);
                    // 	params.previousWindow = wrap;
                    // }
                }
                resolve(params);
            }
            return new Promise(promiseResolver);
        }
        // Get all monitors
        function addAllMonitors(params) {
            return new Promise(function (resolve) {
                util.getAllMonitors(function (monitors) {
                    params.monitors = monitors;
                    resolve(params);
                });
            });
        }
        // Get the monitor descriptor for that previous window
        function addPreviousMonitor(params) {
            return new Promise(function (resolve) {
                if (params.previousWindow) {
                    // as is this code on startup tried to get bounds of Workspace Service (i.e. the previousWindow).  This is a flawed way to determine
                    // which monitor to start up....for one the Workspace service doesn't have a bounds after wrapper cleanup.  Short-term solution is
                    // on error then set monitor[0] as the previousMonitor.
                    params.previousWindow._getBounds((err, bounds) => {
                        if (!err) {
                            params.previousWindowBounds = bounds;
                            util.Monitors.getMonitorFromScaledXY(bounds.left, bounds.top, (monitor) => {
                                params.previousMonitor = monitor;
                                resolve(params);
                            });
                        }
                        else {
                            params.previousMonitor = params.monitors[0];
                            resolve(params);
                        }
                    });
                }
                else {
                    resolve(params);
                }
            });
        }
        //Gets the monitor for the window that we're about to spawn.
        function getWhichMonitor(params) {
            return new Promise(function (resolve /*, reject*/) {
                var getWhichMonitorParams = {
                    commandMonitor: params.monitor,
                    monitors: params.monitors,
                    launchingMonitorPosition: params.position,
                    windowIdentifier: params.relativeWindow || params.launchingWindow,
                    windowDescriptor: windowDescriptor
                };
                util.getWhichMonitor(getWhichMonitorParams, function (monitor) {
                    resolve(monitor);
                });
            });
        }
        //Add information to launcherParams (previous window, monitors, etc).
        //when all is collected, call calculateBounds() to finish the job.
        const promiseResolver = async (resolve) => {
            launcherParams = await addPreviousWindow(launcherParams);
            launcherParams = await addAllMonitors(launcherParams);
            launcherParams = await addPreviousMonitor(launcherParams);
            let monitor = await getWhichMonitor(launcherParams);
            let bounds = await this.calculateBounds(monitor, windowDescriptor, launcherParams);
            resolve(bounds);
        };
        return new Promise(promiseResolver);
    }
    /**
     * The basic algorithm for handling monitor adjustments is:
     * 1) Remove any orphaned components. These would be any spawnOnAllMonitor components that are now located
     * on a different monitor than they started. We simply compare their existing monitor with the one they were
     * spawned upon, and remove them if they aren't where they belong.
     *
     * 2) Add any motherless components. These would be any spawnOnAllMonitor components that are missing from a
     * particular monitor, presumably because the monitor just got added.
     *
     * 3) Adjust component dimensions. Since the monitor size may have changed we need to adjust any components
     * that had previously made assumptions about monitor size (such as a toolbar that is supposed to stretch across
     * the top of the screen). We cycle through any components that have made a "claim" on monitor space and then
     * simply call showWindow() with their original params in order to give them a chance to resettle.
     */
    doMonitorAdjustments(monitors) {
        // Event fires multiple times for monitor changes - so stop things from happening too many times.
        if (window.doingMonitorAdjustments)
            return;
        window.doingMonitorAdjustments = true;
        var components = {};
        async_1.series([
            (done) => {
                this.monitorRemoveOrphans(monitors, components, done);
            },
            (done) => {
                this.monitorAddMotherless(monitors, components, done);
            },
            this.monitorAdjustDimensions
        ], function () {
            window.doingMonitorAdjustments = false;
        });
    }
    /**
     * Convenient way to execute stuff on a group or all windows
     */
    executeWindowGroupFunctionByListGroupOrType(response, cb = Function.prototype) {
        let windowGroup;
        if (!response.data)
            response.data = {};
        let { groupName, windowList } = response.data;
        // If we have a groupName, use that otherwise use activeWindows
        if (groupName) {
            windowGroup = self.windowGroups[groupName];
        }
        else {
            windowGroup = activeWindows;
        }
        let functionToCall = windowGroup[response.functionName].bind(windowGroup);
        // If we've been passed a list or a componentType, filter the group by the list or componentType
        if (windowList) {
            delete response.data.componentType;
        }
        functionToCall(response.data, cb);
    }
    /**
     * Returns a list of window descriptors that includes each window that the launcher has spawned.
     */
    getActiveDescriptors() {
        var descriptors = {};
        var allActiveWindows = activeWindows.getWindows();
        for (var name in allActiveWindows) {
            descriptors[name] = allActiveWindows[name].windowDescriptor;
        }
        return descriptors;
    }
    /**
         * Gets offsets to monitor dimensions basedon any space permanently
         * claimed by othe components such as toolbars.
         * @param  {object} myMonitor The monitor
         * @return {object}         An object containing offsets for top, bottom, left & right
         */
    getClaimsOffset(myMonitor) {
        var claimAdjusted = clone(myMonitor); // error when using util.clone
        var availableRect = claimAdjusted.availableRect;
        var monitorRect = myMonitor.monitorRect || myMonitor.availableRect; // TODO: Sidd - a customer on Win 7 had monitorRect undefined causing showWindow to fail on the non-floating toolbar. Fix that by falling back to avaialbleRect.
        var allActiveWindows = activeWindows.getWindows();
        for (var name in allActiveWindows) {
            var activeWindow = allActiveWindows[name];
            var windowDescriptor = activeWindow.windowDescriptor;
            if (!windowDescriptor || !windowDescriptor.claimMonitorSpace) {
                continue;
            }
            // Got a window with claim. Is it on my monitor?
            // @TODO, technically defaultLeft and defaulTop might have changed since when we first
            // created the toolbar, say for instance if we designed toolbars that you could drag to
            // different edges of the monitor, so we should change this code to retrieve these values
            // asynchronously using getWindowDescriptor()
            var x = windowDescriptor.defaultLeft, y = windowDescriptor.defaultTop;
            if (x < monitorRect.left || x >= monitorRect.right || y < monitorRect.top || y >= monitorRect.bottom) {
                continue;
            }
            // Yes, then let's adjust our available monitor dimensions
            var h = windowDescriptor.defaultHeight, w = windowDescriptor.defaultWidth;
            // horizontal toolbars
            if (w > h) {
                var bottom = y + h, top = y;
                if (top <= availableRect.top) {
                    availableRect.top = bottom;
                }
                else {
                    availableRect.bottom = top;
                }
            }
            else {
                var left = x, right = x + w;
                if (left <= availableRect.left) {
                    availableRect.left = right;
                }
                else {
                    availableRect.right = left;
                }
            }
        }
        var returnObj = {
            top: availableRect.top - myMonitor.availableRect.top,
            bottom: myMonitor.availableRect.bottom - availableRect.bottom,
            left: availableRect.left - myMonitor.availableRect.left,
            right: myMonitor.availableRect.right - availableRect.right
        };
        return returnObj;
    }
    /**
     * Returns an map of components that can receive specific data types based on "advertiseReceivers" in the component config
     *
     * @param {array} dataTypes A list of dataTypes (string)
     */
    getComponentsThatCanReceiveDataTypes(dataTypes) {
        var componentsThatCanReceiveDataTypes = {};
        for (var c in Components) {
            var component = Components[c];
            var receivers = component.component.advertiseReceivers;
            if (!receivers) {
                continue;
            }
            if (!Array.isArray(receivers)) {
                receivers = [receivers];
            }
            var commonDataTypes = receivers.filter(o => dataTypes.includes(o));
            for (var i = 0; i < commonDataTypes.length; i++) {
                var commonType = commonDataTypes[i];
                if (!componentsThatCanReceiveDataTypes[commonType]) {
                    componentsThatCanReceiveDataTypes[commonType] = {
                        componentTypes: [c],
                        activeComponents: []
                    };
                }
                else {
                    componentsThatCanReceiveDataTypes[commonType].componentTypes.push(c);
                }
                var allActiveWindows = activeWindows.getWindows();
                var activeComponentNames = Object.keys(allActiveWindows).filter(name => {
                    return allActiveWindows[name].params.component == c;
                });
                for (var j of activeComponentNames) {
                    componentsThatCanReceiveDataTypes[commonType].activeComponents.push(j);
                }
                //componentsThatCanReceiveDataTypes[commonType].activeComponents = [...componentsThatCanReceiveDataTypes[commonType].activeComponents, ...activeComponents];
            }
        }
        for (var dataType of dataTypes) {
            if (!componentsThatCanReceiveDataTypes[dataType]) {
                componentsThatCanReceiveDataTypes[dataType] = {
                    componentTypes: [],
                    activeComponents: []
                };
            }
        }
        return componentsThatCanReceiveDataTypes;
    }
    /*
    A helper for pulling out the default config for url persistence
    */
    getGlobalURLPersistence() {
        return this.appConfig.finsemble.servicesConfig && this.appConfig.finsemble.servicesConfig.launcher &&
            this.appConfig.finsemble.servicesConfig.launcher.hasOwnProperty("persistURL") ?
            this.appConfig.finsemble.servicesConfig.launcher.persistURL :
            false;
    }
    getDefaultConfig(componentType) {
        let defaultConfig = Components[componentType];
        return defaultConfig || null;
    }
    getComponentConfig(cb = Function.prototype) {
        const promiseResolver = (resolve) => {
            configClient_1.default.getValue({ field: "finsemble.components" }, (err, componentConfig) => {
                //adding the value property to make the input on onComponentListChanged consistent with the listener functionality on the configClient.
                this.onComponentListChanged(null, { value: componentConfig });
                if (cb)
                    cb();
                resolve();
            });
        };
        return new Promise(promiseResolver);
    }
    onComponentListChanged(err, componentConfig) {
        logger_1.default.system.debug("Launcher getconfig finsemble.components", componentConfig);
        this.finsembleConfig.components = componentConfig.value;
        Components = componentConfig.value;
        //Make sure our stackedWindow gets into the Components object!
        this.addPredefinedComponents();
        componentArray = [];
        Object.keys(Components).map(function (component) {
            if (!Components[component].component)
                Components[component].component = {};
            Components[component].component.type = component;
            componentArray.push(Components[component]);
        });
        routerClientInstance_1.default.transmit("Launcher.update", {
            componentList: Components
        });
    }
    /**
     * Gets the list of components, listens for changes on the components.
     * @param {*} cb
     */
    async getConfig(cb = Function.prototype) {
        logger_1.default.system.debug("LauncherStartup: getConfig");
        //todo, investigate -- see if this is used anymore.
        const onCSSOverridePathChanged = function (err, cssConfig) {
            this.finsembleConfig.cssOverridePath = cssConfig.value;
        };
        configClient_1.default.addListener({ field: "finsemble.components" }, this.onComponentListChanged.bind(this));
        configClient_1.default.addListener({ field: "finsemble.cssOverridePath" }, onCSSOverridePathChanged);
        let { data: config } = await configClient_1.default.getValues(null);
        this.appConfig = config;
        this.finsembleConfig = config.finsemble; // replace manifest version of finsemble with processed version
        this.persistURL = configUtil_1.ConfigUtilInstance.getDefault(config.finsemble, "finsemble.servicesConfig.workspace.persistURL", false);
        cb();
    }
    /**
     *
     * @param {*} params
     * @param {string} params.windowIdentifier
     *
     */
    getGroupsForWindow(params) {
        logger_1.default.system.debug("Get Groups Window is in", params.windowIdentifier);
        var groups = [];
        for (let g of Object.keys(self.windowGroups)) {
            if (self.windowGroups[g].getWindow(params.windowIdentifier)) {
                groups.push(g);
            }
        }
        return groups;
    }
    /**
     * Gets the proper monitor for a config.
     * @param {string|number} params.monitor Monitor description, eg, "0" or "primary" or "mine".
     * @param {*} cb
     */
    async getMonitorInfo(params, cb) {
        // Collect some asynchronous information we need to make our calculations. First all monitors.
        function addMonitors() {
            return new Promise(function (resolve) {
                util.getAllMonitors(function (monitors) {
                    params.monitors = monitors;
                    resolve();
                });
            });
        }
        // Next figure out which monitor is associated with the windowIdentifier that was passed in
        function addWIMonitorInfo() {
            return new Promise(function (resolve) {
                util.getMonitor(params.windowIdentifier, null).then(function (monitorInfo) {
                    logger_1.default.system.debug("add monitor info", params.windowIdentifier.windowName, monitorInfo);
                    params.wiMonitorInfo = monitorInfo;
                    resolve();
                });
            });
        }
        await addMonitors();
        await addWIMonitorInfo();
        // based on params.monitor and our wiMonitor, figure out which monitor we really want
        let getWhichMonitorParams = {
            commandMonitor: params.monitor,
            monitors: params.monitors,
            launchingMonitorPosition: params.wiMonitorInfo.position,
            windowIdentifier: params.windowIdentifier
        };
        util.getWhichMonitor(getWhichMonitorParams, function (myMonitor) {
            self.addUnclaimedRectToMonitor(myMonitor);
            cb(null, myMonitor);
        });
    }
    /**
     * Gets all monitors.
     * @param {*} cb
     */
    getMonitorInfoAll(cb = Function.prototype) {
        var self = this;
        routerClientInstance_1.default.query("DockingService.getMonitorsFromDocking", {}, function (err, message) {
            if (err)
                return cb(err);
            let { monitors } = message.data;
            self.monitors = monitors;
            cb(null, self.monitors);
        });
    }
    // get a unique random name
    getRandomName(name) {
        var newName = util.getUniqueName(name) + "-" + this.appConfig.startup_app.uuid;
        return newName;
    }
    /**
     * Gets the manifest that's stashed on the window's customData.
     * @param {*} cb
     */
    getRawManifest(cb = Function.prototype) {
        const getOptionsSuccess = (opts) => {
            if (opts.customData && opts.customData.manifest) {
                self.rawManifest = opts.customData.manifest;
            }
            else {
                logger_1.default.system.error("getRawManifest cannot find manifest in custom data");
            }
            cb(null);
        };
        const getOptionsError = function (err) {
            logger_1.default.system.error("getRawManifest getOptions Error", err);
            cb(err);
        };
        system_1.System.Window.getCurrent()
            .getOptions(getOptionsSuccess, getOptionsError);
    }
    // get a new name based on sequentail counter for base name (repeatable on restart)
    getSequentialName(name) {
        var keyData = localStorage.getItem(NAME_STORAGE_KEY);
        var storageData = {};
        if (keyData) {
            storageData = JSON.parse(keyData);
        }
        if (storageData[name] !== undefined) {
            storageData[name]++;
        }
        else {
            storageData[name] = 1;
        }
        localStorage.setItem(NAME_STORAGE_KEY, JSON.stringify(storageData));
        var newName = name + "-" + storageData[name] + "-" + this.appConfig.startup_app.uuid;
        ;
        logger_1.default.system.debug("getSequentialName", name, newName);
        return newName;
    }
    /**
     * convert a list of window names or identifiers to a list of window objects
     */
    getWindowsFromNamesOrIdentifiers(windowList, outputAsObject = false) {
        if (!Array.isArray(windowList))
            windowList = [windowList];
        let actualWindowList;
        if (outputAsObject) {
            actualWindowList = {};
        }
        else {
            actualWindowList = [];
        }
        for (let i = 0; i < windowList.length; i++) {
            let w = activeWindows.getWindow(windowList[i]);
            if (w) {
                if (outputAsObject) {
                    actualWindowList[w.name] = w;
                }
                else {
                    actualWindowList.push(w);
                }
            }
        }
        return actualWindowList;
    }
    /**
     * When each component finishes shutting down, it reports back to the Launcher via this channel.
     */
    handleShutdownCompleted(err, response) {
        if (this.shutdownList.waitFor.includes(response.data.name)) {
            this.shutdownList.waitFor.splice(this.shutdownList.waitFor.indexOf(response.data.name), 1);
        }
        let STATUS_MESSAGE = "Component shutdownList completed, waiting on the following components to respond to the launcher:" +
            lodash_difference_1.default(this.shutdownList.componentsOpenAtShutdown, this.shutdownList.componentsResponded).join(",") +
            ". Waiting for the following components to complete shutdownActions" + this.shutdownList.waitFor;
        logger_1.default.system.debug(STATUS_MESSAGE);
        console.debug(STATUS_MESSAGE);
    }
    /**
     * After being notified that it needs to shutdown, the component will respond to the launcher. This message will tell the Launcher whether it should wait for the component to do some cleanup methods.
     */
    handleShutdownResponse(err, response) {
        logger_1.default.system.debug("handleShutdownResponse", response.data.name);
        this.shutdownList.componentsResponded.push(response.data.name);
        if (response.data.waitForMe) {
            logger_1.default.system.debug("handleShutdownResponse push to wait", response.data.name);
            this.shutdownList.waitFor.push(response.data.name);
            return;
        }
    }
    /**
     * Sends a heartbeat to all open windows to see if anything died.
     */
    heartbeat() {
        routerClientInstance_1.default.addListener("Finsemble.heartbeat", self.heartbeatListener);
        setInterval(function () {
            var date = Date.now();
            for (let name of activeWindows.getWindowNames()) {
                var activeWindow = activeWindows.getWindow(name);
                if (activeWindow) {
                    if (!activeWindow.lastHeartbeat) {
                        activeWindow.lastHeartbeat = Date.now();
                        continue;
                    }
                    if ((date - activeWindow.lastHeartbeat) > 60000 && !activeWindow.errorSent) {
                        activeWindow.errorSent = true;
                        console.error("Crashed Window", name);
                    }
                    else if ((date - activeWindow.lastHeartbeat) > 10000 && !activeWindow.warningSent) {
                        activeWindow.warningSent = true;
                        console.warn("Likely Crashed Window", name);
                    }
                    else if (date - activeWindow.lastHeartbeat > 5000 && !activeWindow.warningSent) {
                        console.warn("Possible Crashed Window", name);
                    }
                }
            }
            // if (self.agents) {
            // 	for (let name in self.agents) {
            // 		var agent = self.agents[name];
            // 		if ((date - agent.lastHeartbeat) > 60000 && !agent.errorSent) {
            // 			agent.errorSent = true;
            // 			console.error("Crashed Agent", name);
            // 		} else if ((date - agent.lastHeartbeat) > 10000 && !agent.warningSent) {
            // 			agent.warningSent = true;
            // 			console.warn("Likely Crashed Agent", name);
            // 		} else if ((date - agent.lastHeartbeat) > 5000 && !agent.warningSent) {
            // 			console.warn("Possible Crashed Agent", name);
            // 		}
            // 	}
            // }
        }, 1000);
    }
    heartbeatListener(err, response) {
        if (response.data.type == "component") {
            var activeWindow = activeWindows.getWindow(response.data.windowName);
            if (activeWindow) {
                activeWindow.lastHeartbeat = Date.now();
                activeWindow.warningSent = false;
                activeWindow.errorSent = false;
            }
        }
    }
    /**
     * Hyperfocuses a list, group, componentType or all windows
     * @param {*} response.data.windowList list of window names or window identifiers
     * @param {*} response.data.groupName group name
     * @param {*} response.data.componentType component type
     */
    hyperFocus(err, response) {
        let windowGroup;
        if (response.data && response.data.groupName) {
            windowGroup = self.windowGroups[response.data.groupName];
            delete response.data.groupName;
        }
        else {
            windowGroup = activeWindows;
        }
        if (response.data && response.data.componentType) {
            response.data.windowList = windowGroup.findAllByComponentType(response.data.componentType);
            delete response.data.componentType;
        }
        else if (!response.data.windowList) {
            response.data.windowList = windowGroup.getWindowNames();
        }
        response.functionName = "hyperFocus";
        this.executeWindowGroupFunctionByListGroupOrType(response);
    }
    // returns turn if window name is already in use by either active or pending-active window
    isWindowNameAlreadyUsed(windowName) {
        var result1 = activeWindows.getWindow(windowName) ? true : false;
        var result2 = this.pendingWindows.hasOwnProperty(windowName);
        logger_1.default.system.debug("isWindowNameAlreadyUsed", windowName, "Result1", result1, "Result2", result2, "Pending", this.pendingWindows);
        return result1 || result2; // if active window or pending window
    }
    /**
     * Retrieves a list of components from the configService.
     * @param {function} cb callback.
     * @private
     */
    loadComponents(cb = Function.prototype) {
        logger_1.default.system.log("LauncherStartup: loadComponents finsemble config", self.finsembleConfig);
        Components = {};
        // Mode allows us to optionally include a set of components. Normally, any component with component.mode set
        // in its config will be skipped. If the generalConfig.mode matches however then we allow it through.
        var mode = self.finsembleConfig.mode;
        if (!Array.isArray(mode)) {
            mode = [mode];
        }
        Object.keys(self.finsembleConfig.components).forEach((componentType) => {
            var config = self.finsembleConfig.components[componentType];
            //var componentMode = config.component ? config.component.mode : "";
            // If the component doesn't have a mode then it's safe, always allow in our list
            /*if (componentMode && componentMode !== "") {
                // component.mode can either be a string or an array of strings. So rationalize it to an array.
                if (componentMode.constructor !== Array) {
                    componentMode = [componentMode];
                }

                commonModes = componentMode.filter(function (n) {
                    return mode.indexOf(n) !== -1;
                });


                // If the current mode isn't in the list of modes for the component then don't include it in our list
                if (!commonModes.length) {
                    return;
                }
            }*/
            var validUrl;
            logger_1.default.system.debug("config.window.url", config);
            try {
                validUrl = new URL(config.window.url);
                config.window.url = validUrl.href;
            }
            catch (e) {
                if (config.window.url) {
                    try {
                        validUrl = new URL(self.finsembleConfig.moduleRoot + "/" + config.window.url);
                        config.window.url = validUrl.href;
                    }
                    catch (e) {
                        logger_1.default.system.error("Invalid URL", config.window.url);
                    }
                }
            }
            if (!config.foreign) {
                config.foreign = {};
            }
            if (!config.component) {
                config.component = {};
            }
            config.component.type = componentType;
            componentArray.push(config);
            Components[componentType] = config;
        });
        cb(null, Components);
        return Components;
    }
    /**
     *
     * @private
     */
    async finishSpawn(defaultComponentConfig, windowDescriptor, params, objectReceivedOnSpawn) {
        let component = defaultComponentConfig.component.type;
        if (params.slave) {
            util.getFinWindow(windowDescriptor, (finWindow) => {
                self.makeSlave(finWindow, {
                    windowName: params.previousWindow.name,
                    uuid: params.previousWindow.uuid
                });
            });
        }
        windowDescriptor.uuid = windowDescriptor.uuid || util.guuid(); // Temp fix for stackedWindow (whole section needs rework)
        let result = {
            windowIdentifier: {
                windowName: windowDescriptor.name,
                uuid: windowDescriptor.uuid,
                componentType: component,
                monitor: windowDescriptor.monitorInfo,
                windowType: windowDescriptor.windowType
            },
            windowDescriptor: windowDescriptor
        };
        // Add to the workspace *if* the caller wants it added (for instance from the app launcher)
        // but *also* if the defaultComponentConfig for the component allows it to be added to workspaces (defaults to true)
        if (params.addToWorkspace && defaultComponentConfig.window.addToWorkspace !== false) {
            workspaceClient_1.default.addWindow({ name: result.windowIdentifier.windowName });
        }
        // Store references to the actual window we've created. Clients can use LauncherClient.getRawWindow()
        // to get direct references for (god forbid) direct DOM manipulation
        var activeWindowParams = {
            name: windowDescriptor.name,
            uuid: windowDescriptor.uuid,
            canMinimize: windowDescriptor.customData.component.canMinimize,
            windowIdentifier: result.windowIdentifier,
            windowDescriptor: windowDescriptor,
            params: params,
            windowType: windowDescriptor.windowType
        };
        if (windowDescriptor.windowType == "FinsembleNativeWindow" || windowDescriptor.windowType == "StackedWindow") { // Since objectReceivedOnSpawn is the only thing that dospawn gets to send to finishSpawn, this is where everything that the wrap needs resides
            //@note objectReceivedOnSpawn used to be 'finWindow
            //@todo figure out why the hell we need this information to wrap the thing...should just need the name??
            activeWindowParams = merge(objectReceivedOnSpawn, activeWindowParams);
        }
        logger_1.default.system.debug(":wrap: finishSpawn", activeWindowParams);
        let { wrap: activeWindow } = await FinsembleWindowInternal_1.FinsembleWindowInternal.getInstance(activeWindowParams);
        activeWindow.wrapReady();
        activeWindow.addEventListener("closed", self.remove);
        activeWindow.windowDescriptor = windowDescriptor; // background note: the windowDescriptor was on the public instance, but not the private, so adding it here.  Required elsewhere (e.g. getActiveDescritors)
        activeWindows.addWindow(activeWindow);
        delete this.pendingWindows[windowDescriptor.name]; // active now so no long pending...can remove
        // Add window to a group if needed
        if (params.groupName) {
            if (!this.windowGroups[params.groupName]) {
                this.createWindowGroup(null, {
                    data: {
                        groupName: params.groupName,
                        windowList: [result.windowIdentifier]
                    }
                });
            }
            else {
                let actualWindow = this.getWindowsFromNamesOrIdentifiers([result.windowIdentifier]);
                this.windowGroups[params.groupName].addWindows(actualWindow);
                this.sendUpdatesToWindows(actualWindow);
            }
        }
        logger_1.default.perf.debug("Spawn", "stop", component, "from finishSpawn");
        return Promise.resolve({ err: null, data: result });
    }
    /**
     * Makes a slave window which will automatically close when the master closes.
     * @param  {finwindow} slave  An OpenFin window
     * @param  {LauncherClient~windowIdentifier} master The window identifier of the master
     */
    makeSlave(slave, master) {
        util.getFinWindow(master, function (masterWindow) {
            if (masterWindow) {
                masterWindow.addEventListener("closed", function () {
                    logger_1.default.system.debug("makeSlave close", slave.name);
                    slave.close();
                });
                //@TODO, add more. Linker blurs when you do anything
                //but other windows might want to reposition themselves
                //on move, maximize, minimize, etc
            }
        });
    }
    /**
     * Minimizes a list, group or all windows
     * @param {*} response.data.windowList list of window names or window identifiers
     * @param {*} response.data.groupName group name
     * @param {*} response.data.componentType component type
     */
    minimizeWindows(err, response) {
        if (!response)
            response = {};
        response.functionName = "minimize";
        this.executeWindowGroupFunctionByListGroupOrType(response);
    }
    /**
     * See doMonitorAdjustments()
     * Adds any motherless components. These would be any spawnOnAllMonitor components that are missing from a
     * particular monitor, presumably because the monitor just got added.
     */
    monitorAddMotherless(monitors, components, done) {
        let howMany = 0;
        for (let i = 0; i < monitors.length; i++) {
            for (let c in components) {
                let component = components[c];
                howMany++;
                if (!component[i]) {
                    self.spawn({ component: c, monitor: i }, function (err, result) {
                        result.windowDescriptor.spawnOnAllMonitors = true; // WHY WHY WHY DO WE NOT DO THIS BEFORE HAND
                        howMany--;
                        if (!howMany) {
                            done();
                        }
                    });
                }
                else {
                    setTimeout(function () {
                        howMany--;
                        if (!howMany) {
                            done();
                        }
                    }, 50);
                }
            }
        }
        if (!howMany) {
            done();
        }
    }
    /**
     * See doMonitorAdjustments()
     * Adjust component dimensions. Since the monitor size may have changed we need to adjust any components
     * that had previously made assumptions about monitor size (such as a toolbar that is supposed to stretch across
     * the top of the screen). We cycle through any components that have made a "claim" on monitor space and then
     * simply call showWindow() with their original params in order to give them a chance to resettle.
     */
    monitorAdjustDimensions(done) {
        logger_1.default.system.debug("monitorAdjustDimensions");
        var claims = {};
        var allActiveWindows = activeWindows.getWindows();
        for (let windowName in allActiveWindows) {
            let entry = allActiveWindows[windowName];
            var w = entry.windowDescriptor;
            if (!w)
                continue;
            // Create a stash of all claims, and then unclaim them to set our
            // algorithm back to square
            if (w.claimMonitorSpace) {
                claims[windowName] = entry;
                delete w.claimMonitorSpace;
            }
        }
        // Now we simply call showWindow for each item in our stash with the original
        // params. This will reset it back, and should cause it to adjust accordingly
        // to the monitor it is now sitting on.
        for (let claimedName in claims) {
            let entry = claims[claimedName];
            self.showWindow(entry.windowIdentifier, entry.params, function () {
                entry.windowDescriptor.claimMonitorSpace = true;
            });
        }
        done();
    }
    /**
     * see doMonitorAdjustments()
     * Removes any orphaned components. These would be any spawnOnAllMonitor components that are now located
     * on a different monitor than they started. We simply compare their existing monitor with the one they were
     * spawned upon, and remove them if they aren't where they belong.
     */
    monitorRemoveOrphans(monitors, components, done) {
        let allActiveWindows = activeWindows.getWindows();
        let howMany = 0;
        for (let w in allActiveWindows) {
            let win = allActiveWindows[w];
            let windowDescriptor = win.windowDescriptor;
            if (windowDescriptor.customData.component.spawnOnAllMonitors) {
                let componentType = windowDescriptor.customData.component.type;
                if (!components[componentType]) {
                    components[componentType] = [];
                }
                let componentMonitor = windowDescriptor.monitorInfo;
                if (!monitors[componentMonitor]) { // remove window if no monitor - do we want to remove the window? might be better for performance if we let it stick around.
                    howMany++;
                    win.close(null, function () {
                        howMany--;
                        if (!howMany) {
                            done();
                        }
                    });
                }
                else
                    components[componentType][windowDescriptor.monitorInfo] = win;
            }
        }
        if (!howMany) {
            done();
        }
    }
    /**
     * Removes a component. This is called when a window receives a closed event.
     * If the window is still open then it is closed.
     *
     * @param  {string}   windowName Name of window that was closed
     */
    remove(event) {
        let windowName;
        if (event.data) { // The stack close triggers a wrapper event. However, Openfin Close does not. Need to investigate.
            windowName = event.data.name;
        }
        else {
            windowName = event;
        }
        if (!windowName)
            return;
        logger_1.default.system.info("remove windowName", windowName);
        //this block is for legacy support. all calls to remove in the Launcher pass in the windowDescriptor. The old functionality was to pass in a window name.
        if (typeof windowName !== "string") {
            let descriptor = JSON.parse(JSON.stringify(windowName));
            windowName = descriptor.name;
        }
        var activeWindow = activeWindows.getWindow(windowName);
        if (!activeWindow) {
            logger_1.default.system.warn("Active Window not found", windowName);
            return;
        }
        //This is the only place in the application where we remove close listeners. In versions of 8.X, Openfin had a bug where if you remove one closed listener, all closed listeners would be removed.
        activeWindow.removeEventListener("closed", self.remove);
        logger_1.default.system.debug("this.remove", activeWindow);
        if (activeWindow.windowDescriptor && activeWindow.windowDescriptor.claimMonitorSpace) { // stacked windows will have these properties
            self.getMonitorInfoAll(function (monitors) {
                routerClientInstance_1.default.publish("monitorInfo", monitors);
            });
        }
        //remove the window from all groups
        if (self.windowGroups) {
            for (let g of Object.keys(self.windowGroups)) {
                let group = self.windowGroups[g];
                group.removeWindows([windowName]);
                //if group is empty delete it
                if (!Object.keys(group.getWindows()).length) {
                    group.destroy();
                    delete self.windowGroups[g];
                }
            }
        }
        activeWindows.removeWindows([windowName], () => {
            logger_1.default.system.debug("launcher.remove wrappers for window", windowName);
            //MyWrapManager.remove({ identifier: { windowName: windowName } }, () => {
            //This is to prevent workspaces/stackmanager from catching this event and removing the window. Might be better for the launcher to send out a note to everyone who cares "Hey guys, I'm shutting down, go ahead and remove any listeners that you don't want to accidentally fire when these windows start closing". This is the expedient fix. That would probably be better, but require more architectural changes and testing.
            if (self.shuttingDown) {
                logger_1.default.system.log("Component removed.", windowName, "Not transmitting the windowClosed event because the application is shutting down");
                return;
            }
            //Given the context above, we use the router to transmit out an event instead of relying on openfin window events. The WorkspaceService is currently the only thing listening for this message, so it can know when to load the next workspace.
            routerClientInstance_1.default.transmit("LauncherService.WindowClosed", { uuid: activeWindow.uuid, name: windowName });
            //});
        });
    }
    removeUserDefinedComponent(message, cb) {
        var err = null;
        if (Components[message.data.name]) {
            delete Components[message.data.name];
        }
        else {
            err = "Could not find component of type " + message.data.name;
        }
        this.update();
        cb(err, null);
    }
    /**
     * Will reset the spawn stagger.
     * @param {object} [params]
     * @param {number} [params.monitorPosition] position of monitor to reset the stagger for
     * @callback {function} [cb] optional callback.
     */
    resetSpawnStagger(params, cb = Function.prototype) {
        const EMPTY_STAGGER = { x: null, y: null };
        if (typeof params === "function") {
            cb = merge({}, params);
            params = null;
        }
        if (params && typeof params.monitorPosition !== "undefined") {
            this.lastOpenedMap[params.monitorPosition] = EMPTY_STAGGER;
            this.lastAdjustedMap[params.monitorPosition] = EMPTY_STAGGER;
        }
        else {
            for (var monitorPosition in this.lastOpenedMap) {
                this.lastOpenedMap[monitorPosition] = EMPTY_STAGGER;
                this.lastAdjustedMap[monitorPosition] = EMPTY_STAGGER;
            }
        }
        cb();
    }
    /**
     * Whenver windows are added/removed from groups, send updates to existing windows with their group memberships.
     * @param {} windowList
     */
    sendUpdatesToWindows(windowList) {
        logger_1.default.system.debug("List of Updated Windows", windowList);
        if (!windowList)
            return;
        if (!Array.isArray(windowList)) {
            windowList = [windowList];
        }
        for (let w in windowList) {
            let win = windowList[w];
            let groups = self.getGroupsForWindow({ windowIdentifier: win.windowIdentifier });
            if (!Array.isArray(groups))
                groups = [];
            if (win)
                routerClientInstance_1.default.publish("Finsemble.LauncherService.updateGroups." + win.name, groups);
        }
    }
    /**
     * Given some bounds, returns the monitor that the window is on.
     * @param {} bounds
     */
    getMonitorByBounds(bounds) {
        return util.Monitors.getMonitorFromScaledXY(bounds.left, bounds.top);
    }
    /**
     * Shows and/or relocates a native window. Not implemented yet!
     * @param  {LauncherClient~windowIdentifier} windowIdentifier The window to show/move
     * @param	object params	Parameters, see spawn()
     * @param function cb Callback
     */
    showNativeWindow(windowIdentifier, params, cb) {
        self.deriveBounds(params).then(function (newWindowDescriptor) {
            // send newWindowDescriptor to assimilation service
            let result = {
                windowIdentifier: {
                    windowName: newWindowDescriptor.name,
                    uuid: newWindowDescriptor.uuid,
                    componentType: windowIdentifier.componentType,
                    monitor: newWindowDescriptor.monitorInfo
                },
                windowDescriptor: newWindowDescriptor
            };
            cb(null, result);
        });
    }
    /**
     * Shows and/or relocates a component window
     * @param  {LauncherClient~windowIdentifier} windowIdentifier The window to show/move
     * @param	object params	Parameters, see spawn()
     * @param function cb Callback
     */
    async showWindow(windowIdentifier, params, cb) {
        logger_1.default.system.info("Launcher.ShowWindow.showAt Start", windowIdentifier, params);
        // do we have a windowname?
        let activeWindow;
        if (windowIdentifier.windowName) {
            activeWindow = activeWindows.getWindow(windowIdentifier.windowName);
        }
        else if (windowIdentifier.componentType) {
            activeWindow = self.componentFinder(windowIdentifier);
        }
        if (activeWindow) { //window was found
            let { data: bounds } = await activeWindow._getBounds();
            windowIdentifier = activeWindow.windowIdentifier;
            //By default, return the first monitor. This method will be overwritten if the call requires a specific monitor.
            let monitorFinder = () => {
                const promiseResolver = (resolve) => {
                    util.getAllMonitors(function (monitors) {
                        return resolve(monitors[0]);
                    });
                };
                return new Promise(promiseResolver);
            };
            var specificMonitorFinder = function () {
                const promiseResolver = (resolve) => {
                    util.getAllMonitors(function (monitors) {
                        for (var i = 0; i < monitors.length; i++) {
                            if (monitors[i].position == params.monitor) {
                                return resolve(monitors[i]);
                            }
                        }
                        resolve(null);
                    });
                };
                return new Promise(promiseResolver);
            };
            var relativeMonitorFinder = function () {
                let relativeWindow = activeWindows.getWindow(params.relativeWindow.windowName);
                const promiseResolver = (resolve) => {
                    relativeWindow._getBounds({}, async (err, relativeBounds) => {
                        if (!err) {
                            util.Monitors.getMonitorFromScaledXY(relativeBounds.left, relativeBounds.top, (monitor) => {
                                //let monitor = window.DockingMain.getMonitorForWindow(window.DockingMain.getWindow(relativeWindow.name));
                                // Once we get the monitor, overwrite 'mine' with its position to avoid further calls
                                util.getAllMonitors(function (monitors) {
                                    for (var i = 0; i < monitors.length; i++) {
                                        if (monitors[i].name == monitor.name) {
                                            params.monitor = monitors[i].position;
                                            break;
                                        }
                                    }
                                    resolve(monitor);
                                });
                            });
                        }
                        else {
                            util.getAllMonitors(function (monitors) {
                                return resolve(monitors[0]);
                            });
                        }
                    });
                };
                return new Promise(promiseResolver);
            };
            // When asking for relative positioning, we're implicitly wanting to use the same monitor as the relativeWindow
            if (!params.monitor && params.position === "relative") {
                monitorFinder = relativeMonitorFinder;
            }
            // If params.monitor is specified, try to get and use that monitor.
            if (typeof params.monitor !== "undefined") {
                if (params.monitor.unclaimedRect) { //have whichMonitor and not a monitor object
                    monitorFinder = function () {
                        return Promise.resolve(params.monitor);
                    };
                }
                else if (params.monitor == "primary" || Number.isInteger(params.monitor)) { // asked to spawn on specific monitor
                    monitorFinder = specificMonitorFinder;
                }
                else if (params.monitor == "mine") { // asked to spawn on same monitor as parent
                    monitorFinder = relativeMonitorFinder;
                }
            }
            let monitor = await monitorFinder();
            // Adjust parameters to what deriveBounds expects
            // default to the monitor that the window already lives on
            var viewport = monitor ? monitor.unclaimedRect : null;
            self.addUnclaimedRectToMonitor(monitor);
            if (!params.monitor && params.monitor !== 0) {
                params.monitor = monitor.position;
            }
            else {
                if (params.monitor.unclaimedRect) {
                    viewport = params.monitor.unclaimedRect;
                }
            }
            if (params.position === "monitor") {
                viewport = monitor ? monitor.monitorRect : null;
            }
            else if (params.position === "available") {
                viewport = monitor ? monitor.availableRect : null;
            }
            // A developer can call showWindow with a combination of left, right or width (top, bottom or height).
            // This essentially means that a developer can be setting both position and dimension, just position, or just dimension.
            // Furthermore, they might set one or other position (left or right, top or bottom). The following logic is meant
            // to maintain the dimension or position where not overridden by the developer. This is done by rationalizing
            // the window location to just top,left,width,height.
            var leftAndRight = (params.left || params.left === 0) && (params.right || params.right === 0);
            var calculateWidth = params.width || params.width === 0;
            calculateWidth = calculateWidth || leftAndRight;
            if (!calculateWidth) {
                params.width = bounds.width;
            }
            else if (calculateWidth === true) {
                if (viewport)
                    params.width = (viewport.right - params.right) - (params.left - viewport.left);
            }
            var topAndBottom = (params.top || params.top === 0) && (params.bottom || params.bottom === 0);
            var calculateHeight = params.height || params.height === 0;
            calculateHeight = calculateHeight || topAndBottom;
            if (!calculateHeight) {
                params.height = bounds.height;
            }
            else if (calculateHeight === true) {
                // TODO fix this in case people have a vertical toolbar or something. this has issues as is.
                if (viewport)
                    params.height = (viewport.bottom - params.bottom) - (params.top - viewport.top);
            }
            // If right but no left, calculate the left position of the window relative to the viewport.
            if (params.position !== "relative" && (params.right || params.right === 0) && !params.left && params.left !== 0 && viewport) {
                params.left = (viewport.right - params.right) - params.width - viewport.left;
            }
            // If bottom but no top
            if (params.position !== "relative" && (params.bottom || params.bottom === 0) && !params.top && params.top !== 0 && viewport) {
                params.top = (viewport.bottom - params.bottom) - params.height - viewport.top;
            }
            // If neither left nor right are set then maintain it's left position
            if (!params.left && params.left !== 0 && !params.right && params.right !== 0 && params.top !== "adjacent" && params.bottom !== "adjacent") {
                params.left = bounds.left - (viewport ? viewport.left : 0);
            }
            // If neither top nor right are set then maintain it's top position
            if (!params.top && params.top !== 0 && !params.bottom && params.bottom !== 0 && params.left !== "adjacent" && params.right !== "adjacent") {
                params.top = bounds.top - (viewport ? viewport.top : 0) - viewport.top;
            }
            // Since we've already calculated the absolute position, we need to make sure deriveBounds respects those coordinates
            if (!["relative", "unclaimed"].includes(params.position))
                params.position = "monitor";
            //params.bottom = null;
            //params.right = null;
            function showIt() {
                let result = {
                    windowIdentifier: {
                        windowName: activeWindow.name,
                        uuid: activeWindow.uuid,
                        componentType: windowIdentifier.componentType,
                        monitor: newWindowDescriptor.monitorInfo
                    },
                    windowDescriptor: newWindowDescriptor
                };
                activeWindow._show({}, function () {
                    logger_1.default.system.info("Launcher.ShowWindow.showAt finished", activeWindow.name);
                    let dockingDescriptor = {
                        left: newWindowDescriptor.defaultLeft,
                        top: newWindowDescriptor.defaultTop,
                        right: newWindowDescriptor.defaultLeft + newWindowDescriptor.defaultWidth,
                        bottom: newWindowDescriptor.defaultTop + newWindowDescriptor.defaultHeight,
                        width: newWindowDescriptor.defaultWidth,
                        height: newWindowDescriptor.defaultHeight,
                        name: activeWindow.name,
                        changeType: 1
                    };
                    //If the show call doesn't prohibit autofocus, focus it. Search does this when showing search results.
                    if (params.autoFocus !== false) {
                        //This is so that any click elsewhere will hide the window.
                        activeWindow.focus();
                    }
                    //@todo, when docking is rewritten and the window wraps get more love, put this functionality into a the wrappers. Right now they don't have the router and I'm unsure how things are working with multiple routers in the same window.
                    routerClientInstance_1.default.transmit("DockingService.updateWindowLocation", { windowName: windowIdentifier.windowName, location: dockingDescriptor });
                    if (cb) {
                        cb(null, result);
                    }
                });
            }
            let newWindowDescriptor = await self.deriveBounds(params);
            let newBounds = {
                left: newWindowDescriptor.defaultLeft,
                right: newWindowDescriptor.defaultLeft + newWindowDescriptor.defaultWidth,
                bottom: newWindowDescriptor.defaultTop + newWindowDescriptor.defaultHeight,
                top: newWindowDescriptor.defaultTop,
                width: newWindowDescriptor.defaultWidth,
                height: newWindowDescriptor.defaultHeight
            };
            activeWindow._setBounds({ bounds: newBounds }, showIt);
        }
        else { //window not found
            if (params.spawnIfNotFound && windowIdentifier.componentType) {
                if (windowIdentifier.windowName) {
                    params.name = windowIdentifier.windowName;
                }
                params.component = windowIdentifier.componentType;
                logger_1.default.system.debug("Launcher.ShowWindow.show spawn", windowIdentifier);
                self.spawn(params, (err, data) => {
                    logger_1.default.system.debug("Launcher.ShowWindow.show spawn complete", windowIdentifier);
                    cb(err, data);
                });
            }
            else {
                cb("RouterService:showWindow. Requested window not found.");
            }
        }
    }
    /**
     * Rewrite of shutdownComponents to call close on components.
     * @param {function} done
     */
    shutdownComponents(done) {
        // assume done if everybody doesn't close within alloted time so dependencies can close and shutdownList can continue.
        var myTimeout = setTimeout(() => {
            done();
        }, (this.finsembleConfig.shutdownTimeout || 10000) - 2000);
        async_1.forEach(activeWindows.windows, (win, callback) => {
            win._close({ removeFromWorkspace: false, ignoreParent: true }, callback);
        }, () => {
            // make sure done doesn't get called back twice
            clearTimeout(myTimeout);
            done();
        });
    }
    /**
    * Launches a component.
    * @param {object} params See LauncherClient
    * @param {function} cb Callback
    */
    async spawn(params, cb) {
        let errorString = null;
        let descriptor = null;
        let component = params.component;
        // This fixes a bug in our workspace save. We save everything and preload scripts in here overwrites what we actually want to use.
        //Loop through any preload scripts and remove FSBL
        if (params.options && params.options.preloadScripts) {
            if (Array.isArray(params.options.preloadScripts)) {
                for (let i = 0; i < params.options.preloadScripts.length; i++) {
                    let preloadItem = params.options.preloadScripts[i];
                    if (preloadItem && preloadItem.url) {
                        if (preloadItem.url.indexOf(".FSBL.js")) {
                            delete params.options.preloadScripts[i];
                        }
                    }
                }
            }
        }
        logger_1.default.system.debug("Launcher.spawn", component, params);
        //If the Launcher is shutting down, don't allow new components to come online. If the dev wants components to come up, they should spawn them prior to transmitting the shutdownList request.
        if (this.shuttingDown) {
            logger_1.default.system.log("Dropping spawn request. Application is shutting down", component, params);
            return;
        }
        logger_1.default.perf.debug("Spawn", "start", component, params);
        // if component is not a string then we are trying to spawn multiple components (this is still experimental and not yet used - it is planned so that group launches get easier via pins etc.)
        if (component && !(typeof component == "string" || component instanceof String)) {
            this.spawnGroup(component, params, cb);
            return;
        }
        // @todo Terry, cleanup, the following code is not robust. It should be rewritten to ensure that config is set by
        // default, and then overridden by params.options.customData. I think that when this is restructured
        // to the point that we no longer need the isAdhoc flag then we'll know it's robust.
        let isAdhoc = false;
        var config = this.getDefaultConfig(component);
        //@todo adhoc components should use preferences to save themselves, and then this block of code would be unnecessary.
        logger_1.default.system.debug("Launcher.spawn 2", component, params);
        if (!config) {
            if (params.options && params.options.customData &&
                params.options.customData.component && params.options.customData.component.isUserDefined) { // If our component is an adhoc component set the flag.
                isAdhoc = true;
                config = params.options.customData;
            }
            else if (params.url) {
                // No config, but has as URL. Treat as an adhoc component. This path is hit when using using window.open
                // from nativeOverrides.js
                isAdhoc = true;
                // If a name is passed in, use that, otherwise use the URL.
                component = params.name ? params.name : params.url;
                config = {
                    window: {},
                    component: {}
                };
            }
            if (!isAdhoc) {
                // Use a config to drive what component is shown if we can't find one in our list
                let unknownComponent = this.appConfig.finsemble.servicesConfig && this.appConfig.finsemble.servicesConfig.launcher &&
                    this.appConfig.finsemble.servicesConfig.launcher.hasOwnProperty("unknownComponent") ?
                    this.appConfig.finsemble.servicesConfig.launcher.unknownComponent :
                    null;
                if (unknownComponent) {
                    config = this.getDefaultConfig(unknownComponent);
                }
                if (!config) { // If we still don't have a config, use our default. This will at least keep the system running.
                    unknownComponent = "404";
                    config = new LauncherDefaults_1.default().componentDescriptor;
                    config.window.url = "about:blank"; // We should change this to something else. Our biggest issue is that we can't guarantee a component will exist.
                }
                if (!params.options)
                    params.options = { customData: {} }; // Make sure we have this in there so we can pass info on to our component
                if (!params.options.customData)
                    config.customData = {}; // If our object doesn't have custom data, add it
                params.options.customData.previousURL = params.options && params.options.url ? params.options.url : ""; // Make sure we have a url to pass in
                // Create errorString before replacing with the unknownComponent.
                errorString = `LauncherService:spawn(): Can't find component ${component}`;
                //Just update the options to be safe.
                component = unknownComponent;
                params.options ? params.options.url = config.window.url : null; // we need to change what component is being hit and keep the options passed in.
                params.component = component;
                logger_1.default.error(errorString, "Component List", Components);
            }
        }
        // singleton windows - TODO - test this
        logger_1.default.system.debug("Launcher.spawn 3", component, params);
        if (component && config.component.singleton) {
            var existingWindows = activeWindows.findAllByComponentType(component);
            if (existingWindows.length) {
                // Bring existing window(s) to front
                existingWindows.forEach(window => window.bringToFront());
                return cb(`A window for this singleton component already exists: ${existingWindows[0].name}`);
            }
            for (let p in this.pendingWindows) {
                let pendingWindow = this.pendingWindows[p];
                if (pendingWindow.componentType == component) {
                    return cb("A window for this singleton component is in the process of being spawned: " + p);
                }
            }
        }
        var requestedPositioning = {
            left: params.left,
            right: params.right,
            top: params.top,
            bottom: params.bottom
        };
        // window config from json is the default. params argument overrides.
        params = merge(config.window, params);
        if (requestedPositioning.left || requestedPositioning.right || requestedPositioning.top || requestedPositioning.bottom) {
            params.left = requestedPositioning.left;
            params.right = requestedPositioning.right;
            params.top = requestedPositioning.top;
            params.bottom = requestedPositioning.bottom;
        }
        // If we're set to spawnOnAllMonitors then we're going to call spawn() recursively, but
        // setting the monitor for each one. Note that since this is re-entrant, we need to make
        // sure we don't create an infinite loop! If params.monitor is set to anything other than "all"
        // then we bypass this.
        if (params.monitor === "all" || (config.component.spawnOnAllMonitors && (typeof (params.monitor) === "undefined"))) {
            this.spawnOnAllMonitors(component, params, cb);
            return;
        }
        //get default OpenFin config.
        var baseDescriptor = new LauncherDefaults_1.default().windowDescriptor;
        if (params.options) {
            baseDescriptor = merge(baseDescriptor, params.options);
        }
        if (params.options && params.options.name)
            params.name = params.options.name;
        let descriptorName;
        if (params.addToWorkspace) {
            descriptorName = params.name ? params.name : this.getRandomName(component);
        }
        else {
            descriptorName = params.name ? params.name : this.getSequentialName(component);
        }
        baseDescriptor.name = descriptorName;
        //Logger.system.debug("ComponentName", baseDescriptor.name);
        baseDescriptor.componentType = component; //@TODO, remove?
        baseDescriptor.customData.component.type = component;
        baseDescriptor.customData.cssOverride = self.cssOverride;
        let retryAttempt = 0;
        logger_1.default.system.debug("Launcher.spawn 4", component, params);
        let interval = setInterval(function () {
            retryAttempt++;
            //if not in pending and not in active then the window was closed.
            if (this.pendingWindows[baseDescriptor.name] && !activeWindows.getWindow(baseDescriptor.name)) {
                //console.warn("Failed To Launch " + baseDescriptor.name + " " + retryAttempt);
                if (retryAttempt > 2) {
                    // This is where failed windows used to be force closed and a respawn attempted but on some systems windows take a long time to load and force closing them or retyring spawning was causing problems. For now, just warn if things are taking too long.
                    // Attempting to wrap the window while loading here was also taking a really long time. Just letting things take their course seems to eventually work.
                    console.warn("Window Taking Really Long to Load:", baseDescriptor.name);
                    clearInterval(interval);
                }
            }
            else {
                clearInterval(interval);
            }
        }, 5000);
        if (this.finsembleConfig.system.finsembleLibraryPath) {
            baseDescriptor.preloadScripts = [{ url: this.finsembleConfig.system.finsembleLibraryPath }];
        }
        else {
            baseDescriptor.preloadScripts = [];
        }
        if (config.component.preload) {
            let inject = config.component.preload;
            if (!Array.isArray(inject)) {
                inject = [inject];
            }
            for (var i = 0; i < inject.length; i++) {
                try {
                    var injectURL = new URL(inject[i]);
                    inject[i] = injectURL.href;
                }
                catch (e) {
                    inject[i] = this.finsembleConfig.applicationRoot + "/components/mindcontrol/" + inject[i];
                }
                baseDescriptor.preloadScripts.push({ url: inject[i] });
            }
        }
        baseDescriptor.preload = baseDescriptor.preloadScripts; // For backwards  compatibility. prelod hasn't been used since OF 7
        // url overrides the default component url (and can also be used to simply spawn a url). Ignore if spawned by workspace otherwise it will overwrite the url from workspace. This is dealth with at a later point with a check for the persistURL config item.
        if (params.url && !params.spawnedByWorkspaceService) {
            baseDescriptor.url = params.url;
        }
        if (params.windowType == "openfin")
            params.windowType = "OpenFinWindow"; // Config friendly naming
        if (params.windowType == "assimilation")
            params.windowType = "NativeWindow"; // Config friendly naming
        if (params.windowType == "assimilated")
            params.windowType = "NativeWindow"; // Config friendly naming
        if (params.windowType == "native")
            params.windowType = "FinsembleNativeWindow"; // Config friendly naming
        if (params.windowType == "application")
            params.windowType = "OpenFinApplication"; // Config friendly naming
        if (params.native)
            params.windowType = "NativeWindow"; //Backward Compatibility
        if (baseDescriptor.type === "openfinApplication")
            params.windowType = "OpenFinApplication"; //Backward Compatibility
        if (!params.windowType)
            params.windowType = "OpenFinWindow";
        baseDescriptor.windowType = params.windowType;
        logger_1.default.system.debug("Launcher.spawn 5", component, params);
        if (["NativeWindow", "FinsembleNativeWindow"].includes(params.windowType)) {
            //baseDescriptor.native = params.native;
            baseDescriptor.alias = params.alias;
            baseDescriptor.path = params.path;
            baseDescriptor.env = params.env;
            baseDescriptor.arguments = params.arguments;
        }
        let newWindowDescriptor = await this.deriveBounds(params);
        let windowDescriptor = self.compileWindowDescriptor(config, params, baseDescriptor, newWindowDescriptor);
        windowDescriptor = this.adjustBoundsToBeOnMonitor(windowDescriptor);
        // TODO, [Terry] persistURL logic should be in the workspace-service, not in launcher service.
        //[Ryan] the logic should sit in the workspace client( although I think we actually do it in the window client right now)
        if (params.spawnedByWorkspaceService) {
            let persistURL = configUtil_1.ConfigUtilInstance.getDefault(config.foreign, "foreign.services.workspace.persistURL", this.persistURL);
            if (!persistURL && config.window) { //revert the url to what is passed in from components.
                windowDescriptor.url = config.window.url;
            }
        }
        if (self.isWindowNameAlreadyUsed(windowDescriptor.name)) {
            errorString = `Cannot spawn new window: windowDescriptor.name ${windowDescriptor.name} already used`;
        }
        else {
            // save window properties of pending windows that are used later (e.g. to check dupes or for singleton windows) (will be removed in finishSpawn)
            this.pendingWindows[windowDescriptor.name] = {
                uuid: windowDescriptor.uuid || system_1.System.Application.getCurrent().uuid,
                componentType: baseDescriptor.componentType
            };
            let spawnResult = await self.doSpawn(windowDescriptor);
            let { err, data: objectReceivedOnSpawn } = spawnResult;
            logger_1.default.system.info(windowDescriptor.name, "Inside LauncherService.spawn(), before ");
            if (err) {
                errorString = err;
            }
            else {
                let { err, data } = await self.finishSpawn(config, windowDescriptor, params, objectReceivedOnSpawn);
                if (err) {
                    errorString = err;
                }
                else {
                    descriptor = data;
                }
                logger_1.default.system.info(windowDescriptor.name, "Inside LauncherService.spawn(), after ");
            }
        }
        if (errorString) {
            logger_1.default.system.error(errorString);
        }
        cb(errorString, descriptor);
    }
    /**
    * Launches a copy of the requested component on each of a user's monitors.
    * @param {string} component The type of the component to launch
    * @param {object} params See spawn.
    * @param {function} cb Callback
    * @todo use asyncLib for spawning here. Get rid of the `remaining` var.
    */
    async spawnOnAllMonitors(component, params, cb) {
        //Gets all monitors and pushes a spawn call for each monitor to an array of async functions.
        this.getMonitorInfoAll((err, monitors) => {
            let tasks = [];
            monitors.forEach((monitor) => {
                tasks.push((done) => {
                    var paramCopy = JSON.parse(JSON.stringify(params));
                    paramCopy.monitor = monitor.position;
                    paramCopy.component = component;
                    self.spawn(paramCopy, function (err, result) {
                        if (!err) {
                            result.windowDescriptor.spawnOnAllMonitors = true;
                        }
                    });
                });
            });
            async_1.parallel(tasks, (err) => {
                cb(err);
            });
        });
    }
    /**
     * Spawns an OF window, or sends a request to the native service to spawn a native window.
     * Callback returns a handle to the new window
    * @param {LauncherClient~windowDescriptor} windowDescriptor The descriptor to launch
    * @param {function} cb Callback
    */
    doSpawn(windowDescriptor, cb = Function.prototype) {
        const promiseResolver = (resolve) => {
            this.createSplinterAndInject.createWindow({ windowDescriptor }, (err, windowIdentifier) => {
                logger_1.default.system.debug("doSpawn createWindow", err, windowIdentifier, windowDescriptor);
                cb({ err, data: windowIdentifier });
                resolve({ err, data: windowIdentifier });
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Given an object where the keys are component names and the values are component configs, it spawns the list of components.
     * @private */
    spawnGroup(components, params, cb) {
        let errors, responses = [];
        let componentList = Object.keys(components);
        const spawnComponent = (componentType, done) => {
            let cloneParams = Object.assign({}, params);
            if (components[componentType].params) {
                cloneParams = Object.assign(params, components[componentType].params);
            }
            cloneParams.component = componentType;
            self.spawn(cloneParams, function (err, response) {
                if (err) {
                    errors.push(err);
                }
                else {
                    responses.push(response);
                }
                done(err);
            });
        };
        async_1.forEach(componentList, spawnComponent, function () {
            cb(errors, responses);
        });
    }
    /**
     * Splintering.
     */
    update() {
        // @TODO, this should probably be pubsub (see startPubSubs below)
        routerClientInstance_1.default.transmit("Launcher.update", {
            componentList: Components
        });
    }
}
exports.Launcher = Launcher;
logger_1.default.start();


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
class LauncherEntry {
    constructor(manifest, launcher) {
        this.manifest = manifest;
        this.launcher = launcher;
        this.bindAllFunctions();
        this.definePubicInterface();
    }
    async initialize(done) {
        done();
    }
    windowServiceChannelName(channelTopic) { return `WindowService-Request-${channelTopic}`; }
    bindAllFunctions() {
        let self = this;
        for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {
            if (self[name] instanceof Function) {
                self[name] = self[name].bind(self); // only bind function properties
            }
        }
    }
    // invoked by serviceEntryPoint shutdown
    shutdown(done) {
        done();
    }
    definePubicInterface() {
        // Note: More Cleanup To Do: better to have all the router message handling done here, with pure calls into to the launcher (i.e. not passing in router message to launcher).
        // So for now using the laucher code close to as-is, although had to do some refactoring for this interface
        logger_1.default.system.debug(`LauncherEntry.definePubicInterface`);
        routerClientInstance_1.default.addPubSubResponder("Launcher.WindowList", []);
        routerClientInstance_1.default.addResponder("LauncherService.addWindowToGroups", (err, message) => {
            this.launcher.addWindowToGroups(message.data);
            message.sendQueryResponse(null, "success");
        });
        routerClientInstance_1.default.addResponder("LauncherService.deleteWindowGroup", this.launcher.deleteWindowGroup.bind(this));
        routerClientInstance_1.default.addResponder("Launcher.componentList", (err, message) => {
            let components = this.launcher.getComponents();
            message.sendQueryResponse(err, components);
        });
        routerClientInstance_1.default.addResponder("LauncherService.createWindowGroup", this.launcher.createWindowGroup.bind(this));
        routerClientInstance_1.default.addResponder("LauncherService.getGroupsForWindow", (err, message) => {
            message.sendQueryResponse(null, this.launcher.getGroupsForWindow(message.data));
        });
        routerClientInstance_1.default.addResponder("Launcher.getActiveDescriptors", (err, message) => {
            message.sendQueryResponse(null, this.launcher.getActiveDescriptors());
        });
        routerClientInstance_1.default.addResponder("LauncherService.getComponentsThatCanReceiveDataTypes", (err, message) => {
            message.sendQueryResponse(null, this.launcher.getComponentsThatCanReceiveDataTypes(message.data.dataTypes));
        });
        routerClientInstance_1.default.addResponder("Launcher.getMonitorInfo", (err, message) => {
            logger_1.default.system.debug("LauncherEntry.getMonitorInfo request" + JSON.stringify(message));
            this.launcher.getMonitorInfo(message.data, function (err, response) {
                message.sendQueryResponse(err, response);
            });
        });
        routerClientInstance_1.default.addResponder("Launcher.getMonitorInfoAll", (err, message) => {
            logger_1.default.system.debug("LauncherEntry.getMonitorInfoAll request" + JSON.stringify(message));
            this.launcher.getMonitorInfoAll((err, monitors) => {
                message.sendQueryResponse(err, monitors);
            });
        });
        routerClientInstance_1.default.addResponder("Launcher.removeComponent", (err, message) => {
            this.launcher.remove(message.data.name);
            message.sendQueryResponse(err, message.data);
        });
        routerClientInstance_1.default.addResponder("Launcher.showWindow", (err, message) => {
            //@todo only return after the window is ready...if asked to
            logger_1.default.system.debug("LauncherEntry.showWindow request" + JSON.stringify(message));
            this.launcher.showWindow(message.data.windowIdentifier, message.data, function (err, descriptor) {
                message.sendQueryResponse(err, descriptor);
            });
        });
        routerClientInstance_1.default.addResponder("Launcher.spawn", (err, message) => {
            //@todo only return after the window is ready...if asked to
            logger_1.default.system.debug("LauncherEntry.Spawn", message);
            this.launcher.spawn(message.data, function (error, descriptor) {
                logger_1.default.system.debug("LauncherEntry.Spawn done", message);
                message.sendQueryResponse(error, descriptor);
            });
        });
        routerClientInstance_1.default.addResponder("Launcher.userDefinedComponentUpdate", (err, message) => {
            function respond(error, response) {
                message.sendQueryResponse(error, response);
            }
            if (message.data.type === "add") {
                this.launcher.addUserDefinedComponent(message, respond);
            }
            else if (message.data.type === "remove") {
                this.launcher.removeUserDefinedComponent(message, respond);
            }
        });
        routerClientInstance_1.default.addResponder("LauncherService.addWindowsToGroup", (err, message) => {
            let errString = this.launcher.addWindowsToGroups(message.data);
            if (errString) {
                message.sendQueryResponse(errString);
            }
            else {
                message.sendQueryResponse(null, "Success");
            }
        });
        routerClientInstance_1.default.addResponder("LauncherService.getWindowsInGroup", (err, message) => {
            let windowList = this.launcher.getWindowsInGroup(message.data.groupName);
            message.sendQueryResponse(null, windowList);
        });
        routerClientInstance_1.default.addResponder("LauncherService.removeWindowsFromGroup", (err, message) => {
            let errString = this.launcher.removeWindowsFromGroup(message.data);
            if (errString) {
                message.sendQueryResponse(errString);
            }
            else {
                message.sendQueryResponse(null, "Success");
            }
        });
        routerClientInstance_1.default.addResponder("LauncherService.bringWindowsToFront", (err, message) => {
            let errString = this.launcher.bringWindowsToFront(message.data);
            if (errString) {
                message.sendQueryResponse(errString);
            }
            else {
                message.sendQueryResponse(null, "Success");
            }
        });
        routerClientInstance_1.default.addListener("LauncherService.hyperFocus", this.launcher.hyperFocus.bind(this));
        routerClientInstance_1.default.addListener("LauncherService.minimizeWindows", this.launcher.minimizeWindows.bind(this));
        routerClientInstance_1.default.addListener("LauncherService.restart", this.launcher.restart);
        routerClientInstance_1.default.addListener("Launcher.resetSpawnStagger", (err, message) => {
            this.launcher.resetSpawnStagger(message.data);
        });
    }
}
exports.LauncherEntry = LauncherEntry;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
// This file contains the service to manage all stacked windows.
// The common/window/stackedWindow wrapper contains the primary interface. Also, common/TabbingEntry contains interface to createStackedWindow used by Launcher.
Object.defineProperty(exports, "__esModule", { value: true });
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
class TabbingEntry {
    constructor(stackedWindowManager) {
        this.stackedWindowManager = stackedWindowManager;
        this.bindAllFunctions();
    }
    async initialize(done) {
        logger_1.default.system.debug("TabbingEntry.initialize");
        console.debug("TabbingEntry.initialize");
        this.setupStackedWindowManagerListeners();
        done();
    }
    shutdown(done) {
        done();
    }
    bindAllFunctions() {
        let self = this;
        for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {
            let method = self[name];
            // skip constructor
            if (!(method instanceof Function) || method === TabbingEntry)
                continue;
            self[name] = self[name].bind(self);
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Setup router listeners to handing incoming service requests and events from child windows
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    setupInterfaceListener(methodName, methodFunction) {
        logger_1.default.system.debug(`TabbingEntry.setupInterfaceListener for ${methodName}`);
        routerClientInstance_1.default.addResponder(`StackedWindow.${methodName}`, function (err, queryMessage) {
            if (err) {
                logger_1.default.system.error(`StackedWindow.${methodName} addResponder failed: ${err}`);
            }
            else {
                //@todo BAD BAD BAD. WE NEED TO BE CONSISTENT. //But it needs to work.
                if (queryMessage.data.windowIdentifier) {
                    if (queryMessage.data.windowIdentifier.windowName) {
                        queryMessage.data.windowIdentifier.name = queryMessage.data.windowIdentifier.windowName;
                    }
                    else if (queryMessage.data.windowIdentifier.name) {
                        queryMessage.data.windowIdentifier.windowName = queryMessage.data.windowIdentifier.name;
                    }
                }
                let callback = function (err, response) {
                    queryMessage.sendQueryResponse(err, response);
                };
                methodFunction(queryMessage.data, callback);
            }
        });
    }
    setupStackedWindowManagerListeners() {
        this.setupInterfaceListener("addWindow", this.stackedWindowManager.addWindow);
        this.setupInterfaceListener("removeWindow", this.stackedWindowManager.removeWindow);
        this.setupInterfaceListener("deleteWindow", this.stackedWindowManager.deleteWindow);
        this.setupInterfaceListener("setVisibleWindow", this.stackedWindowManager.setVisibleWindow);
    }
}
exports.TabbingEntry = TabbingEntry;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
class WindowCreateEntry {
    constructor(manifest, launcher) {
        this.manifest = manifest;
        this.launcher = launcher;
        this.finsembleConfig = manifest.finsemble;
        this.bindAllFunctions();
        this.definePubicInterface_Window();
    }
    initialize(done) {
        done();
    }
    windowServiceChannelName(channelTopic) { return `WindowService-Request-${channelTopic}`; }
    bindAllFunctions() {
        let self = this;
        for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {
            if (self[name] instanceof Function) {
                self[name] = self[name].bind(self); // only bind function properties
            }
        }
    }
    // invoked by serviceEntryPoint shutdown
    shutdown(done) {
        done();
    }
    definePubicInterface_Window() {
        // entry points for public window functions
        // NOTE: createWindow is now internal to launcher (i.e. spawn invokes createWindow directly)
        // NOTE: after more window-service cleanup this file will likely be rolled into another, but for now keeping as is to reduce confusion as we evole
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("getWindowIdentifier"), this.getWindowIdentifier);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("injectTitleBar"), this.injectTitleBar);
    }
    // probably only a temporary routine -- currently supports public wrapper
    async getWindowIdentifier(queryError, queryMessage) {
        logger_1.default.system.debug(`WindowService-Request-getWindowIdentifier for ${queryMessage.data.windowName}`, queryMessage.data);
        this.launcher.createSplinterAndInject.getWindowIdentifier(queryMessage.data, (err, data) => {
            queryMessage.sendQueryResponse(err, data);
        });
    }
    // may replace with preload
    async injectTitleBar(queryError, queryMessage) {
        logger_1.default.system.debug(`"WindowService-Request-injectTitleBar for ${queryMessage.data.config.name}`, queryMessage.data);
        this.launcher.createSplinterAndInject.injectTitleBar(queryMessage.data, (err, data) => {
            queryMessage.sendQueryResponse(err, data);
        });
    }
}
exports.WindowCreateEntry = WindowCreateEntry;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const routerClientInstance_1 = __webpack_require__(6);
const logger_1 = __webpack_require__(2);
const Constants = __webpack_require__(16);
const MockDockableWindow_1 = __webpack_require__(162);
const PoolSingletons_1 = __webpack_require__(96);
class WindowPrimitives {
    constructor(dockingMain) {
        this.dockingMain = dockingMain;
        this.bindAllFunctions();
        this.eventInterruptors = {};
    }
    initialize(done) {
        this.definePubicInterface_Window();
        done();
    }
    windowServiceChannelName(channelTopic) { return `WindowService-Request-${channelTopic}`; }
    bindAllFunctions() {
        for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(this))) {
            if (this[name] instanceof Function) {
                this[name] = this[name].bind(this); // only bind function properties
            }
        }
    }
    // invoked by serviceEntryPoint shutdown
    shutdown(done) {
        done();
    }
    definePubicInterface_Window() {
        logger_1.default.system.debug("definePubicInterface_Window");
        // entry points for public window functions
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("addEventListener"), this.addEventListenerHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("removeEventListener"), this.removeEventListenerHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("registerInterruptibleEvent"), this.registerInterruptibleEventHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("minimize"), this.minimizeHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("maximize"), this.maximizeHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("restore"), this.restoreHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("focus"), this.focusHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("blur"), this.blurHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("bringToFront"), this.bringToFrontHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("saveWindowOptions"), this.saveWindowOptionsHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("setBounds"), this.setBoundsHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("getBounds"), this.getBoundsHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("getOptions"), this.getOptionsHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("updateOptions"), this.updateOptionsHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("hide"), this.hideHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("show"), this.showHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("showAt"), this.showAtHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("alwaysOnTop"), this.alwaysOnTopHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("setOpacity"), this.setOpacityHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("close"), this.closeHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("isShowing"), this.isShowingHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("animate"), this.animateHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("setComponentState"), this.setComponentStateHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("setWindowState"), this.setWindowStateHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("saveCompleteWindowState"), this.saveCompleteWindowStateHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("getWindowState"), this.getWindowStateHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("getComponentState"), this.getComponentStateHandler);
        routerClientInstance_1.default.addResponder(this.windowServiceChannelName("setParent"), this.setParentHandler);
        routerClientInstance_1.default.addResponder("DockingService.getMonitorForWindow", this.getMonitorForWindowHandler);
    }
    // housekeeping function used in each of the public window-wrapper handlers below
    publicWindowHandlerPreface(method, queryError, queryMessage) {
        var okay = true;
        let params = queryMessage.data;
        let { windowIdentifier, eventName, guid } = queryMessage.data;
        if (!windowIdentifier) {
            logger_1.default.system.error(`no windowIdentifer for ${this.windowServiceChannelName(method)} handler`);
        }
        if (queryError) {
            logger_1.default.system.error(`${this.windowServiceChannelName(method)} addResponder failed: ${queryError}`);
            okay = false;
        }
        else {
            windowIdentifier.windowName = windowIdentifier.windowName || windowIdentifier.name || "unknown-name";
            windowIdentifier.name = windowIdentifier.windowName;
        }
        logger_1.default.system.debug(`WindowService-Request.${method} for ${windowIdentifier.windowName}`, queryMessage);
        return ({ okay, windowIdentifier, eventName, guid });
    }
    async registerInterruptibleEventHandler(queryError, queryMessage) {
        let { windowIdentifier, eventName, guid } = this.publicWindowHandlerPreface("registerInterruptibleEventHandler", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            if (wrap.wrapState === "closing" || wrap.wrapState === "closed") {
                return callback("Window is being shut down. Failed to add listener.");
            }
            if (Constants.INTERRUPTIBLE_EVENTS.includes(eventName)) {
                // keep track of all listeners
                if (!this.eventInterruptors[windowIdentifier.name]) {
                    this.eventInterruptors[windowIdentifier.name] = {};
                }
                if (!this.eventInterruptors[windowIdentifier.name][eventName]) {
                    this.eventInterruptors[windowIdentifier.name][eventName] = {};
                }
                this.eventInterruptors[windowIdentifier.name][eventName][guid] = {
                    origin: queryMessage.header.origin,
                    status: "created"
                };
                logger_1.default.system.debug("Add Interruptor", windowIdentifier.name, queryMessage.header.origin, guid, this.eventInterruptors[windowIdentifier.name][eventName][guid]);
            }
            callback();
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    // The following functions handler the public "wrapper" requests
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    async removeEventListenerHandler(queryError, queryMessage) {
        let { windowIdentifier, eventName, guid } = this.publicWindowHandlerPreface("removeEventListener", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        if (Constants.INTERRUPTIBLE_EVENTS.includes(eventName)) {
            // keep track of all listeners
            if (!this.eventInterruptors[windowIdentifier.name]) {
                this.eventInterruptors[windowIdentifier.name] = {};
            }
            if (!this.eventInterruptors[windowIdentifier.name][eventName]) {
                this.eventInterruptors[windowIdentifier.name][eventName] = {};
            }
            if (this.eventInterruptors[windowIdentifier.name] && this.eventInterruptors[windowIdentifier.name][eventName] && this.eventInterruptors[windowIdentifier.name][eventName][guid]) {
                logger_1.default.system.debug("Remove Interruptor", windowIdentifier.name, this.eventInterruptors[windowIdentifier.name][eventName][guid], guid);
                delete this.eventInterruptors[windowIdentifier.name][eventName][guid];
            }
        }
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._removeEventListener(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async addEventListenerHandler(queryError, queryMessage) {
        let { windowIdentifier, eventName, guid } = this.publicWindowHandlerPreface("addEventListener", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        //close-complete will never fire inside of that window.
        if (wrap) {
            if (wrap.wrapState === "closing" || wrap.wrapState === "closed") {
                return callback("Window is being shut down. Failed to add listener.");
            }
            if (Constants.INTERRUPTIBLE_EVENTS.includes(eventName)) {
                // keep track of all listeners
                if (!this.eventInterruptors[windowIdentifier.name]) {
                    this.eventInterruptors[windowIdentifier.name] = {};
                }
                if (!this.eventInterruptors[windowIdentifier.name][eventName]) {
                    this.eventInterruptors[windowIdentifier.name][eventName] = {};
                }
                logger_1.default.system.debug("Add Interruptor", windowIdentifier.name, guid);
                this.eventInterruptors[windowIdentifier.name][eventName][guid] = {
                    origin: queryMessage.header.origin,
                    status: "created"
                };
            }
            // no hander is set up here, but the event manager is notified there is a remote listener
            wrap._addEventListener(queryMessage.data);
            callback();
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    /**
     * Given a windowIdentifier, this function will find the dockableWindow or window instance, figure out which monitor the window is on, and return
     * it back to the caller (public FinsembleWindow).
     *
     * @param {*} queryError callback on error
     * @param {*} queryMessage message data and success callback
     * @returns Promise
     * @memberof WindowPrimitives
     */
    async getMonitorForWindowHandler(queryError, queryMessage) {
        let { windowIdentifier } = queryMessage.data;
        let callback = queryMessage.sendQueryResponse;
        let dockableWindow = this.dockingMain.getWindow(windowIdentifier.windowName, false);
        let monitor;
        if (dockableWindow) {
            monitor = this.dockingMain.getMonitorForWindow(dockableWindow);
        }
        else {
            let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.windowName);
            if (wrap) {
                let { data: bounds } = await wrap._getBounds();
                //See documentation in MockDockableWindow for why this is necessary.
                let mock = new MockDockableWindow_1.MockDockableWindow(Object.assign({ name: wrap.name }, bounds));
                monitor = this.dockingMain.getMonitorForWindow(mock);
            }
            else {
                return callback(`Could not find window for ${windowIdentifier.windowName}`, null);
            }
        }
        queryMessage.sendQueryResponse(null, monitor.toJSON());
    }
    async minimizeHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("minimize", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._minimize(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async maximizeHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("maximize", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._maximize(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async restoreHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("restore", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._restore(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async focusHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("focus", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._focus(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async blurHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("blur", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._blur(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async bringToFrontHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("bringToFront", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._bringToFront(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async isShowingHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("isShowing", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._isShowing(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async saveWindowOptionsHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("saveWindowOptions", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._saveWindowOptions(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async setBoundsHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("setBound", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        //Generally getWindow is used inside of docking. We want errors if we can't find a window. Here, it's being used all throughout the system, including by windows whose movement isn't managed by docking. By passing false, we will eliminate unnecessary and confusing errors for the dev-user.
        let dockableWindow = this.dockingMain.getWindow(windowIdentifier.name, false);
        if (dockableWindow) {
            dockableWindow.setBounds(queryMessage.data.bounds, callback);
        }
        else {
            let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
            if (wrap) {
                wrap._setBounds(queryMessage.data, callback);
            }
            else {
                callback("no dockable window", null);
            }
        }
    }
    async animateHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("animate", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        //Generally getWindow is used inside of docking. We want errors if we can't find a window. Here, it's being used all throughout the system, including by windows whose movement isn't managed by docking. By passing false, we will eliminate unnecessary and confusing errors for the dev-user.
        let dockableWindow = this.dockingMain.getWindow(windowIdentifier.name, false);
        if (dockableWindow) {
            dockableWindow.animate(queryMessage.data, callback);
        }
        else {
            let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
            if (wrap) {
                wrap._animate(queryMessage.data, callback);
            }
            else {
                callback("no dockable window", null);
            }
        }
    }
    async getBoundsHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("getBounds", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let dockableWindow = this.dockingMain.getWindow(windowIdentifier.name, false);
        if (dockableWindow) {
            let bounds = dockableWindow.getBounds();
            callback(null, bounds);
        }
        else {
            let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
            if (wrap) {
                wrap._getBounds(queryMessage.data, (err, data) => {
                    logger_1.default.system.debug(`WindowService-Request.getBounds response`, queryMessage.data, data);
                    callback(err, data);
                });
            }
            else {
                callback(`unidentified window name: ${windowIdentifier.name}`, null);
            }
        }
    }
    async getOptionsHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("getOptions", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._getOptions(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async updateOptionsHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("updateOptions", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._updateOptions(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async hideHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("hide", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._hide(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async showHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("show", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._show(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async showAtHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("showAt", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._showAt(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async alwaysOnTopHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("alwaysOnTop", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._alwaysOnTop(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async setOpacityHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("setOpacity", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap._setOpacity(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async setComponentStateHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("setComponentState", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap.setComponentState(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async setWindowStateHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("setWindowState", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap.setWindowState(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async saveCompleteWindowStateHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("saveCompleteWindowState", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap.saveCompleteWindowState(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async getWindowStateHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("getWindowState", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap.getWindowState(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async getComponentStateHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("getComponentState", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap.getComponentState(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async setParentHandler(queryError, queryMessage) {
        let { windowIdentifier } = this.publicWindowHandlerPreface("setParent", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            wrap.setParent(queryMessage.data, callback);
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
    async closeHandler(queryError, queryMessage) {
        var wrapState;
        let { windowIdentifier, eventName } = this.publicWindowHandlerPreface("close", queryError, queryMessage);
        let callback = queryMessage.sendQueryResponse;
        let delayInterrupters = (eventName, afterSetup) => {
            let delayers = {};
            let listenerCount = 0;
            let resolvePromise;
            let promiseResolved = false;
            let gotResponses = setTimeout(() => {
                for (let guid in this.eventInterruptors[windowIdentifier.name][eventName]) {
                    if (!delayers[guid]) {
                        logger_1.default.system.warn(windowIdentifier.name, " had a bad wrap somewhere that did not publish or remove ", guid, " listener for ", eventName, ". Details:", this.eventInterruptors[windowIdentifier.name][eventName][guid]);
                        delete this.eventInterruptors[windowIdentifier.name][eventName][guid];
                    }
                }
                if (!this.eventInterruptors[windowIdentifier.name][eventName] || Object.keys(this.eventInterruptors[windowIdentifier.name][eventName]).length == 0) {
                    promiseResolved = true;
                    resolvePromise();
                }
                else {
                    logger_1.default.system.debug("waiting on ", delayers);
                }
            }, 1000);
            let listener = (sid, eventGuid, response) => {
                if (promiseResolved)
                    return;
                let data = response.data;
                if (Object.keys(data).length > 0 && this.eventInterruptors[windowIdentifier.name][eventName][eventGuid]) { // if initial pubsub "empty" state without any key then ignore
                    logger_1.default.system.debug("Got Publish from intteruptor", windowIdentifier.name, eventName, eventGuid, response);
                    if (!data.delayed && !data.canceled) {
                        routerClientInstance_1.default.unsubscribe(sid);
                        listenerCount--;
                        logger_1.default.system.debug("Listener fired for ", eventName, windowIdentifier.name, response.header.origin, data, "Listeners remaining: ", JSON.stringify(listenerCount));
                        logger_1.default.system.debug("Remove interruptor", windowIdentifier.name, eventGuid);
                        delete this.eventInterruptors[windowIdentifier.name][eventName][eventGuid];
                        if (Object.keys(this.eventInterruptors[windowIdentifier.name][eventName]).length == 0) {
                            logger_1.default.system.debug("All listeners completed for ", eventName, windowIdentifier.name);
                            promiseResolved = true;
                            resolvePromise();
                            clearTimeout(gotResponses);
                        }
                    }
                    else {
                        delayers[eventGuid] = true;
                    }
                }
                else if (Object.keys(this.eventInterruptors[windowIdentifier.name][eventName]).length == 0) {
                    promiseResolved = true;
                    resolvePromise();
                }
            };
            let p = new Promise(function (resolve, reject) {
                resolvePromise = resolve;
            });
            let eventInterruptors = this.eventInterruptors[windowIdentifier.name];
            if (eventInterruptors && eventInterruptors[eventName]) {
                for (let eventGuid in eventInterruptors[eventName]) {
                    listenerCount++;
                    logger_1.default.system.debug("Adding Subscriber for intteruptor", windowIdentifier.name, eventName, eventGuid, " for origin ", eventInterruptors[eventName][eventGuid]);
                    let sid = routerClientInstance_1.default.subscribe(Constants.EVENT_INTERRUPT_CHANNEL + "." + eventGuid, (err, response) => {
                        listener(sid, eventGuid, response);
                    });
                }
            }
            else {
                resolvePromise();
            }
            afterSetup();
            logger_1.default.system.debug("WRAP CLOSE. Waiting on", listenerCount.toString(), "listeners for ", eventName, windowIdentifier.name);
            return p;
        };
        let wrap = PoolSingletons_1.WindowPoolSingleton.get(windowIdentifier.name);
        if (wrap) {
            logger_1.default.system.debug("WRAP CLOSE. starting in wrap", windowIdentifier.name);
            let wrapState = "closing";
            logger_1.default.system.debug("COMPONENT LIFECYCLE: STATE CHANGE: ", windowIdentifier.name, wrapState);
            routerClientInstance_1.default.publish("Finsemble.Component.State." + windowIdentifier.name, { state: wrapState });
            //After all listeners are set up, we trigger the event <- allow other windows to prevent closing
            await delayInterrupters("close-requested", () => {
                wrap.eventManager.trigger("close-requested");
            });
            // Since we don't even call close on the window until all close-requested handlers are done, this allows for things inside the window itself to prevent closing.
            // private wraps can listen for this event, trigger a close in the window and put a kibash on the close if needed.
            // Currently only used by .NET components.
            await delayInterrupters("_container-close-handlers", () => {
                wrap.eventManager.trigger("_container-close-handlers");
            });
            // This is an event for the wraps to delete themselves
            logger_1.default.system.debug("WRAP CLOSE. Triggered close for", windowIdentifier.name);
            await delayInterrupters("closed", () => {
                wrap.eventManager.trigger("closed");
            });
            logger_1.default.system.debug("WRAP CLOSE. All closed events fired", windowIdentifier.name);
            // Actually close the window
            wrap._close(queryMessage.data, async () => {
                logger_1.default.system.debug("WRAP CLOSE. Removing wrap.", windowIdentifier.name);
                wrap.handleWrapRemoveRequest();
                logger_1.default.system.debug("WRAP CLOSED. Invoking callback.", windowIdentifier.name);
                //Public wraps wait for this to clean themselves up. Can't wait on closed because our cleanup removes the wrap entirely. Other listeners might fail if our cleanup handler fires first.
                await delayInterrupters("close-complete", () => {
                    logger_1.default.system.debug("WRAP CLOSE. All close-complete events fired", windowIdentifier.name);
                    wrap.eventManager.trigger("close-complete");
                });
                wrapState = "closed";
                logger_1.default.system.debug("COMPONENT LIFECYCLE: STATE CHANGE: ", wrapState, windowIdentifier.name);
                routerClientInstance_1.default.publish("Finsemble.Component.State." + windowIdentifier.name, { state: wrapState });
                PoolSingletons_1.WindowPoolSingleton.remove(windowIdentifier.name);
                callback();
            });
        }
        else {
            callback(`unidentified window name: ${windowIdentifier.name}`, null);
        }
    }
}
exports.WindowPrimitives = WindowPrimitives;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
* Copyright 2017 by ChartIQ, Inc.
* All rights reserved.
*/
// This file contains the service to manage all stacked windows.
// The common/window/stackedWindow wrapper contains the primary interface. Also, common/StackedWindowManager contains interface to createStackedWindow used by Launcher.
Object.defineProperty(exports, "__esModule", { value: true });
const routerClientInstance_1 = __webpack_require__(6);
const workspaceClient_1 = __webpack_require__(85);
const logger_1 = __webpack_require__(2);
const FinsembleWindow_1 = __webpack_require__(80);
const BaseWindow_1 = __webpack_require__(97);
const FinsembleWindowInternal_1 = __webpack_require__(105);
const distributedStoreClient_1 = __webpack_require__(78);
const configUtil_1 = __webpack_require__(14);
const async_1 = __webpack_require__(11);
const _throttle = __webpack_require__(39);
const constants = __webpack_require__(16);
const PoolSingletons_1 = __webpack_require__(96);
/** @TODO - This should be unnecessary. DistributedStoreClient.inialize should be idempotent,
 * and then we can remove this odd shielding of it behind this "if" statement. */
if (!window.DistributedStoreClient) {
    window.DistributedStoreClient = distributedStoreClient_1.default;
    window.DistributedStoreClient.initialize();
}
/**
 * Constructure for stackedWindow record -- this is what's saved in the store
 *
 * @param {any} stackedWindowIdentifier
 * @memberof StackedWindowManager
 * @private
 */
class WindowRecord {
    constructor(stackedWindowIdentifier) {
        this.identifier = stackedWindowIdentifier;
        this.childWindowIdentifiers = [];
        this.visibleWindowIdentifier = null;
        this.bounds = null;
    }
}
class StackedWindowManager {
    constructor(params) {
        this.params = params; // keeps any params that ware passed in
        this.childWindow = {}; // holds the wrapper for each child window
        this.storeCache = {}; // maintains a local cache by window name of what what this service keeps in the global store; stays in sync because only this service writes to store
        this.stackedWindowListeners = {}; // saves handles for listeners so can be removed (indexed by stacked window name)
        this.stackedWindowWrappers = {}; // each stacked window has a wrapper so can invoke saveWindowOptions() to save workspace state
        this.eventHandlerFunction = {}; // holds event handlers functions (needed to remove listeners)
        this.childNameToSID = {}; // mapping from child window name to it parent stackedWindowIdentifier
        this.childEventsToHandle = [
            "minimized", "restored", "shown", "hidden", "focused",
            "broughtToFront", "setBounds", "closed", "alwaysOnTop", "setOpacity",
            "title-changed", "bounds-change-request", "bounds-change-end", "bounds-changed"
        ];
        this.bindAllFunctions();
        window.StackedWindowManager = this;
    }
    initialize(finsembleConfig, callback = Function.prototype) {
        // addReadyTimeout default should be larger than the router failover time (i.e. when failover goes to cross-domain) -- default failover time adds up to 6 seconds
        this.addReadyTimeout = configUtil_1.ConfigUtilInstance.getDefault(finsembleConfig, "finsembleConfig.stackedWindow.addReadyTimeout", 6500);
        logger_1.default.system.debug(`"StackedWindowManager addReadyTimeout ${this.addReadyTimeout}`);
        // connect to the global window store; again only this service writes to the store for stacked windows
        distributedStoreClient_1.default.onReady(() => {
            distributedStoreClient_1.default.createStore({ store: "Finsemble-Windows", global: true }, (err, store) => {
                logger_1.default.system.debug("StackedWindowManager getStore", err, store);
                this.globalStore = store;
                this.setupStackedWindowServiceListeners();
                this.listenForWorkspaceChanges();
                callback();
            });
        });
    }
    bindAllFunctions() {
        let self = this;
        for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {
            let method = self[name];
            // skip constructor
            if (!(method instanceof Function) || method === StackedWindowManager)
                continue;
            self[name] = self[name].bind(self);
        }
    }
    //When the workspace is changed, we need to create a new queue. Without that, the system will wait until the old queue is complete (when it times out...).
    listenForWorkspaceChanges() {
        // RouterClient.addListener("WorkspaceService.switch", this.onWorkspaceChanging);
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // "Hidden" External Interfaces
    // 		RouterClient.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, { type: "Added", stackedWindowIdentifier });
    // 		RouterClient.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, { type: "Remove", stackedWindowIdentifier });
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Utility Functions
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Saves in the global store the data from the storeCache for the specified stacked window
     *
     * @param {any} stackedWindowIdentifier
     * @param {any} closing
     * @memberof StackedWindowManager
     * @private
     */
    saveStore(stackedWindowIdentifier, params = {}, cb = Function.prototype) {
        const promiseResolver = (resolve) => {
            var windowName = stackedWindowIdentifier.windowName;
            var thisStackRecord = this.storeCache[windowName];
            if (thisStackRecord) {
                logger_1.default.system.debug("StackedWindowManager saveStore", windowName, thisStackRecord);
                thisStackRecord.customData.spawnData.windowIdentifiers = thisStackRecord.childWindowIdentifiers; // TODO: this is hacky. Lots of duplicate info in the descriptor
                this.globalStore.setValue({ field: windowName, value: { identifier: stackedWindowIdentifier, descriptor: thisStackRecord } }, () => {
                    if (!this.stackedWindowWrappers[windowName]) {
                        FinsembleWindowInternal_1.FinsembleWindowInternal.getInstance({ stackedWindowManager: this, name: windowName }, (err, wrappedWindow) => {
                            this.stackedWindowWrappers[windowName] = wrappedWindow;
                            logger_1.default.system.debug("StackedWindowManager saveStore Saving Window State Stack while wrapping", wrappedWindow.name, thisStackRecord);
                            this.saveWindowOptions(params, wrappedWindow, () => {
                                resolve();
                                cb();
                            });
                        });
                    }
                    else {
                        logger_1.default.system.debug("StackedWindowManager saveStore Saving Window State Stack already wrapped", this.stackedWindowWrappers[windowName].name, thisStackRecord);
                        this.saveWindowOptions(params, this.stackedWindowWrappers[windowName], () => {
                            resolve();
                            cb();
                        });
                    }
                });
            }
            else {
                this.globalStore.removeValue({ field: stackedWindowIdentifier.windowName });
                resolve();
                cb();
            }
            if (!params.noNotification) {
                logger_1.default.system.debug("StackedWindowManager saveStore notification", windowName, thisStackRecord);
                routerClientInstance_1.default.publish(`Finsemble.StackedWindow.${stackedWindowIdentifier.windowName}`, thisStackRecord);
            }
            else {
                logger_1.default.system.debug("StackedWindowManager saveStore no notification", windowName, thisStackRecord);
            }
        };
        return new Promise(promiseResolver);
    }
    /**
     * Return true if the specified window in specified stack is showing
     *
     * @param {any} params
     * @returns
     * @memberof StackedWindowManager
     * @private
     */
    isShowing(params) {
        var { stackedWindowIdentifier, windowIdentifier } = params;
        var thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];
        //
        return (windowIdentifier && thisStackRecord.visibleWindowIdentifier && windowIdentifier.windowName === thisStackRecord.visibleWindowIdentifier.windowName); // returns true if window is visible in stack
    }
    /**
     * Return true if the specified window name is in the specified stack
     *
     * @param {any} params
     * @returns
     * @memberof StackedWindowManager
     * @private
     */
    ifWindowInStack(params) {
        var { thisStackRecord, windowName } = params;
        var result = false;
        for (let i = 0; i < thisStackRecord.childWindowIdentifiers.length; i++) {
            if (thisStackRecord.childWindowIdentifiers[i].name === windowName) {
                result = true;
            }
        }
        return result; // true if the specified window name is in the stack
    }
    /**
     * Return true if the params indication the wrap operation was invoked directly on the window, as opposed to directly on the childWindow
     *
     * @param {any} params
     * @returns
     * @memberof StackedWindowManager
     * @private
     */
    operatingDirectlyOnStackedWindow(params) {
        var result;
        var { stackedWindowIdentifier, windowIdentifier } = params;
        stackedWindowIdentifier = stackedWindowIdentifier || {};
        if ((!windowIdentifier) || (stackedWindowIdentifier.windowName === windowIdentifier.windowName)) {
            result = true; // must be a stacked window
        }
        else {
            result = false; // must be operating on a child of a stacked window
        }
        return result;
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Setup router listeners to handing incoming service requests and events from child windows
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    eventChannelName(stackedWindowName, channelTopic) { return `StackedWindow-${stackedWindowName}-${channelTopic}`; }
    setupInterfaceListener(methodName, methodFunction) {
        routerClientInstance_1.default.addResponder(`StackedWindow.${methodName}`, function (err, queryMessage) {
            if (err) {
                logger_1.default.system.error(`StackedWindow.${methodName} addResponder failed: ${err}`);
            }
            else {
                //@todo BAD BAD BAD. WE NEED TO BE CONSISTENT. //But it needs to work.
                if (queryMessage.data.windowIdentifier) {
                    if (queryMessage.data.windowIdentifier.windowName) {
                        queryMessage.data.windowIdentifier.name = queryMessage.data.windowIdentifier.windowName;
                    }
                    else if (queryMessage.data.windowIdentifier.name) {
                        queryMessage.data.windowIdentifier.windowName = queryMessage.data.windowIdentifier.name;
                    }
                }
                let callback = function (err, response) {
                    queryMessage.sendQueryResponse(err, response);
                };
                methodFunction(queryMessage.data, callback);
            }
        });
    }
    setupStackedWindowServiceListeners() {
        // window wrapper entry points
        this.setupInterfaceListener("minimize", this.minimize);
        this.setupInterfaceListener("maximize", this.maximize);
        this.setupInterfaceListener("restore", this.restore);
        this.setupInterfaceListener("focus", this.focus);
        this.setupInterfaceListener("bringToFront", this.bringToFront);
        this.setupInterfaceListener("saveWindowOptions", this.saveWindowStateToStore);
        this.setupInterfaceListener("setBounds", this.setBounds);
        this.setupInterfaceListener("getBounds", this.getBounds);
        this.setupInterfaceListener("startMove", this.startMove);
        this.setupInterfaceListener("stopMove", this.stopMove);
        // this.setupInterfaceListener("updateOptions", this.updateOptions);
        this.setupInterfaceListener("hide", this.hide);
        this.setupInterfaceListener("show", this.show);
        this.setupInterfaceListener("close", this.close);
        this.setupInterfaceListener("reorder", this.reorder);
        this.setupInterfaceListener("alwaysOnTop", this.alwaysOnTop);
        // this.setupInterfaceListener("setOpacity", this.setOpacity);
        routerClientInstance_1.default.addResponder("StackedWindow.setOpacity", (err, queryMessage) => {
            if (err) {
                logger_1.default.system.error(`StackedWindow.setOpacity addResponder failed: ${err}`);
            }
            else {
                this.setOpacity(queryMessage.data, function (err, response) {
                    queryMessage.sendQueryResponse(err, response);
                });
            }
        });
        routerClientInstance_1.default.addResponder("StackedWindow.updateOptions", (err, queryMessage) => {
            if (err) {
                logger_1.default.system.error(`StackedWindow.updateOptions addResponder failed: ${err}`);
            }
            else {
                this.updateOptions(queryMessage.data, function (err, response) {
                    queryMessage.sendQueryResponse(err, response);
                });
            }
        });
        routerClientInstance_1.default.addListener("LauncherService.shutdownRequest", this.onLauncherShutdown);
    }
    onLauncherShutdown() {
        let stacks = Object.keys(this.storeCache);
        //Launcher needs to know that each stack is closed. We don't actually do anything here, because there's no cleanup needed. The individual windows will take care of their own shutdown sequence. So we just immediately tell launcher that we're all good.
        stacks.forEach(async (stackName) => {
            await this.closeStackedWindow({ stackedWindowIdentifier: stackName, removeFromWorkspace: false });
            routerClientInstance_1.default.transmit("LauncherService.shutdownResponse", { waitForMe: false, name: stackName });
        });
    }
    visibleChildEventHandler(stackedWindowName, stackWrap, eventObject) {
        let event = eventObject.data;
        if (event.eventName === "title-changed") {
            let stackedWindowIdentifier = this.childNameToSID[event.name];
            if (stackedWindowIdentifier) { // might not be set when stacked window is closing -- fix in cleanup but put out warn for now
                let thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];
                for (let i = 0; i < thisStackRecord.childWindowIdentifiers.length; i++) {
                    let childIdentifier = thisStackRecord.childWindowIdentifiers[i];
                    if (childIdentifier.windowName == event.name) {
                        childIdentifier.title = event.title;
                        this.saveStore(stackedWindowIdentifier, { noNotification: true });
                        break;
                    }
                }
            }
            else {
                logger_1.default.system.warn("stacked window didn't exist for title-change -- ignoring error for now");
            }
        }
        logger_1.default.system.verbose("StackedWindowManager transmitting event", event.eventName, this.eventChannelName(stackedWindowName, event.eventName), event);
        let doNotForwardToStackedWindowList = ["closed"];
        if (!doNotForwardToStackedWindowList.includes(event.eventName)) {
            stackWrap.eventManager.trigger(event.eventName, event);
        }
    }
    ;
    addChildEventListener(stackedWindowName, childName, childWrapper) {
        logger_1.default.system.debug("StackedWindowManagerService.addChildEventListener", stackedWindowName, childName);
        FinsembleWindowInternal_1.FinsembleWindowInternal.getInstance({ name: stackedWindowName }, (err, stackWrap) => {
            for (let i = 0; i < this.childEventsToHandle.length; i++) {
                let eventName = this.childEventsToHandle[i];
                let eventHandler = (eventObject) => {
                    this.visibleChildEventHandler(stackedWindowName, stackWrap, eventObject);
                };
                if (eventName === "bounds-change-request") {
                    eventHandler = _throttle(eventHandler, 10);
                }
                if (!this.eventHandlerFunction[stackedWindowName])
                    this.eventHandlerFunction[stackedWindowName] = {};
                if (this.eventHandlerFunction[stackedWindowName][eventName]) {
                    logger_1.default.system.warn("Avoiding Registering the same Listener Twice.");
                }
                else {
                    logger_1.default.system.debug("StackedWindowManager addChildEventListener", eventName, childName);
                    this.eventHandlerFunction[stackedWindowName][eventName] = eventHandler;
                    childWrapper.addEventListener(eventName, eventHandler);
                }
            }
        });
    }
    removeChildEventListener(stackedWindowName, childName, childWrapper) {
        logger_1.default.system.debug("StackedWindowManager.removeChildEventListener", stackedWindowName, childName);
        //We may try to remove listeners before adding them. If so, don't error out.
        if (!this.eventHandlerFunction[stackedWindowName])
            this.eventHandlerFunction[stackedWindowName] = {};
        for (let i = 0; i < this.childEventsToHandle.length; i++) {
            let eventName = this.childEventsToHandle[i];
            let handler = this.eventHandlerFunction[stackedWindowName][eventName];
            if (handler) {
                childWrapper.removeEventListener(eventName, handler);
                delete this.eventHandlerFunction[stackedWindowName][eventName];
            }
            else {
                logger_1.default.system.debug("StackedWindowManager.removeChildEventListener before the listener was added.");
            }
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // The next section of functions are orinted to managing Stacked Windows throught out the system.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // returns true if all the groupWindows are in the array of child windows
    groupWindowsContainedInStacked(groupWindows, childWindows) {
        var matchCount = 0;
        var groupWindowCount = 0;
        var groupWindow;
        for (groupWindow in groupWindows) {
            groupWindowCount++; // count the number of group windows
            if (groupWindows.hasOwnProperty(groupWindow)) {
                for (let childWindow of childWindows) {
                    if (groupWindow === childWindow.name) {
                        matchCount++; // count the matches found in child windows
                    }
                }
            }
        }
        return (groupWindowCount === matchCount); // return true if all group windows found in child windows
    }
    // when a new child window is added to the stack, this function determines if the stacked window should join any of the childs groups
    joinGroups(groups, stackedWindowIdentifier) {
        var thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];
        if (!thisStackRecord) {
            logger_1.default.system.error("stackedWindowManager.joinGroups unidentified stacked window", stackedWindowIdentifier);
        }
        else {
            if (groups) {
                for (let group of groups) {
                    var oneGroup = PoolSingletons_1.GroupPoolSingleton.get(group);
                    if (!this.groupWindowsContainedInStacked(oneGroup.windows, thisStackRecord.childWindowIdentifiers)) {
                        // if the group exists outside the stacked window, then join the group
                        routerClientInstance_1.default.transmit("DockingService.joinGroup", { groupName: group, name: stackedWindowIdentifier.windowName });
                    }
                }
            }
        }
    }
    getGroups(windowIdentifier) {
        const promiseResolver = async (resolve) => {
            routerClientInstance_1.default.query("DockingService.getGroupsForWindow", { name: windowIdentifier.name }, (err, response) => {
                resolve(response.data);
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Creates a new StackedWindow, returning its stackWindowIdentifier in the callback. Optionally initializes stack with a set of child windows.
     *
     * Invoked by Launcher Service when spawning a stacked window (e.g. LauncherClient.spawn()). TODO: this all changed. Update
     *
     * @param {object} params Parameters
     * @param {array=} params.windowIdentifiers array of windowIdentifiers to add to stack on creation.
     * @param {boolean=} params.new if true then stacked window being defined for first time with no presistent state
     * @param {function=} callback function(err, stackedWindowIdentifier)
     * @memberof StackedWindowManager
     * @private
     */
    async createStackedWindow(params, callback) {
        logger_1.default.system.debug("StackedWindowManager.createStackedWindow", params);
        if (params.customData)
            params.customData.manifest = {};
        var stackedWindowIdentifier = { windowType: "StackedWindow", windowName: params.windowName || params.name };
        var thisStackRecord;
        // TABBING TBD: need to finish before callback -- async
        //if (true || params.new) { // being created for the first time (not from workspace with presistent state)
        thisStackRecord = new WindowRecord(stackedWindowIdentifier); // blank initial record
        Object.assign(thisStackRecord, params); // merge windowDescriptor into stackRecord
        thisStackRecord.registeredWithDockingManager = false;
        let windowIdentifiers = thisStackRecord.customData.spawnData.windowIdentifiers;
        thisStackRecord.childWindowIdentifiers = [];
        // below commented out because don't want to save until complete state
        // this.saveStore(stackedWindowIdentifier); // go ahead and save initial information before waiting on children
        logger_1.default.system.debug("StackedWindowManager.createStackedWindow NewRecord", thisStackRecord);
        this.storeCache[stackedWindowIdentifier.windowName] = thisStackRecord; // cache the stacked window data
        if (windowIdentifiers) { // if a list of initial windows provides, then now add them as children
            params.noSave = true; // input to addWindow -- don't save in add because will do it once here after all added
            params.stackedWindowIdentifier = stackedWindowIdentifier;
            let wrapReadyCallback = async (err, response) => {
                if (response.data && response.data.state === "open") {
                    routerClientInstance_1.default.unsubscribe(subscribeID); // no longer need subscription
                    for (let i = 0; i < windowIdentifiers.length; i++) {
                        let p = Object.assign({}, params);
                        p.windowIdentifier = windowIdentifiers[i];
                        if (i === 0) {
                            p.inheritGroups = true;
                        }
                        await this.addWindow(p).catch(error => logger_1.default.system.error("StackedWindowManager.createStackedWindow add catch error: ", error));
                    }
                    // if not a newStack (i.e. spawned by workspace) the register here after children are added; otherwise for new stacks must dynamically register in addWindow.  TBD: need better model here
                    if (!params.newStack) {
                        await this.registerWithDockingManager({ windowIdentifier: stackedWindowIdentifier });
                    }
                    logger_1.default.system.debug("StackedWindowManager.createStackedWindow all available windows added");
                    // if there is a visible window but the cooresponding child window never became ready (for any reason) then set a new visible window
                    if (thisStackRecord.visibleWindowIdentifier && !this.ifWindowInStack({ thisStackRecord, windowName: thisStackRecord.visibleWindowIdentifier.windowName })) {
                        // if children then set the first child as the visible window
                        if (thisStackRecord.childWindowIdentifiers.length) {
                            logger_1.default.system.error("StackedWindowManager.createStackedWindow resetting visible window to first child since previous visible window could't be added");
                            this.setVisibleWindow({ stackedWindowIdentifier, windowIdentifier: thisStackRecord.childWindowIdentifiers[0] }); // make the first window visible by default
                        }
                    }
                    if (!thisStackRecord.childWindowIdentifiers.length) {
                        // TBD: this should essentially mean the stacked-window creation failed, but this has side-effect so just put out error for now. Revisit on cleanup.  But tested and roughly handled okay.
                        logger_1.default.system.error("StackedWindowManager.createStackedWindow: no children became ready");
                    }
                    // note the LauncherService will add to the workspace after spawn completes (spawn is the main client of this function)
                    this.addWorkspaceListeners(stackedWindowIdentifier); // setup listeners to manager workspace.
                    this.saveStore(stackedWindowIdentifier); // save again now children added
                    // send notification to LauncherClient that the window has been created (otherwise LauncherClient hangs)
                    routerClientInstance_1.default.publish("Finsemble." + stackedWindowIdentifier.windowName + ".componentReady", {
                        name: stackedWindowIdentifier.windowName
                    });
                }
            };
            //wait for the wrap to be available before adding windows.
            let wrapReadyChannel = "Finsemble." + stackedWindowIdentifier.windowName + ".wrapReady";
            var subscribeID = routerClientInstance_1.default.subscribe(wrapReadyChannel, wrapReadyCallback);
            callback(null, stackedWindowIdentifier);
        }
    }
    /**
     * Adds window as a child to a stacked window.  Adds to the top of the stack, or if specied to a specific location in the stack;
     *
     * @param {object=} params Parameters
     * @param {object} params.stackedWindowIdentifier stacked window to operate on stacked window to operate on
     * @param {object} params.windowIdentifier window to add
     * @param {number=} params.position the location in the stack to push the window.  Location 0 is the bottom of the stack. Defaults to the top of stack.
     * @param {boolean=} params.noSave if true then don't save the store after updating it (will be saved by caller)
     * @param {boolean=} params.ignorePreviousState if true then ignore the previous state of the window being added (with in another stack and registered with docking handled elsewere)
     * @param {boolean=} params.noVisibility if true don't automatically set visibility when first window added to the stack (needed for ordered startup)
     * @param {function=} callback function(err)
     * @memberof StackedWindowManager
     * @private
     */
    addWindow(params, callback = Function.prototype) {
        const promiseResolver = (resolve, reject) => {
            // this handles when a window being added never reaches the ready state -- set timer to catch these cases and reject on timeout
            var readyTimedout = false;
            var readyTimer = setTimeout(() => {
                // the window never became ready so reject its addition to the stacked window
                let thisErr = `StackedWindowManager.addWindow error: child ${params.windowIdentifier.windowName} never became ready`;
                reject(thisErr);
                callback(thisErr);
                readyTimedout = true;
            }, this.addReadyTimeout);
            logger_1.default.system.debug("StackedWindowManager.addWindow", params);
            let subscribeID = routerClientInstance_1.default.subscribe("Finsemble." + params.windowIdentifier.windowName + ".wrapReady", (err, response) => {
                if (!(response.data && response.data.name === params.windowIdentifier.windowName && response.data.state === "open")) {
                    logger_1.default.system.debug("StackedWindowManager.addWindow waiting", params.windowIdentifier.windowName);
                }
                else if (readyTimedout) { // if timeout failure
                    // if was rejected because of timeout, then don't accept it now -- window won't be part of stack because too slow become ready (in theory this shouldn't happen)
                    // TBD -- although this case should not happen if timeouts are correct, if it doesn should probably pull out of stacked window and make visible
                    logger_1.default.system.error("StackedWindowManager.addWindow already timed out before ready so not added", params.windowIdentifier.windowName);
                }
                else {
                    logger_1.default.system.debug("StackedWindowManager wrapper state", params.windowIdentifier.windowName, response.data.state);
                    clearInterval(readyTimer); // kill the timer waiting for ready
                    if (response.data.state === "closed")
                        return;
                    routerClientInstance_1.default.unsubscribe(subscribeID);
                    logger_1.default.system.debug("StackedWindowManager.addWindow continuing", params.windowIdentifier.windowName);
                    var { stackedWindowIdentifier, windowIdentifier, noSave, position } = params;
                    var thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];
                    // set following "if (false" to "if (true" to enable testing a failed visible window
                    if (false) {
                        return reject("testing failed visible window");
                    }
                    else if (thisStackRecord) {
                        position = position || thisStackRecord.childWindowIdentifiers.length; // position to add the window
                        thisStackRecord.childWindowIdentifiers.splice(position, 0, windowIdentifier); // add to the child array
                        this.childNameToSID[windowIdentifier.windowName] = stackedWindowIdentifier; // add mapping to parent stackedWindowIdentifier
                        FinsembleWindowInternal_1.FinsembleWindowInternal.getInstance(windowIdentifier, async (err, wrappedWindow) => {
                            //@todo failure point - no wrap callback.
                            this.childWindow[windowIdentifier.windowName] = wrappedWindow; // save the wrapper for quick use
                            // if stacked window doesn't have a visible window, then make this window being added the visible window
                            if (!thisStackRecord.visibleWindowIdentifier) {
                                let { err, data: bounds } = await wrappedWindow._getBounds();
                                // get the window bounds and save as the stackedWindow bounds
                                //@todo failure point - no bounds callback.
                                logger_1.default.system.debug("StackedWindowManager.addWindow got bounds", windowIdentifier, bounds);
                                this.mergeBounds(thisStackRecord, bounds);
                                thisStackRecord.bounds = bounds;
                                Object.assign(thisStackRecord, bounds);
                                this.setVisibleWindow({ stackedWindowIdentifier, windowIdentifier });
                                // if stacked window has a predefined visibleWindow and it matches the window being added, then set this window to the visible window
                            }
                            else if (thisStackRecord.visibleWindowIdentifier && thisStackRecord.visibleWindowIdentifier.windowName === windowIdentifier.windowName) {
                                this.setVisibleWindow({ stackedWindowIdentifier, windowIdentifier });
                                // if stacked window has a predefined visibleWindow and it does not match the window being added, then hide this window
                            }
                            else {
                                logger_1.default.system.debug("StackedWindowManager.addWindow hiding window", windowIdentifier);
                                // hide the window being added and set it bounds
                                wrappedWindow._hide({ invokedByParent: true }, () => {
                                    logger_1.default.system.debug("StackedWindowManager.addWindow setting bounds", windowIdentifier, thisStackRecord.bounds);
                                    wrappedWindow._setBounds({ bounds: thisStackRecord.bounds, invokedByParent: true });
                                });
                            }
                            if (!params.noRemove) { // if higher level (e.g. presentation components) isn't handling the previous state of the window
                                // handling the previous state of the window being added
                                let parentWindow = wrappedWindow.parentWindow;
                                if (parentWindow && parentWindow.name != thisStackRecord.name) {
                                    // if the window being added was already in a stackedWindow, remove it from that stacked window (the window is already unregistered with docking)
                                    logger_1.default.system.debug("StackedWindowManager.addWindow removing from previous parentWindow", parentWindow.identifier);
                                    await this.removeWindow({
                                        stackedWindowIdentifier: parentWindow.identifier,
                                        windowIdentifier: windowIdentifier,
                                        noDocking: true
                                    });
                                }
                                else {
                                    // else window is standalone and registered with docking, so deregister with docking (since only stacked window is registered)
                                    logger_1.default.system.debug("StackedWindowManager.addWindow deregistering from docking (case 1)", windowIdentifier);
                                    if (params.inheritGroups && params.newStack) {
                                        await this.registerWithDockingManager({ windowIdentifier: stackedWindowIdentifier });
                                        let groups = await this.getGroups(windowIdentifier);
                                        this.joinGroups(groups, stackedWindowIdentifier);
                                    }
                                    this.deregisterWithDockingManager({ windowIdentifier }); // docking manager manage the parentWindow stacked window (not the individual children)
                                }
                            }
                            if (!noSave) {
                                this.saveStore(stackedWindowIdentifier); // update the cache and the global store
                            }
                            // Notify interested listeners (e.g. BaseWindow wrappers for added window) that window was added to the stack
                            logger_1.default.system.debug("StackedWindowManager publish parent notification", windowIdentifier.windowName);
                            routerClientInstance_1.default.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, { type: "Added", stackedWindowIdentifier });
                            callback(err);
                            err ? reject(err) : resolve();
                        });
                    }
                    else {
                        err = "StackedWindowManager.addWindow: unknown stackedWindowIdentifier";
                        callback(err);
                        reject(err);
                    }
                }
            }); // subscription handle
        };
        return new Promise(promiseResolver);
    }
    triggerEvent(params, cb) {
        FinsembleWindowInternal_1.FinsembleWindowInternal.getInstance({ stackedWindowManager: this, name: params.windowIdentifier.windowName }, (err, wrap) => {
            wrap.eventManager.trigger(params.event);
            cb();
        });
    }
    /**
     * Closes and deletes a stacked window. If specified (see params) then children will be closed; otherwise children will be signals they are removed from the stacked window.
     *
     * @param {object} params Parameters
     * @param {object} params.stackedWindowIdentifier stacked window to operate on
     * @param {object=} params.closeChildren if true then also close all children
     * @param {object=} params.removeFromWorkspace if then remove stacked window and child windows from the workspace
     * @param {boolean=} params.waitChildClose if true then wait for child wrapper to close before returned (needed for cleanly switching workspaces)
     * @param {boolean=} params.noDocking if true then do not register removed window with docking (the workspace is unaffected)
     * @param {any} callback
     * @memberof StackedWindowManager
     */
    closeStackedWindow(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.closeStackedWindow", params.stackedWindowIdentifier.windowName, params);
        const promiseResolver = async (resolve) => {
            var { stackedWindowIdentifier, removeFromWorkspace, closeChildren } = params;
            if (!closeChildren && closeChildren !== false) {
                closeChildren = removeFromWorkspace;
            }
            //this.deregisterWithDockingManager({ windowIdentifier: stackedWindowIdentifier, removeFromWorkspace });
            this.removeWorkspaceListeners(stackedWindowIdentifier);
            var thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];
            await this.saveStore(stackedWindowIdentifier, { closing: true }); // save the latest state (bounds changes are too frequent to always save)
            logger_1.default.system.debug("StackedWindowManager.closeStackedWindow saveStore done", params.stackedWindowIdentifier.windowName);
            if (!thisStackRecord) {
                let err = "StackedWindowManager.closeStackedWindow: no stacked record";
                logger_1.default.system.error(err, params);
                resolve({ err });
                callback(err);
            }
            else {
                // clear the pubsub state for the stacked window -- must set to empty (to match LaucherClient check)
                routerClientInstance_1.default.publish("Finsemble." + stackedWindowIdentifier.windowName + ".componentReady", {});
                if (removeFromWorkspace) {
                    if (closeChildren) {
                        while (thisStackRecord.childWindowIdentifiers.length > 0) {
                            // the currently visible window is closed one at a time to support orderly close, which might require UI interaction
                            await this.deleteWindow({
                                noCloseStack: true, waitChildClose: params.waitChildClose, stackedWindowIdentifier,
                                windowIdentifier: thisStackRecord.visibleWindowIdentifier
                            });
                        }
                    }
                    else {
                        while (thisStackRecord.childWindowIdentifiers.length > 0) {
                            await this.removeWindow({
                                noCloseStack: true, waitChildClose: params.waitChildClose, stackedWindowIdentifier,
                                windowIdentifier: thisStackRecord.visibleWindowIdentifier
                            });
                        }
                    }
                    workspaceClient_1.default.removeWindow({ name: stackedWindowIdentifier.windowName }); // remove this stacked window from the workspace
                    this.deregisterWithDockingManager({ windowIdentifier: stackedWindowIdentifier, removeFromWorkspace });
                    delete this.storeCache[stackedWindowIdentifier.windowName]; // remove stacked window from cache
                    this.globalStore.removeValue({ field: stackedWindowIdentifier.windowName }); // remove stacked window from window global store
                    //this.triggerEvent({ event: "closed", windowIdentifier: stackedWindowIdentifier }, () => {
                    resolve();
                    callback();
                    //});
                }
                else {
                    // essentially shouldn't have to do anything but cleanup local state -- workspace is closing children individually
                    let visibleChildWrapper = this.childWindow[thisStackRecord.visibleWindowIdentifier.windowName];
                    this.removeChildEventListener(stackedWindowIdentifier.windowName, thisStackRecord.visibleWindowIdentifier.windowName, visibleChildWrapper);
                    delete this.storeCache[stackedWindowIdentifier.windowName]; // remove stacked window from cache
                    this.globalStore.removeValue({ field: stackedWindowIdentifier.windowName }); // remove stacked window from window global store
                    //this.triggerEvent({ event: "closed", windowIdentifier: stackedWindowIdentifier }, () => {
                    resolve();
                    callback();
                    //});
                }
            }
        };
        return new Promise(promiseResolver);
    }
    /**
     * Removes a child window from a stacked window.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.
     *
     * @param {object} params Parameters
     * @param {object} params.stackedWindowIdentifier stacked window to operate on
     * @param {object} params.windowIdentifier window to remove
     * @param {boolean=} params.noDocking if true then do not register removed window with docking (the workspace is unaffected)
     * @param {boolean=} params.waitChildClose if true then wait for child wrapper to close before returned (needed for cleanly switching workspaces)
     * @param {boolean=false} params.closeWindow
     * @param {boolean=false} params.noCloseStack  if true don't close the stack window when only one child
     * @param {function=} callback function(err)
     * @memberof StackedWindowManager
     * @returns promise
     * @private
     */
    removeWindow(params, callback = Function.prototype) {
        const promiseResolver = (resolve) => {
            var { noCloseStack, stackedWindowIdentifier, windowIdentifier, noDocking } = params;
            var thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];
            logger_1.default.system.debug("StackedWindowManager.removeWindow", params, thisStackRecord);
            var err = null;
            if (thisStackRecord) {
                thisStackRecord.childWindowIdentifiers = thisStackRecord.childWindowIdentifiers.filter(item => item.windowName !== windowIdentifier.windowName); // remove child window
                let childWrapper = this.childWindow[windowIdentifier.windowName];
                childWrapper.clearParent(); // remove parent setting from child being remove
                delete this.childNameToSID[windowIdentifier.windowName]; // remove child's mapping to parent stackedWindowIdentifier
                if (thisStackRecord.visibleWindowIdentifier && thisStackRecord.visibleWindowIdentifier.windowName === windowIdentifier.windowName) {
                    this.removeChildEventListener(thisStackRecord.identifier.windowName, windowIdentifier.windowName, childWrapper);
                    thisStackRecord.visibleWindowIdentifier = null;
                }
                if (!noDocking) { // unless specified otherwise, register the remove window with docking
                    logger_1.default.system.debug("StackedWindowManager.removeWindow registering with docking", stackedWindowIdentifier, windowIdentifier);
                    this.registerWithDockingManager({ windowIdentifier });
                }
                // go ahead and set visibility even if closing in order to finish this set of stackedWindow updates
                if (thisStackRecord.childWindowIdentifiers.length && !thisStackRecord.visibleWindowIdentifier) {
                    this.setVisibleWindow({ stackedWindowIdentifier, windowIdentifier: thisStackRecord.childWindowIdentifiers[0] }); // make the first window visible by default
                }
                this.saveStore(params.stackedWindowIdentifier);
                // Notify interested listeners (e.g. BaseWindow wrappers of the removed window) that window was removed from the stack
                logger_1.default.system.debug("StackedWindowManager remove parent notification", windowIdentifier.windowName);
                routerClientInstance_1.default.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, { type: "Removed", stackedWindowIdentifier });
                routerClientInstance_1.default.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, {});
                if (!noCloseStack && thisStackRecord.childWindowIdentifiers.length === 1) { // normally if no more child windows then unregister and close the stackedWindow
                    //@early-exit. If you uncomment this return statement, the callback will be invoked twice. That causes errors and looks bad
                    return routerClientInstance_1.default.query("DockingService.getGroupsForWindow", { name: thisStackRecord.name }, (err, response) => {
                        this.registerWithDockingManager({ windowIdentifier: thisStackRecord.childWindowIdentifiers[0] }, async () => {
                            let groups = response.data;
                            if (groups) {
                                for (let group of groups) {
                                    routerClientInstance_1.default.transmit("DockingService.joinGroup", {
                                        groupName: group,
                                        name: thisStackRecord.childWindowIdentifiers[0].windowName
                                    });
                                }
                            }
                            let childWrapper = this.childWindow[thisStackRecord.childWindowIdentifiers[0].windowName];
                            childWrapper._show({ invokedByParent: true });
                            let { wrap } = await FinsembleWindow_1.FinsembleWindow.getInstance(params.stackedWindowIdentifier);
                            // for now must call close on public wrapper to have wrapper cleanup happen correctly
                            wrap.close({ closeChildren: false, stackedWindowIdentifier, removeFromWorkspace: true, invokedByParent: true, force: false }, (err) => {
                                callback(err);
                                resolve({ err });
                            });
                        });
                    });
                }
            }
            else {
                err = "StackedWindowManager.removeWindow unknown stackedWindowIdentifier";
                logger_1.default.system.warn(err, params);
            }
            if (params.waitChildClose) {
                let subscribeID = routerClientInstance_1.default.subscribe("Finsemble." + params.windowIdentifier.windowName + ".wrapReady", (err, response) => {
                    if (!(response.data && response.data.name === params.windowIdentifier.windowName && response.data.state === "closed")) {
                        logger_1.default.system.debug("StackedWindowManager.removeWindow waiting", params.windowIdentifier.windowName);
                    }
                    else {
                        logger_1.default.system.debug("StackedWindowManager.removeWindow continuing", params.windowIdentifier.windowName);
                        routerClientInstance_1.default.unsubscribe(subscribeID);
                        callback(err);
                        resolve({ err });
                    }
                });
            }
            else {
                callback(err);
                resolve({ err });
            }
        };
        return new Promise(promiseResolver);
    }
    /**
     * Removes a window from the stack then closes it.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.
     *
     * @param {object} params Parameters
    .* @param {object} params.stackedWindowIdentifier stacked window to operate on
     * @param {object} params.windowIdentifier window to delete
     * @param {function=} callback function(err)
     * @memberof StackedWindowManager
     * @private
     */
    deleteWindow(params, callback = Function.prototype) {
        const promiseResolver = async (resolve) => {
            logger_1.default.system.debug("StackedWindowManager.deleteWindow", params);
            if (params.removeFromWorkspace === false) {
                callback();
                resolve();
            }
            else {
                params.noDocking = true;
                await this.removeWindow(params);
                let { wrap } = await FinsembleWindow_1.FinsembleWindow.getInstance(params.windowIdentifier);
                wrap.close({ invokedByParent: true, force: false }, (err) => {
                    callback(err);
                    resolve({ err });
                });
            }
        };
        return new Promise(promiseResolver);
    }
    /**
     * Sets the visible window within the stack.  The previously visible window in stack will be automatically hidden.
     *
     * @param {object} params Parameters
     * @param {object} params.stackedWindowIdentifier stacked window to operate on
     * @param {object} params.windowIdentifier
     * @param {object} params.force if force is true then reset vistible even if it is already marked as visible in store (this is for startup)
     * @todo the force param needs to handle the code below around previouslyVisibleWindow. In that case, the previouslyVisible window may exist, but the listeners may not have been added yet.
     * @param {function=} callback function(err)
     * @memberof StackedWindowManager
     * @private
     */
    setVisibleWindow(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.setVisibleWindow", params);
        var { force, stackedWindowIdentifier, windowIdentifier } = params;
        var thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];
        var err = null;
        if (thisStackRecord) {
            //if (force || !this.isShowing(params)) { // skip if window is already showing
            let previouslyVisibleWindow;
            if (thisStackRecord.visibleWindowIdentifier) { // if previous visisble window
                previouslyVisibleWindow = this.childWindow[thisStackRecord.visibleWindowIdentifier.windowName]; // will use below to hide previous after setting next
                if (previouslyVisibleWindow) {
                    this.removeChildEventListener(stackedWindowIdentifier.windowName, thisStackRecord.visibleWindowIdentifier.windowName, previouslyVisibleWindow);
                }
            }
            thisStackRecord.visibleWindowIdentifier = windowIdentifier;
            this.childWindow[windowIdentifier.windowName]._setBounds({ bounds: thisStackRecord.bounds, invokedByParent: true }); // set bounds on new visible window
            let childWrapper = this.childWindow[windowIdentifier.windowName];
            if (childWrapper.disableFrame)
                childWrapper.disableFrame();
            this.addChildEventListener(stackedWindowIdentifier.windowName, thisStackRecord.visibleWindowIdentifier.windowName, childWrapper);
            logger_1.default.system.debug("StackedWindowManager.setVisibleWindow showing", windowIdentifier, "Cache equality", this.childWindow[windowIdentifier.windowName] === window._FSBLCache.windows[windowIdentifier.windowName] ? "equal" : "not-equal");
            childWrapper._bringToFront({ invokedByParent: true }); // make sure the window is in front (use case: adding tab to window that isn't in front)
            childWrapper._show({ invokedByParent: true }, () => {
                childWrapper._focus({ invokedByParent: true });
                logger_1.default.system.debug("StackedWindowManager.setVisibleWindow shown", windowIdentifier);
                //Doing it this way so that the window in the back is visible when the one in the front hides. This reduces the flickering effect of switching tabs.
                if (previouslyVisibleWindow && previouslyVisibleWindow.windowName !== childWrapper.windowName) {
                    logger_1.default.system.debug("StackedWindowManager.setVisibleWindow hiding previous", previouslyVisibleWindow);
                    previouslyVisibleWindow._hide({ invokedByParent: true });
                }
            });
            this.saveStore(params.stackedWindowIdentifier);
            //} //else {
            //Logger.system.debug("StackedWindowManager.setVisibleWindow window already showing", params);
            //}
        }
        else {
            err = "StackedWindowManager.setVisibleWindow unknown stackedWindowIdentifier";
            logger_1.default.system.warn(err, params);
        }
        if (callback)
            callback(err);
    }
    // temporary code to workaround tabbing/tiling problem that reshows window when tabs are reordered
    hideInactiveChildren(thisStackRecord) {
        logger_1.default.system.debug("StackedWindowManager.hideInactiveChildren");
        thisStackRecord.childWindowIdentifiers.forEach(identifier => {
            // only rehide if not the the visible window
            if (thisStackRecord.visibleWindowIdentifier && identifier.windowName !== thisStackRecord.visibleWindowIdentifier.windowName) {
                let wrap = this.childWindow[identifier.windowName];
                wrap._hide({ invokedByParent: true });
            }
        });
    }
    /**
     * Reorders the stack, but odes not affect visibility
     *
     * @param {object} params Parameters
     * @param {object} params.stackedWindowIdentifier stacked window to operate on
     * @param {array} params.windowIdentifiers array of windowIdentifiers which provides the new order
     * @param {function=} callback function(err)
     * @memberof StackedWindowManager
     * @private
     */
    reorder(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.reorder", params);
        var { stackedWindowIdentifier, windowIdentifiers } = params;
        // TBD: verify list of identifiers are the same and if not generate error
        var thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];
        var err = null;
        if (thisStackRecord) {
            thisStackRecord.childWindowIdentifiers = windowIdentifiers;
            this.hideInactiveChildren(thisStackRecord); // this is to sidestep a bug in docking/tiling that reshows a moved tab
            this.saveStore(stackedWindowIdentifier);
        }
        else {
            err = "StackedWindowManager.reorder unknown stackedWindowIdentifier";
            logger_1.default.system.warn(err, params);
        }
        if (callback)
            callback(err);
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // The next section of functions support stacked-window primitives throughout the system.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // stacked window minimize (invoked remotely through stacked window wrapper)
    minimize(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.minimize", params);
        // if operating on StackedWindow then operation should apply to the visible window
        if (this.operatingDirectlyOnStackedWindow(params)) {
            var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
            if (thisStackRecord) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            else {
                logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
                return callback("undefined window");
            }
        }
        if (this.isShowing(params)) {
            var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
            params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
            visibleWindow._minimize(params); // invoke function on active window's wrapper
        }
        else {
            logger_1.default.system.error(`StackedWindowManager Warning: minimize received for hidden window ${params.windowIdentifier.windowName}`);
        }
        callback(null);
    }
    // stacked window maximize (invoked remotely trhough stacked window wrapper)
    maximize(params, callback = Function.prototype) {
        var self = this;
        logger_1.default.system.debug("StackedWindowManager.maximize", params);
        // if operating on StackedWindow then operation should apply to the visible window
        if (this.operatingDirectlyOnStackedWindow(params)) {
            var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
            if (thisStackRecord) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            else {
                logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
                return callback("undefined window");
            }
        }
        if (this.isShowing(params)) {
            var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
            var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
            params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
            var self = this;
            routerClientInstance_1.default.query("DockingService.maximizeWindow", {
                name: thisStackRecord.name,
                windowIdentifier: params.stackedWindowIdentifier
            }, function (err, response) {
                thisStackRecord.childWindowIdentifiers.map((childIdentifier) => {
                    let childWindow = self.childWindow[childIdentifier.windowName];
                    if (childWindow && childWindow.windowState !== constants.WINDOWSTATE.MAXIMIZED) {
                        childWindow.saveWindowState(constants.WINDOWSTATE.MAXIMIZED);
                        childWindow.eventManager.trigger("maximized");
                    }
                });
                callback(null);
            });
            // invoke function on active window's wrapper
        }
        else {
            callback(null);
            logger_1.default.system.error(`StackedWindowManager Warning: maximize received for hidden window ${params.windowIdentifier.windowName}`);
        }
    }
    // stacked window restore (invoked remotely through stacked window wrapper)
    restore(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.restore", params);
        var err = null;
        var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
        if (thisStackRecord) {
            // if operating on StackedWindow then operation should apply to the visible window
            if (this.operatingDirectlyOnStackedWindow(params)) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            // regarding "true" below.  For now don't check isShowing. Currently multi-window functions (like bringWindowsToFront) operates off all windows causes errors to be logged (not just visbile windows).
            if (true) {
                var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
                params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
                var self = this;
                FinsembleWindowInternal_1.FinsembleWindowInternal.getInstance({ stackedWindowManager: this, name: thisStackRecord.name }, (err, wrappedWindow) => {
                    if (visibleWindow.windowState === BaseWindow_1.BaseWindow.WINDOWSTATE.MINIMIZED) {
                        params.checkMinimize = false;
                        visibleWindow._restore(params, callback);
                    }
                    else if (visibleWindow.windowState === BaseWindow_1.BaseWindow.WINDOWSTATE.MAXIMIZED) {
                        routerClientInstance_1.default.query("DockingService.restoreFromMaximize", {
                            name: thisStackRecord.name,
                            windowIdentifier: params.stackedWindowIdentifier
                        }, function (err, response) {
                            thisStackRecord.childWindowIdentifiers.map((childIdentifier) => {
                                let childWindow = self.childWindow[childIdentifier.windowName];
                                if (childWindow) {
                                    childWindow.saveWindowState(constants.WINDOWSTATE.NORMAL);
                                    childWindow.eventManager.trigger("restored");
                                }
                            });
                            callback(err);
                        });
                    }
                });
            }
            else {
                logger_1.default.system.error(`StackedWindowManager Warning: restore received for hidden window ${params.windowIdentifier.windowName}`);
            }
        }
        else { // else must be an outdated request from a closed stacked window
            logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
            err = "undefined window";
        }
        callback(err);
    }
    // stacked window focus (invoked remotely through stacked window wrapper)
    focus(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.focus", params);
        // if operating on StackedWindow then operation should apply to the visible window
        if (this.operatingDirectlyOnStackedWindow(params)) {
            var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
            if (thisStackRecord) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            else {
                logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
                return callback("undefined window");
            }
        }
        if (this.isShowing(params)) {
            var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
            params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
            visibleWindow._focus(params); // invoke function on active window's wrapper
        }
        else {
            logger_1.default.system.error(`StackedWindowManager Warning: focus received for hidden window ${params.windowIdentifier.windowName}`);
        }
        callback(null);
    }
    // stacked window bringToFront (invoked remotely through stacked window wrapper)
    bringToFront(params, callback = Function.prototype) {
        params = params || {};
        logger_1.default.system.debug("StackedWindowManager.bringToFront", params);
        // if operating on StackedWindow then operation should apply to the visible window
        if (this.operatingDirectlyOnStackedWindow(params)) {
            var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
            if (thisStackRecord) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            else {
                logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
                return callback("undefined window");
            }
        }
        if (this.isShowing(params)) {
            var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
            params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
            visibleWindow._bringToFront(params); // invoke function on active window's wrapper
        }
        else {
            logger_1.default.system.error(`StackedWindowManager Warning: bringToFront received for hidden window ${params.windowIdentifier.windowName}`);
        }
        callback(null);
    }
    saveWindowStateToStore(params, callback = Function.prototype) {
        this.saveStore(params.stackedWindowIdentifier, callback);
    }
    mergeBounds(stackRecord, bounds) {
        bounds.right = bounds.left + bounds.width;
        let newBounds = { left: bounds.left, right: bounds.right, width: bounds.width, top: bounds.top, bottom: bounds.top + bounds.height, height: bounds.height };
        let defaultBounds = { defaultLeft: bounds.left, defaultWidth: bounds.width, defaultTop: bounds.top, defaultHeight: bounds.height };
        Object.assign(stackRecord, newBounds);
        Object.assign(stackRecord, defaultBounds);
        stackRecord.bounds = newBounds;
    }
    // stacked window setBounds (invoked remotely through stacked window wrapper)
    setBounds(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.setBounds", params);
        var err = null;
        var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
        if (!thisStackRecord) {
            logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
            err = "undefined window";
        }
        else {
            // if operating on StackedWindow then operation should apply to the visible window
            if (this.operatingDirectlyOnStackedWindow(params)) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            if (this.isShowing(params)) {
                var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
                this.mergeBounds(thisStackRecord, params.bounds);
                params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
                visibleWindow._setBounds(params); // invoke function on active window's wrapper
            }
            else if (params.windowIdentifier) {
                logger_1.default.system.error(`StackedWindowManager Warning: setBounds received for hidden window ${params.windowIdentifier}`);
            }
        }
        callback(err);
    }
    // stacked window getBounds (invoked remotely through stacked window wrapper)
    getBounds(params, callback = Function.prototype) {
        params = params || {};
        logger_1.default.system.debug("StackedWindowManager.getBounds", params);
        // if operating on StackedWindow then operation should apply to the visible window
        if (this.operatingDirectlyOnStackedWindow(params)) {
            var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
            if (thisStackRecord) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
                logger_1.default.system.debug("StackedWindowManager.getBounds", params, thisStackRecord);
            }
            else {
                logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
                return callback("undefined window");
            }
        }
        if (thisStackRecord.bounds) {
            callback(null, thisStackRecord.bounds);
        }
        else if (!thisStackRecord.visibleWindowIdentifier) { // since no visible window use empty bounds; this is to handle an intermittant error that sometimes occurred when creating a stack
            let emptyBounds = { left: 0, right: 0, width: 10, top: 0, bottom: 0, height: 10 };
            callback(null, emptyBounds);
        }
        else if (this.isShowing(params)) {
            var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
            if (!visibleWindow) {
                let err = `stackedWindowManager: cannot find child window ${params.windowIdentifier.windowName}`;
                logger_1.default.system.error(err);
                callback(err);
                return;
            }
            params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
            visibleWindow._getBounds(params, (err, bounds) => {
                if (err) {
                    bounds = this.storeCache[params.stackedWindowIdentifier.windowName].bounds;
                }
                callback(err, bounds);
            });
        }
        else if (!this.operatingDirectlyOnStackedWindow(params)) {
            logger_1.default.system.error(`StackedWindowManager Warning: getBounds received for hidden window ${params.windowIdentifier.windowName}`);
            callback("getbounds on hidden window");
        }
        else if (thisStackRecord && thisStackRecord.bounds) {
            callback(null, thisStackRecord.bounds);
        }
        else {
            callback("something went wrong");
        }
    }
    // stacked window updateOptions (invoked remotely through stacked window wrapper)
    updateOptions(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.updateOptions", params);
        var err = null;
        // TABBING TBD: put in a getter function for the stacked records to provide common error checking.  Docking might invoke for non-existent stacked window
        var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
        if (thisStackRecord) {
            // if operating on StackedWindow then operation should apply to the visible window
            if (this.operatingDirectlyOnStackedWindow(params)) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            if (this.isShowing(params)) {
                var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
                params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
                visibleWindow._updateOptions(params); // invoke function on active window's wrapper
                // if (visibleWindow) { // update options is invoked during docking registeration while stacked window is being created, so may not have visisble window
                // 	visibleWindow._updateOptions(params); // invoke function on active window's wrapper
                // }
            }
            else {
                logger_1.default.system.error(`StackedWindowManager.updateOptions Warning: updateOptions received for hidden window ${params.windowIdentifier.windowName}`);
            }
        }
        else { // else must be an outdated request from a closed stacked window
            logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
            err = "undefined window";
        }
        callback(err);
    }
    // stacked window hide (invoked remotely through stacked window wrapper)
    hide(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.hide", params);
        // if operating on StackedWindow then operation should apply to the visible window
        if (this.operatingDirectlyOnStackedWindow(params)) {
            var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
            if (thisStackRecord) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            else {
                logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
                return callback("undefined window");
            }
        }
        if (this.isShowing(params)) {
            var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
            params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
            visibleWindow._hide(params); // invoke function on active window's wrapper
        }
        else {
            logger_1.default.system.error(`StackedWindowManager Warning: hide received for hidden window ${params.windowIdentifier.windowName}`);
        }
        callback(null);
    }
    // stacked window show (invoked remotely through stacked window wrapper)
    show(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.show", params);
        // if operating on StackedWindow then operation should apply to the visible window
        if (this.operatingDirectlyOnStackedWindow(params)) {
            var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
            if (thisStackRecord) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            else {
                logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
                return callback("undefined window");
            }
        }
        if (this.isShowing(params)) {
            var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
            params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
            visibleWindow._show(params); // invoke function on active window's wrapper
        }
        else {
            logger_1.default.system.error(`StackedWindowManager Warning: show received for hidden window ${params.windowIdentifier.windowName}`);
        }
        callback(null);
    }
    // this stacked window close applies to an individual child window (see closeStackedWindow for closing the complete stackedWindow)
    close(params, callback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.close", params);
        // if operating on StackedWindow then operation should apply to the visible window
        if (params.removeFromWorkspace || this.operatingDirectlyOnStackedWindow(params)) {
            this.closeStackedWindow(params, callback);
        }
        else {
            this.deleteWindow(params, callback);
        }
    }
    // stacked window alwaysOnTop (invoked remotely through stacked window wrapper)
    alwaysOnTop(params, callback) {
        logger_1.default.system.debug("StackedWindowManager.alwaysOnTop", params);
        // if operating on StackedWindow then operation should apply to the visible window
        if (this.operatingDirectlyOnStackedWindow(params)) {
            var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
            if (thisStackRecord) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            else {
                logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
                return callback("undefined window");
            }
        }
        if (this.isShowing(params)) {
            var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
            params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
            if (visibleWindow._alwaysOnTop) {
                visibleWindow._alwaysOnTop(params); // invoke function on active window's wrapper
            }
        }
        else {
            logger_1.default.system.error(`StackedWindowManager Warning: alwaysOnTop received for hidden window ${params.windowIdentifier.windowName}`);
        }
        callback(null);
    }
    // stacked window setOpacity (invoked remotely through stacked window wrapper)
    setOpacity(params, callback = Function.prototype) {
        var err = null;
        logger_1.default.system.debug("StackedWindowManager.setOpacity", params);
        var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
        if (thisStackRecord) {
            // if operating on StackedWindow then operation should apply to the visible window
            if (this.operatingDirectlyOnStackedWindow(params)) {
                if (!thisStackRecord.visibleWindowIdentifier)
                    return; //there's no window to set opacity on.
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            if (this.isShowing(params)) {
                var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
                params.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)
                visibleWindow._setOpacity(params); // invoke function on active window's wrapper
            }
            else {
                logger_1.default.system.error(`StackedWindowManager Warning: setOpacity received for hidden window ${params.windowIdentifier.windowName}`);
            }
        }
        else {
            logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
            err = "undefined window";
        }
        callback(err);
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // General functions support workspace and docking
    // TABBING TBD: NEED GENERAL PARAMETERIZED VERSIONS OF THE FUNCTIONS BELOW PULLED OUT OF THE WINDOW CLIENT AND PUT IN COMMON TO SHARE
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // placehold for workspace integration
    saveWindowOptions(params, stackedWindow, maincallback = Function.prototype) {
        logger_1.default.system.debug("StackedWindowManager.setComponentState", stackedWindow.identifier);
        let descriptor = {};
        // Only save required items to cache instead of saving everything.
        let thingsToInclude = ["name", "windowName", "childWindowIdentifiers", "top", "left", "height", "width", "bottom", "right", "windowType", "visibleWindowIdentifier", "customData", "bounds"];
        for (let k of Object.keys(stackedWindow)) {
            //Don't save any function, private thing, or the visible window (which is a wrapped window object)
            if (thingsToInclude.includes(k)) {
                descriptor[k] = stackedWindow[k];
            }
        }
        let thisStackRecord = this.storeCache[stackedWindow.identifier.windowName];
        if (!thisStackRecord)
            return maincallback("stack record not found");
        for (let k of Object.keys(thisStackRecord)) {
            if (thingsToInclude.includes(k)) {
                descriptor[k] = thisStackRecord[k];
            }
        }
        stackedWindow.saveCompleteWindowState(descriptor, () => {
            var saveChildBounds = (childIdentifier, done) => {
                logger_1.default.system.debug("StackedWindowManager.saveWindowOptions saveCompleteWindowState child", childIdentifier.windowName);
                let bounds = thisStackRecord.bounds;
                bounds.persistBounds = true;
                let wrap = this.childWindow[childIdentifier.windowName];
                if (wrap) {
                    wrap._setBounds({ bounds, invokedByParent: true }, done);
                }
                else {
                    FinsembleWindowInternal_1.FinsembleWindowInternal.getInstance({ name: childIdentifier.windowName }, (err, wrappedWindow) => {
                        wrappedWindow._setBounds({ bounds, invokedByParent: true }, done);
                    });
                }
            };
            logger_1.default.system.debug("StackedWindowManager.saveWindowOptions saveCompleteWindowState start", stackedWindow.identifier.windowName, descriptor);
            if (!params.closing) {
                async_1.each(thisStackRecord.childWindowIdentifiers, saveChildBounds, () => {
                    logger_1.default.system.debug("StackedWindowManager.saveWindowOptions saveCompleteWindowState done");
                    maincallback();
                });
            }
            else {
                logger_1.default.system.debug("StackedWindowManager.saveWindowOptions saveCompleteWindowState skipped");
                maincallback();
            }
        });
    }
    /**
     * It adds listeners for workspace 'close' (when the workspace is switched), 'bringToFront', 'restore', and 'move' (used in AutoArrange).
     */
    addWorkspaceListeners(stackedWindowIdentifier) {
        logger_1.default.system.debug("StackedWindowManager.addWorkspaceListeners", stackedWindowIdentifier);
        var subscribeID; // must be saved to unsubsribed later
        var listenerFunction; // must be saved to remove listener later
        // pubsub ensures close command can't be loss in a race condition (e.g. if close is issued while the destinateion window was reloading)
        //subscribeID = RouterClient.subscribe(`WorkspaceService.${stackedWindowIdentifier.windowName}`, (err, response) => {
        // Logger.system.debug("StackedWindowManager Workspace incoming notification", `WorkspaceService.${stackedWindowIdentifier.windowName}`, response.data);
        // if (response.data.state === "start") {
        // 	// do nothing since normal startup
        // } else if (response.data.state === "close") {
        // 	// since going to close, reset this pubsub state back to default state (otherwise would keep closing);
        // 	// note may not see local log of this outgoing publish because window is closing (but publish will go out before close)
        // 	RouterClient.publish(`WorkspaceService.${stackedWindowIdentifier.windowName}`, { "state": "start" });
        // 	this.closeStackedWindow({ stackedWindowIdentifier, removeFromWorkspace: false }); // close the stacked window
        // } else {
        // 	Logger.system.warn("StackedWindowManager incoming notify has unknown state", stackedWindowIdentifier.windowName, response.data);
        // }
        //});
        routerClientInstance_1.default.addListener(`WorkspaceService.${stackedWindowIdentifier.windowName}`, listenerFunction = (err, response) => {
            logger_1.default.system.debug("StackedWindowManager Workspace incoming transmit", `WorkspaceService.${stackedWindowIdentifier.windowName}`, response.data);
            var thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];
            var visibleWindowWrapper = this.childWindow[thisStackRecord.visibleWindowIdentifier.windowName];
            switch (response.data.command) {
                case "bringToFront":
                    visibleWindowWrapper.bringToFront();
                    break;
                case "restore":
                    visibleWindowWrapper.restore();
                    break;
                case "move":
                    visibleWindowWrapper.animate({
                        transition: {
                            position: {
                                left: response.data.left,
                                top: response.data.top,
                                duration: 250
                            }
                        }, options: {}
                    }, function (err) {
                        if (err) {
                            logger_1.default.system.error("StackedWindowManager:WorkspaceService: Animate failed: " + err);
                        }
                        else {
                            routerClientInstance_1.default.transmit("DockingService.updateWindowPositions", {});
                            logger_1.default.system.debug("StackedWindowManager:WorkspaceService successfully moved window.");
                        }
                    });
                    break;
            }
        });
        this.stackedWindowListeners[stackedWindowIdentifier.windowName] = { subscribeID, listenerFunction };
    }
    removeWorkspaceListeners(stackedWindowIdentifier) {
        logger_1.default.system.debug("StackedWindowManager.removeWorkspaceListeners", stackedWindowIdentifier);
        var stackedWindowListeners = this.stackedWindowListeners[stackedWindowIdentifier.windowName]; // these handles save with listeners added above
        if (stackedWindowListeners) {
            //RouterClient.unsubscribe(stackedWindowListeners.subscribeID);
            routerClientInstance_1.default.removeListener("WorkspaceService." + stackedWindowIdentifier.windowName, stackedWindowListeners.listenerFunction);
            delete this.stackedWindowListeners[stackedWindowIdentifier.windowName];
        }
        else {
            logger_1.default.system.debug(`StackedWindowManager.removeWorkspaceListeners. No workspace listeners found for ${stackedWindowIdentifier.windowName}`);
        }
    }
    /**
     * Register a window with docking. It transmits a message to the LauncherService, which registers it as a dockable window.
     *
     * @param {object} params Parameters
     * @param {string} params.windowIdentifier the window to register (may be stacked window or child window)
     * @private
     */
    registerWithDockingManager(params, cb = Function.prototype) {
        const promiseResolver = (resolve) => {
            logger_1.default.system.debug("StackedWindowManager.registerWithDockingManager", params);
            var windowName = params.windowIdentifier.windowName;
            params.windowIdentifier.name = windowName;
            // var thisStackRecord = this.storeCache[windowName];
            // var bounds = thisStackRecord.bounds;
            routerClientInstance_1.default.query("DockingService.registerWindow", Object.assign(params.windowIdentifier, params.windowType), function () {
                logger_1.default.system.debug("StackedWindowManager Docking Registration complete.", params);
                resolve();
                if (cb) {
                    cb();
                }
            });
        };
        return new Promise(promiseResolver);
    }
    /**
     * Unregister a window with docking.
     *
     * @param {object} params Parameters
     * @param {boolean} params.removeFromWorkspace true to remove from workspace
     * @param {string} params.windowIdentifier window to unregister
     * @private
     */
    deregisterWithDockingManager(params) {
        logger_1.default.system.debug("StackedWindowManager.deregisterWithDockingManager", params);
        routerClientInstance_1.default.transmit("DockingService.deregisterWindow", {
            name: params.windowIdentifier.windowName,
            userInitiated: params.removeFromWorkspace
        });
    }
    startMove(params, callback = Function.prototype) {
        // stacked window setBounds (invoked remotely through stacked window wrapper)
        logger_1.default.system.debug("StackedWindowManager.startMove", params);
        var err = null;
        var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
        if (!thisStackRecord) {
            logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
            err = "undefined window";
        }
        else {
            // if operating on StackedWindow then operation should apply to the visible window
            if (this.operatingDirectlyOnStackedWindow(params)) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            if (this.isShowing(params)) {
                var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
                visibleWindow.startMove(); // invoke function on active window's wrapper
            }
            else {
                logger_1.default.system.error(`StackedWindowManager Warning: startMove received for hidden window ${params.windowIdentifier}`);
            }
        }
        callback(err);
    }
    stopMove(params, callback = Function.prototype) {
        // stacked window setBounds (invoked remotely through stacked window wrapper)
        logger_1.default.system.debug("StackedWindowManager.stopMove", params);
        var err = null;
        var thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];
        if (!thisStackRecord) {
            logger_1.default.system.warn("ignoring command because StackedWindow undefined (probably okay due to its recent close)", params);
            err = "undefined window";
        }
        else {
            // if operating on StackedWindow then operation should apply to the visible window
            if (this.operatingDirectlyOnStackedWindow(params)) {
                params.windowIdentifier = thisStackRecord.visibleWindowIdentifier;
            }
            if (this.isShowing(params)) {
                var visibleWindow = this.childWindow[params.windowIdentifier.windowName];
                visibleWindow.stopMove(); // invoke function on active window's wrapper
            }
            else {
                logger_1.default.system.error(`StackedWindowManager Warning: stopMove received for hidden window ${params.windowIdentifier}`);
            }
        }
        callback(err);
    }
}
var serviceInstance = new StackedWindowManager({});
exports.default = serviceInstance;


/***/ }),
/* 172 */,
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        return copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (!isArr) {
    var props = isFull ? getAllKeys(value) : keys(value);
  }
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  });
  return result;
}

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var result = new buffer.constructor(buffer.length);
  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, false, true);
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = clone;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(15)(module)))

/***/ }),
/* 174 */,
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array ? array.length : 0;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Checks if a cache value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values ? values.length : 0;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order of result values is determined by the
 * order they occur in the first array.
 *
 * **Note:** Unlike `_.pullAll`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.without, _.xor
 * @example
 *
 * _.difference([2, 1], [2, 3]);
 * // => [1]
 */
var difference = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
    : [];
});

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

module.exports = difference;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.10';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    return key == '__proto__'
      ? undefined
      : object[key];
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(15)(module)))

/***/ }),
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_dependencyManager__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_dependencyManager___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__common_dependencyManager__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_util__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_async__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_async___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_async__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__dockingCalculator__ = __webpack_require__(119);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__ = __webpack_require__(105);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__MultiWindowFeatures_autoArrange__ = __webpack_require__(213);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_system__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_system___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__common_system__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__dockableWindow__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__boxMath__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__clients_launcherClient__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__clients_launcherClient___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__clients_launcherClient__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__clients_configClient__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__clients_configClient___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11__clients_configClient__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__common_constants__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__common_constants___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13__common_constants__);
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// replace with import when ready
window.methodCalls = {};











__WEBPACK_IMPORTED_MODULE_10__clients_launcherClient___default.a.initialize();

__WEBPACK_IMPORTED_MODULE_11__clients_configClient___default.a.initialize();

__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.start();
var DockingMain_AUTO_ARRANGE_CHANNEL = "DockingService.AutoarrangeStatus";
var serviceConfig = {};
var groupData = {};

const APPLICATION_STATE_CHANNEL = __WEBPACK_IMPORTED_MODULE_13__common_constants__["APPLICATION_STATE_CHANNEL"];
//Paste this into a toolbar's console.
// [1,2,3,4,5].forEach(num => FSBL.Clients.LauncherClient.spawn("Welcome Component", {name: "window" + num, addToWorkspace: true}))

//const merge = require("deepmerge");
const clone = function (obj) {
	//This has been tested a good amount. Previous to this commit we were using a mix of deepmerge and JSON.parse(JSON.stringify()).
	//Trying lodash.deepclone made my tests take 2-3s.
	//JSON.parse everywhere made them take ~ 1s.
	//Using JSON.parse on arrays and deep merge on objects makes them take 7-900ms.
	if (Array.isArray(obj)) {
		return obj.slice();
	}
	try {
		return JSON.parse(JSON.stringify(obj));
	} catch (e) {
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.error("clone error", e);
		return e;
	}
};
let CALCULATOR = {};
/**
 * The docking Service is great.
 * @constructor
 */

class DockingMain extends __WEBPACK_IMPORTED_MODULE_4__dockingCalculator__["a" /* default */] {
	/** @alias DockingMain# */

	constructor(params, dependencies) {
		/**
   * @param {object} params Config
   * @param {object} dependencies Dependency object that provides the System, and Logger.
   * @param {System} dependencies.System
   * @param {Logger} dependencies.Logger
   */
		super(params, dependencies);

		//We're doing this for hole-filling. need to remove the window so that while we're resizing windows, they're unphased by the windows that are resizing.
		CALCULATOR.addWindow = super.addWindow.bind(this);
		CALCULATOR.removeWindow = super.removeWindow.bind(this);
		CALCULATOR.getBoundsOfGroupWindows = super.getBoundsOfGroupWindows.bind(this);
		CALCULATOR.cleanupSharedEdges = super.cleanupSharedEdges.bind(this);
		this.AutoArrange = new __WEBPACK_IMPORTED_MODULE_6__MultiWindowFeatures_autoArrange__["a" /* default */]({
			DockingCalculator: this
		});
		//for reverting autoarrange
		this.cachedPositions = {};
		this.registrationPending = {}; // map of registrations that are pending, indexed by window name
		this.deregistrationPending = {}; // map of deregistrations that are pending, indexed by window name

		//For disabling tabbing or tiling
		this.tabbingEnabled = typeof params.tabbingEnabled !== undefined ? params.tabbingEnabled : false;
		this.tilingEnabled = typeof params.tilingEnabled !== undefined ? params.tilingEnabled : false;
		//Default height and width for a dockableComponent. This comes from the main config with
		//docking options. These defaults are different from launchers defaults for a given window
		this.defaultHeight = params.defaultHeight;
		this.defaultWidth = params.defaultWidth;

		this.bindAllFunctions();
		this.activeWorkspace = { name: "" };
	}

	bindAllFunctions() {
		let self = this;
		for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {
			if (self[name] instanceof Function) {
				self[name] = self[name].bind(self); // only bind function properties
			}
		}
	}

	windowServiceChannelName(channelTopic) {
		return `WindowService-Request-${channelTopic}`;
	}

	/**
  * Function that sets wether tabbing or tiling is disabled for this instance of DockingMain
  *
  * @param {object} serviceConfig The service config
  */
	setTilingOrTabbingEnabled(serviceConfig) {
		let tabbing = true,
		    tiling = true;

		if (serviceConfig.hasOwnProperty("tabbing") && serviceConfig.tabbing.hasOwnProperty("enabled")) {
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Setting tabbing prop based on config state: " + serviceConfig.tabbing.enabled);
			tabbing = serviceConfig.tabbing.enabled;
		}

		if (serviceConfig.hasOwnProperty("tiling") && serviceConfig.tiling.hasOwnProperty("enabled")) {
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Setting tiling prop based on config state: " + serviceConfig.tiling.enabled);
			tiling = serviceConfig.tiling.enabled;
		}

		this.tabbingEnabled = tabbing;
		this.tilingEnabled = tiling;
	}

	/**
  * Function that runs after a window has completed a move action
  *
  * @param {object} win The window object
  * @param {boolean} triggeredByAutoArrange Whether or not the move was triggered by an auto arrange
  */
	onMoveComplete(win, triggeredByAutoArrange) {
		let { monitor } = win;

		if (!triggeredByAutoArrange && this.cachedPositions[monitor.name] && this.cachedPositions[monitor.name][win.name]) {
			delete this.cachedPositions[monitor.name][win.name];
		}

		this.tellWindowsToSaveLocation();
		this.updateGroupData();
		//Logger.system.debug("Publishing Group Update: OnMoveComplete");
		//this.publishGroupUpdate();
		if (!triggeredByAutoArrange && this.AutoArrange.isArranged[monitor.name]) {
			this.AutoArrange.isArranged[monitor.name] = false;
			this.cachedPositions[monitor.name] = {};
			// this.revertArrangedWindows(monitor);
			this.sendAutoArrangeStatusUpdate();
		}
	}

	updateGroupData() {
		this._updateGroupData();
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Publishing Group Update: DockingCalc.updateGroupData");
		this.publishGroupUpdate();
	}

	/**
  * move the specific window out of claimed space, considering all the dockable window across all monitors
  *
  * @param {object} windowName the window to move
  */
	moveOutOfClaimedSpace(windowName) {
		var dockableWindows = [];

		let serviceMonitors = this.getMonitors(); //All the monitors the docking service is tracking
		let monitors = Object.keys(serviceMonitors).map(mon => {
			return serviceMonitors[mon];
		}); //convert object to array

		for (let windowName of this.getWindowNames()) {
			let dockableWin = this.getWindow(windowName);
			if (dockableWin && dockableWin.isDockableComponent) {
				dockableWindows.push(dockableWin);
			}
		}

		// by definition claimed space it what's occupied by the dockable windows (when they are docked) so invoke for each dockable window
		for (let dockableWin of dockableWindows) {
			this.moveWindowOutOfClaimedSpace(dockableWin, monitors, windowName);
		}
	}

	/**
  * Handler for incoming docking deregistration request for specified window.
  * Invoked both by RouterClient.addListener("DockingService.registerWindow") and RouterClient.addListener("DockingService.deregisterWindow").
  * @private
  */
	deregisterWindow(self, err, response) {
		const windowName = response.data.name;

		// if a registration pending for window, then can't deregister yet, so save deregister request here and process it when registration is complete
		if (self.registrationPending[windowName]) {
			let deregisterArgs = { err, response }; // save original args to use when later deregistering
			self.deregistrationPending[windowName] = deregisterArgs;
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.info("deregisterWindow: creating pending deregistration", windowName);
		} else {
			// no registration pending so continue with deregistration
			let registeredWindows = self.getWindowNames();
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.info("Trying to deregisterWindow", windowName);
			if (!registeredWindows.includes(windowName)) {
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Window tried to deregister, but never registed", windowName);
				return;
			}
			let win = self.getWindow(windowName);
			let bounds = win.getBounds();
			const movableGroup = self.getMovableGroup(windowName);
			const immobileGroup = self.getImmobileGroup(windowName);
			const fillHoleInGroup = self.shouldFillHolesInGroups(movableGroup);

			self.removeWindowFromAllGroups(win);
			self.wipeSnapRelationships(windowName);
			self.removeWindow(windowName);
			if (movableGroup && fillHoleInGroup) {
				movableGroup.fillHole(bounds);
				self.cleanupGroupGaps(movableGroup);
				self.buildSnapRelationshipsForGroup(movableGroup);
			} else {
				[movableGroup, immobileGroup].forEach(grp => {
					if (grp) {
						self.fixGroupMembership(grp);
					}
				});
			}
			if (immobileGroup) {
				immobileGroup.updateBounds();
			}
			//will handle any group updates that need to be sent.
			if (self.onMoveComplete && response.data.userInitiated === true) {
				self.onMoveComplete(win);
			}

			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.info("deregisterWindow: complete", windowName);
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking: Registered Windows", Object.keys(self.getWindows()));
		}
	}

	/**
  *  Helper function that determines whether a group should fill holes left by windows that leave it.
  * @params {dockableGroup} grp The group for which to fill holes (or not).
  */
	shouldFillHolesInGroups(grp) {
		let fillHoleInGroup = this.groupMode.fillHolesOnUndock;
		if (fillHoleInGroup) {
			fillHoleInGroup = grp && grp.isARectangle();
		}
		return fillHoleInGroup;
	}
	/**
  * When a window no longer delegates its movement to us (it closes or unregisters for some reason), we need to make sure we don't leave strange, disconnected groups out there.
  * If you imagine [A][B][C], and B is closed, this code will make sure that A & C don't remain grouped.
  * @param {*} grp
  */
	fixGroupMembership(grp) {
		this.buildSnapRelationshipsForGroup(grp);
		let windowsThatWereInGroup = grp.getWindowNames();
		let wasMovable = grp.isMovable;
		this.removeGroup(grp.name);
		windowsThatWereInGroup.forEach(name => {
			this.formGroup(name, { isMovable: wasMovable, whitelist: windowsThatWereInGroup });
		});
		// let allWindowsStiilInGroup = windowsThatWereInGroup.every(windowName => windowsStillInGroup.includes(windowName));
		// if (!windowsStillInGroup.length || !allWindowsStiilInGroup) {
		// 	this.removeWindowFromGroup(win.name, grp.name);
		// }
	}

	//If a window closes uncleanly, we will clean up docking.
	onWindowClosed(err, response) {
		this.deregisterWindow(this, null, response);
		this.updateGroupData();
	}
	/**
  * Creates router endpoints for all of our client APIs. Add servers or listeners for requests coming from your clients.
  * @private
  */
	createRouterEndpoints() {
		var self = this;
		this.dockableWindows = {};
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.subscribe("Finsemble.WorkspaceService.update", function (err, response) {
			if (response.data.reason === "workspace:load:dataRetrieved" || response.data.reason === "workspace:load:finished" || response.data.reason === "rename") {
				self.handleWorkspaceUpdate(err, response);
			}
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.showAtMousePosition", (err, response) => {
			let windowIdentifier = response.data;
			let win = self.getWindow(windowIdentifier.windowName);
			fin.desktop.System.getMousePosition(position => {
				//Here we generate a fake event to move the window where we want it to go. This will cause docking to go through its typical event loop, undock the window, and everything else the user expects.
				let bounds = win.getBounds();

				if (!win.isDocked) {
					bounds.top = position.top - bounds.height + 10;
					//center the window over the mouse position. Feels better.
					bounds.left = position.left - bounds.width / 2;
					bounds.right = bounds.left + bounds.width;
					bounds.bottom = bounds.top + bounds.height;
				}

				win.setBounds(bounds, () => {
					win.show();
					self.tellWindowsToSaveLocation();
				});
			});
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("LauncherService.WindowClosed", this.onWindowClosed);

		//RouterClient.addResponder(CHANNELS.register, this.addToRegistrationQueue);

		// Handler for incoming docking registration request for specified window.
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.registerWindow", function (err, message) {
			var data = message.data;

			// if a deregistration is pending (i.e. waiting on previous registration to complete), then this new registration and pending deregistration cancels each other
			// this case improbably case can only happen with a rapid series of a register followed by deregister and another register, all before the first register completes
			if (self.deregistrationPending[data.name]) {
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.info("registerWindow: incoming registration cancelled by pending deregistration", data.name);
				delete self.deregistrationPending[data.name];
			} else {
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.info("registerWindow: starting registration", data.name);
				self.registrationPending[data.name] = true; // mark pending registration (needed to handle deregisterWindow because register is async, leaving a timing gap)

				if (!data.windowType) data.windowType = "OpenFinWindow";
				__WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].getInstance(data, (err, windowWrap) => {
					if (err || windowWrap === null) {
						__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.error("Docking: registerWindow. addWindow err", message.data.name, err);
						return;
					}
					if (message.data.options && message.data.options.canGroup === false) {
						self.addToGroupBlacklist(data.name);
					}

					__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.info("Docking: registerWindow. addWindow", message.data.name, message.data);
					let dockingOptions = new DefaultDockingOptions(data, self.MINIMUM_HEIGHT, self.MINIMUM_WIDTH);

					windowWrap.dockingOptions = dockingOptions;
					windowWrap.ignoreTilingAndTabbingRequests = data && data.hasOwnProperty("options") && data.options.hasOwnProperty("ignoreTilingAndTabbingRequests") ? data.options.ignoreTilingAndTabbingRequests : false;

					self.addWindow(windowWrap).then(function () {
						self.checkIfWindowIsInGroup(data.name);
						//failure point, add window failed.
						message.sendQueryResponse(null, {
							status: "finished"
						});

						self.moveOutOfClaimedSpace(data.name);

						__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.info("registerWindow: registration complete", data.name);
						__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking: Registered Windows", Object.keys(self.getWindows()));

						// registration complete so can clear marker for pending registration; deregistrationWindow looks for this same marker
						delete self.registrationPending[data.name];

						// if there is a deregister pending for the window (see deregisterWindow) can now process it since regisration is complete
						if (self.deregistrationPending[data.name]) {
							let deregisterArgs = self.deregistrationPending[data.name]; // get the orignal deregister arguments
							self.deregisterWindow(self, deregisterArgs.err, deregisterArgs.response); // process the pending deregister
							delete self.deregistrationPending[data.name]; // pending deregistration has been processed so delete
							__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.info("deregisterWindow: pending deregistration processed", data.name);
						}
					});
				});
			}
		});

		/**
   * Not sure we'll need this any more since we have the wrappers. Leaving in until we can clarify.
   */
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addPubSubResponder(/WindowMove.*/, {});
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addPubSubResponder("DockingService.groupUpdate", {});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.moveWindow", (err, message) => {
			if (Object.keys(message.data).length) {
				//don't throw an error if window isn't found.
				if (!self.getWindow(message.name, false)) {
					return;
				}
				var moveRequest = message.data;
				self.setMovingWindow(self.dockableWindows[message.name]);
				self.onWindowMove(moveRequest);
			}
			message.sendQueryResponse(null, null);
		});

		/**
   * When groupMode changes in a toolbar (or any component), it uses PubSub to publish a state change.
   */
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addPubSubResponder("DockingService.groupMode", {});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.subscribe("WindowMoved", (err, response) => {
			//this.onMouseUp();
		});
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.subscribe("monitorInfo", function (err, response) {
			self.updateMonitorInfo(response.data);
		});
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.getGroupMode", function (err, message) {
			message.sendQueryResponse(null, self.getGroupMode());
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.getBounds", function (err, message) {
			self.getBounds(message.data, function (err, bounds) {
				message.sendQueryResponse(err, bounds);
			});
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.toggleGroupMode", function (err, message) {
			var groupMode = self.getGroupMode();
			groupMode.enabled = !groupMode.enabled;
			self.setGroupMode(groupMode);
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.updateWindowLocation", function (err, message) {
			var updateWindow = self.getWindow(message.data.windowName, false);
			//we get updates for _every_ window when their location changes via launcherClient.showWindow. Even if they aren't registered with docking. This if statement prevents errors from showing up in the logger.
			if (updateWindow) {
				updateWindow.setBounds({ bounds: message.data.location });
			}
		});
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.hyperfocusGroup", function (err, message) {
			DockingMain.hyperFocus(message.data);
		});

		/**
   * Auto-arrange doesn't throw disable-frame-bounds-changed events, since it uses `setBounds` under the hood. So this will just go through the windows and update their positions.
   */
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.updateWindowPositions", function (err, response) {
			self.updateWindowPositions();
		});
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.formGroup", function (err, response) {
			self.formGroup(response.data.windowName, { isMovable: true });
			self.updateGroupData();
			//Logger.system.debug("Publishing Group Update: FormGroup");
			//self.publishGroupUpdate();
		});
		/**
   * Called from the launcherCLient after `spawn` is invoked. Will group two or more windows.
   */
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.groupWindows", function (err, message) {
			self.groupWindows(message.data, function (err) {
				self.updateGroupData();
				//Logger.system.debug("Publishing Group Update: GroupWindows");
				//self.publishGroupUpdate();
				message.sendQueryResponse({
					err: err,
					status: err ? "failed" : "success"
				});
			});
		});
		//@todo put this in a real function...
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.leaveGroup", function (err, response) {
			let windowName = response.data.name;
			let movableGroup = self.getMovableGroup(windowName);
			let immovableGroup = self.getImmobileGroup(windowName);
			let leavingWindow = self.getWindow(windowName);
			if (!movableGroup) return;
			let fillHoleInGroup = false;
			let hole = self.getWindow(windowName).getBounds();
			if (self.groupMode.undockDisbandsEntireGroup) {
				self.removeGroup(movableGroup.name);
			} else {
				fillHoleInGroup = movableGroup.isARectangle();
				let newBounds = leavingWindow.getBounds();
				newBounds.left += 15;
				newBounds.right += 15;
				newBounds.bottom += 15;
				newBounds.top += 15;
				leavingWindow.setBounds(newBounds);
				// removeWindowFromGroup(response.data, movableGroup.name);
				self.removeWindowFromAllGroups(leavingWindow);
				//Because ejecting the window was causing complications when filling holes.
				CALCULATOR.removeWindow(leavingWindow.name, false);
			}
			self.wipeSnapRelationships(leavingWindow.name);

			if (fillHoleInGroup) {
				//group gets reconstituted in the removeWIndowFromGroup function. So get the reference to the new group.
				movableGroup.fillHole(hole);
				self.cleanupGroupGaps(movableGroup);
				self.buildSnapRelationshipsForGroup(movableGroup);
			} else {
				[movableGroup, immovableGroup].forEach(grp => {
					if (grp) {
						self.fixGroupMembership(grp);
					}
				});
			}

			if (!self.groupMode.undockDisbandsEntireGroup) {
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("LeaveGroup, adding window back to docking.", leavingWindow.name);
				CALCULATOR.addWindow(leavingWindow.name, leavingWindow);
			}

			self.recalculateSnaps();

			var groups = self.getGroups();
			var groupList = {};
			for (let group in groups) {
				groupList[group] = groups[group].getWindowNames();
			}

			self.updateGroupData();
			leavingWindow.bringToFront();
			response.sendQueryResponse(null, groupList);
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.getWindowsInGroup", function (err, response) {
			let grp = self.getGroup(response.data.groupName);
			if (err) return response.sendQueryResponse(err, null);

			let error = null,
			    windowList = null;
			if (!grp) {
				err = "Group not found.";
			} else {
				windowList = grp.getWindowNames();
			}
			response.sendQueryResponse(error, windowList);
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.getGroupObjectsForWindow", (err, response) => {
			let win = self.getWindow(response.data.name || response.data.windowName);
			if (win) {
				let responseObject = win.groupNames.map(groupName => {
					let grp = self.getGroup(groupName);
					return {
						name: groupName,
						isMovable: grp.isMovable
					};
				});
				return response.sendQueryResponse(null, responseObject);
			}
			response.sendQueryResponse("window not found");
		});
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.getGroupsForWindow", function (err, response) {
			let win = self.getWindow(response.data.name || response.data.windowName);
			if (win) {
				return response.sendQueryResponse(null, win.getGroupNames());
			}
			response.sendQueryResponse("window not found");
		});
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.joinGroup", function (err, response) {
			self.addWindowToGroup({
				groupName: response.data.groupName,
				win: self.getWindow(response.data.name)
			});
			self.updateGroupData();
		});

		/**
   * PassThroughs
   */

		//RouterClient.addListener(CHANNELS.deregister, this.addToRegistrationQueue);

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.deregisterWindow", function (err, response) {
			self.deregisterWindow(self, err, response);
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.maximizeWindow", function (err, message) {
			self.maximizeWindow(message.data, function (bounds) {
				self.sendQueryResponse(message, bounds);
			});
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.restoreFromMaximize", function (err, message) {
			if (self.getWindow(message.data.name)) {
				self.restoreFromMaximize(message.data, function () {
					self.sendQueryResponse(message);
				});
			} else {
				message.sendQueryResponse("Window not registered with the DockingMain.", null);
			}
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.constituteGroups", function () {
			self.constituteGroups();
		});

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.autoArrange", function (err, message) {
			if (!message.data.monitorDimensions.name) {
				message.sendQueryResponse(new Error("No monitor name supplied to autoArrange"), null);
				return;
			}

			let dimensions = self.prepMonitorDimensions(message.data.monitorDimensions.name);

			self.AutoArrange.arrange(dimensions, self.cachedPositions, function () {
				self.updateGroupData();
				message.sendQueryResponse(null, "success");
			});
		});
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addPubSubResponder(DockingMain_AUTO_ARRANGE_CHANNEL, {});

		/* Tabbing and Tiling */
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.startTilingOrTabbing", this.startTilingOrTabbing);

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.stopTilingOrTabbing", (err, message) => {
			this.stopTilingOrTabbing(err, message, () => {
				message.sendQueryResponse(true);
			});
		});
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.identifierForTilingOrTabbing", this.identifierForTilingOrTabbing);
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addListener("DockingService.cancelTilingOrTabbing", this.cancelTilingOrTabbing);
		/* End Tabbing and Tiling */

		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.subscribe(APPLICATION_STATE_CHANNEL, (err, response) => {
			this.applicationState = response.data.state;
		});

		//Monitor information is now managed by docking (for simplicity of claiming/unclaiming space). This is just to get the information when it changes. getMonttorInfoAll in the launcher comes here now.
		var self = this;
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.addResponder("DockingService.getMonitorsFromDocking", function (err, message) {
			let monitors = self.getRawMonitors();
			message.sendQueryResponse(null, { monitors });
		});
	}

	sendQueryResponse(message, data) {
		message.sendQueryResponse(null, data);
	}

	prepMonitorDimensions(monitorName) {
		let dimensions = {};
		let serviceMonitors = this.getMonitors();
		let monitors = Object.keys(serviceMonitors).map(mon => {
			return serviceMonitors[mon];
		});
		let monitor;
		for (let i = 0; i < monitors.length; i++) {
			let mon = monitors[i];

			if (mon.name === monitorName) {
				monitor = mon;
				break;
			}
		}
		if (monitor) {
			dimensions = {
				left: monitor.unclaimedRect.left,
				right: monitor.unclaimedRect.right,
				top: monitor.unclaimedRect.top,
				bottom: monitor.unclaimedRect.bottom,
				name: monitor.name,
				height: monitor.unclaimedRect.height,
				width: monitor.unclaimedRect.width
			};
		}

		return dimensions;
	}

	updateMonitorInfo(monitorUpdate) {
		var self = this;
		// @todo, handle this properly. When a user removes a monitor, we need to revert everything.
		let monitors = self.getMonitors();
		Object.keys(monitors).map(name => monitors[name]).forEach(monitor => {
			this.AutoArrange.isArranged[monitor.name] = false;
		});
		self.sendAutoArrangeStatusUpdate();
		self.removeAllMonitors();

		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.debug("updating monitors: ", monitorUpdate);

		monitorUpdate.forEach(function (monitor) {
			self.addMonitor({
				name: monitor.name,
				left: monitor.unclaimedRect.left,
				top: monitor.unclaimedRect.top,
				right: monitor.unclaimedRect.right,
				bottom: monitor.unclaimedRect.bottom,
				_monitor: monitor
			});
		});
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.log("Docking.monitorUpdate", monitorUpdate);
		super.updateMonitorInfo(monitorUpdate);
		self.setBufferSize(serviceConfig.BUFFER_SIZE);
	}

	/**
  * This function will maximize a window.
  * @param {object} params
  * @param {object} params.windowIdentifier
  * @param {string} params.name
  */
	maximizeWindow(params, cb) {
		var win = this.getWindow(params.name);
		win.bringToFront();
		win.cachedBounds = clone(win.getBounds());
		//LauncherClient.getMonitorInfo(params, function (err, response) {
		//	var monitorDimensions = response.unclaimedRect;
		//get updated monitor info to make sure we take into account any claimed space changes.
		let monitor = this.getMonitor(win.monitor.name);
		let monitorBounds = { left: monitor.left, right: monitor.right, top: monitor.top, bottom: monitor.bottom, width: monitor.width, height: monitor.height }; ///) => ({ left, right, top, bottom, width, height })(win.monitor);
		if (!monitorBounds.width) {
			monitorBounds.width = monitorBounds.right - monitorBounds.left;
		}
		if (!monitorBounds.height) {
			monitorBounds.height = monitorBounds.bottom - monitorBounds.top;
		}
		win.win.startMove();
		win.win._setBounds({ bounds: monitorBounds }, function () {
			win.isMaximized = true;
			win.win.stopMove();
			if (cb) {
				cb(monitorBounds);
			}
		}, function (err) {
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.error(err);
		});
	}

	/**
  * This function will restore a maximized window.
  * @param {object} params
  * @param {string} params.name
  */
	restoreFromMaximize(params, cb) {
		var win = this.getWindow(params.name);
		win.isMaximized = false;
		let bounds = win.cachedBounds && Object.keys(win.cachedBounds).length ? win.cachedBounds : win.getBounds();
		win.win.startMove();
		win.win._setBounds({ bounds }, function () {
			win.cachedBounds = {};
			win.win.stopMove();

			if (cb) {
				cb();
			}
		}, function (err) {
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.error(err);
		});
	}

	onWindowShown(event) {
		let dockableWindow = this.getWindow(event.data.name);
		dockableWindow.isHidden = false;
	}

	//if a window is docked, and gets hidden, undock it.
	onWindowHidden(event) {
		let dockableWindow = this.getWindow(event.data.name);
		dockableWindow.isHidden = true;
	}

	onWindowClosedHandler(event) {
		if (this.applicationState !== "closing") {
			this.onWindowClosed(null, { data: { name: event.data.name } });
		}
	}

	/**
  * Function that's called after a window is moved.
  */

	/**
 * Registers a window with the DockingCalculator.
 * @param  {dockableWindow} win
 * @return {Promise}
 */
	addWindow(win) {
		let self = this;
		let calcAddWindow = super.addWindow.bind(this);
		//If a window reloads, it may try to add itself to the dockingCalc twice.
		//2nd param doesn't throw error if we can't find the window.
		if (this.getWindow(win.name, false)) {
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:addWindow reload immediate resolve");
			return Promise.resolve(self.getWindow(win.name));
		}

		return new Promise(function (resolve, reject) {
			win._getBounds({}, (err, bounds) => {
				//If addWindow is called multiple times in quick succession, check to see if it's been added before going through this entire process again. This was happening when tiling from a tabbed group.
				if (self.getWindow(win.name, false)) {
					return Promise.resolve(self.getWindow(win.name));
				}
				if (!bounds) {
					Promise.reject(err);
					return __WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.error("No bounds returned from wrap.getBounds", win.name, err);
				}
				//@todo, why not get bounds inside of the constructor? Would at least get rid of one param.

				let dockableWindow = new __WEBPACK_IMPORTED_MODULE_8__dockableWindow__["a" /* default */](win, bounds, {
					calculator: self,
					Logger: __WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a,
					System: __WEBPACK_IMPORTED_MODULE_7__common_system__["System"]
				}, serviceConfig.assimilationEnabled);

				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:calling addWindow on the calculator", win.name, bounds);
				//@todo, why not get the name from the dockableWindow?


				dockableWindow.win.addEventListener("minimized", self.setWindowMinimized);
				dockableWindow.win.addEventListener("restored", self.setWindowRestored);
				dockableWindow.win.addEventListener("focused", self.setWindowFocused);
				dockableWindow.win.addEventListener("shown", self.bringGroupToFront);
				dockableWindow.win.addEventListener("hidden", self.onWindowHidden);
				dockableWindow.win.addEventListener("shown", self.onWindowShown);
				dockableWindow.win.addEventListener("closed", self.onWindowClosedHandler);

				calcAddWindow(win.name, dockableWindow);
				dockableWindow.win.addListener("alwaysOnTop", self.setGroupAlwaysOnTop); // TODO: need to do something about somehow combining our event
				resolve(dockableWindow);
			});
		});
	}

	/* do not bind this function */
	setGroupAlwaysOnTop(params) {
		// if there are no params, this is called from an event and the context is in "this".
		if (!params) params = {};
		if (!params.name) params.name = this.name;
		if (!params.uuid) params.uuid = this.uuid;
		let dockableWindow = window.DockingMain.getWindow(params.name); // cannot bind this function and lose context. Using the global here.
		if (dockableWindow.isMinimized) return;
		dockableWindow.groupNames.forEach(groupName => {
			let grp = window.DockingMain.getGroup(groupName);
			if (grp.isMovable) {
				grp.allAlwaysOnTop(params.alwaysOnTop);
				window.DockingMain.updateGroupData();
			}
		});
	}

	setWindowMinimized(event) {
		let params = event.data;
		let self = this;
		let dockableWindow = self.getWindow(params.name);
		if (!dockableWindow) {
			return __WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.warn("SetWindowMinimized called on window not registered for movement.", params.name);
		}
		dockableWindow.isMinimized = true;
		// If Window is in group, minimize the group:
		dockableWindow.groupNames.forEach(groupName => {
			let grp = self.getGroup(groupName);
			if (grp.isMovable) {
				grp.minimizeAll();
			}
		});
	}

	setWindowRestored(event) {
		let params = event.data;
		let self = this;
		let dockableWindow = self.getWindow(params.name);
		if (!dockableWindow) {
			return __WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.warn("SetWindowRestored called on window not registered for movement.", params.name);
		}
		dockableWindow.isMinimized = false;
		// If Window is in group, restore the group:
		dockableWindow.groupNames.forEach(groupName => {
			let grp = self.getGroup(groupName);
			if (grp.isMovable && grp.groupState !== grp.GROUPSTATES.RESTORING) {
				grp.restoreAll();
			}
		});
	}
	setWindowFocused(event) {
		let params = event.data;
		let self = this;
		let dockableWindow = self.getWindow(params.name);
		if (!dockableWindow) return;
		setTimeout(() => {
			if (dockableWindow.win.windowState !== __WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].WINDOWSTATE.NORMAL) return;

			//win.removeEventListener is async. When reloading a workspace, the window is closed, and unregisters with docking.
			//We remove the event listeners from the openfin windows for focus, shown, etc.
			//Then we re-spawn the same windows with the same uuid/name. Underneath the hood, openfin has yet to remove those event listeners. The new windows get focused, and get into this event handler. If we don't make the check below, the DockingCalculator throws errors saying "Hey this window hasn't registered with me yet."

			if (self.getWindowNames().includes(params.name)) {
				self.bringGroupToFront(event);
			}
		}, 100);
	}
	bringGroupToFront(event) {
		let params = event.data;
		if (typeof params === "string") {
			params = { name: params };
		}
		if (!params) params = {}; // this gets called when focused happens and expects params when some windows dont do that
		if (!params.name) params.name = this.name;
		if (!params.uuid) params.uuid = this.uuid;

		let dockableWindow = window.DockingMain.getWindow(params.name);
		if (!dockableWindow) return;
		dockableWindow.groupNames.forEach(groupName => {
			let grp = window.DockingMain.getGroup(groupName);
			if (grp.isMovable) {
				grp.bringToFront({ restoreWindows: false }); // No need to restore windows since they are by default already unminimized. Doing so can cause infinite loops with stackedWindows [Terry].
			}
		});
	}

	hyperFocus(params) {
		let dockableWindow = this.getWindow(params.windowName);
		dockableWindow.groupNames.forEach(groupName => {
			let grp = this.getGroup(groupName);
			if (grp.isMovable) {
				__WEBPACK_IMPORTED_MODULE_10__clients_launcherClient___default.a.hyperFocus({ windowList: grp.getWindowNames() });
			}
		});
	}

	createGroupMask() {
		let self = this;
		__WEBPACK_IMPORTED_MODULE_10__clients_launcherClient___default.a.showWindow({ name: "Docking Move Mask", componentType: "Docking Move Mask" }, {
			name: "Docking Move Mask",
			spawnIfNotFound: true,
			options: {
				autoShow: false
			}
		}, (() => {
			var _ref = _asyncToGenerator(function* (err, response) {
				let { wrap: groupMask } = yield __WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].getInstance({ name: "Docking Move Mask", waitForReady: true });
				groupMask._getBounds(function (err, bounds) {
					var mask = new __WEBPACK_IMPORTED_MODULE_8__dockableWindow__["a" /* default */](groupMask, bounds, {
						calculator: self,
						Logger: __WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a,
						System: __WEBPACK_IMPORTED_MODULE_7__common_system__["System"]
					});
					mask.canGroup = false;
					self.groupMask = mask;
				});
			});

			return function (_x, _x2) {
				return _ref.apply(this, arguments);
			};
		})());

		__WEBPACK_IMPORTED_MODULE_10__clients_launcherClient___default.a.showWindow({ name: "dialogModal", componentType: "dialogModal" }, {
			name: "dialogModal",
			spawnIfNotFound: true,
			options: {
				autoShow: false
			}
		}, (() => {
			var _ref2 = _asyncToGenerator(function* (err, response) {
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("ModalScrim1: Getting Modal Scrim Wrap");
				var { wrap: modalScrim } = yield __WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].getInstance({ name: "dialogModal", waitForReady: true });
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("ModalScrim2: Got Modal Scrim Wrap");
				__WEBPACK_IMPORTED_MODULE_7__common_system__["System"].getMonitorInfo(function (info) {
					__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("ModalScrim3: Monitor Info");
					let bounds = info.virtualScreen;
					bounds.width = bounds.right - bounds.left;
					bounds.height = bounds.bottom - bounds.top;
					let initialBounds = {
						left: bounds.left - 40,
						top: bounds.top - 40,
						width: 40,
						height: 40,
						right: bounds.left,
						bottom: bounds.top
					};
					modalScrim._setBounds({ bounds: initialBounds }, function () {
						__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("ModalScrim4: Set bounds");
						modalScrim._show(function () {
							modalScrim._hide();
						}); // This is to address an openfin bug related to flashing while showing the first time.
						modalScrim._setBounds({ bounds }, function () {
							__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("ModalScrim5: assigning to this.modalscrim");
							var modal = new __WEBPACK_IMPORTED_MODULE_8__dockableWindow__["a" /* default */](modalScrim, bounds, {
								calculator: self,
								Logger: __WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a,
								System: __WEBPACK_IMPORTED_MODULE_7__common_system__["System"]
							});
							modal.canGroup = false;
							self.modalScrim = modal;
						});
					});
				});
			});

			return function (_x3, _x4) {
				return _ref2.apply(this, arguments);
			};
		})());
	}

	removeWindow(windowName) {
		let self = this;
		let dockableWindow = this.getWindow(windowName);
		dockableWindow.win.removeEventListener("minimized", self.setWindowMinimized);
		dockableWindow.win.removeEventListener("restored", self.setWindowRestored);
		dockableWindow.win.removeEventListener("focused", self.bringGroupToFront);
		dockableWindow.win.removeEventListener("shown", self.bringGroupToFront);

		//these two deal with undocking/setting the isHidden boolean (which causes docking to skip windows when figuring out whether to snap.
		dockableWindow.win.removeEventListener("hidden", self.onWindowHidden);
		dockableWindow.win.removeEventListener("shown", self.onWindowShown);
		dockableWindow.win.removeEventListener("closed", self.onWindowClosedHandler);

		super.removeWindow(windowName);
		if (this.cachedPositions[dockableWindow.monitor.name][windowName]) {
			delete this.cachedPositions[dockableWindow.monitor.name][windowName];
		}
	}

	/**
  * Sets the initial buffersize.
  */
	setupDockingCalculator() {
		let DEBUG = serviceConfig.DEBUG;
		if (typeof DEBUG === "undefined") {
			DEBUG = false;
		}
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.log("Docking initialization", serviceConfig);
		this.setTilingOrTabbingEnabled(serviceConfig);
		this.setAllowGroupsToSnap(serviceConfig.ALLOW_GROUPS_TO_SNAP);
		this.setGroupMode(serviceConfig.GROUP_MODE);
		this.setDebug(DEBUG);
		this.setBufferSize(serviceConfig.BUFFER_SIZE);
		this.setSnappingOpacity(serviceConfig.SNAPPING_OPACITY);
		this.setResizeThrottlePeriod(serviceConfig.RESIZE_EVENT_THROTTLE_PERIOD);
		this.setRouterClient(__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a);
		this.setGlobalMinimums(serviceConfig);
	}

	addMonitor(monitor) {
		super.addMonitor(monitor, this.handleMonitorSpaceChanges);
		this.AutoArrange.isArranged[monitor.name] = false;
		if (!this.cachedPositions[monitor.name]) this.cachedPositions[monitor.name] = {};
	}

	setGroupMode(groupMode) {
		super.setGroupMode(groupMode);
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.publish("DockingService.groupMode", groupMode);
	}

	/************************************************
  *												*
  * 				Debugging Helpers				*
  *												*
  ************************************************/
	/**
 * For debugging.
 * @function {function name}
 * @return {type} {description}
 */
	getGridWindows() {
		let self = this;
		["A", "B", "C", "D", "E", "F", "G", "H", "I"].forEach(windowName => {
			window[windowName + windowName] = self.getWindow(windowName);
		});
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	resetGrid() {
		var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		//creates a 3x3 grid
		var row = 0;
		var column = 0;
		var group1;
		for (var i = 0; i < 9; i++) {
			var windowName = alphabet[i];

			win = this.getWindow(windowName);
			if (!group1) {
				group1 = this.getGroup(win.groupName);
			}
			if (i > 1 && i % 3 === 0) {
				row++;
				column = 0;
			}
			win._setBounds({
				left: 300 * column,
				top: 300 * row,
				width: 300,
				height: 300
			});
			column++;
		}
		group1.calculateOuterBounds();
	}

	/**
 * @function {function name}
 * @return {type} {description}
 */
	logger() {
		var boundingBoxes = {};
		for (var windowName in this.getWindows()) {
			var win = this.getWindow(windowName);
			boundingBoxes[windowName] = JSON.stringify(win.windowBoundingBox);
		}
		var box = "";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["A"] + "          |    " + boundingBoxes["B"] + "         |   " + boundingBoxes["C"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["D"] + "          |    " + boundingBoxes["E"] + "         |   " + boundingBoxes["F"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		box += "|             |             |            |\n";
		box += "|   " + boundingBoxes["G"] + "          |    " + boundingBoxes["H"] + "         |   " + boundingBoxes["I"] + "         |\n";
		box += "|             |             |            |\n";
		box += "|             |             |            |\n";
		box += "+----------------------------------------+\n";
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.log(box);
	}

	/**
  * Sends a message asking windows to save their position.
  */
	tellWindowsToSaveLocation() {
		let windowIter = this.dockingPool.iterator();
		for (let win of windowIter) {
			//This is a hack until we have proper events in finsemble. We need to notify windows that aren't part of the workspace so that they can save their bounds.
			if (win.isDockableComponent) {
				let bounds = win.getBounds();
				//Awful hack to get the toolbar _not_ to save it's state. This allows the toolbar to start docked when you restart the app.
				win.win.dockedPosition = win.dockedPosition;
				//Will trigger the bounds-change-end event.
				win.win.stopMove();
				//old code, for backwards compat. The toolbar uses this.
				__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.transmit(win.name + ".bounds-change-end", { bounds });
			}
			//win.win is the underlying wrapper. win is the dockableWindow. win.win is the openfinwindowWrapper
			win.win._saveWindowOptions();
		}
	}
	/**
  * Sends a message asking windows to update their position in memory but not save.
  */
	tellWindowsToUpdateLocation() {
		let windowIter = this.dockingPool.iterator();
		for (let win of windowIter) {
			__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.transmit("DockingService." + win.name, { command: "updateWindowLocation", bounds: win.getBounds() });
		}
	}

	/**
  * Updates the groupData object, which is pushed out to components.
  */
	_updateGroupData() {
		let groups = this.getGroups();
		let groupUpdate = {};

		for (var groupName in groups) {
			let group = groups[groupName],
			    windowNames = group.getWindowNames(),

			//This shouldn't happen -- but just in case.
			topRightWindow = windowNames.length ? group.getMoveAnchor("BottomLeft").name : null;

			groupUpdate[groupName] = {
				windowNames: windowNames,
				isMovable: group.isMovable,
				isAlwaysOnTop: group.isAlwaysOnTop,
				topRightWindow: topRightWindow,
				isARectangle: group.isARectangle()
			};
		}

		groupData = groupUpdate;
	}

	/**
  * Sends the groupData object out to the rest of the application.
  */
	publishGroupUpdate() {
		let self = this;
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Publishing Group Update:", groupData);
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.publish("Finsemble.WorkspaceService.groupUpdate", {
			groupName: "Docking",
			groupData: groupData,
			workspaceName: self.activeWorkspace.name
		});
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.publish("DockingService.groupUpdate", {
			groupName: "Docking",
			groupData: groupData,
			workspaceName: self.activeWorkspace.name
		});
	}

	handleWorkspaceUpdate(err, response) {
		let self = this;
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("HANDLING WORKSPACE UPDATE");
		var data = response.data;
		if (!data || !data.activeWorkspace) {
			return;
		}
		this.activeWorkspace = data.activeWorkspace;
		groupData = data.activeWorkspace.groups || {};
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Publishing Group Update: HandleWorkspaceUpdate");
		self.publishGroupUpdate();
		self.moveCount = 0;
	}

	/**
  * Checks to see if a window belongs to any groups.
  */
	checkIfWindowIsInGroup(name) {
		let self = this;
		if (groupData) {
			for (var groupName in groupData) {
				let groupWindows = groupData[groupName].windowNames;
				if (groupWindows.includes(name)) {
					let params = {
						groupName: groupName,
						win: self.getWindow(name)
					};
					Object.assign(params, groupData[groupName]);
					self.addWindowToGroup(params);
				}
			}
		}
	}

	/**
  * Sends the update to all toolbars.
  * @todo, this will eventually be monitor-specific.
  */
	sendAutoArrangeStatusUpdate() {
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.publish(DockingMain_AUTO_ARRANGE_CHANNEL, {
			isAutoArranged: this.AutoArrange.isArranged
		});
	}

	/**
  * @private
  * @param {LauncherClient~windowDescriptor} windowDescriptor
  * @param {monitorDimensions} monitorDimensions
  * @returns {boolean} Whether window is on the current monitor.
  */
	windowOnMonitor(windowDescriptor, monitorDimensions) {
		if (!windowDescriptor.monitor) {
			return false;
		}
		//if right or left edge is within the window's bounds.
		return windowDescriptor.monitor.name === monitorDimensions.name;
	}

	/**
  * Get bounds for a window.
  */
	getBounds(params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug(".getBounds", params);
		let win = this.getWindow(params.name);
		var bounds = null;
		if (win) {
			bounds = win.getBounds();
			cb(null, bounds);
		} else {
			cb("Window is not registered with Docking. No bounds retrieved.", null);
		}

		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug(".getBounds return", bounds);
		return bounds;
	}

	deregisterAllWindows() {
		let self = this;
		return new Promise(function (resolve, reject) {
			let windows = self.getWindows();
			for (let windowName in windows) {
				self.removeWindow(windowName);
			}
			resolve();
		});
	}

	/* Stuff for Tabbing and Tiling */
	getMouseInGroups(mousePosition) {
		let groups = this.getGroups();
		let movableGroups = [];
		let immobileGroups = [];
		for (let g in groups) {
			let group = groups[g];
			let win = group.getWindow(group.getWindowNames()[0]);
			if (!win) continue;
			if (win.win.windowState === __WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].WINDOWSTATE.MINIMIZED) continue;
			if (__WEBPACK_IMPORTED_MODULE_9__boxMath__["a" /* default */].isPointInBox(mousePosition, group.getBounds())) {
				if (group.isMovable) movableGroups.push(group);else immobileGroups.push(group);
			}
		}
		/*if (mouseGroups.length) {
  	for (let g of mouseGroups) {
  		if (g.isMovable) return g;
  	}
  	return mouseGroups[0];
  }*/

		return { movableGroups, immobileGroups };
	}

	getMouseInWindows(mousePosition) {
		let windows = this.getWindows();
		let mouseWindows = [];
		for (var w in windows) {
			let win = windows[w];
			if (win.win.windowState === __WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].WINDOWSTATE.MINIMIZED) continue;
			if (mousePosition && win && __WEBPACK_IMPORTED_MODULE_9__boxMath__["a" /* default */].isPointInBox(mousePosition, win.getBounds())) {
				mouseWindows.push(win);
			}
		}
		return mouseWindows;
	}

	startTrackingMouse(interval, cb = Function.prototype) {
		if (this.mouseTracker) {
			clearInterval(this.mouseTracker.interval);
			this.mouseTracker.callback && this.mouseTracker.callback("New tracker overrode this one");
		} else {
			this.mouseTracker = {};
		}
		this.mouseTracking = true;
		this.mouseTracker.callback = cb;
		this.mouseTracker.interval = setInterval(() => {
			__WEBPACK_IMPORTED_MODULE_7__common_system__["System"].getMousePosition((err, mousePosition) => {
				if (!this.mouseTracker) this.mouseTracker = {};
				if (!err) this.mouseTracker.mousePosition = mousePosition;
				cb(err, mousePosition);
			});
		}, interval);
	}

	stopTrackingMouse(cb) {
		this.mouseTracking = false;
		cb(null, this.mouseTracker.mousePosition);
		clearInterval(this.mouseTracker.interval);
		this.mouseTracker = false;
	}

	/**
  * Check if we are near the edge of a rectangle within x% or xpx
  *
  * @param {any} position
  * @param {any} bounds
  * @param {any} tolerance
  * @param {string} [toleranceType="percent"] percent or pixel
  * @returns
  * @memberof DockingMain
  */
	isPositionNearEdge(position, bounds, tolerance, toleranceType = "percent") {
		// inside box
		let edge = {};

		if (position.x > bounds.left && position.x < bounds.right && position.y > bounds.top && position.y < bounds.bottom) {
			let edgeToReturn = false;
			let left = position.x - bounds.left;
			if (toleranceType == "percent") left = left / bounds.width;
			if (left < tolerance) {
				edge.left = left;
				edgeToReturn = "left";
			}
			let right = bounds.right - position.x;
			if (toleranceType == "percent") right = right / bounds.width;
			if (right < tolerance) {
				edge.right = right;
				edgeToReturn = "right";
			}
			let top = position.y - bounds.top;
			if (toleranceType == "percent") top = top / bounds.height;
			if (top < tolerance) {
				edge.top = top;
				edgeToReturn = "top";
			}
			let bottom = bounds.bottom - position.y;
			if (toleranceType == "percent") bottom = bottom / bounds.height;
			if (bottom < tolerance) {
				edge.bottom = bottom;
				edgeToReturn = "bottom";
			}
			if (edge.left && edge.top) {
				if (left < top) return "left";
				return "top";
			}
			if (edge.left && edge.bottom) {
				if (left < bottom) return "left";
				return "bottom";
			}
			if (edge.right && edge.top) {
				if (left < top) return "right";
				return "top";
			}
			if (edge.right && edge.bottom) {
				if (right < bottom) return "right";
				return "bottom";
			}
			return edgeToReturn;
		}
		return false;
	}

	identifierForTilingOrTabbing(err, response) {
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("identifierForTilingOrTabbing got identifier", response.data.windowIdentifier);
		__WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].getInstance({ name: response.data.windowIdentifier.windowName }, (err, windowWrap) => {
			this.tilingAndTabbingWindow = windowWrap;
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("identifierForTilingOrTabbing got wrap", windowWrap.name);
		});
	}

	startTilingOrTabbing(err, response, sourceWin, avoidOrigin) {
		this.avoidOrigin = avoidOrigin || false;
		let { windowIdentifier } = response.data;
		//Gotta make sure we always pass the right thing around.
		if (!windowIdentifier.windowName && windowIdentifier.name) windowIdentifier.windowName = windowIdentifier.name;
		if (!sourceWin && !response.data.waitForIdentifier) {
			let sourceDockableWindow = this.getWindow(windowIdentifier.windowName);
			if (!sourceDockableWindow) {
				__WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].getInstance({ name: windowIdentifier.windowName }, (err, windowWrap) => {
					return this.startTilingOrTabbing(err, response, windowWrap);
				});
				return;
			}
			sourceWin = sourceDockableWindow.win;
		}

		if (!sourceWin && response.data.componentType && typeof avoidOrigin === "undefined") {
			if (!this.configCache) this.configCache = {};
			if (!this.configCache[response.data.componentType]) {
				return __WEBPACK_IMPORTED_MODULE_11__clients_configClient___default.a.getValue({ field: "finsemble.components." + response.data.componentType + ".window" }, (err, config) => {
					this.configCache[response.data.componentType] = {
						width: config.width ? config.width : 800,
						height: config.height ? config.height : 600
					};
					__WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].getInstance({ name: response.header.origin.replace("RouterClient.", "") }, (err, originWrap) => {
						originWrap.getBounds((err, bounds) => {
							this.avoidOrigin = true;
							this.originBounds = bounds;
							this.startTilingOrTabbing(err, response, null, true);
						});
					});
				});
			}
			return __WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].getInstance({ name: response.header.origin.replace("RouterClient.", "") }, (err, originWrap) => {
				originWrap.getBounds((err, bounds) => {
					this.avoidOrigin = true;
					this.originBounds = bounds;
					this.startTilingOrTabbing(err, response, null, true);
				});
			});
		}

		let sourceParentWindow = sourceWin ? sourceWin.parentWindow : null;
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("StartTilingOrTabbing");
		__WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a.transmit("FinsembleTilingStart");
		//this.showModalScrim();
		let self = this;
		/**
   * Shows the scrim occupying half the of the group or window bounds specified in bounds on the side specfied by edge.
   *
   * @param {any} edge
   * @param {any} bounds
   * @returns
   */
		function scrimShower(edge, bounds) {
			if (!self.mouseTracking) {
				return;
			}
			let maskBounds = Object.assign({}, bounds);
			let newWindowBounds = Object.assign({}, bounds);
			switch (edge) {
				case "full":
					// This is for swapping
					break;
				case "top":
					maskBounds.height = Math.round(bounds.height / 2);
					maskBounds.bottom = maskBounds.top + maskBounds.height;
					newWindowBounds.top = maskBounds.bottom;
					newWindowBounds.height = bounds.height - maskBounds.height;
					//Recalculate so it isn't affected by rounding errors.
					newWindowBounds.bottom = newWindowBounds.top + newWindowBounds.height;
					break;
				case "left":
					maskBounds.width = Math.round(bounds.width / 2);
					maskBounds.right = maskBounds.left + maskBounds.width;
					newWindowBounds.left = maskBounds.right;
					newWindowBounds.width = bounds.width - maskBounds.width;
					//Recalculate so it isn't affected by rounding errors.
					newWindowBounds.right = newWindowBounds.left + newWindowBounds.width;
					break;
				case "bottom":
					maskBounds.height = Math.round(bounds.height / 2);
					maskBounds.top = maskBounds.bottom - maskBounds.height;
					newWindowBounds.bottom = maskBounds.top;
					newWindowBounds.height = bounds.height - maskBounds.height;
					//Recalculate so it isn't affected by rounding errors.
					newWindowBounds.top = newWindowBounds.bottom - newWindowBounds.height;
					break;
				case "right":
					maskBounds.width = Math.round(bounds.width / 2);
					maskBounds.left = maskBounds.left + maskBounds.width;
					newWindowBounds.right = maskBounds.left;
					newWindowBounds.width = bounds.width - maskBounds.width;
					//Recalculate so it isn't affected by rounding errors.
					newWindowBounds.left = newWindowBounds.right - newWindowBounds.width;
					break;
			}
			self.showGroupMask({ bounds: maskBounds, opacity: 0.5 });

			return {
				maskBounds: maskBounds,
				newWindowBounds: newWindowBounds
			};
		}

		/**
   * Checks if mousePosition is in group or window
   *
   * @param {any} mpErr
   * @param {any} mousePosition
   */
		function boundsChecker(mpErr, mousePosition) {
			if (!sourceWin && self.tilingAndTabbingWindow) {
				sourceWin = self.tilingAndTabbingWindow;
				delete self.tilingAndTabbingWindow;
			}
			if (!self.mouseTracking) {
				clearInterval(self.mouseTracker.interval);
				return;
			}
			let headerHeight = self.headerHeight;
			let groups = self.getMouseInGroups(mousePosition).movableGroups;
			let wins = self.getMouseInWindows(mousePosition);

			let amITabbing = false;
			let showScrim = false;
			let bringToFront = false;

			let sourceWindowName = sourceWin ? sourceWin.name : null;

			if (self.avoidOrigin && self.isPositionNearEdge(mousePosition, self.originBounds, 100, "percent")) {
				self.operation = {
					sourceWindow: sourceWin
				};
				self.hideGroupMask();
				return;
			}

			for (let win of wins) {
				if (win.name == sourceWindowName || win.isMinimized || win.ignoreTilingAndTabbingRequests) continue; // ignore if on self.
				// are we tabbing??
				let actualWindowBounds = win.getBounds();
				let edge = self.isPositionNearEdge(mousePosition, actualWindowBounds, headerHeight, "pixel");
				if (edge == "top") {
					if (!(self.operation && self.operation.window && self.operation.window.name == win.name)) {
						win.bringToFront();
					}
					self.operation = {
						type: "tabbing",
						window: win
					};
					amITabbing = true;
					break;
				}
			}
			let allowDetaching = true;
			let sourceGroup = sourceWindowName ? self.getMovableGroup(sourceWindowName) : null;
			let sourceParentGroup = sourceParentWindow ? self.getMovableGroup(sourceParentWindow.name) : null;

			if (!amITabbing) {
				// tabbing gets priority
				for (let group of groups) {
					//group tile
					if (!group.isARectangle()) continue;

					let actualGroupBounds = group.getBounds();
					let groupBounds = Object.assign({}, actualGroupBounds);
					groupBounds.top += headerHeight;
					groupBounds.height -= headerHeight;
					let edge = self.isPositionNearEdge(mousePosition, groupBounds, self.groupTileBuffer, "pixel");
					if (edge && self.tilingEnabled) {
						if (sourceGroup == group || sourceParentGroup == group) {
							// dont tile in own group.
							continue;
						}
						//show mask occupying proper half
						if (!(self.operation && self.operation.type == "tiling" && self.operation.tileWith == "group" && self.operation.group.name == group.name)) {
							// flashing from bringing to front fix
							bringToFront = true;
						}
						self.operation = {
							type: "tiling",
							tileWith: "group",
							group: group,
							edge: edge
						};
						showScrim = true;
						if (bringToFront) {
							//Bring window to front, then bring mask to front
							group.bringToFront();
							self.groupMask.win._bringToFront();
						}
						self.operation.newBounds = scrimShower(edge, actualGroupBounds);
						break;
					}
				}
				if (!showScrim) {
					// did not find a group tile
					for (let win of wins) {
						if (win.ignoreTilingAndTabbingRequests) continue;
						if (sourceWindowName === win.name || win.isMinimized) {
							allowDetaching = false;
							continue; // ignore if on self.
						}
						let parentWindow = win.win.parentWindow;
						if (sourceParentWindow && win.name === sourceParentWindow.name) {
							allowDetaching = false;
							continue; // ignore if on self.
						}
						if (sourceParentWindow && parentWindow && sourceParentWindow.name == parentWindow.name) {
							allowDetaching = false;
							continue; // ignore if on self.
						}
						let actualWindowBounds = win.getBounds();
						let windowBounds = Object.assign({}, actualWindowBounds);
						windowBounds.top += headerHeight;
						windowBounds.height -= headerHeight;

						// check if window is in same group
						if (sourceGroup && sourceGroup == self.getMovableGroup(win.name) && self.tilingEnabled) {
							//swapping - swap within same group
							self.operation = {
								type: "swapping",
								window: win,
								group: sourceGroup
							};

							showScrim = true;
							scrimShower("full", actualWindowBounds);
							break;
						} else if (sourceParentWindow && sourceParentGroup && sourceParentGroup == self.getMovableGroup(win.name) && self.tilingEnabled) {
							// also swap tabbed windows
							self.operation = {
								type: "swapping",
								window: win,
								group: sourceParentGroup
							};

							showScrim = true;
							scrimShower("full", actualWindowBounds);
							break;
						} else {
							//tiling
							if (self.tilingEnabled) {
								if (!(self.operation && self.operation.type == "tiling" && self.operation.tileWith == "window" && self.operation.window.name == win.name)) {
									// flashing from bringing to front fix
									bringToFront = true;
								}
								let edge = self.isPositionNearEdge(mousePosition, windowBounds, 0.5);
								if ((edge == "top" || edge == "bottom") && actualWindowBounds.height < 2 * self.MINIMUM_HEIGHT) {

									continue;
								}
								if ((edge == "left" || edge == "right") && actualWindowBounds.width < 2 * self.MINIMUM_WIDTH) {

									continue;
								}
								self.operation = {
									type: "tiling",
									tileWith: "window",
									window: win,
									edge: edge
								};

								showScrim = true;
								if (bringToFront) {

									win.bringToFront();
									self.groupMask.win._bringToFront();
								}
								self.operation.newBounds = scrimShower(edge, actualWindowBounds);
							}
							break;
						}
					}
				}
			}

			// if we are not tabbing or tiling, we are detaching
			if (!showScrim && !amITabbing && response.data.componentType) {
				// This means that we are trying to tab/tile with an as yet unspawned window. Show a window sized scrim
				showScrim = true;
				self.operation = {
					type: "detaching"
				};
				scrimShower("full", Object.assign(mousePosition, self.configCache[response.data.componentType]));
			}

			if (!showScrim) {
				self.hideGroupMask();
				// if we are not tabbing, we are detaching
				if (!amITabbing && allowDetaching) {
					self.operation = {
						type: "detaching"
					};
				}
			}
			if (!self.operation) self.operation = {};
			self.operation.sourceWindowName = sourceWin ? sourceWin.name : null;
		}
		this.startTrackingMouse(5, boundsChecker);
	}

	cancelTilingOrTabbing(err, response) {
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("CancelTilingOrTabbing");
		this.operation = null;
		this.stopTrackingMouse((err, mousePosition) => {});
	}

	buildSnapRelationshipsForGroup(group) {
		let windows = group.getWindows();
		for (var w in windows) {
			this.buildSnapRelationships(windows[w]);
		}
	}

	verifyWindowsAndGroups() {
		let groups = this.getGroups();
		for (var g in groups) {
			let group = groups[g];

			let windows = group.getWindows();
			for (let w in windows) {
				let win = windows[w];
				if (!win.groupNames.includes(group.name)) {
					__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.warn("Group thinks it has window. Window doesn't think so", group.name, win.name);
				}
			}
		}

		let windows = this.getWindows();
		for (let w in windows) {
			let win = windows[w];
			for (let g in window.groupNames) {
				let group = this.getGroup(g);
				if (!group.getWindow(win.name)) {
					__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.warn("Window thinks it is group. Group doesn't think so", group.name, win.name);
				}
			}
		}
	}

	cleanupGroupGaps(group) {
		let windowBounds = this.getBoundsOfGroupWindows(group);
		//windowBounds = this.cleanupSharedEdges(group, windowBounds, 0);
		windowBounds = this.cleanupGaps(group, windowBounds);
		this.setBoundsOfGroupWindows(group, windowBounds);
	}

	actualStopTilingOrTabbing(params, callback) {
		let { err, mousePosition, operation } = params;

		let sourceWindow;
		//This will only happen if you're dragging a pin or something from a menu --- the window hasn't been spawned yet.
		if (!operation.sourceWindowName) {
			//dragged a non-existent window. wait.
			if (this.tilingAndTabbingWindow) {
				operation.sourceWindowName = this.tilingAndTabbingWindow.name;
				this.tilingAndTabbingWindow = null;
			} else {
				return setTimeout(() => {
					__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("StopTilingOrTabbing.actualStopTilingOrTabbing waiting for window");
					this.actualStopTilingOrTabbing(params, callback);
				}, 100);
			}
		}

		sourceWindow = this.getWindow(operation.sourceWindowName);

		//take what the user sent on dragend
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("StopTilingOrTabbing.actualStopTilingOrTabbing", operation.sourceWindowName, mousePosition);

		if (!sourceWindow) {
			//detaching from tabbing so window is not registered with docking
			__WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].getInstance({ name: operation.sourceWindowName }, (err, windowWrap) => {
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("StopTilingOrTabbing.no source window. Adding to docking.", operation.sourceWindowName);
				this.addWindow(windowWrap).then(() => {
					this.checkIfWindowIsInGroup(windowWrap.name);
					__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("StopTilingOrTabbing.recursive call");
					this.actualStopTilingOrTabbing(params, callback);
				});
			});
			return;
		}
		//Use the underlying wrapper.
		var self = this;
		function fillHoles(group, bounds) {
			group.fillHole(bounds);
			self.cleanupGroupGaps(group);
			self.buildSnapRelationshipsForGroup(group);
		}

		var oldBounds = sourceWindow.getBounds();
		var fillHolesFor = [];

		var sourceMoveRequest = {
			name: sourceWindow.name,
			changeType: 0
		};
		if (sourceWindow.groupNames && sourceWindow.groupNames.length) {
			//check if we need to fill holes
			for (let i = sourceWindow.groupNames.length - 1; i >= 0; i--) {
				let g = sourceWindow.groupNames[i];
				let group = this.getGroup(g);
				if (group.isARectangle() && group.isMovable) {
					fillHolesFor.push(group);
				}
			}
		}
		//Make usre hidden tabs come back to life.
		sourceWindow.show({ saveState: true });
		self.hideGroupMask();
		//When we call request-move, docking will stp if the window is between two snapping regions. By temporarily reducing the buffer size, we prevent inadventent snaps and move our window to where we calculated it should go.
		const BUFFER = this.bufferSize;
		this.setBufferSize(0);
		let parent = sourceWindow.win.parentWindow;
		switch (operation.type) {
			case "tiling":
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing case Tiling", err, operation);

				let groupNames;
				let placement = this.checkShortCircuits(operation.newBounds.maskBounds, operation.newBounds.maskBounds);
				operation.newBounds.newWindowBounds = this.checkShortCircuits(operation.newBounds.newWindowBounds, operation.newBounds.newWindowBounds);

				//let oldGroups = clone(sourceWindow.groupNames);
				//2nd param is 'deleteGroupsWith1Window'
				this.removeWindowFromAllGroups(sourceWindow, false);
				if (parent) {
					parent._removeWindow({ windowIdentifier: sourceWindow.win.identifier });
				}

				switch (operation.tileWith) {
					case "group":
						__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing case GROUP", "removeWindow", sourceWindow.name, err);
						CALCULATOR.removeWindow(sourceWindow.name, false);
						/*if (sourceWindow.groupNames.includes(operation.group.name)) { //remove window from group before scaling group
      	this.removeWindowFromGroup(sourceWindow.name, operation.group.name);
      	let group = this.getGroup(operation.group.name);
      	this.cleanupGroupGaps(group);
      	this.buildSnapRelationshipsForGroup(group);
      }*/

						if (fillHolesFor.some(grp => operation.group.name === grp.name)) {
							fillHoles(operation.group, oldBounds);
							fillHolesFor = [];
						}
						//if (!(oldBounds.width === operation.group.width || oldBounds.height === operation.group.height) && operation.group.sharesAnEdgeWith(oldBounds)) {
						operation.group.scale(operation.newBounds.newWindowBounds, operation.edge, this);
						operation.group.resizeHandle = operation.edge;
						operation.group.updateBounds();
						let groupBounds = operation.group.getBounds();

						//If the scale shortcircuits, we'll want to shift the window's placement to reflect the actual group bounds instead of what we planned for.
						switch (operation.edge) {
							case "right":
								placement.left = groupBounds.right;
								placement.right = placement.width + placement.left;
								break;
							case "left":
								placement.right = groupBounds.left;
								placement.left = placement.right - placement.width;
								break;
							case "top":
								placement.bottom = groupBounds.top;
								placement.top = placement.bottom - placement.height;
								break;
							case "bottom":
								placement.top = groupBounds.bottom;
								placement.bottom = placement.top + placement.height;
								break;
						}
						groupNames = [operation.group.name];
						__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing case GROUP", "addWindow", sourceWindow.name);
						CALCULATOR.addWindow(sourceWindow.name, sourceWindow);
						break;
					case "window":
						__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing case window", "removeWindow", operation);
						//If the scale shortcircuits, we'll want to shift the window's placement to reflect the actual group bounds instead of what we planned for.
						switch (operation.edge) {
							case "right":
								placement.left = operation.newBounds.newWindowBounds.right;
								placement.right = placement.width + placement.left;
								break;
							case "left":
								placement.right = operation.newBounds.newWindowBounds.left;
								placement.left = placement.right - placement.width;
								break;
							case "top":
								placement.bottom = operation.newBounds.newWindowBounds.top;
								placement.top = placement.bottom - placement.height;
								break;
							case "bottom":
								placement.top = operation.newBounds.newWindowBounds.bottom;
								placement.bottom = placement.top + placement.height;
								break;
						}

						operation.window.setBounds(operation.newBounds.newWindowBounds);
						operation.window.win.stopMove();
						groupNames = operation.window.groupNames;
						break;
				}

				//this.buildSnapRelationships(sourceWindow);
				Object.assign(sourceMoveRequest, placement);

				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing requestMove 0", sourceMoveRequest);

				if (groupNames && groupNames.length) {
					// If target is already part of a group or merging with a group
					this.requestMove(sourceMoveRequest, bounds => {
						__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing requestMove 1", bounds);

						if (bounds && !bounds.finished) return;
						for (var g of groupNames) {
							let group = this.addWindowToGroup({ groupName: g, win: sourceWindow });
							this.cleanupGroupGaps(group);
							this.buildSnapRelationshipsForGroup(group);
							group.updateBounds();
						}
						this.updateGroupData();
						this.onMouseUp();
						if (fillHolesFor.length) {
							for (let g of fillHolesFor) {
								fillHoles(g, oldBounds);
							}
						}
						if (groupNames.length == 1) {
							// this was a snapping group. Need to dock.
							this.formGroup(sourceWindow.name, { isMovable: true });
							this.updateGroupData();
						}
					});
				} else {
					// If target is not part of a group
					this.requestMove(sourceMoveRequest, bounds => {
						__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing requestMove 2", bounds);
						if (bounds && !bounds.finished) return;
						let group = this.addWindowToGroup({
							win: operation.window,
							isMovable: true
						});
						this.addWindowToGroup({
							win: sourceWindow,
							groupName: group.name
						});
						this.updateGroupData();
						this.onMouseUp();
						if (fillHolesFor.length) {
							for (let g of fillHolesFor) {
								fillHoles(g, oldBounds);
							}
						}
					});
				}

				break;
			case "swapping":
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing case swapping", operation);
				let sourceWindowNewBounds = operation.window.getBounds();
				let targetWindowNewBounds = sourceWindow.getBounds();

				sourceWindow.setBounds(sourceWindowNewBounds);
				operation.window.setBounds(targetWindowNewBounds);
				sourceWindow.win.stopMove();
				operation.window.win.stopMove();

				this.buildSnapRelationships(sourceWindow);
				this.buildSnapRelationships(operation.window);

				this.buildSnapRelationshipsForGroup(operation.group);
				this.updateGroupData();
				break;

			case "detaching":
				let newBounds = {
					top: mousePosition.y,
					left: mousePosition.x,
					right: sourceWindow.width + mousePosition.x,
					bottom: sourceWindow.height + mousePosition.y,
					width: sourceWindow.width,
					height: sourceWindow.height
				};

				if (parent) {
					//detaching from tabs (TODO: detaching from tabbed window in docked group)
					__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing case detaching with parent", operation, newBounds, parent.name);

					/*
     	If remove window breaks, try this code, which was from master. We couldn't figure out which to take.
     parent.removeWindow({ showWindow: true, windowIdentifier: sourceWindow.win.identifier }, () => {
     						// TODO: this is dirty. this callback should not happen unless the window is actually removed.
     						setTimeout(() => {
     							sourceWindow.show();
     							sourceWindow.setBounds(newBounds);
     						}, 100);
     					});
     */
					parent._removeWindow({ showWindow: true, windowIdentifier: sourceWindow.win.identifier });
					sourceWindow.setBounds(newBounds);
				}
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing case detaching no parent", operation, newBounds);

				this.removeWindowFromAllGroups(sourceWindow, false);

				this.updateGroupData();
				Object.assign(sourceMoveRequest, newBounds);
				this.requestMove(sourceMoveRequest, bounds => {
					if (bounds && !bounds.finished) return;
					if (fillHolesFor.length) {
						for (let g of fillHolesFor) {
							fillHoles(g, oldBounds);
						}
					}
					this.onMouseUp();
				});
				//this.buildSnapRelationships(sourceWindow);
				break;
			case "tabbing":
				__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing case tabbing break", operation ? operation.type : null);
				// If old window was in a group, fill holes for that group
				Object.assign(sourceMoveRequest, sourceWindow.getBounds());
				/** We want to remove the source window from all its groups.
     * We also want to disband any groups that, as a result of
     * that removal, only have 1 window in the group. That said,
     * if we remove the group before the call to fillHoles(),
     * the math won't be right, and we'll have a bug in some
     * edge cases. Ideally, calling this.updateGroupData() should
     * automatically disband any group with only 1 window, but, as
     * things are, there are timing issues that cause thigns to
     * break down with this approach.
     *
     * The current solution is to cache the groups sourceWindow
     * belongs to, remove the sourceWindow from all its groups
     * but DON'T disband any of them, call fillHole(),
     * then go back and remove any single-member groups if there
     * are any.
     *
     * @todo Make this sort of logic more centralized and automatic.
     */
				const oldGroupNames = clone(sourceWindow.groupNames);
				this.removeWindowFromAllGroups(sourceWindow, false);
				this.removeWindow(sourceWindow.name);
				if (fillHolesFor.length) {
					for (let g of fillHolesFor) {
						fillHoles(g, sourceWindow.getBounds());
					}
				}
				// This loop checks for any newly created single-member groups and disbands them.
				for (let groupName of oldGroupNames) {
					const group = this.getGroup(groupName);
					if (!group) continue;
					const groupWindowsNames = group.getWindowNames();
					if (groupWindowsNames.length !== 1) continue;
					this.removeWindowFromGroup(groupWindowsNames[0], groupName, true);
				}

				this.onMouseUp();
				this.updateGroupData();
		}
		this.setBufferSize(BUFFER);
		if (operation.group) {
			operation.group.resizeHandle = null;
		}
		callback();
	}

	stopTilingOrTabbing(err, response, callback) {
		this.hideModalScrim();
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Docking:stopTilingOrTabbing start", err, response, this.operation ? this.operation.type : null);

		if (!this.operation) return;
		let op = this.operation;
		delete this.operation;
		if (response.data.action) {
			op.type = response.data.action;
		}

		/* Show Window at Last Scrim Position */
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.debug("Stop tiling or tabbing");
		this.stopTrackingMouse((err, mousePosition) => {
			mousePosition = response.data.mousePosition || mousePosition;
			if (op.type === "swapping" && op.sourceWindowName) {
				__WEBPACK_IMPORTED_MODULE_5__WindowAbstractions_FinsembleWindowInternal__["FinsembleWindowInternal"].getInstance({ name: op.sourceWindowName }, (err, windowWrap) => {
					//replace the sourceWindowName with the parent's name. This way the whole stacked group gets swapped instead of the individual tab.
					if (windowWrap.parentWindow) {
						op.sourceWindowName = windowWrap.parentWindow.name;
					}
					this.actualStopTilingOrTabbing({ err, mousePosition, operation: op }, callback);
				});
			} else {
				this.actualStopTilingOrTabbing({ err, mousePosition, operation: op }, callback);
			}
		});
	}
	/**
  * Performs all necessary propogation to docking functions for when a window docks or undocks.
  * This is the main point for docking/undocking. It calls the DockableWindow to dock/undock and set appropriate window options. It also calls to claim/unclaim space for a monitor.
  *
  * @param {object} params An object containing the properties for docking/undocking
  * @param {object} params.win The window requesting to dock/undock
  * @param {number} params.location An enum from DockableWindow. An integer which ties back to a dockable location
  * @param {object} params.oldBounds An object containing the width and height of a window before it was docked. This allows for the window to return to those dimensions when undocked. Null when undocking.
  * @param {boolean} params.unchangedDockState If true, the docked/undocked state wont be changed
  * @param {string} params.action Action supplied when the dock state is not being determined here
  */
	handleMonitorSpaceChanges(params) {
		let { win, location, oldBounds, unchangedDockState, action } = params;

		location = location || "top";
		__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.debug("HANDLE MONITORSPACE CHANGES", params);

		location = location.trim().toUpperCase(); //since "top" !== "TOP"
		let dockableWin = this.getWindow(win.name);
		if (dockableWin.monitorDockablePositions[location] !== undefined || dockableWin.monitorDockablePositions[location] !== null) {
			location = dockableWin.monitorDockablePositions[location];
		} else {
			//if the location to dock to is not a valid location, just ignore the request
			return false;
		}
		let monitor = dockableWin.isDocked && win.dockedMonitor ? win.dockedMonitor : this.getMonitorForWindow(win);
		let serviceMonitors = this.getMonitors(); //All the monitors the docking service is tracking
		let monitors = Object.keys(serviceMonitors).map(mon => {
			return serviceMonitors[mon];
		}); //convert object to array

		//let action;
		let dockableMonitor;
		let monIndex = -1;
		for (let i = 0; i < monitors.length; i++) {
			let dockMonitorFromArray = monitors[i];
			if (dockMonitorFromArray.name === monitor.name) {
				dockableMonitor = dockMonitorFromArray;
				monIndex = i;
				break;
			}
		}

		if (dockableMonitor) {
			if (!unchangedDockState) {
				if (location !== dockableWin.monitorDockablePositions.NONE) {
					dockableWin.dock(monitor, oldBounds, location);
					action = "dock";
				} else {
					dockableWin.undock();
					action = "undock";
				}
			}
			let adjustedMonitor = this.adjustClaimedSpace({ action, dockableWin, dockableMonitor, location });
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.debug("Replacing monitor at index: ", monIndex);
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.debug("replacing: ", monitors[monIndex].unclaimedRect);
			__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.debug("changing to: ", adjustedMonitor.unclaimedRect);
			monitors.splice(monIndex, 1, adjustedMonitor);
			this.updateMonitorInfo(monitors);
			if (action === "dock") this.moveAllWindowsOutOfClaimedSpace(dockableWin, monitors);
		}
	}

	initialize(done) {
		var self = this;
		window.RouterClient = __WEBPACK_IMPORTED_MODULE_3__clients_routerClientInstance___default.a;
		this.createRouterEndpoints();
		//The launcherService waits for the windowService. We need to create our group mask, but not before we can route the request through LauncherService.spawn.
		__WEBPACK_IMPORTED_MODULE_10__clients_launcherClient___default.a.onReady(() => {
			this.createGroupMask();
		});
		__WEBPACK_IMPORTED_MODULE_2_async___default.a.parallel([function setupDockingCalculator(done) {
			__WEBPACK_IMPORTED_MODULE_11__clients_configClient___default.a.getValue({ field: "finsemble" }, function (err, response) {
				serviceConfig = response.services.windowService.config || response.services.dockingService.config; //Finsemble config
				/* Assimliation config can come from the defaults (/finsemble/configs/core/services.json),
    client-configured servicesConfig, or in betaFeatures config (deprecated).  */
				const servicesConfigAssim = response.servicesConfig.assimilation;
				const betaAssim = response.betaFeatures.assimilation;
				const defaultAssim = response.services.assimilationService.config;
				serviceConfig.assimilationEnabled = Object.assign(defaultAssim, servicesConfigAssim || betaAssim);
				if (response.docking) {
					__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.warn("Docking is no longer supported as a top level prop. Expected under serviceConfigs.");
				} else if (response.betaFeatures.docking) {
					__WEBPACK_IMPORTED_MODULE_12__clients_logger___default.a.system.error("Docking is no longer a beta feature. A docking prop was expected under serviceConfigs.");
				}

				//right place is servicesConfig, old place was top-level config. Otherwise we use an empty object that gets merged with finsemble defaults.
				let docking;
				if (response.servicesConfig && response.servicesConfig.docking) {
					docking = response.servicesConfig.docking;
				} else if (response.docking) {
					docking = response.docking;
				} else {
					docking = {};
				}

				if (Object.keys(docking).length > 0) {
					serviceConfig = Object.assign(serviceConfig, docking);
				}
				//todo why the hell is headerHeight in groupMode? FIX.
				serviceConfig.GROUP_MODE = {
					enabled: docking.enabled,
					behavior: "explicit",
					groupTileBuffer: docking.groupTileBuffer || 30,
					headerHeight: docking.headerHeight || 32,
					requireRectangularityForGroupResize: docking.requireRectangularityForGroupResize,
					fillHolesOnUndock: docking.fillHolesOnUndock,
					undockDisbandsEntireGroup: docking.undockDisbandsEntireGroup
				};
				self.setupDockingCalculator();
				done();
			});
		}, function initializeMonitors(done) {
			__WEBPACK_IMPORTED_MODULE_1__common_util__["getAllMonitors"](res => {
				//Iterating through the product of util.getAllMonitors to set the unclaimedRect equal to availableRect. getAllMonitors returns openfinMonitors which do not contain unclaimedRect
				res = res.map(monitor => {
					let mon = monitor;
					mon.unclaimedRect = clone(mon.availableRect);
					return mon;
				});
				self.updateMonitorInfo(res);
				done();
			});
		}], done);
	}
}

function DefaultDockingOptions(configData, MIN_HEIGHT, MIN_WIDTH) {
	//If no options, start with an empty object so that all the lines below don't cause catastrophic failures.
	if (!configData.options) configData.options = {};
	let checkForTaskbarOptions = configData.options.hasOwnProperty("options");

	this.dockable = configData.options.dockable || false;

	this.ephemeral = configData.options.ephemeral;

	this.undockedParams = {
		width: configData.options.width,
		height: configData.options.height
	};
	this.dockedParams = {
		width: configData.options.dockedWidth ? configData.options.dockedWidth : configData.options.width,
		height: configData.options.dockedHeight ? configData.options.dockedHeight : configData.options.height
	};
	this.startsDocked;

	if (!this.dockable) {
		this.startsDocked = false;
	} else {
		this.startsDocked = configData.options.docked || "top";
	}

	this.overwriteDockedOptions = configData.options.overwriteStartDocked || false;
	this.ignoreSnappingRequests = configData.options.ignoreSnappingRequests || false;
	this.showTaskbarIcon = checkForTaskbarOptions ? configData.options.options.showTaskbarIcon : true;
	this.minHeight = configData.options.minHeight || MIN_HEIGHT;
	this.maxHeight = configData.options.maxHeight || Infinity;
	this.minWidth = configData.options.minWidth || MIN_WIDTH;
	this.maxWidth = configData.options.maxWidth || Infinity;
}

/* harmony default export */ __webpack_exports__["a"] = (DockingMain);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockingMain.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Docking\\dockingMain.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 209 */,
/* 210 */,
/* 211 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_launcherClient__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_launcherClient___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__clients_launcherClient__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_async__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_async___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_async__);
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }



function allChecksPass(checks) {
	//every check is true
	return checks.every(check => check);
}
function getFailedChecks(checks) {
	return checks.filter(check => !check);
}
class TestLauncher {
	constructor(componentType) {
		this.componentType = componentType;
		this.myWindowName = this.componentType + " - Spawn Test";
		this.secondaryWindowName = this.myWindowName + " - Secondary";
		__WEBPACK_IMPORTED_MODULE_0__clients_launcherClient___default.a.initialize();
	}
	/**
  * Closes the windows we spawned earlier.
  * @param {*} cb
  */
	destructor(cb = Function.prototype) {
		this.myWindow._close({}, cb);
		this.secondaryWindow._close({}, cb);
		this.secondaryWindowIdentifier = null;
		this.myWindowIdentifier = null;
	}
	/**
  * Gets all the monitors
  */
	getMonitors() {
		const promiseResolver = resolve => {
			__WEBPACK_IMPORTED_MODULE_0__clients_launcherClient___default.a.getMonitorInfoAll((err, monitors) => {
				this.monitors = monitors;
				resolve(monitors);
			});
		};
		return new Promise(promiseResolver);
	}
	/**
  * Runs all of the tests for show window on each monitor.
  */
	testShowWindow() {
		var _this = this;

		return new Promise((() => {
			var _ref = _asyncToGenerator(function* (resolve, reject) {
				//Prep work is: spawn window 1, spawn relative window
				var { err, response } = yield __WEBPACK_IMPORTED_MODULE_0__clients_launcherClient___default.a.spawn(_this.componentType, { name: _this.myWindowName, left: "center", top: "center" });
				_this.myWindowIdentifier = response.windowIdentifier;
				_this.myWindow = activeWindows.getWindow(_this.myWindowName);

				var { err, response } = yield __WEBPACK_IMPORTED_MODULE_0__clients_launcherClient___default.a.spawn(_this.componentType, { name: _this.secondaryWindowName });
				_this.secondaryWindow = activeWindows.getWindow(_this.secondaryWindowName);
				_this.secondaryWindowIdentifier = response.windowIdentifier;

				yield _this.getMonitors();
				let tests = [];
				//Run each test on every monitor.
				_this.monitors.forEach((() => {
					var _ref2 = _asyncToGenerator(function* (monitor) {
						tests.push((() => {
							var _ref3 = _asyncToGenerator(function* (done) {
								yield _this.showWindowCenteredOnMonitor(monitor);
								yield _this.showUnclaimed(monitor);
								yield _this.showAbsoluteMonitor(monitor);
								yield _this.showWindowRelative(monitor);
								yield _this.showWindowAdjacent(monitor);
								// await this.forceOntoMonitor(monitor);
								done();
							});

							return function (_x4) {
								return _ref3.apply(this, arguments);
							};
						})());
					});

					return function (_x3) {
						return _ref2.apply(this, arguments);
					};
				})());
				__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_async__["series"])(tests, function () {
					_this.destructor();
					resolve();
				});
			});

			return function (_x, _x2) {
				return _ref.apply(this, arguments);
			};
		})());
	}
	/**
  * Private function to reduce some boilerplate for the tests.
  * @param {*} params
  * @param {*} cb
  */
	_showWindow(params, cb) {
		var _this2 = this;

		return _asyncToGenerator(function* () {
			var { data: initialBounds } = yield _this2.myWindow._getBounds();
			var { data: relativeWindowBounds } = yield _this2.secondaryWindow._getBounds();
			const promiseResolver = function (resolve) {
				__WEBPACK_IMPORTED_MODULE_0__clients_launcherClient___default.a.showWindow(_this2.myWindowIdentifier, params, _asyncToGenerator(function* () {
					let { data: newBounds } = yield _this2.myWindow._getBounds();
					let monitor = _this2.monitors[params.monitor];
					let monitorBounds;
					//Return the proper monitor rect for comparisons.
					if (params.position === "monitor" || !params.position) {
						monitorBounds = monitor.monitorRect;
					} else {
						console.log("returning unclaimed monitor");
						monitorBounds = monitor.unclaimedRect;
					}

					resolve({ relativeWindowBounds, initialBounds, newBounds, monitorBounds });
				}));
			};
			return new Promise(promiseResolver);
		})();
	}
	/**
  * Tests 'adjacent' for top/left/right/bottom
  * @param {*} monitor
  */
	showWindowAdjacent(monitor) {
		var _this3 = this;

		return _asyncToGenerator(function* () {
			var self = _this3;
			const promiseResolver = function (resolve) {
				__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_async__["series"])([(() => {
					var _ref5 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "show adjacent top");
						let { initialBounds, newBounds, relativeWindowBounds } = yield self._showWindow({
							monitor: monitor.position,
							top: "adjacent",
							relativeWindow: self.secondaryWindowIdentifier
						});
						//top: adjacent takes the window places the top of the window up against the bottom of the relative window
						const checks = [newBounds.top === relativeWindowBounds.bottom, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						if (allChecksPass(checks)) {
							console.info(self.componentType, "show adjacent top Success", monitor.position, monitor.unclaimedRect.top, newBounds.top);
							return done();
						}
						throw new Error("Show window adjacent top failed", getFailedChecks(checks));
					});

					function top(_x5) {
						return _ref5.apply(this, arguments);
					}

					return top;
				})(), (() => {
					var _ref6 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "show adjacent left");
						let { initialBounds, newBounds, relativeWindowBounds } = yield self._showWindow({
							monitor: monitor.position,
							left: "adjacent",
							relativeWindow: self.secondaryWindowIdentifier
						});
						//left: adjacent takes the window places the left edge up against the right edge of the relative window
						const checks = [newBounds.left === relativeWindowBounds.right, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						if (allChecksPass(checks)) {
							console.info(self.componentType, "show adjacent left Success", monitor.position, monitor.unclaimedRect.left, newBounds.left);
							return done();
						}
						throw new Error("Show window adjacent left failed", getFailedChecks(checks));
					});

					function left(_x6) {
						return _ref6.apply(this, arguments);
					}

					return left;
				})(), (() => {
					var _ref7 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "show adjacent right");
						let { initialBounds, newBounds, relativeWindowBounds } = yield self._showWindow({
							monitor: monitor.position,
							right: "adjacent",
							relativeWindow: self.secondaryWindowIdentifier
						});
						//right: adjacent takes the window places it right edge against the left edge of the relative window
						const checks = [newBounds.right === relativeWindowBounds.left, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						console.info(self.componentType, "show adjacent right callback", monitor.position, monitor.unclaimedRect.right, newBounds.right);
						if (allChecksPass(checks)) {
							console.info(self.componentType, "show adjacent right Success", monitor.position, monitor.unclaimedRect.right, newBounds.right);
							return done();
						}
						throw new Error("Show window adjacent right failed", getFailedChecks(checks));
					});

					function right(_x7) {
						return _ref7.apply(this, arguments);
					}

					return right;
				})(), (() => {
					var _ref8 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "show adjacent bottom");
						let { initialBounds, newBounds, relativeWindowBounds } = yield self._showWindow({
							monitor: monitor.position,
							bottom: "adjacent",
							relativeWindow: self.secondaryWindowIdentifier
						});
						//bottom: adjacent places the window's bottom adjacent to the top of the relative window.
						const checks = [newBounds.bottom === relativeWindowBounds.top, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						console.info(self.componentType, "show adjacent bottom callback", monitor.position, newBounds.bottom);
						if (allChecksPass(checks)) {
							console.info(self.componentType, "show adjacent bottom Success", monitor.position, monitor.unclaimedRect.bottom, newBounds.bottom);
							return done();
						}
						throw new Error("Show window adjacent bottom failed", getFailedChecks(checks));
					});

					function bottom(_x8) {
						return _ref8.apply(this, arguments);
					}

					return bottom;
				})()], resolve);
			};
			return new Promise(promiseResolver);
		})();
	}
	/**
  * Tests top/left: center
  * @param {*} monitor
  */
	showWindowCenteredOnMonitor(monitor) {
		var _this4 = this;

		return _asyncToGenerator(function* () {
			let self = _this4;
			const promiseResolver = (() => {
				var _ref9 = _asyncToGenerator(function* (resolve) {
					console.info(self.componentType, "showWindowCenteredOnAllMonitors", monitor.position, monitor.unclaimedRect.left);
					let { initialBounds, newBounds, monitorBounds } = yield self._showWindow({
						monitor: monitor.position,
						left: "center",
						top: "center"
					});
					const checks = [newBounds.top === monitorBounds.top + monitorBounds.height / 2 - initialBounds.height / 2, newBounds.left === monitorBounds.left + monitorBounds.width / 2 - initialBounds.width / 2, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
					//if all checks pass, resolve.
					if (allChecksPass(checks)) {
						console.info(self.componentType, "showWindowCenteredOnAllMonitors Success", monitor.position);
						return resolve();
					}
					throw new Error("Show window failed", getFailedChecks(checks));
				});

				return function promiseResolver(_x9) {
					return _ref9.apply(this, arguments);
				};
			})();
			return new Promise(promiseResolver);
		})();
	}
	/**
  * Tests position 'relative', which treats the relative window as thgouh it were a monitor. So top:10 puts the window's top 10px below the relative window's top.
  * @param {} monitor
  */
	showWindowRelative(monitor) {
		var _this5 = this;

		return _asyncToGenerator(function* () {
			var self = _this5;
			const ADJUSTMENT = -30;
			const promiseResolver = function (resolve) {
				__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_async__["series"])([(() => {
					var _ref10 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "show relative top");
						let { initialBounds, newBounds, relativeWindowBounds } = yield self._showWindow({
							monitor: monitor.position,
							top: ADJUSTMENT,
							position: "relative",
							relativeWindow: self.secondaryWindowIdentifier
						});
						//top: relative takes the window and butts the bottom of the relative window up against the top of the other one,
						const checks = [newBounds.top === relativeWindowBounds.top + ADJUSTMENT, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						if (allChecksPass(checks)) {
							console.info(self.componentType, "show relative top Success", monitor.position, monitor.unclaimedRect.top, newBounds.top);
							return done();
						}
						throw new Error("Show window relative top failed", getFailedChecks(checks));
					});

					function top(_x10) {
						return _ref10.apply(this, arguments);
					}

					return top;
				})(), (() => {
					var _ref11 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "show relative left");
						let { initialBounds, newBounds, relativeWindowBounds } = yield self._showWindow({
							monitor: monitor.position,
							left: ADJUSTMENT,
							position: "relative",
							relativeWindow: self.secondaryWindowIdentifier
						});
						//top: relative takes the window and butts the bottom of the relative window up against the top of the other one,
						const checks = [newBounds.left === relativeWindowBounds.left + ADJUSTMENT, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						if (allChecksPass(checks)) {
							console.info(self.componentType, "show relative left Success", monitor.position, monitor.unclaimedRect.left, newBounds.left);
							return done();
						}
						throw new Error("Show window relative left failed", getFailedChecks(checks));
					});

					function left(_x11) {
						return _ref11.apply(this, arguments);
					}

					return left;
				})(), (() => {
					var _ref12 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "show relative right");
						let { initialBounds, newBounds, relativeWindowBounds } = yield self._showWindow({
							monitor: monitor.position,
							right: ADJUSTMENT,
							position: "relative",
							relativeWindow: self.secondaryWindowIdentifier
						});
						//top: relative takes the window and butts the bottom of the relative window up against the top of the other one,
						const checks = [newBounds.right === relativeWindowBounds.right - ADJUSTMENT, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						console.info(self.componentType, "show relative right callback", monitor.position, relativeWindowBounds.right, newBounds.right);
						if (allChecksPass(checks)) {
							console.info(self.componentType, "show relative right Success", monitor.position, monitor.unclaimedRect.right, newBounds.right);
							return done();
						}
						throw new Error("Show window relative right failed", getFailedChecks(checks));
					});

					function right(_x12) {
						return _ref12.apply(this, arguments);
					}

					return right;
				})(), (() => {
					var _ref13 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "show relative bottom");
						let { initialBounds, newBounds, relativeWindowBounds } = yield self._showWindow({
							monitor: monitor.position,
							bottom: ADJUSTMENT,
							position: "relative",
							relativeWindow: self.secondaryWindowIdentifier
						});
						//top: relative takes the window and butts the bottom of the relative window up against the top of the other one,
						const checks = [newBounds.bottom === relativeWindowBounds.bottom - ADJUSTMENT, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						console.info(self.componentType, "show relative bottom callback", monitor.position, newBounds.bottom);
						if (allChecksPass(checks)) {
							console.info(self.componentType, "show relative bottom Success", monitor.position, monitor.unclaimedRect.bottom, newBounds.bottom);
							return done();
						}
						throw new Error("Show window relative bottom failed", getFailedChecks(checks));
					});

					function bottom(_x13) {
						return _ref13.apply(this, arguments);
					}

					return bottom;
				})()], resolve);
			};
			return new Promise(promiseResolver);
		})();
	}
	/**
  * tests position: unclaimed. top:0 should be below the toolbar. monitorBounds come back as 'monitor.unclaimedRect'
  *  @param {*} monitor
  */
	showUnclaimed(monitor) {
		var _this6 = this;

		return _asyncToGenerator(function* () {
			let self = _this6;
			const promiseResolver = function (resolve) {
				__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_async__["series"])([(() => {
					var _ref14 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "showUnclaimed top");
						let { initialBounds, newBounds, monitorBounds } = yield self._showWindow({
							monitor: monitor.position,
							left: "center",
							top: 0,
							position: "unclaimed"
						});
						const checks = [monitorBounds.top === newBounds.top, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						if (allChecksPass(checks)) {
							console.info(self.componentType, "showUnclaimed top Success", monitor.position, monitor.unclaimedRect.top, newBounds.top);
							return done();
						}
						throw new Error("Show window unclaimed top failed", getFailedChecks(checks));
					});

					function top(_x14) {
						return _ref14.apply(this, arguments);
					}

					return top;
				})(), (() => {
					var _ref15 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "showUnclaimed left");
						let { initialBounds, newBounds, monitorBounds } = yield self._showWindow({
							monitor: monitor.position,
							left: 0,
							top: 0,
							position: "unclaimed"
						});
						const checks = [monitorBounds.left === newBounds.left, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						if (allChecksPass(checks)) {
							console.info(self.componentType, "showUnclaimed left Success", monitor.position, monitor.unclaimedRect.left, newBounds.left);
							return done();
						}
						throw new Error("Show window unclaimed left failed", getFailedChecks(checks));
					});

					function left(_x15) {
						return _ref15.apply(this, arguments);
					}

					return left;
				})(), (() => {
					var _ref16 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "showUnclaimed right");
						let { initialBounds, newBounds, monitorBounds } = yield self._showWindow({
							monitor: monitor.position,
							right: 0,
							position: "unclaimed",
							top: 50
						});
						const checks = [monitorBounds.right === newBounds.right, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						console.info(self.componentType, "showUnclaimed right callback", monitor.position, monitor.unclaimedRect.right, newBounds.right);
						if (allChecksPass(checks)) {
							console.info(self.componentType, "showUnclaimed right Success", monitor.position, monitor.unclaimedRect.right, newBounds.right);
							return done();
						}
						throw new Error("Show window unclaimed right failed", getFailedChecks(checks));
					});

					function right(_x16) {
						return _ref16.apply(this, arguments);
					}

					return right;
				})(), (() => {
					var _ref17 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "showUnclaimed bottom");
						let { initialBounds, newBounds, monitorBounds } = yield self._showWindow({
							monitor: monitor.position,
							bottom: 0,
							left: 0,
							position: "unclaimed"
						});
						const checks = [monitorBounds.bottom === newBounds.bottom, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						console.info(self.componentType, "showUnclaimed bottom callback", monitor.position, monitorBounds.bottom, newBounds.bottom);
						if (allChecksPass(checks)) {
							console.info(self.componentType, "showUnclaimed bottom Success", monitor.position, monitor.unclaimedRect.bottom, newBounds.bottom);
							return done();
						}
						throw new Error("Show window unclaimed bottom failed", getFailedChecks(checks));
					});

					function bottom(_x17) {
						return _ref17.apply(this, arguments);
					}

					return bottom;
				})()], resolve);
			};
			return new Promise(promiseResolver);
		})();
	}
	/**
  * Tests position: "monitor", which should place windows without caring about claimed space.
  * @param {} monitor
  */
	showAbsoluteMonitor(monitor) {
		var _this7 = this;

		return _asyncToGenerator(function* () {
			let self = _this7;
			const promiseResolver = function (resolve) {
				__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_async__["series"])([(() => {
					var _ref18 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "showMonitor top");
						let { initialBounds, newBounds, monitorBounds } = yield self._showWindow({
							monitor: monitor.position,
							left: "center",
							top: 0,
							position: "monitor"
						});
						const checks = [monitorBounds.top === newBounds.top, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						console.info(self.componentType, "showMonitor top callback", monitor.position, monitorBounds.top, newBounds);
						if (allChecksPass(checks)) {
							console.info(self.componentType, "showAbsoluteMonitor top Success", monitor.position, monitor.unclaimedRect.top, newBounds.top);
							return done();
						}
						throw new Error("Show window absolute top failed", getFailedChecks(checks));
					});

					function top(_x18) {
						return _ref18.apply(this, arguments);
					}

					return top;
				})(), (() => {
					var _ref19 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "showMonitor left");
						let { initialBounds, newBounds, monitorBounds } = yield self._showWindow({
							monitor: monitor.position,
							left: 0,
							top: 0,
							position: "monitor"
						});
						const checks = [monitorBounds.left === newBounds.left, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						console.info(self.componentType, "showMonitor left callback", monitor.position, monitorBounds.left, newBounds);
						if (allChecksPass(checks)) {
							console.info(self.componentType, "showMonitor left Success", monitor.position, monitor.unclaimedRect.left, newBounds.left);
							return done();
						}
						throw new Error("Show window monitor left failed", getFailedChecks(checks));
					});

					function left(_x19) {
						return _ref19.apply(this, arguments);
					}

					return left;
				})(), (() => {
					var _ref20 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "showMonitor right");
						let { initialBounds, newBounds, monitorBounds } = yield self._showWindow({
							monitor: monitor.position,
							right: 0,
							top: 0,
							position: "monitor"
						});
						const checks = [monitorBounds.right === newBounds.right, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						console.info(self.componentType, "showMonitor right callback", monitor.position, monitorBounds.right, newBounds);
						if (allChecksPass(checks)) {
							console.info(self.componentType, "showMonitor right Success", monitor.position, monitor.unclaimedRect.right, newBounds.right);
							return done();
						}
						throw new Error("Show window monitor right failed", getFailedChecks(checks));
					});

					function right(_x20) {
						return _ref20.apply(this, arguments);
					}

					return right;
				})(), (() => {
					var _ref21 = _asyncToGenerator(function* (done) {
						console.info(self.componentType, "showMonitor bottom");
						let { initialBounds, newBounds, monitorBounds } = yield self._showWindow({
							monitor: monitor.position,
							bottom: 0,
							left: 0,
							position: "monitor"
						});
						const checks = [monitorBounds.bottom === newBounds.bottom, initialBounds.width === newBounds.width, initialBounds.height === newBounds.height];
						console.info(self.componentType, "showMonitor bottom callback", monitor.position, monitorBounds.bottom, newBounds);
						if (allChecksPass(checks)) {
							console.info(self.componentType, "showMonitor bottom Success", monitor.position, monitor.unclaimedRect.bottom, newBounds.bottom);
							return done();
						}
						throw new Error("Show window monitor bottom failed", getFailedChecks(checks));
					});

					function bottom(_x21) {
						return _ref21.apply(this, arguments);
					}

					return bottom;
				})()], resolve);
			};
			return new Promise(promiseResolver);
		})();
	}

	//todo
	spawn() {
		//spawn specific
		// this.claimMonitorSpace();
		// this.dockOnSpawn();
		// this.addToWorkspace();
		// this.changeName();
		// this.spawnData();
		// this.options();
	}

	doTests() {
		var _this8 = this;

		return _asyncToGenerator(function* () {
			return new Promise((() => {
				var _ref22 = _asyncToGenerator(function* (resolve, reject) {
					yield _this8.testShowWindow();
					resolve();
				});

				return function (_x22, _x23) {
					return _ref22.apply(this, arguments);
				};
			})());
		})();
	}
};

window.Tester = {
	run: (() => {
		var _ref23 = _asyncToGenerator(function* () {
			let OF = new TestLauncher("Welcome Component");
			yield OF.doTests();

			let Native = new TestLauncher("Notepad");
			yield Native.doTests();
		});

		return function run() {
			return _ref23.apply(this, arguments);
		};
	})()
};

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Launcher\\_test.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Launcher\\_test.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 212 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_async__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_async___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_async__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_window_WindowAbstractions_BaseWindow__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_window_WindowAbstractions_BaseWindow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__services_window_WindowAbstractions_BaseWindow__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_window_windowGroup__ = __webpack_require__(103);





const groupStates = {
	NORMAL: 0,
	MINIMIZING: 1,
	MINIMIZED: 2,
	RESTORING: 3
};

// NOTE: this file provides a temporary solution for window groups that must operate off private wrappers (as opposed to public).
// Otherwise, the code is the same as in WindowGroup.  TBD is to reevaluate WindowGroup and it's usage.

class LauncherGroup extends __WEBPACK_IMPORTED_MODULE_3__common_window_windowGroup__["a" /* WindowGroup */] {
	constructor(params) {
		super(params, { Logger: __WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a });
		this.name = params.name;
		this.groupState = groupStates.NORMAL;
		this.GROUPSTATES = groupStates;
		this.isAlwaysOnTop = false;
		if (params.windows) {
			this.windows = params.windows;
		} else {
			this.windows = {};
		}
	}

	minimizeAll() {
		if (this.groupState == groupStates.RESTORING) {
			this.interruptRestore = true;
			this.groupState = groupStates.NORMAL;
		}
		if (this.groupState !== groupStates.NORMAL) return;
		this.groupState = groupStates.MINIMIZING;
		for (let windowName in this.windows) {
			let win = this.windows[windowName];
			if (win.windowState != __WEBPACK_IMPORTED_MODULE_2__services_window_WindowAbstractions_BaseWindow__["BaseWindow"].WINDOWSTATE.MINIMIZED) win._minimize();
		}
		this.groupState = groupStates.MINIMIZED;
		this.interruptRestore = false;
	}

	minimize(params) {
		if (!params) {
			return this.minimizeAll();
		}
		let { windowList, componentType } = params;
		if (componentType) windowList = this.findAllByComponentType(componentType);

		if (windowList) {
			for (let w of windowList) {
				let win;
				if (!(typeof w === "string" || w instanceof String)) {
					win = this.getWindow(w.windowName || w.name);
				} else {
					win = this.getWindow(w);
				}
				if (win && win.windowState != __WEBPACK_IMPORTED_MODULE_2__services_window_WindowAbstractions_BaseWindow__["BaseWindow"].WINDOWSTATE.MINIMIZED) {
					win._minimize();
				}
			}
		}
	}

	restoreAll(cb = Function.prototype) {
		if (this.groupState !== groupStates.MINIMIZED) return cb();
		var self = this;
		this.groupState = groupStates.RESTORING;
		function restoreWindow(windowName, done) {
			if (self.interruptRestore) return done("restore interrupted");
			let win = self.windows[windowName];
			if (win._restore) {
				if (win.windowState != __WEBPACK_IMPORTED_MODULE_2__services_window_WindowAbstractions_BaseWindow__["BaseWindow"].WINDOWSTATE.NORMAL) self.windows[windowName]._restore({}, done);else done();
			} else {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error(windowName + " does not implment restore");
				done();
			}
		}
		__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_async__["forEach"])(Object.keys(this.windows), restoreWindow, function (err, data) {
			self.interruptRestore = false;
			if (!err) {
				self.groupState = groupStates.NORMAL;
			}
			cb(err, data);
		});
	}
	//takes an array of window names.
	restore(params, cb) {
		let { windowList } = params;
		var self = this;
		function restoreWindow(windowName, done) {
			let win = self.windows[windowName];
			if (win._restore) {
				self.windows[windowName]._restore({}, done);
			} else {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error(windowName + " does not implment restore");
				done();
			}
		}
		__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_async__["forEach"])(windowList, restoreWindow, cb);
	}

	// Bring all windoes to top. Also sets the state of the group to always on top and new windows added to the group inherit the state of thw window
	allAlwaysOnTop(alwaysOnTop) {
		this.isAlwaysOnTop = alwaysOnTop;
		this.alwaysOnTop({ windowList: Object.keys(this.windows), restoreWindows: true, alwaysOnTop: alwaysOnTop });
	}

	// Set specific windows to top. Generally should call allAlwaysOnTop
	alwaysOnTop(params) {
		if (!params || params && Object.keys(params).length === 0) {
			params = { windowList: Object.keys(this.windows), restoreWindows: true };
		}
		let { windowList, componentType } = params;
		if (windowList && typeof windowList[0] !== "string") {
			windowList = windowList.map(win => win.windowName);
		}
		if (componentType) windowList = this.findAllByComponentType(componentType);
		var self = this;
		if (!windowList) windowList = Object.keys(this.windows);
		for (let w in windowList) {
			let win;
			if (Array.isArray(windowList)) w = windowList[w];

			if (!(typeof w === "string" || w instanceof String)) {
				win = self.getWindow(w.windowName || w.name);
			} else {
				win = self.getWindow(w);
			}
			if (win) {
				win.alwaysOnTop(params.alwaysOnTop);
			}
		}
	}

	/**
  * Brings a group of windows to the front (BTF). In other words, puts those windows on top of any other windows so that they can be seen
  * @param {object} params
  * @param {bool=true} params.restoreWindows If true then windows will attempt to be restored (unminimized) before being brought to front
  * @param {array} params.windowList The list of windows to BTF. Defaults to the windows that are in this window group. This can be a list of window names, or a list of actual window instances.
  * @param {string} params.componentType Optionally provide a componentType to BTF only those windows of that type in the list of windows.
  */
	bringToFront(params, cb = Function.prototype) {
		var self = this;
		if (!params) params = {};
		if (typeof params.restoreWindows == "undefined") params.restoreWindows = true;

		// TODO, [terry] this "windowList" logic is copy and pasted many times in windowGroup.js. It should be in a helper function.
		let { windowList, componentType } = params;
		// Determine if the windowList is a list of window names, or a list of actual windows (in which case we extract the name)
		if (windowList && typeof windowList[0] !== "string") {
			windowList = windowList.map(win => win.windowName);
		}

		// Get all windows *in this group* of this component type, then convert them into an array of strings to be passed into the other group functions.
		if (componentType) {
			windowList = [];
			let windows = this.findAllByComponentType(componentType);
			windows.forEach(win => {
				if (win && win.name) {
					windowList.push(win.name);
				}
			});
		}

		// Default to the windows in this group, actually the most common case
		if (!windowList) windowList = Object.keys(this.windows);

		function doBTF() {
			// TODO, [terry] this chunk of code is repeated three times in windowGroup.js. It should be abstracted away
			// TODO, [sidd] this code now uses async, previously was not using using the callback properly. Make all group functions do this

			__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0_async__["each"])(windowList, (w, callback) => {
				let win;
				//if (Array.isArray(windowList)) w = windowList[w];

				if (!(typeof w === "string" || w instanceof String)) {
					win = self.getWindow(w.windowName || w.name);
				} else {
					win = self.getWindow(w);
				}
				if (win) {
					win._bringToFront(callback);
				} else {
					callback();
				}
			}, () => {
				cb();
			});
		}

		if (params.restoreWindows) {
			if (typeof windowList[0] !== "string") {
				windowList = Object.keys(windowList);
			}
			this.restore({ windowList }, doBTF);
		} else {
			doBTF();
		}
	}

	hyperFocus(params) {
		let windowList = params.windowList;
		// If we got a list of identifiers, convert to names
		for (let w in windowList) {
			let win = windowList[w];
			if (!(typeof win === "string" || win instanceof String)) {
				windowList[w] = win.windowName || win.name;
			}
		}

		for (let windowName in this.windows) {
			if (!windowList.includes(windowName)) {
				this.windows[windowName]._minimize();
			} else {
				this.windows[windowName]._restore(() => {
					this.windows[windowName]._bringToFront();
				});
			}
		}
	}

	findAllByComponentType(componentType) {
		var windowList = [];
		for (let windowName in this.windows) {
			let thisWindowComponentType = this.windows[windowName].componentType;
			if (componentType === thisWindowComponentType) {
				//TODO - figure out why this is different in some cases
				windowList.push(this.windows[windowName]);
			}
		}
		return windowList;
	}
}
/* harmony export (immutable) */ __webpack_exports__["LauncherGroup"] = LauncherGroup;


 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Launcher\\launcherGroup.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Launcher\\launcherGroup.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 213 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_async__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_async___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_async__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_launcherClient__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_launcherClient___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__clients_launcherClient__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__clients_logger__);


__WEBPACK_IMPORTED_MODULE_1__clients_launcherClient___default.a.initialize();

__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.start();
class AutoArrange {
	constructor(params) {
		this.isArranged = {};
		this.DockingCalculator = params.DockingCalculator;
	}

	/**
  *
  * For more, see {@link https://medium.com/@jtreitz/the-algorithm-for-a-perfectly-balanced-photo-gallery-914c94a5d8af#.c09v4fn1e}. This is a javascript port of a python solution to the linear partition problem.
  * @param {Array} aspectRatios An array of numbers; in this case, aspect ratios.
  * @param {Number} rows Number of rows to distribute aspectRatios across.
  * @returns {Array} ans Returns an array of arrays. Each internal array represents a row.
  * @private
  */
	linearPartition(aspectRatios, rows) {
		var numWindows = aspectRatios.length;

		if (rows <= 0) {
			return [];
		}
		if (rows > numWindows) {
			return aspectRatios.map(function (x) {
				return [x];
			});
		}

		var table = [];
		var solution = [];

		for (var i = 0; i < numWindows; i++) {
			var row = [];
			for (var j = 0; j < rows; j++) {
				row.push(0);
			}
			table.push(row);
		}

		for (var i = 0; i < numWindows - 1; i++) {
			var row = [];
			for (var j = 0; j < rows - 1; j++) {
				row.push(0);
			}
			solution.push(row);
		}
		for (var i = 0; i < numWindows; i++) {
			if (i != 0) {
				table[i][0] = aspectRatios[i].ar + table[i - 1][0];
			} else {
				table[i][0] = aspectRatios[i].ar;
			}
		}

		for (var j = 0; j < rows; j++) {
			table[0][j] = aspectRatios[0].ar;
		}

		for (var i = 1; i < numWindows; i++) {
			for (var j = 1; j < rows; j++) {
				var m = [];
				var min;
				for (var x = 0; x < i; x++) {
					var list_of_pairs = [];
					var list_of_maxes = [];
					for (var x = 0; x < i; x++) {
						var max = Math.max(table[x][j - 1], table[i][0] - table[x][0]);
						list_of_pairs.push([max, x]);
						list_of_maxes.push(max);
					}
				}
				min = Math.min.apply(this, list_of_maxes);
				m = list_of_pairs.reduce(function (previous, current) {
					return current[0] < previous[0] ? current : previous;
				}, [Infinity]);
				table[i][j] = m[0];
				solution[i - 1][j - 1] = m[1];
			}
		}

		numWindows = numWindows - 1;
		rows = rows - 2;
		var ans = [];
		while (rows >= 0) {
			var sub_list = [];
			for (var i = solution[numWindows - 1][rows] + 1; i < numWindows + 1; i++) {
				sub_list.push(aspectRatios[i]);
			}
			ans = [sub_list].concat(ans);
			numWindows = solution[numWindows - 1][rows];
			rows--;
		}

		var beginning_list = [];
		for (var i = 0; i < numWindows + 1; i++) {
			beginning_list.push(aspectRatios[i]);
		}
		ans = [beginning_list].concat(ans);

		return ans;
	}

	/**
  * @private
  * @param {LauncherClient~windowDescriptor} windowDescriptor
  * @param {monitorDimensions} monitorDimensions
  * @returns {boolean} Whether window is on the current monitor.
  */
	windowOnMonitor(windowDescriptor, monitorDimensions) {
		//if right or left edge is within the window's bounds.
		return windowDescriptor.monitor.name === monitorDimensions.name;
	}

	getWindowsOnMonitor(windowDescriptorList, monitorDimensions) {
		let self = this;
		let descriptors = windowDescriptorList.filter((obj, ind) => {
			if (!obj) {
				// this should not be needed but temporary fix for cleanup
				__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.warn("autoarrange.getWindowsOnMonitor: unexpected null object");
				return false;
			}
			//2nd param says to not throw the error if the window isn't found.
			let win = self.DockingCalculator.getWindow(obj.name, false);
			if (!win) {
				return false;
			}
			if (obj.windowType === "OpenFinWindow") {
				try {
					let isArrangeable = obj.customData.foreign.services.dockingService.isArrangeable;
					if (typeof obj.customData.foreign.services.dockingService.isArrangable !== "undefined") {
						__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.warn("isArrangable was a typo. It will be deprecated in Finsemble 2.0 in favor of isArrangeable");
						isArrangeable = obj.customData.foreign.services.dockingService.isArrangable;
					}

					if (isArrangeable) {
						return self.windowOnMonitor(win, monitorDimensions);
					}
					return false;
				} catch (e) {
					return false;
				}
			}
			return self.windowOnMonitor(win, monitorDimensions);
		});

		let windowsOnMonitor = [];
		for (let i = 0; i < descriptors.length; i++) {
			let descriptor = descriptors[i];
			let win = self.DockingCalculator.getWindow(descriptor.name);
			win.monitor = self.DockingCalculator.getMonitorForWindow(win);
			if (!self.DockingCalculator.cachedPositions[win.monitor.name][win.name]) {
				self.DockingCalculator.cachedPositions[win.monitor.name][win.name] = {
					uuid: win.uuid,
					left: win.left,
					right: win.right,
					bottom: win.bottom,
					top: win.top,
					height: win.height,
					width: win.width
				};
			}

			windowsOnMonitor.push({
				name: win.name,
				ar: win.width / win.height,
				top: parseInt(win.top),
				bottom: parseInt(win.bottom),
				left: parseInt(win.left),
				right: parseInt(win.right)
			});
		}

		// before arranging, sort window list based on location to influence final arrangement;
		// note the comparison function is not transitive, so results aren't aways what expected;
		// however, they are usually intuitive when moving a single window.
		windowsOnMonitor.sort(function (a, b) {
			var result;
			if (a.top === b.top && a.left === b.left) {
				result = 0; // a == b
			} else if (a.top < b.top && a.left < b.left) {
				result = -1; // a < b
			} else if (a.top < b.bottom && a.left < b.left) {
				result = -1; // a < b
			} else {
				result = 1; // a > b
			}
			return result;
		});

		windowsOnMonitor.forEach(function (finWin, windex) {
			let wrap = self.DockingCalculator.getWindow(finWin.name);
			wrap.restore();
			wrap.bringToFront();
		});
		return windowsOnMonitor;
	}

	/**
  * Arranges all windows in the current workspace that are visible on the current monitor. For more about the algorithm used to distribute windows across rows, see {@link https://medium.com/@jtreitz/the-algorithm-for-a-perfectly-balanced-photo-gallery-914c94a5d8af#.c09v4fn1e this post}. The algorithm chooses the number of rows by taking the square root of the number of windows on the monitor and rounding down. 3 windows results in 1 row. 4 windows results in 2 rows. 8 windows will be arranged across 2 rows. 9 windows will be arranged across 3 rows. Other breakpoints are 16, 25, and 36.
  * @param {Object} monitorDimensions Montior dimensions of a given monitor. This value is passed
  * in from {@link util#getMonitorInfo}.
  */
	arrange(monitorDimensions, allMonitors, cb) {
		let self = this;
		if (self.isArranged[monitorDimensions.name]) {
			self.isArranged[monitorDimensions.name] = !self.isArranged[monitorDimensions.name];
			//Reverts windows and sends statusUpdate.
			self.revertArrangedWindows(monitorDimensions);
			return;
		}

		self.isArranged[monitorDimensions.name] = !self.isArranged[monitorDimensions.name];
		self.DockingCalculator.sendAutoArrangeStatusUpdate();
		var resizeQueue = [];
		/**
   * Goes through all windows and returns the windows that are:
   * 1) In the active workspace and
   * 2) On the monitor that autoarrange was clicked on.
   */
		__WEBPACK_IMPORTED_MODULE_1__clients_launcherClient___default.a.getActiveDescriptors(function (err, response) {
			//convert object to an array to make filtering easy.
			let descriptors = Object.keys(response).map(key => {
				return response[key];
			});
			//get groups of windows
			let groupsFromWorkspace = self.DockingCalculator.getGroups();
			//get individual windows
			let windowsOnMonitor = self.getWindowsOnMonitor(descriptors, monitorDimensions);

			//A concatenation of windows and groups built into singular objects
			//so they can be treated as 'boxes to rearrange' wrather than individual windows
			let boxesToArrange = [];

			//This is an array of 'windows' that are actually a group of windows.
			//Built into a single object that looks like a 'window' by the arrangement code
			let groupBoxes = [];
			//Map through each individual window to determine if it is part of a group
			windowsOnMonitor.map(win => {
				//Uses lodash to search through the workspaces to see if this win
				//is contained in the group's 'windows' array
				let currentWindowsGroupBoxName = _.findKey(groupsFromWorkspace, thisGroup => {
					if (!thisGroup.isMovable) return false;
					return _.findKey(thisGroup.windows, windowInsideGroup => {
						return windowInsideGroup.name === win.name;
					});
				});

				//See if a 'win' has already been built for this group. Retrieve it if so, otherwise
				//one will be created.
				let groupBox = groupBoxes.length > 0 ? groupBoxes.find(thisGroupBox => {
					return thisGroupBox.name === currentWindowsGroupBoxName;
				}) : null;

				if (!currentWindowsGroupBoxName) {
					//There is no group that this win belongs to, add it to the final array
					boxesToArrange.push(win);
				} else {
					if (groupBox) {
						//There is already a 'win' for this group in windowsGroups, we need to
						//average the win aspect ratios. This may have to change
						let groupIndex = groupBoxes.length > 0 ? groupBoxes.findIndex(thisGroupBox => {
							return thisGroupBox.name === groupsFromWorkspace[currentWindowsGroupBoxName].ar;
						}) : null;
						groupBox.ar = groupsFromWorkspace[currentWindowsGroupBoxName].width / groupsFromWorkspace[currentWindowsGroupBoxName].height;
						//Add the new win to the groups windows array
						groupBox.windows.push(win);
						if (groupIndex) {
							groupBoxes.splice(groupIndex, 1);
							groupBoxes.push(groupBox);
						}
					} else {
						//There is no 'win' for this group. Creating one
						let newGroupBox = {
							ar: win.ar,
							bottom: groupsFromWorkspace[currentWindowsGroupBoxName].bottom,
							left: groupsFromWorkspace[currentWindowsGroupBoxName].left,
							name: groupsFromWorkspace[currentWindowsGroupBoxName].name,
							right: groupsFromWorkspace[currentWindowsGroupBoxName].right,
							top: groupsFromWorkspace[currentWindowsGroupBoxName].top,
							windows: [win],
							isGroup: true
						};
						groupBoxes.push(newGroupBox);
					}
				}
			});
			//Add the array of groupWindows to the array already containing loner windows
			boxesToArrange = boxesToArrange.concat(groupBoxes);

			//Number of rows is determined by the square root of the number of windows on the monitor.
			//This gives us a preference for N x N grids. If you have 9 windows, you get 3 rows.
			//If the aspect ratios are set correctly, you get 3x3.
			var rowGroups = self.linearPartition(boxesToArrange, Math.floor(Math.sqrt(boxesToArrange.length)));
			var height = Math.floor(monitorDimensions.height / rowGroups.length);
			//Iterates through the properly partitioned windows and queues up the movements.
			rowGroups.forEach(function (windowsInGroup, groupIndex) {
				var top = monitorDimensions.top + groupIndex * height;
				var width = monitorDimensions.width / windowsInGroup.length;
				//if we're on the last row and the number of rows is not divisible by the monitor's height,
				//we need to add the rounding error to the height so that there isn't a gap
				//between the taskbar and the bottom edge of our last row.
				var rowHeightTotal = height * rowGroups.length;
				if (groupIndex === rowGroups.length - 1 && rowHeightTotal !== monitorDimensions.height) {
					//since we round down the initial height calculation, rowHeightTotal
					//will always be less than the monitor's height.
					height += monitorDimensions.height - rowHeightTotal;
				}
				//Now that the position is set, queue up the movement.
				windowsInGroup.forEach(function (dockableWin, windex) {
					//The 'windows' that are being looped through are are sometimes individual windows
					//and other times they are a group of windows. If its a group, we need to loop
					//through the group and add each window in the group. Fitting it into the space allotted for a single window
					if (dockableWin.isGroup) {
						//in this case dockableWin is actually a dockableGroup
						let left = width * windex + monitorDimensions.left;
						let group = self.DockingCalculator.getGroup(dockableWin.name);
						let bounds = {
							top,
							left,
							height,
							width
						};

						//TriggeredByAutoArrange will prevent the dockingService from deleting the windows
						//cahcedPositions. We want to maintain these so that when we revert, grouped windows
						//return to where they expect
						group.moveTo({
							top: top,
							left: left,
							height: height,
							triggeredByAutoArrange: true
						}, () => {
							bounds.triggeredByAutoArrange = true;
							group.scale(bounds, "topLeft", self.DockingCalculator, () => {
								group.stopMove();
							});
						});
					} else {
						resizeQueue.push({
							dockableWin: self.DockingCalculator.getWindow(dockableWin.name),
							height: height,
							width: width,
							top: top,
							left: width * windex + monitorDimensions.left
						});
					}
				});
				//animate each window. when they're all done, call the callback, form snapping relationships, and leave this function.
				if (resizeQueue && resizeQueue.length && resizeQueue.length) {
					__WEBPACK_IMPORTED_MODULE_0_async___default.a.each(resizeQueue, animateWindow, function () {
						self.DockingCalculator.formGroup(resizeQueue[0].dockableWin.name, { isMovable: false });
						self.isArranged[monitorDimensions.name] = true;
						if (cb) {
							cb();
						}
					});
				} else {
					if (cb) cb();
				}
			});
		});

		function animateWindow(request, done) {
			let { height, width, top, left, dockableWin } = request;
			let bounds = {
				height: height,
				width: width,
				top: top,
				left: left
			};
			dockableWin.animatePositionAndHeight(bounds, function () {
				self.DockingCalculator.buildSnapRelationships(dockableWin);
				dockableWin.win.stopMove();
				RouterClient.transmit("DockingService." + dockableWin.name, {
					command: "saveWindowLocation",
					bounds: bounds
				});
				done();
			});
		}
	}

	/**
  * Returns windows to where they were before an auto-arrange occured.
  */
	revertArrangedWindows(monitorDimensions) {
		let self = this;
		__WEBPACK_IMPORTED_MODULE_0_async___default.a.each(Object.keys(self.DockingCalculator.cachedPositions[monitorDimensions.name]), revertWindow, onLocationReverted);

		function revertWindow(windowName, done) {
			let bounds = self.DockingCalculator.cachedPositions[monitorDimensions.name][windowName];
			if (!bounds.uuid) {
				return done();
			}

			let dockableWindow = self.DockingCalculator.getWindow(windowName);
			delete self.DockingCalculator.cachedPositions[monitorDimensions.name][windowName];

			dockableWindow.animatePositionAndHeight({
				height: bounds.height,
				width: bounds.width,
				top: bounds.top,
				left: bounds.left,
				duration: 250
			}, function () {
				dockableWindow.win.stopMove();
				//wrap.setBounds({bounds}); <- this is here because animations were causing problems. animations are temporarily disabled see autoarrange.js.
				self.DockingCalculator.buildSnapRelationships(dockableWindow);
				self.DockingCalculator.checkGroupMembership(dockableWindow);
				RouterClient.transmit("DockingService." + dockableWindow.name, {
					command: "saveWindowLocation",
					bounds: bounds
				});
				done();
			});
		}
		function onLocationReverted() {
			self.DockingCalculator.updateGroupData();
			__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("Publishing Group Update: Revert Autoarrange");
			self.DockingCalculator.publishGroupUpdate();
		}

		self.DockingCalculator.sendAutoArrangeStatusUpdate();
	}
}

/* harmony default export */ __webpack_exports__["a"] = (AutoArrange);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\MultiWindowFeatures\\autoArrange.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\MultiWindowFeatures\\autoArrange.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__windowPrimitivesEntryPoints__ = __webpack_require__(170);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__windowPrimitivesEntryPoints___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__windowPrimitivesEntryPoints__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__windowCreateEntryPoints__ = __webpack_require__(169);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__windowCreateEntryPoints___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__windowCreateEntryPoints__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tabbingEntryPoints__ = __webpack_require__(168);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__tabbingEntryPoints___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__tabbingEntryPoints__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__launcherEntryPoints__ = __webpack_require__(167);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__launcherEntryPoints___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__launcherEntryPoints__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_async__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_async___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_async__);








class ServiceEntryPoints {
	constructor(manifest, dockingMain, launcher, stackedWindowManager) {
		this.finsembleLauncherEntry = new __WEBPACK_IMPORTED_MODULE_4__launcherEntryPoints__["LauncherEntry"](manifest, launcher);
		this.finsembleWindowPrimitivesEntry = new __WEBPACK_IMPORTED_MODULE_1__windowPrimitivesEntryPoints__["WindowPrimitives"](dockingMain);
		this.finsembleWindowCreateEntry = new __WEBPACK_IMPORTED_MODULE_2__windowCreateEntryPoints__["WindowCreateEntry"](manifest, launcher);
		this.finsembleTabbingEntry = new __WEBPACK_IMPORTED_MODULE_3__tabbingEntryPoints__["TabbingEntry"](stackedWindowManager);
		this.bindFunctions();
	}

	bindFunctions() {
		this.initialize = this.initialize.bind(this);
		this.shutdown = this.shutdown.bind(this);
	}

	initialize(done) {
		__WEBPACK_IMPORTED_MODULE_0__clients_logger___default.a.system.debug("ServiceEntryPoints.initialize start");
		__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_async__["series"])([finish => {
			this.finsembleLauncherEntry.initialize(finish);
		}, finish => {
			this.finsembleWindowPrimitivesEntry.initialize(finish);
		}, finish => {
			this.finsembleWindowCreateEntry.initialize(finish);
		}, finish => {
			this.finsembleTabbingEntry.initialize(finish);
		}], () => {
			__WEBPACK_IMPORTED_MODULE_0__clients_logger___default.a.system.debug("ServiceEntryPoints.initialize done");
			done();
		});
	}

	shutdown(done) {
		__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5_async__["series"])([finish => {
			this.finsembleLauncherEntry.shutdown(finish);
		}, finish => {
			this.finsembleWindowPrimitivesEntry.shutdown(finish);
		}, finish => {
			this.finsembleWindowCreateEntry.shutdown(finish);
		}, finish => {
			this.finsembleTabbingEntry.shutdown(finish);
		}], () => {
			__WEBPACK_IMPORTED_MODULE_0__clients_logger___default.a.system.debug("ServiceEntryPoints.shutdown done");
			done();
		});
	}
}
/* harmony export (immutable) */ __webpack_exports__["a"] = ServiceEntryPoints;


 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\ServiceEntryPoints\\setupAllEntryPoints.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\ServiceEntryPoints\\setupAllEntryPoints.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 215 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_events__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_routerClientInstance__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_routerClientInstance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__clients_routerClientInstance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_system__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_system___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__common_system__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_window_FinsembleWindow__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_window_FinsembleWindow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__common_window_FinsembleWindow__);
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }







/**
 *
 * The SplinterAgent is basically a go-between for the SplinterAgentPool and the SplinterAgentSlave. Because the LauncherService cannot spawn windows for other Openfin applications, the pool uses these Agents to communicate with sibling openfin Applications (the SplinterAgentSlave). The primary responsibilities of the SplinterAgent are to:
 * 1. Send messages to its SplinterAgentSlave, asking it to spawn child windows.
 * 2. Keep track of the number of windows that the slave is managing.
 * 3. Notify the pool if it's maxed out or empty.
 *
 * @class SplinterAgent
 * @extends {events.EventEmitter}
 */
class SplinterAgent extends __WEBPACK_IMPORTED_MODULE_0_events___default.a.EventEmitter {
	/**
  * Sets up the object.
  * @param {object} config
  * @memberof SplinterAgent
  */
	constructor(config) {
		super();
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("SplinterAgent constructor", config);
		this.spawnsAnything = config.spawnsAnything;
		this.windows = [];
		this.windowStore = config.windowStore;
		this.uuid = config.app.uuid;
		this.componentsICanSpawn = config.components || [];
		this.servicesICanSpawn = config.services || [];
		this.maxWindowsPerAgent = config.maxWindowsPerAgent;
		this.app = config.app;
		this.config = config;
		this.isMaxed = false;

		this.addListeners();
	}
	/**
  * Invoked by the SplinterAgentPool. It returns a boolean, whether it's capable of spawning a given item.
  * @param {any} str
  * @returns {boolean}
  * @memberof SplinterAgent
  */
	canSpawn(str) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug(`SplinterAgent.canSpawn: My uuid: ${this.app.uuid}. Checking on: ${str}`);
		return this.componentsICanSpawn.includes(str) || this.servicesICanSpawn.includes(str);
	}
	/**
  * Sets the title of the Slave. This is only so that finding the window in localhost:9090 is easy. It outputs something like:
  * Splinter Agent | Open Windows: 4 | Components: Advanced Chart, Simple Chart | Services: N/A
  *
  * @memberof SplinterAgent
  */
	setSlaveTitle() {
		let title = `Splinter Agent | Open Windows: ${this.windows.length} | Components:${this.componentsICanSpawn.toString() || "N/A"}, Services: ${this.servicesICanSpawn.toString() || "N/A"}`;
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug(`SplinterAgent.setSlaveTitle: ${title}`);
		__WEBPACK_IMPORTED_MODULE_2__clients_routerClientInstance___default.a.transmit(`${this.app.uuid}.setTitle`, { title: title });
	}

	/**
  * When a window is added or removed, check to see if we've exceeded our maximum. When a window closes, make sure to remove it locally.
  *
  * @memberof SplinterAgent
  */
	addListeners() {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("SplinterAgent.addListeners");
		this.app.addEventListener("window-closed", this.removeWindow.bind(this));
		this.app.addEventListener("window-crashed", e => {
			// if a window crashes we need to remove references to is.
			__WEBPACK_IMPORTED_MODULE_4__common_window_FinsembleWindow__["FinsembleWindow"].getInstance(e, (err, response) => {
				// get the refenece to the window
				if (err) {
					__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("Window crash getInstance error", err);
				} else {
					response.close(); //close the window
				}

				this.removeWindow(e);
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("Agent child crashed", e);
			});
		});
		this.app.addEventListener("window-out-of-memory", e => {
			this.removeWindow(e);
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("Agent child out of memory", e);
		});
		this.app.addEventListener("closed", e => {
			this.shutdown();
			this.emit("agent-closed");
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.log("Agent closed", e);
		});
		this.app.addEventListener("crashed", e => {
			this.shutdown();
			this.emit("agent-crashed");
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("Agent crashed", e);
		});
		this.app.addEventListener("out-of-memory", e => {
			this.shutdown();
			this.emit("agent-crashed");
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("Agent out of memory", e);
		});
		this.app.addEventListener("not-responding", e => {
			this.shutdown();
			this.emit("agent-crashed");
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("Agent not responding", e);
		});
	}

	/**
  * Adds a window to the agent.
  *
  * @param {windowDescriptor} windowDescriptor
  * @memberof SplinterAgent
  */
	addWindow(windowDescriptor) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.info("SplinterAgent.addWindow", windowDescriptor);
		this.windows.push(windowDescriptor);
		this.setSlaveTitle();
		this.checkMaximum();
	}
	/**
  * If we have reached the maximum number of windows per process, we emit an event telling the LauncherService to spawn off a new renderer.
  *
  * @returns
  * @memberof SplinterAgent
  */
	checkMaximum() {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("SplinterAgent.checkMaximum");
		this.isMaxed = this.windows.length === this.maxWindowsPerAgent;
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug(`SplinterAgent.checkMaximum. numWindows: ${this.windows.length}. maxWindows: ${this.maxWindowsPerAgent}. isMaxed:${this.isMaxed}`);

		if (this.isMaxed) {
			this.emit("windowMaximumReached");
			return;
		}
	}

	/**
  * Sends a message to its Slave asking it to spawn a child window.
  * @param {windowDescriptor} params.windowDescriptor Windowdescriptor.
  * @callback {function} cb
  */

	requestSpawn(windowDescriptor, cb) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("SplinterAgent.requestSpawn");
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("SplinterAgent.requestSpawn arguments:", windowDescriptor);
		let self = this;
		windowDescriptor.uuid = this.app.uuid;
		if (window.pendingWindowNames) {
			window.pendingWindowNames[windowDescriptor.name] = windowDescriptor.uuid;
		}
		this.addWindow(windowDescriptor);
		var onSpawnedChannel = windowDescriptor.name + ".onSpawned";
		var onWindowSpawned = function () {
			let fw = __WEBPACK_IMPORTED_MODULE_3__common_system__["System"].Window.wrap(windowDescriptor.uuid, windowDescriptor.name);
			/**
    * When the window is closed, the agent notices, checks its quota, and notifies the Pool if it is empty.
    *
    */
			function onWindowClosed(e) {

				__WEBPACK_IMPORTED_MODULE_2__clients_routerClientInstance___default.a.removeListener(onSpawnedChannel, onWindowSpawned);
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.info(`SplinterAgent.noticed window closed: ${e.name}`);
				self.removeWindow({ name: e.name });
				//Removing until OF can fix a bug that removes all listeners.
				// fw.removeEventListener('closed', onWindowClosed);
			}
			fw.addEventListener("closed", onWindowClosed);
			fw.addEventListener("crashed", onWindowClosed);

			if (self.windowStore) {
				// launcher's windowStore is passed througn in the constructor. We need to check for it because it does not exist for agents created by pools for services.
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.info(`Window spawned and connected to the agent. Adding window to global store. ${windowDescriptor.name}`);

				// This is where spawned windows get initially added to the global window store used for wrapping windows
				let identifier = { name: windowDescriptor.name, uuid: windowDescriptor.uuid, windowType: "OpenFinWindow" }; // this is the minimum set of information required to build a window wrapper
				//windowDescriptor.identifier = identifier;

				// minimize the footprint of stuff in the store - this is the only thing needed from the manifest (used in asyncConnectToEventRouter in the routerClient)
				let finConfig = windowDescriptor.customData.manifest.finsemble;
				windowDescriptor.customData.manifest = {
					finsemble: {
						FinsembleUUID: finConfig.FinsembleUUID,
						applicationRoot: finConfig.applicationRoot,
						routerDomainRoot: finConfig.moduleRoot,
						router: finConfig.router
					}
				};

				if (cb) {
					cb(fw);
				}

				return;
			}

			if (cb) {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.info(`Window spawned and connected to the agent. Did not add window to global store. Invoking callback.${windowDescriptor.name}`);
				cb(fw);
			}
		};
		__WEBPACK_IMPORTED_MODULE_2__clients_routerClientInstance___default.a.addListener(onSpawnedChannel, onWindowSpawned);
		__WEBPACK_IMPORTED_MODULE_2__clients_routerClientInstance___default.a.transmit(`${this.app.uuid}.spawn`, { windowDescriptor: windowDescriptor });
	}
	/**
  * Removes a window from the agent.
  *
  * @param {windowDescriptor} windowDescriptor
  * @memberof SplinterAgent
  */
	removeWindow(windowDescriptor) {
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug(`SplinterAgent.removeWindow. window name: ${windowDescriptor.name}`);
		for (let i = 0; i < this.windows.length; i++) {
			let descriptor = this.windows[i];
			if (descriptor.name === windowDescriptor.name) {
				this.windows.splice(i, 1);
				this.emit("windowRemoved", windowDescriptor);
				break;
			}
		}
		if (this.windows.length === 0) {
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug(`Agent empty ${this.app.uuid}`);
			this.emit("empty");
		}
		this.setSlaveTitle();
		this.checkMaximum();
	}

	shutdown(cb = Function.prototype) {
		var _this = this;

		return _asyncToGenerator(function* () {
			_this.removeListener("empty", _this.shutdown);
			yield __WEBPACK_IMPORTED_MODULE_3__common_system__["System"].closeApplication(_this.app);
		})();
	}

}

/* harmony default export */ __webpack_exports__["a"] = (SplinterAgent);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Splintering\\SplinterAgent.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Splintering\\SplinterAgent.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 216 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_events___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_events__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__SplinterAgent__ = __webpack_require__(215);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_util__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_lodash_clone__ = __webpack_require__(173);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_lodash_clone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_lodash_clone__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_async__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_async___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_async__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_system__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__common_system___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__common_system__);
function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }










/**
 * The `SplinterAgentPool` manages and routes spawn requests from the `LauncherService` to the appropriate `SplinterAgent`s. For more, seed the overview in this folder (`Splintering.md`).
 * @class SplinterAgentPool
 * @extends {events.EventEmitter}
 */
class SplinterAgentPool extends __WEBPACK_IMPORTED_MODULE_0_events___default.a.EventEmitter {
	/**
  * Creates an instance of SplinterAgentPool, given an object from `configs/processConfig.json`.
  * @param {any} pool
  * @memberof SplinterAgentPool
  */
	constructor(config, callback = Function.prototype) {
		super();
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("SplinterAgentPool constructor", config);
		this.finsembleConfig = config.finsembleConfig;
		this.manifest = config.manifest;
		/**
   * @property {string='requestedNewAgent', 'ready'} Before requesting a new process, the pool changes its status to "requestedNewAgent". When the new agent is added to the pool, the status is set to "ready".
   */
		this.status = "requestedNewAgent";
		this.spawnQueue = [];
		this.agents = [];
		this.defaultAgentLabel = config.defaultAgentLabel || "defaultAgent";
		this.shuttingDown = false;
		this.windowStore = config.windowStore;
		this.shutdown = this.shutdown.bind(this);
		this.removeAgent = this.removeAgent.bind(this);
		const defaultAgentConfig = { agentLabel: this.defaultAgentLabel, spawnsAnything: true, maxWindowsPerAgent: config.maxWindowsForDefaultAgent || Infinity };
		config.agentList = config.agentList.concat([defaultAgentConfig]);
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("Spawning initial agent list", config.agentList);
		this.spawnSplinterAgent = this.spawnSplinterAgent.bind(this);
		this.poolReady = false;
		__WEBPACK_IMPORTED_MODULE_6_async___default.a.each(config.agentList, this.spawnSplinterAgent, () => {
			this.poolReady = true;
			this.flushSpawnQueue();
			callback();
		});
	}

	// return the number of available agents for a given agentLabel.  An agent is available if it can handle another childWindow (i.e. its max hasn't been reached)
	availableAgentCount(agentLabel) {
		var count = 0;
		for (let i = 0; i < this.agents.length; i++) {
			let agent = this.agents[i];
			// if agent for this label
			if (agent.config.agentLabel === agentLabel) {
				// if there is a max but the max hasn't been reached yet
				if (!agent.maxWindowsPerAgent || agent.windows.length < agent.maxWindowsPerAgent) {
					count++;
				}
			}
		}
		return count;
	}

	/**
  * Add a agent to the pool and required listeners to the agent and its application. When ready is
  *
  * @param {any} agent
  * @memberof SplinterAgentPool
  */
	addAgent(agent) {
		let self = this;
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug(`Agent added to pool. Agent UUID: ${agent.app.uuid}`);

		// this handler is triggered when this instance of an agent reaches it maximum allowable children
		var onAgentMaxed = () => {
			// if no other agents for this agentLabel are available for when the next time another childWindow is created, then go ahead and spawn one now
			if (this.availableAgentCount(agent.config.agentLabel) === 0) {
				self.spawnSplinterAgent(agent.config);
			}
		};
		var onAgentEmpty = () => {
			self.onAgentEmpty(agent);
		};
		var onWindowRemoved = descriptor => {
			self.emit("windowRemoved", descriptor);
		};
		if (agent.spawnsAnything) {
			//We don't want to ever get into a situation where there's no default agent. If our last agent is closed via the process monitor, crashes, or for some unforseen reason else, we need to create another one. As long as we're not shutting down the application.
			let onDefaultAgentClosed = () => {
				let flexibleAgents = self.getFlexibleAgents();
				if (!self.shuttingDown && flexibleAgents.length === 0) self.spawnSplinterAgent(agent.config);
				agent.removeListener("agent-closed", onDefaultAgentClosed);
				agent.removeListener("agent-crashed", onDefaultAgentClosed);
			};
			agent.addListener("agent-closed", onDefaultAgentClosed);
			agent.addListener("agent-crashed", onDefaultAgentClosed);
		}

		agent.addListener("windowRemoved", onWindowRemoved);
		agent.addListener("windowMaximumReached", onAgentMaxed);
		agent.addListener("empty", onAgentEmpty);
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug(`addAgent pushed: ${agent.app.uuid}`);
		this.agents.push(agent);
		this.status = "ready";
		this.flushSpawnQueue();
	}
	/**
  * Retrieves agents that can spawn any kind of component/service. This is analogous to the old concept of a 'defaultAgent'. Essentially a dumpster that any unloved components get thrown into.
  */
	getFlexibleAgents() {
		return this.agents.filter(agent => agent.spawnsAnything);
	}
	/**
  * Adds a spawn request (and its callback) to a queue that is processed once a free render agent opens up.
  * @param {windowDescriptor} windowDescriptor
  * @callback {function} cb
  * @memberof SplinterAgentPool
  */
	queueSpawn(windowDescriptor, cb) {
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("SplinterAgentPool Queueing Spawn.", windowDescriptor);
		let args = { windowDescriptor, cb };
		this.spawnQueue.push(args);
	}
	/**
  * Iterates through the queue and tries spawning each request.
  *
  * @memberof SplinterAgentPool
  */
	flushSpawnQueue() {
		//Clone here so that we can empty the original object. This way we can spawn windows until our agent fills up.
		let queue = __WEBPACK_IMPORTED_MODULE_5_lodash_clone___default()(this.spawnQueue);
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("SplinterAgentPool flushing spawn queue", queue);

		this.spawnQueue = [];
		for (let i = 0; i < queue.length; i++) {
			let args = queue[i];
			this.routeSpawnRequest(args.windowDescriptor, args.cb);
		}
	}
	/**
  *
  * If there is an available splinterAgent, we ask it to spawn the window. Otherwise we queue the spawn request. If we have not yet requested a new splinterAgent, we spawn a new one.
  * @param {windowDescriptor} windowDescriptor
  * @callback {function} cb
  * @memberof SplinterAgentPool
  */
	routeSpawnRequest(windowDescriptor, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("SplinterAgentPool routingSpawnRequest", windowDescriptor);
		const promiseResolver = resolve => {
			//callback and resolve.
			//todo make service manager use async/await. remove cb.
			let afterSpawn = fw => {
				cb(fw);
				resolve(fw);
			};
			let agent = this.retrieveAvailableAgent(windowDescriptor.componentType);
			//there are no agents that can fulfill this spawn request. New ones are spawned as the agents are maxed out.
			//When a new one comes online, the queue will be processed.
			if (agent) {
				agent.requestSpawn(windowDescriptor, afterSpawn);
			} else {
				this.queueSpawn(windowDescriptor, afterSpawn);
			}
		};
		return new Promise(promiseResolver);
	}

	/**
  * Spawns a new agent manager.  When it comes online, we add it to our list of available agents and flush the queue.
  * @callback cb {function}
  */
	spawnSplinterAgent(agentConfig, cb) {
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("SplinterAgentPool spawning new Agent", agentConfig);
		let self = this;
		agentConfig.windowStore = this.windowStore;
		this.status = "requestedNewAgent";
		let name = __WEBPACK_IMPORTED_MODULE_4__common_util__["getUniqueName"](agentConfig.agentLabel) + "-" + this.manifest.startup_app.uuid;
		let agentDescriptor = {
			url: `${this.finsembleConfig.moduleRoot}/services/window/Splintering/SplinterAgentSlave.html`,
			uuid: name,
			name: name,
			mainWindowOptions: {
				customData: {
					manifest: { finsemble: this.finsembleConfig }
				}
			},
			plugins: true
		};

		//Spawn new application; when it comes online, it'll send off an 'onSpawned' message. At that point we add the agent to our pool and flush the queue.
		let finApp = new __WEBPACK_IMPORTED_MODULE_7__common_system__["System"].Application(agentDescriptor, function () {
			__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.addListener(agentDescriptor.name + ".onSpawned", function () {
				__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("Agent spawned and connected to the pool.", agentDescriptor.name);
				agentConfig.app = finApp;
				let agent = new __WEBPACK_IMPORTED_MODULE_3__SplinterAgent__["a" /* default */](agentConfig);
				self.addAgent(agent);
				self.emit("addAgent", agentDescriptor.name);

				if (cb) {
					cb();
				}
			});
			finApp.run();
		}, function (err) {
			__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.error("Failed to create Agent", err);
		});
	}
	/**
  * Gets rid of the agent from the pool.
  * @param {any} uuid
  * @returns
  * @memberof SplinterAgentPool
  */
	removeAgent(uuid) {
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("SplinterAgentPool removeAgent", uuid, this.agents);
		for (let i = 0; i < this.agents.length; i++) {
			let agent = this.agents[i];
			if (agent.uuid === uuid) {
				this.agents.splice(i, 1);
				this.emit("processRemoved", agent.name);
				return;
			}
		}
	}

	/**
  * Retrieves the first open agent that is not maxed out.
  *
  * @returns
  * @memberof SplinterAgentPool
  */
	retrieveAvailableAgent(componentType) {
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug(`SplinterAgentPool.retrieveAvailableAgent for: ${componentType}`);
		for (let i = 0; i < this.agents.length; i++) {
			let agent = this.agents[i];
			if (agent.canSpawn(componentType)) {
				if (agent.isMaxed) {
					continue;
				}
				__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug(`SplinterAgentPool.retrieveAvailableAgent: agent found (${agent.app.uuid})`);
				return agent;
			}
		}

		//Find a flexibleAgent and place the component in it.
		let flexibleAgents = this.getFlexibleAgents();
		for (let i = 0; i < flexibleAgents.length; i++) {
			let agent = flexibleAgents[i];
			if (agent.isMaxed) {
				continue;
			}
			__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug(`SplinterAgentPool.retrieveAvailableAgent: agent found (${agent.app.uuid})`);
			return agent;
		}
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("No agent available.");
		//Return null. if nothing is available, launcherService queues spawns.
		return null;
	}

	/**
  * Handler for when last windowChild managed by agent closes.
  */
	onAgentEmpty(agent) {
		let self = this;
		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug(`SplinterAgentPool.onAgentEmpty. ${agent.app.uuid} is empty.`, this.shuttingDown);
		// If we're shutting down, then kill this empty agent.
		// Or if not shutting down but their are multile instances of the agent available, then kill this empthy agent (only need to keep one around for each agentLabel)
		if (this.shuttingDown || this.availableAgentCount(agent.config.agentLabel) > 1) {
			self.removeAgent(agent.app.uuid);
			agent.shutdown();
		}
	}

	/**
  * Terminates all of the agents. This happens when the launcher receives word that all components have shutdown properly.
  * @memberof SplinterAgentPool
  */
	shutdown(cb) {
		let shutdownAgent = (() => {
			var _ref = _asyncToGenerator(function* (agentDescriptor, done) {
				let agent = __WEBPACK_IMPORTED_MODULE_7__common_system__["System"].Application.wrap(agentDescriptor.uuid);
				yield __WEBPACK_IMPORTED_MODULE_7__common_system__["System"].closeApplication(agent);
				self.removeAgent(agentDescriptor.uuid);
				__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.verbose(`shutdown sync close, ${agentDescriptor.uuid}`);
				done();
			});

			return function shutdownAgent(_x, _x2) {
				return _ref.apply(this, arguments);
			};
		})();

		//Async.whilst will try the 2nd function until the result of the first function returns true. When that happens, the 3rd function is invoked. In this case, when all of the agents are closed down, we invoke the shutdown callback, which tells the launcherService to move on.

		//The rationale for this is that if components are spawned during the shutdown process, additional agents could be added to the pool.This should only run once, but it closes a potential timing gap that could leave hanging applications.


		__WEBPACK_IMPORTED_MODULE_2__clients_logger___default.a.system.debug("SplinterAgentPool.shutdown.", this.agents);
		let self = this;
		self.shuttingDown = true;
		__WEBPACK_IMPORTED_MODULE_6_async___default.a.whilst(function agentsAreAlive() {
			return self.agents.length;
		}, function killLivingAgents(finished) {
			//@todo, try this with Object.assign
			let agentList = JSON.parse(JSON.stringify(self.agents));
			__WEBPACK_IMPORTED_MODULE_6_async___default.a.each(agentList, shutdownAgent, finished);
		}, cb);
	}
}

/* harmony default export */ __webpack_exports__["default"] = (SplinterAgentPool);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Splintering\\SplinterAgentPool.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\Splintering\\SplinterAgentPool.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_workspaceClient__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_workspaceClient___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__clients_workspaceClient__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__BaseWindow__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__BaseWindow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__BaseWindow__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const BOUNDS_CHANGING = "bounds-change-request";
const BOUNDS_CHANGED = "bounds-changed";





var mouseLocation = {
	x: 0,
	y: 0
};

/**
 * NativeWindow
 */
class NativeWindow extends __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"] {
	/**
  * @param {*} params
  * @param {string} [params.uuid]
  * @param {object} [params.location]
  * @param {string} [params.launchedByApp]
  *
  */
	constructor(params) {
		if (!params.windowType) {
			if (params.params) {
				params = Object.assign(params, params.params);
			}
			params.windowType = null;
		}
		super(params);
		this.loggerChannel = `ExternalWindowWrapper.${this.windowName}`;
		this.type = "external";
		this.windowType = "NativeWindow";
		this.location = params.windowMsg ? params.windowMsg.location : null;
		this.windowState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.NORMAL;
		this.isMaximized = false;
		this.key = params.windowMsg ? params.windowMsg.uuid : params.uuid;
		this.saveOnBoundsChanged = this.launchedByApp;
		this.movements = [];
		this.lastLocation = this.location;
		this.events = {};
		this.lastMinimized = 0;
		this.lastRestored = 0;
		this.executablePath = null;
		this.descriptor = null;
		this.spawnedByOpenFin = false;
		this.maximizing = false;
		this.restoreBounds = null;
		//Saves the initial data into the workspace.
		__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.transmit("Assimilation.saveWindow", { key: this.key });
		this.bindFunctions();
	}

	bindFunctions() {
		this._setBounds = this._setBounds.bind(this);
		this.listenForBoundsChanging = this.listenForBoundsChanging.bind(this);
		this.receiveMoveRequestEvent = this.receiveMoveRequestEvent.bind(this);
		this.endMovementHandler = this.endMovementHandler.bind(this);
	}

	endMovementHandler(err, message) {
		if (err) {
			return __WEBPACK_IMPORTED_MODULE_0__clients_logger___default.a.system.error(err);
		}
		// Logger.system.log("end sent");
		if (!message || !message.data || !message.data.location) {
			return;
		}

		this.location = message.data.location;
		this.eventManager.trigger(BOUNDS_CHANGED, this.location);
	}

	_addEventListener(params, cb = Function.prototype) {
		let { eventName } = params;
		this.addEventListener(eventName);
		cb();
	}

	addEventListener(event, handler = Function.prototype) {
		super.addEventListener(event, handler);
		//this event will come in from assimilation. when it does, we trigger the bounds-changed event, which throws bounds-change-end to the rest of the system.
		switch (event) {
			case "bounds-changed":
				__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.addListener(this.name + ".endMovement", this.endMovementHandler);
				break;
		}
	}

	_removeEventListener(params, cb = Function.prototype) {
		let { eventName } = params;
		this.removeEventListener(eventName);
		cb();
	}

	removeEventListener(event, handler = Function.prototype) {
		super.removeEventListener(event, handler);
		//this event will come in from assimilation. when it does, we trigger the bounds-changed event, which throws bounds-change-end to the rest of the system.
		switch (event) {
			case "bounds-changed":
				__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.removeListener(this.name + ".endMovement", this.endMovementHandler);
				break;
		}
	}

	/**
  * hack to limit move events being sent---not a fan
  */
	listenForBoundsChanging() {
		this.eventManager.listenForRemoteEvent("bounds-change-request", this.receiveMoveRequestEvent);
	}

	/**
  *This will emit the bounds changing event to any window that has turned on the listener. Currently, only used by docking
  *
  * @param {Object} err
  * @param {Object} response
  * @memberof NativeWindow
  */
	receiveMoveRequestEvent(err, response) {
		__WEBPACK_IMPORTED_MODULE_0__clients_logger___default.a.system.info(this.loggerChannel + ".receiveMoveRequestEvent", response.data);
		response.data.name = this.windowName; //Docking requires the window name here
		this.emit(BOUNDS_CHANGING, response.data);
	}

	/**
  *
  * @param {Object} params
  * @param {Object} params.location -The location the window the trying to go to
  */
	move(params) {
		__WEBPACK_IMPORTED_MODULE_0__clients_logger___default.a.system.info(this.loggerChannel + ".move", this.getChannel(BOUNDS_CHANGING), params);
		if (!params.location) {
			return;
		} // We must have a location to move a window
		__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.transmit(this.getChannel(BOUNDS_CHANGING), params.location);
	}

	_setBounds(params, cb = Function.prototype) {
		var _this = this;

		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		let bounds = params.bounds;
		var self = this;
		var newLocation = {
			left: Number(bounds.left),
			top: Number(bounds.top),
			width: bounds.width ? Number(bounds.width) : Number(bounds.right) - Number(bounds.left),
			height: bounds.height ? Number(bounds.height) : Number(bounds.bottom) - Number(bounds.top),
			right: bounds.right ? Number(bounds.right) : Number(bounds.left) + Number(bounds.width),
			bottom: bounds.bottom ? Number(bounds.bottom) : Number(bounds.top) + Number(bounds.height)
		};
		__WEBPACK_IMPORTED_MODULE_0__clients_logger___default.a.system.verbose("send move ", self);

		this.lastLocation = newLocation;
		this.location = newLocation;
		super._setBounds(params);
		//if the _setBounds function was async, can't use super...
		let asyncHack = (() => {
			var _ref = _asyncToGenerator(function* () {
				yield __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("Assimilation.moveWindow", { name: _this.windowName, key: self.key, location: newLocation });
				_this.eventManager.trigger("bounds-changing", _extends({}, newLocation));
				cb();
			});

			return function asyncHack() {
				return _ref.apply(this, arguments);
			};
		})();
		asyncHack();
	}

	_hide(params, cb = Function.prototype) {
		let self = this;
		super._hide(params, (() => {
			var _ref2 = _asyncToGenerator(function* (err, response) {
				//@note, there's no params.fromAssimilation here because hidden isn't an event caught from the OS.
				if (response.shouldContinue) {
					yield __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("Assimilation.hideWindow", { name: self.windowName, key: self.key, location: self.location });
					self.eventManager.trigger("hidden");
					__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.transmit("Assimilation.saveWindow", { key: self.key, autoShow: false });
				}
				cb();
			});

			return function (_x, _x2) {
				return _ref2.apply(this, arguments);
			};
		})());
	}

	_focus(params, cb = Function.prototype) {
		let self = this;
		super._focus(params, (() => {
			var _ref3 = _asyncToGenerator(function* (err, response) {
				if (response.shouldContinue && params.fromAssimilation) {
					self.eventManager.trigger("focused");
				}
				cb();
			});

			return function (_x3, _x4) {
				return _ref3.apply(this, arguments);
			};
		})());
	}

	_minimize(params, cb = Function.prototype) {
		if (Date.now() - this.lastRestored < 50) return cb();
		if (typeof params === "function") {
			cb = params;
			params = {};
		}
		if (!params) params = {};
		let self = this;
		super._minimize(params, _asyncToGenerator(function* () {
			if (self.windowState === __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED) {
				self.cachedState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED;
			}

			if (params.fromAssimilation) {
				self.windowState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.MINIMIZED;
				self.eventManager.trigger("minimized");
			} else {
				yield __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("Assimilation.minimizeWindow", { name: self.windowName, key: self.key, location: self.location });
			}

			cb();
		}));
	}

	_maximize(params, cb = Function.prototype) {
		let self = this;
		super._maximize(params, (() => {
			var _ref5 = _asyncToGenerator(function* (err, response) {

				if (self.windowState != __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED) {
					//self.emit("maximized", { name: self.windowName });
					if (self.windowState !== __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].MINIMIZED) {
						self.maximizing = true;
						self.restoreBounds = self.location;
					}
					yield __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("DockingService.maximizeWindow", {
						name: self.windowName,
						windowIdentifier: self.windowIdentifier
					});
					self.eventManager.trigger("maximized");
					self.windowState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED;
				}

				cb();
			});

			return function (_x5, _x6) {
				return _ref5.apply(this, arguments);
			};
		})());
	}

	_restore(params, cb = Function.prototype) {
		let self = this;
		super._restore(params, (() => {
			var _ref6 = _asyncToGenerator(function* (err, response) {
				if (response.shouldContinue) {
					if (self.cachedState && self.cachedState === __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED) {
						// self is a check of we minimize from being maximized
						self.cachedState = null;
						//@note, early return
						return self.maximize(params, function () {
							self.eventManager.trigger("restored");
							cb();
						});
					}

					// if we restore from a minimized state set the state to normal
					if (self.windowState === __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.MINIMIZED) {
						if (params.fromAssimilation) {
							self.eventManager.trigger("restored");
						} else {
							yield __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("Assimilation.restoreWindow", { name: self.windowName, key: self.key, location: self.location }, params);
						}
						self.windowState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.NORMAL;
					}

					// if we restore from a max state tell docking so we can reset the position
					if (self.windowState === __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED) {
						self.windowState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.NORMAL;
						yield __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("DockingService.restoreFromMaximize", {
							name: self.windowName,
							windowIdentifier: self.identifier
						});
						self.windowState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.NORMAL;
						self.maximizing = false;
						self.eventManager.trigger("restored");
					}
				}

				cb();
			});

			return function (_x7, _x8) {
				return _ref6.apply(this, arguments);
			};
		})());
	}

	_close(params, cb = Function.prototype) {
		if (typeof params === "function") {
			cb = params;
			params = {};
		}

		if (!params) params = {};
		let self = this;

		// this is extremely dirty code so that when closing a assimulated window in a stack, it will close the whole stack;
		// the only way to understand this code is to step through it -- the intent is to replace/cleanup
		if (params.fromAssimilation) {
			if (self.parentWindow) {
				var parentCopy = self.parentWindow;
				this.parentWindow._removeWindow({ noDocking: true, removeFromWorkspace: true, noCloseStack: true, stackedWindowIdentifier: parent.identifier, windowIdentifier: this.identifier }, () => {
					parentCopy._close({ closeChildren: true, removeFromWorkspace: true }, () => {
						self.eventManager.trigger("closing");
						self.eventManager.trigger("closed");
						cb();
					});
				});
			} else {
				self.eventManager.trigger("closing");
				self.eventManager.trigger("closed");
				cb();
			}
		} else {
			super._close(params, (() => {
				var _ref7 = _asyncToGenerator(function* (err, response) {
					if (response.shouldContinue) {
						if (params.removeFromWorkspace) __WEBPACK_IMPORTED_MODULE_2__clients_workspaceClient___default.a.removeWindow({ name: self.windowName });
						self.eventManager.trigger("closing");
						//When assimilation closes a window, there's no response from the C++ side. However, when it detects a window close, it'll call close on the public wrapper, and we'll end up inside of the if block above. A closed event will be triggered, and our initial callback will be invoked.
						self.addEventListener("closed", cb);
						__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("Assimilation.closeWindow", _extends({ name: self.windowName, key: self.key, location: self.location }, params));
					}
				});

				return function (_x9, _x10) {
					return _ref7.apply(this, arguments);
				};
			})());
		}
	}

	_show(params, cb = Function.prototype) {
		let self = this;
		super._show(params, (() => {
			var _ref8 = _asyncToGenerator(function* (err, response) {
				if (response.shouldContinue) {
					yield __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("Assimilation.showWindow", { name: self.windowName, key: self.key, location: self.location });
					self.eventManager.trigger("shown");
					__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.transmit("Assimilation.saveWindow", { key: self.key, autoShow: true });
				}
				cb();
			});

			return function (_x11, _x12) {
				return _ref8.apply(this, arguments);
			};
		})());
	}

	_bringToFront(params, cb = Function.prototype) {
		var _this2 = this;

		super._bringToFront(params, (() => {
			var _ref9 = _asyncToGenerator(function* (err, response) {
				if (response.shouldContinue) {
					yield __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("Assimilation.bringToFront", { name: _this2.windowName });
					_this2.eventManager.trigger("broughtToFront");
				}
				cb();
			});

			return function (_x13, _x14) {
				return _ref9.apply(this, arguments);
			};
		})());
	}

	_setOpacity(params, cb = Function.prototype) {
		this.opacity = params.opacity;
		cb();
	}

	_alwaysOnTop(params, cb = Function.prototype) {
		var _this3 = this;

		return _asyncToGenerator(function* () {
			if (_this3.alwaysOnTop == params.alwaysOnTop) return;
			_this3.alwaysOnTop = params.alwaysOnTop;
			yield __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("Assimilation.alwaysOnTop", { key: _this3.key, alwaysOnTop: params.alwaysOnTop });
			cb();
		})();
	}

	disableFrame(cb = Function.prototype) {
		this.frame = false; //paint
		cb();
	}

	getMousePosition(cb = Function.prototype) {
		cb(null, mouseLocation);
	}

	endMove() {
		__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.transmit("Assimilation.saveWindow", { key: this.key, location: this.location });
	}
	saveWindowOptions() {
		//routerClient.transmit("Assimilation.saveWindow", { key: this.key, location: this.location });
	}

	_getBounds(params, cb = Function.prototype) {
		if (typeof params === "function") {
			cb = params;
			params = {};
		}
		if (this.maximizing) {
			cb(null, this.restoreBounds);
			return Promise.resolve({ err: null, data: this.restoreBounds });
		}
		//if (!this.location) {
		var self = this;
		const promiseResolver = resolve => {
			__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("Assimilation.getWindowLocation", { windowName: this.windowName, uuid: this.uuid }, function (err, message) {
				if (err) {
					cb(err);
					return resolve({ err, data: null });
				}
				if (!message.data.location) {
					cb(null);
					return resolve({ err: null, data: null });
				}
				self.location = {
					top: message.data.location.top,
					left: message.data.location.left,
					right: message.data.location.right,
					bottom: message.data.location.bottom,
					height: message.data.location.bottom - message.data.location.top,
					width: message.data.location.right - message.data.location.left
				};
				// TODO: why does this need to be done here?
				if (!self.location.height) {
					self.location.height = self.location.bottom - self.location.top;
				}
				if (!self.location.width) {
					self.location.width = self.location.right - self.location.left;
				}
				cb(null, self.location);
				return resolve({ err: null, data: self.location });
			});
		};
		return new Promise(promiseResolver);
	}

	_updateOptions(params, cb = Function.prototype) {
		cb("Not Implemented", null);
	}
}

/* harmony default export */ __webpack_exports__["a"] = (NativeWindow);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\WindowAbstractions\\externalWindowWrapper.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\WindowAbstractions\\externalWindowWrapper.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseWindow__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BaseWindow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__BaseWindow__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_configClient__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__clients_configClient___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__clients_configClient__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_configUtil__ = __webpack_require__(14);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_userNotification__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_system__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__common_system___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__common_system__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }




__WEBPACK_IMPORTED_MODULE_2__clients_configClient___default.a.initialize();



const BOUNDS_SET = "bounds-set";


function isNumeric(n) {
	return !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * OpenFinWindow
 */
class OpenFinWindow extends __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"] {
	/**
  *
  * @param {*} params
  * @param {finWindow} [params.finWindow] If not provided, must provide uuid
  * @param {string} [params.uuid] If not provided, must provide finWindow
  * @param {string} [params.name]
  */
	constructor(params) {
		super(params);
		this.name = params.name || params.windowName;
		this.uuid = params.uuid;

		if (params.finWindow) {
			this.finWindow = params.finWindow;
			this.uuid = this.finWindow.uuid;
			if (!this.name) this.name = this.finWindow.name;
		}

		if (!this.finWindow && this.uuid) {
			this.uuid = params.uuid;
			this.finWindow = __WEBPACK_IMPORTED_MODULE_6__common_system__["System"].Window.wrap(params.uuid, this.name);
		}
		this._listeners = {};
		//whether to notify the user that we failed to close the window if it times out.
		this.throwNotificationOnFailedClose = false;
		this.windowIdentifier = { windowName: this.name, uuid: this.uuid };
		this.wrapFunctions();
		this.windowOptions = {};
		this.setMyOptions = this.setMyOptions.bind(this);
		this.setCloseTimeout = this.setCloseTimeout.bind(this);
		this.setMyOptions(() => {
			//This used to come directly from the launcher. Now we get it initially.
			if (this.windowOptions && this.windowOptions.customData && this.windowOptions.customData.component) {
				let canMinimize = this.windowOptions.customData.component.canMinimize;
				this.canMinimize = typeof canMinimize === "undefined" ? true : canMinimize;
			}
		});
		this.windowState = __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.NORMAL;
		this.eventChannelName = this.eventChannelName.bind(this);
		this.handleBoundsSet = this.handleBoundsSet.bind(this);
		this._restore = this._restore.bind(this);
		this.setParent = super.setParent.bind(this);
		this.getParent = super.getParent.bind(this);
		//On destruct, we'll go through all the listeners that we've added to the router and remove them
		//@todo investigate a routerClient for each wrapper, so on destruct we can just RouterClient.disconnectALl without removing everything from the physical tab/browser window it's running in
		this.RouterHandlers = {};
		this.addListeners = this.addListeners.bind(this);
		this.removeListeners = this.removeListeners.bind(this);
		this.listeningFor = [];
		this._systemClosed = this._systemClosed.bind(this);
		//This boolean is set to true when the window is closed by the operating system (outside of finsemble).
		this.closing = false;
		this.addListeners();
	}

	_addEventListener(params, handler = Function.prototype) {
		let { eventName } = params;
		this.addEventListener(eventName, handler);
	}

	_removeEventListener(params, handler = Function.prototype) {
		let { eventName } = params;
		this.removeEventListener(eventName, handler);
	}

	removeEventListener(params, handler = Function.prototype) {
		super.removeEventListener(params.eventName || params, handler);

		// TODO: Need to modify so that we keep track of all added listeners and remove them cleanly. Not sure how addEVentListener even does anything.
	}

	addEventListener(event, handler = Function.prototype) {
		super.addEventListener(event, handler);
		//For some events, add listeners in the finWindow so that we can then propogate the event to the rest of the system.
		if (!this.listeningFor.includes(event)) {
			this.listeningFor.push(event);
			switch (event) {
				case "bounds-change-request":
					//translate disabled-frame-bounds-changing into a bounds-change-request event expected by the rest of the system.
					this.finWindow.addEventListener("disabled-frame-bounds-changing", this.onDisabledFrameBoundsChanging.bind(this));
					break;
				case "bounds-changed":
					this.finWindow.addEventListener("disabled-frame-bounds-changed", this.onDisabledFrameBoundsChanged.bind(this));
					break;
				case "blurred":
				case "focused":
				case "hidden":
				case "shown":
				case "minimized":
				case "maximized":
				// case "close-requested": <- using our custom close-requested event.
				// case "closed": <- using custom close-event.
				case "crashed":
				case "restored":
					//keep track of events we're listening for so we don't add multiple listeners on the openfin window. don't want to trigger more than a single remote event per single local event. Said differently, if we add this generic handler N times, the event will be triggered N times.

					//`super.addEventListener` will make sure that any events emitted by this wrapper are caught. However, we won't emit any events that we aren't listening to on the primative window (in this case, the underlying finWindow).
					//So, when someone adds a listener(e.g., focus), we listen for the primative to emit the event. At that point, the derived class will emit, and the handler will be fired.
					this.finWindow.addEventListener(event, this.onNativeEvent.bind(this, event));
					break;
				//'system-closed' is a made up event. It means 'a closed event was emitted on the underlying window primative that we weren't expecting'.
				//This will happen when the user closes via the taskbar or via alt + f4.
				case "system-closed":
					this.finWindow.addEventListener("closed", handler);
				default:
					__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("Listener added to openfin wrap, Handler not passed to primative. Using finsemble event instead.", event);
					break;
			}
		}
	}

	// When a native OpenFin event fires:
	onNativeEvent(eventName) {
		let win = this;
		switch (eventName) {
			case "maximized":
				// Finsemble maximize is different from OF maximize.
				// If a window gets maximized by the system (double click taskbar), we should make Finsemble maximize happen
				// If we are already maximized (finsemble maximized, not OF maximized), we are restoring.
				if (this.parentWindow) {
					win = this.parentWindow;
				}
				if (win.windowState === __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED) {
					win._restore();
				} else {
					win._maximize();
				}
				break;
			case "restored":
				// When maximize happens we resize the window under the titlebar, which causes restore to fire. We only want to actually deal with restore when the window is minimized previously
				if (win.windowState === __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.MINIMIZED) {
					win._restore();
				}
				break;
			default:
				this.eventManager.trigger(eventName);
				break;

		}
	}

	addListeners() {
		this.addEventListener("minimized", () => {
			this.windowState = __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.MINIMIZED;
		});
		this.addEventListener("restored", () => {
			this.windowState = __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.NORMAL;
		});
		this.addEventListener("maximized", () => {
			this.windowState = __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED;
		});
		this.addEventListener("system-closed", this._systemClosed);
		const UPDATE_OPTIONS_CHANNEL = this.name + ".updateOptions";
		const onUpdateOptions = (err, response) => {
			for (let o in response.data) {
				if (this.windowOptions[o] == response.data[o]) return;
				this.windowOptions[o] = response.data[o];
				let dataToEmit = {
					windowName: this.name
				};
				dataToEmit[o] = response.data[o];
				this.emit(o, response.data);
			}
		};
		this.RouterHandlers[UPDATE_OPTIONS_CHANNEL] = onUpdateOptions;
		// Fire events when options are updated. e.g. alwaysOnTop
		__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.addListener(UPDATE_OPTIONS_CHANNEL, onUpdateOptions);
	}
	onDisabledFrameBoundsChanged(evt) {
		this.eventManager.trigger("bounds-changed", _extends({}, evt));
	}
	onDisabledFrameBoundsChanging(evt) {
		this.eventManager.trigger("bounds-change-request", _extends({}, evt));
	}
	//removed because it causes an explosion of router traffic if the default is to listen for this event. If someone needs this incredibly frequently updated object, they can listen.
	listenForBoundsSet() {
		this.RouterHandlers[this.eventChannelName(BOUNDS_SET)] = this.handleBoundsSet;
		__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.addListener(this.eventChannelName(BOUNDS_SET), this.handleBoundsSet);
	}
	handleBoundsSet(err, response) {
		if (response.data && response.data.bounds) {
			this.mergeBounds(response.data.bounds);
		}
		this.emit(BOUNDS_SET, response.data);
	}
	/**
  * @param params.property property to pull from 'finsemble' and from componentConfig.
  * @param params.componentType which component to grab local config from.
  */
	getGlobalAndLocalComponentConfig(params) {
		let { property, componentType } = params;

		const promiseResolver = (resolve, reject) => {
			if (typeof componentType === "undefined") {
				reject("params.componentType must be defined.");
			}
			if (typeof property === "undefined") {
				reject("params.property is required");
			}
			//In case config isn't initialized when this method is called.
			const getConfig = cb => {
				__WEBPACK_IMPORTED_MODULE_2__clients_configClient___default.a.getValue({ field: "finsemble" }, (err, allConfig) => {
					if (err) return reject(err);
					let globalConfig = allConfig[property];
					let componentConfig = allConfig.components[componentType];
					//If we have the component config, return the property saved on that component. if not, return undefined.
					let localConfig = componentConfig && componentConfig.foreign && componentConfig.foreign.components ? componentConfig.foreign.components[property] : undefined;
					resolve({ localConfig, globalConfig, allConfig });
				});
			};
			__WEBPACK_IMPORTED_MODULE_2__clients_configClient___default.a.onReady(getConfig);
		};

		return new Promise(promiseResolver);
	}

	setCloseTimeout() {
		var _this = this;

		const promiseResolver = resolve => {
			let componentType;
			//Have to make sure options are set. Sometimes wraps are created and then just used to close windows. Need options to know which kind of component it is..
			this.setMyOptions(_asyncToGenerator(function* () {
				if (_this.windowOptions && _this.windowOptions.customData && _this.windowOptions.customData.component) {
					componentType = _this.windowOptions.customData.component.type;
				}

				//Get the global timeout and the component-specific timeout. If the component-specific exists, use it. If it doesn't, try global. If global doesn't exist, use 5000ms.
				let { localConfig, globalConfig, allConfig } = yield _this.getGlobalAndLocalComponentConfig({
					property: "Window Manager",
					componentType
				});

				let globalTimeout = globalConfig ? globalConfig.componentCloseTimeout : undefined;
				let componentTimeout = localConfig ? localConfig.componentCloseTimeout : undefined;
				if (typeof componentTimeout !== "undefined") {
					_this.closeTimeout = componentTimeout;
				} else if (typeof globalTimeout !== "undefined") {
					_this.closeTimeout = globalTimeout;
				} else {
					_this.closeTimeout = 5000;
				}

				_this.throwNotificationOnFailedClose = allConfig.failedComponentCloseNotification;
				__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.info("Close timeout set for", _this.name, JSON.stringify(_this.closeTimeout));
				resolve();
			}));
		};
		return new Promise(promiseResolver);
	}

	setMyOptions(cb) {
		this.finWindow.getOptions(opts => {
			this.windowOptions = Object.assign(opts, this.windowOptions);
			if (!this.windowOptions) {
				__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.error("window options is null");
			}
			if (cb) cb();
		});
	}
	_updateOptions(params, cb = Function.prototype) {
		params = params.options || params; // TODO: This function is used differently all over the place.
		this.callOpenFinWindowFunction("updateOptions", params, () => {
			this._saveWindowOptions();
			cb();
		});
	}

	//Had to move this because jScrambler was screwing up when we obfuscated.
	wrapFunctions() {
		//let self = this;
		var openFinWindowFunctionsWithoutParams = ["disableFrame", "isShowing", "getState"];
		openFinWindowFunctionsWithoutParams.forEach(f => {
			this[f] = (params, cb) => {
				if (typeof params === "function") {
					cb = params;
					params = null;
				}
				this.callOpenFinWindowFunction(f, false, cb);
			};
		});

		var openFinWindowFunctionsWithoutParamsToBeWrappedInIsShowing = ["focus"];
		openFinWindowFunctionsWithoutParamsToBeWrappedInIsShowing.forEach(f => {
			this[f] = (cb = Function.prototype) => {
				if (["minimize", "maximize"].includes(f) && this.windowDescriptor && !this.windowDescriptor.resizable) {
					if (cb) {
						return cb("Cannot Perform this action on non-resizable windows");
					}
					return;
				}
				this.finWindow.isShowing(isShowing => {
					if (isShowing) {
						//If the method is defined on the BaseWindow, call it.
						if (super[f]) {
							super[f]({}, (err, response) => {
								//if BaseWindow says it's okay for us the method to trickle down to the wrapper, great. otherwise cb.
								if (!err && response.shouldContinue) {
									this.callOpenFinWindowFunction(f, false, cb);
								} else {
									cb();
								}
							});
						} else {
							this.callOpenFinWindowFunction(f, false, cb);
						}
					} else {
						if (cb) {
							cb("This Window is hidden");
						}
					}
				});
			};
		});
	}

	/**
  *
  * @param {*} functionName Name of the openFin window functio to call
  * @param {*} params  The parameters to the function (except callbacks) as an array
  * @param {*} cb The callback to be called. This is in the format function (err, response) {} and errors will be in err unlike Openfin which requires two callbacks.
  */
	callOpenFinWindowFunction(functionName, params, cb = Function.prototype) {
		//If this.closing is true, the window was closed by the operating system. When that happens, the window receives focus. If that window is part of a group, this can trigger calls to bring to front, update options, etc. These function calls will error out at the openfin level because the window has already been closed.
		if (this.closing) return cb({
			code: "function_dropped_window_closing",
			message: `Window ${this.name} was closed by the operating system. Skipping call to ${functionName}`
		});
		if (params) {
			if (!Array.isArray(params)) params = [params];
			// add success callback to params
			params.push((...args) => {
				// fire event for updateOptions
				if (functionName == "updateOptions") {
					if (!params[0].dontFireEvents) {
						__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.transmit(this.name + ".updateOptions", params[0]);

						for (let o in params[0]) {
							// in some cases (such as our bringTofront hack we dont want to fire spurious events). Also dont fire events if the option doesnt change
							if (o == "dontFireEvents" || this.windowOptions[o] == params[0][o]) continue;
							if (this.windowOptions[o] && typeof this.windowOptions[o] == "object" && params[0][o] && typeof params[0][o] == "object") {
								Object.assign(this.windowOptions[o], params[0][o]);
							} else {
								this.windowOptions[o] = params[0][o];
							}
							if (!params[0].dontFireEvents) {
								this.emit(o, {
									windowName: this.name,
									o: params[0][o]
								});
							}
						}
					}
				}
				// call the actual callback
				if (cb) {
					cb(null, args);
				}
			});

			// add error callback to params
			params.push(err => {
				if (cb) {
					err = `OpenFin Error for ${this.name} from method ${functionName}: ` + err;
					__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.error("Error in openfinWindowWrapper method", functionName, err);
					console.error(err);
					cb(err);
				}
			});

			// call the openfin function
			__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("xyx callOpenFinWindowFunction", functionName, params);
			this.finWindow[functionName](...params);
		} else {
			this.finWindow[functionName](retval => {
				this;
				cb(null, retval);
			}, err => {
				this;
				if (cb) {
					__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("Error in openfinWindowWrapper method", functionName, err);
					console.error(err);
					cb(err);
				}
			});
		}
	}

	_getBounds(params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._getBounds", this.name, params);

		if (typeof params === "function") {
			cb = params;
			params = null;
		}

		const promiseResolver = resolve => {
			//OPENFIN BOUNDS ARE WRONG! SERIOUSLY THEY REALLY ARE WRONG! AND THIS BREAKS STACKED WINDOWS IN DOCKED GROUPS BADLY!
			//SO PLEASE do not remove this code. it wasted a whole 4 hours figuring out why group rectangularity problems were back in cleanup.
			//return cached bounds if we have them
			//WE HAVE TO CACHE THEM BECAUSE WINDOWS IN STACKS ARE DEREGISTERED FROM DOCKING. AND DOCKING DOESNT GET BOUNDS FOR THOSE WHICH IS A PROBLEM FOR STACKS. Do not eliminate this cache.
			if (this.windowOptions && this.windowOptions.bounds) {
				cb(null, this.windowOptions.bounds);
				return resolve({ err: null, data: this.windowOptions.bounds });
			} else if (isNumeric(this.windowOptions.defaultLeft) && isNumeric(this.windowOptions.defaultTop) && isNumeric(this.windowOptions.defaultHeight) && isNumeric(this.windowOptions.defaultWidth)) {
				let bounds = {
					top: this.windowOptions.defaultTop,
					left: this.windowOptions.defaultLeft,
					height: this.windowOptions.defaultHeight,
					width: this.windowOptions.defaultWidth
				};
				bounds.right = bounds.left + bounds.width;
				bounds.bottom = bounds.top + bounds.height;
				this.windowOptions.bounds = bounds;
				cb(null, this.windowOptions.bounds);
				return resolve({ err: null, data: this.windowOptions.bounds });
			}

			// openfin bounds are often different from what is expected by a couple of pixels. use as last resort
			this.callOpenFinWindowFunction("getBounds", null, (err, bounds) => {
				cb(err, bounds);
				return resolve({ err, data: bounds });
			});
		};
		// get bounds from docking if not
		return new Promise(promiseResolver);
	}

	_getOptions(params, cb) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._getOptions", this.name, "UUID", this.uuid, params);
		this.callOpenFinWindowFunction("getOptions", null, (err, opts) => {
			if (err) {
				__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.warn("getOptions", err, params, opts);
			}
			if (opts && Object.keys(this.windowOptions).length) {
				opts = Object.assign(opts, this.windowOptions);
			} else {
				opts = {};
			}
			cb(err, opts);
		});
	}

	_hide(params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._hide", this.name, params);

		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		if (params && params.invokedByParent) {
			this.callOpenFinWindowFunction("updateOptions", { autoShow: false }, () => {});
		}
		this.callOpenFinWindowFunction("hide", null, cb);
	}

	_show(params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._show", this.name, params);
		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		if (params && (params.invokedByParent || params.saveState)) {
			this.callOpenFinWindowFunction("updateOptions", { autoShow: true }, () => {});
		}
		this.callOpenFinWindowFunction("show", null, cb);
	}

	// TABBING NOTE: Example case below showing how the parent (through the base class) can optionally inject it's behavior. Exactly where and where this is done is still TBD.
	_minimize(params = { notifyDocking: true }) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._minimize", this.name, params);
		// When we receive a minimize command, we first pass the command to the parent window. The parent window may decide to supersede. In its response, it will then set the flag "shouldContinue" to false if we shouldn't actually perform the minimizing function.
		let self = this;
		//Some windows cannot minimize, e.g., (toolbars);
		if (!this.canMinimize) return;
		function doMinimize() {
			self.windowState = __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.MINIMIZED;
			self.finWindow.minimize();
		}

		this.finWindow.isShowing(isShowing => {
			if (isShowing) {
				//todo shouldn't be necessary in the future...
				__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("DockingService.windowMinimized", this.name, () => {
					doMinimize();
				});
			}
		});
	}

	_maximize(params = { notifyDocking: true }) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._maximize", this.name, params);
		// When we receive a minimize command, we first pass the command to the parent window. The parent window may decide to supersede. In its response, it will then set the flag "shouldContinue" to false if we shouldn't actually perform the minimizing function.
		let self = this;
		function doMaximize() {
			self.windowState = __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED;
			self.eventManager.trigger("maximized");
			//self.finWindow.maximize();
		}

		if (params && params.invokedByParent) {
			//callOpenFinWindowFunction
		} else {
			super._maximize(params, (err, response) => {
				if (!err && response.shouldContinue) {
					self.finWindow.isShowing(isShowing => {
						if (isShowing) {
							__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("DockingService.maximizeWindow", { name: this.name }, () => {
								doMaximize();
							});
						}
					});
				}
			});
		}
	}

	// TABBING NOTE: Example case below showing how the parent (through the base class) can optionally inject it's behavior.
	// ** Exactly where and where this for each derived window wrapper is still TBD, but easy to do/tweak. **
	_restore(params = { checkMinimize: true, checkMaximize: true }, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._restore", this.name, params);
		let self = this;
		if (typeof params === "function") {
			cb = params;
			params = { checkMinimize: true, checkMaximize: true };
		}

		if (typeof params.checkMaximize === "undefined") {
			params.checkMaximize = true;
		}
		if (typeof params.checkMinimize === "undefined") {
			params.checkMinimize = true;
		}
		let success = () => {
			self.eventManager.trigger("restored");
			cb();
		};
		super._restore(params, (err, response) => {
			if (!err && response.shouldContinue) {
				if (params.checkMinimize && this.windowState === __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.MINIMIZED) {
					this.finWindow.restore(success, err => console.error(err));
				} else if (!params.checkMinimize && this.windowState !== __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED) {
					this.finWindow.restore(success, err => console.error(err));
				}
				if (params.checkMaximize && this.windowState === __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED) {
					this.windowState = __WEBPACK_IMPORTED_MODULE_0__BaseWindow__["BaseWindow"].WINDOWSTATE.NORMAL;
					__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.query("DockingService.restoreFromMaximize", {
						name: this.name,
						windowIdentifier: this.identifier
					}, (err, response) => {
						success();
					});
				} else {
					cb();
				}
			} else {
				cb();
			}
		});
	}

	_bringToFront(params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._bringToFront", this.name, params);
		let defaults = { restoreWindows: false };
		if (typeof params === "function") {
			cb = params;
			params = defaults;
		}
		let doBringToFront = () => {
			if (this.windowOptions.alwaysOnTop) return cb();
			//let previousAOT = this.windowOptions.alwaysOnTop;
			let callback = err => {
				this._updateOptions({ alwaysOnTop: false, dontFireEvents: true }, err2 => {
					cb(err2 || err);
				});
			};
			this.eventManager.trigger("broughtToFront");
			this._updateOptions({ alwaysOnTop: true, dontFireEvents: true }, callback);
		};
		//If for some reason there's no windowOptions, go ahead and set them, then bring to front. I never saw this happen, but you know, just in case.
		if (!this.windowOptions) {
			this.setMyOptions(doBringToFront);
		}
		doBringToFront();
	}

	_isShowing(params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._isShowing", this.name, params);
		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		if (params && (params.invokedByParent || params.saveState)) {
			this.callOpenFinWindowFunction("updateOptions", { autoShow: true }, () => {});
		}
		this.callOpenFinWindowFunction("isShowing", null, cb);
	}

	_setOpacity(params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._setOpacity", this.name, params);
		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		this.callOpenFinWindowFunction("updateOptions", { opacity: params.opacity, dontFireEvents: true }, () => {
			//SetOpacity is called a lot (e.g., while moving a window). On mouse up, docking sends in params to tell the value to persist. This is so the window is restored with the proper opacity.
			if (params && params.persist) {}
			cb();
		});
	}

	_alwaysOnTop(params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._alwaysOnTop", this.name, params);
		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		if (this.windowOptions.alwaysOnTop == params.alwaysOnTop) return;
		this.windowOptions.alwaysOnTop = params.alwaysOnTop;
		this.callOpenFinWindowFunction("updateOptions", { alwaysOnTop: params.alwaysOnTop }, cb);
	}

	setTaskbarIconGroup(tasbarIconGroup, params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper.setTaskbarIconGroup", this.name, tasbarIconGroup, params);
		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		this.callOpenFinWindowFunction("updateOptions", { tasbarIconGroup: tasbarIconGroup }, cb);
	}

	_saveWindowOptions() {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._saveWindowOptions", this.name, this.windowOptions.bounds);
		if (this.windowOptions.name) {
			this.saveCompleteWindowState(this.windowOptions);
		} else {
			this.setMyOptions(() => {
				this.saveCompleteWindowState(this.windowOptions);
			});
		} // only save if we have the full descriptor
	}

	_setBounds(params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._setBounds", this.name, params);
		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		params = params || {};
		let bounds = params.bounds;
		super._setBounds(params);
		let ofParams = [bounds.left, bounds.top, bounds.width, bounds.height];
		// if (!Object.keys(this.windowOptions).length || !this.windowOptions.name) bounds.persistBounds = false;
		this.mergeBounds(bounds);

		if (bounds.persistBounds !== false) {
			this._saveWindowOptions();
		}

		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindow.setBounds", ofParams, bounds);
		this.eventManager.trigger("bounds-changing", _extends({}, this.windowOptions.bounds));
		this.callOpenFinWindowFunction("setBounds", ofParams, cb);
	}

	_animate(animateParams, params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper.animate", this.name, animateParams, params);
		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		this.finWindow.animate(animateParams.transitions, animateParams.options, () => {
			this.getBounds({}, (err, bounds) => {
				if (animateParams.transitions.size) {
					if (animateParams.transitions.size.width) {
						bounds.width = animateParams.transitions.size.width;
						bounds.right = bounds.left + bounds.width;
					}
					if (animateParams.transitions.size.height) {
						bounds.height = animateParams.transitions.size.height;
						bounds.bottom = bounds.top + bounds.height;
					}
				}
				bounds.persistBounds = params.persistBounds;
				this._setBounds({ bounds }, cb);
			});
		}, function (error) {
			if (cb) cb(error);
		});
	}

	getMousePosition(params, cb = Function.prototype) {
		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		__WEBPACK_IMPORTED_MODULE_6__common_system__["System"].getMousePosition(cb);
	}

	cacheHandlerForRemoval(event, handler) {
		if (!this._listeners[event]) {
			this._listeners[event] = [];
		}

		this._listeners[event].push(handler);
	}

	_showAt(position, params, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._showAt", this.name, position, params);
		if (typeof params === "function") {
			cb = params;
			params = null;
		}
		this.callOpenFinWindowFunction("showAt", [position.left, position.top, position.force], cb);
	}

	throwFailedCloseNotification(failureMessage) {
		__WEBPACK_IMPORTED_MODULE_2__clients_configClient___default.a.getValue({ field: "finsemble" }, (err, finConfig) => {
			let notificationURL = __WEBPACK_IMPORTED_MODULE_3__common_configUtil__["ConfigUtilInstance"].getDefault(finConfig, "finConfig.notificationURL", finConfig.moduleRoot + "/components/system/notification/notification.html");
			__WEBPACK_IMPORTED_MODULE_4__common_userNotification__["default"].alert("dev", "ONCE-SINCE-STARTUP", "Window close timed out", failureMessage, { url: notificationURL });
		});
	}
	_blur(params = {}, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._blur", this.name, params);
		this.callOpenFinWindowFunction("blur", params, cb);
	}

	_focus(params = {}, cb = Function.prototype) {
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._focus", this.name, params);
		this.callOpenFinWindowFunction("focus", params, cb);
	}
	//Invoked when out-of-bounds closes are detected. This might be an alt+f4, a close from the task bar, etc. Only happens when openfin or electron emit a closed event for the window. When we close our windows, we suppress that event.
	_systemClosed(params = {}, cb = Function.prototype) {
		//If we're closing, we shouldn't call focus/btf/update_options, etc. Doing so can cause errors down in openfin.
		this.closing = true;
		params.fromSystem = true;
		super.close(params, (() => {
			var _ref2 = _asyncToGenerator(function* (err, response) {
				cb();
			});

			return function (_x, _x2) {
				return _ref2.apply(this, arguments);
			};
		})());
	}
	_close(params, cb = Function.prototype) {
		var _this2 = this;

		//merging all params because otherwise the params dont pass properly and remove from workspace fails
		this.finWindow.removeEventListener("closed", this._systemClosed);
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("OpenFinWindowWrapper._close", this.name, params);
		if (typeof params === "function") {
			cb = params;
			params = null;
		}

		let self = this;
		// When we receive a close command, we first pass the command to the parent window. The parent window may decide to supersede. In its response, it will then set the flag "shouldContinue" to false if we shouldn't actually perform the close function.
		super._close(params, (() => {
			var _ref3 = _asyncToGenerator(function* (err, response) {
				if (response.shouldContinue) {
					self.finWindow.close(true, function () {
						cb();
					}, function (err1) {
						__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.error("ERROR CLOSING WINDOW", err1);
						cb();
					});
					__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.transmit(`${_this2.windowIdentifier.windowName}.close`, params, { suppressWarnings: true });
				} else {
					cb();
				}
			});

			return function (_x3, _x4) {
				return _ref3.apply(this, arguments);
			};
		})());
	}
	//window client adds a callback here. This way, whenever close is called _anywhere_ in the system, it's passed down to the window client and cleanup can happen in the component.
	listenForClose(cb) {
		let listener = (err, response) => {
			delete window._FSBLCache.windows[this.name];
			delete window._FSBLCache.windowAttempts[this.name];
			//If the window that the wrap belongs to is the one calling close, just call the openfin method. Otherwise, some other window is trying to close it - so we send a message to that window, which will eventually close itself.
			__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.removeListener(`${this.windowIdentifier.windowName}.close`, listener);
			cb(response.data);
		};
		__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.addListener(`${this.windowIdentifier.windowName}.close`, listener);
	}

	//Called on destruct so that we don't leave trash in the router or on the openfin window.
	removeListeners() {
		let channels = Object.keys(this.RouterHandlers);
		__WEBPACK_IMPORTED_MODULE_5__clients_logger___default.a.system.debug("WRAP Removing Listeners", channels);
		for (let key in channels) {
			__WEBPACK_IMPORTED_MODULE_1__clients_routerClientInstance___default.a.removeListener(key, this.RouterHandlers[key]);
		}

		//These are listeners added directly to the wrapped openfin window.
		let events = Object.keys(this._listeners);
		if (events.length) {
			events.forEach(eventName => {
				this._listeners[eventName].forEach(handler => {
					this.removeEventListener(eventName, handler);
				});
			});
		}
	}
}

/* harmony default export */ __webpack_exports__["a"] = (OpenFinWindow);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\WindowAbstractions\\openfinWindowWrapper.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\WindowAbstractions\\openfinWindowWrapper.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_logger__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__clients_logger___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__clients_logger__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_util__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__BaseWindow__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__BaseWindow___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__BaseWindow__);





class StackedWindow extends __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"] {
	constructor(params) {
		super(params);
		this.params = params;
		this.windowState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.NORMAL;
		this._listeners = {};
		this.bindAllFunctions();
		this.addListeners();
	}

	addListeners() {
		this.addEventListener("minimized", () => {
			this.windowState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.MINIMIZED;
		});
		this.addEventListener("restored", () => {
			this.windowState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.NORMAL;
		});
		this.addEventListener("maximized", () => {
			this.windowState = __WEBPACK_IMPORTED_MODULE_3__BaseWindow__["BaseWindow"].WINDOWSTATE.MAXIMIZED;
		});
	}

	_addEventListener(params, handler = Function.prototype) {
		let { eventName } = params;
		this.addEventListener(eventName, handler);
	}

	addEventListener(event, handler = Function.prototype) {
		super.addEventListener(event, handler);
		//..need to add a listener on the child window...
	}

	_removeEventListener(params, handler = Function.prototype) {
		let { eventName } = params;
		this.removeEventListener(eventName, handler);
	}

	removeEventListener(event, handler = Function.prototype) {
		super.removeEventListener(event, handler);
		//..need to add a listener on the child window...
	}

	eventChannelName(channelTopic) {
		return `StackedWindow-${this.name}-${channelTopic}`;
	}

	bindAllFunctions() {
		let self = this;
		for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {
			if (self[name] instanceof Function) {
				self[name] = self[name].bind(self); // only bind function properties
			}
		}
	}

	// wrapper function to listen to bounds changing, but need a better/generalized solution
	listenForBoundsChanging() {
		let eventHandler = (err, message) => {
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindow incoming transmit", this.eventChannelName("bounds-change-request"), message.data);
			//bounds changing will come in from the child window. We need to overwrite the name so that docking thinks it's the stack being moved, not the child.
			message.data.name = this.name;
			this.eventManager.trigger("bounds-change-request", message.data);
		};
		__WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance___default.a.addListener(this.eventChannelName("bounds-change-request"), eventHandler);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Housekeeping function for private window methods
	//////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
  * Handles common housekeeping checks and modifications on params at the beginning of each private window function
  *
  * @param {string} methodName method name (e.g. "minimize", "maximize")
  * @param {object} params
  * @memberof StackedWindow
  * @private
  */
	_privatePreface(methodName, params, callback) {
		if (!window.stackedWindowManager) {
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("StackedWindow wrapper's private functions can only be invoked in the WindowService");
		}

		if (typeof params === "function") {
			// if function then assume callback was passed in with no params
			params = {};
		}
		params = params || {};

		params = __WEBPACK_IMPORTED_MODULE_2__common_util__["clone"](params); // clone so params from calling function won't be modified (and cause other problems)

		params.stackedWindowIdentifier = { windowName: this.identifier.windowName, windowType: this.identifier.windowType }; // add this window's identifier
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug(`StackedWindow.${methodName} _privatePreface`, params);

		var eventBlackList = ["_saveWindowOptions", "_setBounds"];
		if (eventBlackList.includes(methodName)) {
			// if method in event blacklist, then set parameter to skip sending event
			params.doNotTransmitEvent = true;
		}

		return params;
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Private window functions, fulfilled through requests to "super" and Stacked Window Manager Module
	//////////////////////////////////////////////////////////////////////////////////////////////////////

	_minimize(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_minimize", params);
			super._minimize(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.minimize(params, (err, response) => {
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_maximize(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_maximize", params);
			let self = this;
			super._maximize(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.maximize(params, (err, response) => {
						self.eventManager.trigger("maximized");
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_restore(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_restore", params);
			let self = this;
			super._restore(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.restore(params, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.restore callback", err, response);
						self.eventManager.trigger("restored");
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					self.eventManager.trigger("restored");
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_focus(params = {}, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_focus", params);
			super._focus(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.focus(params, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.focus callback", err, response);
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_bringToFront(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_bringToFront", params);
			super._bringToFront(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.bringToFront(params, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.bringToFront callback", err, response);
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_saveWindowOptions(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_saveWindowOptions", params);
			super._saveWindowOptions(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.saveWindowOptions({}, this, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.saveWindowOptions callback", err, response);
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_setBounds(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_setBounds", params);
			super._setBounds(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.setBounds(params, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.setBounds callback", err, response);
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_getBounds(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_getBounds", params);
			super._getBounds(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.getBounds(params, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.getBounds callback", err, response);
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_updateOptions(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_updateOptions", params);
			super._updateOptions(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.updateOptions(params, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.updateOptions callback", err, response);
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_hide(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_hide", params);
			super._hide(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.hide(params, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.hide callback", err, response);
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_show(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_show", params);
			super._show(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.show(params, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.show callback", err, response);
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_close(params = {}, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_close", params);
			super._close(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.close(params, (err, response = {}) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.close callback", err, response);
						callback(err, { shouldContinue: response.shouldContinue || false });
						resolve({ err, data: { shouldContinue: response.shouldContinue || false } });
					});
				} else {
					callback(err, { shouldContinue: false });
					resolve({ err, data: { shouldContinue: false } });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_alwaysOnTop(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_alwaysOnTop", params);
			super._alwaysOnTop(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.alwaysOnTop(params, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.alwaysOnTop callback", err, response);
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	_setOpacity(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._privatePreface("_setOpacity", params);
			super._setOpacity(params, (err, response) => {
				if (!err && response.shouldContinue) {
					window.stackedWindowManager.setOpacity(params, (err, response) => {
						__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.setOpacity callback", err, response);
						callback(err, response);
						resolve({ err, data: response });
					});
				} else {
					callback(err, response);
					resolve({ err, data: response });
				}
			});
		};
		return new Promise(promiseResolver);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// CLEANUP NOTE:
	//
	// WHEN NEW TABBING INTERFACE IS PROVIDED TO PRESENTATION COMPONENTS, THEN ALL THE BELOW FUNCTIONS WILL BE REMOVED - THEY BECOME INTERNAL TO WINDOW SERVICE
	//
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// Housekeeping function for window management methods
	//////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
  * Handles common housekeeping checks and modifications on params at the beginning of each private window-management function
  *
  * @param {string} methodName method name (e.g. "minimize", "maximize")
  * @param {object} params
  * @memberof StackedWindow
  * @private
  */
	_privateManagementPreface(methodName, params, callback) {
		if (typeof params === "function") {
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("StackedWindowWrapper.wrapPreface bad params", params);
		}
		params = params || {};
		params.stackedWindowIdentifier = { windowName: this.identifier.windowName, windowType: this.identifier.windowType }; // add this window's identifier
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug(`StackedWindow.${methodName}  _privateManagementPreface`, params);

		return params;
	}

	/**
  * Temporary function until more cleanup done. Handles common housekeeping checks and modifications on params at the beginning of each private window-management function
  *
  * @param {string} methodName method name (e.g. "minimize", "maximize")
  * @param {object} params
  * @memberof StackedWindow
  * @private
  */
	_newPrivateManagementPreface(methodName, params, callback) {
		if (typeof params === "function") {
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.error("StackedWindowWrapper.wrapPreface bad params", params);
		}
		params = params || {};
		params.stackedWindowIdentifier = { windowName: this.identifier.windowName, windowType: this.identifier.windowType }; // add this window's identifier
		__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug(`StackedWindow.${methodName}  _newPrivateManagementPreface`, params);

		return params;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Below are the stackedWimdow management functions (again fulfilled through requests to the Stacked Window Manager
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// temporarily need to support both private and public management function -- later only window servive will invoke (i.e. no public interfaces)

	_removeWindow(params, callback = Function.prototype) {
		const promiseResolver = resolve => {
			callback = typeof params === "function" ? params : callback; // if callback is the only argument
			params = this._newPrivateManagementPreface("_removeWindow", params);
			window.stackedWindowManager.removeWindow(params, (err, response) => {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindowManager.removeWindow callback", err, response);
				callback(err, response);
				resolve({ err, data: response });
			});
		};
		return new Promise(promiseResolver);
	}

	/**
  * Adds window as a child to a stacked window.  Adds to the top of the stack, or if specied to a specific location in the stack;
  *
  * @param {object=} params
 	 * @param {object} params.stackedWindowIdentifier stacked window to operate on stacked window to operate on
 	 * @param {object} params.windowIdentifier window to add
 	 * @param {number=} params.position the location in the stack to push the window.  Location 0 is the bottom of the stack. Defaults to the top of stack.
 	 * @param {boolean=} params.noSave if true then don't save the store after updating it (will be saved by caller)
  * @param {function=} callback function(err)
  * @memberof StackedWindow
  */
	addWindow(params, callback = Function.prototype) {
		params = this._privateManagementPreface("addWindow", params);

		const promiseResolver = resolve => {
			__WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance___default.a.query("StackedWindow.addWindow", params, (err, queryResponseMessage) => {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindow.addWindow callback", err, queryResponseMessage);
				callback(err, queryResponseMessage.data);
				resolve({ err, data: queryResponseMessage.data });
			});
		};
		return new Promise(promiseResolver);
	}

	/**
  * Removes a child window from a stacked window.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.
  *
 	 * @param {object} params
 .	 * @param {object} params.stackedWindowIdentifier stacked window to operate on
  * @param {object} params.windowIdentifier window to remove
  * @param {boolean=} params.noDocking if true then do not register removed window with docking (the workspace is unaffected)
  * @param {function=} callback function(err)
  * @memberof StackedWindow
  */
	removeWindow(params, callback = Function.prototype) {
		params = this._privateManagementPreface("removeWindow", params);

		const promiseResolver = resolve => {
			__WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance___default.a.query("StackedWindow.removeWindow", params, (err, queryResponseMessage) => {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindow.removeWindow callback", err, queryResponseMessage);
				callback(err, queryResponseMessage.data);
				resolve({ err, data: queryResponseMessage.data });
			});
		};
		return new Promise(promiseResolver);
	}

	/**
  * Removes a window from the stack then closes it.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.
  *
 	 * @param {object} params
 .	 * @param {object} params.stackedWindowIdentifier stacked window to operate on
  * @param {object} params.windowIdentifier window to delete
  * @param {function=} callback function(err)
  * @memberof StackedWindow
  */
	deleteWindow(params, callback = Function.prototype) {
		params = this._privateManagementPreface("deleteWindow", params);

		const promiseResolver = resolve => {
			__WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance___default.a.query("StackedWindow.deleteWindow", params, (err, queryResponseMessage) => {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindow.deleteWindow callback", err, queryResponseMessage);
				callback(err, queryResponseMessage.data);
				resolve({ err, data: queryResponseMessage.data });
			});
		};
		return new Promise(promiseResolver);
	}

	/**
  * Sets the visible window within the stack.  The previously visible window in stack will be automatically hidden.
  *
 	 * @param {object} params
 .	 * @param {object} params.stackedWindowIdentifier stacked window to operate on
  * @param {object} params.windowIdentifier
  * @param {function=} callback function(err)
  * @memberof StackedWindow
  */
	setVisibleWindow(params, callback = Function.prototype) {
		params = this._privateManagementPreface("setVisibleWindow", params);

		const promiseResolver = resolve => {
			__WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance___default.a.query("StackedWindow.setVisibleWindow", params, (err, queryResponseMessage) => {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindow.setVisibleWindow callback", err, queryResponseMessage);
				callback(err, queryResponseMessage.data);
				resolve({ err, data: queryResponseMessage.data });
			});
		};
		return new Promise(promiseResolver);
	}

	/**
  * Reorders the stack, but odes not affect visibility
  *
 	 * @param {object} params
 .	 * @param {object} params.stackedWindowIdentifier stacked window to operate on
  * @param {array} params.windowIdentifiers array of windowIdentifiers which provides the new order
  * @param {function=} callback function(err)
  * @memberof StackedWindow
  */
	reorder(params, callback = Function.prototype) {
		params = this._privateManagementPreface("reorder", params);

		const promiseResolver = resolve => {
			__WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance___default.a.query("StackedWindow.reorder", params, (err, queryResponseMessage) => {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindow.reorder callback", err, queryResponseMessage);
				callback(err, queryResponseMessage.data);
				resolve({ err, data: queryResponseMessage.data });
			});
		};
		return new Promise(promiseResolver);
	}
	/**
  * Reorders the stack, but odes not affect visibility
  *
 	 * @param {object} params
 .	 * @param {object} params.stackedWindowIdentifier stacked window to operate on
  * @param {array} params.windowIdentifiers array of windowIdentifiers which provides the new order
  * @param {function=} callback function(err)
  * @memberof StackedWindow
  */
	stopMove(params = {}, callback = Function.prototype) {
		params = this._privateManagementPreface("stopMove", params);

		const promiseResolver = resolve => {
			__WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance___default.a.query("StackedWindow.stopMove", params, (err, queryResponseMessage) => {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindow.stopMove callback", err, queryResponseMessage);
				callback(err, queryResponseMessage.data);
				resolve({ err, data: queryResponseMessage.data });
			});
		};
		return new Promise(promiseResolver);
	}
	/**
 * Reorders the stack, but odes not affect visibility
 *
  * @param {object} params
 .	 * @param {object} params.stackedWindowIdentifier stacked window to operate on
 * @param {array} params.windowIdentifiers array of windowIdentifiers which provides the new order
 * @param {function=} callback function(err)
 * @memberof StackedWindow
 */
	startMove(params = {}, callback = Function.prototype) {
		params = this._privateManagementPreface("startMove", params);

		const promiseResolver = resolve => {
			__WEBPACK_IMPORTED_MODULE_0__clients_routerClientInstance___default.a.query("StackedWindow.startMove", params, (err, queryResponseMessage) => {
				__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindow.startMove callback", err, queryResponseMessage);
				callback(err, queryResponseMessage.data);
				resolve({ err, data: queryResponseMessage.data });
			});
		};
		return new Promise(promiseResolver);
	}
	/**
  * Returns store for stacked window.  Example usuage below.
  *
  * @memberof StackedWindow
  *
  * @example
  * 		// get the state for one stacked window from the store
  * 		getStore().getValue({ field: stackedWindowIdentifier.name, function (err, stackedWindowState) {}
  *			where stackedWindowState is an object with the following properties
  *				{
  *					stackedWindowIdentifier: the stacked window identifier
  *					childWindowIdentifiers: the window identifiers for all children in the stacked window
  *					visibleWindowIdentifier: the window identifier for the currently visible window
  *					bounds: the current window bounds/corrdiantes for the stacked window (i.e. the current bounds of the visisble window)
  *				}
  */
	getStore(callback = Function.prototype) {
		return this.getWindowStore(callback);
	}

	setupStoreListener() {
		// listen on store and update stackedWindow data
		// since this data will be cache provide hook to get it

		this.getStore().addListener(function () {
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindow listeners", this.windowIdentifer.name);
		});

		this.getStore().addListener({ field: this.windowIdentifer.name }, function () {
			__WEBPACK_IMPORTED_MODULE_1__clients_logger___default.a.system.debug("StackedWindow listeners", this.windowIdentifer.name);
		});
	}
}

/* harmony default export */ __webpack_exports__["a"] = (StackedWindow);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : module.exports; /* eslint-enable camelcase, no-undef */ if (typeof webpackExports === 'function') { __REACT_HOT_LOADER__.register(webpackExports, 'module.exports', "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\WindowAbstractions\\stackedWindowWrapper.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "C:\\Users\\thorsent\\finsemble\\src\\services\\window\\WindowAbstractions\\stackedWindowWrapper.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1), __webpack_require__(3)(module)))

/***/ }),
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(146);


/***/ })
/******/ ]);
//# sourceMappingURL=windowService.js.map