{"version":3,"file":"services/mockDocking/mockDockingService.js","sources":["webpack:///webpack/bootstrap 694f8912e0d744cf5c38?6e36*****","webpack:///src/clients/logger.ts?6e2d*****","webpack:///./~/process/browser.js?82e4*****","webpack:///(webpack)/buildin/harmony-module.js?cc96*****","webpack:///src/common/system.ts?b036*****","webpack:///(webpack)/buildin/global.js?3698*****","webpack:///src/clients/RouterClientInstance.ts?db85*****","webpack:///./src/common/validate.js?611e*****","webpack:///src/common/systemManagerClient.ts?77af*****","webpack:///./src/common/util.js?b343*****","webpack:///./~/async/dist/async.js?b52e*****","webpack:///src/clients/baseClient.ts?3f66*****","webpack:///src/common/constants.ts?24da*****","webpack:///./src/common/configUtil.js?1ec6*****","webpack:///./~/events/events.js?7c71*****","webpack:///(webpack)/buildin/module.js?c3c2*****","webpack:///src/clients/configClient.ts?2071*****","webpack:///src/clients/localLogger.ts?0d5e*****","webpack:///src/common/dependencyManager.ts?ea4d*****","webpack:///src/services/systemManager/_constants.ts?5541*****","webpack:///./~/uuid/lib/bytesToUuid.js?3068*****","webpack:///./~/uuid/lib/rng-browser.js?945e*****","webpack:///./~/uuid/v1.js?f9c7*****","webpack:///./src/common/userNotification.js?3698*****","webpack:///src/common/disentangledUtils.ts?5e28***","webpack:///./~/lodash.throttle/index.js?e1ce*****","webpack:///src/clients/storageClient.ts?61d1***","webpack:///./~/lodash.isequal/index.js?6cec*****","webpack:///./src/common/monitorsAndScaling.js?6d63*****","webpack:///./src/common/routerTransport.js?2fc6*****","webpack:///./~/timers-browserify/main.js?b088*****","webpack:///src/clients/routerClientConstructor.ts?9c56*****","webpack:///src/services/systemManager/_types.ts?5294*****","webpack:///src/services/systemManager/common.ts?1513*****","webpack:///./~/lodash.get/index.js","webpack:///./src/common/systemSettings.js?40b6*****","webpack:///./~/setimmediate/setImmediate.js?4a80*****","webpack:///./~/lodash/lodash.js?03cc***","webpack:///./~/uuid/v4.js?42e7***","webpack:///./~/p-limit/index.js?05fb***","webpack:///./~/lodash.pick/index.js?97c7***","webpack:///./~/p-try/index.js?6a90***","webpack:///./~/uuid/index.js?7e8f***","webpack:///./src/services/window/Docking/boxMath.js?8738","webpack:///./src/services/window/Docking/dockableBox.js?0106","webpack:///src/services/window/Common/Pools/PoolSingletons.ts?f1e8","webpack:///./src/services/window/Docking/constants.js?da6b","webpack:///src/services/window/Common/Pools/ObjectPool.ts?d48a","webpack:///./~/lodash.debounce/index.js?3bdc*","webpack:///./src/common/window/windowGroup.js?504b","webpack:///src/services/window/Common/Pools/WindowPool.ts?d13c","webpack:///./src/services/window/Docking/dockableGroup.js?faf9","webpack:///./src/services/window/Docking/dockableMonitor.js?b955","webpack:///./src/services/window/Docking/dockableWindow.js?eee8","webpack:///./src/services/window/Docking/dockingCalculator.js?6117","webpack:///./src/services/window/Docking/maskBoundsCalculator.js?9b62","webpack:///./src/services/window/Docking/tests/mocks/mockDockingService.js","webpack:///./src/services/window/Docking/tests/mocks/mockMonitor.js","webpack:///./src/services/window/Docking/tests/mocks/mockSystem.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"http://localhost:3375/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 226);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 694f8912e0d744cf5c38","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nconst LOCAL_ONLY_DEFAULT = false; // if true all logging will default to local console; will be overwritten by LoggerService's registration response\nconst ALWAY_ADD_STACKTRACE = false; // if true always add stacktrace data to all log messages (e.g. debug and verbose, not just errors, warning)\n\n// capture everything at startup; will be filtered later as needed when LoggerService's registration response provides settings; overhead here is not too high\nvar DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true, Verbose: true, LocalOnly: LOCAL_ONLY_DEFAULT }; // if true captured for logger\nvar CONSOLE_DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true }; // if true then goes to console and captured for logger\nconst MAX_LOG_MESSAGE_SIZE = 50000;\nconst OVER_LOG_SIZE_LIMIT_MESSAGE = `Log argument greater than ${MAX_LOG_MESSAGE_SIZE / 1000}KB. Check local Console to see output of the object.`;\nconst MAX_QUEUE_SIZE = 5 * 1000; // maximum logger queue size; plenty of space although shouldn't need much since continuously sending to logger if working correctly;\n\nimport throttle = require(\"lodash.throttle\");\nimport { System } from \"../common/system\";\nimport { LocalLogger } from \"./localLogger\";\n\n/**\n * @introduction\n *\n * <h2>Logger Client (Finsemble Workspaces)</h2>\n *\n * The Logger Client supports very efficient and configurable run-time logging to the <a href=tutorial-CentralLogger.html>Central Logger</a>.\n * Logging has a small performance overhead, so developers can liberally instrument their code with log messages for debugging and diagnostics.\n * By default, only error and warning messages are captured by the Logger, with the other message types (e.g., log, info, debug) disabled.\n * Which message types are enabled or disabled is fully controlled from the <a href=tutorial-CentralLogger.html>Central Logger</a> - this means developers can fully instrument their code once and dynamically enable and disable logging later, as needed, for debugging or field support.\n *\n * The Finsemble team uses the Central Logger to <a href=tutorial-Troubleshooting.html>capture log message for field support</a>.\n * Finsemble customers, building their own Finsemble applications, have the option to do the same.\n *\n * **Note:** The Logger Client **wraps** all console logging (e.g., `console.error`, `console.log`) so these message can also be captured and viewed in the Central Logger, but console logging is never disabled locally. For better performance, we recommend most of your code's instrumentation be based on the Logger Client (e.g., `FSBL.Clients.Logger.debug(...)` instead of the `console.debug(...)`).\n *\n * Using the Logger is similar to using the browser's console for logging (e.g., `console.error` or `console.log`), although the Logger Client is accessed through the FSBL object as shown in the examples below.\n *\n *```javascript\n * \t\t\tFSBL.Clients.Logger.error(\"an error message\", anErrorObject);\n * \t\t\tFSBL.Clients.Logger.warn(\"a warning message\", object1, object2, object3);\n * \t\t\tFSBL.Clients.Logger.log(\"logging message\");\n * \t\t\tFSBL.Clients.Logger.info(\"logging message\");\n * \t\t\tFSBL.Clients.Logger.log(\"log message\");\n * \t\t\tFSBL.Clients.Logger.debug(\"debug message\");\n *```\n * The Logger Client also supports system logging (e.g., `Logger.system.log`) for Finsemble's internal logging. All Finsemble client APIs are in the process of being instrumented to log their entry-point calls and parameters, as shown below.\n *\n *```javascript\n * \t\t\tLogger.system.info(\"RouterClient.transmit\", \"TO CHANNEL\", toChannel, \"EVENT\", event);\n *```\n * Developers can view all system logging in the Central Logger, although only `Logger.system.info` messages (recording API interactions) are intended for use outside the Finsemble development team.\n *\n *<strong>Note:</strong> Any service can also use the Logger by directing requiring the client. The Logger can immediately be used, but log message will not be transmitted to the Central Logger until `Logger.start()` is invoked (as shown below).\n *```javascript\n *\n * \t\t\tvar Logger = require(\"../../clients/logger\").default;\n * \t\t\tLogger.log(\"Service Ready\");\n * \t\t\tLogger.start();\n *```\n * @hideConstructor\n * @shouldBePublished true\n * @class Logger\n * @constructor\n */\nexport var LoggerConstructor = function (dependencies?: { RouterClient: any; }) {\n\tvar self = this;\n\tself.RouterClient = dependencies && dependencies.RouterClient;\n\tvar isRegistering = false; // if registering start\n\tvar isRegistered = false; // if registering complete\n\tvar loggerConsole = self;\n\tvar updatedLogState;\n\tvar calibratedTimeStampOffset = 0;\n\tvar newCalibratedTimeStampOffset;\n\tvar filteredMessagesCounter = 0;\n\tthis.startupTime = 0;\n\tvar loggerQueue = [];\n\tvar warningIssued = false; // used to limit warning messages\n\tif (typeof window === \"undefined\") return;\n\tvar loggerClientName = System.Window.getCurrent().name.replace(/\\./, \"-\");\n\tif (window.top !== window) { // amend name if iFrame\n\t\tloggerClientName += \".Frame\";\n\t}\n\tvar clientChannel = \"finsemble.logger.client.\" + loggerClientName;\n\n\t//const CATEGORIES = [\"console\", \"dev\", \"system\", \"perf\"];\n\n\t// Will be updated on registration with Central Logger, but capture everything until then.\n\tvar initialLogState = {\n\t\tconsole: CONSOLE_DEFAULT_LOG_SETTING,\n\t\tdev: DEFAULT_LOG_SETTING,\n\t\tsystem: DEFAULT_LOG_SETTING,\n\t\tperf: DEFAULT_LOG_SETTING,\n\t};\n\n\tvar currentLogState = initialLogState;\n\tfunction LoggerMessage(category, type, data) {\n\t\tthis.category = category;\n\t\tthis.logClientName = loggerClientName;\n\t\tthis.logType = type;\n\t\tthis.logData = data;\n\t\tthis.logTimestamp = window.performance.timing.navigationStart + window.performance.now() + calibratedTimeStampOffset;\n\t}\n\n\tfunction addToQueue(message) {\n\t\tif (loggerQueue.length < MAX_QUEUE_SIZE) {\n\t\t\tloggerQueue.push(message);\n\t\t} else {\n\t\t\tif (!warningIssued) {\n\t\t\t\tconsole.warn(\"Logging Queue Overflowed!\", loggerQueue.length);\n\t\t\t\twarningIssued = true;\n\t\t\t\tlet logState = { Error: false, Warn: false, Info: false, Log: false, Debug: false, Verbose: false, LocalOnly: false };\n\t\t\t\tlet newState = {\n\t\t\t\t\tconsole: logState,\n\t\t\t\t\tdev: logState,\n\t\t\t\t\tsystem: logState,\n\t\t\t\t\tperf: logState,\n\t\t\t\t};\n\n\t\t\t\tsetLogState(newState, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// if log state changes then update queue based on that data (e.g. if no longer logging debug messages, then remove them from the queue)\n\tfunction updateQueueBasedOnState(calibrateTimeFlag) {\n\t\tloggerConsole.system.debug(\"Logger updateQueueBasedOnState\", calibrateTimeFlag, calibratedTimeStampOffset, \"QUEUE LENGTH\", loggerQueue.length, currentLogState);\n\t\tvar newQueue = [];\n\t\tfor (var i = 0, length = loggerQueue.length; i < length; i++) {\n\t\t\tif (currentLogState[loggerQueue[i].category][loggerQueue[i].logType] && !currentLogState[loggerQueue[i].category].LocalOnly) {\n\t\t\t\tif (calibrateTimeFlag) {\n\t\t\t\t\tloggerQueue[i].logTimestamp += calibratedTimeStampOffset; // if flag set then timestamp hasn't been adjusted yet by calibrated offset time\n\t\t\t\t}\n\t\t\t\tnewQueue.push(loggerQueue[i]);\n\t\t\t} else { // only now know LocalOnly for messages, so print those queued out otherwise they will be lost\n\t\t\t\tif (currentLogState[loggerQueue[i].category][loggerQueue[i].logType] && currentLogState[loggerQueue[i].category].LocalOnly) {\n\t\t\t\t\tlet msg = loggerQueue[i];\n\t\t\t\t\tconsole.log(msg.category, msg.logType, msg.logTimestamp - window.performance.timing.navigationStart, msg.logData, \"(Previously queued!)\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tloggerQueue = newQueue;\n\t}\n\n\tthis.setClientName = function (name) {\n\t\tloggerClientName = name;\n\t};\n\n\tthis.getClientName = function (name) {\n\t\treturn loggerClientName;\n\t};\n\n\tthis.clearMessageList = function () {\n\t\tloggerQueue = [];\n\t};\n\n\tfunction setLogState(state, calibrateTimeFlag) {\n\t\tif (state && state.dev) currentLogState = state;\n\t\tupdateQueueBasedOnState(calibrateTimeFlag);\n\t}\n\n\t// logger entry point to return call stack that can be included in a log message\n\tthis.callStack = function () {\n\t\treturn traceString();\n\t};\n\n\tthis.setting = function () {\n\t\treturn currentLogState;\n\t};\n\n\tfunction traceString() {\n\t\tfunction getPosition(string, subString, index) {\n\t\t\treturn string.split(subString, index).join(subString).length;\n\t\t}\n\n\t\tfunction getErrorObject() {\n\t\t\ttry { throw Error(\"\"); } catch (err) { return err; }\n\t\t}\n\t\tvar stack = getErrorObject().stack;\n\t\tvar position = getPosition(stack, \"\\n\", 4);\n\t\tvar tString = stack.substring(position); // strip off irrelevant part of stack\n\t\tvar final = \"Log Stack: \\n\" + tString.substr(1); // insert description\n\t\treturn final;\n\t}\n\n\t// save original console functions since going to wrap/redefine each\n\tvar originalConsoleError = console.error;\n\tvar originalConsoleWarn = console.warn;\n\tvar originalConsoleInfo = console.info;\n\tvar originalConsoleLog = console.log;\n\tvar originalConsoleDebug = console.debug;\n\n\tfunction getRoughSizeOfObject(object) {\n\t\tvar objectList = [];\n\t\tvar stack = [object];\n\t\tvar bytes = 0;\n\t\t//prevent infinite recursion\n\t\tvar attempts = 0;\n\t\twhile (stack.length && attempts < 1000) {\n\t\t\tattempts++;\n\t\t\tvar value = stack.pop();\n\n\t\t\tif (typeof value === \"boolean\") {\n\t\t\t\tbytes += 4;\n\t\t\t}\n\t\t\telse if (typeof value === \"string\") {\n\t\t\t\tbytes += value.length * 2;\n\t\t\t}\n\t\t\telse if (typeof value === \"number\") {\n\t\t\t\tbytes += 8;\n\t\t\t}\n\t\t\telse if\n\t\t\t\t(\n\t\t\t\ttypeof value === \"object\"\n\t\t\t\t&& objectList.indexOf(value) === -1\n\t\t\t) {\n\t\t\t\tobjectList.push(value);\n\n\t\t\t\tfor (var i in value) {\n\t\t\t\t\tstack.push(value[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn bytes;\n\t}\n\n\t// filter out message containing certain substrings;\n\tfunction filterMessage(message) {\n\t\tvar result = (message.logData.includes(\"Finsemble.heartbeat\") === true);\n\t\treturn result;\n\t}\n\n\tfunction formatAndQueueMessage(category, type, args) {\n\t\tvar message;\n\t\tvar noFilter = false;\n\t\tlet CHECK_OBJECT_SIZE = true;\n\t\tif (args[0] === \"forceObjectsToLogger\") {\n\t\t\tnoFilter = true;\n\t\t\tCHECK_OBJECT_SIZE = false;\n\t\t\targs.splice(0, 1);\n\t\t}\n\t\t//Kicks out overly-large objects to prevent the loggerService from jamming up.\n\t\targs = args.map((object) => {\n\t\t\tif (CHECK_OBJECT_SIZE) {\n\t\t\t\tlet bytes = getRoughSizeOfObject(object);\n\t\t\t\tif (bytes > MAX_LOG_MESSAGE_SIZE) {\n\t\t\t\t\t// @todo, Terry, instead of *not* sending the message at all, we should send the first X bytes of the message.\n\t\t\t\t\toutputToConsole(originalConsoleInfo, [\"Message too large to send to the logger.\", args]);\n\t\t\t\t\treturn OVER_LOG_SIZE_LIMIT_MESSAGE;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn object;\n\t\t});\n\n\t\ttry {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\t// Convert arg into a string if it doesn't stringify properly. JavaScript Error class (such as thrown by an unhandled exception) doesn't stringify properly so you must coerce it to a string.\n\t\t\t\tif (args[i] instanceof Error) {\n\t\t\t\t\targs[i] = args[i].toString();\n\t\t\t\t}\n\t\t\t}\n\t\t\tmessage = new LoggerMessage(category, type, JSON.stringify(args));\n\t\t} catch (err) {\n\t\t\targs.splice(0, args.length); // clear but don't redefine since must return updated value\n\t\t\targs.push(traceString());\n\t\t\tmessage = new LoggerMessage(category, type, \"*** Logging Error: \" + JSON.stringify(args));\n\t\t}\n\n\t\tif (noFilter || !filterMessage(message)) {\n\t\t\taddToQueue(message);\n\t\t} else {\n\t\t\tif (++filteredMessagesCounter <= 5) {\n\t\t\t\tlet filterMsg = `\"Filtered Logger Message (${filteredMessagesCounter} of first 5 shown)`;\n\t\t\t\toutputToConsole(originalConsoleInfo, [filterMsg, message]); // put out a few filtered messages then stop so won't clutter console\n\t\t\t}\n\t\t}\n\n\t\tif (isRegistered) {\n\t\t\ttransmitAndClearQueue();\n\t\t}\n\t}\n\n\tlet transmitAndClearQueue = function () {\n\t\tif (loggerQueue.length > 0) {\n\t\t\tself.RouterClient.transmit(\"logger.service.logMessages\", loggerQueue);\n\t\t\tloggerConsole.clearMessageList();\n\t\t}\n\t};\n\n\tif (loggerClientName === \"routerService\") {\n\t\ttransmitAndClearQueue = throttle(transmitAndClearQueue, 100, { leading: false }); // HERE is the interval for transmitting queued messages to the logger service\n\t} else {\n\t\ttransmitAndClearQueue = throttle(transmitAndClearQueue, 250, { leading: false }); // HERE is the interval for transmitting queued messages to the logger service\n\t}\n\t//Helper to flatten the array of arguments passed in, so we can log the full message locally.\n\tfunction flatten(arr) {\n\t\treturn arr.reduce(function (flat, toFlatten) {\n\t\t\treturn flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n\t\t}, []);\n\t}\n\tfunction outputToConsole(consoleType, args) {\n\t\ttry {\n\t\t\tconsoleType.apply(console, flatten(args));\n\t\t} catch (err) {\n\t\t\targs = [];\n\t\t\targs.push(traceString());\n\t\t\t// [Terry] This has invalid syntax, \"category\" and \"type\" don't exist. I don't think this ever gets called.\n\t\t\t// message = new LoggerMessage(category, type, \"*** Logging Error: \" + JSON.stringify(args));\n\t\t}\n\t}\n\n\n\t/**\n\t * Log a dev error message.\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.error(\"some message\", parm1, parm2);\n\t */\n\tthis.error = function () {\n\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\targs.push(traceString());\n\t\tif (currentLogState.dev.Error && !currentLogState.dev.LocalOnly) {\n\t\t\tformatAndQueueMessage(\"dev\", \"Error\", args);\n\t\t}\n\n\t\targs.unshift(\"dev error (\" + window.performance.now() + \"):\");\n\t\toutputToConsole(originalConsoleError, args);\n\t};\n\n\t/**\n\t * Log a dev warning message.\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.warn(\"some message\", parm1, parm2);\n\t */\n\tthis.warn = function () {\n\t\tif (currentLogState.dev.Warn) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\targs.push(traceString());\n\t\t\tif (currentLogState.dev.Warn && !currentLogState.dev.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"dev\", \"Warn\", args);\n\t\t\t}\n\t\t\tif (currentLogState.dev.Warn && currentLogState.dev.LocalOnly) {\n\t\t\t\targs.unshift(\"dev warn (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleWarn, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Log a dev info message.\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.info(\"some message\", parm1, parm2);\n\t */\n\tthis.info = function () {\n\t\tif (currentLogState.dev.Info) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.dev.Info && !currentLogState.dev.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"dev\", \"Info\", args);\n\t\t\t}\n\t\t\tif (currentLogState.dev.Info && currentLogState.dev.LocalOnly) {\n\t\t\t\targs.unshift(\"dev info (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleInfo, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Log a dev log message.\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.log(\"some message\", parm1, parm2);\n\t */\n\tthis.log = function () {\n\t\tif (currentLogState.dev.Log) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.dev.Log && !currentLogState.dev.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"dev\", \"Log\", args);\n\t\t\t}\n\t\t\tif (currentLogState.dev.Log && currentLogState.dev.LocalOnly) {\n\t\t\t\targs.unshift(\"dev log (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleLog, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Log a dev debug message.\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.debug(\"some message\", parm1, parm2);\n\t */\n\tthis.debug = function () {\n\t\tif (currentLogState.dev.Debug) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.dev.Debug && !currentLogState.dev.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"dev\", \"Debug\", args);\n\t\t\t}\n\t\t\tif (currentLogState.dev.Debug && currentLogState.dev.LocalOnly) {\n\t\t\t\targs.unshift(\"dev debug (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Log a dev verbose message (an extra level of verbose-debug output).\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.verbose(\"some message\", parm1, parm2);\n\t */\n\tthis.verbose = function () {\n\t\tif (currentLogState.dev.Verbose) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.dev.Verbose && !currentLogState.dev.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"dev\", \"Verbose\", args);\n\t\t\t}\n\t\t\tif (currentLogState.dev.Verbose && currentLogState.dev.LocalOnly) {\n\t\t\t\targs.unshift(\"dev verbose (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t// system mode functions\n\tthis.system = {};\n\n\t/**\n\t * @param {Array.<any>} arguments\n\t*/\n\tthis.system.error = function () {\n\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\targs.push(traceString());\n\n\t\tif (currentLogState.system.Error && !currentLogState.system.LocalOnly) {\n\t\t\tformatAndQueueMessage(\"system\", \"Error\", args);\n\t\t}\n\n\t\targs.unshift(\"system error (\" + window.performance.now() + \"):\");\n\t\toutputToConsole(originalConsoleError, args);\n\t};\n\n\tthis.system.warn = function () {\n\t\tif (currentLogState.system.Warn) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\targs.push(traceString());\n\t\t\tif (currentLogState.system.Warn && !currentLogState.system.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"system\", \"Warn\", args);\n\t\t\t}\n\t\t\tif (currentLogState.system.Warn && currentLogState.system.LocalOnly) {\n\t\t\t\targs.unshift(\"system warn (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleWarn, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.system.info = function () {\n\t\tif (currentLogState.system.Info) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.system.Info && !currentLogState.system.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"system\", \"Info\", args);\n\t\t\t}\n\t\t\tif (currentLogState.system.Info && currentLogState.system.LocalOnly) {\n\t\t\t\targs.unshift(\"system info (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleInfo, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.system.log = function () {\n\t\tif (currentLogState.system.Log) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.system.Log && !currentLogState.system.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"system\", \"Log\", args);\n\t\t\t}\n\t\t\tif (currentLogState.system.Log && currentLogState.system.LocalOnly) {\n\t\t\t\targs.unshift(\"system log (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleLog, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.system.debug = function () {\n\t\tif (currentLogState.system.Debug) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.system.Debug && !currentLogState.system.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"system\", \"Debug\", args);\n\t\t\t}\n\t\t\tif (currentLogState.system.Debug && currentLogState.system.LocalOnly) {\n\t\t\t\targs.unshift(\"system debug (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.system.verbose = function () {\n\t\tif (currentLogState.system.Verbose) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.system.Verbose && !currentLogState.system.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"system\", \"Verbose\", args);\n\t\t\t}\n\t\t\tif (currentLogState.system.Verbose && currentLogState.system.LocalOnly) {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\t\targs.unshift(\"system log (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t// performance mode functions\n\tthis.perf = {};\n\tthis.perf.error = function () {\n\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\targs.push(traceString());\n\t\tif (currentLogState.perf.Error && !currentLogState.perf.LocalOnly) {\n\t\t\tformatAndQueueMessage(\"perf\", \"Error\", args);\n\t\t}\n\n\t\targs.unshift(\"perf error (\" + window.performance.now() + \"):\");\n\t\toutputToConsole(originalConsoleError, args);\n\t};\n\n\tthis.perf.warn = function () {\n\t\tif (currentLogState.perf.Warn) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\targs.push(traceString());\n\t\t\tif (currentLogState.perf.Warn && !currentLogState.perf.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"perf\", \"Warn\", args);\n\t\t\t}\n\t\t\tif (currentLogState.perf.Warn && currentLogState.perf.LocalOnly) {\n\t\t\t\targs.unshift(\"perf warn (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleWarn, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.perf.info = function () {\n\t\tif (currentLogState.perf.Info) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.perf.Info && !currentLogState.perf.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"perf\", \"Info\", args);\n\t\t\t}\n\t\t\tif (currentLogState.perf.Info && currentLogState.perf.LocalOnly) {\n\t\t\t\targs.unshift(\"perf info (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleInfo, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.perf.log = function () {\n\t\tif (currentLogState.perf.Log) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.perf.Log && !currentLogState.perf.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"perf\", \"Log\", args);\n\t\t\t}\n\t\t\tif (currentLogState.perf.Log && currentLogState.perf.LocalOnly) {\n\t\t\t\targs.unshift(\"perf log (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleLog, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.perf.debug = function () {\n\t\tif (currentLogState.perf.Debug) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.perf.Debug && !currentLogState.perf.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"perf\", \"Debug\", args);\n\t\t\t}\n\t\t\tif (currentLogState.perf.Debug && currentLogState.perf.LocalOnly) {\n\t\t\t\targs.unshift(\"perf debug (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.perf.verbose = function () {\n\t\tif (currentLogState.perf.Verbose) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.perf.Verbose && !currentLogState.perf.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"perf\", \"Verbose\", args);\n\t\t\t}\n\t\t\tif (currentLogState.perf.Verbose && currentLogState.perf.LocalOnly) {\n\t\t\t\targs.unshift(\"perf verbose (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.onClose = function () {\n\t\tthis.unregisterClient();\n\t};\n\n\tfunction registerClient() {\n\t\tloggerConsole.system.debug(\"logger.service.registering\", loggerClientName);\n\t\tif (!LOCAL_ONLY_DEFAULT) {\n\t\t\tself.RouterClient.query(\"logger.service.register\", {\n\t\t\t\tclientName: loggerClientName,\n\t\t\t\tclientChannel,\n\t\t\t\tuuid: System.Window.getCurrent().uuid,\n\t\t\t\twindowName: System.Window.getCurrent().name\n\t\t\t}, function (error, queryMessage) {\n\t\t\t\tif (error) { // for some very early clients the logger may not be ready yet, so retry after a small wait\n\t\t\t\t\tsetTimeout(registerClient, 750);\n\t\t\t\t} else {\n\t\t\t\t\tisRegistered = true;\n\t\t\t\t\tloggerConsole.system.debug(\"logger.service.registered\");\n\t\t\t\t\tupdatedLogState = queryMessage.data;\n\t\t\t\t\tif (loggerClientName !== \"routerService\") {\n\t\t\t\t\t\tcalibratedTimeStampOffset = newCalibratedTimeStampOffset; // from now the real offset time will be used for all timestamps\n\t\t\t\t\t\tsetLogState(updatedLogState, true); // true indicates must adjust already queued timestamps by the new offset time\n\t\t\t\t\t} else { // router services doesn't need to calibrate time since it is the reference time\n\t\t\t\t\t\tsetLogState(updatedLogState, false);\n\t\t\t\t\t}\n\t\t\t\t\tformatAndQueueMessage(\"system\", \"Debug\", [\"Logger Registered\"]);\n\t\t\t\t\ttransmitAndClearQueue();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tself.RouterClient.addListener(clientChannel, function (error, message) {\n\t\t\tloggerConsole.system.debug(\"logger.client.setLogState\", message.data);\n\t\t\tupdatedLogState = message.data;\n\t\t\tsetLogState(updatedLogState, false);\n\t\t});\n\t}\n\n\tfunction unregisterClient(params = {}, cb = Function.prototype) {\n\t\tloggerConsole.system.debug(\"logger.service.unregister\", loggerClientName);\n\t\ttransmitAndClearQueue(); // send any message currently in the log queue\n\t\tself.RouterClient.query(\"logger.service.unregister\", loggerClientName, cb);\n\t}\n\n\tfunction registerOnceWhenStarted() {\n\t\tif (!isRegistering) {\n\t\t\tself.startupTime = performance.now() - self.startupTime;\n\t\t\tregisterClient();\n\t\t\tisRegistering = true;\n\t\t}\n\t}\n\n\tthis.unregisterClient = unregisterClient;\n\n\tthis.isLogMessage = function (channel) {\n\t\treturn (channel === \"logger.service.logMessages\");\n\t};\n\tthis.status = \"offline\";\n\t/** Sets the router client for this instance of the Logger client.\n\t *\n\t * This is necessary to do after instantiation because the RouterClient\n\t * and the Logger have a mutual dependency on each other.\n\t*/\n\tthis.setRouterClient = (routerClient) => {\n\t\tthis.RouterClient = routerClient;\n\t}\n\tthis.start = function (routerClient?) {\n\t\tthis.startupTime = performance.now();\n\t\tvar self = this;\n\t\tif (!self.RouterClient) {\n\t\t\tconsole.log(\"No instance of the RouterClient found for this instance of the Logger. Dynamically requiring it.\");\n\t\t\tself.RouterClient = require(\"./routerClientInstance\").default;\n\t\t}\n\t\tlet onlineSubscription, allActiveSubscription;\n\t\t//Wait for the service before coming online. can't use the dependency manager, because it uses the router, which uses the logger.\n\t\tfunction comeOnline() {\n\t\t\tself.status = \"online\";\n\t\t\tloggerConsole.system.debug(\"Logger onReady\", loggerClientName);\n\t\t\t// timer calibration must be done so the messages will be correctly sorted in the central logger;\n\t\t\t// this is necessary because there is timer drift between windows --- this appears to be a Chromium\n\t\t\t// bug we have to work around it.  The timeOffset value adjusts the time using the routerService's\n\t\t\t// time as a central reference point.\n\t\t\tself.RouterClient.calibrateTimeWithRouterService(function (timeOffset) {\n\t\t\t\tnewCalibratedTimeStampOffset = timeOffset;\n\t\t\t\tregisterOnceWhenStarted();\n\t\t\t});\n\t\t}\n\t\tlet onRouterReady = () => {\n\t\t\tallActiveSubscription = self.RouterClient.subscribe(\"Finsemble.Service.State.loggerService\", function (err, event) {\n\t\t\t\tif (event.data.state === \"ready\") {\n\t\t\t\t\tcomeOnline();\n\t\t\t\t\tself.RouterClient.unsubscribe(allActiveSubscription);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tif (window.name === \"routerService\") {\n\t\t\tself.RouterClient.query(\"logger.service.register\", {\n\t\t\t}, function (error, queryMessage) {\n\t\t\t\tif (error) { // for some very early clients the logger may not be ready yet, so retry after a small wait\n\t\t\t\t\tsetTimeout(onRouterReady, 750);\n\t\t\t\t} else {\n\t\t\t\t\tonRouterReady();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tself.RouterClient.onReady(onRouterReady);\n\t\t}\n\t};\n};\n\n/** When running unit tests, we don't want to use the real Logger.\n * `window` is an easy indicator of our environment.\n * @TODO - refactor to some sort of global like FSBL.environment. */\nexport const Logger = typeof window !== \"undefined\" ?\n\tnew LoggerConstructor()\n\t: new LocalLogger();\n\nexport default Logger;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/logger.ts","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 1\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","module.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/harmony-module.js\n// module id = 2\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","// pass through to openfin. In the future we can make this the pass through to any container.\ndeclare var fin;\ndeclare var e2o;\ndeclare var chrome;\n\nimport { IGlobals } from \"../common/Globals\";\n/** The global `window` object. We cast it to a specific interface here to be\n * explicit about what Finsemble-related properties it may have.*/\nconst Globals =\n\t/** In our testing environments (i.e, mocha running in node.js),\n\t * `window` is not defined. Therefore, we have to check that `window`\n\t * exists; otherwise, in node, `process` is the global context.\n\t */\n\ttypeof window !== \"undefined\" ?\n\t\twindow as IGlobals\n\t\t: process as any as IGlobals;\n\nclass SystemWindow {\n\tconstructor(params, cb, errCb?) {\n\t\treturn new fin.desktop.Window(params, cb);\n\t}\n\n\tstatic get getCurrent() {\n\t\treturn fin.desktop.Window.getCurrent;\n\t}\n\n\tstatic get wrap() {\n\t\treturn fin.desktop.Window.wrap;\n\t}\n}\n\nclass Application {\n\tconstructor(params, cb, errCb?) {\n\t\treturn new fin.desktop.Application(params, cb);\n\t}\n\n\tstatic get getCurrent() {\n\t\treturn fin.desktop.Application.getCurrent;\n\t}\n\n\tstatic get wrap() {\n\t\treturn fin.desktop.Application.wrap;\n\t}\n}\n\nclass SystemNotification {\n\tconstructor(params) {\n\t\tnew fin.desktop.Notification(params);\n\t}\n}\n\nexport class System {\n\tstatic get Application() {\n\t\treturn Application;\n\t}\n\tstatic get Window() {\n\t\treturn SystemWindow;\n\t}\n\tstatic get Notification() {\n\t\treturn SystemNotification;\n\t}\n\n\tstatic getMousePosition(cb) {\n\t\tfin.desktop.System.getMousePosition((mousePosition) => {\n\t\t\tif (mousePosition.left || mousePosition.left === 0) mousePosition.x = mousePosition.left;\n\t\t\tif (mousePosition.top || mousePosition.top === 0) mousePosition.y = mousePosition.top;\n\t\t\tcb(null, mousePosition);\n\t\t}, (err) => { cb(err, null); });\n\t}\n\n\tstatic getMonitorInfo(cb) {\n\t\tfin.desktop.System.getMonitorInfo((info) => {\n\t\t\tcb(info);\n\t\t});\n\t}\n\n\tstatic get container() {\n\t\tif (fin.container) return fin.container;\n\t\treturn \"Openfin\";\n\t}\n\n\tstatic get fin() {\n\t\treturn e2o || fin || {};\n\t}\n\n\t// static get makes this behave like a static variable. so calling system.ready is equivalent to fin.desktop.main.\n\tstatic get ready() {\n\t\treturn fin.desktop.main;\n\t}\n\n\tstatic get getHostSpecs() {\n\t\treturn fin.desktop.System.getHostSpecs;\n\t}\n\n\tstatic get InterApplicationBus() {\n\t\treturn fin.desktop.InterApplicationBus;\n\t}\n\n\tstatic get launchExternalProcess() {\n\t\treturn fin.desktop.System.launchExternalProcess;\n\t}\n\n\tstatic get terminateExternalProcess() {\n\t\treturn fin.desktop.System.terminateExternalProcess;\n\t}\n\n\tstatic get getAllApplications() {\n\t\treturn fin.desktop.System.getAllApplications;\n\t}\n\n\tstatic get exit() {\n\t\treturn fin.desktop.System.exit;\n\t}\n\n\tstatic get clearCache() {\n\t\treturn fin.desktop.System.clearCache;\n\t}\n\n\tstatic get showDeveloperTools() {\n\t\treturn fin.desktop.System.showDeveloperTools;\n\t}\n\n\tstatic get getRuntimeInfo() {\n\t\treturn fin.desktop.System.getRuntimeInfo || chrome.desktop.getDetails;\n\t}\n\n\tstatic get addEventListener() {\n\t\t/* events we use so far in Finsemble: monitor-info-changed, session-changed */\n\t\treturn fin.desktop.System.addEventListener;\n\t}\n\n\tstatic get getVersion() {\n\t\treturn fin.desktop.System.getVersion;\n\t}\n\n\tstatic get openUrlWithBrowser() {\n\t\treturn fin.desktop.System.openUrlWithBrowser;\n\t}\n\n\tstatic get getAllWindows() {\n\t\treturn fin.desktop.System.getAllWindows;\n\t}\n\n\tstatic get getProcessList() {\n\t\treturn fin.desktop.System.getProcessList;\n\t}\n\n\tstatic FinsembleReady(cb) {\n\t\tif (Globals.FSBL && Globals.FSBL.addEventListener) {\n\t\t\treturn Globals.FSBL.addEventListener(\"onready\", cb);\n\t\t}\n\t\treturn window.addEventListener(\"FSBLready\", cb);\n\t}\n\n\t/**\n\t * Performs handshake with FEA to indicate the primary application started successfully\n\t */\n\tstatic startupApplicationHandshake() {\n\t\tif (fin.desktop.System.startupApplicationHandshake) {\n\t\t\tfin.desktop.System.startupApplicationHandshake();\n\t\t}\n\t}\n\n\t// This is not overriding or pointing to Openfin. This is the pattern used to close applications.\n\tstatic closeApplication(app, cb = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tlet t;\n\t\t\tlet timeoutCleared = false;\n\t\t\tlet terminateAndResolve = () => {\n\t\t\t\tif (timeoutCleared) return;\n\t\t\t\tconsole.log(\"Attempting to terminate\", app.uuid);\n\t\t\t\tapp.terminate(() => {\n\t\t\t\t\tcb();\n\t\t\t\t\tresolve();\n\t\t\t\t}, () => {\n\t\t\t\t\tif (timeoutCleared) return;\n\t\t\t\t\ttimeoutCleared = true;\n\t\t\t\t\tclearInterval(t);\n\t\t\t\t\t// If closing fails, force close\n\t\t\t\t\tconsole.log(\"force closing \", app.uuid);\n\t\t\t\t\tapp.terminate();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Hanging apps can be unresponsive to close and terminate calls for a period of time, keep trying until they're closed\n\t\t\tt = setInterval(terminateAndResolve, 2000);\n\n\t\t\tconsole.log(\"closing \", app.uuid);\n\t\t\t//OpenFin windows will wait to callback until close is successful, so no need to keep trying to close on a success callback.\n\t\t\tapp.close(false, () => {\n\t\t\t\tconsole.log(\"app.close: successfully closed\", app.uuid);\n\t\t\t\ttimeoutCleared = true;\n\t\t\t\tclearInterval(t);\n\t\t\t\tcb();\n\t\t\t\tresolve();\n\t\t\t}, terminateAndResolve);\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tstatic isElectron() {\n\t\treturn fin.container === 'Electron';\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// src/common/system.ts","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 4\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n/**\n * @introduction\n * <h2>Router Client Instance</h2>\n * Exports a single shared instance of the router client.  See {@link RouterClientConstructor} for the complete API definition with examples.\n *\n * Example:\n *\n *\t// get a shared instance of RouterClient (shared within the containing component or service)\n *\tvar RouterClient = require('./routerClientInstance').default;\n *\n * @namespace routerClientInstance\n * @shouldBePublished false\n */\n\nimport { IRouterClient } from \"./IRouterClient\";\n\nimport { RouterClientConstructor } from \"./routerClientConstructor\";\nimport { Logger } from \"./logger\";\nlet RCConstructor = RouterClientConstructor as any;\n/** The logger needs a router client, and the router client needs a logger.\n * To get around this fundamental circular dependency, we pass a reference\n * of the RouterClient to the Logger. Only after this is called will the\n * RouterClient and Logger be ready. If RouterClient is NOT required before\n * the Logger, then this file will be dynamically required at Logger.start().\n */\n\n/** An instance of the IRouterClient interface, (that is, the Router Client).\n * All other clients are built on top of the RouterClient; its API is the\n * primary form of communication between the various components of Finsemble.\n */\nlet RouterClientInstance: IRouterClient = new RCConstructor ({ clientName: \"RouterClient\" });\nLogger.setRouterClient(RouterClientInstance);\n\nexport default RouterClientInstance;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/RouterClientInstance.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\nimport SystemSettings from \"./systemSettings\";\n\n/**\n * @introduction\n * <h2>Finsemble Validate Functions</h2>\n *\n */\n\n/**\n * Constructor for Finsemble argument validator.\n *\n * Validation logic is ONLY RAN when SystemSettings diagnostics level is set to debug (i.e. 4 or above)\n * A failed validation will generate a warning message, but nothing more; however application logic can check the validation results.\n *\n * @param {string} console Finsemble console object used to display messages and check diagnostic level\n * @constructor\n * @shouldBePublished false\n */\nvar Validate = function () {\n\n\tfunction warningMsg(paramDescript, thisArg, thisArgType) {\n\n\t\tfunction getErrorObject() {\n\t\t\ttry { throw Error(\"\"); } catch (err) { return err; }\n\t\t}\n\n\t\tvar err = getErrorObject();\n\n\t\tvar caller_line1 = err.stack.split(\"\\n\")[5];\n\t\tvar index1 = caller_line1.indexOf(\"at \");\n\t\tvar msgPart1 = caller_line1.slice(index1 + 2, caller_line1.length);\n\n\t\tvar caller_line2 = err.stack.split(\"\\n\")[6];\n\t\tvar index2 = caller_line2.indexOf(\"at \");\n\t\tvar msgPart2 = caller_line2.slice(index2 + 2, caller_line2.length);\n\n\t\tconsole.warn(\"parameter validation failed: parameter \" + paramDescript + \" is of type '\" + typeof (thisArg) + \"' but should be of type '\" + thisArgType + \"' in\" + msgPart1 + \" called by\" + msgPart2);\n\t}\n\n\t/**\n\t * Confirm parameters are valid. A variable number of parameter pairs are supported.\n\t * @param {any} param1 is arg to validate\n\t * @param {string} paramType1 is required type for parameter (if '=' suffix then parameter is optional). \"any\" represents any type (but not \"undefined\").\n\t * @param {any=} param2 is next arg to validate\n\t * @param {string=} paramType2 os required type for next arg\n\t * @return {boolean} returns turn if parameter list is valid; otherwise, false.\n\t *\n\t * @example\n\t *\n\t * var validate = new Validate(console);\n\t * validate.args(name, \"string\", age, \"number\")\n\t *\n\t * validate.args(topic, \"string\", initialState, \"object=\"); // with optional paramter (represented by \"=\")\n\t *\n\t * validate.args(topic, \"string\", initialState, \"any\"); // with \"any\" type\n\t *\n\t * validate.args(subscribeIDStruct, \"object\") && validate.args(subscribeIDStruct.subscribeID, \"string\"); // only do second validate if first test successful\n\t *\n\t * validate.args(subscribeIDStruct, \"object\", subscribeIDStruct.subscribeID, \"string\"); // only check second parm if first validated successful\n\t *\n\t * validate.args(topic, \"any\", initialState, \"object=\", params, \"object=\"); // depending on logic, can break into separate validations\n\t * params = params || {};\n\t * validate.args(params.subscribeCallback, \"function=\", params.publishCallback, \"function=\", params.unsubscribeCallback, \"function=\");\n\t */\n\tthis.args = function (param1, paramType1, param2, paramType2 /*.....optional more paramter pairs....*/) {\n\t\tvar returnCode = true;\n\t\tif (SystemSettings.validationEnabled()) {\n\t\t\tvar parmCount = arguments.length;\n\t\t\tif ((parmCount + 1) % 2 !== 0) { // parameters must come in pairs (i.e. even number)\n\t\t\t\tfor (var i = 0; i < parmCount; i = i + 2) {\n\t\t\t\t\tvar optionalArg = false;\n\t\t\t\t\tvar thisArg = arguments[i];\n\t\t\t\t\tvar thisArgType = arguments[i + 1];\n\t\t\t\t\tif (thisArgType.slice(-1) === \"=\") { // if last char is \"=\" then optional argument\n\t\t\t\t\t\tthisArgType = thisArgType.slice(0, -1);\n\t\t\t\t\t\toptionalArg = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof (thisArg) !== thisArgType) { // confirms basic case -- the required type\n\t\t\t\t\t\tif (!optionalArg || typeof (thisArg) !== \"undefined\") { // but optional params can be undefined\n\t\t\t\t\t\t\tif (typeof (thisArg) === \"undefined\" || thisArgType !== \"any\") { // but \"any\" type doesn't have to match but can't be undefined\n\t\t\t\t\t\t\t\tvar parameterPosition = (i / 2) + 1;\n\t\t\t\t\t\t\t\twarningMsg(parameterPosition, thisArg, thisArgType);\n\t\t\t\t\t\t\t\treturnCode = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"validate.args requires even number of parameters: \" + JSON.stringify(arguments));\n\t\t\t}\n\t\t}\n\t\treturn returnCode; // always return turn when validation is disable due debug label turned off\n\t};\n\n\t/**\n\t * Confirm parameters are valid. args2() has the same functionality as args() except a third \"parameter description\" is passed in for each argument verified\n\t * Typically this for passing in a properties name for better diagnostic messages when verifying object properties.\n\t * A variable number of parameter \"triples\"\" are supported.\n\t *\n\t * @param {string} paramName1 is descriptive name of param1 (for diagnostic message)\n\t * @param {any} param1 is arg to validate\n\t * @param {string} paramType1 is required type for parameter (if '=' suffix then parameter is optional). \"any\" represents any type (but not \"undefined\").\n\t * @param {string} paramName2 is descriptive name of param1 (for diagnostic message)\n\t * @param {any} param2 is arg to validate\n\t * @param {string} paramType2 is required type for parameter (if '=' suffix then parameter is optional). \"any\" represents any type (but not \"undefined\").\n\t * @return {boolean} returns turn if parameter list is valid; otherwise, false.\n\t *\n\t * @example\n\t *\n\t * var validate = new Utils.Validate(console);\n\t * validate.args2(\"record.name\", record.name, \"string\", \"record.age\", age, \"number\")\n\t *\n\t * // common case using args() and args2() together\n\t * validate.args(topic, \"any\", initialState, \"object=\", params, \"object=\") &&\n\t *   validate.args2(\"params.subscribeCallback\", params.subscribeCallback, \"function=\", \"params.publishCallback\", params.publishCallback, \"function=\") &&\n\t *   validate.args2(\"params.unsubscribeCallback\", params.unsubscribeCallback, \"function=\");\n\t */\n\tthis.args2 = function (paramName1, param1, paramType1, paramName2, param2, paramType2 /*.....optional, more paramter sets of three....*/) {\n\n\t\tvar returnCode = true;\n\t\tif (SystemSettings.validationEnabled()) {\n\t\t\tvar parmCount = arguments.length;\n\t\t\tif ((parmCount + 1) % 3 !== 0) { // parameters must come in sets of three\n\t\t\t\tfor (var i = 0; i < parmCount; i = i + 3) {\n\t\t\t\t\tvar optionalArg = false;\n\t\t\t\t\tvar thisArgName = arguments[i];\n\t\t\t\t\tvar thisArg = arguments[i + 1];\n\t\t\t\t\tvar thisArgType = arguments[i + 2];\n\t\t\t\t\tif (thisArgType.slice(-1) === \"=\") { // if last char is \"=\" then optional argument\n\t\t\t\t\t\tthisArgType = thisArgType.slice(0, -1);\n\t\t\t\t\t\toptionalArg = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof (thisArg) !== thisArgType) { // confirms basic case -- the required type\n\t\t\t\t\t\tif (!optionalArg || typeof (thisArg) !== \"undefined\") { // but optional params can be undefined\n\t\t\t\t\t\t\tif (typeof (thisArg) === \"undefined\" || thisArgType !== \"any\") { // but \"any\" type doesn't have to match but can't be undefined\n\t\t\t\t\t\t\t\twarningMsg(thisArgName, thisArg, thisArgType);\n\t\t\t\t\t\t\t\treturnCode = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"validate.args requires even number of parameters: \" + JSON.stringify(arguments));\n\t\t\t}\n\t\t}\n\t\treturn returnCode; // always return turn when validation is disable due debug label turned off\n\t};\n};\n\nexport default new Validate();\n\n\n// WEBPACK FOOTER //\n// ./src/common/validate.js","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n// NOTE: SystemManagerClient is currently located in common but accessible on FSBL.  We have not decided yet whether or not to expose it like the other clients.\n\nimport RouterClient from \"../clients/routerClientInstance\";\nimport Logger from \"../clients/logger\";\nimport { BootDependencyType, BootStage } from \"../services/systemManager/_types\";\nimport { ALL_BOOT_STAGES } from \"../services/systemManager/_types\"\nimport { SYSLOG_CHANNEL, STAGE_CHANNEL, SHOW_SYSLOG_CHANNEL } from \"../services/systemManager/_constants\"\nimport { statusChannel, checkpointChannel} from \"../services/systemManager/common\";\n\nexport type StageWaitType = \"stageEntered\" | \"stageCompleted\" ;\n\n/**\n * Singleton API to Finsemble System Manager\n */\nclass SystemManagerClient {\n\n\t/**\n\t * Publishes boot status for the service or component (or boot task) being started.  This method is used internally in FSBL and baseService and not directly called.\n\t * @param name the name of the service or component or module\n\t * @param type the type category (\"services\" or \"components\")\n\t * @param state the state (\"completed\" or \"failed\")\n\t *\n\t * @private\n\t */\n\tpublic publishBootStatus(name: string, type: BootDependencyType, state: BootState) {\n\t\tconsole.log(\"publishStartingStatus\", name, state);\n\t\tLogger.system.debug(\"publishBootStatus\", name, type, state);\n\t\tRouterClient.publish(statusChannel(name), { name, type, state });\n\t};\n\n\t/**\n\t * Waits for a specific boot stage\n\t * @param stage the name of the service (e.g. \"storageService\")\n\t * @param when wait until either \"stageEntered\" or \"stageCompleted\"\n\t * @param= [callback]\n\t * @returns a promise\n\t *\n\t * @example\n\t *\n\t * \tawait SystemManagerClient.waitForBootStage(\"authentication\", \"stageCompleted\");\n\t *\n\t * \tSystemManagerClient.waitForBootStage(\"authentication\", \"stageCompleted\", () => {\n\t *\t\tRouterClient.publish(Constants.APPLICATION_STATE_CHANNEL, { state: \"authenticated\" });\n\t * \t});\n\t *\n\t */\n\tpublic waitForBootStage(stage: BootStage, when:StageWaitType, callback = Function.prototype) {\n\n\t\tconst waitForBootStageCompletionPromiseResolver = (resolve, reject) => {\n\t\t\tLogger.system.debug(`SystemManagerClient.waitForBootStage entry`, stage, when);\n\t\t\tlet stageIndex = ALL_BOOT_STAGES.indexOf(stage);\n\n\t\t\tif (stage === \"microkernel\" && when === \"stageEntered\") {\n\t\t\t\tLogger.system.error(\"Cannot wait on `stageEntered` for microkernel because router isn't up yet. So will instead wait for microkernal stage complete.\");\n\t\t\t}\n\n\t\t\t// receives startup state from services -- see SystemManagerClient.publishBootStatus\n\t\t\tlet subscribeId = RouterClient.subscribe(STAGE_CHANNEL, (err, notify) => {\n\t\t\t\tLogger.system.debug(\"SystemManagerClient.waitForBootStage new stage\", notify.data.stage, subscribeId);\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.error(\"SystemManagerClient.waitForBootStage subscribe error\", err);\n\t\t\t\t\tcallback(err);\n\t\t\t\t\treject(err);\n\t\t\t\t} else if (stageIndex === -1) { // if illegal stage was input\n\t\t\t\t\terr = \"illegal stage argument\"\n\t\t\t\t\tLogger.system.debug(\"SystemManagerClient.waitForBootStage subscribe error\", err, stage);\n\t\t\t\t\tcallback(err);\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\t// note the following section handles cases where waitForBootStage might be invoked after the stage has been enter or passed\n\t\t\t\t\tlet currentStageIndex = ALL_BOOT_STAGES.indexOf(notify.data.stage);\n\t\t\t\t\tLogger.system.debug(`SystemManagerClient.waitForBootStage currentStageIndex=${currentStageIndex} stageIndex=${stageIndex} wait-on-stage=${stage} this-stage=${notify.data.stage}`);\n\n\t\t\t\t\t// when the stage before completes (or anytime after) then done for \"stageEntered\"\n\t\t\t\t\tif (when === \"stageEntered\" && (currentStageIndex + 1) >= stageIndex) {\n\t\t\t\t\t\tLogger.system.debug(\"SystemManagerClient.waitForBootStage stageEntered\", stage, subscribeId, callback.name);\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\tRouterClient.unsubscribe(subscribeId);\n\t\t\t\t\t// when current stage matches (or comes after) given stage, then done for \"stageCompleted\"\n\t\t\t\t\t} else if (when === \"stageCompleted\" && currentStageIndex >= stageIndex) {\n\t\t\t\t\t\t\tLogger.system.debug(\"SystemManagerClient.waitForBootStage completed\", stage, subscribeId);\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\tRouterClient.unsubscribe(subscribeId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLogger.system.debug(`SystemManagerClient.waitForBootStage else currentStageIndex=${currentStageIndex} stageIndex=${stageIndex} `, currentStageIndex, stageIndex, stage, subscribeId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\treturn new Promise(waitForBootStageCompletionPromiseResolver);\n\t}\n\n\t/**\n\t * Waits for a specific service (or component or boot task) to be started\n\t * @param name the name of the service (e.g. \"storageService\")\n\t * @param= [callback]\n\t * @returns a promise\n\t *\n\t * @example\n\t *\n\t * \tawait SystemManagerClient.waitForStartup(\"configService\");\n\t *\n\t *\tSystemManagerClient.waitForStartup(\"dataStoreService\", () => {\n\t *\t\tRouterClient.publish(Constants.APPLICATION_STATE_CHANNEL, { state: \"configuring\" });\n\t *\t});\n\t *\n\t */\n\tpublic waitForStartup(name: String, callback = Function.prototype) {\n\n\t\tconst waitForStartupStatePromiseResolver = (resolve, reject) => {\n\t\t\tLogger.system.debug(`SystemManagerClient.waitForStartup.${name}`, name);\n\t\t\t// receives startup state from services -- see SystemManagerClient.publishBootStatus\n\t\t\tlet subscribeId = RouterClient.subscribe(statusChannel(name), (err, notify) => {\n\t\t\t\tLogger.system.debug(\"SystemManagerClient.waitForStartup subscribe\", name, err, notify);\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.error(\"SystemManagerClient.waitForStartup subscribe error\", err);\n\t\t\t\t\tcallback(err);\n\t\t\t\t\treject();\n\t\t\t\t} else {\n\t\t\t\t\tif (notify.data.name === name && notify.data.state === \"completed\") {\n\t\t\t\t\t\tLogger.system.debug(\"SystemManagerClient.waitForStartup completed\", name);\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\tRouterClient.unsubscribe(subscribeId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t};\n\n\t\treturn new Promise(waitForStartupStatePromiseResolver);\n\t}\n\n\t/**\n\t * Publishes a checkpoints status. This must be done for any checkpoint so the SystemManager will know if the checkpoint succeeded or not\n\t * @param parent the name of the service or component containing the checkpoint (as defined in config)\n\t * @param checkpointName tthe name of the checkpoint (as defined in config)\n\t * @param state the state for the checkpoint, either \"completed\" or \"failed\"\n\t *\n\t * @example\n\t *\n\t * \tSystemManagerClient.publishCheckpointState(\"workspaceService\", \"importedLegacyWorkspaces\", \"completed\");\n\t *\n\t */\n\tpublic publishCheckpointState(windowName: string, checkpointName:string, state: BootState) {\n\t\tconsole.log(\"publishCheckpoint\", windowName, checkpointName, state, checkpointChannel(windowName, checkpointName));\n\t\tLogger.system.debug(\"publishCheckpoint\", windowName, checkpointName, state, checkpointChannel(windowName, checkpointName));\n\t\tRouterClient.publish(checkpointChannel(windowName, checkpointName), { windowName, checkpointName, state });\n\t};\n\n\n\t/**\n\t * Shows System Log window and bring its to front.\n\t */\n\tpublic showSystemLog() {\n\t\tLogger.system.debug(\"SystemManagerClient.showSystemLog\");\n\t\tRouterClient.transmit(SHOW_SYSLOG_CHANNEL, true);\n\t}\n\n\t/**\n\t * Displays message on the system log\n\t * @param params gnenerally this is TBD until real system log is written\n\t * @param params.error if true then the log message is an error\n\t * @param params.notification if true then the log message is a notification\n\t * @param message the message string to log\n\t *\n\t * @example\n\t *\n\t * \tSystemManagerClient.systemLog({ error: true}, errorMsg);\n\t *  SystemManagerClient.systemLog({ notification: true }, \"Notification: \" + message);\n\t *\n\t */\n\tpublic systemLog(params, logMessage) {\n\t\tLogger.system.debug(\"SystemManagerClient.systemLog\", params, logMessage);\n\t\tRouterClient.transmit(SYSLOG_CHANNEL, { params, logMessage });\n\t}\n}\n\nvar systemManagerClient = new SystemManagerClient();\n\nexport default systemManagerClient;\n\n\n// WEBPACK FOOTER //\n// src/common/systemManagerClient.ts","/*!\n * Copyright 2017 by ChartIQ, Inc.\n * All rights reserved.\n */\nimport { System } from \"./system\";\nimport _Monitors from \"./monitorsAndScaling\";\nexport const Monitors = new _Monitors(Function.prototype, Function.prototype, { System });\nimport Logger from \"../clients/logger\";\nimport uuidv1 from \"uuid/v1\";\n\n/*if (typeof fin !== \"undefined\") { //For Docking Tests -> removing this because Monitors are now handled bu the Monitors object. Docking tests will fail.\n\tSystem.ready(() => {\n\t\tSystem.addEventListener(\"monitor-info-changed\", function () {\n\t\t\tallMonitors = [];\n\t\t\tgetAllMonitors();\n\t\t});\n\t});\n}*/\n\n/**\n * Gets the container version in object form.\n */\nexport function getContainerVersion(cb = Function.prototype) {\n\treturn new Promise(function (resolve /*, reject*/) {\n\t\tSystem.getVersion((ver) => {\n\t\t\tlet verArr = ver.split(\".\").map(Number);\n\t\t\tlet versionObject = {\n\t\t\t\tmajor: verArr[0],\n\t\t\t\tchromium: verArr[1],\n\t\t\t\tminor: verArr[2],\n\t\t\t\tpatch: verArr[3]\n\t\t\t};\n\t\t\tcb(versionObject);\n\t\t\tresolve({ versionObject });\n\t\t});\n\t});\n};\n/**\n\t * Given a function _that returns a value_, this method will return a thenable object.\n\t * **NOTE** This will not work if your function doesn't return something.\n\t *  <example>\n\t *\t\tfunction myFunc(){\n\t\t\t\tconsole.log('I promise that this is not a promise.');\n\t\t\t }\n\t\tlet myPromise = util.castToPromise(myFunc);\n\t\tmyPromise().then(doSomethingElse);\n\t\t</example>\n\n\t */\nexport function castToPromise(f) {\n\treturn function () {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t//Calls f, checks to see if the returned object has a `then` method. if not, it will resolve the result from the initial function.\n\t\t\tconst result = f.apply(null, Array.from(arguments));\n\t\t\ttry {\n\t\t\t\treturn result.then(resolve, reject);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof TypeError) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t} else {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @introduction\n * <h2>Finsemble Utility Functions</h2>\n */\n\nexport function isPercentage(val) {\n\tif (typeof (val) !== \"string\") {\n\t\treturn false;\n\t}\n\treturn val.indexOf(\"%\") !== -1;\n};\n\nexport function crossDomain(url) {\n\tvar parser = document.createElement(\"a\");\n\tparser.href = url;\n\n\tvar isSameHost = (window.location.hostname === parser.hostname);\n\n\tvar isSameProtocol = (window.location.protocol === parser.protocol);\n\n\tvar wport = (window.location.port !== undefined) ? window.location.port : 80;\n\tvar pport = (parser.port !== undefined) ? parser.port : 80;\n\tvar isSamePort = (wport === pport);\n\n\tvar isCrossDomain = !(isSameHost && isSamePort && isSameProtocol);\n\tLogger.system.debug(\"Launcher crossDomain=\" + isCrossDomain + \" (\" + isSameHost + \":\" + isSameProtocol + \":\" + isSamePort + \")\");\n\treturn isCrossDomain;\n};\n\n/**\n * Gets an array of monitor descriptors. Essentially rationalizing the results of getMonitorInfo.\n * into a single array with additional information added.\n *\n * whichMonitor is set to the secondary monitor number, or \"primary\" if the primary monitor.\n * position is set to a zero index, where primary is the zero position, and each non-primary increments thereafter.\n *\n * Additionally, width and height are calculated and filled in for availableRect and monitorRect.\n *\n * @param {callback-array} cb Returns a list of monitor descriptors (optional or use promise)\n */\nexport var getAllMonitors = Monitors.getAllMonitors;\n\n/**\n * Retrieves a monitor descriptor given an absolute X Y on the virtual screen\n * @param  {number} x The x position\n * @param  {number} y The y position\n * @param {callback-object}  cb Returns the monitor information from the Container.\n * \"isPrimary\" is set to true if it's the primary monitor.\n * null is returned if the x,y coordinates are beyond the bounds of the virtual screen.\n */\nexport var getMonitorFromXY = Monitors.getMonitorFromScaledXY;\n\n/**\n * Retrieves a monitor descriptor for a window. If the window straddles two monitors\n * then the monitor from the top left is provided and \"straddling\" flag is set to true.\n *\n * @param  {WindowDescriptor}   windowDescriptor A windowDescriptor\n * @param  {Function} cb               Returns a monitor descriptor (optional or use promise)\n * @returns {Promise} A promise that resolves to a monitor descriptor\n */\nexport function getMonitorFromWindow(windowDescriptor, cb) {\n\tvar x = Number.isFinite(windowDescriptor.x) ? windowDescriptor.x : windowDescriptor.defaultLeft;\n\tvar y = Number.isFinite(windowDescriptor.y) ? windowDescriptor.y : windowDescriptor.defaultTop;\n\tvar x2 = x + windowDescriptor.defaultWidth;\n\tvar y2 = y + windowDescriptor.defaultHeight;\n\treturn new Promise(function (resolve, reject) {\n\n\t\t// get monitor of top-left\n\t\tMonitors.getMonitorFromScaledXY(x, y, function (monitor) {\n\t\t\tif (!monitor) {\n\t\t\t\tLogger.system.debug(\"getMonitorFromWindow - top-left is off screen, trying bottom right\");\n\t\t\t\t// get monitor of bottom-right\n\t\t\t\tMonitors.getMonitorFromScaledXY(x2, y2, function (monitor) {\n\t\t\t\t\tif (!monitor) {\n\t\t\t\t\t\tLogger.system.debug(\"getMonitorFromWindow - bottom-right is off screen, getting primary\");\n\t\t\t\t\t\t// get primary monitor - add message to the monitor saying that this window isn't really on a monitor\n\t\t\t\t\t\tMonitors.getAllMonitors(function (monitors) {\n\t\t\t\t\t\t\tif (monitors[0]) {\n\t\t\t\t\t\t\t\tif (cb) { cb(monitors[0]); }\n\t\t\t\t\t\t\t\tresolve(monitors[0]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treject(new Error(\"Cannot find monitor for window.\"));\n\t\t\t\t\t\t\t\tif (cb) { cb(null); }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmonitor = clone(monitor);\n\t\t\t\t\tvar monitorRect = monitor.monitorRect;\n\t\t\t\t\tif (monitorRect.left < x || monitorRect.right < y) {\n\t\t\t\t\t\tmonitor.straddling = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (cb) { cb(monitor); }\n\t\t\t\t\tresolve(monitor);\n\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmonitor = clone(monitor);\n\t\t\tvar monitorRect = monitor.monitorRect;\n\t\t\tif (monitorRect.right > x2 || monitorRect.bottom > y2) {\n\t\t\t\tmonitor.straddling = true;\n\t\t\t}\n\t\t\tif (cb) { cb(monitor); }\n\t\t\tresolve(monitor);\n\t\t});\n\t});\n};\n\n/**\n * Returns a finWindow or null if not found\n * @param  {WindowIdentifier}   windowIdentifier A window identifier\n * @param  {Function} cb               Optional callback containing finWindow or null if not found (or use Promise)\n * @return {Promise}                    Promise that resolves to a finWindow or rejects if not found\n */\nexport function getFinWindow(windowIdentifier, cb) {\n\treturn new Promise(function (resolve, reject) {\n\t\t// Default to current window\n\t\tvar myWindow = System.Window.getCurrent();\n\n\t\t// Get options (windowDescriptor) for current window\n\t\t// we need this info even if we're going to reference a different window\n\t\tmyWindow.getOptions(function (options) {\n\t\t\t// If windowName is provided, then find that window\n\t\t\tif (windowIdentifier && windowIdentifier.windowName) {\n\t\t\t\t// If we didn't get a uuid from the caller, then assume\n\t\t\t\t// it's the same window as current window\n\t\t\t\tif (!windowIdentifier.uuid) {\n\t\t\t\t\twindowIdentifier.uuid = options.uuid;\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * Try to wrap the window; if it exists, getInfo will get in\n\t\t\t\t *  to the success function. If not, it'll go into the error callback.\n\t\t\t\t */\n\t\t\t\tlet remoteWindow = System.Window.wrap(windowIdentifier.uuid, windowIdentifier.windowName);\n\t\t\t\tremoteWindow.getInfo(() => {\n\t\t\t\t\tif (cb) { cb(remoteWindow); }\n\n\t\t\t\t\tresolve(remoteWindow);\n\t\t\t\t}, function () {\n\t\t\t\t\tif (cb) { cb(null); }\n\t\t\t\t\treject(`Window ${windowIdentifier.windowName} not found. UUID: ${windowIdentifier.uuid}`);\n\t\t\t\t\tconsole.debug(\"util.getFinWindow: Window \" + windowIdentifier.windowName + \" not found\");\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\t} else if (windowIdentifier && windowIdentifier.componentType) {\n\t\t\t\tif (typeof LauncherService !== \"undefined\") {\n\t\t\t\t\tlet remoteWindow = LauncherService.componentFinder(windowIdentifier);\n\t\t\t\t\tif (remoteWindow) {\n\t\t\t\t\t\tresolve(remoteWindow);\n\t\t\t\t\t\tif (cb) { cb(remoteWindow); }\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(\"util.getFinWindow: Component \" + windowIdentifier.componentType + \" not found.\");\n\t\t\t\t\t\tif (cb) { cb(null); }\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//@TODO, get this through a remote call to Launcher service\n\t\t\t\t\treject(\"getFinWindow by componentType is currently only operable within LaunchService\");\n\t\t\t\t\tif (cb) { cb(null); }\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// return windowDescriptor for current window\n\t\t\t\tif (cb) { cb(myWindow); }\n\t\t\t\tresolve(myWindow);\n\t\t\t}\n\t\t});\n\t});\n};\n\n/**\n * Retrieves a windowDescriptor given a windowIdentifier\n * @param {WindowIdentifier} [windowIdentifier] The window to locate. If empty then the current window is returned.\n * @param {function} cb Function to retrieve result (optional or use Promise)\n * @return {Promise} A promise that resolves to a WindowDescriptor\n */\nexport function getWindowDescriptor(windowIdentifier, cb) {\n\treturn new Promise(function (resolve, reject) {\n\t\tgetFinWindow(windowIdentifier).then(function (finWindow) {\n\t\t\tfinWindow.getOptions(function (options) {\n\t\t\t\tif (cb) { cb(options); }\n\t\t\t\tresolve(options);\n\t\t\t});\n\t\t}).catch(function (errorMessage) {\n\t\t\tconsole.warn(errorMessage);\n\t\t\tif (cb) { cb(null); }\n\t\t\treject(errorMessage);\n\t\t});\n\t});\n};\n\nexport function findMonitor(monitors, field, value) {\n\tfor (var i = 0; i < monitors.length; i++) {\n\t\tvar monitor = monitors[i];\n\t\tif (monitor[field] === value) { return monitor; }\n\t}\n\treturn null;\n};\n/**\n * @param {number} commandMonitor\n * @param {Array.<Object>} monitors\n * @param {number} launchingMonitorPosition\n * commandMonitor, monitors, launchingMonitorPosition\n */\nexport function getWhichMonitor(params, cb) {\n\t//First release of this method took 3 params.\n\tif (arguments.length > 2) {\n\t\tparams = {\n\t\t\tcommandMonitor: arguments[0],\n\t\t\tmonitors: arguments[1],\n\t\t\tlaunchingMonitorPosition: arguments[2]\n\t\t};\n\t\tcb = null;\n\t}\n\tvar monitor;\n\tvar { commandMonitor, monitors, launchingMonitorPosition } = params;\n\tvar isANumber = (commandMonitor && commandMonitor !== \"\") || commandMonitor === 0;\n\tif (commandMonitor === \"primary\") {\n\t\tmonitor = findMonitor(monitors, \"whichMonitor\", \"primary\");\n\t} else if (commandMonitor === \"next\") {\n\t\tlet position = launchingMonitorPosition + 1;\n\t\tif (position >= monitors.length) {\n\t\t\tposition = 0;\n\t\t}\n\t\tmonitor = monitors[position];\n\t} else if (commandMonitor === \"previous\") {\n\t\tlet position = launchingMonitorPosition - 1;\n\t\tif (position < 0) {\n\t\t\tposition = monitors.length - 1;\n\t\t}\n\t\tmonitor = monitors[position];\n\t} else if (commandMonitor === \"mine\") {\n\t\tvar waiting = true;\n\t\t//assuming this is always used in the launcher\n\t\tvar w = activeWindows.getWindow(params.windowIdentifier.windowName);\n\t\tw._getBounds((err, bounds) => {\n\t\t\tif (!err) {\n\t\t\t\tMonitors.getMonitorFromScaledXY(bounds.left, bounds.top, (monitor) => {\n\t\t\t\t\tcb(monitor);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmonitor = monitors[0];\n\t\t\t\tcb(monitor);\n\t\t\t}\n\t\t});\n\t} else if (isANumber) {\n\t\tif (commandMonitor >= monitors.length) {\n\t\t\tcommandMonitor = monitors.length - 1;\n\t\t}\n\t\tmonitor = monitors.filter(monitor => monitor.position === commandMonitor)[0];\n\t} else if (launchingMonitorPosition) {\n\t\tmonitor = monitors[launchingMonitorPosition];\n\t}\n\n\tif (!monitor) { // primary if no monitor found\n\t\tmonitor = monitors[0];\n\t}\n\n\tif (!waiting) {\n\t\tif (cb) {\n\t\t\tcb(monitor);\n\t\t} else {\n\t\t\t//maintaining backwards compatibility\n\t\t\treturn monitor;\n\t\t}\n\t}\n};\n\n/**\n * Gets a monitorInfo based on a command. A command is the typical \"monitor\" param\n * @param  {string} commandMonitor   Monitor command. See {@link LauncherClient#spawn}\n * @param  {object} windowIdentifier The windowIdentifier of the calling function. Necessary to support \"next\",\"previous\" an default.\n * @param {function} [cb] Optional callback\n * @returns {Promise} A promise that resolves to a monitorInfo\n */\nexport function getMonitorFromCommand(commandMonitor, windowIdentifier, cb) {\n\treturn new Promise(function (resolve /*, reject*/) {\n\t\tgetMonitor(windowIdentifier, function (monitorInfo) {\n\t\t\tMonitors.getAllMonitors(function (monitors) {\n\t\t\t\tlet params = {\n\t\t\t\t\tcommandMonitor: commandMonitor,\n\t\t\t\t\tmonitors: monitors,\n\t\t\t\t\tlaunchingMonitorPosition: monitorInfo.position\n\t\t\t\t};\n\t\t\t\tgetWhichMonitor(params, function (finalMonitorInfo) {\n\t\t\t\t\tif (cb) { cb(finalMonitorInfo); }\n\t\t\t\t\tresolve(finalMonitorInfo);\n\t\t\t\t});\n\n\t\t\t});\n\t\t});\n\t});\n};\n\n/**\n * @private\n * @param {WindowDescriptor} windowDescriptor\n * @param {monitorDimensions} monitorDimensions\n * @returns {boolean} Whether window is on the current monitor.\n */\nexport function windowOnMonitor(windowDescriptor, monitorDimensions) {\n\t//if right or left edge is within the window's bounds.\n\tif ((windowDescriptor.left >= monitorDimensions.left && windowDescriptor.left < monitorDimensions.right) ||\n\t\t(windowDescriptor.right <= monitorDimensions.right && windowDescriptor.right > monitorDimensions.left)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n/**\n * Convenience function to get the monitor for the current window\n * @param {WindowDescriptor} [windowIdentifier] The window to find the monitor for. Current window if empty.\n * @param  {Function} cb Returns a monitor descriptor (optional or use Promise)\n * @returns {Promise} A promise that resolves to a monitor descriptor\n */\nexport function getMonitorByDescriptor(windowDescriptor, cb) {\n\treturn new Promise(function (resolve /*, reject*/) {\n\t\tgetMonitorFromWindow(windowDescriptor, function (monitor) {\n\t\t\tif (cb) { cb(monitor); }\n\t\t\tresolve(monitor);\n\t\t});\n\t});\n};\n/**\n * Convenience function to get the monitor for the current window\n * @param {WindowIdentifier} [windowIdentifier] The window to find the monitor for. Current window if empty.\n * @param  {Function} cb Returns a monitor descriptor (optional or use Promise)\n * @returns {Promise} A promise that resolves to a monitor descriptor\n */\nexport function getMonitor(windowIdentifier, cb) {\n\treturn new Promise(function (resolve, reject) {\n\t\tgetWindowDescriptor(windowIdentifier, function (windowDescriptor) {\n\t\t\tif (!windowDescriptor) {\n\t\t\t\treject(\"util.getMonitor: Can't locate windowDescriptor.\");\n\t\t\t} else {\n\t\t\t\tgetMonitorFromWindow(windowDescriptor, function (monitor) {\n\t\t\t\t\tif (cb) { cb(monitor); }\n\t\t\t\t\tresolve(monitor);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n};\n/**\n * Returns a windowIdentifier for the current window\n * @param {Function} cb Callback function returns windowIdentifier for this window (optional or use Promise)\n * @returns {Promise} A promise that resolves to a windowIdentifier\n */\n// @TODO, [Terry] this should be eliminated in favor of calls to windowClient.getWindowIdentifier()\nexport function getMyWindowIdentifier(cb) {\n\tvar finWindow = System.Window.getCurrent();\n\treturn new Promise(function (resolve) {\n\t\tfinWindow.getOptions((windowDescriptor) => {\n\t\t\tvar componentType = null;\n\n\t\t\t// Figure out the component type from what was originally stored when we launched the window\n\t\t\t// options.customData is where our stuff is found\n\t\t\tvar customData = windowDescriptor.customData;\n\t\t\tif (customData && customData.component) {\n\t\t\t\tcomponentType = customData.component.type;\n\t\t\t}\n\t\t\tvar windowIdentifier = {\n\t\t\t\twindowName: finWindow.name,\n\t\t\t\tuuid: finWindow.uuid,\n\t\t\t\tcomponentType: componentType\n\t\t\t};\n\n\t\t\tif (cb) { cb(windowIdentifier); }\n\t\t\tresolve(windowIdentifier);\n\t\t});\n\t});\n};\n/**\n *\t@returns {string} Transforms an array of strings into a camel cased string.\n * @memberof Utils\n */\nexport function camelCase() {\n\tvar str = \"\";\n\tfor (var i = 0; i < arguments.length; i++) {\n\t\tstr += \" \" + arguments[i];\n\t}\n\treturn str\n\t\t.replace(/\\s(.)/g, function ($1) { return $1.toUpperCase(); })\n\t\t.replace(/\\s/g, \"\")\n\t\t.replace(/^(.)/, function ($1) { return $1.toLowerCase(); });\n};\n\n/**\n * Convenience method for cloning an object.\n * @param  {any} from The thing you want to copy\n * @param {any=} to Where you want your copy to end up.\n * @return {any} to Where you want your copy gwe end up.\n */\nexport function clone(from, to) {\n\tif (from === null || typeof from !== \"object\") {\n\t\treturn from;\n\t}\n\t// if (from.constructor != Object && from.constructor != Array) return from;\n\tif (from.constructor == Date || from.constructor == RegExp || from.constructor == Function ||\n\t\tfrom.constructor == String || from.constructor == Number || from.constructor == Boolean) { return new from.constructor(from); }\n\n\tto = to || new from.constructor();\n\n\tfor (var n in from) {\n\t\tto[n] = typeof to[n] === \"undefined\" ? clone(from[n], null) : to[n];\n\t}\n\n\treturn to;\n}\n\nexport function guuid() {\n\treturn uuidv1(); // return global uuid\n};\n\nexport function injectJS(path, cb) { //Inject a script tag with the path given. Once the script is loaded, it executes the callback.\n\tvar script = document.createElement(\"script\");\n\tscript.onload = cb;\n\tscript.type = \"text/javascript\";\n\tscript.async = true;\n\tscript.src = path;\n\tvar head = document.getElementsByTagName(\"head\")[0];\n\tvar firstScript = head.getElementsByTagName(\"script\")[0];\n\thead.insertBefore(script, firstScript);\n};\n\n/** Daniel H. 1/14/2019\n * @TODO - This method is only used in the DragAndDrop client, and it introduces a sneaky circular dependency between\n * this module and the launcherClient. It should be refactored out of this module. This can't be done until v4.0.0, as\n * it would be a breaking change to our API.\n */\n/**\n * This will either open a component with the shared data or publish the shared data using the linker client if the window is linked.\n * @experimental\n *\n * @param {object} params\n * @param {object} [params.data]\n * @param {boolean} [params.publishOnly] if the component is linked, this will only publish the data, not force open a window if it does not exist. If the component is not linked, this is ignored.\n * @param {function} [params.multipleOpenerHandler] Optional. This function is called with on object that contains a map of componentTypes to the data types they can open. It must return a list of components to be opened. If no handler is provided, the first found component will be chosen. It is possible that the component opened may not handle all the data provided.\n * @param {function} cb callback invoked with action taken.\n *\n * @since 1.5: multipleOpenerHandler and callback added\n *\n */\nexport function openSharedData(params, cb) {\n\tvar launcherClient = FSBL.Clients.LauncherClient;\n\tvar linkerClient = FSBL.Clients.LinkerClient;\n\t//If no handler is specified to deal with multiple components, use the first found\n\tif (!params.multipleOpenerHandler) params.multipleOpenerHandler = function (componentsMappedToData) {\n\t\t// find the component that can open the most amount of data\n\t\tvar maxDataTypesOpened = 0;\n\t\tvar componentToOpen;\n\t\tfor (var componentType of Object.keys(componentsMappedToData)) {\n\t\t\tif (componentsMappedToData[componentType].length > maxDataTypesOpened) {\n\t\t\t\tcomponentToOpen = componentType;\n\t\t\t\tmaxDataTypesOpened = componentsMappedToData[componentType].length;\n\t\t\t}\n\t\t}\n\t\treturn [componentToOpen];\n\t};\n\n\tvar errors = [];\n\tvar componentsMappedToData = {};\n\n\t// Loop through the data\n\tlauncherClient.getComponentsThatCanReceiveDataTypes({ dataTypes: Object.keys(params.data) }, function (err, dataTypeComponentMap) {\n\t\tfor (var dataType of Object.keys(dataTypeComponentMap)) {\n\t\t\tif (!dataTypeComponentMap[dataType].componentTypes.length) {\n\t\t\t\tvar error = \"No Components Available to Handle the type: \" + dataType;\n\t\t\t\terrors.push(error);\n\t\t\t\tLogger.system.error(error);\n\t\t\t} else {\n\t\t\t\tfor (var component of dataTypeComponentMap[dataType].componentTypes) {\n\t\t\t\t\tif (!componentsMappedToData[component]) { componentsMappedToData[component] = [dataType]; }\n\t\t\t\t\telse componentsMappedToData[component].push(dataType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// What if multiple components need to be opened?\n\t\tvar componentsToOpen = Object.keys(componentsMappedToData);\n\t\tif (componentsToOpen.length) {\n\t\t\tif (componentsToOpen.length > 1) {\n\t\t\t\tcomponentsToOpen = params.multipleOpenerHandler(componentsMappedToData);\n\t\t\t}\n\t\t\tvar linkerChannels = Object.keys(linkerClient.channels);\n\t\t\tif (linkerChannels.length) { //if linked\n\t\t\t\tvar linkedWindows = linkerClient.getLinkedComponents({ componentTypes: componentsToOpen, windowIdentifier: linkerClient.windowIdentifier() });\n\t\t\t\t// TODO: deal with the case if not all componentTypes that need to be opened are linked\n\t\t\t\tif (linkedWindows.length || params.publishOnly) { // If publishOnly is true then just publish, not spawn\n\t\t\t\t\tlinkerClient.publish({\n\t\t\t\t\t\tdataType: \"Finsemble.DragAndDropClient\",\n\t\t\t\t\t\tdata: params.data\n\t\t\t\t\t});\n\t\t\t\t\tif (cb) cb(errors.length ? errors : null, \"Data published\");\n\t\t\t\t} else { // spawn\n\t\t\t\t\tfor (let component of componentsToOpen) {\n\t\t\t\t\t\tlauncherClient.spawn(component, {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tsharedData: params.data,\n\t\t\t\t\t\t\t\tlinker: {\n\t\t\t\t\t\t\t\t\tchannels: linkerChannels\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\taddToWorkspace: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (cb) cb(errors.length ? errors : null, \"Linked Window(s) spawned with data\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!params.publishOnly) {\n\t\t\t\t\tfor (let component of componentsToOpen) {\n\t\t\t\t\t\tlauncherClient.spawn(component, {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tsharedData: params.data\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\taddToWorkspace: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (cb) cb(errors.length ? errors : null, \"New Window(s) spawned with data\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (cb) cb(errors.length ? errors : null, null);\n\t\t}\n\t});\n};\n\n/**\n * Calculate the new bounds of a window if moved onto the monitor by pulling the monitor along the line\n * between the top-left of the window and the center of the monitor\n * @param {*} monitor a monitor\n * @param {*} bounds current window bounds\n */\nexport function getNewBoundsWhenMovedToMonitor(monitor, bounds) {\n\n\t// Depending if the monitor has claimed space, determine rectangle\n\tlet monitorRect = monitor.unclaimedRect || monitor.availableRect || monitor.monitorRect;\n\n\t// Placeholder for new bounds\n\tlet newBounds = clone(bounds);\n\n\t// adjust vertical offset from monitor by moving top down or bottom up\n\tif (bounds.top < monitorRect.top) {\n\t\tnewBounds.top = monitorRect.top;\n\t} else if (bounds.top > monitorRect.bottom - bounds.height) {\n\t\tnewBounds.top = monitorRect.bottom - bounds.height;\n\t}\n\n\t// Adjust horizontal offset from monitor by moving left-edge rightward or right-edge leftward\n\tif (bounds.left < monitorRect.left) {\n\t\tnewBounds.left = monitorRect.left;\n\t} else if (bounds.left > monitorRect.right - bounds.width) {\n\t\tnewBounds.left = monitorRect.right - bounds.width;\n\t}\n\n\t// Recalculate bottom / right, based on movement of top / left, maintaining width / height\n\tnewBounds.bottom = newBounds.top + newBounds.height;\n\tnewBounds.right = newBounds.left + newBounds.width;\n\n\t// Truncate portions off monitor in case we are downsizing from a maximized window\n\tif (newBounds.right > monitorRect.right) newBounds.right = monitorRect.right;\n\tif (newBounds.top < monitorRect.top) newBounds.top = monitorRect.top;\n\tif (newBounds.left < monitorRect.left) newBounds.left = monitorRect.left;\n\tif (newBounds.bottom > monitorRect.bottom) newBounds.bottom = monitorRect.bottom;\n\n\t// Recalculate width, height in case of truncation to ensure the window fits on the new monitor\n\tnewBounds.height = newBounds.bottom - newBounds.top;\n\tnewBounds.width = newBounds.right - newBounds.left;\n\n\t// Calculate distance the window moved\n\tlet distanceMoved = Math.sqrt((bounds.left - newBounds.left) ** 2 + (bounds.top - newBounds.top) ** 2);\n\n\treturn {\n\t\tnewBounds: newBounds,\n\t\tdistanceMoved: distanceMoved,\n\t\tmonitor: monitor\n\t};\n};\n\n/**\n * Given bounds of a window, will check all monitors against those bounds\n * Will return true if it is completely on a single monitor, false otherwise\n * @param {*} bounds\n * @returns True if the supplied bounds are entirely within a single monitor, false otherwise\n */\nexport function isOnAMonitor(bounds) {\n\treturn this.Monitors.allMonitors.some((monitor) => {\n\t\t/*\n\t\t * 8/26/19 Joe: This used to only use the monitorRect (the entirety of monitor's dimensions)\n\t\t * Switched it to use the unclaimedRect. If window is inside of claimed space, then its\n\t\t * in unusable space anyway.\n\t\t * Included whole rect as a fallback\n\t\t */\n\t\tlet monitorRect = monitor.unclaimedRect || monitor.monitorRect;\n\n\t\treturn bounds.left >= monitorRect.left && bounds.left <= monitorRect.right\n\t\t\t&& bounds.right >= monitorRect.left && bounds.right <= monitorRect.right\n\t\t\t&& bounds.top >= monitorRect.top && bounds.top <= monitorRect.bottom\n\t\t\t&& bounds.bottom >= monitorRect.top && bounds.bottom <= monitorRect.bottom;\n\t});\n}\n\n/**\n * Takes a window's bounds and makes sure it's on a monitor. If the window is just off the monitor, bounds will be adjusted to be on the monitor it was on and then the check will occur again. If the window isn't on a monitor (or runs off of a monitor), we determine the closest monitor\n * based on the distance from the top-left corner of the window to the center of the monitor, and then pull the monitor along that line\n * until the window is on the edge of the monitor\n * @param {*} currentBounds\n * @returns the new bounds for the window. which are different from currentBounds only if the window needs to be relocated\n */\nexport function adjustBoundsToBeOnMonitor(bounds) {\n\tif (this.isOnAMonitor(bounds)) {\n\t\t//If the window is already on a monitor keep the old bounds and stay on monitor\n\t\tLogger.system.info(\"Launcher.adjustWindowDescriptorBoundsToBeOnMonitor: on monitor.\");\n\t\treturn bounds;\n\t}\n\n\t// calculate if the window is on any monitor, and the distance between the top left and the center of the window\n\tlet monitorAdjustments = this.Monitors.allMonitors.map((monitor) => this.getNewBoundsWhenMovedToMonitor(monitor, bounds));\n\n\t// Get the closest monitor, the one with minimum distanceMoved\n\tlet monitorAdjustmentClosest = monitorAdjustments.sort((md1, md2) => md1.distanceMoved - md2.distanceMoved)[0];\n\n\t// notify the movement\n\tLogger.system.info(\"Launcher.adjustWindowDescriptorBoundsToBeOnMonitor: not on monitor.  bounds\", bounds, \"monitor name\", monitorAdjustmentClosest.monitor.name, \"newBounds\", monitorAdjustmentClosest.newBounds);\n\n\t// assign bounds\n\treturn monitorAdjustmentClosest.newBounds;\n};\n\n/**\n * Calculates windowType for a newly spawned window\n * windowType can be set or overwritten in many ways. The intention here is to end up with a limited set of\n * final windowTypes\n * @export\n * @param {*} config - Object containing all possible values used to set windowTypes, some of these values may be unset depending on the execution path\n */\nexport function getWindowType(config) {\n\tconst DEFAULT_WINDOW_TYPE = \"WebWindow\";\n\t// All possible windowTypes. Some of these values will be converted to other types\n\tconst validTypes = [\n\t\t\"openfin\",\n\t\t\"assimilation\",\n\t\t\"assimilated\",\n\t\t\"native\",\n\t\t\"application\",\n\t\t\"OpenFinWindow\",\n\t\t\"NativeWindow\",\n\t\t\"FinsembleNativeWindow\",\n\t\t\"OpenFinApplication\",\n\t\t\"CompoundWindow\",\n\t\t\"WebWindow\",\n\t\t\"WebApplication\",\n\t\t\"StackedWindow\"\n\t];\n\t// If an invalid windowType is given, default and log an error. Note that an empty windowType\n\t// is not an error case. This is to let the user know that they may have made a typo setting a type in\n\t// the config file. We default to keep Finsemble from breaking, but the user may have intended to launch a\n\t// component as a different type.\n\tif (config.windowType && !validTypes.includes(config.windowType)) {\n\t\tLogger.system.error(`Invalid windowType: ${config.windowType}, defaulting to windowType: ${DEFAULT_WINDOW_TYPE}`);\n\t\treturn DEFAULT_WINDOW_TYPE;\n\t}\n\tlet ret = config.windowType || DEFAULT_WINDOW_TYPE;\n\n\t// We allow several additional windowTypes to be inputted to make the config user-friendly\n\t// These windowTypes need to be converted to values Finsemble can process\n\tswitch (config.windowType) {\n\t\tcase \"assimilation\":\n\t\tcase \"assimilated\":\n\t\t\tret = \"NativeWindow\";\n\t\t\tbreak;\n\t\tcase \"native\":\n\t\t\tret = \"FinsembleNativeWindow\";\n\t\t\tbreak;\n\t\tcase \"application\":\n\t\t\tret = \"WebApplication\";\n\t\t\tbreak;\n\t\tcase \"openFinApplication\":\n\t\t\tret = \"WebApplication\";\n\t\t\tLogger.system.warn(`Window type ${config.windowType} deprecated. Please use WebWindow`);\n\t\t\tbreak;\n\t\tcase \"Web\":\n\t\t\tret = \"WebWindow\";\n\t\t\tbreak;\n\t\tcase \"openfin\":\n\t\tcase \"openFinWindow\":\n\t\t\tret = \"WebWindow\";\n\t\t\tLogger.system.warn(`Window type ${config.windowType} deprecated. Please use WebWindow`);\n\t\t\tbreak;\n\t\tcase \"StackedWindow\":\n\t\t\tret = \"StackedWindow\";\n\t\t\tbreak;\n\t\t// If config.windowType is unset, we'll use the DEFAULT_WINDOW_TYPE\n\t\tcase \"default\":\n\t\t\tbreak;\n\t}\n\n\t// Next handle any backward compatibility windowType inputs\n\tif (config.native) ret = \"NativeWindow\"; //Backward Compatibility\n\tif (config.type === \"openfinApplication\") {\n\t\tret = \"WebApplication\"; //Backward Compatibility\n\t\tLogger.system.warn(\"Window type openFinApplication deprecated. Please use WebApplication\");\n\t}\n\tif (config.compound) ret = \"CompoundWindow\";\n\treturn ret;\n}\n\nexport function adjustWindowIfInTaskbarSpace(bounds) {\n\tlet adjustedBounds = this.clone(bounds);\n\n\t//Only one adjustment should be necessary if the docked window is now inside of taskbar space,\n\t//making anymore than one means we need to find a new monitor\n\tlet wasAdjusted = false;\n\tthis.Monitors.allMonitors.forEach(monitor => {\n\t\t// For each monitor, see if the window to be adjusted is currently\n\t\t// 'inside' of the monitor's taskbar space. If so, adjust to be right\n\t\t// below/above the taskbar and recheck isOnAMonitor\n\t\tif (windowBoundsAreInTaskbarSpace(bounds, monitor) && !wasAdjusted) {\n\t\t\tconst taskbar = calculateTaskbarBounds(monitor);\n\t\t\tconst monitorRect = monitor.unclaimedRect || monitor.monitorRect;\n\n\t\t\tswitch (taskbar.edge) {\n\t\t\t\tcase \"top\":\n\t\t\t\t\tadjustedBounds.top = monitorRect.top;\n\t\t\t\t\tadjustedBounds.bottom = adjustedBounds.top + adjustedBounds.height;\n\t\t\t\t\twasAdjusted = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"bottom\":\n\t\t\t\t\tadjustedBounds.top = monitorRect.bottom - adjustedBounds.height;\n\t\t\t\t\tadjustedBounds.bottom = monitorRect.bottom;\n\t\t\t\t\twasAdjusted = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"left\":\n\t\t\t\t\tadjustedBounds.left = monitorRect.left;\n\t\t\t\t\tadjustedBounds.right = adjustedBounds.left + adjustedBounds.width;\n\t\t\t\t\twasAdjusted = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"right\":\n\t\t\t\t\tadjustedBounds.left = adjustedBounds.right - adjustedBounds.width;\n\t\t\t\t\tadjustedBounds.right = monitorRect.right;\n\t\t\t\t\twasAdjusted = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\t// After adjusting bounds to be on the monitor's new dimensions check if the window is\n\t// now on the monitor\n\t// If the window can stay on the current monitor with adjusted bounds, there is no need\n\t// to determine a new monitor to move to. Return the adjusted bounds\n\tif (wasAdjusted && this.isOnAMonitor(adjustedBounds)) {\n\t\treturn adjustedBounds;\n\t}\n\n\treturn this.adjustBoundsToBeOnMonitor(bounds);\n}\n\n/**\n * Takes a window's bounds and a monitor, returns true if the window is in\n * the monitor's taskbar space, false otherwise.\n * @param {*} windowBounds\n * @param {*} monitor\n */\nfunction windowBoundsAreInTaskbarSpace(windowBounds, monitor) {\n\tconst taskbar = calculateTaskbarBounds(monitor);\n\n\tif (!taskbar) return false;\n\n\tswitch (taskbar.edge) {\n\t\tcase \"top\":\n\t\tcase \"bottom\":\n\t\t\treturn windowBounds.top >= taskbar.top &&\n\t\t\t\twindowBounds.bottom <= taskbar.bottom &&\n\t\t\t\twindowBounds.left >= taskbar.left &&\n\t\t\t\twindowBounds.right <= taskbar.right;\n\t\tcase \"left\":\n\t\tcase \"right\":\n\t\t\treturn windowBounds.left >= taskbar.left &&\n\t\t\t\twindowBounds.right <= taskbar.right &&\n\t\t\t\twindowBounds.top >= taskbar.top &&\n\t\t\t\twindowBounds.bottom <= taskbar.bottom;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\n/**\n * Given a monitor, will return the Windows taskbar's claimed space.\n * In electron, this comes with monitor info. In openfin it must be calculated using the differences in\n * monitor.availableRect and monitor.monitorRect.\n * @param {*} monitor The monitor to return the taskbar bounds for\n * @return {*} A bounding box object containing dimensions for the monitor's taskbar (top, bottom, left, right, width, height, and edge)\n * or undefined if the taskbar doesn't exist (Windows 7 has only one taskbar even in a multi-monitor setup, so this is a plausible scenario)\n */\nfunction calculateTaskbarBounds(monitor) {\n\t//Electron keeps a representation of the taskbar on each monitor\n\tif (fin.container === \"Electron\" && monitor.taskbar) {\n\t\treturn monitor.taskbar;\n\t}\n\n\t//OpenFin is left to calculate it with monitorRect/availableRect\n\tif (monitor.availableRect && monitor.monitorRect) {\n\t\tconst usableBounds = monitor.availableRect;\n\t\tconst allBounds = monitor.monitorRect;\n\n\t\t//The edge that differs between monitorRect and availableRect is where the toolbar is.\n\t\t//Calculating that edge here\n\t\tconst differingEdge = findDifferingDimension(allBounds, usableBounds);\n\n\t\t//If this happens it is not necessarily an error, it depends on the environment. Send it as a verbose message.\n\t\t//If it does happen, and is the cause of an error, it will be logged but out-of-the-way for anyone with standard logging\n\t\tif (!differingEdge) {\n\t\t\tLogger.system.debug(\"Utils.calculateTaskbarBounds: Taskbar not found on current monitor: \", monitor);\n\t\t}\n\n\t\tlet taskbar = {\n\t\t\tedge: differingEdge\n\t\t};\n\n\t\t/*\n\t\t * Picturing monitors as coordinate representations, given monitorRect (the entire monitors bounds)\n\t\t * and availableRect (the usable space according to the OS), we can determine where the OS's 'claimed' space/taskbar are.\n\t\t *\n\t\t * e.g.\n\t\t *\n\t\t * This entire square (monitor) is 'monitorRect'\n\t\t * +------------------------------------------+\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |               availableRect              |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * +------------------------------------------+\n\t\t * |                 Taskbar                  |\n\t\t * +------------------------------------------+\n\n\n\t\t */\n\t\tif (differingEdge === \"top\" || differingEdge === \"bottom\") {\n\n\t\t\ttaskbar.left = allBounds.left;\n\t\t\ttaskbar.right = allBounds.right;\n\t\t\ttaskbar.width = allBounds.width;\n\t\t\ttaskbar.height = allBounds.height - usableBounds.height;\n\n\t\t\tif (differingEdge === \"top\") {\n\t\t\t\ttaskbar.top = allBounds.top;\n\t\t\t\ttaskbar.bottom = usableBounds.top;\n\t\t\t} else {\n\t\t\t\ttaskbar.top = usableBounds.bottom;\n\t\t\t\ttaskbar.bottom = allBounds.bottom;\n\t\t\t}\n\n\t\t} else if (differingEdge === \"left\" || differingEdge === \"right\") {\n\n\t\t\ttaskbar.top = allBounds.top;\n\t\t\ttaskbar.bottom = allBounds.bottom;\n\t\t\ttaskbar.width = allBounds.width - usableBounds.width;\n\t\t\ttaskbar.height = allBounds.height;\n\n\t\t\tif (differingEdge === \"left\") {\n\t\t\t\ttaskbar.left = allBounds.left;\n\t\t\t\ttaskbar.right = usableBounds.left;\n\t\t\t} else {\n\t\t\t\ttaskbar.left = usableBounds.right;\n\t\t\t\ttaskbar.right = allBounds.right;\n\t\t\t}\n\n\t\t} else {\n\t\t\ttaskbar = undefined;\n\t\t}\n\n\t\treturn taskbar;\n\t}\n}\n\n/**\n * Given two bounding boxes (objects containing all bounds: top, left, right, bottom, width, height) returns\n * the dimension which differs between the two\n * @param {*} boundingBox1\n * @param {*} boundingBox2\n * @return {string} The string representation of the differing dimension\n */\nfunction findDifferingDimension(boundingBox1, boundingBox2) {\n\tfor (let i = 0; i < Object.keys(boundingBox1).length; i++) {\n\t\tconst dimensionName = Object.keys(boundingBox1)[i];\n\t\tif (boundingBox1[dimensionName] !== boundingBox2[dimensionName]) {\n\t\t\treturn dimensionName;\n\t\t}\n\t}\n\n\t//Return null if no differing dimension found\n\treturn null;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/util.js","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.async = global.async || {})));\n}(this, (function (exports) { 'use strict';\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest$1(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n// Lodash rest function without function.toString()\n// remappings\nfunction rest(func, start) {\n    return overRest$1(func, start, identity);\n}\n\nvar initialParams = function (fn) {\n    return rest(function (args /*..., callback*/) {\n        var callback = args.pop();\n        fn.call(this, args, callback);\n    });\n};\n\nfunction applyEach$1(eachfn) {\n    return rest(function (fns, args) {\n        var go = initialParams(function (args, callback) {\n            var that = this;\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat(cb));\n            }, callback);\n        });\n        if (args.length) {\n            return go.apply(this, args);\n        } else {\n            return go;\n        }\n    });\n}\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Built-in value references. */\nvar Symbol$1 = root.Symbol;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n\n  try {\n    value[symToStringTag$1] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag$1] = tag;\n    } else {\n      delete value[symToStringTag$1];\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString$1 = objectProto$1.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString$1.call(value);\n}\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]';\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\nvar proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nvar breakLoop = {};\n\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nfunction once(fn) {\n    return function () {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nvar iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\nvar getIterator = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n};\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/** Used for built-in method references. */\nvar objectProto$3 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/** `Object#toString` result references. */\nvar argsTag$1 = '[object Arguments]';\nvar arrayTag = '[object Array]';\nvar boolTag = '[object Boolean]';\nvar dateTag = '[object Date]';\nvar errorTag = '[object Error]';\nvar funcTag$1 = '[object Function]';\nvar mapTag = '[object Map]';\nvar numberTag = '[object Number]';\nvar objectTag = '[object Object]';\nvar regexpTag = '[object RegExp]';\nvar setTag = '[object Set]';\nvar stringTag = '[object String]';\nvar weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]';\nvar dataViewTag = '[object DataView]';\nvar float32Tag = '[object Float32Array]';\nvar float64Tag = '[object Float64Array]';\nvar int8Tag = '[object Int8Array]';\nvar int16Tag = '[object Int16Array]';\nvar int32Tag = '[object Int32Array]';\nvar uint8Tag = '[object Uint8Array]';\nvar uint8ClampedTag = '[object Uint8ClampedArray]';\nvar uint16Tag = '[object Uint16Array]';\nvar uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag$1] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/** Detect free variable `exports`. */\nvar freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports$1 && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/** Used for built-in method references. */\nvar objectProto$2 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty$1.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$5 = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;\n\n  return value === proto;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/** Used for built-in method references. */\nvar objectProto$4 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? { value: coll[i], key: i } : null;\n    };\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done) return null;\n        i++;\n        return { value: item.value, key: i };\n    };\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = keys(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? { value: obj[key], key: key } : null;\n    };\n}\n\nfunction iterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function () {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nfunction _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n        callback = once(callback || noop);\n        if (limit <= 0 || !obj) {\n            return callback(null);\n        }\n        var nextElem = iterator(obj);\n        var done = false;\n        var running = 0;\n\n        function iterateeCallback(err, value) {\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            } else if (value === breakLoop || done && running <= 0) {\n                done = true;\n                return callback(null);\n            } else {\n                replenish();\n            }\n        }\n\n        function replenish() {\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n        }\n\n        replenish();\n    };\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array. The iteratee is passed a `callback(err)` which must be called once it\n * has completed. If no error has occurred, the callback should be run without\n * arguments or with an explicit `null` argument. Invoked with\n * (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n  _eachOfLimit(limit)(coll, iteratee, callback);\n}\n\nfunction doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n        return fn(iterable, limit, iteratee, callback);\n    };\n}\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback || noop);\n    var index = 0,\n        completed = 0,\n        length = coll.length;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err) {\n            callback(err);\n        } else if (++completed === length || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nvar eachOfGeneric = doLimit(eachOfLimit, Infinity);\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array. The iteratee is passed a `callback(err)` which must be called once it\n * has completed. If no error has occurred, the callback should be run without\n * arguments or with an explicit `null` argument. Invoked with\n * (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nvar eachOf = function (coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, iteratee, callback);\n};\n\nfunction doParallel(fn) {\n    return function (obj, iteratee, callback) {\n        return fn(eachOf, obj, iteratee, callback);\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    callback = callback || noop;\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n\n    eachfn(arr, function (value, _, callback) {\n        var index = counter++;\n        iteratee(value, function (err, v) {\n            results[index] = v;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines)\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a\n * transformed item. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nvar map = doParallel(_asyncMap);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of asynchronous functions\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument, `fns`, is provided, it will\n * return a function which lets you pass in the arguments as if it were a single\n * function call. The signature is `(..args, callback)`. If invoked with any\n * arguments, `callback` is required.\n * @example\n *\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async.applyEach([enableSearch, updateSchema]),\n *     callback\n * );\n */\nvar applyEach = applyEach$1(map);\n\nfunction doParallelLimit(fn) {\n    return function (obj, limit, iteratee, callback) {\n        return fn(_eachOfLimit(limit), obj, iteratee, callback);\n    };\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a transformed\n * item. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapLimit = doParallelLimit(_asyncMap);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a\n * transformed item. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapSeries = doLimit(mapLimit, 1);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument is provided, it will return\n * a function which lets you pass in the arguments as if it were a single\n * function call.\n */\nvar applyEachSeries = applyEach$1(mapSeries);\n\n/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} function - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nvar apply$2 = rest(function (fn, args) {\n    return rest(function (callArgs) {\n        return fn.apply(null, args.concat(callArgs));\n    });\n});\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2016 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function to convert to an\n * asynchronous function.\n * @returns {Function} An asynchronous wrapper of the `func`. To be invoked with\n * (callback).\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es6 example\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (isObject(result) && typeof result.then === 'function') {\n            result.then(function (value) {\n                callback(null, value);\n            }, function (err) {\n                callback(err.message ? err : new Error(err));\n            });\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\n/**\n * Determines the best order for running the functions in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the functions pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * Functions also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the function itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns undefined\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nvar auto = function (tasks, concurrency, callback) {\n    if (typeof concurrency === 'function') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || noop);\n    var keys$$1 = keys(tasks);\n    var numTasks = keys$$1.length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    baseForOwn(tasks, function (task, key) {\n        if (!isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        arrayEach(dependencies, function (dependencyName) {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));\n            }\n            addListener(dependencyName, function () {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(function () {\n            runTask(key, task);\n        });\n    }\n\n    function processQueue() {\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while (readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        arrayEach(taskListeners, function (fn) {\n            fn();\n        });\n        processQueue();\n    }\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce(rest(function (err, args) {\n            runningTasks--;\n            if (args.length <= 1) {\n                args = args[0];\n            }\n            if (err) {\n                var safeResults = {};\n                baseForOwn(results, function (val, rkey) {\n                    safeResults[rkey] = val;\n                });\n                safeResults[key] = args;\n                hasError = true;\n                listeners = Object.create(null);\n\n                callback(err, safeResults);\n            } else {\n                results[key] = args;\n                taskComplete(key);\n            }\n        }));\n\n        runningTasks++;\n        var taskFn = task[task.length - 1];\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            arrayEach(getDependents(currentTask), function (dependent) {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error('async.auto cannot execute tasks due to a recursive dependency');\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        baseForOwn(tasks, function (task, key) {\n            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n};\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f';\nvar reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f';\nvar rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff';\nvar rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\nvar rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange$1 = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange$1 = '\\\\u0300-\\\\u036f';\nvar reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f';\nvar rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff';\nvar rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\nvar rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange$1 + ']';\nvar rsCombo = '[' + rsComboRange$1 + ']';\nvar rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nvar rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\nvar rsNonAstral = '[^' + rsAstralRange$1 + ']';\nvar rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nvar rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nvar rsZWJ$1 = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?';\nvar rsOptVar = '[' + rsVarRange$1 + ']?';\nvar rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\nvar rsSeq = rsOptVar + reOptMod + rsOptJoin;\nvar rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nvar FN_ARGS = /^(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    func = func.toString().replace(STRIP_COMMENTS, '');\n    func = func.match(FN_ARGS)[2].replace(' ', '');\n    func = func ? func.split(FN_ARG_SPLIT) : [];\n    func = func.map(function (arg) {\n        return trim(arg.replace(FN_ARG, ''));\n    });\n    return func;\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is a function of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    baseForOwn(tasks, function (taskFn, key) {\n        var params;\n\n        if (isArray(taskFn)) {\n            params = taskFn.slice(0, -1);\n            taskFn = taskFn[taskFn.length - 1];\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (taskFn.length === 1) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if (taskFn.length === 0 && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = arrayMap(params, function (name) {\n                return results[name];\n            });\n            newArgs.push(taskCb);\n            taskFn.apply(null, newArgs);\n        }\n    });\n\n    auto(newTasks, callback);\n}\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return rest(function (fn, args) {\n        defer(function () {\n            fn.apply(null, args);\n        });\n    });\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nfunction DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nDLL.prototype.removeLink = function (node) {\n    if (node.prev) node.prev.next = node.next;else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n};\n\nDLL.prototype.empty = DLL;\n\nDLL.prototype.insertAfter = function (node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.insertBefore = function (node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.unshift = function (node) {\n    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n};\n\nDLL.prototype.push = function (node) {\n    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n};\n\nDLL.prototype.shift = function () {\n    return this.head && this.removeLink(this.head);\n};\n\nDLL.prototype.pop = function () {\n    return this.tail && this.removeLink(this.tail);\n};\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    } else if (concurrency === 0) {\n        throw new Error('Concurrency must not be zero');\n    }\n\n    function _insert(data, insertAtFront, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function () {\n                q.drain();\n            });\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                callback: callback || noop\n            };\n\n            if (insertAtFront) {\n                q._tasks.unshift(item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n        setImmediate$1(q.process);\n    }\n\n    function _next(tasks) {\n        return rest(function (args) {\n            workers -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n                var index = baseIndexOf(workersList, task, 0);\n                if (index >= 0) {\n                    workersList.splice(index);\n                }\n\n                task.callback.apply(task, args);\n\n                if (args[0] != null) {\n                    q.error(args[0], task.data);\n                }\n            }\n\n            if (workers <= q.concurrency - q.buffer) {\n                q.unsaturated();\n            }\n\n            if (q.idle()) {\n                q.drain();\n            }\n            q.process();\n        });\n    }\n\n    var workers = 0;\n    var workersList = [];\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        concurrency: concurrency,\n        payload: payload,\n        saturated: noop,\n        unsaturated: noop,\n        buffer: concurrency / 4,\n        empty: noop,\n        drain: noop,\n        error: noop,\n        started: false,\n        paused: false,\n        push: function (data, callback) {\n            _insert(data, false, callback);\n        },\n        kill: function () {\n            q.drain = noop;\n            q._tasks.empty();\n        },\n        unshift: function (data, callback) {\n            _insert(data, true, callback);\n        },\n        process: function () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while (!q.paused && workers < q.concurrency && q._tasks.length) {\n                var tasks = [],\n                    data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    data.push(node.data);\n                }\n\n                if (q._tasks.length === 0) {\n                    q.empty();\n                }\n                workers += 1;\n                workersList.push(tasks[0]);\n\n                if (workers === q.concurrency) {\n                    q.saturated();\n                }\n\n                var cb = onlyOnce(_next(tasks));\n                worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length: function () {\n            return q._tasks.length;\n        },\n        running: function () {\n            return workers;\n        },\n        workersList: function () {\n            return workersList;\n        },\n        idle: function () {\n            return q._tasks.length + workers === 0;\n        },\n        pause: function () {\n            q.paused = true;\n        },\n        resume: function () {\n            if (q.paused === false) {\n                return;\n            }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    return q;\n}\n\n/**\n * A cargo of tasks for the worker function to complete. Cargo inherits all of\n * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\n * @typedef {Object} CargoObject\n * @memberOf module:ControlFlow\n * @property {Function} length - A function returning the number of items\n * waiting to be processed. Invoke like `cargo.length()`.\n * @property {number} payload - An `integer` for determining how many tasks\n * should be process per round. This property can be changed after a `cargo` is\n * created to alter the payload on-the-fly.\n * @property {Function} push - Adds `task` to the `queue`. The callback is\n * called once the `worker` has finished processing the task. Instead of a\n * single task, an array of `tasks` can be submitted. The respective callback is\n * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\n * @property {Function} saturated - A callback that is called when the\n * `queue.length()` hits the concurrency and further tasks will be queued.\n * @property {Function} empty - A callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - A callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke like `cargo.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\n */\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {Function} worker - An asynchronous function for processing an array\n * of queued tasks, which must call its `callback(err)` argument when finished,\n * with an optional `err` argument. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargo.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n */\nfunction cargo(worker, payload) {\n  return queue(worker, 1, payload);\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`. The\n * `key` is the item's key, or index in the case of an array. The iteratee is\n * passed a `callback(err)` which must be called once it has completed. If no\n * error has occurred, the callback should be run without arguments or with an\n * explicit `null` argument. Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachOfSeries = doLimit(eachOfLimit, 1);\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {Function} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction. The `iteratee` is passed a\n * `callback(err, reduction)` which accepts an optional error as its first\n * argument, and the state of the reduction as the second. If an error is\n * passed to the callback, the reduction is stopped and the main `callback` is\n * immediately called with the error. Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback || noop);\n    eachOfSeries(coll, function (x, i, callback) {\n        iteratee(memo, x, function (err, v) {\n            memo = v;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, memo);\n    });\n}\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...Function} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nvar seq$1 = rest(function seq(functions) {\n    return rest(function (args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = noop;\n        }\n\n        reduce(functions, args, function (newargs, fn, cb) {\n            fn.apply(that, newargs.concat(rest(function (err, nextargs) {\n                cb(err, nextargs);\n            })));\n        }, function (err, results) {\n            cb.apply(that, [err].concat(results));\n        });\n    });\n});\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...Function} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nvar compose = rest(function (args) {\n  return seq$1.apply(null, args.reverse());\n});\n\nfunction concat$1(eachfn, arr, fn, callback) {\n    var result = [];\n    eachfn(arr, function (x, index, cb) {\n        fn(x, function (err, y) {\n            result = result.concat(y || []);\n            cb(err);\n        });\n    }, function (err) {\n        callback(err, result);\n    });\n}\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. There is no guarantee that the\n * results array will be returned in the original order of `coll` passed to the\n * `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, results)` which must be called once\n * it has completed with an error (which can be `null`) and an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nvar concat = doParallel(concat$1);\n\nfunction doSeries(fn) {\n    return function (obj, iteratee, callback) {\n        return fn(eachOfSeries, obj, iteratee, callback);\n    };\n}\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, results)` which must be called once\n * it has completed with an error (which can be `null`) and an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n */\nvar concatSeries = doSeries(concat$1);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {Function} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nvar constant = rest(function (values) {\n    var args = [null].concat(values);\n    return initialParams(function (ignoredArgs, callback) {\n        return callback.apply(this, args);\n    });\n});\n\nfunction _createTester(check, getResult) {\n    return function (eachfn, arr, iteratee, cb) {\n        cb = cb || noop;\n        var testPassed = false;\n        var testResult;\n        eachfn(arr, function (value, _, callback) {\n            iteratee(value, function (err, result) {\n                if (err) {\n                    callback(err);\n                } else if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    callback(null, breakLoop);\n                } else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            if (err) {\n                cb(err);\n            } else {\n                cb(null, testPassed ? testResult : getResult(false));\n            }\n        });\n    };\n}\n\nfunction _findGetResult(v, x) {\n    return x;\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, truthValue)` which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nvar detect = doParallel(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, truthValue)` which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, truthValue)` which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectSeries = doLimit(detectLimit, 1);\n\nfunction consoleFunc(name) {\n    return rest(function (fn, args) {\n        fn.apply(null, args.concat(rest(function (err, args) {\n            if (typeof console === 'object') {\n                if (err) {\n                    if (console.error) {\n                        console.error(err);\n                    }\n                } else if (console[name]) {\n                    arrayEach(args, function (x) {\n                        console[name](x);\n                    });\n                }\n            }\n        })));\n    });\n}\n\n/**\n * Logs the result of an `async` function to the `console` using `console.dir`\n * to display the properties of the resulting object. Only works in Node.js or\n * in browsers that support `console.dir` and `console.error` (such as FF and\n * Chrome). If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} function - The function you want to eventually apply all\n * arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\n * the order of operations, the arguments `test` and `fn` are switched.\n *\n * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\n * @name doDuring\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.during]{@link module:ControlFlow.during}\n * @category Control Flow\n * @param {Function} fn - A function which is called each time `test` passes.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `fn`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error if one occured, otherwise `null`.\n */\nfunction doDuring(fn, test, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var next = rest(function (err, args) {\n        if (err) return callback(err);\n        args.push(check);\n        test.apply(this, args);\n    });\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        fn(next);\n    }\n\n    check(null, true);\n}\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} iteratee - A function which is called each time `test`\n * passes. The function is passed a `callback(err)`, which must be called once\n * it has completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with the non-error callback results of \n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var next = rest(function (err, args) {\n        if (err) return callback(err);\n        if (test.apply(this, args)) return iteratee(next);\n        callback.apply(null, [null].concat(args));\n    });\n    iteratee(next);\n}\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {Function} fn - A function which is called each time `test` fails.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `fn`. Invoked with the non-error callback results of `fn`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `fn`'s\n * callback. Invoked with (err, [results]);\n */\nfunction doUntil(fn, test, callback) {\n    doWhilst(fn, function () {\n        return !test.apply(this, arguments);\n    }, callback);\n}\n\n/**\n * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n * is passed a callback in the form of `function (err, truth)`. If error is\n * passed to `test` or `fn`, the main callback is immediately called with the\n * value of the error.\n *\n * @name during\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (callback).\n * @param {Function} fn - A function which is called each time `test` passes.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error, if one occured, otherwise `null`.\n * @example\n *\n * var count = 0;\n *\n * async.during(\n *     function (callback) {\n *         return callback(null, count < 5);\n *     },\n *     function (callback) {\n *         count++;\n *         setTimeout(callback, 1000);\n *     },\n *     function (err) {\n *         // 5 seconds have passed\n *     }\n * );\n */\nfunction during(test, fn, callback) {\n    callback = onlyOnce(callback || noop);\n\n    function next(err) {\n        if (err) return callback(err);\n        test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        fn(next);\n    }\n\n    test(check);\n}\n\nfunction _withoutIndex(iteratee) {\n    return function (value, index, callback) {\n        return iteratee(value, callback);\n    };\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item\n * in `coll`. The iteratee is passed a `callback(err)` which must be called once\n * it has completed. If no error has occurred, the `callback` should be run\n * without arguments or with an explicit `null` argument. The array index is not\n * passed to the iteratee. Invoked with (item, callback). If you need the index,\n * use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n  eachOf(coll, _withoutIndex(iteratee), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each item in `coll`. The\n * iteratee is passed a `callback(err)` which must be called once it has\n * completed. If no error has occurred, the `callback` should be run without\n * arguments or with an explicit `null` argument. The array index is not passed\n * to the iteratee. Invoked with (item, callback). If you need the index, use\n * `eachOfLimit`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n  _eachOfLimit(limit)(coll, _withoutIndex(iteratee), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The iteratee is passed a `callback(err)` which must be called\n * once it has completed. If no error has occurred, the `callback` should be run\n * without arguments or with an explicit `null` argument. The array index is\n * not passed to the iteratee. Invoked with (item, callback). If you need the\n * index, use `eachOfSeries`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachSeries = doLimit(eachLimit$1, 1);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {Function} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    return initialParams(function (args, callback) {\n        var sync = true;\n        args.push(function () {\n            var innerArgs = arguments;\n            if (sync) {\n                setImmediate$1(function () {\n                    callback.apply(null, innerArgs);\n                });\n            } else {\n                callback.apply(null, innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    });\n}\n\nfunction notId(v) {\n    return !v;\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the\n * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\n * which must be called with a  boolean argument once it has completed. Invoked\n * with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nvar every = doParallel(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in the\n * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\n * which must be called with a  boolean argument once it has completed. Invoked\n * with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everyLimit = doParallelLimit(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the\n * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\n * which must be called with a  boolean argument once it has completed. Invoked\n * with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everySeries = doLimit(everyLimit, 1);\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            truthValues[index] = !!v;\n            callback(err);\n        });\n    }, function (err) {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            if (err) {\n                callback(err);\n            } else {\n                if (v) {\n                    results.push({ index: index, value: x });\n                }\n                callback();\n            }\n        });\n    }, function (err) {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, arrayMap(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), baseProperty('value')));\n        }\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    filter(eachfn, coll, iteratee, callback || noop);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nvar filter = doParallel(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar filterLimit = doParallelLimit(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n */\nvar filterSeries = doLimit(filterLimit, 1);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the\n * callback then `errback` is called with the error, and execution stops,\n * otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} fn - a function to call repeatedly. Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback || noop);\n    var task = ensureAsync(fn);\n\n    function next(err) {\n        if (err) return done(err);\n        task(next);\n    }\n    next();\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} function - The function you want to eventually apply all\n * arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each value in `obj`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a\n * transformed value. Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback || noop);\n    var newObj = {};\n    eachOfLimit(obj, limit, function (val, key, next) {\n        iteratee(val, key, function (err, result) {\n            if (err) return next(err);\n            newObj[key] = result;\n            next();\n        });\n    }, function (err) {\n        callback(err, newObj);\n    });\n}\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each value and key in\n * `coll`. The iteratee is passed a `callback(err, transformed)` which must be\n * called once it has completed with an error (which can be `null`) and a\n * transformed value. Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\n\nvar mapValues = doLimit(mapValuesLimit, Infinity);\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each value in `obj`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a\n * transformed value. Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nvar mapValuesSeries = doLimit(mapValuesLimit, 1);\n\nfunction has(obj, key) {\n    return key in obj;\n}\n\n/**\n * Caches the results of an `async` function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {Function} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    hasher = hasher || identity;\n    var memoized = initialParams(function memoized(args, callback) {\n        var key = hasher.apply(null, args);\n        if (has(memo, key)) {\n            setImmediate$1(function () {\n                callback.apply(null, memo[key]);\n            });\n        } else if (has(queues, key)) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            fn.apply(null, args.concat(rest(function (args) {\n                memo[key] = args;\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i].apply(null, args);\n                }\n            })));\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `setImmediate`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @alias setImmediate\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nfunction _parallel(eachfn, tasks, callback) {\n    callback = callback || noop;\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, function (task, key, callback) {\n        task(rest(function (err, args) {\n            if (args.length <= 1) {\n                args = args[0];\n            }\n            results[key] = args;\n            callback(err);\n        }));\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to run.\n * Each function is passed a `callback(err, result)` which it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallelLimit(tasks, callback) {\n  _parallel(eachOf, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Collection} tasks - A collection containing functions to run.\n * Each function is passed a `callback(err, result)` which it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n */\nfunction parallelLimit$1(tasks, limit, callback) {\n  _parallel(_eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Object} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {Function} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {Function} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {Function} saturated - a callback that is called when the number of\n * running workers hits the `concurrency` limit, and further tasks will be\n * queued.\n * @property {Function} unsaturated - a callback that is called when the number\n * of running workers is less than the `concurrency` & `buffer` limits, and\n * further tasks will not be queued.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - a callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} error - a callback that is called when a task errors.\n * Has the signature `function(error, task)`.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. Invoke with `queue.kill()`.\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} worker - An asynchronous function for processing a queued\n * task, which must call its `callback(err)` argument when finished, with an\n * optional `error` as an argument.  If you want to handle errors from an\n * individual task, pass a callback to `q.push()`. Invoked with\n * (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain = function() {\n *     console.log('all items have been processed');\n * };\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * q.push({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nvar queue$1 = function (worker, concurrency) {\n  return queue(function (items, cb) {\n    worker(items[0], cb);\n  }, concurrency, 1);\n};\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {Function} worker - An asynchronous function for processing a queued\n * task, which must call its `callback(err)` argument when finished, with an\n * optional `error` as an argument.  If you want to handle errors from an\n * individual task, pass a callback to `q.push()`. Invoked with\n * (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nvar priorityQueue = function (worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    // Override push to accept second parameter representing priority\n    q.push = function (data, priority, callback) {\n        if (callback == null) callback = noop;\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function () {\n                q.drain();\n            });\n        }\n\n        priority = priority || 0;\n        var nextNode = q._tasks.head;\n        while (nextNode && priority >= nextNode.priority) {\n            nextNode = nextNode.next;\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority: priority,\n                callback: callback\n            };\n\n            if (nextNode) {\n                q._tasks.insertBefore(nextNode, item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n};\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing functions to run. Each function\n * is passed a `callback(err, result)` which it must call on completion with an\n * error `err` (which can be `null`) and an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        tasks[i](callback);\n    }\n}\n\nvar slice = Array.prototype.slice;\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {Function} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction. The `iteratee` is passed a\n * `callback(err, reduction)` which accepts an optional error as its first\n * argument, and the state of the reduction as the second. If an error is\n * passed to the callback, the reduction is stopped and the main `callback` is\n * immediately called with the error. Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n */\nfunction reduceRight(array, memo, iteratee, callback) {\n  var reversed = slice.call(array).reverse();\n  reduce(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the function in another function that always returns data even when it\n * errors.\n *\n * The object returned has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push(rest(function callback(err, cbArgs) {\n            if (err) {\n                reflectCallback(null, {\n                    error: err\n                });\n            } else {\n                var value = null;\n                if (cbArgs.length === 1) {\n                    value = cbArgs[0];\n                } else if (cbArgs.length > 1) {\n                    value = cbArgs;\n                }\n                reflectCallback(null, {\n                    value: value\n                });\n            }\n        }));\n\n        return fn.apply(this, args);\n    });\n}\n\nfunction reject$1(eachfn, arr, iteratee, callback) {\n    _filter(eachfn, arr, function (value, cb) {\n        iteratee(value, function (err, v) {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nvar reject = doParallel(reject$1);\n\n/**\n * A helper function that wraps an array or an object of functions with reflect.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array} tasks - The array of functions to wrap in `async.reflect`.\n * @returns {Array} Returns an array of functions, each function wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (isArray(tasks)) {\n        results = arrayMap(tasks, reflect);\n    } else {\n        results = {};\n        baseForOwn(tasks, function (task, key) {\n            results[key] = reflect.call(this, task);\n        });\n    }\n    return results;\n}\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectLimit = doParallelLimit(reject$1);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectSeries = doLimit(rejectLimit, 1);\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant$1(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {Function} task - A function which receives two arguments: (1) a\n * `callback(err, result)` which must be called when finished, passing `err`\n * (which can be `null`) and the `result` of the function's execution, and (2)\n * a `results` object, containing the results of the previously executed\n * functions (if nested inside another control flow). Invoked with\n * (callback, results).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // It can also be embedded within other control flow functions to retry\n * // individual methods that are not as reliable, like this:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retry(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nfunction retry(opts, task, callback) {\n    var DEFAULT_TIMES = 5;\n    var DEFAULT_INTERVAL = 0;\n\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    function parseTimes(acc, t) {\n        if (typeof t === 'object') {\n            acc.times = +t.times || DEFAULT_TIMES;\n\n            acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);\n\n            acc.errorFilter = t.errorFilter;\n        } else if (typeof t === 'number' || typeof t === 'string') {\n            acc.times = +t || DEFAULT_TIMES;\n        } else {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n    }\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || noop;\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || noop;\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var attempt = 1;\n    function retryAttempt() {\n        task(function (err) {\n            if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt));\n            } else {\n                callback.apply(null, arguments);\n            }\n        });\n    }\n\n    retryAttempt();\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method wraps a task and makes it\n * retryable, rather than immediately calling it with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`\n * @param {Function} task - the asynchronous function to wrap\n * @returns {Functions} The wrapped function, which when invoked, will retry on\n * an error, based on the parameters specified in `opts`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nvar retryable = function (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    return initialParams(function (args, callback) {\n        function taskFn(cb) {\n            task.apply(null, args.concat(cb));\n        }\n\n        if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\n    });\n};\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to run, each\n * function is passed a `callback(err, result)` it must call on completion with\n * an error `err` (which can be `null`) and an optional `result` value.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n  _parallel(eachOfSeries, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the array\n * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\n * be called with a boolean argument once it has completed. Invoked with\n * (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nvar some = doParallel(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in the array\n * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\n * be called with a boolean argument once it has completed. Invoked with\n * (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someLimit = doParallelLimit(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the array\n * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\n * be called with a boolean argument once it has completed. Invoked with\n * (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someSeries = doLimit(someLimit, 1);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, sortValue)` which must be called once\n * it has completed with an error (which can be `null`) and a value to use as\n * the sort criteria. Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy(coll, iteratee, callback) {\n    map(coll, function (x, callback) {\n        iteratee(x, function (err, criteria) {\n            if (err) return callback(err);\n            callback(null, { value: x, criteria: criteria });\n        });\n    }, function (err, results) {\n        if (err) return callback(err);\n        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria,\n            b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} asyncFn - The asynchronous function you want to set the\n * time limit.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {Function} Returns a wrapped function that can be used with any of\n * the control flow functions. Invoke this function with the same\n * parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var originalCallback, timer;\n    var timedOut = false;\n\n    function injectedCallback() {\n        if (!timedOut) {\n            originalCallback.apply(null, arguments);\n            clearTimeout(timer);\n        }\n    }\n\n    function timeoutCallback() {\n        var name = asyncFn.name || 'anonymous';\n        var error = new Error('Callback function \"' + name + '\" timed out.');\n        error.code = 'ETIMEDOUT';\n        if (info) {\n            error.info = info;\n        }\n        timedOut = true;\n        originalCallback(error);\n    }\n\n    return initialParams(function (args, origCallback) {\n        originalCallback = origCallback;\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        asyncFn.apply(null, args.concat(injectedCallback));\n    });\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\nvar nativeMax$1 = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - The function to call `n` times. Invoked with the\n * iteration index and a callback (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n */\nfunction timeLimit(count, limit, iteratee, callback) {\n  mapLimit(baseRange(0, count, 1), limit, iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {Function} iteratee - The function to call `n` times. Invoked with the\n * iteration index and a callback (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nvar times = doLimit(timeLimit, Infinity);\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {Function} iteratee - The function to call `n` times. Invoked with the\n * iteration index and a callback (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n */\nvar timesSeries = doLimit(timeLimit, 1);\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in series, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {Function} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator. The `iteratee` is\n * passed a `callback(err)` which accepts an optional error as its first\n * argument. If an error is passed to the callback, the transform is stopped\n * and the main `callback` is immediately called with the error.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc.push(item * 2)\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform(coll, accumulator, iteratee, callback) {\n    if (arguments.length === 3) {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = isArray(coll) ? [] : {};\n    }\n    callback = once(callback || noop);\n\n    eachOf(coll, function (v, k, cb) {\n        iteratee(accumulator, v, k, cb);\n    }, function (err) {\n        callback(err, accumulator);\n    });\n}\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {Function} fn - the memoized function\n * @returns {Function} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {Function} iteratee - A function which is called each time `test` passes.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns undefined\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function() { return count < 5; },\n *     function(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback || noop);\n    if (!test()) return callback(null);\n    var next = rest(function (err, args) {\n        if (err) return callback(err);\n        if (test()) return iteratee(next);\n        callback.apply(null, [null].concat(args));\n    });\n    iteratee(next);\n}\n\n/**\n * Repeatedly call `fn` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `fn`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `fn`. Invoked with ().\n * @param {Function} fn - A function which is called each time `test` fails.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `fn`'s\n * callback. Invoked with (err, [results]);\n */\nfunction until(test, fn, callback) {\n    whilst(function () {\n        return !test.apply(this, arguments);\n    }, fn, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of functions to run, each function is passed\n * a `callback(err, result1, result2, ...)` it must call on completion. The\n * first argument is an error (which can be `null`) and any further arguments\n * will be passed as arguments in order to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nvar waterfall = function (tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        if (taskIndex === tasks.length) {\n            return callback.apply(null, [null].concat(args));\n        }\n\n        var taskCallback = onlyOnce(rest(function (err, args) {\n            if (err) {\n                return callback.apply(null, [err].concat(args));\n            }\n            nextTask(args);\n        }));\n\n        args.push(taskCallback);\n\n        var task = tasks[taskIndex++];\n        task.apply(null, args);\n    }\n\n    nextTask([]);\n};\n\n/**\n * Async is a utility module which provides straight-forward, powerful functions\n * for working with asynchronous JavaScript. Although originally designed for\n * use with [Node.js](http://nodejs.org) and installable via\n * `npm install --save async`, it can also be used directly in the browser.\n * @module async\n */\n\n/**\n * A collection of `async` functions for manipulating collections, such as\n * arrays and objects.\n * @module Collections\n */\n\n/**\n * A collection of `async` functions for controlling the flow through a script.\n * @module ControlFlow\n */\n\n/**\n * A collection of `async` utility functions.\n * @module Utils\n */\nvar index = {\n  applyEach: applyEach,\n  applyEachSeries: applyEachSeries,\n  apply: apply$2,\n  asyncify: asyncify,\n  auto: auto,\n  autoInject: autoInject,\n  cargo: cargo,\n  compose: compose,\n  concat: concat,\n  concatSeries: concatSeries,\n  constant: constant,\n  detect: detect,\n  detectLimit: detectLimit,\n  detectSeries: detectSeries,\n  dir: dir,\n  doDuring: doDuring,\n  doUntil: doUntil,\n  doWhilst: doWhilst,\n  during: during,\n  each: eachLimit,\n  eachLimit: eachLimit$1,\n  eachOf: eachOf,\n  eachOfLimit: eachOfLimit,\n  eachOfSeries: eachOfSeries,\n  eachSeries: eachSeries,\n  ensureAsync: ensureAsync,\n  every: every,\n  everyLimit: everyLimit,\n  everySeries: everySeries,\n  filter: filter,\n  filterLimit: filterLimit,\n  filterSeries: filterSeries,\n  forever: forever,\n  log: log,\n  map: map,\n  mapLimit: mapLimit,\n  mapSeries: mapSeries,\n  mapValues: mapValues,\n  mapValuesLimit: mapValuesLimit,\n  mapValuesSeries: mapValuesSeries,\n  memoize: memoize,\n  nextTick: nextTick,\n  parallel: parallelLimit,\n  parallelLimit: parallelLimit$1,\n  priorityQueue: priorityQueue,\n  queue: queue$1,\n  race: race,\n  reduce: reduce,\n  reduceRight: reduceRight,\n  reflect: reflect,\n  reflectAll: reflectAll,\n  reject: reject,\n  rejectLimit: rejectLimit,\n  rejectSeries: rejectSeries,\n  retry: retry,\n  retryable: retryable,\n  seq: seq$1,\n  series: series,\n  setImmediate: setImmediate$1,\n  some: some,\n  someLimit: someLimit,\n  someSeries: someSeries,\n  sortBy: sortBy,\n  timeout: timeout,\n  times: times,\n  timesLimit: timeLimit,\n  timesSeries: timesSeries,\n  transform: transform,\n  unmemoize: unmemoize,\n  until: until,\n  waterfall: waterfall,\n  whilst: whilst,\n\n  // aliases\n  all: every,\n  any: some,\n  forEach: eachLimit,\n  forEachSeries: eachSeries,\n  forEachLimit: eachLimit$1,\n  forEachOf: eachOf,\n  forEachOfSeries: eachOfSeries,\n  forEachOfLimit: eachOfLimit,\n  inject: reduce,\n  foldl: reduce,\n  foldr: reduceRight,\n  select: filter,\n  selectLimit: filterLimit,\n  selectSeries: filterSeries,\n  wrapSync: asyncify\n};\n\nexports['default'] = index;\nexports.applyEach = applyEach;\nexports.applyEachSeries = applyEachSeries;\nexports.apply = apply$2;\nexports.asyncify = asyncify;\nexports.auto = auto;\nexports.autoInject = autoInject;\nexports.cargo = cargo;\nexports.compose = compose;\nexports.concat = concat;\nexports.concatSeries = concatSeries;\nexports.constant = constant;\nexports.detect = detect;\nexports.detectLimit = detectLimit;\nexports.detectSeries = detectSeries;\nexports.dir = dir;\nexports.doDuring = doDuring;\nexports.doUntil = doUntil;\nexports.doWhilst = doWhilst;\nexports.during = during;\nexports.each = eachLimit;\nexports.eachLimit = eachLimit$1;\nexports.eachOf = eachOf;\nexports.eachOfLimit = eachOfLimit;\nexports.eachOfSeries = eachOfSeries;\nexports.eachSeries = eachSeries;\nexports.ensureAsync = ensureAsync;\nexports.every = every;\nexports.everyLimit = everyLimit;\nexports.everySeries = everySeries;\nexports.filter = filter;\nexports.filterLimit = filterLimit;\nexports.filterSeries = filterSeries;\nexports.forever = forever;\nexports.log = log;\nexports.map = map;\nexports.mapLimit = mapLimit;\nexports.mapSeries = mapSeries;\nexports.mapValues = mapValues;\nexports.mapValuesLimit = mapValuesLimit;\nexports.mapValuesSeries = mapValuesSeries;\nexports.memoize = memoize;\nexports.nextTick = nextTick;\nexports.parallel = parallelLimit;\nexports.parallelLimit = parallelLimit$1;\nexports.priorityQueue = priorityQueue;\nexports.queue = queue$1;\nexports.race = race;\nexports.reduce = reduce;\nexports.reduceRight = reduceRight;\nexports.reflect = reflect;\nexports.reflectAll = reflectAll;\nexports.reject = reject;\nexports.rejectLimit = rejectLimit;\nexports.rejectSeries = rejectSeries;\nexports.retry = retry;\nexports.retryable = retryable;\nexports.seq = seq$1;\nexports.series = series;\nexports.setImmediate = setImmediate$1;\nexports.some = some;\nexports.someLimit = someLimit;\nexports.someSeries = someSeries;\nexports.sortBy = sortBy;\nexports.timeout = timeout;\nexports.times = times;\nexports.timesLimit = timeLimit;\nexports.timesSeries = timesSeries;\nexports.transform = transform;\nexports.unmemoize = unmemoize;\nexports.until = until;\nexports.waterfall = waterfall;\nexports.whilst = whilst;\nexports.all = every;\nexports.allLimit = everyLimit;\nexports.allSeries = everySeries;\nexports.any = some;\nexports.anyLimit = someLimit;\nexports.anySeries = someSeries;\nexports.find = detect;\nexports.findLimit = detectLimit;\nexports.findSeries = detectSeries;\nexports.forEach = eachLimit;\nexports.forEachSeries = eachSeries;\nexports.forEachLimit = eachLimit$1;\nexports.forEachOf = eachOf;\nexports.forEachOfSeries = eachOfSeries;\nexports.forEachOfLimit = eachOfLimit;\nexports.inject = reduce;\nexports.foldl = reduce;\nexports.foldr = reduceRight;\nexports.select = filter;\nexports.selectLimit = filterLimit;\nexports.selectSeries = filterSeries;\nexports.wrapSync = asyncify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/dist/async.js\n// module id = 9\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\nimport RouterClient from \"./routerClientInstance\";\nimport Validate from \"../common/validate\"; // Finsemble args validator\nimport Logger from \"./logger\";\nimport { ICentralLogger } from \"./ICentralLogger\";\nimport { System } from \"../common/system\";\n\nimport { FSBLDependencyManagerSingleton as FSBLDependencyManager } from \"../common/dependencyManager\";\nexport type BaseClientParams = {\n\t/** A function to be called after the client has initialized. */\n\tonReady?: (cb) => void,\n\t/** The name of the client. Must be unique. */\n\tname: string,\n\t/** @TODO - add enumerations for all clients and services. */\n\t/** The clients that must be online before this client comes online. */\n\trequiredClients?: any[],\n\t/** The services that must be online before this client comes online. */\n\trequiredServices?: any[],\n\tstartupDependencies?: { services?: string[], clients?: string[] }\n};\n\n/**\n * @introduction\n * <h2>Base Client</h2>\n * The Base Client is inherited by every client to provide common functionality to the clients. Clients communicate their status to each other through the Router and receive service status from the service manager. Once all dependencies are met, either client or service, the client's `onReady` method is fired.\n *\n * We're currently halfway through migrating our clients from extending a normal function prototype to an ES6 class.\n * \"_BaseClient\" represents the new class, while \"BaseClient\" is the original function. When the migration is complete,\n * we will remove the old function and rename \"_BaseClient\" to \"BaseClient\".\n * @constructor\n * @param {Object} params\n * @param {Function} params.onReady - A function to be called after the client has initialized.\n * @param {String} params.name - The name of the client\n * @shouldBePublished false\n\t@example\n\timport { _BaseClient as BaseClient } from \"./baseClient\";\n\tvar NewClient = function (params) {\n\t\tBaseClient.call(this, params);\n\t\tvar self = this;\n\n\t\treturn this;\n\t};\n\n\tvar clientInstance = new NewClient({\n\t\tonReady: function (cb) {\n\t\t\tLogger.system.log(\"NewClient Online\");\n\t\t\tcb();\n\t\t},\n\t\tname:\"NewClient\"\n\t});\n\tclientInstance.requiredServices = [REPLACE_THIS_ARRAY_WITH_DEPENENCIES];\n\tclientInstance.initialize();\n\tmodule.exports = clientInstance;\n\t@private\n */\nexport class _BaseClient {\n\t/** The current status of this service. */\n\tstatus: \"offline\" | \"online\" = \"offline\";\n\t/** The callback called when this service is ready. */\n\tprivate _onReady: any;\n\tstartupTime = 0;\n\tinitialized = false;\n\tstartupDependencies: { services?: any[], clients?: any[] } = { services: [], clients: [] };\n\t/** Reference to the RouterClient. */\n\trouterClient;\n\t/** Gets the current window - stays here for backward compatibility. */\n\tfinWindow: {\n\t\tname: string,\n\t\tuuid: string,\n\t};\n\t/** Gets the current window. */\n\tfinsembleWindow = null;\n\t/** Gets the current window name. */\n\twindowName = \"\";\n\t/** Services that must be online before the client can come online. */\n\trequiredServices: any[];\n\t/** Clients that must be online before the client may come online.*/\n\trequiredClients: any[];\n\t/** Queue of functions to process once the client goes online. */\n\tclientReadyQueue: (() => void)[] = [];\n\t/** A unique name for the client.*/\n\tname: string;\n\tlogger: ICentralLogger;\n\n\tconstructor(params: BaseClientParams) {\n\t\tthis.name = params.name;\n\t\tthis._onReady = params.onReady;\n\t\tthis.startupDependencies = params.startupDependencies || {\n\t\t\tservices: [],\n\t\t\tclients: []\n\t\t};\n\t\t// @TODO - Refactor this to use DI.\n\t\tthis.logger = Logger;\n\t\t/**\n\t\t * Reference to the RouterClient\n\t\t */\n\t\tthis.routerClient = RouterClient;\n\t}\n\t/**\n\t * @private\n\t *\n\t */\n\tprocessClientReadyQueue = () => {\n\t\tfor (let cb of this.clientReadyQueue) {\n\t\t\tcb();\n\t\t}\n\t\tthis.clientReadyQueue = [];\n\t};\n\t/**\n\t * @private\n\t *\n\t */\n\tonReady = (cb) => {\n\t\tthis.clientReadyQueue.push(cb);\n\t\tif (this.status === \"online\") {\n\t\t\tthis.processClientReadyQueue();\n\t\t}\n\t}\n\n\t/** Check to see if the client can come online. We check this against the required services and clients */\n\t/**\n * @private\n *\n */\n\tsetClientOnline = () => {\n\t\tthis.status = \"online\";\n\t\tconst onReadyMessage = `STARTUP:CLIENT ONLINE:${this.finWindow.name}:${this.name}`;\n\t\tthis.startupTime = window.performance.now() - this.startupTime;\n\t\tconst readyCB = () => {\n\t\t\tthis.logger.system.debug(onReadyMessage);\n\t\t\tthis.processClientReadyQueue();\n\t\t\tFSBLDependencyManager.setClientOnline(this.name);\n\t\t}\n\t\tif (this._onReady) {\n\t\t\tthis._onReady(readyCB);\n\t\t} else {\n\t\t\treadyCB();\n\t\t}\n\t}\n\t/**\n\t * @private\n\t *\n\t */\n\tinitialize = (cb = Function.prototype) => {\n\t\tif (this.initialized) return;\n\n\t\tthis.initialized = true;\n\t\tthis.startupTime = performance.now();\n\t\tthis.routerClient.onReady(() => {\n\t\t\t// TODO, [terry] allow the finsembleWindow to be passed in, so we can support proxying windowClient in RPC\n\t\t\tthis.finWindow = System.Window.getCurrent();\n\t\t\tthis.windowName = this.finWindow.name;\n\t\t\tthis.logger.system.debug(\"Baseclient Init Router Ready\", this.name);\n\t\t\tFSBLDependencyManager.startup.waitFor(\n\t\t\t\tthis.startupDependencies,\n\t\t\t\t() => {\n\t\t\t\t\tcb();\n\t\t\t\t\tthis.setClientOnline();\n\t\t\t\t});\n\t\t});\n\t}\n\t/**\n\t * @private\n\t *\n\t */\n\tonClose = (cb?) => {\n\t\tif (cb) cb();\n\t};\n}\n\n/**\n * @introduction\n * <h2>Base Client</h2>\n * The Base Client is inherited by every client to provide common functionality to the clients. Clients communicate their status to each other through the Router and receive service status from the service manager. Once all dependencies are met, either client or service, the client's `onReady` method is fired.\n * @constructor\n * @param {Object} params\n * @param {Function} params.onReady - A function to be called after the client has initialized.\n * @param {String} params.name - The name of the client\n * @shouldBePublished false\n\t@example\n\timport { _BaseClient as BaseClient } from \"./baseClient\";\n\tvar NewClient = function (params) {\n\t\tBaseClient.call(this, params);\n\t\tvar self = this;\n\n\t\treturn this;\n\t};\n\n\tvar clientInstance = new NewClient({\n\t\tonReady: function (cb) {\n\t\t\tLogger.system.log(\"NewClient Online\");\n\t\t\tcb();\n\t\t},\n\t\tname:\"NewClient\"\n\t});\n\tclientInstance.requiredServices = [REPLACE_THIS_ARRAY_WITH_DEPENENCIES];\n\tclientInstance.initialize();\n\tmodule.exports = clientInstance;\n\t@private\n */\nvar BaseClient = function (params) {\n\tValidate.args(params, \"object=\");\n\tvar self = this;\n\tvar status = \"offline\";\n\tvar onReady;\n\tthis.startupTime = 0;\n\tif (params) {\n\t\tif (params.onReady) {\n\t\t\tonReady = params.onReady;\n\t\t}\n\t\tthis.name = params.name;\n\t}\n\tthis.initialized = false;\n\tthis.startupDependencies = params.startupDependencies || {\n\t\tservices: [],\n\t\tclients: []\n\t};\n\t/**\n\t * Reference to the RouterClient\n\t *  @type {Object}\n\t */\n\tthis.routerClient = RouterClient;\n\n\t/**\n\t * Gets the current window - stays here for backward compatibility\n\t * @type {object}\n\t */\n\tthis.finWindow = null;\n\n\t/**\n\t * Gets the current window\n\t * @type {object}\n\t */\n\tthis.finsembleWindow = null;\n\n\t/**\n\t * Gets the current window name\n\t *  @type {string}\n\t */\n\tthis.windowName = \"\";//The current window\n\n\t/**\n\t * Services the are required to be online before the service can come online\n\t *  @type {Array.<Object>}\n\t */\n\tthis.requiredServices = [];\n\t/**\n\t * Clients the are required to be online before the service can come online\n\t *  @type {Array.<Object>}\n\t */\n\tthis.requiredClients = [];\n\n\t/**\n\t * Queue of functions to process once the client goes online.\n\t * @private\n\t */\n\tthis.clientReadyQueue = [];\n\n\t/**\n\t * Iterates through the clientReadyQueue, invoking each call to `.ready`.\n\t */\n\tthis.processClientReadyQueue = function () {\n\t\tfor (var i = 0; i < this.clientReadyQueue.length; i++) {\n\t\t\tlet callback = this.clientReadyQueue[i];\n\t\t\tif (typeof callback === \"function\") {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t\tthis.clientReadyQueue = [];\n\t};\n\n\t/**\n\t * Method for adding callbacks to each client.\n\t */\n\tthis.onReady = function (cb) {\n\t\tthis.clientReadyQueue.push(cb);\n\t\tif (status === \"online\") {\n\t\t\tthis.processClientReadyQueue();\n\t\t}\n\t};\n\t//Check to see if the client can come online. We check this against the required services and clients\n\tthis.setClientOnline = function () {\n\t\tvar self = this;\n\t\tstatus = \"online\";\n\t\tlet onReadyMessage = `STARTUP:CLIENT ONLINE:${self.finWindow.name}:${self.name}`;\n\t\tself.startupTime = performance.now() - self.startupTime;\n\t\tif (onReady) {\n\t\t\tonReady(function () {\n\t\t\t\tLogger.system.debug(onReadyMessage);\n\t\t\t\tself.processClientReadyQueue();\n\t\t\t\tFSBLDependencyManager.setClientOnline(self.name);\n\t\t\t});\n\t\t} else {\n\t\t\tLogger.system.debug(onReadyMessage);\n\t\t\tself.processClientReadyQueue();\n\t\t\tFSBLDependencyManager.setClientOnline(self.name);\n\t\t}\n\t};\n\n\n\t/**\n\t* Starts the process of checking services and any other function required before the client can come online\n\t*/\n\tthis.initialize = function (cb = Function.prototype) {\n\t\tif (self.initialized) { return; }\n\t\tself.initialized = true;\n\t\tself.setClientOnline = self.setClientOnline.bind(self);\n\t\tself.startupTime = performance.now();\n\t\tself.routerClient.onReady(function () {\n\t\t\t// TODO, [terry] allow the finsembleWindow to be passed in, so we can support proxying windowClient in RPC\n\t\t\tself.finWindow = System.Window.getCurrent();\n\t\t\tself.windowName = self.finWindow.name;\n\t\t\tLogger.system.debug(\"Baseclient Init Router Ready\", self.name);\n\t\t\tFSBLDependencyManager.startup.waitFor({\n\t\t\t\tclients: self.startupDependencies.clients || []\n\t\t\t}, () => {\n\t\t\t\tcb();\n\t\t\t\tself.setClientOnline();\n\t\t\t});\n\t\t});\n\t};\n\n\tthis.onClose = function () { };\n\n};\n\nexport default BaseClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/baseClient.ts","export const WRAPPERS = {\n\t/*\n\t\tTODO: For the time being these are just events our windows fire but not OpenFin (this is used in the OF wrapper. Long term we might have to reverse this)\n\t\tTODO: Event naming is inconsistent. Our events should not be camel case to maintain consistency.\n\t*/\n\tEVENTS: [\"title-changed\", \"bringToFront\", \"setBounds\", \"alwaysOnTop\", \"setOpacity\"]\n};\nexport const APPLICATION_STATE_CHANNEL = \"Finsemble.Application.State\";\n\n//These next four channels are used in service => service manager communication. The SM receives these messages and then pushes out state updates to the rest of the system.\nexport const SERVICE_INITIALIZING_CHANNEL = \"Finsemble.ServiceManager.serviceInitializing\";\nexport const SERVICE_READY_CHANNEL = \"Finsemble.ServiceManager.serviceReady\";\nexport const SERVICE_CLOSING_CHANNEL = \"Finsemble.ServiceManager.serviceClosing\";\nexport const SERVICE_CLOSED_CHANNEL = \"Finsemble.ServiceManager.serviceClosed\";\n\n// Naming to supports handshake betwwen each client and its corresponding service\n// Returns the handshake channel for a given service name\nexport const SERVICE_QUERY_READY_CHANNEL = (name) => { return `Finsemble.ServiceManager.queryReady.${name}` };\n// Maps a client name to its corresponding service name.  Okay to not include all clients here -- if not here then handshake won't be done\nexport const CLIENT_SERVER_MAPPING = (name) => {\n\tconst MAPPING = {\n\t\t\"authenticationClient\": \"authenticationService\",\n\t\t\"configClient\": \"configService\",\n\t\t\"distributedStoreClient\": \"dataStoreService\",\n\t\t\"hotkeysClient\": \"hotkeysService\",\n\t\t\"linkerClient\": \"linkerService\",\n\t\t\"logger\": \"loggerService\",\n\t\t\"searchClient\": \"searchService\",\n\t\t\"storageClient\": \"storageService\",\n\t\t\"windowClient\": \"windowService\",\n\t\t\"workspaceClient\": \"workspaceService\"\n\t};\n\t// returns undefined if there is no mapping\n\treturn MAPPING[name];\n}\n\n//This channel is where the aggregated state of all services is sent out on.\nexport const SERVICES_STATE_CHANNEL = \"Finsemble.State.Services\";\nexport const WINDOWSTATE = {\n\tNORMAL: 0,\n\tMINIMIZED: 1,\n\tMAXIMIZED: 2,\n\tHIDDEN: 3\n};\n//These channels are to start and stop services dynamically.\nexport const SERVICE_START_CHANNEL = \"Finsemble.Service.Start\";\nexport const SERVICE_STOP_CHANNEL = \"Finsemble.Service.Stop\";\n\nexport const DOCKING = {\n\tGROUP_UPDATE: \"DockingService.groupUpdate\",\n\t// For legacy reasons, this is named Workspace, even though it's generated by docking.\n\tWORKSPACE_GROUP_UPDATE: \"Finsemble.WorkspaceService.groupUpdate\",\n\tREQUEST_PUBLISH: \"DockingService.requestGroupDataPublish\",\n}\n\n// These channels are for interrupting events\nexport const EVENT_INTERRUPT_CHANNEL = \"Finsemble.Event.Interrupt\";\nexport const INTERRUPTIBLE_EVENTS = [\"close-requested\", \"closed\", \"close-complete\", \"_container-close-handlers\"];\nexport const WORKSPACE = {\n\tCLEAN_SHUTDOWN: \"Finsemble.Workspace.cleanShutdown\",\n\tUPDATE_PUBSUB: \"Finsemble.WorkspaceService.update\",\n\tSTORAGE_TOPIC: \"finsemble.workspace\",\n\tCACHE_STORAGE_TOPIC: \"finsemble.workspace.cache\",\n\tALL_WORKSPACES: \"finsemble.allWorkspaces\",\n\tACTIVE_WORKSPACE: \"activeWorkspace\",\n\t// When we have the liberty of breaking API's, we should consolidate this topic.\n\tLAST_USED_WORKSPACE_TOPIC: \"finsemble\",\n\tLAST_USED_WORKSPACE: \"finsemble.lastUsedWorkspace\",\n\tINITIAL_WORKSPACE_PREFERENCE: \"finsemble.initialWorkspace\",\n\tPUBLISH_REASONS: {\n\t\tINIT: \"workspace:initialization\",\n\t\tLOAD_DATA_RETRIEVED: \"workspace:load:dataRetrieved\",\n\t\tLOAD_FINISHED: \"workspace:load:finished\",\n\t\tWINDOW_REMOVED: \"window:remove\",\n\t\tWINDOW_ADDED: \"window:add\",\n\t\tLOAD_STARTED: \"workspace:load:start\",\n\t\tWORKSPACE_REMOVED: \"Workspace:remove\",\n\t\tWORKSPACE_RENAMED: \"rename\",\n\t\tSWITCHTO_TERMINATED: \"workspace:switchTo:terminated\",\n\t\tNEW_WORKSPACE: \"new workspace\",\n\t\tSAVE_AS: \"APPLICATION LIFECYCLE:WORKSPACE LIFECYCLE:SaveAs:Workspace:Save As\",\n\t},\n\tAPI_CHANNELS: {\n\t\tNEW_WORKSPACE: \"Finsemble.Workspace.NewWorkspace\",\n\t\tSAVE: \"Finsemble.Workspace.Save\",\n\t\tRENAME: \"Finsemble.Workspace.Rename\",\n\t\tSAVE_AS: \"Finsemble.Workspace.SaveAs\",\n\t\tSWITCH_TO: \"Finsemble.Workspace.SwitchTo\",\n\t\tIMPORT: \"Finsemble.Workspace.Import\",\n\t\tEXPORT: \"Finsemble.Workspace.Export\",\n\t\tREMOVE: \"Finsemble.Workspace.Remove\",\n\t\tSAVE_GLOBAL_DATA: \"Finsemble.Workspace.SaveGlobalData\",\n\t\tSAVE_VIEW_DATA: \"Finsemble.Workspace.SaveViewData\",\n\t\tGET_GLOBAL_DATA: \"Finsemble.Workspace.GetGlobalData\",\n\t\tGET_VIEW_DATA: \"Finsemble.Workspace.GetViewData\",\n\t\tGET_WORKSPACES: \"Finsemble.Workspace.GetWorkspaces\",\n\t\tGET_WORKSPACE_NAMES: \"Finsemble.Workspace.GetWorkspaceNames\",\n\t\tSET_WORKSPACE_ORDER: \"Finsemble.Workspace.SetWorkspaceOrder\",\n\t\tGET_ACTIVE_WORKSPACE: \"Finsemble.Workspace.GetActiveWorkspace\",\n\t\tSET_ACTIVEWORKSPACE_DIRTY: \"Finsemble.Workspace.SetActiveWorkspaceDirty\",\n\t\tGET_TEMPLATES: \"Finsemble.Workspace.GetTemplates\",\n\t\tIMPORT_TEMPLATE: \"Finsemble.Workspace.ImportTemplate\",\n\t\tEXPORT_TEMPLATE: \"Finsemble.Workspace.ExportTemplate\",\n\t\tREMOVE_TEMPLATE: \"Finsemble.Workspace.RemoveTemplate\",\n\t\tSET_WINDOW_STATE: \"Finsemble.Workspace.SetWindowData\",\n\t\tGET_WINDOW_STATE: \"Finsemble.Workspace.GetWindowData\",\n\t\tADD_WINDOW: \"WorkspaceService.addWindow\",\n\t\tREMOVE_WINDOW: \"WorkspaceService.removeWindow\",\n\t}\n};\n\nexport const WINDOW_SERVICE_REQUESTS = {\n\tREMOTE_FOCUS: \"WindowService.remoteFocus\",\n\tSET_ALWAYS_ON_TOP: \"WindowService-Request-setAlwaysOnTop\",\n\tIS_ALWAYS_ON_TOP: \"WindowService-Request-isAlwaysOnTop\",\n};\n\nexport const COMPONENT_STATE_STORAGE_TOPIC = \"finsemble.componentStateStorage\";\n\nexport const HEARTBEAT_TIMEOUT_CHANNEL = \"Finsemble.WindowService.HeartbeatTimeout\";\n\nexport const LAUNCHER_SERVICE = {\n\tWINDOW_CLOSED: \"LauncherService.WindowClosed\"\n};\n\nexport const DELIVERY_MECHANISM = {\n\tPRELOAD: 'preload',\n\tINJECTION: 'injection',\n};\n\nexport const MOVE_REASON = {\n\tAERO_KEY: \"aero_key\",\n\tSYSTEM_RESTORED: \"system_restored\"\n};\n\n\n// WEBPACK FOOTER //\n// src/common/constants.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nimport FSBLUtils from \"./util\";\n\nimport Logger from \"../clients/logger\";\nimport { System } from \"./system\";\n\nvar ConfigUtil = function () {\n\n\tvar self = this;\n\n\t/**\n\t * @introduction\n\t * <h2>Finsemble Configuration Utility Functions</h2>\n\t * @private\n\t * @class ConfigUtil\n\t */\n\t// run through the configuration object and resolve any variables definitions (i.e. $applicationRoot)\n\tthis.resolveConfigVariables = function (finsembleConfig, startingConfigObject) {\n\t\tvar pass = 0;\n\t\tvar needsAnotherPass = true;\n\n\t\t/**\n\t\t * Called by resolveObject().\n\t\t * This function parses a string to find variables.\n\t\t * It looks up the value of any identified variables, replacing them in the string.\n\t\t * The completed string is then returned.\n\t\t * @TODO convert this function to use an actual tokenizer?\n\t\t **/\n\t\tfunction resolveString(configString) {\n\t\t\tvar delimiters = /[/\\\\:?=&\\s]/; // delimiters in regex form\n\t\t\tvar tokens = configString.split(delimiters);\n\t\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\t\tif (tokens[i][0] === \"$\") { // special variable character $ has to first char in string\n\t\t\t\t\tvar variableReference = tokens[i].substring(1); // string off the leading $\n\t\t\t\t\tvar variableResolution = finsembleConfig[variableReference]; // the variable value is another config property, which already must be set\n\t\t\t\t\tvar newValue = configString.replace(tokens[i], variableResolution); // replace the variable reference with new value\n\t\t\t\t\tLogger.system.info(\"forceObjectsToLogger\", \"ConfigUtil.resolveConfigVariables:resolveString configString\", tokens[i], variableReference, variableResolution, \"old value=\", configString, \"value=\", newValue);\n\t\t\t\t\tneedsAnotherPass = true; // <<-- here is the only place needsAnotherPass is set, since still resolving variables\n\t\t\t\t\tconfigString = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn configString;\n\t\t}\n\n\t\t// process an array of config items looking for variables to resolve (a recursive routine)\n\t\tfunction resolveArray(configArray, pass, recursionLevel) {\n\t\t\tLogger.system.info(\"forceObjectsToLogger\", \"resolveArray\", \"pass\", pass, \"recursionLevel\", recursionLevel, \"configArray:\", configArray);\n\t\t\tfor (var i = 0; i < configArray.length; i++) {\n\t\t\t\tvar value = configArray[i];\n\t\t\t\tif (typeof (value) === \"string\" && value.indexOf(\"$\") > -1) {\n\t\t\t\t\tconfigArray[i] = resolveString(value);\n\t\t\t\t} else if (value instanceof Array) {\n\t\t\t\t\tresolveArray(value, pass, recursionLevel + 1); // array reference passed so don't need return value\n\t\t\t\t} else if (typeof (value) === \"object\") {\n\t\t\t\t\tresolveObject(value, pass, recursionLevel + 1); // object reference passed so don't need return value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Expand \"variables\" within a config object. Variables are strings that begin with \"$\".\n\t\t * For instance, `finsemble.bar:\"help\", foo:$bar` would be expanded into `finsemble.bar:\"help\",foo:\"help\"`\n\t\t * This is a recursive routine\n\t\t */\n\t\tfunction resolveObject(configObject, pass, recursionLevel) {\n\t\t\tconfigObject = configObject || {}; // don't error on bad config\n\t\t\tLogger.system.info(\"forceObjectsToLogger\", \"ConfigUtil.resolveConfigVariables:resolveObject\", \"pass\", pass, \"recursionLevel\", recursionLevel, \"configObject:\", configObject);\n\t\t\tObject.keys(configObject).forEach(function (key) {\n\t\t\t\tvar value = configObject[key];\n\t\t\t\tif (typeof (value) === \"string\" && value.indexOf(\"$\") > -1) {\n\t\t\t\t\tconfigObject[key] = resolveString(value);\n\t\t\t\t} else if (value instanceof Array) {\n\t\t\t\t\tresolveArray(value, pass, recursionLevel + 1); // array reference passed so don't need return value\n\t\t\t\t} else if (typeof (value) === \"object\") {\n\t\t\t\t\tresolveObject(value, pass, recursionLevel + 1); // object reference passed so don't need return value\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// since variables may be nested, keep resolving till no more left\n\t\twhile (needsAnotherPass) {\n\t\t\tneedsAnotherPass = false; // don't need another pass afterwards unless a variable is resolved somewhere in finsembleConfig\n\t\t\tresolveObject(startingConfigObject, ++pass, 1);\n\t\t}\n\t};\n\n\t// This does minimal processing of the manifest, just enough to support getting the router up, which is only expanding variables (e.g. moduleRoot) in the raw manifest\n\tthis.getExpandedRawManifest = function (callback, errorCB) {\n\t\tLogger.system.debug(\"ConfigUtil.getExpandedRawManifest starting\");\n\n\t\tfunction getRawManifest(callback, application, level) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ConfigUtil.getExpandedRawManifest:getRawManifest\", application, level);\n\n\t\t\tapplication.getManifest(function (manifest) { // get raw manifest\n\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ConfigUtil.getExpandedRawManifest:getExpandedRawManifest: manifest retrieved. Pre-variable resolution\", manifest);\n\t\t\t\tself.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables first time so can find config location\n\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ConfigUtil.getExpandedRawManifest:getExpandedRawManifest:Complete. post-variable resolution\", manifest);\n\t\t\t\tcallback(manifest);\n\t\t\t}, function (err) {\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.error(\"ConfigUtil.getExpandedRawManifest:application.getManifest:err\", err);\n\t\t\t\t\tif (errorCb) errorCB();\n\t\t\t\t}\n\t\t\t\t// no manifest so try parent\n\t\t\t\tapplication.getParentUuid(function (parentUuid) {\n\t\t\t\t\tvar parentApplication = System.Application.wrap(parentUuid);\n\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"uuid\", parentUuid, \"parentApplication\", parentApplication);\n\t\t\t\t\tif (level < 10) {\n\t\t\t\t\t\tgetRawManifest(callback, parentApplication, ++level);\n\t\t\t\t\t} else { // still could find so must be a problem (i.e. avoid infinite loop)\n\t\t\t\t\t\tcallback(\"could not find manifest in parent applications\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tSystem.ready(function () { // make sure system is ready\n\t\t\tvar application = System.Application.getCurrent();\n\t\t\tgetRawManifest(callback, application, 1);\n\t\t});\n\t};\n\n\t// async read of JSON config file\n\tthis.readConfigFile = function (coreConfigFile, importCallback) {\n\t\tLogger.system.debug(\"fetching \" + coreConfigFile);\n\t\tfetch(coreConfigFile, {\n\t\t\tcredentials: \"include\"\n\t\t}).then(function (response) {\n\t\t\treturn response.json();\n\t\t}).catch(function (err) {\n\t\t\timportCallback(`Failure importing ${coreConfigFile}: ${err}`, null);\n\t\t}).then(function (importObject) {\n\t\t\timportCallback(null, importObject);\n\t\t});\n\t};\n\n\t// This does a \"first stage\" processing of the manifest, providing enough config to start finsemble.\n\t// Pull in the initial manifest, which includes getting the \"hidden\" core config file along with its import definitions, and expand all variables.\n\t// However, the full config processing, including actually doing the imports, is only done in the Config Service.\n\tthis.getInitialManifest = function (callback) {\n\n\t\tSystem.ready(function () { // make sure system is ready\n\t\t\tvar application = System.Application.getCurrent();\n\t\t\tapplication.getManifest(function (manifest) { // get raw manifest\n\t\t\t\tmanifest.finsemble = manifest.finsemble || {}; // don't error on bad config\n\t\t\t\tself.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables first time so can find config config location\n\t\t\t\tlet CORE_CONFIG = manifest.finsemble.moduleRoot + \"/configs/core/config.json\"; // <<<--- here is the \"hidden\" core config file\n\t\t\t\tself.readConfigFile(CORE_CONFIG, function (error, newFinsembleConfigObject) { // fetch the core config file\n\t\t\t\t\tif (!error) {\n\t\t\t\t\t\tObject.keys(newFinsembleConfigObject).forEach(function (key) {\n\t\t\t\t\t\t\tif (key === \"importConfig\") {\n\t\t\t\t\t\t\t\t// add any importConfig items from the core to the existing importConfig\n\t\t\t\t\t\t\t\tmanifest.finsemble.importConfig = manifest.finsemble.importConfig || [];\n\t\t\t\t\t\t\t\tfor (let i = 0; i < newFinsembleConfigObject.importConfig.length; i++) {\n\t\t\t\t\t\t\t\t\tmanifest.finsemble.importConfig.unshift(newFinsembleConfigObject.importConfig[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (key === \"importThirdPartyConfig\") {\n\t\t\t\t\t\t\t\t// add any importThirdPartyConfig items from the core to the existing importConfig\n\t\t\t\t\t\t\t\tmanifest.finsemble.importThirdPartyConfig = manifest.finsemble.importThirdPartyConfig || [];\n\t\t\t\t\t\t\t\tfor (let i = 0; i < newFinsembleConfigObject.importThirdPartyConfig.length; i++) {\n\t\t\t\t\t\t\t\t\tmanifest.finsemble.importThirdPartyConfig.unshift(newFinsembleConfigObject.importThirdPartyConfig[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmanifest.finsemble[key] = newFinsembleConfigObject[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tself.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables with finsemble config\n\t\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ConfigUtil.getInitialManifest:getCoreConfig:Initial Manifest after variables Resolved\", manifest);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLogger.system.error(\"ConfigUtil.getInitialManifest:getCoreConfig:failed importing into finsemble config.\", error);\n\t\t\t\t\t}\n\t\t\t\t\tcallback(manifest);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n\n\t// output JSON object to file\n\tthis.promptAndSaveJSONToLocalFile = function (filename, jsonObject) {\n\t\tLogger.system.debug(\"saveJSONToLocalFile\", filename, jsonObject);\n\n\t\tlet dataStr = JSON.stringify(jsonObject, null, \"\\t\");\n\t\tlet dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n\n\t\tlet exportFileDefaultName = filename + \".json\";\n\n\t\tlet linkElement = document.createElement(\"a\");\n\t\tlinkElement.setAttribute(\"href\", dataUri);\n\t\tlinkElement.setAttribute(\"download\", exportFileDefaultName);\n\t\tlinkElement.click();\n\t};\n\n\t// utility function for future use\n\tthis.configFormatForExport = function(typeOfConfig, configObject) {\n\t\tLogger.system.debug(\"configFormatForExport starting\", typeOfConfig, configObject);\n\t\tvar exportConfig = FSBLUtils.clone(configObject);\n\n\t\tif (typeOfConfig === \"raw\") {\n\t\t\t// do nothing since config is ready to export as is\n\t\t} else if (typeOfConfig === \"all\") {\n\t\t\tdelete exportConfig.importConfig;\n\t\t\tdelete exportConfig.comment;\n\t\t} else if (typeOfConfig === \"application\") {\n\t\t\tdelete exportConfig.importConfig;\n\t\t\tdelete exportConfig.comment;\n\t\t\tdelete exportConfig.system;\n\t\t\tdelete exportConfig.services;\n\t\t} else if (typeOfConfig === \"workspace\") {\n\t\t\texportConfig = { workspace: exportConfig };\n\t\t} else if (typeOfConfig === \"workspaceTemplate\") {\n\t\t\tlet workspaceDefinition = {};\n\t\t\tworkspaceDefinition[exportConfig.name] = exportConfig;\n\t\t\texportConfig = { workspaceTemplates: workspaceDefinition };\n\t\t} else if (typeOfConfig === \"services\") {\n\t\t\texportConfig = exportConfig.services;\n\t\t} else if (typeOfConfig === \"components\") {\n\t\t\texportConfig = exportConfig.components;\n\t\t}\n\n\t\treturn exportConfig;\n\t};\n\n\t/////////////////////////////////////////////////////////////////////////\n\t/////////////// Remaining code is for config verification ///////////////\n\t/////////////////////////////////////////////////////////////////////////\n\n\t// convenience constructor to return record used in configVerifyObject.\n\tthis.VerifyConfigRecord = function (propertyType, propertyCondition) {\n\t\tthis._verify = {\n\t\t\ttype: propertyType,\n\t\t\tcondition: propertyCondition\n\t\t};\n\t};\n\n\t// convenience constants for defining verification object. See example usage in ServiceManager or ConfigService.\n\t// Required means startup will break without it, so error.\n\t// Optional means startup will not break without it; however, it is documented and expected as part of the config that should always be there.  So warning message only.\n\t// Deprecated mean startup will no break but old config format is used and should be updated.\n\tthis.REQUIRED_STRING = new this.VerifyConfigRecord(\"string\", \"required\");\n\tthis.REQUIRED_OBJECT = new this.VerifyConfigRecord(\"object\", \"required\");\n\tthis.REQUIRED_BOOLEAN = new this.VerifyConfigRecord(\"boolean\", \"required\");\n\tthis.REQUIRED_ARRAY = new this.VerifyConfigRecord(\"array\", \"required\");\n\tthis.OPTIONAL_EXPECTED_STRING = new this.VerifyConfigRecord(\"string\", \"optional\");\n\tthis.OPTIONAL_EXPECTED_OBJECT = new this.VerifyConfigRecord(\"object\", \"optional\");\n\tthis.OPTIONAL_EXPECTED_BOOLEAN = new this.VerifyConfigRecord(\"boolean\", \"optional\");\n\tthis.OPTIONAL_EXPECTED_ARRAY = new this.VerifyConfigRecord(\"array\", \"optional\");\n\tthis.DEPRECATED_STRING = new this.VerifyConfigRecord(\"string\", \"DEPRECATED\");\n\tthis.DEPRECATED_OBJECT = new this.VerifyConfigRecord(\"object\", \"DEPRECATED\");\n\tthis.DEPRECATED_BOOLEAN = new this.VerifyConfigRecord(\"boolean\", \"DEPRECATED\");\n\tthis.DEPRECATED_ARRAY = new this.VerifyConfigRecord(\"array\", \"DEPRECATED\");\n\n\t// check type of one config property. Return true if ok; otherwise false. Must handle null configProperty (returning false).\n\tfunction checkType(configProperty, type) {\n\t\tvar typeOk = true;\n\t\tif (configProperty) {\n\t\t\tif (type == \"array\") {\n\t\t\t\tif (!Array.isArray(configProperty)) {\n\t\t\t\t\ttypeOk = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// note \"array\" type is being distinguished from \"object\" type, so configProperty type shouldn't be an array\n\t\t\t\tif (Array.isArray(configProperty) || typeof configProperty !== type) {\n\t\t\t\t\ttypeOk = false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\ttypeOk = false;\n\t\t}\n\t\treturn typeOk;\n\t}\n\n\t// Verifies one config property given it's corresponding verifyRecord and returns appropriate result.\n\tfunction verifyConfigProperty(fullPathName, configProperty, verifyRecord) {\n\t\tLogger.system.verbose(`verifyConfigProperty for ${fullPathName}`, configProperty, verifyRecord);\n\t\tvar resultOk = true;\n\t\tswitch (verifyRecord._verify.condition) {\n\t\t\tcase \"required\":\n\t\t\t\tresultOk = checkType(configProperty, verifyRecord._verify.type);\n\t\t\t\tif (!resultOk) { // required must exist and have correct type\n\t\t\t\t\tLogger.system.error(`Illegally formatted configuration.  Type of ${fullPathName} is not an expected ${verifyRecord._verify.type}`, configProperty, verifyRecord);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"optional\":\n\t\t\t\tif (!configProperty) { // missing optional only generates warning\n\t\t\t\t\tLogger.system.warn(`CONFIGURATION WARNING: Expected configuration missing for ${fullPathName}.`, configProperty, verifyRecord);\n\t\t\t\t} else {\n\t\t\t\t\tresultOk = checkType(configProperty, verifyRecord._verify.type);\n\t\t\t\t\tif (!resultOk) { // optional only errors with wrong type\n\t\t\t\t\t\tLogger.system.error(`Illegally formatted configuration. Type of ${fullPathName} is not an expected ${verifyRecord._verify.type}`, configProperty, verifyRecord);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"DEPRECATED\":\n\t\t\t\tif (configProperty) { // DEPRECATED generates warning\n\t\t\t\t\tLogger.system.warn(`CONFIGURATION WARNING: DEPRECATED configuration ${fullPathName}.`, configProperty, verifyRecord);\n\t\t\t\t\tresultOk = checkType(configProperty, verifyRecord._verify.type);\n\t\t\t\t\tif (!resultOk) { // DEPRECATED only errors with wrong type\n\t\t\t\t\t\tLogger.system.error(`Config ${fullPathName} is DEPRECATED and illegally formatted.  Expected type is ${verifyRecord._verify.type}.`, configProperty, verifyRecord);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tLogger.system.error(`Illegally formatted config record.  Condition ${verifyRecord._verify.condition} unknown`, configProperty, verifyRecord);\n\t\t}\n\t\treturn resultOk;\n\t}\n\n\t/**\n\t * Verifies config is correct and logs messages as needed. Recursively walks configObject and configVerifyObject.\n\t *\n\t * @param {object} fullPathName path name of config being verified (e.g. \"manifest\", \"manifest.finsemble\"); used for error messages\n\t * @param {object} configObject the configuration object to verify (typically the manifest object or manifest.finsemble object)\n\t * @param {object} configVerifyObject object to drive the verification; data driven.\n\t *\n\t * Example configVerifyObject below.\n\t * \t\tNote verification records (e.g. REQUIRED_STRING) only go at the leaf level, but code must handle corresponding undefined config at all levels.\n\t *\n\t * \t\tvar configVerifyObject = {\n\t *\t\tfinsemble: {\n\t *\t\t\tapplicationRoot: REQUIRED_STRING,\n\t *\t\t\tmoduleRoot: REQUIRED_STRING,\n\t *\t\t\tsystem: {\n\t *\t\t\t\tFSBLVersion: REQUIRED_STRING,\n\t *\t\t\t\trequiredServicesConfig: REQUIRED_OBJECT,\n\t *\t\t\t},\n\t *\t\t\tsplinteringConfig: {\n\t *\t\t\t\tsplinterAgents: OPTIONAL_EXPECTED_ARRAY\n\t *\t\t\t},\n\t *\t\t\tstorage: {\n\t *\t\t\t\tLocalStorageAdapter: DEPRECATED_STRING\n\t *\t\t\t},\n\t *\t\t}\n\t *\t};\n \t *\n\t *\n\t * @returns If correct, return true (with no log messages generated); return false otherwise. For optional or DEPRECATED generate warning if not defined, but no error unless if wrong type.\n\t *\n\t * @example See ConfigService for example usage.\n\t *\n\t * @private\n\t */\n\tthis.verifyConfigObject = function (fullPathName, configObject, configVerifyObject) {\n\t\tLogger.system.verbose(`verifyConfigObject for ${fullPathName}`, configObject, configVerifyObject);\n\t\tvar verifyConfigObjectOk = true;\n\n\t\tif (configVerifyObject._verify) { // currently config records only defined at leaf level (could enhance by allowing at any level)\n\t\t\tverifyConfigObjectOk = verifyConfigProperty(fullPathName, configObject, configVerifyObject);\n\t\t} else {\n\t\t\tif (!configVerifyObject) { // shouldn't happen unless by api input\n\t\t\t\tLogger.system.error(`configUtil.verify: configVerifyObject not defined for ${fullPathName}`, configObject, configVerifyObject);\n\t\t\t} else {\n\t\t\t\tvar propertyList = Object.keys(configVerifyObject);\n\t\t\t\tif (!propertyList) { // shouldn't happen unless by api input\n\t\t\t\t\tLogger.system.error(`configUtil.verify: illegally formatted verification record for ${fullPathName}`, configObject, configVerifyObject);\n\t\t\t\t} else { // not at leaf level so recursively iterate though all the properties\n\t\t\t\t\tfor (let i = 0; i < propertyList.length; i++) {\n\t\t\t\t\t\tlet property = propertyList[i];\n\t\t\t\t\t\tlet thisPropertyPath = fullPathName + \".\" + property;\n\t\t\t\t\t\tlet thisConfigProperty = null;\n\t\t\t\t\t\tif (configObject && (property in configObject)) {\n\t\t\t\t\t\t\tthisConfigProperty = configObject[property];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// the order of the conditional (i.e. \"&&\") insures verification will continue after error(s)\n\t\t\t\t\t\tverifyConfigObjectOk = this.verifyConfigObject(thisPropertyPath, thisConfigProperty, configVerifyObject[property]) && verifyConfigObjectOk;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn verifyConfigObjectOk;\n\t};\n\n\t/**\n\t * Convenience function to get a default value from config.\n\t *\n\t * @param {object} base base path of config object\n\t * @param {string} path path string of config property\n\t * @param {any} defaultValue if path value not defined or null, then use default value\n\t *\n\t * @returns {object} return config value or default value\n\t *\n\t * @example\n\t *\n\t *\t\tdefaultAdaptor = ConfigUtil.getDefault(manifest, \"manifest.finsemble.defaultStorage\", \"LocalStorageAdapter\");\n\t *\t\tsameDomainTransport = ConfigUtil.getDefault(finConfig, \"finConfig.router.sameDomainTransport\", \"SharedWorker\");\n\t *\t\tvar serverAddress = getDefault(params, \"params.transportSettings.FinsembleTransport.serverAddress\", \"ws://127.0.0.1:3376\");\n\t *\n\t */\n\tthis.getDefault = function (base, path, defaultValue) {\n\t\tvar result = defaultValue;\n\t\tif (base) {\n\t\t\ttry {\n\t\t\t\tlet properties = path.split(\".\");\n\t\t\t\tlet currentValue = base;\n\t\t\t\tfor (let i = 1; i < properties.length; i++) {\n\t\t\t\t\tcurrentValue = currentValue[properties[i]];\n\t\t\t\t}\n\t\t\t\tresult = currentValue;\n\t\t\t} catch (err) {\n\t\t\t\tresult = defaultValue;\n\t\t\t}\n\n\t\t\tif (typeof(result) === \"undefined\") result = defaultValue;\n\t\t}\n\t\treturn result;\n\t};\n\n};\n\nexport const ConfigUtilInstance = new ConfigUtil();\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/configUtil.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/events/events.js\n// module id = 13\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 14\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n\"use strict\";\ntype fieldOnlyParam = {\n\t/** Name of the field */\n\tfield: string\n}\ntype fieldOnlyParams = fieldOnlyParam[] | string[];\n\ntype fieldAndValueParam = {\n\t/** Name of the field */\n\tfield: string,\n\t/** Value of the field */\n\tvalue?: any\n};\ntype fieldAndValueParams = fieldAndValueParam[] | string[];\ntype listenerParam = {\n\t/**\n\t * The data field to listen for.\n\t*/\n\tfield?: string,\n\t/**\n\t * The function to be called when the observed piece of config is modified. If this is empty, fn is used.\n\t */\n\tlistener?: Function\n}\ntype removeListenersType = listenerParam | listenerParam[];\n\nimport Validate from \"../common/validate\"; // Finsemble args validator\nimport { _BaseClient as BaseClient } from \"./baseClient\";\nimport { map as asyncMap } from \"async\";\nimport SystemManagerClient from \"../common/systemManagerClient\";\nimport Logger from \"./logger\";\n\n/**\n * @introduction\n * <h2>Config Client (Finsemble Connect)</h2>\n *\n * This client provides run-time access to Finsemble's configuration.\n * The Config Client functions similar to a global store created with the Distributed Store Client and offers many of the same methods.\n * Values modified at runtime are not persisted.\n *\n *\n * See the [Configuration tutorial](tutorial-Configuration.html) for a configuration overview.\n *\n * @hideconstructor\n * @constructor\n */\nclass ConfigClient extends BaseClient {\n\tlisteners = [];\n\tsubs;\n\tconstructor(params) {\n\t\tsuper(params);\n\t\t//Methods were formally an arrow function. If we want our documentation build to read nested parameters, we need to use this instead of an arrow.\n\t\tthis.processAndSet = this.processAndSet.bind(this);\n\t\tthis.getValue = this.getValue.bind(this);\n\t\tthis.getValues = this.getValues.bind(this);\n\t\tthis.setValue = this.setValue.bind(this);\n\t\tthis.setValues = this.setValues.bind(this);\n\t\tthis.removeValue = this.removeValue.bind(this);\n\t\tthis.removeValues = this.removeValues.bind(this);\n\t\tthis.addListener = this.addListener.bind(this);\n\t\tthis.addListeners = this.addListeners.bind(this);\n\t\tthis.removeListener = this.removeListener.bind(this);\n\t\tthis.removeListeners = this.removeListeners.bind(this);\n\t\tthis.setPreference = this.setPreference.bind(this);\n\t\tthis.getPreferences = this.getPreferences.bind(this);\n\t}\n\t/**\n\t * Get a value from the config.\n\t * @param {Function} cb Will return the value if found.\n\t * @returns {any} The value of the field. If no callback is given and the value is local, this will run synchronous\n\t * @example\n\t * FSBL.Clients.ConfigClient.getValue({ field:'field1' }, function(err,value){ });\n\t * FSBL.Clients.ConfigClient.getValue('field1', function(err,value){ });\n\t */\n\tgetValue(params: fieldOnlyParam | string, cb = Function.prototype): Promise<any> {\n\t\tif (typeof params === \"string\") { params = { field: params }; }\n\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tif (!(params as fieldOnlyParam).field) {\n\t\t\t\tconst err = \"no field provided\";\n\t\t\t\treject(err);\n\t\t\t\treturn cb(err);\n\t\t\t}\n\n\t\t\tthis.routerClient.query(\"configService.getValue\", { field: (params as fieldOnlyParam).field },\n\t\t\t\tfunction (err, response) {\n\t\t\t\t\tif (err) { reject(err); return cb(err); }\n\t\t\t\t\tresolve({ err, data: response.data });\n\t\t\t\t\treturn cb(err, response.data);\n\t\t\t\t});\n\t\t};\n\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t * Get multiple values from the config.\n\t* @param {fieldOnlyParam[] | string[]} fields An array of field objects. If there are no fields provided, the complete configuration manifest is returned.\n\t * @param {Function} cb Will return the value if found.\n\t * @returns {Object} - Returns an object of with the fields as keys. If no callback is given and the value is local, this will run synchronous\n\t * @example\n\t * FSBL.Clients.ConfigClient.getValues([{ field: 'field1' },{ field2: 'field2' }],function(err,values){ });\n\t * FSBL.Clients.ConfigClient.getValues(['field1','field2'], function(err,values){ });\n\t * FSBL.Clients.ConfigClient.get(null, callback); // returns the complete manifest containing the finsemble property\n\t*/\n\tgetValues(fields?: fieldOnlyParam[] | string[], cb = Function.prototype) {\n\t\tif (typeof fields === \"function\") {\n\t\t\tcb = fields;\n\t\t\tfields = null;\n\t\t}\n\t\tif (fields && !Array.isArray(fields)) {\n\t\t\treturn this.getValue(fields, cb);\n\t\t}\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"configService.getValues\",\n\t\t\t\t{\n\t\t\t\t\tfields: fields\n\t\t\t\t}\n\t\t\t\t, function (err, response) {\n\t\t\t\t\tif (err) { return cb(err); }\n\t\t\t\t\tresolve({ err, data: response.data });\n\t\t\t\t\treturn cb(err, response.data);\n\t\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t * Set a value in the config. Setting a value will trigger events that you can listen to using <a href=\"ConfigClient.html#addListener\">addListener</a>.\n\t * @param {function} cb Optional callback\n\t * @returns {null}\n\t *\n\t * @example\n\t * FSBL.Clients.ConfigClient.setValue({ field:'field1', value:\"new value\" });\n\t */\n\tsetValue(params: fieldAndValueParam, cb?) {\n\t\tvar data = {\n\t\t\tfield: params.field,\n\t\t\tvalue: params.value\n\t\t};\n\t\treturn this.routerClient.query(\"configService.setValue\", data, function (err) {\n\t\t\treturn cb ? cb(err) : null;\n\t\t});\n\t};\n\n\t/**\n\t * This will set multiple values in the config.\n\t * @param {function} cb Optional callback\n\t * @returns {null}\n\t *\n\t * @example\n\t * FSBL.Clients.ConfigClient.setValues([{ field:'field1', value: \"new value\" }]);\n\t */\n\tsetValues(fields: fieldAndValueParams, cb?) {\n\t\tif (!fields) {\n\t\t\treturn Logger.system.error(\"ConfigClient.SetValues. No params given\");\n\t\t}\n\t\tif (!Array.isArray(fields)) {\n\t\t\treturn Logger.system.error(\"ConfigClient.SetValues. Params must be an array\");\n\t\t}\n\t\treturn this.routerClient.query(\"configService.setValues\", fields, function (err) {\n\t\t\treturn cb ? cb(err) : null;\n\t\t});\n\t};\n\n\t/**\n\t * Remove a value from the config.\n\t * @param {fieldAndValueParam | String} params - Either an object or string\n\t * @param {Function} cb -  Returns an error if there is one\n\t * @example\n\t * FSBL.Clients.ConfigClient.removeValue({ field:'field1' }, function(err,bool){ });\n\t */\n\tremoveValue(params: fieldAndValueParam, cb = Function.prototype) {\n\n\t\tif (params !== undefined) {\n\t\t\tif (!params.field && typeof params === \"string\") {\n\t\t\t\tparams = { field: params };\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn cb(\"no field provided\");\n\t\t\t}\n\t\t}\n\t\tparams.value = null;\n\t\treturn this.setValue(params, cb);\n\t};\n\n\t/**\n\t * Removes multiple values from the config.\n\t * @param {fieldAndValueParams} params - An Array of field objects\n\t * @param {Function} cb -  Returns an error if there is one.\n\t * @example\n\t * FSBL.Clients.ConfigClient.removeValues([{\n\t * \tfield:'field1'\n\t * }],\n\t * function(err,bool){\t});\n\t */\n\tremoveValues(params: fieldAndValueParams, cb = Function.prototype) {\n\t\tif (!Array.isArray(params)) { return cb(\"The passed in parameter needs to be an array\"); }\n\t\t//casting needed here because params doesn't have an index method?? My guess is that their type defs aren't great.\n\t\tasyncMap((params as any), this.removeValue, function (err, data) {\n\t\t\treturn cb(err, data);\n\t\t});\n\t};\n\n\t/**\n\t * make sure we dont have duplicate router subscribers\n\t * @private\n\t */\n\tchangeSub = (change) => {\n\t\tif (!this.subs) this.subs = {};\n\t\tif (!this.subs[change]) {\n\t\t\tthis.routerClient.query(\"configService.addListener\", change, (err, queryResponse) => {\n\t\t\t\tthis.routerClient.subscribe(change, this.handleChanges);\n\t\t\t});\n\t\t\tthis.subs[change] = true;\n\t\t}\n\t};\n\n\t/**\n\t* Add a listener to the config at either the root config level or field level. If no field is given, the root config level is used. You can also listen for changes to config fields any number of levels deep -- finsemble.configitem.deeperconfigitem.evendeeperconfigitem\n\t* @param {Function} fn The function to be called when the observed piece of config is modified.\n\t* @param {Function} cb Callback to be invoked after the listener is added.\n\t* @example\n\t* var myFunction = function(err,data){};\n\t* FSBL.Clients.ConfigClient.addListener({ field:'field1' }, myFunction, cb);\n\t*/\n\taddListener(params: fieldOnlyParam, fn, cb?) {\n\t\tvar field = null;\n\t\tif (typeof params === \"function\") {\n\t\t\tfn = params;\n\t\t\tparams = { field };\n\t\t}\n\t\tif (params.field) { field = params.field; }\n\n\t\tvar combined = \"configService\" + (field ? \".\" + field : \"\");\n\t\tif (this.listeners[combined]) {\n\t\t\tthis.listeners[combined].push(fn);\n\t\t}\n\t\telse {\n\t\t\tthis.listeners[combined] = [fn];\n\t\t}\n\n\t\tthis.changeSub(combined);\n\t\treturn cb ? cb() : null;\n\t};\n\n\t/**\n\t * Add an array of listeners as objects or strings. If using strings, you must provide a function callback as the second parameter.\n\t *\n\t * @param {listenerParam | listenerParam[] | fieldOnlyParam | string[]} params\n\t * @param {function} fn The function to be called when the observed piece of config is modified.\n\t * @param {function} cb Callback to be invoked after the listeners are added.\n\t * @example\n\t * var myFunction = function(err,data){}\n\t* FSBL.Clients.ConfigClient.addListeners(\n\t* \t[\n\t* \t\t{ field: \"field1\", listener: myFunction },\n\t* \t\t{ field: \"field2\", listener: myFunction }\n\t* \t],\n\t* \tnull,\n\t* \tcb\n\t* );\n\t*\n\t* FSBL.Clients.ConfigClient.addListeners(\n\t* [{ field: \"field1\" }, { field: \"field2\", listener: myFunction }],\n\t* myFunction,\n\t* cb\n\t* );\n\t*\n\t* FSBL.Clients.ConfigClient.addListeners([\"field1\", \"field2\"], myFunction, cb);\n\t*/\n\taddListeners(params: listenerParam | listenerParam[] | fieldOnlyParam | string[], fn?: Function, cb?: Function) {\n\t\tif (!Array.isArray(params)) {\n\t\t\treturn this.addListener({ field: params.field }, fn, cb);\n\t\t}\n\n\t\tfor (var i = 0; i < params.length; i++) {\n\t\t\tvar field = null;\n\t\t\tvar item = params[i];\n\t\t\tvar ls;\n\t\t\tif (typeof item === \"string\") {\n\t\t\t\tfield = item;\n\t\t\t} else if (item.field) {\n\t\t\t\tfield = item.field;\n\t\t\t\tls = item.listener;\n\t\t\t}\n\n\t\t\tvar combined = \"configService\" + (field ? \".\" + field : \"\");\n\t\t\tif (!ls) {\n\t\t\t\tif (fn && typeof fn === \"function\") {\n\t\t\t\t\tls = fn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.listeners[combined]) {\n\t\t\t\tthis.listeners[combined].push(ls);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.listeners[combined] = [ls];\n\t\t\t}\n\t\t\tthis.changeSub(combined);\n\t\t}\n\t\treturn cb ? cb() : null;\n\t};\n\n\t/**\n\t * Remove a listener from config. If no field is given, we look for a config root listener\n\t * @param {function} fn The listener to remove.\n\t * @param {function} cb Returns true if it was successful in removing the listener.\n\t *\n\t * @example\n\t * var myFunction = function(err,data){ }\n\t * FSBL.Clients.ConfigClient.removeListener({\n\t * \tfield:'field1'\n\t * }, MyFunction, function(bool){ });\n\t * FSBL.Clients.ConfigClient.removeListener(MyFunction, function(bool){ });\n\t */\n\tremoveListener(params: fieldOnlyParam, fn: Function, cb?: Function) {\n\t\tvar field = null;\n\n\t\t// The case below is for removing the root level config listener\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = fn;\n\t\t\tfn = params;\n\t\t\tparams = { field };\n\t\t}\n\n\t\tif (params.field) { field = params.field; }\n\t\tvar combined = this.name + (field ? \".\" + field : \"\");\n\t\tif (this.listeners[combined]) {\n\t\t\tfor (var i = 0; i < this.listeners[combined].length; i++) {\n\t\t\t\tif (this.listeners[combined][i] === fn) {\n\t\t\t\t\tthis.listeners[combined].pop(i);\n\t\t\t\t\treturn cb ? cb(null, true) : null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cb ? cb(null, false) : null;\n\t};\n\n\t/**\n\t * Remove an array of listeners from the config\n\t * @param {removeListenersType} params\n\t * @param {function} fn The listener to remove\n\t * @param {function} cb Returns true if it was successful in removing the listener.\n\t *\n\t * @example\n\t * var myFunction = function(err,data){ }\n\t * FSBL.Clients.ConfigClient.removeListeners({\n\t * \tfield: 'field1'\n\t * }, MyFunction, function(bool){ });\n\t * FSBL.Clients.ConfigClient.removeListeners([{ field:'field1', listener: MyFunction }], function(bool){ });\n\t * FSBL.Clients.ConfigClient.removeListeners(['field1'], MyFunction, function(bool) { });\n\t */\n\tremoveListeners(params: removeListenersType, fn?: Function, cb?: Function) {\n\t\tif (!Array.isArray(params)) {\n\t\t\t// The typecasting below is bad but it prevents build problems. We should tighten the APIs.\n\t\t\tif (typeof params === \"function\") {\n\t\t\t\tthis.removeListener(({} as fieldOnlyParam), params, cb);\n\t\t\t} else if (params.field) {\n\t\t\t\tthis.removeListener((params as fieldOnlyParam), fn, cb);\n\t\t\t}\n\t\t\treturn cb(\"missing fields\");\n\t\t}\n\t\tvar removeCount = 0;\n\t\tfor (var i = 0; i < params.length; i++) {\n\t\t\tvar field = null;\n\t\t\tvar item = params[i];\n\t\t\tvar ls;\n\t\t\tif (typeof item === \"string\") {\n\t\t\t\tfield = item;\n\t\t\t} else if (item.field) {\n\t\t\t\tfield = item.field;\n\t\t\t\tls = params[i].listener;\n\t\t\t}\n\n\t\t\tvar combined = \"configService\" + (field ? \".\" + field : \"\");\n\t\t\tif (!ls) {\n\t\t\t\tif (fn && typeof fn === \"function\") {\n\t\t\t\t\tls = fn;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var j = 0; j < this.listeners[combined].length; j++) {\n\t\t\t\tif (this.listeners[combined][j] === ls) {\n\t\t\t\t\tthis.listeners[combined].pop(i);\n\t\t\t\t\tremoveCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (removeCount < params.length) {\n\t\t\treturn cb(\"All listeners could not be found\", false);\n\t\t}\n\t\treturn cb ? cb(null, true) : null;\n\t};\n\n\n\t/**\n\t * @private\n\t * @memberof ConfigClient\n\t */\n\thandleChanges = (err, response) => {// we use this to format our responses\n\t\tif (err) { Logger.system.error(err); }\n\t\tif (!response.data.field) { response.data.field = null; }\n\t\t//var combined = \"configService\" + (response.data.field ? \".\" + response.data.field : \"\");\n\t\tvar val = response.data.storeData ? response.data.storeData : response.data.value;\n\t\tthis.triggerListeners(response.data.field ? response.data.field : \"configService\", val);\n\t}\n\t// Trigger any function that is listening for changes\n\t/**\n\t * @private\n\t * @memberof ConfigClient\n\t */\n\ttriggerListeners = (listenerKey, data) => {\n\t\tif (this.listeners[listenerKey]) {\n\t\t\tfor (var i = 0; i < this.listeners[listenerKey].length; i++) {\n\t\t\t\tif (typeof this.listeners[listenerKey][i] === \"function\") {\n\t\t\t\t\tthis.listeners[listenerKey][i](null, { field: listenerKey, value: data });\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.warn(\"ConfigClient:triggerListeners: listener is not a function\", listenerKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Get all or a portion of the configuration from the Config Service. Typically this function is used to return Finsemble configuration\n\t * (e.g. \"finesemble.components\"); however, if can also return all or part of the manifest which contains the Finsemble config property.\n\t * If no configReference parameter is passed in (i.e. only the callback parameter is specified), then the complete manifest object is returned\n\t * (including manifest.finsemble).\n\t *\n\t * @param {object=} params field property identifies specific config to return\n\t * @param {function} callback callback function(error, data) to get the configuration data\n\t * @private\n\t * @example\n\t *\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble\" }, function(err, finsemble) {\n\t *\t\tif (!err) {\n\t *\t\t\tfinsembleConfig = finsemble;\n\t *\t\t} else {\n\t *\t\t\tconsole.error(\"failed to get finsemble configuration\");\n\t *\t\t}\n\t * });\n\t *\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble.isAuthEnabled\" }, function(err, isAuthEnabled) {\n\t *\t\tvar authorizationOn = isAuthEnabled;\n\t * });\n\t *\n\t * FSBL.Clients.ConfigClient.get(callback); // returns the complete manifest containing the finsemble property\n\t * FSBL.Clients.ConfigClient.get(null, callback); // alternate form; returns the complete manifest containing the finsemble property\n\t * FSBL.Clients.ConfigClient.get({}, callback); // alternate form; returns the complete manifest containing the finsemble property\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble.components\" }, callback);\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble.services\" }, callback);\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble.components\" }, callback);\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble.assimilation\" }, callback);\n\t * FSBL.Clients.ConfigClient.get({ field: \"runtime.version\", callback) }; // returns the manifest's runtime.version property\n\t */\n\tget(params: fieldOnlyParam | {}, callback) {\n\t\tLogger.system.debug(\"ConfigClient.Get\", params);\n\t\tLogger.system.warn(\"This functionality has been deprecated. It will be removed in Finsemble version 3.0. Use getValue instead.\", params);\n\n\t\t// if only one argument then assume no filtering parameters -- the complete manifest will be returned\n\t\tif (arguments.length === 1) {\n\t\t\tcallback = params; // since only one arg, it must be the callback\n\t\t\tValidate.args(callback, \"function\");\n\t\t\tparams = {};\n\t\t} else {\n\t\t\tValidate.args(params, \"object\", callback, \"function\");\n\t\t}\n\t\tthis.routerClient.query(\"config.get\", params, function (queryErr, queryResponse) {\n\t\t\tcallback(queryErr, queryResponse ? queryResponse.data : null);\n\t\t});\n\t};\n\n\t/**\n\t * This is designed to mirror the get. Private because security TBD.\n\t * @private\n\t *\n\t * @param {object} params\n\t * @param {function} callback\n\t */\n\n\tset = (params: fieldAndValueParam | {}, callback) => {\n\t\tLogger.system.debug(\"ConfigClient.Set\", params);\n\t\t// if only one argument then assume no filtering parameters -- the complete manifest will be returned\n\t\tif (arguments.length === 1) {\n\t\t\tcallback = params; // since only one arg, it must be the callback\n\t\t\tValidate.args(callback, \"function\");\n\t\t\tparams = {};\n\t\t} else {\n\t\t\tValidate.args(params, \"object\", callback, \"function\");\n\t\t}\n\t\tthis.routerClient.query(\"config.set\", params, function (queryErr, queryResponse) {\n\t\t\tcallback(queryErr, queryResponse ? queryResponse.data : null);\n\t\t});\n\t}\n\n\t/**\n\t * Dynamically set config values within the Finsemble configuration.  New config properties may be set or existing ones modified. Note that configuration changes will not necessarily dynamically modify the components or services that use the corresponding configuration -- it depends if the component or service handles the corresponding change notifications (either though PubSub or the Config's DataStore). Also, these changes do not persist in any config files.\n\t *\n\t * <b>Note</b>: Anytime config is set using this API, the newConfig along with the updated manifest will by published to the PubSub topic \"Config.changeNotification\".  To get these notifications any component or service can subscribe to the topic. An example is shown below.\n\t *\n\t * <b>Note</b>: Anytime config is set using this API, the dataStore underlying configuration 'Finsemble-Configuration-Store' will also be updated. To get these dataStore events a listener can be set as shown in the example below. However, any config modifications made directly though the DataStore will not result in corresponding PubSub notifications.\n\t *\n\t * @param {object} params\n\t * @param {object} params.newConfig Provides the configuration properties to add into the existing configuration under manifest.finsemble. This config must match the Finsemble config requirements as described in the [Configuration tutorial]{@tutorial Configuration}. It can include importConfig references to dynamically fetch additional configuration files.\n\t * @param {boolean} params.overwrite If true then overwrite any preexisting config with new config (can only set to true when running from same origin, not cross-domain); if false then newConfig must not match properties of existing config, including service and component configuration.\n\t * @param {boolean} params.replace True specifies any component or service definitions in the new config will place all existing non-system component and service configuration\n\t * @param {StandardCallback} callback Callback to be invoked upon task completion.\n\t * @example\n\t * // Examples using processAndSet()\n\t * FSBL.Clients.ConfigClient.processAndSet({ newConfig: { myNewConfigField: 12345 }, overwrite: false });\n\t * FSBL.Clients.ConfigClient.processAndSet(\n\t * {\n\t *\tnewConfig: {\n\t *\t\t\"myNewConfigField\": 12345,\n\t *\t\t\"myNewConfigObject\": {\n\t *\t\t\tA: \"this is a test\",\n\t *\t\t\tB: \"more test\"\n\t *\t\t},\n\t *\t\t\"importConfig\": [\n\t *\t\t\t\"$applicationRoot/configs/application/test.json\",\n\t *\t\t]\n\t *\t},\n\t *\toverwrite: true,\n\t *  replace: false,\n\t * },\n\t *\tfunction (err, finsemble) {\n\t *\t\tif (err) {\n\t *\t\t\tconsole.error(\"ConfigClient.set\", err);\n\t *\t\t} else {\n\t *\t\t\tconsole.log(\"new finsemble config\", finsemble);\n\t *\t\t}\n\t *\t}\n\t * );\n\t *\n\t *  // example subscribing to PubSub to get notifications of dynamic updates\n\t * RouterClient.subscribe(\"Config.changeNotification\", function (err, notify) {\n\t *\t\tconsole.log(\"set notification\", notify.data.newConfig, notify.data.finsemble);\n\t *\t});\n\t *\n\t *  // example using DataStore to get notifications of dynamic updates\n\t * DistributedStoreClient.getStore({ store: 'Finsemble-Configuration-Store', global: true }, function (err, configStore) {\n\t *\t\tconfigStore.addListener({ field: \"finsemble\" }, function (err, newFinsembleConfig) {\n\t *\t\t\tconsole.log(\"new manifest.finsemble configuration\", newFinsembleConfig);\n\t *\t\t});\n\t * });\n\t *\n\t */\n\tprocessAndSet(params: {\n\t\tnewConfig: any,\n\t\toverwrite: boolean,\n\t\treplace: boolean\n\t}, callback?: StandardCallback) {\n\t\tLogger.system.debug(\"ConfigClient.processAndSet\", params);\n\n\t\tValidate.args(params, \"object\", callback, \"function=\") &&\n\t\t\t(Validate as any).args2(\"params.newConfig\", params.newConfig, \"object\", \"params.overwrite\", params.overwrite, \"boolean=\", \"params.replace\", params.replace, \"boolean=\");\n\n\t\tif (!params.overwrite && params.replace) {\n\t\t\tvar errMsg = \"cannot use replace option unless overwrite is also true\";\n\t\t\tLogger.system.warn(\"ConfigClient.processAndSet:\", errMsg);\n\t\t\tif (callback) {\n\t\t\t\tcallback(errMsg, null);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.routerClient.query(\"config.processAndSet\", params, function (queryErr, queryResponse) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback(queryErr, queryResponse ? queryResponse.data : null);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * Sets a value on the configStore and persists that value to storage. On application restart, this value will overwrite any application defaults.\n\t * @param {fieldAndValueParam} params\n\t * @param {StandardCallback} callback Callback to be invoked when callback to be invoked when preferences have been retrieved from the service.\n\t * @example\n\t * FSBL.Clients.ConfigClient.setPreference({\n\t * \tfield: \"finsemble.initialWorkspace\",\n\t * \tvalue: \"Workspace 2\"\n\t * }, (err, response) => {\n\t * \t\t//preference has been set\n\t * });\n\t */\n\tsetPreference(params: fieldAndValueParam, callback?: StandardCallback) {\n\t\tthis.routerClient.query(\"PreferencesService.setPreference\", params, function (queryErr, queryResponse) {\n\t\t\tif (callback) {\n\t\t\t\tcallback(queryErr, queryResponse ? queryResponse.data : null);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Retrieves all of the preferences set for the application.\n\t * @param {StandardCallback} callback Callback to be invoked when preferences have been retrieved from the service.\n\t * @example\n\t * FSBL.Clients.ConfigClient.getPreferences((err, preferences)=> {\n\t * \t\t//use preferences.\n\t * });\n\t */\n\tasync getPreferences(callback?: StandardCallback) {\n\t\tLogger.system.debug(\"ConfigClient.getPreferences\", callback);\n\n\t\t// need to check since preferences doesn't come up until after authentication, so not always ready\n\t\tawait SystemManagerClient.waitForStartup(\"preferencesService\");\n\t\tthis.routerClient.query(\"PreferencesService.getPreferences\", null, function (queryErr, queryResponse) {\n\t\t\tLogger.system.debug(\"ConfigClient.getPrefences response\", queryResponse);\n\t\t\tif (callback) {\n\t\t\t\tcallback(queryErr, queryResponse ? queryResponse.data : null);\n\t\t\t}\n\t\t});\n\t};\n};\n\nvar configClient = new ConfigClient({\n\tstartupDependencies: {\n\t\tservices: [\"configService\"]\n\t},\n\tonReady: function (cb) {\n\t\tif (cb) {\n\t\t\tcb();\n\t\t}\n\t},\n\tname: \"configClient\"\n});\n\nexport default configClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/configClient.ts","/*!\n* Copyright 2018 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nimport { ILogger } from \"./ILogger\"\nimport { ICentralLogger } from \"./ICentrallogger\"\n\nconst { debug, warn, log, /*info,*/ error } = console;\nconst info = () => { };\nconst verbose = info;\n\nconst logger: ILogger = {\n\twarn, info, log, debug,\n\terror, verbose\n}\n\n// This is all stolen from the logger.\n// @TODO - make consumers agnostic of this stuff and remove from the interface.\nconst LOCAL_ONLY_DEFAULT = false;\nvar DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true, Verbose: true, LocalOnly: LOCAL_ONLY_DEFAULT }; // if true captured for logger\nvar CONSOLE_DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true }; // if true then goes to console and captured for logger\n\nvar initialLogState = {\n\tconsole: CONSOLE_DEFAULT_LOG_SETTING,\n\tdev: DEFAULT_LOG_SETTING,\n\tsystem: DEFAULT_LOG_SETTING,\n\tperf: DEFAULT_LOG_SETTING,\n}; // will be updated on registration with Central Logger, but capture everything until then\n\n\nfunction IsLogMessage(channel) {\n\treturn (channel === \"logger.service.logMessages\");\n};\n\nfunction traceString() {\n\tfunction getPosition(string, subString, index) {\n\t\treturn string.split(subString, index).join(subString).length;\n\t}\n\n\tfunction getErrorObject() {\n\t\ttry {\n\t\t\tthrow Error(\"\");\n\t\t} catch (err) {\n\t\t\treturn err;\n\t\t}\n\t}\n\tvar stack = getErrorObject().stack;\n\tvar position = getPosition(stack, \"\\n\", 4);\n\tvar tString = stack.substring(position); // strip off irrelevant part of stack\n\tvar final = \"Log Stack: \\n\" + tString.substr(1); // insert description\n\treturn final;\n}\n\n/** An implementation of the ICentralLogger interface that\n * merely logs straight to the console rather than going over to\n * Central Logging service. Used in situations where use of the\n * Central Logging service is not possible (such as in test\n * environments, or in the Central Logging service itself).\n */\nexport class LocalLogger implements ICentralLogger {\n\t// Log things.\n\t// @TODO - Make consumers agnostic of these and remove from interface.\n\tstart = () => { }\n\tisLogMessage = IsLogMessage;\n\tsetting = () => initialLogState;\n\tcallStack = () => traceString();\n\tunregisterClient = (_) => {}\n\tsetRouterClient = () => { };\n\t// Top level logging methods\n\twarn = warn;\n\tinfo = info;\n\tlog = log;\n\tdebug = debug;\n\terror = error;\n\tverbose = verbose;\n\n\t// \"Namespaced\" methods - they still point to console.\n\tsystem = logger;\n\tperf = logger;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/clients/localLogger.ts","import { EventEmitter } from \"events\";\nimport RouterClient from \"../clients/routerClientInstance\";\nconst STARTUP_TIMEOUT_DURATION = 10000;\nimport { APPLICATION_STATE_CHANNEL, SERVICES_STATE_CHANNEL, SERVICE_CLOSED_CHANNEL, SERVICE_QUERY_READY_CHANNEL, CLIENT_SERVER_MAPPING } from \"./constants\";\nimport SystemManagerClient from \"./systemManagerClient\";\nimport Logger from \"../clients/logger\";\n\ntype StartupDependencyParams = {\n\tcallback: Function;\n\tdependencies: string[];\n}\n/**\n * Small class to hold on to dependencies and callbacks. Also emits a timeout event that the startupManager is listening for. When it times out, the startupManager catches the event and generates a message that includes all of the offline clients and services. It then causes this class to emit an  err event that the baseService is listening for. This arrangement is set up for a couple of reasons.\n * 1. I can't use the logger in here because the logger uses the startupManager, and there'd be a circular dependency.\n * 2. FSBLDependencyManager is a singleton, and there can be multiple services living in a single window. I didn't want them all to log that they were offline if they weren't (e.g., if I'd put the emitter on the StartupManager instead of this class).\n */\nclass StartupDependency extends EventEmitter {\n\tstartupTimer: number | null;\n\tcallback: Function;\n\tdependencies: string[];\n\tconstructor(params: StartupDependencyParams) {\n\t\tsuper();\n\t\tthis.callback = params.callback;\n\t\tthis.dependencies = params.dependencies;\n\t\tthis.startupTimer = null;\n\t\tthis.setStartupTimer = this.setStartupTimer.bind(this);\n\t\tthis.clearStartupTimer = this.clearStartupTimer.bind(this);\n\t\tthis.setStartupTimer();\n\t}\n\n\t/**\n\t * Removes the startup timer (because the dependency was resolved within the allotted time);\n\t */\n\tclearStartupTimer() {\n\t\tclearTimeout(this.startupTimer);\n\t\tdelete this.startupTimer;\n\t}\n\t/**\n\t * If the dependency hasn't resolved within STARTUP_TIMEOUT_DURATION, emit a timeout event that the StartupManager can catch.\n\t */\n\tsetStartupTimer() {\n\t\tlet self = this;\n\t\t//+ coerces the result to a number, making typescript happy.\n\t\tthis.startupTimer = +setTimeout(() => {\n\t\t\tself.emit(\"timeout\");\n\t\t}, STARTUP_TIMEOUT_DURATION);\n\t}\n}\n\n/**\n * Used to generate a unique ID for the list of dependencies.\n */\nfunction uuidv4() {\n\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n\t\tvar r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n/**\n * @private\n */\nclass StartupManager {\n\tonlineClients: string[];\n\tonlineServices: string[];\n\tdependencies: object;\n\tAuthorizationCompleted: boolean;\n\tstartupTimers: object;\n\tstartupTimerFired: boolean;\n\tservicesAreAllOnline: object = {};\n\tclientsAreAllOnline: object = {};\n\n\t/**\n\t * @private\n\t */\n\tconstructor() {\n\t\tthis.onlineClients = [];\n\t\tthis.dependencies = {};\n\t\tthis.startupTimers = {};\n\t\tthis.startupTimerFired = false;\n\t\tthis.bindCorrectContext();\n\t}\n\t/**\n\t * This function and `checkDependencies` are the most important parts of this class. This function accepts a FinsembleDependency object and a callback to be invoked when all required dependencies are ready.\n\t *\n\t * @param {FinsembleDependency} dependencies\n\t * @param {any} callback\n\t * @memberof StartupManager\n\t */\n\twaitFor(dependencies, callback) {\n\t\tlet id = uuidv4();\n\n\t\t//Set defaults to an empty array if they aren't passed in.\n\t\tif (!dependencies.clients) dependencies.clients = [];\n\t\t//The dependency manager can pass in a name to the dependency. If it does, we'll use it. If not, we won't.\n\n\t\tif (dependencies.clients.length) {\n\t\t\t//Lowercase the first letter of the client.\n\t\t\tdependencies.clients = dependencies.clients.map(clientName => {\n\t\t\t\treturn clientName.charAt(0).toLowerCase() + clientName.slice(1);\n\t\t\t});\n\t\t}\n\n\t\tlet dependency = new StartupDependency({ dependencies, callback });\n\n\t\t//If the dependency times out, throw an error that the baseService can catch. It will then log out why it's not online.\n\t\tdependency.on(\"timeout\", () => {\n\t\t\tthis.onDependencyTimeout(dependency);\n\t\t});\n\n\t\tthis.dependencies[id] = dependency;\n\t\tthis.checkDependencies();\n\t\treturn dependency;\n\t}\n\n\t/**\n\t * This method generates a helpful error message giving possible reasons for why the service is offline. After the message is generated, it emits an event on the dependency that's passed in as a parameter. The BaseService is listening for this event, and logs the error message to the central logger.\n\t * @param {Dependency} dependency\n\t */\n\tonDependencyTimeout(dependency) {\n\t\tconst NEW_LINE = \"\\n\",\n\t\t\tTAB = \"\\u0009\",\n\t\t\tBULLET = \"\\u2022\",\n\t\t\tBULLET_POINT = NEW_LINE + TAB + BULLET,\n\t\t\tSTORAGE_ADAPTER_ERROR = \"The default storage adapter failed to fully initialize, or has a syntax error. Ensure that the default storage adapter is up, connected, and sending/receiving data properly.\";\n\n\n\t\tlet offlineClients = this.getOfflineClients();\n\t\tlet errorMessage = `APPLICATION LIFECYCLE:STARTUP:Dependency not online after ${STARTUP_TIMEOUT_DURATION / 1000} seconds.`;\n\n\t\tif (offlineClients.length) {\n\t\t\terrorMessage += ` Waiting for these clients: ${offlineClients.join(\", \")}.`;\n\t\t}\n\n\n\t\t//The BaseService is listening for this event, and will log the errorMessage to the central logger.\n\t\tdependency.emit(\"err\", errorMessage);\n\t}\n\t/**\n\t * This function loops through all of the registered dependencies and checks to see if the conditions have been met. If so, it invokes the callback and removes the reference to the dependency.\n\t *\n\t * @memberof StartupManager\n\t */\n\tcheckDependencies() {\n\t\tfor (let id in this.dependencies) {\n\t\t\tlet dependency = this.dependencies[id];\n\t\t\tlet { dependencies, callback } = dependency;\n\n\t\t\tif (dependencies.clients.length && !this.clientsAreAllOnline[id]) {\n\t\t\t\tthis.clientsAreAllOnline[id] = this.checkClients(dependencies.clients);\n\t\t\t\tif (!this.clientsAreAllOnline[id]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete this.dependencies[id];\n\t\t\tdependency.clearStartupTimer();\n\t\t\tif (callback) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t}\n\n\tgetOfflineClients() {\n\t\tlet offlineClients = [];\n\t\tfor (let id in this.dependencies) {\n\t\t\tlet { dependencies } = this.dependencies[id];\n\t\t\tofflineClients = offlineClients.concat(dependencies.clients.filter((dep) => !this.onlineClients.includes(dep)));\n\t\t}\n\t\t//return deduped list.\n\t\treturn offlineClients.filter((client, i) => offlineClients.indexOf(client) === i);\n\t}\n\n\t/**\n\t * Iterates through required client list, returns false if any required client is offline.\n\t *\n\t * @param {any} clientList\n\n\t * @memberof StartupManager\n\t */\n\tcheckClients(clientList) {\n\t\treturn clientList.every(client => this.onlineClients.includes(client));\n\t}\n\n\t/**\n\t *\n\t *\n\t * @param {any} clientName\n\n\t * @memberof StartupManager\n\t */\n\tsetClientOnline(clientName) {\n\t\t//This check is done because multiple clients of the same type can be on a page.\n\t\tif (this.onlineClients.includes(clientName)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.onlineClients.push(clientName);\n\t\tthis.checkDependencies();\n\n\t\t// Note From Mike: Must change or workaround how some client usage triggers this code even though the client's service is NOT ready.\n\t\t// This problem happens because some services initialize their clients when the client's service hasn't been created yet, but then don't use the client until later.\n\t\t// So although the general code is correct here, the overall result is not (specifically the queries will timeout causing delays, error logging, and potential side effects).\n\t\t// Therefore disabling this handshake code for now -- BUT KEEP CODE COMMENTED-OUT CODE UNTIL THIS IS RESOLVED. Just to be clear, nothing breaks without this code, but this\n\t\t// code is what generates an error when improperly using a client...so it provides a needed check.\n\t\t// let serviceName = CLIENT_SERVER_MAPPING(clientName);\n\t\t// if (true /*disabling*/ && serviceName) {\n\t\t// \tconsole.debug(\"SERVICE_QUERY_READY_CHANNEL querying\", clientName, SERVICE_QUERY_READY_CHANNEL(serviceName));\n\t\t// \t// before going online make sure this client's service is ready -- it should be until there is a startup problem\n\t\t// \tRouterClient.query(SERVICE_QUERY_READY_CHANNEL(serviceName), {}, { timeout: 500 }, (err) => {\n\t\t// \t\tif (err) {\n\t\t// \t\t\tLogger.system.error(`DependencyManager: server ${serviceName} is not ready for client ${clientName}. ${err}. Make sure dependencies client dependencies are correct.`)\n\t\t// \t\t} else {\n\t\t// \t\t\tLogger.system.debug(`DependencyManager: server ${serviceName} is ready for client ${clientName} `)\n\t\t// \t\t}\n\t\t// \t\tthis.onlineClients.push(clientName);\n\t\t// \t\tthis.checkDependencies();\n\t\t// \t});\n\t\t// } else {\n\t\t// \tthis.onlineClients.push(clientName);\n\t\t// \tthis.checkDependencies();\n\t\t// }\n\t}\n\t/**\n\t * Returns the array of online clients.\n\t *\n\n\t * @memberof StartupManager\n\t */\n\tgetOnlineClients() {\n\t\treturn this.onlineClients;\n\t}\n\t/**\n\t * Method to make sure that `this` is correct when the callbacks are invoked.\n\t *\n\t * @memberof StartupManager\n\t */\n\tbindCorrectContext() {\n\t\tthis.checkDependencies = this.checkDependencies.bind(this);\n\t\tthis.checkClients = this.checkClients.bind(this);\n\t\tthis.getOfflineClients = this.getOfflineClients.bind(this);\n\t\tthis.onDependencyTimeout = this.onDependencyTimeout.bind(this);\n\t\tthis.waitFor = this.waitFor.bind(this);\n\t}\n}\n/**\n * @private\n */\nclass ShutdownManager {\n\tofflineServices: string[];\n\tdependencies: object;\n\t/**\n\t * @private\n\t */\n\tconstructor() {\n\t\tthis.offlineServices = [];\n\t\tthis.dependencies = {};\n\t\tthis.checkDependencies = this.checkDependencies.bind(this);\n\t}\n\n\t/**\n\t * This function and `checkDependencies` are the most important parts of this class. This function accepts a FinsembleDependency object and a callback to be invoked when all required dependencies are ready.\n\t *\n\t * @param {FinsembleDependency} dependencies\n\t * @param {any} callback\n\t * @memberof StartupManager\n\t */\n\twaitFor(dependencies, callback) {\n\t\tLogger.system.debug(`DependencyManager:waitFor`, dependencies);\n\n\t\t//Set defaults to an empty array if they aren't passed in.\n\t\tif (!dependencies.services) {\n\t\t\tdependencies.services = [];\n\t\t}\n\n\t\tlet id = uuidv4();\n\n\t\tthis.dependencies[id] = { dependencies, callback };\n\t}\n\t/**\n\t * This function loops through all of the registered dependencies and checks to see if the conditions have been met. If so, it invokes the callback and removes the reference to the dependency.\n\t *\n\t * @memberof ShutdownDependencies\n\t */\n\tcheckDependencies() {\n\t\tconsole.debug(\"checkDependencies\", this.dependencies);\n\t\tif (Object.keys(this.dependencies)) {\n\t\t\tfor (let id in this.dependencies) {\n\t\t\t\tlet { dependencies, callback } = this.dependencies[id];\n\t\t\t\tLogger.system.debug(`DependencyManager:checkDependency`, dependencies.services, this.offlineServices);\n\n\t\t\t\tif (dependencies.services.length) {\n\t\t\t\t\tlet servicesAreAllOffline = this.checkServices(dependencies.services);\n\t\t\t\t\tif (!servicesAreAllOffline) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.debug(\"checkDependencies callback\");\n\t\t\t\tdelete this.dependencies[id];\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\t/**\n\t * Iterates through required service list, returns false if any required service is offline.\n\t *\n\t * @param {any} serviceList\n\n\t * @memberof ShutdownManager\n\t */\n\tcheckServices(serviceList) {\n\t\treturn serviceList.every(service => this.offlineServices.includes(service));\n\t}\n\n\tsetServiceOffline(service) {\n\t\tLogger.system.debug(\"setServiceOffline\", service);\n\t\tconsole.debug(\"setServiceOffline\", service);\n\t\tthis.offlineServices.push(service);\n\t\tthis.checkDependencies();\n\t}\n\n}\n\n\n/**\n * This class handles FSBL client/service dependency management. Given a list of services and/or clients, it will invoke a callback when all dependencies are ready.\n *\n * The constructor is exported for the system mananger's shutDownManager so that class isn't constructed until right time in the starup process.\n * Otherwise, this class is used as a singleton thoughout the rest of the system.\n *\n * @shouldBePublished false\n * @private\n * @class FSBLDependencyManager\n */\nexport class FSBLDependencyManager extends EventEmitter {\n\t/**\n\t * Binds context, and listens for services to come online.\n\t * Creates an instance of FSBLDependencyManager.\n\t * @private\n\t * @memberof FSBLDependencyManager\n\t */\n\tstartup: StartupManager;\n\tshutdown: ShutdownManager;\n\tAuthorizationCompleted;\n\tRouterClient;\n\tname;\n\tconstructor() {\n\t\tsuper();\n\t\tthis.startup = new StartupManager();\n\t\tthis.shutdown = new ShutdownManager();\n\t\tthis.RouterClient = RouterClient;\n\t\tthis.AuthorizationCompleted = false;\n\t\tthis.bindCorrectContext();\n\t\tthis.onAuthorizationCompleted(this.startup.checkDependencies);\n\t\tRouterClient.onReady(this.listenForServices);\n\t}\n\t/**\n * Method to make sure that `this` is correct when the callbacks are invoked.\n *\n * @memberof StartupManager\n */\n\tbindCorrectContext() {\n\t\tthis.listenForServices = this.listenForServices.bind(this);\n\t\tthis.onAuthorizationCompleted = this.onAuthorizationCompleted.bind(this);\n\t}\n\n\tsetClientOnline(client) {\n\t\tthis.startup.setClientOnline(client);\n\t}\n\t/*\n\t* handler for when a service changes its state. If a service comes online or goes offline, dependencies are checked and callbacks invoked.\n\t*/\n\tonServiceStateChange(data) {\n\t\tlet ServiceNames = Object.keys(data);\n\t\t//Iterate through all services. If it was online but isn't anymore, set it offline. If it was offline but now is, set it online.\n\t\tServiceNames.forEach((serviceName: string) => {\n\t\t\tlet state: ServiceState = data[serviceName].state;\n\t\t\tif (state === \"closed\") {\n\t\t\t\tthis.shutdown.setServiceOffline(serviceName);\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Listens on the router for services to come online. The first subscriber gets the activeServices as of object instantiation. The 2nd subscriber listens for services to come online after the object is created. We should consider make this all one subscriber, though I see the advantage of having this setup.\n\t *\n\t */\n\tlistenForServices() {\n\t\tLogger.system.debug(`DependencyManager:listenForServices before wait`);\n\t\tvar listenForServicesCallback;\n\n\t\t// wait until the essential parts of the microkernel stage is done so pubsub responders are available\n\t\tSystemManagerClient.waitForBootStage(\"kernel\", \"stageEntered\", listenForServicesCallback = () => {\n\t\t\tLogger.system.debug(`DependencyManager:listenForServices after wait`);\n\t\t\tthis.RouterClient.subscribe(SERVICES_STATE_CHANNEL, (err, event) => {\n\t\t\t\tLogger.system.debug(`DependencyManager:listenForServices SERVICES_STATE_CHANNEL`, event.data);\n\t\t\t\tthis.onServiceStateChange(event.data);\n\t\t\t});\n\n\t\t\t// TODO: The pubsub responder doesnt seem to work here. IT works for the above when not closing.\n\t\t\tthis.RouterClient.addListener(SERVICE_CLOSED_CHANNEL, (err, event) => {\n\t\t\t\tLogger.system.debug(`DependencyManager:listenForServices SERVICE_CLOSED_CHANNEL`, event.data);\n\t\t\t\tlet services = {};\n\t\t\t\tservices[event.data.name] = {\n\t\t\t\t\tstate: \"closed\"\n\t\t\t\t}\n\t\t\t\tthis.onServiceStateChange(services);\n\t\t\t});\n\n\t\t\tthis.RouterClient.subscribe(APPLICATION_STATE_CHANNEL, (err, response: ApplicationStateChange) => {\n\t\t\t\tswitch (response.data.state) {\n\t\t\t\t\t//authenticated will only be caught by components/services that are up before auth does its thing. Otherwise, a component/service coming up will have the 'ready' application state. In either case, we need to do the things below. But only once.\n\t\t\t\t\tcase \"authenticated\":\n\t\t\t\t\tcase \"ready\":\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"closing\":\n\t\t\t\t\t\tthis.shutdown.checkDependencies();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tonAuthorizationCompleted(callback) {\n\t\tif (this.AuthorizationCompleted) {\n\t\t\tcallback();\n\t\t} else {\n\t\t\tthis.addListener(\"AuthorizationCompleted\", callback);\n\t\t}\n\t}\n\n}\n/**\n * This class handles FSBL client/service dependency management. Given a list of services and/or clients, it will invoke a callback when all dependencies are ready. This is a singleton.\n * @shouldBePublished false\n * @private\n * @class FSBLDependencyManager\n */\nexport let FSBLDependencyManagerSingleton: FSBLDependencyManager = new FSBLDependencyManager();\nexport default FSBLDependencyManagerSingleton;\n\n\n\n// WEBPACK FOOTER //\n// src/common/dependencyManager.ts","\n\nimport { BootStage } from \"./_types\"\n\nexport const ALL_BOOT_STAGES: BootStage[] = [\"microkernel\", \"kernel\", \"authentication\", \"preuser\", \"earlyuser\", \"user\"];\nexport const CRITICAL_BOOT_STAGES: BootStage[] = [\"microkernel\", \"kernel\", \"authentication\"];\n\nexport const SYSLOG_CHANNEL = \"systemManager.systemlog\";\nexport const SHOW_SYSLOG_CHANNEL = \"systemManager.showSystemlog\";\nexport const STATUS_CHANNEL_BASE = \"systemManager.boot.status\";\nexport const STAGE_CHANNEL = \"systemManager.boot.stage\";\nexport const CHECKPOINT_CHANNEL_BASE = \"systemManager.checkpoint\";\n\n\n\n\n// WEBPACK FOOTER //\n// src/services/systemManager/_constants.ts","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/lib/bytesToUuid.js\n// module id = 19\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/lib/rng-browser.js\n// module id = 20\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/v1.js\n// module id = 21\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nimport Logger from \"../clients/logger\";\n\nimport { ConfigUtilInstance as ConfigUtil } from \"./configUtil\";\nimport { System } from \"../common/system\";\nimport SystemManagerClient from \"./systemManagerClient\";\n\nvar ConfigClient = null;\n\n\"use strict\";\n\n/**\n * @introduction\n * <h2>Notification Client (Finsemble Workspaces)</h2>\n *\n * Finsemble makes use of pop up (toast) notifications for communicating information to the end user in a gentler way than modal dialogs.\n * Use the Notification API to route messages so that your components can create these notifications.\n *\n *\n * Notifications are called from `FSBL.UserNotification.alert`.\n *\n *\n * See the [Notifications tutorial](tutorial-Notifications.html) for an overview.\n *\n * @hideconstructor\n * @constructor\n */\nvar UserNotification = function () {\n\tvar alertOnceSinceStartUp = {};\n\tvar alertCurrentCount = {};\n\tvar defaultTemplateURL = null;\n\n\t/**\n\t * Gets the default template URL from the manifest at finsemble->notificationURL. If that doesn't exist then it falls back to the system template location.\n\t * @private\n\t */\n\tthis.getDefaultTemplateURL = function (cb) {\n\t\tif (defaultTemplateURL) {\n\t\t\tsetTimeout(function () { // Ensure async, just like else clause\n\t\t\t\tcb(defaultTemplateURL);\n\t\t\t}, 0);\n\t\t} else {\n\t\t\t// Require configClient here instead of at top of page to avoid a dependency error (Router uses UserNotification before config service is ready).\n\t\t\tif (!ConfigClient) ConfigClient = require(\"../clients/configClient\").default;\n\t\t\tConfigClient.get({ field: \"finsemble\" }, function (err, finConfig) {\n\t\t\t\tdefaultTemplateURL = ConfigUtil.getDefault(finConfig, \"finsemble.notificationURL\", finConfig.moduleRoot + \"/components/system/notification/notification.html\");\n\t\t\t\tcb(defaultTemplateURL);\n\t\t\t});\n\t\t}\n\t};\n\n\n\t/**\n\t * Conditionally alerts the end user using a desktop notification.\n\t *\n\t * @param {string} topic Specifies a category for the notification. This parameter is reserved for future use; it is designed to filter notifications (e.g., applying regEx's defined in config to determine which notifications are displayed). Any topic string can be specified; however \"system\" is the recommended topic for system notifications applicable both to end uses and to developers. \"dev\" is the recommended topic for notifications applicable only during development (e.g., a notification that <i>config.json</i> has an illegal value).\n\t * @param {string} frequency Either \"ALWAYS\", \"ONCE-SINCE-STARTUP\", or \"MAX-COUNT\" to determine if alert should be displayed. Note, the frequencies are based on the number of notifications emitted from a window (as opposed to system wide).\n\t * @param {string} identifier Uniquely identifies this specific notification message. Used when \"frequency\" is set to \"ONCE-SINCE-STARTUP\" or \"MAX-COUNT\".\n\t * @param {any} message Message to display in the notification. Typically a string. Finsemble's built in templating accepts and object. See <i>../src-built-in/components/notification/notification.html<i>.\n\t * @param {object=} params\n\t * @param {number} params.maxCount Specifies the max number of notifications to display for specified identifier when frequency=\"MAX-COUNT\" (default is 1).\n\t * @param {number} params.duration Time in milliseconds before auto-dismissing the notification (defaults to 24 hours).\n\t * @param {number} params.url The URL for for notification HTML. If not provided then the system default will be used. Defaults to Finsemble's built-in version at <i>\"../components/system/notification/notification.html\"</i>.\n\t *\n\t * @example\n\t * FSBL.UserNotification.alert(\"system\", \"ONCE-SINCE-STARTUP\", \"MANIFEST-Error\", message);\n\t * FSBL.UserNotification.alert(\"dev\", \"ALWAYS\", \"Config-Error\", message, { url: notificationURL, duration: 1000 * 5 });\n\t * FSBL.UserNotification.alert(\"dev\", \"MAX-COUNT\", \"Transport-Failure\", message, { url: notificationURL, maxCount: 2 });\n\t*/\n\n\tthis.alert = function (topic, frequency, identifier, message, params) {\n\t\tvar self = this;\n\t\t// If the url for the template is passed in then don't bother fetching the config\n\t\tif (params && params.url) {\n\t\t\tthis.alertInternal(topic, frequency, identifier, message, params, params.url);\n\t\t} else {\n\t\t\t// If no url, then we need to get the template from config\n\t\t\tthis.getDefaultTemplateURL(function (url) {\n\t\t\t\tself.alertInternal(topic, frequency, identifier, message, params, url);\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * @private\n\t */\n\tthis.alertInternal = function (topic, frequency, identifier, message, params, url) {\n\t\tparams = params || {};\n\t\tvar alertUser = false;\n\t\tvar key = \"UserNotification.alert.\" + identifier;\n\t\tvar duration = params.duration || 1000 * 60 * 60 * 24;\n\n\t\tswitch (frequency) {\n\t\t\tcase \"ONCE-SINCE-STARTUP\":\n\t\t\t\tif (key in alertOnceSinceStartUp) {\n\t\t\t\t\talertUser = false;\n\t\t\t\t} else { // if no key then must be first time\n\t\t\t\t\talertUser = true;\n\t\t\t\t\talertOnceSinceStartUp[key] = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"MAX-COUNT\":\n\t\t\t\tlet currentCount = 0;\n\t\t\t\tlet maxCount = params.maxCount || 1;\n\t\t\t\tif (key in alertCurrentCount) {\n\t\t\t\t\tcurrentCount = alertCurrentCount[key];\n\t\t\t\t}\n\t\t\t\talertCurrentCount[key] = ++currentCount; // increment and store\n\t\t\t\tif (currentCount <= maxCount) {\n\t\t\t\t\talertUser = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault: // default to \"ALWAYS\"\n\t\t\t\talertUser = true;\n\t\t}\n\n\t\tLogger.log(\"UserNotification.alert\", topic, alertUser, frequency, identifier, message, params);\n\t\tif (alertUser) {\n\t\t\tvar notifyObject = {\n\t\t\t\turl: url,\n\t\t\t\tmessage: message,\n\t\t\t\ttimeout: duration\n\t\t\t};\n\t\t\tSystemManagerClient.systemLog({ notification: true }, \"Notification: \" + message);\n\t\t\tnew System.Notification(notifyObject);\n\t\t}\n\t};\n};\n\nexport default new UserNotification();\n\n\n// WEBPACK FOOTER //\n// ./src/common/userNotification.js","import { v1 as uuidv1 } from \"uuid\";\nimport * as get from \"lodash.get\";\nimport * as pick from \"lodash.pick\";\nimport { isEqual as deepEqual } from \"lodash\";\n\n//Class without deep openfin/system dependencies.\nexport function guuid() {\n\treturn uuidv1(); // return global uuid\n}\n\nexport function clone(obj, logFn) {\n\t//This has been tested a good amount. Previous to this commit we were using a mix of deepmerge and JSON.parse(JSON.stringify()).\n\t//Trying lodash.deepclone made my tests take 2-3s.\n\t//JSON.parse everywhere made them take ~ 1s.\n\t//Using JSON.parse on arrays and deep merge on objects makes them take 7-900ms.\n\tif (Array.isArray(obj)) {\n\t\treturn obj.slice();\n\t}\n\ttry {\n\t\treturn JSON.parse(JSON.stringify(obj));\n\t} catch (e) {\n\t\tlogFn(\"clone error\", e);\n\t\treturn e;\n\t}\n};\n\nexport function capitalizeFirst(s: string) {\n\treturn s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nclass MockLogger {\n\tsystem;\n\tconstructor({ debug } = { debug: true }) {\n\t\tif (debug) {\n\t\t\tthis.system = console;\n\t\t\tthis.system.debug = console.log;\n\t\t} else {\n\t\t\t//Suppress everything but errors for tests\n\t\t\tthis.system = {\n\t\t\t\twarn: Function.prototype,\n\t\t\t\tdebug: Function.prototype,\n\t\t\t\tlog: Function.prototype,\n\t\t\t\tinfo: Function.prototype,\n\t\t\t\terror: console.error\n\t\t\t};\n\t\t}\n\n\t}\n\tisLogMessage() { return true; };\n\n\tstart() { }\n};\n\nexport const mockLogger = new MockLogger();\n\n/** Converts a flat array into an array of arrays of length n.\n *\n * If the length of the array is not divisble by n, the last\n * element of the new array will contain the remainder items.\n*/\nexport function chunkArray(n: number, arr: any[]) {\n\tif (n <= 0) {\n\t\tthrow new Error(\"Can't chunk array by number less than 0\");\n\t}\n\n\treturn arr.reduce((prev, curr, index) => {\n\t\tif (index % n === 0) {\n\t\t\tconst chunk = []\n\t\t\tfor (let i = index; i < index + n; i++) {\n\t\t\t\tif (i < arr.length) {\n\t\t\t\t\tchunk.push(arr[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprev.push(chunk);\n\t\t}\n\t\treturn prev;\n\t}, []);\n}\n\n/**\n * Confirms wether a variable passed to it exists and is a number.\n * If true, returns the parsed Number, otherwise returns false\n * @param {string} [num] A string potentially containing a number\n * @returns False or Number(input)\n */\nexport function isNumber(num: string) {\n\tif (!num || Number.isNaN(Number(num))) {\n\t\treturn false;\n\t}\n\n\treturn Number(num);\n};\n\n/** Returns exactly what's passed to it. Useful for higher-order functions. */\nexport function identity<T>(arg: T): T {\n\treturn arg;\n}\n\n/*\ntyped-promisify, https://github.com/notenoughneon/typed-promisify\n\nMIT License\n\nCopyright (c) 2016 Emma Kuo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\n// DH 3/11/2019 - I've removed the type-inferring overloads, as they aren't\n// working correctly.\n\n/**\n * Wraps a callback accepting function in a promise. The callback must have the type\n * specified in StandardCallback, and the wrapped function *MUST* call the callback\n * on all possible code paths.\n */\nexport function promisify<T = any>(f: any, thisContext?: any): (...args) => Promise<T> {\n\treturn function () {\n\t\tlet args = Array.prototype.slice.call(arguments);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\targs.push((err: any, result: any) => err ? reject(err) : resolve(result));\n\t\t\tf.apply(thisContext, args);\n\t\t});\n\t}\n}\n\n/**\n * Wraps a promsie in logs that fire immediately before and after the execution of the promise. Returns a new promise.\n *\n * @param {*} logger A logging function that will log the message. E.g. `Logger.system.debug` or `console.log`.\n * @param {string} message A message to be logged. Suffixed with \"start\" and \"end\", before and after the promise, respectively.\n * @param {Promise} promise The promise to be wrapped.\n */\nexport const instrumentPromise = async (logger, message, promise) => {\n\tconst start = message + \" start\";\n\tconst end = message + \" end\";\n\tlogger(start);\n\treturn promise.then(() => logger(end));\n};\n\n/**\n * Composes an array of functions together, producing\n * a new function that is the result of applying each\n * function from right to left on its arguments.\n *\n * @example\n * const add1 = x => x + 1;\n * const multiply3 = x => x * 3\n * const mulityply3Add1 = composeRL(add1, multiply3);\n * mulityply3Add1(4); // => 13\n*/\nexport const composeRL = (...fns) => fns.reduce((f, g) => (...args) => f(g(...args)));\n\n/**\n * getProp utility - an alternative to lodash.get\n * @author @harish2704, @muffypl, @pi0, @imnnquy\n * @param {Object} object\n * @param {String|Array} path\n * @param {*} defaultVal\n */\nexport function getProp<T = any>(object, path, defaultVal?): T {\n\tconst _path = Array.isArray(path)\n\t\t? path\n\t\t: path.split('.').filter(i => i.length)\n\n\tif (!_path.length) {\n\t\treturn object === undefined ? defaultVal : object\n\t}\n\n\treturn getProp(object[_path.shift()], _path, defaultVal)\n}\n\nexport function getUniqueName(baseName = \"RouterClient\") {\n\treturn `${baseName}-${Math.floor(Math.random() * 100)}-${Math.floor(Math.random() * 10000)}`;\n}\n\nexport function getRandomWindowName(s: string, uuid: string) {\n\treturn `${getUniqueName(s)}-${uuid}`;\n}\n\n/**\n * Creates a promise that rejcts after the specified time with\n * the given message.\n */\nexport function timeoutPromise(ms, message: string) {\n\treturn new Promise((resolve, reject) => {\n\t\tlet id = setTimeout(() => {\n\t\t\tclearTimeout(id);\n\t\t\treject(message)\n\t\t}, ms)\n\t});\n}\n\n/**\n * Wraps a promise in another promise that either rejects after the specified number of miliseconds\n * or resolves with the result of the promise.\n */\nexport function wrapWithTimeout<T>(promise: Promise<T>, ms: number, message: string): Promise<T> {\n\treturn Promise.race([\n\t\tpromise,\n\t\ttimeoutPromise(ms, message),\n\t]) as Promise<T>\n}\n\n/**\n * Will determine if a given window is a StackedWindow. Returns true if the window is a\n * StackedWindow, false otherwise\n * @param {FinsembleWindow} win The window to check for StackedWindow\n */\nexport function isStackedWindow(win) {\n\treturn win &&\n\t\t((get(win, \"windowIdentifier.windowType\")\n\t\t\t|| win.windowType) === \"StackedWindow\");\n};\n\n/**\n * Converts an array into a record where the keys are the result of applying the key function\n * to each item in the array, and the values are the items.\n *\n * @param key Either the key whose value you want to become the new index, or a function\n * that returns the new index when given the current value.\n * @param arr An array of values.\n *\n * @example\n * const arr = [{foo: \"bar\"}, {foo: \"bam\"}];\n * toRecord(\"foo\", arr) // => {bar: {foo: \"bar\"}, {bam: {foo: \"bam\"}}}\n *\n * @example\n * const arr = [{foo: \"bar\"}, {foo: \"bam\"}];\n * toRecord(x => x.foo.toUpperCase(), arr) // => {BAR: {foo: \"bar\"}, {BAM: {foo: \"bam\"}}}\n */\nexport function toRecord<T>(key: string | ((x: T) => string), arr: T[]): Record<string, T> {\n\tconst keyFn = typeof key === \"string\"\n\t\t? x => x[key]\n\t\t: key;\n\treturn arr.reduce((prev, curr) => {\n\t\tprev[keyFn(curr)] = curr;\n\t\treturn prev;\n\t}, {});\n}\n\n/**\n * Given an object and array of keys as strings,\n * returns a new object copied from the first but\n * with those keys removed.\n */\nexport function removeKeys(obj, keys: string[]) {\n\tif (!obj) return obj;\n\tconst allKeys = Object.keys(obj);\n\tconst keepKeys = allKeys.filter(x => !keys.includes(x));\n\treturn pick(obj, keepKeys);\n}\n\n/**\n * Deep equal doesn't work properly if the objects aren't exactly equal\n * We have several places in the code that attach extra parameters to bounds objects\n * This function will test equality on bounds for the only left, right, top, bottom, width and height\n * @param {} bounds1 \n * @param {*} bounds2 \n */\nexport function checkIfBoundsAreEqual(bounds1, bounds2) {\n\tif (!bounds1 || !bounds2) return false;\n\tconst keepKeys = ['left', 'right', 'top', 'bottom', 'width', 'height'];\n\tconst updatedBounds1 = pick(bounds1, keepKeys);\n\tconst updatedBounds2 = pick(bounds2, keepKeys);\n\tif (deepEqual(updatedBounds1, updatedBounds2)) {\n\t\treturn true;\n\t}\n\treturn false;\n\n}\n\n\n\n// WEBPACK FOOTER //\n// src/common/disentangledUtils.ts","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.throttle/index.js\n// module id = 24\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nimport Validate from \"../common/validate\";\n\nimport Logger from \"./logger\";\n\nimport { _BaseClient } from \"./baseClient\";\nimport pLimit from \"p-limit\";\nimport { promisify } from \"../common/disentangledUtils\";\nconst limit = pLimit(1);\n\nimport { componentMutateParams } from '../services/window/WindowAbstractions/BaseWindow';\n\n/**\n *\n * @introduction\n * <h2>Storage Client (Finsemble Connect)</h2>\n *\n * The Storage Client handles saving and retrieving data for your smart desktop.\n *\n *\n *See the <a href=tutorial-storingData.html>Storing Data tutorial</a> for an overview of using the Storage Client.\n * @hideconstructor\n *  @todo add clear method\n * @constructor\n */\nexport class StorageClient extends _BaseClient {\n\tclientReady: boolean = false;\n\n\t/**\n\t * Define the user name for storage (i.e., each user has unique storage).\n\t * @param {object} params\n\t * @param {string} params.user A unique key to store user data under\n\t * @param {StandardCallback} cb Callback to be called on success.\n\t *\n\t * @example\n\t * FSBL.Clients.StorageClient.setUser({ user: \"JohnDeere\"});\n\t */\n\tsetUser(params: { user: string }, cb?: StandardCallback) {\n\t\tthis.clientReady || Logger.system.error(\"storageClient invoked before ready\");\n\t\tValidate.args(params.user, \"string\", cb, \"function=\");\n\t\tthis.routerClient.query(\"Storage.setUser\", { user: params.user }, function (err, response) {\n\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\tlogMethod(\"APPLICATION LIFECYCLE:StorageClient.setUser\", params, err, response);\n\t\t\tif (cb) {\n\t\t\t\tcb(err, response.data);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Specifies the data store. For normal operation this function doesn't have to be invoked -- the default data store is set in configuration.\n\t * @param {Object} params\n\t * @param {String} params.topic If specified then data store is set only for topic.\n\t * @param {string} params.dataStore Identifies the data store (e.g. \"localStorage\", \"redis\").\n\t * @param {function} cb Callback to be called on success.\n\t *\n\t * @example\n\t * FSBL.Clients.StorageClient.setStore({topic:\"finsemble\", dataStore:\"redis\"})\n\t */\n\tsetStore(params: { topic: string, dataStore?: string }, cb?: StandardCallback) {\n\t\tthis.clientReady || Logger.system.error(\"storageClient invoked before ready\");\n\t\tValidate.args(params.topic, \"string\", params.dataStore, \"string=\", cb, \"function=\");\n\t\tLogger.system.log(\"APPLICATION LIFECYCLE:StorageClient.setStore\", params, cb);\n\t\tthis.routerClient.query(\"Storage.setStore\", params, (err, response) => {\n\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\tlogMethod(\"Storage.setStore\", err, response);\n\t\t\tif (cb) {\n\t\t\t\tcb(err, response.data);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Save a key value pair into storage.\n\t * @param {Object} params\n\t * @param {String} params.topic Storage topic for key being stored.\n\t * @param {String} params.key The key for the value to be stored under.\n\t * @param {any} params.value The value to be stored.\n\t * @param {function} cb Callback to be called on success.\n\t *\n\t * @example\n\t * FSBL.Clients.StorageClient.save({topic:\"finsemble\", key:\"testKey\", value:\"testValue\"})\n\t */\n\tsave(params: componentMutateParams, cb?: StandardCallback) {\n\t\tthis.clientReady || Logger.system.error(\"storageClient invoked before ready\");\n\t\tif (typeof params.key !== \"string\" || typeof params.topic !== \"string\") {\n\t\t\tthrow new Error(\"Values for key and topic must be strings.\");\n\t\t}\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tValidate.args(params.topic, \"string\", params.key, \"string\", params.value, \"any\", cb, \"function=\");\n\t\t\tthis.routerClient.query(\"Storage.save\", params, (err, response) => {\n\t\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\t\tlogMethod(\"Storage.save\", err, response);\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(err, response.data);\n\t\t\t\t}\n\t\t\t\tif (err) {\n\t\t\t\t\treject({ err: err, data: null });\n\t\t\t\t} else {\n\t\t\t\t\tresolve({ err: err, data: response.data });\n\t\t\t\t}\n\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t *\n\t * @param params\n\t * @private\n\t */\n\tsave1(params: { key: string, topic: string, value: any }) {\n\t\treturn limit(() => this.save(params));\n\t}\n\n\t/**\n\t * Get a value from storage.\n\t * @param {Object} params\n\t * @param {String} params.key The key to get from storage.\n\t * @param {String} params.topic The topic that the data is saved under.\n\t * @param {function} cb Callback to be called on success.\n\t *\n\t * @example\n\t * FSBL.Clients.StorageClient.get({ topic:\"finsemble\", key:\"testKey\" }, function(err, data) {\n\t *\tvar myData = data;\n\t * });\n\t */\n\n\tget<T = any>(params: { key: string, topic: string }, cb?: StandardCallback<string | Error, T>): Promise<T> {\n\t\tthis.clientReady || Logger.system.error(\"storageClient invoked before ready\");\n\t\tif (typeof params.key !== \"string\" || typeof params.topic !== \"string\") {\n\t\t\tthrow new Error(\"Values for key and topic must be strings.\");\n\t\t}\n\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tValidate.args(params.topic, \"string\", params.key, \"string\", cb, \"function=\");\n\t\t\tthis.routerClient.query(\"Storage.get\", params, (err, response) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.error(\"Storage.get\", err, response);\n\t\t\t\t\tcb(err, response ? response.data : null);\n\t\t\t\t\treturn reject(err, response ? response.data : null);\n\t\t\t\t}\n\t\t\t\tLogger.system.info(\"Storage.get\", err, response);\n\t\t\t\tif (cb) cb(err, response.data);\n\t\t\t\tresolve(response.data);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t *\n\t * @param params\n\t * @param cb\n\t * @private\n\t */\n\tget1<T = any>(params: { key: string, topic: string }, cb?: StandardCallback<string | Error, T>): Promise<T> {\n\t\treturn limit(() => this.get(params));\n\t}\n\n\t/**\n\t * Asynchronously updates provided key in storage by first retrieving the key\n\t * then running a provided function on the result and re-saving its value.\n\t * There’s no guarantees of consistency or atomicity\n\t *\n\t * @param params {any} Update storage params\n\t * @param params.topic {string} The storage topic\n\t * @param params.key {string} The storage key\n\t * @param params.updateFn {Function} Function to run to determine the value to store\n\t * @private\n\t */\n\tasync updateStorage(params: { topic: string, key: string, updateFn: (x: any) => any }) {\n\t\tconst { topic, key, updateFn } = params;\n\t\tconst result = await this.get({ topic, key });\n\t\treturn this.save({ topic, key, value: updateFn(result) });\n\t}\n\n\t/**\n\t *\n\t * @param params\n\t * @private\n\t */\n\tupdateStorage1(params: { topic: string, key: string, updateFn: (x: any) => any }) {\n\t\treturn limit(() => this.updateStorage(params));\n\t}\n\n\t/**\n\t * Get all keys for the topic.\n\t * @param {Object} params\n\t * @param {String} params.topic Topic for the keys to return.\n\t * @param {String=} params.keyPrefix Filter all keys that don't start with this prefix.\n\t * @param {function} cb Callback to be called on success.\n\t *\n\t * @example\n\t * FSBL.Clients.StorageClient.keys({topic:\"finsemble\", keyPrefix:\"test\"}, function(err, data){\n\t *\tvar myKeys = data;\n\t * });\n\t */\n\tkeys(params: { topic: string, keyPrefix?: string }, cb?: StandardCallback) {\n\t\tthis.clientReady || Logger.system.error(\"storageClient invoked before ready\");\n\t\tValidate.args(params.topic, \"string\", cb, \"function=\");\n\t\tLogger.system.debug(\"StorageClient.keys\", params, cb);\n\t\tthis.routerClient.query(\"Storage.keys\", params, function (err, response) {\n\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\tlogMethod(\"Storage.keys\", err, response);\n\t\t\tif (cb) {\n\t\t\t\tcb(err, response.data);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t *\n\t * @param params\n\t * @private\n\t */\n\tkeys1(params: { topic: string, keyPrefix?: string }): Promise<string[]> {\n\t\treturn limit(() => promisify(this.keys.bind(this))(params));\n\t}\n\n\t/**\n\t * Get a multiple values from storage based on regex.(coming soon)\n\t * @param {Object} params\n\t * @param {function} cb Callback to be called on success.\n\t * @private\n\t * @todo make this work.\n\t * @example\n\t * StorageClient.get({key:\"testKey\"});\n\t */\n\tgetMultiple(params, cb?: StandardCallback) {\n\t\tthis.clientReady || Logger.system.error(\"storageClient invoked before ready\");\n\t\tLogger.system.info(\"StorageClient.getMultiple\", params, cb);\n\t\tthis.routerClient.query(\"Storage.getMultiple\", params, function (err, response) {\n\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\tlogMethod(\"StorageClient.getMultiple:\", params, response);\n\t\t\tif (cb) {\n\t\t\t\tcb(err, response);\n\t\t\t}\n\t\t});\n\t};\n\t/**\n\t * Delete a value from storage.\n\t * @param {Object} params\n\t * @param {String} params.key The key to get from storage.\n\t * @param {String} params.topic The topic that the data is saved under.\n\t * @example\n\t * FSBL.Clients.StorageClient.remove({ key:\"testKey\" })\n\t */\n\tremove(params: { key: string, topic: string }, cb?: StandardCallback) {\n\t\tthis.clientReady || Logger.system.error(\"storageClient invoked before ready\");\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tValidate.args(params.topic, \"string\", params.key, \"string\", cb, \"function=\");\n\t\t\tthis.routerClient.query(\"Storage.delete\", params, function (err, response) {\n\t\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\t\tlogMethod(\"StorageClient.delete\", err, response);\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(err, response.data);\n\t\t\t\t}\n\t\t\t\tif (err) {\n\t\t\t\t\treject({ err: err, data: null });\n\t\t\t\t} else {\n\t\t\t\t\tresolve({ err: err, data: response.data });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t *\n\t * @param params\n\t * @private\n\t */\n\tremove1(params: { key: string, topic: string }) {\n\t\treturn limit(() => this.remove(params));\n\t}\n\n\t//Did this because \"delete\" is a reserved keyword; for autocomplete the client is exported as a namespace with a bunch of functions and wouldn't work with a function called delete.\n\tdelete = this.remove;\n\n\t/**\n\t * Clears a storage adapter of all data.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t *\n\t */\n\tclearCache(cb?: StandardCallback) {\n\t\tLogger.system.log(\"StorageClient.clearCache\", cb);\n\t\tthis.routerClient.query(\"Storage.clearCache\", null, function (err, response) {\n\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\tlogMethod(\"StorageClient.clearCache\", err, response);\n\t\t\tif (cb) {\n\t\t\t\tcb(err, response.data);\n\t\t\t}\n\t\t});\n\t};\n};\n\nvar storageClient = new StorageClient({\n\tonReady: function (cb: () => void) {\n\t\tif (cb) {\n\t\t\tcb();\n\t\t}\n\t\tstorageClient.clientReady = true;\n\t},\n\tname: \"storageClient\"\n});\n\nexport default storageClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/storageClient.ts","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.isequal/index.js\n// module id = 26\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","import { EventEmitter } from \"events\";\r\nimport Logger from \"../clients/logger\";\r\nconst deepEqual = require(\"lodash.isequal\");\r\n\r\n/** Singleton of the System class shared among all instances of Monitors\r\n * @TODO Refactor to instance member of class.\r\n */\r\nlet System;\r\nclass Monitors extends EventEmitter {\r\n\t/**\r\n\t *\r\n\t * @param {function} readyCB Function to be invoked when monitors are retrieved from the system for the first time.\r\n\t * @param {function} changeCB Function to be invoked when monitor information changes\r\n\t * @param {Object} dependencies Dependency object that provides a system object capable of retrieving monitors.\r\n\t */\r\n\tconstructor(readyCB, changeCB, dependencies) {\r\n\t\tsuper();\r\n\t\tif (dependencies && dependencies.System) {\r\n\t\t\tSystem = dependencies.System;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Monitors class requires dependency injection. Ensure that System is being passed in.\");\r\n\t\t}\r\n\r\n\t\tthis.cachedMonitorInfo = null;\r\n\r\n\t\tthis.bindAllFunctions();\r\n\t\tthis.refreshMonitors(readyCB);\r\n\r\n\t\tSystem.addEventListener(\"monitor-info-changed\", () => {\r\n\t\t\tthis.refreshMonitors(changeCB);\r\n\t\t});\r\n\r\n\t\t//This is to handle 'wake events'. This is technically only going to handle unlock events (user locks screen or logs out then logs back in)\r\n\t\t//Technically, if the user has disabled 'lock on sleep', then this will not fire, but openfin does not have an event for waking/sleeping\r\n\t\tSystem.addEventListener(\"session-changed\", (params) => {\r\n\t\t\t// FEA returns undefined, openfin returns reason\r\n\t\t\tif (!params ||\r\n\t\t\t\t(typeof (params) === \"object\" &&\r\n\t\t\t\t\tparams.hasOwnProperty(\"reason\") &&\r\n\t\t\t\t\t(params.reason === \"unlock\" || params.reason === \"remote-connect\" || params.reason === \"unknown\"))) {\r\n\t\t\t\tthis.refreshMonitors(changeCB);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tbindAllFunctions() {\r\n\t\tlet self = this;\r\n\t\tfor (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {\r\n\t\t\tlet method = self[name];\r\n\t\t\t// skip constructor\r\n\t\t\tif (!(method instanceof Function) || method === Monitors) continue;\r\n\t\t\tself[name] = self[name].bind(self);\r\n\t\t}\r\n\t}\r\n\r\n\tasyncIt(data, cb) {\r\n\t\tcb(data);\r\n\t\treturn data;\r\n\t}\r\n\r\n\trationalizeMonitor(monitor) {\r\n\t\tmonitor.monitorRect.width = monitor.monitorRect.right - monitor.monitorRect.left;\r\n\t\tmonitor.monitorRect.height = monitor.monitorRect.bottom - monitor.monitorRect.top;\r\n\t\tmonitor.availableRect.width = monitor.availableRect.right - monitor.availableRect.left;\r\n\t\tmonitor.availableRect.height = monitor.availableRect.bottom - monitor.availableRect.top;\r\n\t}\r\n\r\n\tcalculateMonitorScale(dipRect, scaledRect) {\r\n\t\treturn ((scaledRect.right - scaledRect.left) / (dipRect.right - dipRect.left));\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if two monitor configurations are different by performing a deep equal\r\n\t * @param {object} monitorInfo1 Object containing information about a set of monitors\r\n\t * @param {object} monitorInfo2 Object containing information about a set of monitors\r\n\t * @return {boolean} True if the monitors are different, false if they are the same\r\n\t */\r\n\tmonitorInfoIsChanged(monitorInfo1, monitorInfo2) {\r\n\t\tif (monitorInfo1 === null || monitorInfo2 === null || !deepEqual(monitorInfo1, monitorInfo2)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves monitor info from the system and sends an event that docking responds to.\r\n\t * If the number of monitors or id of all monitors hasn't changed, its assumed this\r\n\t * is a scaling/resolution change. The internal state will still be updated and the\r\n\t * returned result will include a 'monitorsChanged' boolean to indicate wether it\r\n\t * has changed or not\r\n\t *\r\n\t * @param {Function} cb\r\n\t */\r\n\trefreshMonitors(cb = Function.prototype) {\r\n\t\tlet monitorsChanged = true;\r\n\r\n\t\tSystem.getMonitorInfo((monitorInfo) => {\r\n\t\t\tif (!this.monitorInfoIsChanged(this.cachedMonitorInfo, monitorInfo)) {\r\n\t\t\t\tconsole.info(\"Skipped refreshMonitors because monitors do not change.\");\r\n\t\t\t\tmonitorsChanged = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.allMonitors = [];\r\n\t\t\tlet primaryMonitor = monitorInfo.primaryMonitor;\r\n\t\t\tif (Object.entries(primaryMonitor).length) {\r\n\t\t\t\tprimaryMonitor.whichMonitor = \"primary\";\r\n\t\t\t\tprimaryMonitor.position = 0;\r\n\t\t\t\tif (System.container !== \"Electron\") {\r\n\t\t\t\t\tprimaryMonitor.deviceScaleFactor = this.calculateMonitorScale(primaryMonitor.monitor.dipRect, primaryMonitor.monitor.scaledRect);\r\n\t\t\t\t}\r\n\t\t\t\tthis.allMonitors.push(primaryMonitor);\r\n\t\t\t} else {\r\n\t\t\t\t// If there is no primary monitor, then the system is still in the process of updating the monitor information,\r\n\t\t\t\t// so we can return and wait for the next monitor change event comes in.\r\n\t\t\t\tLogger.System.info(\"There is no primary monitor in 'monitorInfo' - the system is still in the process of updating the monitor information. Returning from monitorsAndScaling -> refreshMonitors\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0; i < monitorInfo.nonPrimaryMonitors.length; i++) {\r\n\t\t\t\tlet monitor = monitorInfo.nonPrimaryMonitors[i];\r\n\t\t\t\tif(System.container !== \"Electron\") {\r\n\t\t\t\t\tmonitor.deviceScaleFactor = this.calculateMonitorScale(monitor.monitor.dipRect, monitor.monitor.scaledRect);\r\n\t\t\t\t}\r\n\t\t\t\tmonitor.whichMonitor = i;\r\n\t\t\t\tmonitor.position = i + 1;\r\n\t\t\t\tthis.allMonitors.push(monitor);\r\n\t\t\t}\r\n\t\t\tfor (let i = 0; i < this.allMonitors.length; i++) {\r\n\t\t\t\tlet monitor = this.allMonitors[i];\r\n\t\t\t\tthis.rationalizeMonitor(monitor);\r\n\t\t\t}\r\n\t\t\tthis.cachedMonitorInfo = monitorInfo;\r\n\t\t\tcb(this.allMonitors);\r\n\t\t\tthis.ready = true;\r\n\t\t\tthis.emit(\"monitors-changed\", {\r\n\t\t\t\tmonitors: this.allMonitors,\r\n\t\t\t\tmonitorsChanged\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Gets All Monitors.\r\n\t * @param {*} cb\r\n\t */\r\n\tgetAllMonitors(cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tif (cb) this.refreshMonitors(cb);\r\n\t\t\telse return \"not ready\";\r\n\t\t} else {\r\n\t\t\treturn this.asyncIt(this.allMonitors, cb);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the monitor on which the point is or null if not on any monitor. This assumes scaled dimensions for the monitor (For example from electron or WPF directly).\r\n\t * @param {*} x\r\n\t * @param {*} y\r\n\t * @param {*} cb\r\n\t */\r\n\tgetMonitorFromScaledXY(x, y, cb = Function.prototype) {\r\n\t\tlet promiseResolver = (resolve) => {\r\n\t\t\tif (!this.ready) {\r\n\t\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\t\tthis.getMonitorFromScaledXY(x, y, cb);\r\n\t\t\t\t});\r\n\t\t\t\t//This will recursively call until we have monitors.\r\n\t\t\t\treturn \"not ready\";\r\n\t\t\t}\r\n\t\t\tlet theMonitor = null;\r\n\t\t\tvar monitors = this.allMonitors;\r\n\t\t\tfor (var i = 0; i < monitors.length; i++) {\r\n\t\t\t\tvar monitor = monitors[i];\r\n\t\t\t\tvar monitorRect = monitor.monitorRect;\r\n\t\t\t\t// Are our coordinates inside the monitor? Note that\r\n\t\t\t\t// left and top are inclusive. right and bottom are exclusive\r\n\t\t\t\t// In OpenFin, two adjacent monitors will share a right and left pixel value!\r\n\t\t\t\tif (x >= monitorRect.left && x < monitorRect.right &&\r\n\t\t\t\t\ty >= monitorRect.top && y < monitorRect.bottom) {\r\n\t\t\t\t\ttheMonitor = monitor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresolve(theMonitor);\r\n\t\t\tcb(theMonitor);\r\n\t\t};\r\n\t\treturn new Promise(promiseResolver);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the monitor on which the point is or null if not on any monitor. This assumes unscaled positions of x,y (for example from windows API).\r\n\t *\r\n\t * @param {any} x\r\n\t * @param {any} y\r\n\t * @param {any} [cb=function () { }]\r\n\t * @returns monitor if found or null\r\n\t * @memberof Monitors\r\n\t */\r\n\tgetMonitorFromUnscaledXY(x, y, cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\tthis.getMonitorFromUnscaledXY(x, y, cb);\r\n\t\t\t});\r\n\t\t\treturn \"not ready\";\r\n\t\t}\r\n\t\tvar monitors = this.allMonitors;\r\n\t\tfor (var i = 0; i < monitors.length; i++) {\r\n\t\t\tvar monitor = monitors[i];\r\n\t\t\tvar monitorRect = monitor.monitor.scaledRect;\r\n\t\t\tif (x >= monitorRect.left && x < monitorRect.right &&\r\n\t\t\t\ty >= monitorRect.top && y < monitorRect.bottom) {\r\n\t\t\t\treturn this.asyncIt(monitor, cb);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.asyncIt(null, cb);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts Point from scaled (e.g. from OpenFin/WPF) to unscaled (e.g. to give Windows API) position\r\n\t *\r\n\t * @param {any} point\r\n\t * @param {any} [cb=function () { }]\r\n\t * @returns monitor if found or null\r\n\t * @memberof Monitors\r\n\t */\r\n\tasync translatePointFromScaled(params, cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\tthis.translatePointFromScaled(params, cb);\r\n\t\t\t});\r\n\t\t\treturn \"not ready\";\r\n\t\t}\r\n\t\tvar point;\r\n\t\tif (params.point) point = params.point;\r\n\t\telse point = params;\r\n\t\tvar monitor = params.monitor;\r\n\t\tif (!monitor) {\r\n\t\t\tlet result = await this.getMonitorFromScaledXY(point.x, point.y);\r\n\t\t\tmonitor = result.data;\r\n\t\t}\r\n\r\n\t\tlet unscaledPoint = null;\r\n\t\tif (monitor) {\r\n\t\t\tvar relativeX = point.x - monitor.monitorRect.left;\r\n\t\t\tvar relativeY = point.y - monitor.monitorRect.top;\r\n\t\t\tvar unscaledRelativeX = relativeX * monitor.deviceScaleFactor;\r\n\t\t\tvar unscaledRelativeY = relativeY * monitor.deviceScaleFactor;\r\n\t\t\tunscaledPoint = {\r\n\t\t\t\tx: unscaledRelativeX + monitor.monitor.scaledRect.left,\r\n\t\t\t\ty: unscaledRelativeY + monitor.monitor.scaledRect.top\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcb(unscaledPoint);\r\n\t\treturn Promise.resolve(unscaledPoint);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts Point to scaled (e.g. from OpenFin/WPF) from unscaled (e.g. to give Windows API) position\r\n\t *\r\n\t * @param {any} point\r\n\t * @param {any} [cb=function () { }]\r\n\t * @returns point if on monitor or null\r\n\t * @memberof Monitors\r\n\t */\r\n\ttranslatePointToScaled(params, cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\tthis.translatePointToScaled(params, cb);\r\n\t\t\t});\r\n\t\t\treturn \"not ready\";\r\n\t\t}\r\n\t\tvar point;\r\n\t\tif (params.point) point = params.point;\r\n\t\telse point = params;\r\n\t\tvar monitor = params.monitor || this.getMonitorFromUnscaledXY(point.x, point.y);\r\n\t\tif (!monitor) return this.asyncIt(null, cb);\r\n\t\tvar relativeX = point.x - monitor.monitor.scaledRect.left;\r\n\t\tvar relativeY = point.y - monitor.monitor.scaledRect.top;\r\n\t\tvar scaledRelativeX = relativeX / monitor.deviceScaleFactor;\r\n\t\tvar scaledRelativeY = relativeY / monitor.deviceScaleFactor;\r\n\t\tvar scaledPoint = {\r\n\t\t\tx: scaledRelativeX + monitor.monitorRect.left,\r\n\t\t\ty: scaledRelativeY + monitor.monitorRect.top\r\n\t\t};\r\n\t\treturn this.asyncIt(scaledPoint, cb);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts Rectangle (top, left, bottom, right) from unscaled to scaled. Mainly for use to translate window locations to/from Windows API.\r\n\t *\r\n\t * @param {any} rect\r\n\t * @param {any} [cb=function () { }]\r\n\t * @returns rect\r\n\t * @memberof Monitors\r\n\t */\r\n\tasync translateRectToScaled(rect, cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\tthis.translateRectToScaled(rect, cb);\r\n\t\t\t});\r\n\t\t\treturn \"not ready\";\r\n\t\t}\r\n\t\tvar topLeft = this.translatePointToScaled({ x: rect.left, y: rect.top });\r\n\t\tvar bottomRight = this.translatePointToScaled({ x: rect.right, y: rect.bottom });\r\n\t\tif (!topLeft && bottomRight) {\r\n\t\t\tmonitor = await this.getMonitorFromScaledXY(bottomRight);\r\n\t\t\ttopLeft = this.translatePointToScaled({\r\n\t\t\t\tmonitor,\r\n\t\t\t\tpoint: { x: rect.left, y: rect.top }\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (!bottomRight && topLeft) {\r\n\t\t\tmonitor = await this.getMonitorFromScaledXY(bottomRight);\r\n\t\t\tbottomRight = this.translatePointToScaled({\r\n\t\t\t\tmonitor,\r\n\t\t\t\tpoint: { x: rect.right, y: rect.bottom }\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this.asyncIt({\r\n\t\t\ttop: topLeft ? topLeft.y : null,\r\n\t\t\tleft: topLeft ? topLeft.x : null,\r\n\t\t\tbottom: bottomRight ? bottomRight.y : null,\r\n\t\t\tright: bottomRight ? bottomRight.x : null,\r\n\t\t\theight: (topLeft && bottomRight) ? bottomRight.y - topLeft.y : null,\r\n\t\t\twidth: (topLeft && bottomRight) ? bottomRight.x - topLeft.x : null\r\n\t\t}, cb);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts Rectangle (top, left, bottom, right) to unscaled from scaled. Mainly for use to translate window locations to/from Windows API.\r\n\t *\r\n\t * @param {any} rect\r\n\t * @param {any} [cb=function () { }]\r\n\t * @returns rect\r\n\t * @memberof Monitors\r\n\t */\r\n\ttranslateRectFromScaled(rect, cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\tthis.translateRectFromScaled(rect, cb);\r\n\t\t\t});\r\n\t\t\treturn \"not ready\";\r\n\t\t}\r\n\t\tvar topLeft = this.translatePointFromScaled({ x: rect.left, y: rect.top });\r\n\t\tvar bottomRight = this.translatePointFromScaled({ x: rect.right, y: rect.bottom });\r\n\t\tif (!topLeft && bottomRight) {\r\n\t\t\ttopLeft = this.translatePointFromScaled({\r\n\t\t\t\tmonitor: this.getMonitorFromUnscaledXY(bottomRight),\r\n\t\t\t\tpoint: { x: rect.left, y: rect.top }\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (!bottomRight && topLeft) {\r\n\t\t\tbottomRight = this.translatePointFromScaled({\r\n\t\t\t\tmonitor: this.getMonitorFromUnscaledXY(topLeft),\r\n\t\t\t\tpoint: { x: rect.right, y: rect.bottom }\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this.asyncIt({\r\n\t\t\ttop: topLeft ? topLeft.y : null,\r\n\t\t\tleft: topLeft ? topLeft.x : null,\r\n\t\t\tbottom: bottomRight ? bottomRight.y : null,\r\n\t\t\tright: bottomRight ? bottomRight.x : null,\r\n\t\t\theight: (topLeft && bottomRight) ? bottomRight.y - topLeft.y : null,\r\n\t\t\twidth: (topLeft && bottomRight) ? bottomRight.x - topLeft.x : null\r\n\t\t}, cb);\r\n\t}\r\n}\r\nexport default Monitors;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/monitorsAndScaling.js","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n// This routerTransport module is shared between router clients and the router service.  It supports\n// the addition of new transports without any change to the router code. Each transport is\n// point-to-point between a router client and the router service (i.e. hub and spoke).  Each router\n// client can use a different transport (i.e. the router service connects to them all).\n\n\"use strict\";\n\nimport { ConfigUtilInstance as ConfigUtils } from \"./configUtil\";\nimport Logger from \"../clients/logger\";\nimport { System } from \"../common/system\";\n\n/**\n * @introduction\n * <h2>Router Transport</h2>\n * **Service-Level Module**.  Manages and contains the point-to-point transports (i.e., Layer 2) supported by Finsemble.\n * Each transport communicates between a Finsemble services or component (i.e. a router client on one end) and the Finsemble router service (another router client on the other end).\n *\n * Integration into routerService.js is automatic on startup.\n *\n * Developer Notes on Adding New Transport:\n * 1) Create new transport constructor.\n * 2) Call RouterTransport.addTransport() to make the transport constructor (see the bottom of this file)\n *\n * Each transport constructor must be implemented with the following interface:\n *\n *\tExampleTransportConstructor(params, parentMessageHandler, source, destination) where\n *\n * \t\t\tparams is a passed in object including data that may (or may not) be needed for implementing the transport\n * \t\t\t\t\tparams.FinsembleUUID: globally unique identifier for Finsemble (one per host machine)\n *\t\t\t\t\tparams.applicationRoot:  value of manifest.finsemble.applicationRoot,\n *\t\t\t\t\tparams.routerDomainRoot: value of manifest.finsemble.moduleRoot,\n *\t\t\t\t\tparams.sameDomainTransport: transport to use for same domain clients\n *\t\t\t\t\tparams.crossDomainTransport: transport to use for cross domain clients\n *\t\t\t\t\tparams.transportSettings: transport settings from finsemble.router.transportSettings if defined, otherwise an empty object\n *\n * \t\t\tparentMessageHandler(incomingTransportInfo, routerMessage) where\n * \t\t\t\t\tincomingTransportInfo is a transport-specific object containing essential information to route back to the same client.\n * \t\t\t\t\t\tThe same object will be returned on a send() so the transport can use to send the message to that client.\n * \t\t\t\t\t\tIt's up to the developer to decide what to put in the incomingTransportInfo object. The RouterService never\n * \t\t\t\t\t\tdirectly uses the object, except to do a property-based comparison for equality (so equality must be based on the top-level properties within the object.)\n * \t\t\t\t\trouterMessage is an object containing a single router message. The transport generally does not need to know the contents --\n * \t\t\t\t\t\tit only sends and receives these messages. However, the router's header (routerMessage.header) is available to the transport if needed.\n *\n * \t\t\tsource is either the source's client name or \"RouterService\" (when the RouterService is the source)\n *\n * \t\t\tdestination is either the destination's client name or \"RouterService\" (when the RouterService is the designation)\n *\n * \t\t\tcallback(this) returns the constructor.  Normally a constructor is not asynchronous, but support in case the constructed transport requires async initialization.\n *\n * The transport constructor must implement two functions.\n * \t\t1) send(transport, routerMessage) -- transport object contains destination transport info; routerMessage is the message to send\n * \t\t2) identifier() -- returns transport's name\n *\n * These functions along with the parentMessageHandler callback all that's needed to interface with the higher-level router (either a client or router service):\n *\n * The three transports implemented at the bottom of this file can serve as examples.\n *\n * @namespace RouterTransport\n */\nvar RouterTransport = {\n\n\tactiveTransports: {},\n\n\t/**\n\t * Adds a new type of router transport to pass message between RouterClient and RouterService.\n\t *\n\t * @param {string} transportName identifies the new transport\n\t * @param {object} transportConstructor returns an instance of the new transport\n\t */\n\taddTransport: function (transportName, transportConstructor) {\n\t\tthis.activeTransports[transportName] = transportConstructor;\n\t\tLogger.system.log(`RouterTransport ${transportName} added to activeTransports`);\n\t},\n\n\t/**\n\t * Gets array of active transports.  What is active depends both on config and what is supported by the environment. Typically, if OF IAB is defined then the IAB transport is added to active list.  Likewise, if SharedWorker defined, then SharedWork transport added to the active list.  Special transports that don't have backwards compatibility (e.g. FinsembleTransport) are only added if specified in the config.\n\t *\n\t * @param {string} params transport parameters\n\t *\n\t * @returns array of active transport names\n\t */\n\tgetActiveTransports: function (params) {\n\t\tvar transportNames = [];\n\n\t\t// convenience function to add transport to active list only if it's not already in the list\n\t\tfunction addToActive(transportName) {\n\t\t\tif (transportNames.indexOf(transportName) === -1) { // if not already in the list, then add it\n\t\t\t\ttransportNames.push(transportName);\n\t\t\t}\n\t\t}\n\n\t\t// if IPCBus available, then add IAB to active list\n\t\tif (System.InterApplicationBus) addToActive(\"IPCBus\");\n\n\t\t// If electron, always have FinsembleTransport active\n\t\tif (System.container === \"Electron\") addToActive(\"FinsembleTransport\");\n\n\t\t// if shared worker available, then add shared-worker transport to active list\n\t\tif (SharedWorker) addToActive(\"SharedWorker\");\n\n\t\t// add whatever the sameDomainTransport is to the active list\n\t\taddToActive(params.sameDomainTransport);\n\n\t\t// add whatever the crossDomainTransport is to the active list\n\t\taddToActive(params.crossDomainTransport);\n\n\t\tLogger.system.log(\"getActiveTransports\", transportNames);\n\t\treturn transportNames;\n\t},\n\n\t/**\n\t * Get default transport for event router - this is the most reliable transport across all contexts.\n\t *\n \t * @param {object} params parameters for transport\n\t * @param {any} incomingMessageHandler\n\t * @param {any} source\n\t * @param {any} destination\n\t * @returns the transport object\n\t */\n\tgetDefaultTransport: function (params, incomingMessageHandler, source, destination) {\n\t\treturn RouterTransport.getTransport(params, \"IPCBus\", incomingMessageHandler, source, destination);\n\t},\n\n\t/**\n\t * Get best client transport based on the run-time context. Will only return cross-domain transport if current context is inter-domain.\n\t *\n \t * @param {object} params parameters for transport\n\t * @param {any} incomingMessageHandler\n\t * @param {any} source\n\t * @param {any} destination\n\t * @returns the transport object\n\t */\n\tgetRecommendedTransport: function (params, incomingMessageHandler, source, destination) {\n\n\t\t// returns true if this window's location is in another domain\n\t\tfunction crossDomain() {\n\t\t\tvar parser = document.createElement(\"a\");\n\t\t\tparser.href = params.routerDomainRoot;\n\n\t\t\tvar isSameHost = (window.location.hostname === parser.hostname);\n\n\t\t\tvar isSameProtocol = (window.location.protocol === parser.protocol);\n\n\t\t\tvar wport = (window.location.port !== undefined) ? window.location.port : 80;\n\t\t\tvar pport = (parser.port !== undefined) ? parser.port : 80;\n\t\t\tvar isSamePort = (wport === pport);\n\n\t\t\tvar isCrossDomain = !(isSameHost && isSamePort && isSameProtocol);\n\t\t\tLogger.system.debug(\"Transport crossDomain=\" + isCrossDomain + \" (\" + isSameHost + \":\" + isSameProtocol + \":\" + isSamePort + \")\");\n\t\t\treturn isCrossDomain;\n\t\t}\n\n\t\t// returns name of the best transport for communicating with router service\n\t\tfunction recommendedTransportName() {\n\t\t\tvar sameDomainTransport = params.sameDomainTransport;\n\t\t\tvar crossDomainTransport = params.crossDomainTransport;\n\n\t\t\tvar selectedTransport = sameDomainTransport;\n\t\t\tif (crossDomain()) {\n\t\t\t\tselectedTransport = crossDomainTransport;\n\t\t\t}\n\n\t\t\tLogger.system.log(`Transport Info: Selected=${selectedTransport} SameDomainDefault=${sameDomainTransport} CrossDomainDefault=${crossDomainTransport}`);\n\t\t\tconsole.log(`Transport Info: Selected=${selectedTransport} SameDomainDefault=${sameDomainTransport} CrossDomainDefault=${crossDomainTransport}`);\n\n\t\t\treturn selectedTransport;\n\t\t}\n\n\t\tvar transportName = recommendedTransportName();\n\t\treturn RouterTransport.getTransport(params, transportName, incomingMessageHandler, source, destination);\n\t},\n\n\t/**\n\t * Get a specific transport by name. The transport must be in list of the active transports (i.e. previously added).\n\t *\n \t * @param {object} params parameters for transport\n\t * @param {any} transportName\n\t * @param {any} incomingMessageHandler\n\t * @param {any} source\n\t * @param {any} destination\n\t * @returns the transport object\n\t */\n\tgetTransport: function (params, transportName, incomingMessageHandler, source, destination) {\n\t\tvar self = this;\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tvar transportConstructor = self.activeTransports[transportName];\n\t\t\tif (transportConstructor) {\n\t\t\t\tnew transportConstructor(params, incomingMessageHandler, source, destination, function (newTransport) {\n\t\t\t\t\tresolve(newTransport);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject(\"unknown router transport name: \" + transportName);\n\t\t\t}\n\t\t});\n\t}\n};\n\n//////////////////////////////////////////////////////////////\n// Below all transports are defined then added to active list\n//////////////////////////////////////////////////////////////\n\nvar RouterTransportImplementation = {}; // a convenience namespace for router-transport implementations\n\n/*\n * Implements the SharedWorker Transport.\n *\n * Required Functions (used by transport clients):\n * \t\tsend(routerMessage) -- transports the event\n * \t\tidentifier() -- returns transport name/identifier\n *\n * @param {object} params various params to support transports\n * @param {any} parentMessageHandler callback for incoming event\n * @param {any} source either the client name or \"RouterService\"\n * @param {any} destination either the client name or \"RouterService\" (unused in SharedWorker)\n */\nRouterTransportImplementation.SharedWorkerTransport = function (params, parentMessageHandler, source, destination, callback) {\n\tvar routerThread;\n\tvar self = this;\n\n\n\t// receives incoming shared-worker messages then passes on to parent with correct \"wrapper\"\n\tfunction sharedWorkerMessageHandler(swMessage) {\n\t\tvar port = swMessage.data[0];\n\t\tvar routerMessage = swMessage.data[1];\n\t\tvar incomingTransportInfo = { \"transportID\": self.identifier(), \"port\": port };\n\t\tLogger.system.verbose(\"SharedWorkerTransport Incoming Transport\", incomingTransportInfo, \"Message\", routerMessage);\n\t\tparentMessageHandler(incomingTransportInfo, routerMessage);\n\t}\n\n\t//required function for parent (i.e. routeClient or routeService)\n\tthis.send = function (transport, routerMessage) {\n\t\t// handle optional transport parm\n\t\tif (arguments.length === 1) {  // clients use just one parm -- routerMessage\n\t\t\trouterMessage = arguments[0];\n\t\t\ttransport = null;\n\t\t} else { // router services uses both parameters\n\t\t\ttransport = arguments[0];\n\t\t\trouterMessage = arguments[1];\n\t\t}\n\t\tLogger.system.verbose(\"SharedWorkerTransport Outgoing Transport\", routerMessage);\n\n\t\ttry {\n\t\t\trouterThread.port.postMessage([transport, routerMessage]);\n\t\t}\n\t\tcatch (e) {\n\t\t\tLogger.system.error(\"SharedWorkerTransport: post message failed: \" + JSON.stringify(e), \"Probable cause is sending illegal data type (e.g. function).\");\n\t\t}\n\t};\n\n\t//required function for parent (i.e. routeClient or routeService)\n\tthis.identifier = function () {\n\t\treturn \"SharedWorker\";\n\t};\n\n\tvar workerPath = (params.transportSettings.SharedWorker && params.transportSettings.SharedWorker.workerPath) ?\n\t\tparams.transportSettings.SharedWorker.workerPath : params.routerDomainRoot + \"/common/routerSharedWorker.js\";\n\n\tLogger.system.log(`SharedWorker Transport Initializing for ${source} using ${workerPath}`);\n\tconsole.log(`SharedWorker Transport Initializing for ${source} using ${workerPath}`);\n\n\trouterThread = new SharedWorker(workerPath, { name: \"Finsemble\", credentials: \"included\" });\n\trouterThread.port.onmessage = sharedWorkerMessageHandler;\n\trouterThread.onerror = function (e) {\n\t\tLogger.system.error(\"SharedWorkerTransport Transport Error\" + JSON.stringify(e));\n\t};\n\trouterThread.port.start();\n\n\tif (source === \"RouterService\") {  // send first message though shared worker to identify router service\n\t\trouterThread.port.postMessage({ data: \"connect\", source: \"RouterService\" });\n\t}\n\n\tcallback(this);\n};\n\n/*\n * Implements the IPC Bus Transport.\n *\n * Required Functions (used by transport clients):\n * \t\tsend(transport, routerMessage) -- transport object contains destination transport info; routerMessage is the message to send\n * \t\tidentifier() -- returns transport's name\n *\n * @param {object} params unused in IPC transport\n * @param {any} parentMessageHandler callback for incoming event\n * @param {any} source either the client name or \"RouterService\"\n * @param {any} destination either the client name or \"RouterService\"\n */\nRouterTransportImplementation.IPCTransport = function (params, parentMessageHandler, source, destination, callback) {\n\tvar uuid = System.Application.getCurrent().uuid;\n\tvar self = this;\n\n\t// receives incoming OpenFin bus messages then passes on to parent with correct \"wrapper\"\n\tfunction messageHandler(routerMessage, senderUuid) {\n\t\tvar incomingTransportInfo = { \"transportID\": self.identifier(), \"senderUuid\": senderUuid, \"name\": routerMessage.header.origin };\n\t\tLogger.system.verbose(\"IPCTransport Incoming Transport\", incomingTransportInfo, \"Message\", routerMessage);\n\t\tparentMessageHandler(incomingTransportInfo, routerMessage);\n\t}\n\n\tfunction subscribeFailure(reason) {\n\t\tLogger.system.error(\"IPCBus Subscribe Failure: \" + reason);\n\t}\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.send = function (transport, routerMessage) {\n\t\tvar destTopic;\n\n\t\t// handle optional transport parm\n\t\tif (arguments.length === 1) { // client use just one parameter - routerMessage\n\t\t\tdestTopic = destination;\n\t\t\trouterMessage = arguments[0];\n\t\t} else { // router service uses both parameters\n\t\t\tdestTopic = transport.name;\n\t\t\trouterMessage = arguments[1];\n\t\t}\n\n\t\tLogger.system.verbose(\"IPCTransport Outgoing Transport\", uuid, destTopic, \"Message\", routerMessage);\n\t\tSystem.InterApplicationBus.publish(destTopic, routerMessage,\n\t\t\tfunction () { }, function (err) { });\n\t};\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.identifier = function () {\n\t\treturn \"IPCBus\";\n\t};\n\n\tLogger.system.log(`IPCBus Transport Initializing for ${source}`);\n\tconsole.log(`IPCBus Transport Initializing for ${source}`);\n\tSystem.InterApplicationBus.subscribe(\"*\", source, messageHandler, null, subscribeFailure);\n\n\tcallback(this);\n};\n\n/*\n * Implements the FinsembleTransport (alternative to IAB without iFrame problems with supporting server commonly running on local server).\n *\n * Required Functions (used by transport clients):\n * \t\tsend(event) -- transports the event\n * \t\tidentifier() -- returns transport name/identifier\n *\n * @param {object} params various params to support transports\n * @param {any} parentMessageHandler callback for incoming event\n * @param {any} source either the client name or \"RouterService\"\n * @param {any} destination either the client name or \"RouterService\" (unused in FinsembleTransport)\n */\nRouterTransportImplementation.FinsembleTransport = function (params, parentMessageHandler, source, destination, callback) {\n\tconst defaultServerAddress = \"ws://127.0.0.1:3376\";\n\tconst IACServerAddress = ConfigUtils.getDefault(params, \"params.IAC.serverAddress\", defaultServerAddress);\n\tconst serverAddress = ConfigUtils.getDefault(params, \"params.transportSettings.FinsembleTransport.serverAddress\", IACServerAddress);\n\tconst SOCKET_SERVER_ADDRESS = serverAddress + \"/router\"; // \"router\" is the socket namespace used on server\n\n\tconst self = this;\n\n\t// receives incoming messages then passes on to parent (what's passed to parent should be same routerMessage received in send()\n\tfunction finsembleMessageHandler(routerMessage) {\n\t\tvar incomingTransportInfo = { \"transportID\": self.identifier(), \"client\": routerMessage.clientMessage.header.origin };\n\t\tLogger.system.verbose(\"FinsembleTransport Incoming Transport\", incomingTransportInfo, \"Message\", routerMessage);\n\t\tparentMessageHandler(incomingTransportInfo, routerMessage.clientMessage);\n\t}\n\n\t// Both sending and receiving is based on the following routing functionality located in a local node server (the below is a copy of the node server code)\n\t// \t\t// destination is RouterClient (message.client)\n\t//  \tclient.on('ROUTER_CLIENT', function(message) {\n\t// \t\t\trouterServer.emit(message.client, message);\n\t// \t\t});\n\t// \t\t// destination is RouterService\n\t// \t\tclient.on('ROUTER_SERVICE', function(message) {\n\t// \t\t\trouterServer.emit('ROUTER_SERVICE_IN', message);\n\t// \t\t});\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.send = function (transport, routerMessage) {\n\t\tlet dest;\n\t\tlet message;\n\n\t\t// decide how to route the message based on whether client or routerService is sending\n\t\tif (arguments.length === 1) { // clients use just one parameter, so send client message to RouterService\n\t\t\tdest = \"ROUTER_SERVICE\";\n\t\t\trouterMessage = arguments[0];\n\t\t\tmessage = { clientMessage: routerMessage };  // no client property needed to route on server since always going to router service\n\n\t\t} else { // router service uses both parameters, so send router-service message to a client\n\t\t\tdest = \"ROUTER_CLIENT\";\n\t\t\trouterMessage = arguments[1];\n\t\t\tmessage = { client: transport.client, clientMessage: routerMessage }; // client property used to router on server\n\t\t}\n\n\t\tLogger.system.verbose(\"FinsembleTransport Outgoing Transport\", dest, \"NewMessage\", message);\n\t\trouterServerSocket.send(JSON.stringify({ dest, message }));\n\t};\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.identifier = function () {\n\t\treturn \"FinsembleTransport\";\n\t};\n\n\tLogger.system.log(`FinsembleTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);\n\tconsole.log(`FinsembleTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);\n\n\tfunction connectTimeoutHandler() {\n\t\tLogger.system.error(`FinsembleTransport Connection Timeout for ${source}`);\n\t\tcallback(self);\n\t}\n\n\t// set up for receiving incoming messages\n\tvar routerServerSocket;\n\tif (SOCKET_SERVER_ADDRESS.startsWith(\"ws:\") || SOCKET_SERVER_ADDRESS.startsWith(\"wss:\")) {\n\t\trouterServerSocket = new WebSocket(SOCKET_SERVER_ADDRESS);\n\t} else {\n\t\tconsole.error(\"wss not found as SOCKET_SERVER_ADDRESS.  Use wss!\", SOCKET_SERVER_ADDRESS);\n\t\trouterServerSocket = new WebSocket(SOCKET_SERVER_ADDRESS);\n\t}\n\tvar connectTimer = setTimeout(connectTimeoutHandler, 3000); // cleared in setServiceOnline\n\n\trouterServerSocket.addEventListener(\"open\", () => {\n\t\tclearTimeout(connectTimer);\n\t\tLogger.system.log(\"FinsembleTransport Connected to Server\");\n\t\tconsole.log(\"FinsembleTransport Connected to Server\");\n\t\t// TODO: Currently all messages are broadcast to everyone and filtering happens here. Need to implement a system similar to socket.io to prevent this or only send messages to proper destinations.\n\t\trouterServerSocket.addEventListener(\"message\", (event) => {\n\t\t\tlet data = JSON.parse(event.data);\n\t\t\tif (source === \"RouterService\" && data.dest == \"ROUTER_SERVICE\") {\n\t\t\t\tfinsembleMessageHandler(data.message);\n\t\t\t} else if (source === data.message.client) {\n\t\t\t\tfinsembleMessageHandler(data.message);\n\t\t\t}\n\t\t});\n\t\tcallback(self);\n\t});\n\n};\n\n\n/*\n * Implements the FinsembleCloudTransport (a version of FinsembleTransport with server commonly running on remote server).\n *\n * Required Functions (used by transport clients):\n * \t\tsend(event) -- transports the event\n * \t\tidentifier() -- returns transport name/identifier\n *\n * @param {object} params various params to support transports\n * @param {any} parentMessageHandler callback for incoming event\n * @param {any} source either the client name or \"RouterService\"\n * @param {any} destination either the client name or \"RouterService\" (unused in FinsembleCloudTransport)\n */\nRouterTransportImplementation.FinsembleCloudTransport = function (params, parentMessageHandler, source, destination, callback) {\n\tvar serverAddress;\n\tvar defaultAddress = ConfigUtils.getDefault(params, \"params.transportSettings.FinsembleCloudTransport.serverAddress\", params.applicationRoot);\n\tvar FinsembleUUID = params.FinsembleUUID;\n\n\tif (defaultAddress.substr(defaultAddress.length - 1) === \"/\") {\n\t\tserverAddress = defaultAddress.substring(0, defaultAddress.length - 1); // truncate and trailing slash because it causes problem with socket.io namespace\n\t} else {\n\t\tserverAddress = defaultAddress;\n\t}\n\n\tconst SOCKET_SERVER_ADDRESS = serverAddress + \"/router\"; // \"router\" is the socket namespace used on server\n\n\tvar self = this;\n\n\t// receives incoming messages then passes on to parent (what's passed to parent should be same routerMessage received in send()\n\tfunction finsembleMessageHandler(routerMessage) {\n\t\tvar incomingTransportInfo = { \"transportID\": self.identifier(), \"client\": routerMessage.clientMessage.header.origin };\n\t\tLogger.system.verbose(\"FinsembleCloudTransport Incoming Transport\", incomingTransportInfo, \"Message\", routerMessage);\n\t\tparentMessageHandler(incomingTransportInfo, routerMessage.clientMessage);\n\t}\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.send = function (transport, routerMessage) {\n\t\tvar dest;\n\t\tvar newMessage;\n\n\t\t// decide how to route the message based on whether client or routerService is sending\n\t\tif (arguments.length === 1) { // clients use just one parameter, so send client message to RouterService\n\t\t\tdest = \"ROUTER_SERVICE\";\n\t\t\trouterMessage = arguments[0];\n\t\t\tnewMessage = { FinsembleUUID, clientMessage: routerMessage };  // no client property needed to route on server since always going to router service\n\n\t\t} else { // router service uses both parameters, so send router-service message to a client\n\t\t\tdest = \"ROUTER_CLIENT\";\n\t\t\trouterMessage = arguments[1];\n\t\t\tnewMessage = { FinsembleUUID, client: transport.client, clientMessage: routerMessage }; // client property used to router on server\n\t\t}\n\n\t\tLogger.system.verbose(\"FinsembleCloudTransport Outgoing Transport\", dest, \"NewMessage\", newMessage);\n\t\trouterServerSocket.emit(dest, newMessage);\n\t};\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.identifier = function () {\n\t\treturn \"FinsembleCloudTransport\";\n\t};\n\n\tLogger.system.log(`FinsembleCloudTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);\n\tconsole.log(`FinsembleCloudTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);\n\n\tfunction connectTimeoutHandler() {\n\t\tLogger.system.error(`FinsembleCloudTransport Connection Timeout for ${source}`);\n\t\tcallback(self);\n\t}\n\n\t// set up for receiving incoming messages\n\tvar routerServerSocket;\n\tif (SOCKET_SERVER_ADDRESS.indexOf(\"ws:\") !== -1) {\n\t\trouterServerSocket = new ws(SOCKET_SERVER_ADDRESS);\n\t} else {\n\t\tconsole.error(\"SOCKET_SERVER_ADDRESS not wss!\", SOCKET_SERVER_ADDRESS);\n\t\trouterServerSocket = new ws(SOCKET_SERVER_ADDRESS); // if not ws then http\n\t}\n\tvar connectTimer = setTimeout(connectTimeoutHandler, 3000); // cleared in setServiceOnline\n\n\trouterServerSocket.on(\"connect\", function () {\n\t\tclearTimeout(connectTimer);\n\t\tLogger.system.log(\"FinsembleCloudTransport Connected to Server\", FinsembleUUID);\n\t\tconsole.log(\"FinsembleCloudTransport Connected to Server\");\n\t\tif (source === \"RouterService\") {\n\t\t\t// if this transport is for router service, use hard coded socket address (\"ROUTER_SERVICE_IN\") along with FinsembleUUID\n\t\t\tLogger.system.debug(\"Setting Up Socket Connection\", \"ROUTER_SERVICE_IN\" + FinsembleUUID);\n\t\t\tconsole.log(\"Setting Up Socket Connection\", \"ROUTER_SERVICE_IN\" + FinsembleUUID);\n\t\t\trouterServerSocket.on(\"ROUTER_SERVICE_IN\" + FinsembleUUID, function (data) {\n\t\t\t\tfinsembleMessageHandler(data);\n\t\t\t});\n\t\t} else {\n\t\t\t// for all other clients, the source == client name, so each socket address is based on client name along with FinsembleUUID\n\t\t\tLogger.system.debug(\"Setting Up Socket Connection\", source + FinsembleUUID);\n\t\t\tconsole.log(\"SETTING UP Socket CONNECTION\", source + FinsembleUUID);\n\t\t\trouterServerSocket.on(source + FinsembleUUID, function (data) {\n\t\t\t\tfinsembleMessageHandler(data);\n\t\t\t});\n\t\t}\n\t\tcallback(self);\n\t});\n\n};\n\n// add the transports to the available/active list\nRouterTransport.addTransport(\"SharedWorker\", RouterTransportImplementation.SharedWorkerTransport);\nRouterTransport.addTransport(\"IPCBus\", RouterTransportImplementation.IPCTransport);\nRouterTransport.addTransport(\"FinsembleTransport\", RouterTransportImplementation.FinsembleTransport);\n\nexport default RouterTransport;\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/routerTransport.js","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/timers-browserify/main.js\n// module id = 29\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n\"use strict\";\nimport RouterTransport from \"../common/routerTransport\";\nimport * as Utils from \"../common/util\";\nimport { ConfigUtilInstance as ConfigUtil } from \"../common/configUtil\";\nimport Validate from \"../common/validate\"; // Finsemble args validator\nimport UserNotification from \"../common/userNotification\";\nimport { System } from \"../common/system\";\nimport { Logger as _Logger } from \"./logger\";\nvar queue = []; // should never be used, but message sent before router ready will be queue\n/** The global `window` object. We cast it to a specific interface here to be\n * explicit about what Finsemble-related properties it may have. */\nimport { IGlobals } from \"../common/Globals\";\nconst Globals = typeof window !== \"undefined\"\n\t? window as IGlobals\n\t: process as any as IGlobals;\n\nimport { ICentralLogger } from \"./ICentralLogger\";\nimport { LocalLogger } from \"../clients/localLogger\";\nlet Logger: ICentralLogger = _Logger;\n//@todo proper types for router messages would be great.\n\n// Use global data for these objects in case multiple clients running in same window (a side effect of injection and perhaps other edge conditions).\nGlobals.FSBLData = Globals.FSBLData || {};\nGlobals.FSBLData.clientIDCounter = Globals.FSBLData.clientIDCounter || 1000;\nGlobals.FSBLData.RouterClients = Globals.FSBLData.RouterClients || {};\n\n/**\n * @introduction\n *\n * <h2>Router Client</h2>\n *\n * The Router Client sends and receives event messages between Finsemble components and services. See the <a href=tutorial-TheRouter.html>Router tutorial</a> for an overview of the Router's functionality.\n *\n * Router callbacks for incoming messages are **always** in the form `callback(error, event)`. If `error` is null, then the incoming data is always in `event.data`. If `error` is set, it contains a diagnostic object and message. On error, the `event` parameter is not undefined.\n *\n *\n * @constructor\n * @hideconstructor\n * @publishedName RouterClient\n * @param {string} clientName router base client name for human readable messages (window name is concatenated to baseClientName)\n * @param {string=} transportName router transport name, currently either \"SharedWorker\" or \"IPCBus\" (usually this is auto-configured internally but can be selected for testing or special configurations)\n */\n// un-comment for optimization.\n// console.time(\"FinMainStartup\");\nexport var RouterClientConstructor = function (params: { clientName: string, transportName?: string }) {\n\tValidate.args(params, \"object\") && Validate.args2(\"params.clientName\", params.clientName, \"string\", \"params.transportName\", params.transportName, \"string=\");\n\t// console.timeStamp(\"Router\");\n\t// console.profile(\"Router\");\n\n\t///////////////////////////\n\t// Private Data\n\t///////////////////////////\n\tvar baseClientName = params.clientName;\n\tvar transportName = params.transportName;\n\tvar handshakeHandler;\n\tvar timeCalibrationHandler;\n\tvar mapListeners = {};\n\tvar mapResponders = {};\n\tvar mapPubSubResponders = {};\n\tvar mapPubSubResponderState = {};\n\tvar mapPubSubResponderRegEx = {};\n\tvar pubsubListOfSubscribers = {};\n\tvar mapSubscribersID = {};\n\tvar mapSubscribersTopic = {};\n\tvar mapQueryResponses = {};\n\tvar mapQueryResponseTimeOut = {};\n\tvar clientName;\n\tvar transport = null;\n\tvar isRouterReady = false;\n\tvar parentReadyCallbackQueue = []; // must be queue because may be multiple waiters\n\tvar self = this;\n\tthis.startupTime = 0;\n\t/////////////////////////////////////////////////////////////////////\n\t// Private Message Constructors for Communicating with RouterService\n\t/////////////////////////////////////////////////////////////////////\n\n\tfunction InitialHandshakeMessage() {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"initialHandshake\",\n\t\t};\n\t}\n\tfunction TimeCalibrationHandshakeMessage(clientBaseTime, serviceBaseTime) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"timeCalibration\",\n\t\t};\n\t\tthis.clientBaseTime = clientBaseTime;\n\t\tthis.serviceBaseTime = serviceBaseTime;\n\t}\n\tfunction AddListenerMessage(channel) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"addListener\",\n\t\t\t\"channel\": channel\n\t\t};\n\t}\n\tfunction TransmitMessage(toChannel, data, options) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"transmit\",\n\t\t\t\"channel\": toChannel\n\t\t};\n\t\tthis.data = data;\n\t\tthis.options = options;\n\t}\n\tfunction RemoveListenerMessage(channel) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"removeListener\",\n\t\t\t\"channel\": channel\n\t\t};\n\t}\n\tfunction addResponderMessage(channel) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"addResponder\",\n\t\t\t\"channel\": channel\n\t\t};\n\t}\n\tfunction QueryMessage(queryID, channel, data) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"query\",\n\t\t\t\"queryID\": queryID,\n\t\t\t\"channel\": channel\n\t\t};\n\t\tthis.data = data;\n\t}\n\tfunction QueryResponseMessage(queryID, error, data) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"queryResponse\",\n\t\t\t\"queryID\": queryID,\n\t\t\t\"error\": error\n\t\t};\n\t\tthis.data = data;\n\t}\n\tfunction RemoveResponderMessage(channel) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"removeResponder\",\n\t\t\t\"channel\": channel\n\t\t};\n\t}\n\tfunction SubscribeMessage(subscribeID, topic) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"subscribe\",\n\t\t\t\"subscribeID\": subscribeID,\n\t\t\t\"topic\": topic\n\t\t};\n\t}\n\tfunction UnsubscribeMessage(subscribeID, topic) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"unsubscribe\",\n\t\t\t\"subscribeID\": subscribeID,\n\t\t\t\"topic\": topic\n\t\t};\n\t}\n\tfunction PublishMessage(topic, data) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"publish\",\n\t\t\t\"topic\": topic\n\t\t};\n\t\tthis.data = data;\n\t}\n\tfunction NotifyMessage(subscribeID, topic, error, data) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"notify\",\n\t\t\t\"subscribeID\": subscribeID,\n\t\t\t\"topic\": topic,\n\t\t\t\"error\": error\n\t\t};\n\t\tthis.data = data;\n\t}\n\tfunction AddPubSubResponderMessage(topic) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"addPubSubResponder\",\n\t\t\t\"topic\": topic\n\t\t};\n\t}\n\tfunction RemovePubSubResponderMessage(topic) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"removePubSubResponder\",\n\t\t\t\"topic\": topic\n\t\t};\n\t}\n\tfunction JoinGroupMessage(group) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"joinGroup\",\n\t\t\t\"group\": group\n\t\t};\n\t}\n\tfunction LeaveGroupMessage(group) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"leaveGroup\",\n\t\t\t\"group\": group\n\t\t};\n\t}\n\tfunction GroupTransmitMessage(group, toChannel, message, data) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"groupTransmit\",\n\t\t\t\"group\": group,\n\t\t\t\"channel\": toChannel\n\t\t};\n\t\tthis.data = data;\n\t}\n\n\t//////////////////////\n\t// Private Functions\n\t//////////////////////\n\n\t// router client is being terminated so cleanup\n\tfunction destructor(event) {\n\t\tLogger.system.info(\"WINDOW LIFECYCLE:Shutdown:RouterClient:Shutting down.\");\n\t\tself.disconnectAll(); // this will let the router know the client is terminating\n\t}\n\n\t// invoked when router init is complete\n\tfunction onReadyCallBack() {\n\t\tself.startupTime = performance.now() - self.startupTime;\n\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient Ready\");\n\t\tisRouterReady = true;\n\t\t// console.profileEnd(\"Router\");\n\t\t// invoke all the parent callbacks waiting for router to be ready\n\t\twhile (parentReadyCallbackQueue.length > 0) {\n\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient parentReady invoked\");\n\t\t\tvar nextParentCallback = parentReadyCallbackQueue.shift();\n\t\t\tnextParentCallback();\n\t\t}\n\t}\n\n\t// called once on router-client creation\n\tfunction constructor(clientName, transportName) {\n\n\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient Constructor:Name:\", clientName);\n\t\tvar callbackCounter = 0;\n\t\tfunction processManifest(manifest) {\n\t\t\tLogger.system.info(\"WINDOW LIFECYCLE:STARTUP:RouterClient:processManifest\");\n\t\t\t//If manifest is a string, then there was an error getting the manifest because in a separate application\n\t\t\tif (!manifest || typeof (manifest) === \"string\") {\n\t\t\t\tLogger.system.error(\"WINDOW LIFECYCLE:STARTUP:RouterClient:processManifest failed -- fatal error\", manifest);\n\t\t\t} else {\n\t\t\t\tasyncConnectToEventRouter(manifest, clientName, transportName, onReadyCallBack); /**** establish connection to router service ****/\n\t\t\t}\n\t\t}\n\t\t//This is the only place we need to wait for desktop.main\n\t\tSystem.ready(function () { // wait for container to be ready\n\t\t\tvar finWindow = System.Window.getCurrent();\n\t\t\tLogger.system.debug(`WINDOW LIFECYCLE:STARTUP: System.ready invoked in ${finWindow.name}`);\n\t\t\tconsole.debug(`WINDOW LIFECYCLE:STARTUP: System.ready invoked in ${finWindow.name}`);\n\t\t\tself.startupTime = performance.now();\n\t\t\t// un-comment for optimization.\n\t\t\t// console.timeEnd(\"FinMainStartup\");\n\t\t\tif (callbackCounter++ === 0) { // this check should  not be needed; patch for OpenFin bug which invokes callback twice\n\t\t\t\t// catch \"window closing\" event so can cleanup\n\t\t\t\t//got rid of onClose destructors because it's handled inside of the baseService and inside of FSBL. if we disconnect all before other close handlers complete, we could end up with a hanging window.\n\t\t\t\tfinWindow.getOptions((opts) => {\n\t\t\t\t\t// now the manifest data is available in custom data for all windows except the service manager window (i.e. the first window)\n\t\t\t\t\tif (opts.customData && opts.customData.manifest) {\n\t\t\t\t\t\tLogger.system.debug(\"Router Init using custom data\");\n\t\t\t\t\t\tprocessManifest(opts.customData.manifest);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tConfigUtil.getExpandedRawManifest(function (manifest) {\n\t\t\t\t\t\t\tLogger.system.debug(\"Router Init using getExpandedRawManifest\");\n\t\t\t\t\t\t\tif (Globals.FinsembleUUID) {\n\t\t\t\t\t\t\t\tmanifest.finsemble.FinsembleUUID = Globals.FinsembleUUID; // every window except serviceManager has FinsembleUUID -- this case covers the service manager,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprocessManifest(manifest);\n\t\t\t\t\t\t}, function (err) {\n\t\t\t\t\t\t\tLogger.system.error(\"WINDOW LIFECYCLE:STARTUP:RouterClient:manifest error\", err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t}, function (err) {\n\t\t\t\t\tLogger.system.error(\"WINDOW LIFECYCLE:STARTUP:finWindow.getOptions error\", err);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t// connects to event-router service. will retry various ways if needed\n\tfunction asyncConnectToEventRouter(manifest, clientName, transportName, onReadyCallBack) {\n\t\tvar transportNotSpecified = (typeof (transportName) === \"undefined\");\n\t\tvar myTimer;\n\t\tvar myRetryCounter;\n\t\tvar isFinished = false;\n\t\tvar handshakeFailedCount = 0;\n\t\tvar finConfig = manifest.finsemble;\n\n\t\tvar routerParams = {\n\t\t\tFinsembleUUID: finConfig.FinsembleUUID,\n\t\t\tapplicationRoot: finConfig.applicationRoot,\n\t\t\trouterDomainRoot: finConfig.moduleRoot,\n\t\t\tforceWindowTransport: ConfigUtil.getDefault(finConfig, \"finConfig.router.forceWindowTransport\", {}),\n\t\t\tsameDomainTransport: ConfigUtil.getDefault(finConfig, \"finConfig.router.sameDomainTransport\", \"SharedWorker\"),\n\t\t\tcrossDomainTransport: ConfigUtil.getDefault(finConfig, \"finConfig.router.crossDomainTransport\", \"IPCBus\"),\n\t\t\ttransportSettings: ConfigUtil.getDefault(finConfig, \"finConfig.router.transportSettings\", {}),\n\t\t\tIAC: ConfigUtil.getDefault(finConfig, \"finConfig.IAC\", {})\n\t\t};\n\n\t\tfunction getClientTransport() {\n\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient:getClientTransport\", \"ROUTER PARAMS:\", routerParams);\n\n\t\t\tif (transportNotSpecified) {\n\t\t\t\ttransport = RouterTransport.getRecommendedTransport(routerParams, incomingMessageHandler, clientName, \"RouterService\")\n\t\t\t\t\t.then(transportReady)\n\t\t\t\t\t.catch(errHandler);\n\t\t\t} else { // transport specified...typically only for regression testing\n\t\t\t\ttransport = RouterTransport.getTransport(routerParams, transportName, incomingMessageHandler, clientName, \"RouterService\")\n\t\t\t\t\t.then(transportReady)\n\t\t\t\t\t.catch(errHandler);\n\t\t\t}\n\t\t}\n\n\t\tfunction transportReady(transportObj) {\n\t\t\tmyRetryCounter = 0;\n\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient:transport ready\", \"TRANSPORT OBJECT\", transportObj);\n\t\t\ttransport = transportObj;\n\t\t\thandshakeHandler = finished; // set function to receive handshake response\n\t\t\tsendHandshake();\n\t\t\tmyTimer = setInterval(sendHandshake, 200); // start time to retry if response not received back from router service\n\t\t}\n\n\t\tfunction handshakeFailedHandler() {\n\t\t\tclearInterval(myTimer);\n\t\t\thandshakeFailedCount++;\n\n\t\t\tif (handshakeFailedCount <= 3) {\n\t\t\t\tLogger.system.error(\"WINDOW LIFECYCLE:STARTUP:RouterClient: failure to connect to router service. Retrying...\", handshakeFailedCount, routerParams);\n\t\t\t\tgetClientTransport();\n\n\t\t\t} else {\n\t\t\t\tlet failureMessage = `A cross domain transport has failed to connect. Cross domain components may not work. Please contact your administrator.`;\n\t\t\t\tLogger.system.error(failureMessage, routerParams);\n\t\t\t\tlet notificationURL = ConfigUtil.getDefault(finConfig, \"finConfig.notificationURL\", finConfig.moduleRoot + \"/components/system/notification/notification.html\");\n\t\t\t\tUserNotification.alert(\"dev\", \"ONCE-SINCE-STARTUP\", \"FSBL-Internal-Transport-Failure\", failureMessage, { url: notificationURL });\n\t\t\t}\n\t\t}\n\n\t\tfunction sendHandshake() {\n\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient: sendHandshake\", myRetryCounter);\n\t\t\tsendToRouterService(new InitialHandshakeMessage());\n\t\t\tif (myRetryCounter++ > 50) {\n\t\t\t\thandshakeFailedHandler();\n\t\t\t}\n\t\t}\n\n\t\tfunction finished() {\n\t\t\tif (!isFinished) { // ensure only invoked once\n\t\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient connected: Starting \" + clientName + \" with transport \" + transport.identifier());\n\t\t\t\tisFinished = true;\n\t\t\t\tclearInterval(myTimer);\n\t\t\t\tif (queue) { // this should not happen with proper startup order, which waits on routerClient to be ready\n\t\t\t\t\tfor (var i = 0; i < queue.length; i++) {\n\t\t\t\t\t\tLogger.system.debug(\"RouterClient: firing queued msg\");\n\t\t\t\t\t\tvar msg = queue[i];\n\t\t\t\t\t\ttransport.send(msg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// notify initialization is complete\n\t\t\t\tif (onReadyCallBack) {\n\t\t\t\t\tonReadyCallBack();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction errHandler(errorMessage) {\n\t\t\tLogger.system.error(\"RouterClientError\", errorMessage);\n\t\t}\n\n\t\t// main code for this asyncConnectToEventRouter function -- only executed once\n\t\tgetClientTransport();\n\t}\n\n\t// provides unique id within one router client for queries\n\tfunction clientID() {\n\t\treturn clientName + \".\" + (++Globals.FSBLData.clientIDCounter);\n\t}\n\n\t// returns true if this routerClient originated the message\n\tfunction originatedHere() {\n\t\treturn this.header.origin === this.header.lastClient;\n\t}\n\n\t// invoke client callbacks in the input array (that are attached to a specific channel and listener type)\n\tfunction invokeListenerCallbacks(map, message) {\n\t\tvar originalClientCallbackArray = map[message.header.channel] || [];\n\t\tvar clientCallbackArray = [];\n\t\tif (!Array.isArray(originalClientCallbackArray) ||\n\t\t\t(originalClientCallbackArray.length === 0)) {\n\t\t\tLogger.system.warn(\"RouterClient: no listener for incoming transmit on channel \" + message.header.channel + \" from \" + message.header.origin, message);\n\t\t} else {\n\t\t\tmessage.originatedHere = originatedHere;// add local function to test origin\n\t\t\t//@note, have to operate off of a copy because a callback may call removeListener, which will modify map[message.header.channel].\n\t\t\toriginalClientCallbackArray.forEach(cb => {\n\t\t\t\tclientCallbackArray.push(cb);\n\t\t\t});\n\t\t\tfor (var i = 0; i < clientCallbackArray.length; i++) { // for each callback defined for the channel\n\t\t\t\tif (!Logger.isLogMessage(message.header.channel)) { // logger messages\n\t\t\t\t\tLogger.system.info(\"RouterClient: incoming transmit\", \"CHANNEL\", message.header.channel, \"FROM\", message.header.origin, \"MESSAGE\", message);\n\t\t\t\t}\n\t\t\t\tclientCallbackArray[i](null, message); // invoke the callback; the error parameter is always null for this case\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction sendQueryResponse(err, responseData) {\n\t\t//@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.\n\t\tLogger.system.info(\"RouterClient: outgoing query response\", \"CHANNEL\", this.header.channel, \"RESPONSE DATA\", responseData, \"QUERY ID\", this.header.queryID);\n\t\tsendToRouterService(new QueryResponseMessage(this.header.queryID, err, responseData));\n\t}\n\n\t// invoke responder-listener callback (attached to a specific channel)\n\tfunction invokeResponderCallback(map, queryMessage) {\n\t\tvar responderCallback = map[queryMessage.header.channel];\n\t\tif (responderCallback === undefined) {\n\t\t\tLogger.system.warn(\"RouterClient: no query responder define on channel \" + queryMessage.header.channel + \" incoming from \" + queryMessage.header.origin, queryMessage);\n\t\t} else {\n\t\t\tif (!queryMessage.header.error) {\n\t\t\t\tqueryMessage.originatedHere = originatedHere; // add local function to test origin\n\t\t\t\tqueryMessage.sendQueryResponse = sendQueryResponse.bind(queryMessage); // add callback function to message so responder can respond to query\n\t\t\t\tLogger.system.info(\"RouterClient: incoming query\", \"CHANNEL\", queryMessage.header.channel, \"FROM\", queryMessage.header.origin, \"QUERY MESSAGE\", queryMessage);\n\t\t\t\tresponderCallback(null, queryMessage); // invoke the callback (no error)\n\t\t\t} else { // invoke the callback with error since  flag in message (from router service)\n\t\t\t\tLogger.system.warn(\"RouterClient: queryResponder error\", queryMessage);\n\t\t\t\tresponderCallback(queryMessage.header.error, null);\n\t\t\t\tdelete map[queryMessage.header.channel]; // this is a bad responder (e.g. duplicate) so remove it\n\t\t\t}\n\t\t}\n\t}\n\n\t// add a callbackHandler into the query-response map for the given queryID\n\tfunction addQueryResponseCallBack(map, queryID, responseCallback) {\n\t\tmap[queryID] = responseCallback;\n\t}\n\n\t// add timer to wait for query response\n\tfunction addQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID, channel, timeout) {\n\t\tif (timeout > 0) {\n\t\t\tmapQueryResponseTimeOut[newQueryID] = setTimeout(function () {\n\t\t\t\tLogger.system.warn(\"RouterClient: timeout waiting on query response on channel \" + channel + \" for queryID \" + newQueryID +\n\t\t\t\t\t\" on timer \" + mapQueryResponseTimeOut[newQueryID] + \" timeout=\" + timeout);\n\t\t\t}, timeout);\n\t\t}\n\t}\n\n\t// delete timer waiting on query response (if it exists)\n\tfunction deleteQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID) {\n\t\tvar theTimer = mapQueryResponseTimeOut[newQueryID];\n\t\tif (theTimer !== undefined) {\n\t\t\tclearTimeout(theTimer);\n\t\t}\n\t}\n\n\t// invoke query-response callback (that is attached to a specific channel and listener type)\n\tfunction invokeQueryResponseCallback(map, responseMessage) {\n\t\tvar clientCallback = map[responseMessage.header.queryID];\n\t\tif (clientCallback === undefined) {\n\t\t\tLogger.system.warn(\"RouterClient: no handler for incoming query response\", \"QUERY ID\", responseMessage.header.queryID);\n\t\t} else {\n\t\t\t// delete any existing timer waiting on the response\n\t\t\tdeleteQueryResponseTimeout(mapQueryResponseTimeOut, responseMessage.header.queryID);\n\n\t\t\tif (!responseMessage.header.error) {\n\t\t\t\t//@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.\n\t\t\t\tLogger.system.info(\"RouterClient: incoming query response\", \"RESPONSE MESSAGE\", responseMessage, \"QUERY ID\", responseMessage.header.queryID);\n\t\t\t\tclientCallback(null, responseMessage); // invoke the callback passing the response message\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"RouterClient: incoming queryResponse error\", responseMessage.header, \"QUERY ID\", responseMessage.header.queryID);\n\t\t\t\tclientCallback(responseMessage.header.error, responseMessage); // error from router service so pass it back instead of a message\n\t\t\t}\n\t\t\tdelete map[responseMessage.header.queryID];\n\t\t}\n\t}\n\n\t// add responder callbackHandler for the given channel\n\tfunction addResponderCallBack(map, channel, callback) {\n\t\tvar status = false;\n\t\tvar clientCallback = map[channel];\n\t\tif (clientCallback === undefined) {\n\t\t\tmap[channel] = callback;\n\t\t\tstatus = true;\n\t\t}\n\t\treturn status;\n\t}\n\n\t// support function for sendNotifyToSubscriber -- maintains local list of subscribers for pubsub responder\n\tfunction addToPubSubListOfSubscribers(pubsubListOfSubscribers, topic, subscribeID) {\n\t\tif (!(topic in pubsubListOfSubscribers)) {\n\t\t\tpubsubListOfSubscribers[topic] = [subscribeID];\n\t\t} else {\n\t\t\tpubsubListOfSubscribers[topic].push(subscribeID);\n\t\t}\n\t}\n\n\t// support function for addPubSubResponder -- add pubsub responder callbackHandler for the given channel\n\tfunction addPubSubResponderCallBack(topic, subscribeCallback, publishCallback, unsubscribeCallback) {\n\t\tvar status = false;\n\t\tvar callbacks = mapPubSubResponders[topic.toString()];\n\t\tif (callbacks === undefined) {\n\t\t\tif (topic instanceof RegExp) {\n\t\t\t\tmapPubSubResponderRegEx[topic.toString()] = topic;\n\t\t\t\tLogger.system.info(\"RouterClient: PubSub RegEx added for topic \" + topic.toString()); // Note: topic may be a RegEx, so use toString() where applicable\n\t\t\t}\n\t\t\tmapPubSubResponders[topic.toString()] = { \"subscribeCallback\": subscribeCallback, \"publishCallback\": publishCallback, \"unsubscribeCallback\": unsubscribeCallback };\n\t\t\tstatus = true;\n\t\t}\n\t\treturn status;\n\t}\n\n\t// callback function for invokeSubscribePubSubCallback to notify new subscriber\n\tfunction sendNotifyToSubscriber(err, notifyData) {\n\t\t//@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.\n\t\tsendToRouterService(new NotifyMessage(this.header.subscribeID, this.header.topic, err, notifyData));\n\t\tif (!err) {\n\t\t\t// add new subscriber to list\n\t\t\taddToPubSubListOfSubscribers(pubsubListOfSubscribers, this.header.topic, this.header.subscribeID);\n\t\t\tLogger.system.info(\"RouterClient: incoming subscription added\", \"TOPIC\", this.header.topic, \"MESSAGE\", this);\n\t\t} else {\n\t\t\tLogger.system.warn(\"RouterClient: incoming subscription rejected by pubsub responder\", \"TOPIC\", this.header.topic, \"MESSAGE\", this);\n\t\t}\n\t}\n\n\t// for incoming subscribe: invoke notify callback for pubsub responder\n\tfunction invokeSubscribePubSubCallback(subscribeMessage) {\n\t\tvar callbacks = mapPubSubResponders[subscribeMessage.header.topic];\n\t\t//@todo consider removing this log. Why log it? Why not log it _onlY_ if the dev wants a particular message logged. This can cause problems.\n\t\tif (callbacks === undefined) { // if undefined then may be a matching RegEx topic\n\t\t\tfor (var key in mapPubSubResponderRegEx) {\n\t\t\t\tif (mapPubSubResponderRegEx[key].test(subscribeMessage.header.topic)) {\n\t\t\t\t\tcallbacks = mapPubSubResponders[key];\n\t\t\t\t\tvar initialState = mapPubSubResponderState[subscribeMessage.header.topic]; // may already be initial state defined from publish\n\t\t\t\t\tif (initialState === undefined) { // if there isn't already state defined then use default from regEx\n\t\t\t\t\t\tinitialState = mapPubSubResponderState[key]; // initialize the state from RegEx topic\n\t\t\t\t\t}\n\t\t\t\t\tmapPubSubResponderState[subscribeMessage.header.topic] = initialState;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (callbacks === undefined) { // if still undefined\n\t\t\tLogger.system.warn(\"RouterClient: no pubsub responder defined for incoming subscribe\", subscribeMessage);\n\t\t} else {\n\t\t\tif (subscribeMessage.header.error) { // the router service uses the subscribe message in this case to return a pubsub error (ToDO: consider a generic error message)\n\t\t\t\tLogger.system.warn(\"RouterClient: pubsub error received from router service: \" + JSON.stringify(subscribeMessage.header.error));\n\t\t\t} else {\n\t\t\t\tsubscribeMessage.sendNotifyToSubscriber = sendNotifyToSubscriber; // add callback function to message so pubsub responder can respond with Notify message\n\t\t\t\tif (callbacks.subscribeCallback) {\n\t\t\t\t\tsubscribeMessage.data = mapPubSubResponderState[subscribeMessage.header.topic];\n\t\t\t\t\tcallbacks.subscribeCallback(null, subscribeMessage); // invoke the callback (no error)\n\t\t\t\t} else { // since no subscribe callback defined, use default functionality\n\t\t\t\t\tsubscribeMessage.sendNotifyToSubscriber(null, mapPubSubResponderState[subscribeMessage.header.topic]); // must invoke from message to set this properly\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// support function for removeSubscriber callback --  remove one subscribeID from array for the given subscription topic\n\tfunction removeFromPubSubListOfSubscribers(pubsubListOfSubscribers, topic, subscribeID) {\n\t\tvar removed = false;\n\t\tif (topic in pubsubListOfSubscribers) {\n\t\t\tvar list = pubsubListOfSubscribers[topic];\n\t\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\t\tif (subscribeID === list[i]) {\n\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t\tif (list.length === 0) {\n\t\t\t\t\t\tdelete pubsubListOfSubscribers[topic];\n\t\t\t\t\t}\n\t\t\t\t\tremoved = true;\n\t\t\t\t\tLogger.system.info(\"RouterClient: PubSub removeListener\", \"TOPIC\", topic, \"FROM\", subscribeID);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!removed) {\n\t\t\tLogger.system.warn(\"RouterClient: tried to remove non-existent listener on \" + topic + \" from \" + JSON.stringify(subscribeID));\n\t\t}\n\t}\n\n\t// callback function for invokeUnsubscribePubSubCallback to remove the subscriber from the subscription\n\tfunction removeSubscriber() {\n\t\tremoveFromPubSubListOfSubscribers(pubsubListOfSubscribers, this.header.topic, this.header.subscribeID);\n\t}\n\n\t// for incoming unsubscribe: invoke unsubscribe callback for pubsub server\n\tfunction invokeUnsubscribePubSubCallback(unsubscribeMessage) {\n\t\tvar callbacks = mapPubSubResponders[unsubscribeMessage.header.topic];\n\n\t\tif (callbacks === undefined) { // if undefined then may be a matching RegEx topic\n\t\t\tfor (var key in mapPubSubResponderRegEx) {\n\t\t\t\tif (mapPubSubResponderRegEx[key].test(unsubscribeMessage.header.topic)) {\n\t\t\t\t\tcallbacks = mapPubSubResponders[key];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (callbacks === undefined) { // if still undefined\n\t\t\tLogger.system.warn(\"RouterClient: no pubsub responder defined for incoming unsubscribe\", \"TOPIC\", unsubscribeMessage.header.topic, \"UNSUBSCRIBE MESSAGE\", unsubscribeMessage);\n\t\t} else {\n\t\t\tunsubscribeMessage.removeSubscriber = removeSubscriber; // add callback function to message for pubsub responder (but must always remove)\n\t\t\tif (callbacks.unsubscribeCallback) {\n\t\t\t\tLogger.system.info(\"RouterClient: incoming unsubscribe callback\", \"TOPIC\", unsubscribeMessage.header.topic, \"UNSUBSCRIBE MESSAGE\", unsubscribeMessage);\n\t\t\t\tcallbacks.unsubscribeCallback(null, unsubscribeMessage); // invoke the callback (no error)\n\t\t\t} else { // since no unsubscribe callback defined, use default functionality\n\t\t\t\tLogger.system.info(\"RouterClient: incoming unsubscribe\", \"TOPIC\", unsubscribeMessage.header.topic, \"UNSUBSCRIBE MESSAGE\", unsubscribeMessage);\n\t\t\t\tunsubscribeMessage.removeSubscriber();\n\t\t\t}\n\t\t}\n\t}\n\n\t// callback function for invokePublishPubSubCallback to send Notify\n\tfunction sendNotifyToAllSubscribers(err, notifyData) {\n\t\tif (!err) {\n\t\t\tmapPubSubResponderState[this.header.topic] = notifyData; // store new state\n\t\t\tvar listOfSubscribers = pubsubListOfSubscribers[this.header.topic];\n\t\t\tif (typeof (listOfSubscribers) !== \"undefined\") { // confirm subscribers to send to, if none then nothing to do\n\t\t\t\tfor (var i = 0; i < listOfSubscribers.length; i++) {\n\t\t\t\t\tLogger.system.info(\"RouterClient: sending pubsub notify\", \"TOPIC\", this.header.topic, \"NOTIFY DATA\", notifyData);\n\t\t\t\t\tsendToRouterService(new NotifyMessage(listOfSubscribers[i], this.header.topic, err, notifyData));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tLogger.system.warn(\"RouterClient: income publish rejected by pubsub responder\", err, notifyData);\n\t\t}\n\t}\n\n\t// for incoming Publish: invoke publish callback for pubsub server\n\tfunction invokePublishPubSubCallback(publishMessage) {\n\t\tvar callbacks = mapPubSubResponders[publishMessage.header.topic];\n\n\t\tif (callbacks === undefined) { // if undefined then may be a matching RegEx topic\n\t\t\tfor (var key in mapPubSubResponderRegEx) {\n\t\t\t\tif (mapPubSubResponderRegEx[key].test(publishMessage.header.topic)) {\n\t\t\t\t\tcallbacks = mapPubSubResponders[key];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (callbacks === undefined) { // if still undefined\n\t\t\tLogger.system.warn(\"RouterClient: no pubsub responder defined for incoming publish\", \"TOPIC\", publishMessage.header.topic, \"PUBLISH MESSAGE\", publishMessage);\n\t\t} else {\n\t\t\tpublishMessage.sendNotifyToAllSubscribers = sendNotifyToAllSubscribers; // add callback function to message so pubsub responder can respond to publish\n\t\t\tif (callbacks.publishCallback) {\n\t\t\t\tLogger.system.info(\"RouterClient: incoming PubSub publish callback invoked\", \"TOPIC\", publishMessage.header.topic, \"PUBLISH MESSAGE\", publishMessage);\n\t\t\t\tcallbacks.publishCallback(null, publishMessage); // invoke the callback (no error)\n\t\t\t} else { // since no publish callback defined, use default functionality\n\t\t\t\tLogger.system.info(\"RouterClient: incoming PubSub publish\", \"TOPIC\", publishMessage.header.topic, \"PUBLISH MESSAGE\", publishMessage);\n\t\t\t\tpublishMessage.sendNotifyToAllSubscribers(null, publishMessage.data); // must call from publish message (like a callback) so 'this' is properly set\n\t\t\t}\n\t\t}\n\t}\n\n\t// for incoming Notify: invoke notify callback (that are attached to a specific channel and listener type)\n\tfunction invokeNotifyCallback(mapSubscribersID, notifyMessage) {\n\t\tvar notifyCallback = mapSubscribersID[notifyMessage.header.subscribeID];\n\t\tif (notifyCallback === undefined) {\n\t\t\tLogger.system.warn(\"RouterClient: no subscription handler defined for incoming notify for subscriberID\", notifyMessage.header.subscribeID, notifyMessage);\n\t\t} else {\n\t\t\tif (!notifyMessage.header.error) {\n\t\t\t\tnotifyMessage.originatedHere = originatedHere;// add local function to test origin\n\t\t\t\tLogger.system.info(\"RouterClient: incoming PubSub notify\", \"SUBSCRIBER ID\", notifyMessage.header.subscribeID, \"NOTIFY MESSAGE\", notifyMessage);\n\t\t\t\tnotifyCallback(null, notifyMessage); // invoke the callback passing the response message\n\t\t\t} else {\n\t\t\t\tLogger.system.info(\"RouterClient: incoming PubSub notify error for subscriberID\", \"SUBSCRIBER ID\", notifyMessage.header.subscribeID, \"NOTIFY MESSAGE\", notifyMessage);\n\t\t\t\tnotifyCallback(notifyMessage.header.error, notifyMessage); // error from router service so pass it back instead of a message\n\t\t\t}\n\t\t}\n\t}\n\n\t// outgoing Unsubscribe: remove subscriber callbackHandler for the given channel\n\tfunction removeSubscriberCallBack(mapSubscribersID, subscribeID) {\n\t\tvar status = false;\n\t\tvar notifyCallback = mapSubscribersID[subscribeID];\n\t\tif (notifyCallback !== undefined) {\n\t\t\tdelete mapSubscribersID[subscribeID];\n\t\t\tstatus = true;\n\t\t}\n\t\treturn status;\n\t}\n\n\t// for outgoing addSubscriber -- add a callback Handler for the subscribe\n\tfunction addSubscriberCallBack(mapSubscribersID, subscribeID, notifyCallback, topic) {\n\t\tmapSubscribersID[subscribeID] = notifyCallback;\n\t\tmapSubscribersTopic[subscribeID] = topic;\n\n\t}\n\n\t// for removePubSubResponder: remove responder callbackHandler for the given channel\n\tfunction removeResponderCallBack(map, channel) {\n\t\tvar status = false;\n\t\tvar clientCallback = map[channel];\n\t\tif (clientCallback !== undefined) {\n\t\t\tdelete map[channel];\n\t\t\tstatus = true;\n\t\t}\n\t\treturn status;\n\t}\n\n\t// for addListener: add a callbackHandler into the specified map (which depends on listener type) for the given channel\n\tfunction addListenerCallBack(map, channel, callback) {\n\t\tvar firstChannelClient = false;\n\t\tvar clientCallbackArray = map[channel];\n\t\tif (clientCallbackArray === undefined || clientCallbackArray.length === 0) {\n\t\t\tmap[channel] = [callback];\n\t\t\tfirstChannelClient = true;\n\t\t} else {\n\t\t\tclientCallbackArray.push(callback);\n\t\t}\n\t\treturn firstChannelClient;\n\t}\n\n\t// for removeListener: remove a callbackHandler from the specified map (which depends on listener type) for the given channel\n\tfunction removeListenerCallBack(map, channel, callback) {\n\t\tvar lastChannelClient = false;\n\t\tvar clientCallbackArray = map[channel];\n\t\tif (clientCallbackArray !== undefined) {\n\t\t\tvar index = clientCallbackArray.indexOf(callback);\n\t\t\tif (index > -1) {\n\t\t\t\tclientCallbackArray.splice(index, 1);\n\t\t\t\tif (clientCallbackArray.length === 0) {\n\t\t\t\t\tlastChannelClient = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"no listener defined for channel: \" + channel);\n\t\t\t}\n\t\t}\n\t\treturn lastChannelClient;\n\t}\n\n\t// route incoming message to appropriate callback, which depends on the message type and channel\n\tfunction routeIncomingMessage(incomingMessage) {\n\t\tLogger.system.verbose(\"Incoming Message Type\", incomingMessage.header.type, incomingMessage);\n\t\tswitch (incomingMessage.header.type) {\n\t\t\tcase \"transmit\":\n\t\t\t\tinvokeListenerCallbacks(mapListeners, incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"query\":\n\t\t\t\tinvokeResponderCallback(mapResponders, incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"queryResponse\":\n\t\t\t\tinvokeQueryResponseCallback(mapQueryResponses, incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"notify\":\n\t\t\t\tinvokeNotifyCallback(mapSubscribersID, incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"publish\":\n\t\t\t\tinvokePublishPubSubCallback(incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"subscribe\":\n\t\t\t\tinvokeSubscribePubSubCallback(incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"unsubscribe\":\n\t\t\t\tinvokeUnsubscribePubSubCallback(incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"timeCalibration\":\n\t\t\t\ttimeCalibrationHandler(incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"initialHandshakeResponse\":\n\t\t\t\thandshakeHandler();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\n\t// *** all incoming messages from underlying transport arrive here ***\n\t// although incoming transport information is available, it is not passed on because not needed\n\tfunction incomingMessageHandler(incomingTransportInfo, message) {\n\t\t// ToDo: good place to put a function to validate incoming message/data\n\t\tmessage.header.lastClient = clientName; // add last client for diagnostics\n\t\tmessage.header.incomingTransportInfo = incomingTransportInfo;\n\t\trouteIncomingMessage(message);\n\t}\n\n\t// *** all outbound messages exit here though the appropriate transport ***\n\tfunction sendToRouterService(message) {\n\t\tif (!transport || (transport instanceof Promise)) {\n\t\t\tLogger.system.warn(\"RouterClient: Queuing message since router initialization not complete\", message);\n\t\t\tqueue.push(message);\n\t\t} else {\n\t\t\ttransport.send(message);\n\t\t}\n\t}\n\n\t/**\n\t * Estimates offset to align the reference time with Router Service.  Does this by exchanging messages with RouterService, getting the service's time, and estimating communication delay.\n\t *\n\t * @private\n\t */\n\tthis.calibrateTimeWithRouterService = function (callback) {\n\t\tconst TARGET_HANDSHAKE_COUNT = 5;\n\t\tvar handshakeCounter = 0;\n\t\tvar timeOffset;\n\t\tvar offsetForFastest;\n\t\tvar fastestRRT = Infinity;\n\n\t\tfunction calibrationCalculation(finalHandshakeMessage) {\n\t\t\tvar timeOffset = 0;\n\t\t\tfor (var i = 1; i < TARGET_HANDSHAKE_COUNT; i++) {\n\t\t\t\tvar startClientTime = finalHandshakeMessage.clientBaseTime[i - 1];\n\t\t\t\tvar stopClientTime = finalHandshakeMessage.clientBaseTime[i];\n\t\t\t\tvar rtt = stopClientTime - startClientTime; // round-trip time\n\t\t\t\tvar serviceTime = finalHandshakeMessage.serviceBaseTime[i - 1];\n\t\t\t\tvar offset = serviceTime - (startClientTime + (rtt / 2));\n\t\t\t\tif (rtt < fastestRRT) {\n\t\t\t\t\tfastestRRT = rtt;\n\t\t\t\t\toffsetForFastest = offset;\n\t\t\t\t}\n\t\t\t\ttimeOffset += offset;\n\t\t\t\tLogger.system.debug(\"calibrationCalculation Intermediate Values\", \"lastRRT\", rtt, \"lastOffset\", offset, \"fastestOffset\", offsetForFastest, \"fastestRRT\", fastestRRT);\n\t\t\t}\n\t\t\ttimeOffset /= (TARGET_HANDSHAKE_COUNT - 1);\n\t\t\tLogger.system.debug(\"RouterClient calibrationCalculation\", \"Average Offset\", timeOffset, \"Chosen FastestOffset\", offsetForFastest, finalHandshakeMessage);\n\t\t\tcallback(offsetForFastest); // use the offset with the shortest RTT since it is often the most accurate\n\t\t}\n\n\t\tfunction timeCalibrationHandlerFunction(message) {\n\t\t\thandshakeCounter++;\n\t\t\tif (handshakeCounter > TARGET_HANDSHAKE_COUNT) {\n\t\t\t\tcalibrationCalculation(message); // enough handshake data gather, so do the calibration\n\t\t\t} else {\n\t\t\t\tmessage.clientBaseTime.push(Globals.performance.timing.navigationStart + Globals.performance.now());\n\t\t\t\tsendToRouterService(new TimeCalibrationHandshakeMessage(message.clientBaseTime, message.serviceBaseTime));\n\t\t\t}\n\t\t}\n\n\t\ttimeCalibrationHandler = timeCalibrationHandlerFunction; // used in routeIncomingMessage to route handshake response back to handler\n\t\ttimeCalibrationHandler(new TimeCalibrationHandshakeMessage([], [])); // invoke first time to start exchanging handshakes; will be invoked each time handshake message received back from RouterService\n\t};\n\n\t/**\n\t * Backward compatibility?\n\t * @private\n\t */\n\tthis.ready = (cb) => this.onReady(cb);\n\n\t/**\n * Get router client name.\n *\n * @param {string} newClientName string identify the client\n * FSBL.Clients.RouterClient.setClientName(\"MyComponent\");\n * @private\n */\n\tthis.getClientName = function () {\n\t\tLogger.system.debug(\"RouterClient.getClientName\", clientName);\n\t\treturn clientName;\n\t};\n\n\t/////////////////////////////////////////////\n\t// Public Functions -- The Router Client API\n\t/////////////////////////////////////////////\n\t/**\n\t * Checks if router is ready. May be invoked multiple times. Invokes cb when ready, which may be immediately.  Router is not ready until underlying transport to router service is ready.\n\t *\n\t * @param {function} cb callback function to invoke when router is ready\n\t */\n\tthis.onReady = function (cb) {\n\t\tValidate.args(cb, \"function\");\n\t\tif (isRouterReady) {\n\t\t\tcb();\n\t\t} else {\n\t\t\tparentReadyCallbackQueue.push(cb);\n\t\t}\n\t};\n\n\t/**\n\t * Add listener for incoming transmit events on specified channel. Each of the incoming events will trigger the specified event handler. The number of listeners is not limited (either local to this Finsemble window or in a separate Finsemble window).\n\t *\n\t * See [transmit]{@link RouterClientConstructor#transmit} for sending a corresponding event message to listener. See [removeListener]{@link RouterClientConstructor#removeListener} to remove the listener.\n\t *\n\t * @param {string} channel any unique string to identify the channel (must match correspond transmit channel name)\n\t * @param {function} eventHandler function (see example below)\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.addListener(\"SomeChannelName\", function (error, response) {\n\t * \tif (error) {\n\t *\t\t\tLogger.system.log(\"ChannelA Error: \" + JSON.stringify(error));\n\t *\t\t} else {\n\t *\t\t\tvar data = response.data;\n\t *\t\t\tLogger.system.log(\"ChannelA Response: \" + JSON.stringify(response));\n\t *\t\t}\n\t * });\n\t *\n\t */\n\tthis.addListener = function (channel: string, eventHandler: Function) {\n\t\tLogger.system.info(\"RouterClient.addListener\", \"CHANNEL\", channel);\n\t\tValidate.args(channel, \"string\", eventHandler, \"function\");\n\t\tvar firstChannelClient = addListenerCallBack(mapListeners, channel, eventHandler);\n\t\tif (firstChannelClient) {\n\t\t\tsendToRouterService(new AddListenerMessage(channel));\n\t\t}\n\t};\n\n\t/**\n\t * Transmit event to all listeners on the specified channel. If no listeners the event is discarded without error. All listeners to the channel in this Finsemble window and other Finsemble windows will receive the transmit.\n\t *\n\t * See [addListener]{@link RouterClientConstructor#addListener} to add a listener to receive the transmit.\n\t *\n\t * @param {string} toChannel any unique string to identify the channel (must match correspond listener channel name)\n\t * @param {any} event any object or primitive type to be transmitted\n\t * @param {object} [options] Options object for your transmit\n\t * @param {boolean} [options.suppressWarnings=false] By default, the Router will log warnings if you transmit to a channel with no listeners. Set this to true to eliminate those warnings.\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.transmit(\"SomeChannelName\", event);\n\t *\n\t */\n\tthis.transmit = function (toChannel: string, event: any, options: { suppressWarnings: boolean } = { suppressWarnings: false }) {\n\t\tif (!Logger.isLogMessage(toChannel)) { // logger messages\n\t\t\tLogger.system.info(\"RouterClient.transmit\", \"TO CHANNEL\", toChannel, \"EVENT\", event);\n\t\t}\n\t\tValidate.args(toChannel, \"string\", event, \"any\");\n\t\tsendToRouterService(new TransmitMessage(toChannel, event, options));\n\t};\n\n\t/* @TODO - This works via object reference - it relies on the physical pointer to the function object originally passed in.\n\tThis is very confusing, and not idiomatic. Moreover, it entirely prevents a user from using anonymous functions, which will fall\n\tquite unexpected if the user isn't prepared. A better API would be to pass in some unique ID, or have a unique ID automatically generated,\n\tthat could then be passed to this function, e.g:\n\n\tRouterClient.addListener('some-channel', 'my-unique-listener-id', () => { });\n\tRouterClient.removeListener('some-channel', 'my-unique-listener-id');*/\n\n\t/**\n\t * Remove event listener from specified channel for the specific event handler (only listeners created locally can be removed).\n\t *\n\t * See [addListener]{@link RouterClientConstructor#addListener} for corresponding add of a listener.\n\t *\n\t * @param {string} channel unique channel name to remove listener from\n\t * @param {function} eventHandler function used for the event handler when the listener was added\n\t */\n\tthis.removeListener = function (channel: string, eventHandler: Function) {\n\t\tLogger.system.info(\"RouterClient.removeListener\", \"CHANNEL\", channel, \"EVENT HANDLER\", eventHandler);\n\t\tValidate.args(channel, \"string\", eventHandler, \"function\");\n\t\tvar lastChannelListener = removeListenerCallBack(mapListeners, channel, eventHandler);\n\t\tif (lastChannelListener) {\n\t\t\tsendToRouterService(new RemoveListenerMessage(channel));\n\t\t}\n\t};\n\n\t/**\n\t * Add a query responder to the specified channel. The responder's queryEventHander function will receive all incoming queries for the specified channel (whether from this Finsemble window or remote Finsemble windows).\n\t *\n\t * *Note:* Only one responder is allowed per channel within the Finsemble application.\n\t *\n\t * See [query]{@link RouterClientConstructor#query} for sending a corresponding query-event message to this responder.\n\t *\n\t * @param {string} channel any unique string to identify the channel (must match correspond query channel name); only one responder allowed per channel\n\t * @param {function} queryEventHandler function to handle the incoming query (see example below); note incoming queryMessage contains function to send response\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.addResponder(\"ResponderChannelName\", function (error, queryMessage) {\n\t *\tif (error) {\n\t *\t\tLogger.system.log('addResponder failed: ' + JSON.stringify(error));\n\t *\t} else {\n\t *\tconsole.log(\"incoming data=\" + queryMessage.data);\n\t * \tvar response=\"Back at ya\"; // Responses can be objects or strings\n\t *\tqueryMessage.sendQueryResponse(null, response); // A QUERY RESPONSE MUST BE SENT OR THE REMOTE SIDE WILL HANG\n\t *\t}\n\t * });\n\t *\n\t */\n\tthis.addResponder = function (channel: string, queryEventHandler: Function) {\n\t\tLogger.system.info(\"RouterClient.addResponder\", \"CHANNEL\", channel);\n\t\tValidate.args(channel, \"string\", queryEventHandler, \"function\");\n\t\tvar status = addResponderCallBack(mapResponders, channel, queryEventHandler);\n\t\tif (status) {\n\t\t\tsendToRouterService(new addResponderMessage(channel));\n\t\t} else {\n\t\t\tLogger.system.warn(\"RouterClient.addResponder: Responder already locally defined for channel \" + channel);\n\t\t\tqueryEventHandler({\n\t\t\t\t\"RouteClient QueryError\": \"Responder already locally defined for channel\" + channel\n\t\t\t}, null); // immediately invoke callback passing error\n\t\t}\n\t};\n\n\t/**\n\t * Send a query to responder listening on specified channel. The responder may be in this Finsemble window or another Finsemble window.\n\t *\n\t * See [addResponder]{@link RouterClientConstructor#addResponder} to add a responder to receive the query.\n\t *\n\t * @param {string} responderChannel a unique string that identifies the channel (must match the channel name on which a responder is listening)\n\t * @param {object} queryEvent event message sent to responder\n\t * @param {any} params optional params\n\t * @param {number} [params.timeout=20000]  timeout value for a query-response timer.  Timer defaults to 5000 milliseconds if no params value is passed in. Set timeout to zero to wait indefinitely. If the timer expires, this function call will return with an error.\n\t * @param {function} responseEventHandler event handler to receive the query response (sent from a responder that is listening on this channel)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.query(\"someChannelName\", {}, function (error, queryResponseMessage) {\n\t *\tif (error) {\n\t *\t\tLogger.system.log('query failed: ' + JSON.stringify(error));\n\t *\t} else {\n\t *\t\t// process income query response message\n\t *\t\tvar responseData = queryResponseMessage.data;\n\t *\t\tLogger.system.log('query response: ' + JSON.stringify(queryResponseMessage));\n\t *\t}\n\t * });\n\t *\n\t * FSBL.Clients.RouterClient.query(\"someChannelName\", { queryKey: \"abc123\"}, { timeout: 1000 }, function (error, queryResponseMessage) {\n\t *\tif (!error) {\n\t *\t\t// process income query response message\n\t *\t\tvar responseData = queryResponseMessage.data;\n\t *\t}\n\t * }); */\n\tthis.query = function (responderChannel: string, queryEvent: any, params: any, responseEventHandler: Function = Function.prototype) {\n\t\tvar newQueryID = `${clientID()}.${responderChannel}`;\n\t\tvar timestamp = window.performance.timing.navigationStart + window.performance.now();\n\t\tvar navstart = window.performance.timing.navigationStart;\n\t\tvar timenow = window.performance.now(); // these timer values used for logging diagnostics\n\n\t\tLogger.system.info(\"RouterClient.query\", \"RESPONDER CHANNEL\", responderChannel, \"QUERY EVENT\", queryEvent, \"PARAMS\", params, \"QUERY ID\", newQueryID, { timestamp, navstart, timenow });\n\t\tif (arguments.length === 3) {\n\t\t\tresponseEventHandler = params;\n\t\t\tparams = { timeout: 20000 };\n\t\t}\n\t\tValidate.args(responderChannel, \"string\", queryEvent, \"any=\", params, \"object=\", responseEventHandler, \"function\");\n\t\tparams = params || {};\n\t\t(Validate as any).args2(\"params.timeout\", params.timeout, \"number\");\n\n\t\tfunction promiseResolver(resolve) {\n\t\t\t//Allows us to await on queries, cleaning up code quite a bit.\n\t\t\tconst modifiedHandler = (err, response) => {\n\t\t\t\tresolve({ err, response });\n\t\t\t\tif (typeof responseEventHandler === \"function\") {\n\t\t\t\t\tresponseEventHandler(err, response);\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.warn(\n\t\t\t\t\t\t\"No response event handler passed to RouterClient.query\",\n\t\t\t\t\t\t\"RESPONDER CHANNEL\", responderChannel,\n\t\t\t\t\t\t\"QUERY EVENT\", queryEvent,\n\t\t\t\t\t\t\"PARAMS\", params,\n\t\t\t\t\t\t\"QUERY ID\", newQueryID,\n\t\t\t\t\t\t{ timestamp, navstart, timenow })\n\t\t\t\t}\n\t\t\t};\n\n\t\t\taddQueryResponseCallBack(mapQueryResponses, newQueryID, modifiedHandler);\n\t\t\taddQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID, responderChannel, params.timeout);\n\t\t\tsendToRouterService(new QueryMessage(newQueryID, responderChannel, queryEvent));\n\t\t}\n\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t * Remove query responder from specified channel. Only a locally added responder can be removed (i.e. a responder defined in the same component or service).\n\t *\n\t * See [addResponder]{@link RouterClientConstructor#addResponder} for corresponding add of a query responder.\n\t *\n\t * @param {string} responderChannel string identifying the channel to remove responder from\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.removeResponder(\"someChannelName\");\n\t *\n\t */\n\tthis.removeResponder = function (responderChannel: string) {\n\t\tLogger.system.info(\"RouterClient.removeResponder\", \"RESPONDER CHANNEL\", responderChannel);\n\t\tValidate.args(responderChannel, \"string\");\n\t\tvar status = removeResponderCallBack(mapResponders, responderChannel);\n\t\tif (status) {\n\t\t\tsendToRouterService(new RemoveResponderMessage(responderChannel));\n\t\t}\n\t};\n\n\t/**\n\t * Add a PubSub responder for specified topic. All subscribes and publishes to the topic will comes to responder (whether from local window or another window). Only one PubSub responder allowed per topic value in Finsemble application; however, the topic value may be a regular-expression representing a set of related topics, in which case the PubSub responder will responder to all matching topics. When a regEx topic is used, the same default functionality is provides for each matching topic -- the difference is only one PubSub responder is needed to cover a set of related topics, plus the same callback handlers can be used (if provided).\n\t *\n\t * All the callback function are optional because each PubSub responder comes with build-in default functionality (described below).\n\t *\n\t * Note an exact topic match will take precedence over a regEx match, but otherwise results are unpredictable for overlapping RegEx topics.\n\t *\n\t * See [subscribe]{@link RouterClientConstructor#subscribe} and [publish]{@link RouterClientConstructor#publish} for corresponding functions sending to the PubSub responder.\n\t *\n\t * @param {string} topic unique topic for this responder, or a topic RegEx (e.g. '/abc.+/') to handle a set of topics\n\t * @param {object} [initialState] initial state for the topic (defaults to empty struct); can be any object\n\t * @param {object} [params] optional parameters\n\t * @param {function} [params.subscribeCallback] allows responder know of incoming subscription and accept or reject it (default is to accept)\n\t * @param {function} [params.publishCallback] allows responder to use the publish data to form a new state (default is the publish data becomes the new state)\n\t * @param {function} [params.unsubscribeCallback] allows responder to know of the unsubscribe, but it must be accepted (the default accepts)\n\t * @param {function} [callback] optional callback(err,res) function. If addPubSubResponder failed then err set; otherwise, res set to \"success\"\n\t *\n\t * @example\n\t *\n\t * function subscribeCallback(error, subscribe) {\n\t * \tif (subscribe) {\n\t * \t\t// must make this callback to accept or reject the subscribe (default is to accept). First parm is err and second is the initial state\n\t * \t\tsubscribe.sendNotifyToSubscriber(null, { \"NOTIFICATION-STATE\": \"One\" });\n\t * \t}\n\t * }\n\t * function publishCallback(error, publish) {\n\t * \tif (publish) {\n\t * \t\t// must make this callback to send notify to all subscribers (if error parameter set then notify will not be sent)\n\t * \t\tpublish.sendNotifyToAllSubscribers(null, publish.data);\n\t * \t}\n\t * }\n\t * function unsubscribeCallback(error, unsubscribe) {\n\t * \tif (unsubscribe) {\n\t * \t\t// must make this callback to acknowledge the unsubscribe\n\t * \t\tunsubscribe.removeSubscriber();\n\t * \t}\n\t * }\n\t * FSBL.Clients.RouterClient.addPubSubResponder(\"topicABC\", { \"State\": \"start\" },\n\t * \t{\n\t * \t\tsubscribeCallback:subscribeCallback,\n\t * \t\tpublishCallback:publishCallback,\n\t * \t\tunsubscribeCallback:unsubscribeCallback\n\t * \t});\n\t *\n\t *   or\n\t *\n\t * FSBL.Clients.RouterClient.addPubSubResponder(\"topicABC\", { \"State\": \"start\" });\n\t *\n\t *   or\n\t *\n\t * FSBL.Clients.RouterClient.addPubSubResponder(\\/topicA*\\/, { \"State\": \"start\" });\n\t *\n\t */\n\tthis.addPubSubResponder = function (topic: string, initialState?: any, params?: {\n\t\tsubscribeCallback?: Function,\n\t\tpublishCallback?: Function,\n\t\tunsubscribeCallback?: Function\n\t}, callback?: Function) {\n\t\tvar error;\n\t\tvar response;\n\t\tLogger.system.info(\"RouterClient.addPubSubResponder\", \"TOPIC\", topic, \"INITIAL STATE\", initialState, \"PARAMS\", params);\n\t\tValidate.args(topic, \"any\", initialState, \"object=\", params, \"object=\");\n\t\tparams = params || {};\n\t\tValidate.args2(\"params.subscribeCallback\", params.subscribeCallback, \"function=\", \"params.publishCallback\", params.publishCallback, \"function=\") &&\n\t\t\t(Validate as any).args2(\"params.unsubscribeCallback\", params.unsubscribeCallback, \"function=\");\n\n\t\tvar status = addPubSubResponderCallBack(topic, params.subscribeCallback, params.publishCallback, params.unsubscribeCallback);\n\t\tif (status) {\n\t\t\tinitialState = initialState || {};\n\t\t\tmapPubSubResponderState[topic.toString()] = Utils.clone(initialState);\n\t\t\tsendToRouterService(new AddPubSubResponderMessage(topic.toString()));\n\t\t\tresponse = \"success\";\n\t\t} else {\n\t\t\terror = \"RouterClient.addPubSubResponder: Responder already locally defined for topic \" + topic;\n\t\t\tLogger.system.warn(error);\n\t\t}\n\t\tif (callback) {\n\t\t\tcallback(error, response);\n\t\t}\n\t};\n\n\t/**\n\t * Remove pubsub responder from specified topic. Only locally created responders (i.e. created in local window) can be removed.\n\t *\n\t * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder.\n\t *\n\t * @param {string} topic unique topic for responder being removed (may be RegEx, but if so much be exact regEx used previously with addPubSubResponder)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.removePubSubResponder(\"topicABC\");\n\t *\n\t */\n\tthis.removePubSubResponder = function (topic: string) {\n\t\tLogger.system.info(\"RouterClient.removePubSubResponder\", \"TOPIC\", topic);\n\t\tValidate.args(topic, \"any\");\n\t\tvar status = removeResponderCallBack(mapPubSubResponders, topic);\n\t\tif (status) {\n\t\t\tdelete mapPubSubResponderState[topic.toString()]; // remove corresponding state\n\t\t\tdelete mapPubSubResponderRegEx[topic.toString()]; // may be a RegEx\n\t\t\tsendToRouterService(new RemovePubSubResponderMessage(topic));\n\t\t} else {\n\t\t\tLogger.system.warn(\"RouterClient.removePubSubResponder failed: Could not find responder for topic \" + topic);\n\t\t}\n\t};\n\n\t/**\n\t * Subscribe to a PubSub Responder. Each responder topic can have many subscribers (local in this window or remote in other windows). Each subscriber immediately (but asynchronously) receives back current state in a notify; new notifications are receive for each publish sent to the same topic.\n\t *\n\t * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder to handle the subscribe. See [publish]{@link RouterClientConstructor#publish} for corresponding publish to notify the subscriber.\n\t *\n\t * @param {string} topic topic being subscribed to\n\t * @param {function} notifyCallback invoked for each income notify for the given topic (i.e. initial notify plus for each publish)\n\t * @returns {object} subscribe-id optionally used for unsubscribing later\n\t *\n\t * @example\n\t *\n\t * var subscriptionDetails = RouterClient.subscribe(\"topicABC\", function(err, notify) {\n\t *\t\tif (err) { console.log(err); }\n\t *\t\tif (notify) {\n\t *\t\t\tvar notificationStateData = notify.data;\n\t *\t\t\t// do something with notify data\n\t *  \t}\n\t * });\n\t *\n\t */\n\tthis.subscribe = function (topic: string, notifyCallback: Function) {\n\t\tLogger.system.info(\"RouterClient.subscribe\", \"TOPIC\", topic);\n\t\tValidate.args(topic, \"string\", notifyCallback, \"function\");\n\t\tvar subscribeID = clientID();\n\t\taddSubscriberCallBack(mapSubscribersID, subscribeID, notifyCallback, topic);\n\t\tsendToRouterService(new SubscribeMessage(subscribeID, topic));\n\t\treturn { \"subscribeID\": subscribeID, \"topic\": topic };\n\t};\n\n\t/**\n\t * Publish to a PubSub Responder, which will trigger a corresponding Notify to be sent to all subscribers (local in this window or remote in other windows). There can be multiple publishers for a topic (again, in same window or remote windows)\n\t *\n\t * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder to handle the publish (i.e. sending notifications to all subscriber). See [Subscribe]{@link RouterClientConstructor#addPubSubResponder} for corresponding subscription to receive publish results (in the form of a notify event)\n\t *\n\t * @param {string} topic topic being published to\n\t * @param {object} event topic state to be published to all subscriber (unless the SubPub responder optionally modifies in between)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.publish(\"topicABC\", topicState);\n\t *\n\t */\n\tthis.publish = function (topic: string, event: any) {\n\t\tLogger.system.info(\"RouterClient.publish\", \"TOPIC\", topic, \"EVENT\", event);\n\t\tValidate.args(topic, \"string\", event, \"any\");\n\t\tsendToRouterService(new PublishMessage(topic, event));\n\t};\n\n\t/**\n\t * Unsubscribe from PubSub responder so no more notifications received (but doesn't affect other subscriptions). Only works from the window the PubSub responder was created in.\n\t *\n\t * See [subscribe]{@link RouterClientConstructor#subscribe} for corresponding subscription being removed.\n\t *\n\t * @param {object} subscribeID the id return from the corresponding subscribe for the topic\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.unsubscribe(subscribeId);\n\t * //Subscription details returned by RouterClient.subscribe(), which take the form:\n\t * let subscriptionDetails = {\n\t * \tsubscribeID: \"<subscribeID returned by RouterClient.subscribe>\",\n\t * \ttopic: \"topicABC\"\n\t * };\n\t * FSBL.Clients.RouterClient.unsubscribe(subscriptionDetails);\n\t *\n\t *\n\t */\n\tthis.unsubscribe = function (subscribeIDStruct: any) {\n\t\tLogger.system.info(\"RouterClient.unsubscribe\", \"SUBSCRIBE ID\", subscribeIDStruct);\n\t\tValidate.args(subscribeIDStruct, \"object\") && (Validate as any).args2(\"subscribeIDStruct.subscribeID\", subscribeIDStruct.subscribeID, \"string\");\n\t\tvar deletedSubscriber = removeSubscriberCallBack(mapSubscribersID, subscribeIDStruct.subscribeID);\n\t\tif (deletedSubscriber) {\n\t\t\tsendToRouterService(new UnsubscribeMessage(subscribeIDStruct.subscribeID, subscribeIDStruct.topic));\n\t\t} else {\n\t\t\tLogger.system.warn(\"RouterClient.unsubscribe: Could not find subscribeID for topic \" + subscribeIDStruct.topic);\n\t\t}\n\t};\n\n\t/**\n\t * Test an incoming router message to see if it originated from the same origin (e.g. a trusted source...not cross-domain). Currently same origin is known only because a sharedWorker transport is used (by definition SharedWorkers do not work cross-domain).  This means any message coming in over the Inter-application Bus will not be trusted; however, by default all same-origin components and services connect to the router using a SharedWorker transport.\n\t * @param {object} incomingMessage an incoming router message (e.g. transmit, query, notification) to test to see if trusted.\n\t *\n\t * @example\n\t * FSBL.Clients.RouterClient.trustedMessage(incomingRouterMessage);\n\t */\n\tthis.trustedMessage = function (incomingMessage: any) {\n\t\tvar isTrusted = true; // temporarily make all trusted so no problems if changing router transport\n\t\tLogger.system.debug(\"RouterClient.trustedMessage header\", incomingMessage.header);\n\t\tif (incomingMessage.header.originIncomingTransportInfo.transportID === \"SharedWorker\") {\n\t\t\tisTrusted = true;\n\t\t}\n\t\treturn isTrusted;\n\t};\n\t/*\n\t * @TODO: consider adding disconnectAllListeners(), disconnectAllResponders(), disconnectAllSubscribers()\n\t*/\n\n\t/**\n\t * Removes all listeners, responders, and subscribers for this router client -- automatically called when client is shutting down. Can be called multiple times.\n\t */\n\tthis.disconnectAll = function () {\n\t\tLogger.system.info(\"RouterClient.disconnectAll\");\n\t\tfor (var channel in mapListeners) {\n\t\t\tLogger.system.debug(\"RouterClient.disconnectAll is removing listener on \" + channel);\n\t\t\tsendToRouterService(new RemoveListenerMessage(channel));\n\t\t\tdelete mapListeners[channel];\n\t\t}\n\n\t\tfor (var responderChannel in mapResponders) {\n\t\t\tLogger.system.debug(\"RouterClient.disconnectAll is removing responder on \" + responderChannel);\n\t\t\tsendToRouterService(new RemoveResponderMessage(responderChannel));\n\t\t\tdelete mapResponders[responderChannel];\n\t\t}\n\n\t\tfor (var topic in mapPubSubResponders) {\n\t\t\tLogger.system.debug(\"RouterClient.disconnectAll is removing pubsub responder on \" + topic);\n\t\t\tsendToRouterService(new RemovePubSubResponderMessage(topic));\n\t\t\tdelete mapPubSubResponders[topic.toString()]; // could be a RegEx\n\t\t\tdelete mapPubSubResponderState[topic.toString()]; // remove corresponding state\n\t\t\tdelete mapPubSubResponderRegEx[topic.toString()]; // may be a RegEx\n\t\t}\n\n\t\tfor (var subscribeID in mapSubscribersID) {\n\t\t\tvar stopic = mapSubscribersTopic[subscribeID];\n\t\t\tLogger.system.debug(\"RouterClient.disconnectAll is removing subscriber on \" + stopic);\n\t\t\tsendToRouterService(new UnsubscribeMessage(subscribeID, stopic));\n\t\t\tdelete mapSubscribersID[subscribeID];\n\t\t\tdelete mapSubscribersTopic[subscribeID];\n\t\t}\n\t};\n\n\t//Prevent the loggerService window's routerClient from logging to itself. Instead, log locally for it. It's unlikely that we need to get the loggerService's router messages. If we do, just un-comment this.\n\tif (System.Window.getCurrent().name === \"loggerService\") {\n\t\tLogger = new LocalLogger();\n\t}\n\n\tclientName = baseClientName + \".\" + Globals.name;\n\n\t/** @TODO - Move this to factory function, something like getRouterClient. */\n\tif (clientName in Globals.FSBLData.RouterClients) { // if previously constructed then return that existing client\n\t\tLogger.system.debug(`\"RouterClient Check: reusing existing client for ${clientName}`);\n\t\tconsole.debug(`\"RouterClient Check: reusing existing client for ${clientName}`, Globals);\n\t} else {\n\t\tLogger.system.debug(`\"RouterClient Check: constructing new client for ${clientName}`);\n\t\tconsole.debug(`\"RouterClient Check: constructing new client for ${clientName}`, Globals);\n\t\tGlobals.FSBLData.RouterClients[clientName] = this;\n\t\tconstructor(clientName, transportName); // constructor new router client\n\t}\n\n\n\treturn Globals.FSBLData.RouterClients[clientName];\n};\n\n\n\n// WEBPACK FOOTER //\n// src/clients/routerClientConstructor.ts","\nexport type BootDependencyType = \"bootTasks\" | \"services\" | \"components\" | \"checkpoints\";\nexport type BootStage = \"microkernel\" | \"kernel\" | \"authentication\" | \"preuser\" | \"earlyuser\" | \"user\";\nexport type BootDependencyState = \"uninitialized\" | \"disabled\" | \"blockedByDisabled\" | \"failed\" | \"blockedByFailure\" | \"waitingOnDependencies\" | \"readyToStart\" | \"starting\" | \"completed\";\n\nexport const ALL_BOOT_STAGES:BootStage[] = [ \"microkernel\" , \"kernel\" , \"authentication\" , \"preuser\" , \"earlyuser\" , \"user\"];\n\n/**\n * Boot config element used to build a node in a dependency tree\n */\nexport class BootConfigElement {\n\tname: string; // the name of this element (e.g. task name, service name)\n\ttype: BootDependencyType; // the type (e.g. \"tasks\", \"services\")\n\tstage: BootStage; // the state this element should be started in\n\tdependencies: string[]; // the child dependencies for this element\n\tstopOnFailure: boolean; // if true then stop the boot stage if this element has a start error\n\tautoStart: boolean; // only start this element if true; otherwise ignore this element\n\tcustomFailureMessage: string; // customer error message to log if error\n\ttimeout: number; // timeout value in millisecond to wait on starting\n\toriginalConfig: any; // the orignal config data used to build this element\n\tcheckpointsIncluded: boolean; // if true then checkpoints are enabled\n\tcheckpointConfig: any; // checkpoint config for when checkpoints are enabled\n\tpostStartupCompletion: boolean; // only used for checkpoints -- if true then checkpoint exists after parent is \"completed\"\n}\n\n/**\n * Represents a ready node (i.e. all that's need to start the corresponding task/service/component)\n */\nexport class BootReadyItem {\n\tname: string; // the name of the item to start (i.e. task name, service name, component name)\n\ttype: BootDependencyType;  // the type of the item (e.g. \"tasks\", \"services\")\n\tconfig: BootConfigElement; // the orignal boot-config element\n\tconstructor(name, type, config) {\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.config = config;\n\t}\n}\n\n/**\n * Boot task callback interface\n */\nexport interface BootTaskCallbackInterface {\n\t(taskName: string, type:BootDependencyType, state:BootDependencyState): void;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/systemManager/_types.ts","// contains common functions -- used in multiple places in the system manager\n\nimport { System } from \"../../common/system\";\nimport { STATUS_CHANNEL_BASE, CHECKPOINT_CHANNEL_BASE } from \"../../services/systemManager/_constants\"\n\n/**\n * Kills old applications -- used at the beginning of start\n * @param finUUID\n * @returns\n */\nexport function killOldApplications(finUUID) {\n\tconst promiseResolver = async (resolve) => {\n\t\tSystem.getAllApplications(async (applications) => {\n\t\t\tif (applications) {\n\t\t\t\tfor (let i = 0; i < applications.length; i++) {\n\t\t\t\t\tlet a = applications[i];\n\t\t\t\t\tif (a.uuid.endsWith(\"-\" + finUUID)) {\n\t\t\t\t\t\tlet application = System.Application.wrap(a.uuid);\n\t\t\t\t\t\tawait System.closeApplication(application);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(\"killOldApplications: finished closing old apps\");\n\t\t\tresolve();\n\t\t});\n\t}\n\treturn new Promise(promiseResolver);\n}\n\n/**\n * Function to return the name of a startup status channel, given the window name\n * @param name\n * @returns\n */\nexport function statusChannel(name) {\n\treturn `${STATUS_CHANNEL_BASE}.${name}`\n}\n\n\n/**\n * Function to return the name of a checkpoint status channel, given the parent name (e.g. service name, component name) and the checkpoint name\n * @param parentName\n * @param checkpointName\n * @returns\n */\nexport function checkpointChannel(parentName, checkpointName) {\n\treturn `${CHECKPOINT_CHANNEL_BASE}.${parentName}.${checkpointName}`\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/systemManager/common.ts","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.get/index.js\n// module id = 33\n// module chunks = 0 1 2 3 4 5 6 7 8 10 11","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n/**\n * @introduction\n * <h2>Finsemble system wide settings for use by all components and services</h2>\n *\n */\n\n/**\n * Constructor for Finsemble SystemSettings\n * @private\n * @constructor\n */\nvar SystemSettings = function () {\n\tvar currentDiagLevel = 3;\n\n\t/**\n\t * Returns diagnostic level\n\t *\n\t *@returns current diagnostic level\n\t */\n\tthis.diagLevel = function () {\n\t\treturn currentDiagLevel;\n\t};\n\n\t/**\n\t * Returns diagnostic level\n\t *\n\t *@returns current diagnostic level\n\t */\n\tthis.setDiagLevel = function (level) {\n\t\tcurrentDiagLevel = level;\n\t};\n\n\t/**\n\t * Returns true if parameter validation is enabled\n\t *\n\t *@returns true if enable\n\t */\n\tthis.validationEnabled = function () {\n\t\treturn (currentDiagLevel >= 4);\n\t};\n};\n\nexport default new SystemSettings();\n\n\n// WEBPACK FOOTER //\n// ./src/common/systemSettings.js","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/setimmediate/setImmediate.js\n// module id = 35\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15","/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.15';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.\n      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/[\\r\\n]/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      // Like with sourceURL, we take care to not check the option's prototype,\n      // as this configuration is a code injection vector.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return _;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/lodash.js\n// module id = 38\n// module chunks = 0 2 3 4 5 6 7 8 10 11","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/v4.js\n// module id = 40\n// module chunks = 0 2 3 4 5 6 7 8 10 11","'use strict';\nconst pTry = require('p-try');\n\nconst pLimit = concurrency => {\n\tif (concurrency < 1) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = [];\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.length > 0) {\n\t\t\tqueue.shift()();\n\t\t}\n\t};\n\n\tconst run = (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = pTry(fn, ...args);\n\n\t\tresolve(result);\n\n\t\tresult.then(next, next);\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tif (activeCount < concurrency) {\n\t\t\trun(fn, resolve, ...args);\n\t\t} else {\n\t\t\tqueue.push(run.bind(null, fn, resolve, ...args));\n\t\t}\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.length\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\nmodule.exports.default = pLimit;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/p-limit/index.js\n// module id = 41\n// module chunks = 0 2 3 4 5 6 7 8 10 11","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} props The property identifiers to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, props) {\n  object = Object(object);\n  return basePickBy(object, props, function(value, key) {\n    return key in object;\n  });\n}\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} props The property identifiers to pick from.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, props, predicate) {\n  var index = -1,\n      length = props.length,\n      result = {};\n\n  while (++index < length) {\n    var key = props[index],\n        value = object[key];\n\n    if (predicate(value, key)) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [props] The property identifiers to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = baseRest(function(object, props) {\n  return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));\n});\n\nmodule.exports = pick;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.pick/index.js\n// module id = 42\n// module chunks = 0 2 3 4 5 6 7 8 10 11","'use strict';\n\nconst pTry = (fn, ...arguments_) => new Promise(resolve => {\n\tresolve(fn(...arguments_));\n});\n\nmodule.exports = pTry;\n// TODO: remove this in the next major version\nmodule.exports.default = pTry;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/p-try/index.js\n// module id = 43\n// module chunks = 0 2 3 4 5 6 7 8 10 11","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/index.js\n// module id = 44\n// module chunks = 0 2 3 4 5 6 7 8 10 11","import Logger from \"../../../clients/logger\";\n\nclass BoxMath {\n\tstatic isPointOnSegment(point, segment) {\n\t\t//y = mx + b;\n\t\t//Equation above transforms into this:\n\t\t//(y - y1)\t x - x1\n\t\t//-------- = --------\n\t\t//y2 - y1 \t x2 - x1\n\n\t\t//which is this:\n\t\t//(y - y1) * (x2 - x1) = (x - x1) * ( y2 - y1)\n\t\tvar x = point.x, y = point.y,\n\t\t\tx1 = segment.min.x, x2 = segment.max.x,\n\t\t\ty1 = segment.min.y, y2 = segment.max.y;\n\n\t\tvar isInBounds = (x >= x1 && x <= x2 && y >= y1 && y <= y2);\n\t\t//The equation above will tell us whether the point is on the line, assuming it has no start and end. This checks to see if the point is within the beginning and end of the segment. If not, it can't be on our segment.\n\t\tif (!isInBounds) {\n\t\t\treturn false;\n\t\t}\n\t\tvar isOnLine = (y - y1) * (x1 - x2) === (x - x1) * (y1 - y2);\n\t\treturn isOnLine;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} req {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getVertices(req) {\n\t\treturn [\n\t\t\t//top left\n\t\t\t{\n\t\t\t\tx: req.left,\n\t\t\t\ty: req.top,\n\t\t\t\tlabel: \"topLeft\",\n\t\t\t},\n\t\t\t//top right\n\t\t\t{\n\t\t\t\tx: req.right,\n\t\t\t\ty: req.top,\n\t\t\t\tlabel: \"topRight\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tx: req.right,\n\t\t\t\ty: req.bottom,\n\t\t\t\tlabel: \"bottomRight\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tx: req.left,\n\t\t\t\ty: req.bottom,\n\t\t\t\tlabel: \"bottomLeft\"\n\t\t\t}\n\t\t];\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} segment {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getVertexOnSegment(segment) {\n\t\tfor (let vertex in this.vertices) {\n\t\t\tif (BoxMath.isPointOnSegment(this.vertices[vertex], segment)) {\n\t\t\t\treturn vertex;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds     {description}\n\t* @param  {type} bufferSize {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getSnappingRegions(bounds, bufferSize = 0) {\n\t\tlet { left, top, right, bottom } = bounds;\n\t\tlet leftMinusBuffer = left - bufferSize,\n\t\t\tleftPlusBuffer = left + bufferSize,\n\t\t\ttopMinusBuffer = top - bufferSize,\n\t\t\ttopPlusBuffer = top + bufferSize,\n\t\t\trightMinusBuffer = right - bufferSize,\n\t\t\trightPlusBuffer = right + bufferSize,\n\t\t\tbottomPlusBuffer = bottom + bufferSize,\n\t\t\tbottomMinusBuffer = bottom - bufferSize;\n\t\treturn {\n\t\t\ttopLeft: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: topMinusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: leftPlusBuffer,\n\t\t\t\t\ty: top\n\t\t\t\t}\n\t\t\t},\n\t\t\ttopRight: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: rightMinusBuffer,\n\t\t\t\t\ty: topMinusBuffer\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: top\n\t\t\t\t}\n\t\t\t},\n\t\t\trightTop: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: right,\n\t\t\t\t\ty: top,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: topPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\trightBottom: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: right,\n\t\t\t\t\ty: bottomMinusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: bottom\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tbottomLeft: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: bottom\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: leftPlusBuffer,\n\t\t\t\t\ty: bottomPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\tbottomRight: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: rightMinusBuffer,\n\t\t\t\t\ty: bottom,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: bottomPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\tleftTop: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: top,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: left,\n\t\t\t\t\ty: topPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\tleftBottom: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: bottomMinusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: left,\n\t\t\t\t\ty: bottom\n\t\t\t\t}\n\t\t\t},\n\t\t\tleft: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: topMinusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: leftPlusBuffer,\n\t\t\t\t\ty: bottomPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\tbottom: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: bottom\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: bottomPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\tright: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: rightMinusBuffer,\n\t\t\t\t\ty: topPlusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: bottomPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\ttop: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: left,\n\t\t\t\t\ty: topMinusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: right,\n\t\t\t\t\ty: top\n\t\t\t\t}\n\t\t\t},\n\t\t\tinner: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: left,\n\t\t\t\t\ty: top,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: right,\n\t\t\t\t\ty: bottom\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getWindowBoundingBox(bounds) {\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: bounds.left,\n\t\t\t\ty: bounds.top\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: bounds.right,\n\t\t\t\ty: bounds.bottom\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic between(params) {\n\t\tvar min = params.min,\n\t\t\tmax = params.max,\n\t\t\tnum = params.num,\n\t\t\tinclusive = params.inclusive;\n\t\tif (inclusive) {\n\t\t\treturn num >= min && num <= max;\n\t\t}\n\t\treturn num > min && num < max;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} window1 {description}\n\t* @param  {type} window2 {description}\n\t* @return {type} {description}\n\t*/\n\tstatic intersectBoundingBoxes(window1, window2) {\n\t\tif (window1.max.x < window2.min.x) { return false; } // 1 is left of 2\n\t\tif (window1.min.x > window2.max.x) { return false; } // 1 is right of 2\n\t\tif (window1.max.y < window2.min.y) { return false; } // 1 is above 2\n\t\tif (window1.min.y > window2.max.y) { return false; } // 1 is below 2\n\t\treturn true; // boxes overlap\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} num {description}\n\t* @param  {type} pct {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getPct(num, pct) {\n\t\treturn pct * num;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} num {description}\n\t* @param  {type} pct {description}\n\t* @return {type} {description}\n\t*/\n\tstatic scaleProportionately(num, pct) {\n\t\treturn Math.floor(num + this.getPct(num, pct));\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} num1 {description}\n\t* @param  {type} num2 {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getPercentChange(num1, num2) {\n\t\tvar pctChange = Math.abs(((num1 - num2) / (num1)));\n\t\tif (num2 < num1) {\n\t\t\tpctChange = - pctChange;\n\t\t}\n\t\treturn pctChange;\n\t}\n\n\t/**\n\t * Gets the area of the overlap between two rectangles.\n\t * @param {*} rect1\n\t * @param {*} rect2\n\t */\n\tstatic getOverlap(rect1, rect2) {\n\t\tlet x_overlap = Math.max(0, Math.min(rect1.right, rect2.right) - Math.max(rect1.left, rect2.left));\n\t\tlet y_overlap = Math.max(0, Math.min(rect1.bottom, rect2.bottom) - Math.max(rect1.top, rect2.top));\n\t\treturn x_overlap * y_overlap;\n\t}\n\n\t/**\n\t * Checks if point is in box (inclusive)\n\t * @param {*} point\n\t * @param {*} box\n\t */\n\tstatic isPointInBox(point, box) {\n\t\tif (point.left) point.x = point.left;\n\t\tif (point.top) point.y = point.top;\n\t\tif (!box.right) box.right = box.left + box.width;\n\t\tif (!box.bottom) box.bottom = box.top + box.height;\n\t\tif (point.x >= box.left && point.x <= box.right && point.y >= box.top && point.y <= box.bottom) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Clip A with B. return where the boxes don't intersect.\n\t * @param {DockableBox} rectA\n\t * @param {DockableBox} rectB\n\t *\n\t * @memberof BoxMath\n\t */\n\tstatic clipRect(rectA, rectB, edge) {\n\t\tlet clip = rectA;\n\t\tlet corners = this.getVertices(rectB);\n\t\t//This array will hold the corners of the clipping rectangle that are within the clipped rectangle's boundaries.\n\t\tlet cornersInBox = [];\n\t\tfor (let i = 0; i < corners.length; i++) {\n\t\t\tlet corner = corners[i];\n\t\t\tcorner.label = corner.label.toLowerCase();\n\t\t\t//The goal here is to detect which edges of the clipping box exists within the clipped box's boundaries - EXCLUDING the edges of the clipped box.\n\n\t\t\t/**\n\t\t\t * The A = B + C. In other words, it's our hole. B is the window that we're using to fill the hole.\n\t\t\t *\n\t\t\t\t\tIn this case, A and B share their top right and top left corners. ALl we care about here is the bottom left and bottom right of B.\n\t\t\t\t\tThe result of this function is C.\n\t\t\t \t\t+-------------------+\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|         B         |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t+-------------------+\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|         C         |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t+-------------------+\n\t\t\t * */\n\n\t\t\t//The block of code below kicks out any points on B that are corners on A.\n\t\t\tif (this.isPointInBox(corner, rectA)) {\n\t\t\t\tif (corner.label === \"bottomright\" && corner.y === rectA.bottom && corner.x === rectA.right) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (corner.label === \"bottomleft\" && corner.y === rectA.bottom && corner.x === rectA.left) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (corner.label === \"topleft\" && corner.x === rectA.left && corner.y === rectA.top) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (corner.label === \"topright\" && corner.x === rectA.right && corner.y === rectA.top) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcornersInBox.push(corner.label);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Going back to our example earlier. Remember, A is the larger box that encompasses B and C. In this case, only two corners are within A. (bottom left, bottom right).\n\t\t\t\t+-------------------+\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|         B         |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t+-------------------+\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|         C         |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t+-------------------+\n\t\t\t* */\n\t\tif (cornersInBox.length === 2) {\n\t\t\t//left edge is in box.\n\t\t\tif (cornersInBox.includes(\"topleft\") && cornersInBox.includes(\"bottomleft\")) {\n\t\t\t\tclip.right = rectB.left;\n\t\t\t} else if (cornersInBox.includes(\"topright\") && cornersInBox.includes(\"bottomright\")) {\n\t\t\t\tclip.left = rectB.right;\n\t\t\t} else {\n\t\t\t\tif (cornersInBox.includes(\"topleft\") && cornersInBox.includes(\"topright\")) {\n\t\t\t\t\tclip.bottom = rectB.top;\n\t\t\t\t} else if (cornersInBox.includes(\"bottomleft\") && cornersInBox.includes(\"bottomright\")) {\n\t\t\t\t\tclip.top = rectB.bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/****\n\t\t\t* In this case, A is the wide horizontal box. B is the tall vertical box. Their bottom left corners align at point X.\n\t\t\t*  In this case, only one corner (bottom left of B) is within the bounds of A.\n\n\t\t\t\t\t\t    B\n\t\t\t        +------------------+\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t+---------------------------------------------------------------------+\n\t\t\t\t\t|                  |                                                  |\n\t\t\t\t\t|                  |                                                  |\n\t\t\t\t\t|                  |                                                  |\n\t\t\t\t\t|                  |                  CLIP                            |  A\n\t\t\t\t\t|                  |                                                  |\n\t\t\t\t\t|                  |                                                  |\n\t\t\t\t\t+------------------+--------------------------------------------------+\n\t\t\t\t   X\n\t\t\t */\n\n\t\t\tconst ISLEFTORRIGHT = edge === \"left\" || edge === \"right\";\n\t\t\tconst ISTOPORBOTTOM = edge === \"top\" || edge === \"bottom\";\n\t\t\tif (cornersInBox.includes(\"topleft\")) {\n\n\t\t\t\tif (ISTOPORBOTTOM) {\n\t\t\t\t\tclip.right = rectB.left;\n\t\t\t\t\tif (rectB.top > rectA.bottom) {\n\t\t\t\t\t\tclip.bottom = rectB.top;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclip.left = rectB.left;\n\t\t\t\t\tif (rectB.top < rectA.bottom) {\n\t\t\t\t\t\tclip.bottom = rectB.top;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (cornersInBox.includes(\"topright\")) {\n\t\t\t\tif (ISTOPORBOTTOM) {\n\t\t\t\t\tclip.left = rectB.right;\n\t\t\t\t\tif (rectB.top > rectA.bottom) {\n\t\t\t\t\t\tclip.bottom = rectB.top;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclip.right = rectB.right;\n\t\t\t\t\tif (rectB.top < rectA.bottom) {\n\t\t\t\t\t\tclip.bottom = rectB.top;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (cornersInBox.includes(\"bottomleft\")) {\n\n\n\t\t\t\tif (ISLEFTORRIGHT) {\n\t\t\t\t\tif (rectB.bottom > rectA.top) {\n\t\t\t\t\t\tclip.top = rectB.bottom;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclip.right = rectB.left;\n\t\t\t\t\tif (rectB.bottom < rectA.top) {\n\t\t\t\t\t\tclip.top = rectB.bottom;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (ISLEFTORRIGHT) {\n\t\t\t\t\tif (rectB.bottom > rectA.top) {\n\t\t\t\t\t\tclip.top = rectB.bottom;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclip.left = rectB.right;\n\t\t\t\t\tif (rectB.bottom < rectA.top) {\n\t\t\t\t\t\tclip.top = rectB.bottom;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tclip.width = clip.right - clip.left;\n\t\tclip.height = clip.bottom - clip.top;\n\t\treturn clip;\n\t}\n\n}\nexport default BoxMath;\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/boxMath.js","import BoxMath from \"./boxMath\";\nclass DockableBox {\n\tconstructor(bounds) {\n\t\tif (bounds) {\n\t\t\tthis.left = bounds.left;\n\t\t\tthis.top = bounds.top;\n\t\t\tthis.right = bounds.right;\n\t\t\tthis.bottom = bounds.bottom;\n\t\t\tthis.width = bounds.right - bounds.left;\n\t\t\tthis.height = bounds.bottom - bounds.top;\n\t\t\tthis.windowBoundingBox = BoxMath.getWindowBoundingBox(this.getBounds());\n\t\t\tthis.setSnappingRegions();\n\t\t}\n\t\tthis.getVertices = BoxMath.getVertices;\n\t\treturn this;\n\t}\n\t/**\n\t* @function {function name}\n\t* @param  {type} format         {description}\n\t* @param  {type} includeCorners {description}\n\t* @return {type} {description}\n\t*/\n\tgetEdges(format, includeCorners) {\n\t\tif (includeCorners === undefined || includeCorners === true) {\n\t\t\tincludeCorners = 0;\n\t\t} else {\n\t\t\tincludeCorners = 1;\n\t\t}\n\n\t\tvar top = {\n\t\t\tmin: {\n\t\t\t\tx: this.left + includeCorners,\n\t\t\t\ty: this.top\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right - includeCorners,\n\t\t\t\ty: this.top\n\t\t\t}\n\t\t};\n\t\tvar left = {\n\t\t\tmin: {\n\t\t\t\tx: this.left,\n\t\t\t\ty: this.top + includeCorners\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.left,\n\t\t\t\ty: this.bottom - includeCorners\n\t\t\t}\n\t\t};\n\t\tvar right = {\n\t\t\tmin: {\n\t\t\t\tx: this.right,\n\t\t\t\ty: this.top + includeCorners\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right,\n\t\t\t\ty: this.bottom - includeCorners\n\t\t\t}\n\t\t};\n\t\tvar bottom = {\n\t\t\tmin: {\n\t\t\t\tx: this.left + includeCorners,\n\t\t\t\ty: this.bottom\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right - includeCorners,\n\t\t\t\ty: this.bottom\n\t\t\t}\n\t\t};\n\n\t\tif (format === \"obj\") {\n\t\t\treturn {\n\t\t\t\ttop: top,\n\t\t\t\tright: right,\n\t\t\t\tbottom: bottom,\n\t\t\t\tleft: left\n\t\t\t};\n\t\t}\n\t\treturn [top, right, bottom, left];\n\t}\n\n\tgetCorners() {\n\t\treturn this.getCornerObject(this.getBounds());\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} point          {description}\n\t* @param  {type} includeCorners {description}\n\t* @return {type} {description}\n\t*/\n\tpointIsOnBoundingBox(point, includeCorners) {\n\t\t//If it's on the top or bottom edge.\n\t\tvar edges = this.getEdges(\"arr\", includeCorners);\n\n\t\tfor (var i = 0; i < edges.length; i++) {\n\t\t\tvar segment = edges[i];\n\t\t\tif (BoxMath.isPointOnSegment(point, segment)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} corner {description}\n\t* @return {type} {description}\n\t*/\n\tgetPointByVertex(corner) {\n\n\t\tcorner = corner.toLowerCase();\n\t\tvar point = {\n\t\t\tx: this.left,\n\t\t\ty: this.top\n\t\t};\n\t\tif (corner.includes(\"bottom\")) {\n\t\t\tpoint.y = this.bottom;\n\t\t}\n\t\tif (corner.includes(\"right\")) {\n\t\t\tpoint.x = this.right;\n\t\t}\n\t\treturn point;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} point     {description}\n\t* @param  {type} tolerance {description}\n\t* @return {type} {description}\n\t*/\n\tgetEdgeByPoint(point, tolerance) {\n\t\tvar edges = this.getEdges(\"obj\");\n\n\t\tfor (var edge in edges) {\n\t\t\tif (BoxMath.isPointOnSegment(point, edges[edge])) {\n\t\t\t\treturn edge;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} point     {description}\n\t* @param  {type} tolerance {description}\n\t* @return {type} {description}\n\t*/\n\tgetVertexByPoint(point, tolerance) {\n\t\tif (tolerance === undefined) {\n\t\t\ttolerance = 0;\n\t\t}\n\t\tvar corner = null, justAnEdge = true;\n\t\tif (point.y <= this.windowBoundingBox.max.y + tolerance && point.y >= this.windowBoundingBox.max.y - tolerance) {\n\t\t\tcorner = \"bottom\";\n\t\t}\n\t\tif (point.y <= this.windowBoundingBox.min.y + tolerance && point.y >= this.windowBoundingBox.min.y - tolerance) {\n\t\t\tcorner = \"top\";\n\t\t}\n\n\t\tif (!corner) {\n\t\t\treturn corner;\n\t\t}\n\n\t\tif (point.x <= this.windowBoundingBox.min.x + tolerance && point.x >= this.windowBoundingBox.min.x - tolerance) {\n\t\t\tjustAnEdge = false;\n\t\t\tcorner += \"Left\";\n\t\t}\n\n\t\tif (point.x <= this.windowBoundingBox.max.x + tolerance && point.x >= this.windowBoundingBox.max.x - tolerance) {\n\t\t\tjustAnEdge = false;\n\t\t\tcorner += \"Right\";\n\t\t}\n\t\tif (justAnEdge) {\n\t\t\treturn null;\n\t\t}\n\t\treturn corner;\n\t}\n\n\t/**\n\t* @function getSharedEdges Determines if another window has edges to which our window may snap/dock\n\t* @param  {type} win2 {description}\t\t* @param  {Window} win2 Window proxy (movement object) of other window to which our window may snap/dock\n\t* @return {type} {description}\t\t* @param  {number} tolerance Buffer region around edges to determine region for snap / dock\n\t* @return {object} Object describing shared edges, with boolean top, bottom, left, and right properties\n\t*/\n\tgetSharedEdges(win2, tolerance) {\n\t\tif (!tolerance) {\n\t\t\ttolerance = 0;\n\t\t}\n\t\t//from perspective of stationary window;\n\t\tvar sharedEdges = {\n\t\t\ttop: false,\n\t\t\tleft: false,\n\t\t\tright: false,\n\t\t\tbottom: false\n\t\t};\n\t\t// +--------------------------------+\n\t\t// |    Monitor2                    |\n\t\t// |                                |\n\t\t// |           +---------+          |\n\t\t// |           |         |          |\n\t\t// |           |  Win2   |          |\n\t\t// |           |         |          |\n\t\t// +--------------------------------+\n\t\t// |           |         |          |\n\t\t// |           | MyWindow|          |\n\t\t// |           |         |          |\n\t\t// |           +---------+          |\n\t\t// |    Monitor1                    |\n\t\t// |                                |\n\t\t// +--------------------------------+\n\t\t// Return all false if we aren't intersecting at all or snapping exactly across the monitor boundary,\n\t\t// e.g. (see above) if top of my window is snapped to bottom of the other window and the top of my other window is the top\n\t\t// of the monitor, return shared edges.\n\t\tconst intersection = BoxMath.intersectBoundingBoxes(this.buffer, win2.windowBoundingBox);\n\t\tif (\n\t\t\t!intersection || this.monitor && (\n\t\t\t\t(this.top === win2.bottom && this.top === this.monitor.top) ||\n\t\t\t\t(this.left === win2.right && this.left === this.monitor.left) ||\n\t\t\t\t(this.bottom === win2.top && this.bottom === this.monitor.bottom) ||\n\t\t\t\t(this.right === win2.left && this.right === this.monitor.right)\n\t\t\t)\n\t\t) {\n\t\t\treturn sharedEdges;\n\t\t}\n\t\tvar inRightTolerance = BoxMath.between({\n\t\t\tnum: win2.right,\n\t\t\tmin: this.left - tolerance,\n\t\t\tmax: this.left + tolerance,\n\t\t\tinclusive: true\n\t\t});\n\t\tvar inLeftTolerance = BoxMath.between({\n\t\t\tnum: win2.left,\n\t\t\tmin: this.right - tolerance,\n\t\t\tmax: this.right + tolerance,\n\t\t\tinclusive: true\n\t\t});\n\t\tvar inTopTolerance = BoxMath.between({\n\t\t\tnum: win2.top,\n\t\t\tmin: this.bottom - tolerance,\n\t\t\tmax: this.bottom + tolerance,\n\t\t\tinclusive: true\n\t\t});\n\t\tvar inBottomTolerance = BoxMath.between({\n\t\t\tnum: win2.bottom,\n\t\t\tmin: this.top - tolerance,\n\t\t\tmax: this.top + tolerance,\n\t\t\tinclusive: true\n\t\t});\n\n\t\tif (inRightTolerance) {\n\t\t\tif (win2.bottom > this.top - tolerance && win2.top < this.bottom + tolerance) {\n\t\t\t\tsharedEdges.left = true;\n\t\t\t}\n\t\t}\n\t\tif (inLeftTolerance) {\n\t\t\t//if(600 > 0 && 300 < 300)\n\t\t\tif (win2.bottom > this.top - tolerance && win2.top < this.bottom + tolerance) {\n\t\t\t\tsharedEdges.right = true;\n\t\t\t}\n\t\t}\n\n\t\tif (inBottomTolerance) {\n\t\t\tif (win2.left < this.right + tolerance && win2.right > this.left - tolerance) {\n\t\t\t\tsharedEdges.top = true;\n\n\t\t\t}\n\t\t}\n\n\t\tif (inTopTolerance) {\n\t\t\tif (win2.left < this.right + tolerance && win2.right > this.left - tolerance) {\n\t\t\t\tsharedEdges.bottom = true;\n\t\t\t}\n\t\t}\n\n\t\treturn sharedEdges;\n\t}\n\n\t/**\n\t* @function getSharedCorners Determines if another window has corners to which our window may snap/dock\n\t* @param  {type} win2 {description}\t\t* @param  {Window} win2 Window proxy (movement object) of other window to which our window may snap/dock\n\t* @return {type} {description}\t\t* @return {object} Object describing shared corners, including original vertices (topLeft, topRight, bottomRight, bottomLeft),\n\t*\t\t\t\t\tand amended vertices (rightTop, rightBottom, leftTop, leftBottom) to indicate shared tops or bottoms on\n\t*\t\t\t\t\ton the left or right.\n\t*/\n\tgetSharedCorners(win2) {\n\t\tvar sharedCorners = {\n\t\t\ttopLeft: false,\n\t\t\ttopRight: false,\n\t\t\tbottomLeft: false,\n\t\t\tbottomRight: false,\n\n\t\t\t//distinction is in the placement. a window placed to the side and top aligned would share the rightTop corner, but not the topRight\n\t\t\trightTop: false,\n\t\t\trightBottom: false,\n\t\t\tleftTop: false,\n\t\t\tleftBottom: false\n\t\t};\n\n\n\t\t// +--------------------------------+\n\t\t// |    Monitor2                    |\n\t\t// |                                |\n\t\t// |           +---------+          |\n\t\t// |           |         |          |\n\t\t// |           |  Win2   |          |\n\t\t// |           |         |          |\n\t\t// +--------------------------------+\n\t\t// |           |         |          |\n\t\t// |           | MyWindow|          |\n\t\t// |           |         |          |\n\t\t// |           +---------+          |\n\t\t// |    Monitor1                    |\n\t\t// |                                |\n\t\t// +--------------------------------+\n\t\t// Return all false if we aren't intersecting at all or snapping exactly across the monitor boundary,\n\t\t// e.g. (see above) if top of my window is snapped to bottom of the other window and the top of my other window is the top\n\t\t// of the monitor, return shared edges.\n\t\tconst intersection = (!BoxMath.intersectBoundingBoxes(this.innerBuffer, win2.windowBoundingBox) && BoxMath.intersectBoundingBoxes(this.buffer, win2.windowBoundingBox));\n\t\tif (\n\t\t\t!intersection || this.monitor && (\n\t\t\t\t(this.top === win2.bottom && this.top === this.monitor.top) ||\n\t\t\t\t(this.left === win2.right && this.left === this.monitor.left) ||\n\t\t\t\t(this.bottom === win2.top && this.bottom === this.monitor.bottom) ||\n\t\t\t\t(this.right === win2.left && this.right === this.monitor.right)\n\t\t\t)\n\t\t) {\n\t\t\treturn sharedCorners;\n\t\t}\n\t\tlet myCorners = BoxMath.getVertices(this.getBounds());\n\t\tlet theirCorners = BoxMath.getVertices(win2);\n\t\tmyCorners.forEach(corner => {\n\t\t\tfor (var i = 0; i < theirCorners.length; i++) {\n\t\t\t\tvar theirCorner = theirCorners[i];\n\t\t\t\tif (corner.x === theirCorner.x && corner.y === theirCorner.y) {\n\t\t\t\t\tsharedCorners[corner.label] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tvar sharedEdges = {\n\t\t\tbottom: this.bottom === win2.bottom || this.bottom === win2.top,\n\t\t\ttop: this.top === win2.top || this.top === win2.bottom,\n\t\t\tright: this.right === win2.left || this.right === win2.right,\n\t\t\tleft: this.left === win2.right || this.left === win2.left\n\t\t};\n\t\tvar sideTop = false, sideBottom = false;\n\t\tif (this.top === win2.top) {\n\t\t\tsideTop = true;\n\t\t}\n\t\tif (this.bottom === win2.bottom) {\n\t\t\tsideBottom = true;\n\t\t}\n\t\tif (sharedEdges.right) {\n\t\t\tif (sideTop) {\n\t\t\t\tsharedCorners.rightTop = true;\n\t\t\t}\n\t\t\tif (sideBottom) {\n\t\t\t\tsharedCorners.rightBottom = true;\n\t\t\t}\n\t\t}\n\n\t\tif (sharedEdges.left) {\n\t\t\tif (sideBottom) {\n\t\t\t\tsharedCorners.leftBottom = true;\n\t\t\t}\n\t\t\tif (sideTop) {\n\t\t\t\tsharedCorners.leftTop = true;\n\t\t\t}\n\t\t}\n\n\t\treturn sharedCorners;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tgetBounds() {\n\t\treturn {\n\t\t\tleft: this.left,\n\t\t\tright: this.right,\n\t\t\ttop: this.top,\n\t\t\tbottom: this.bottom,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t};\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} req {description}\n\t* @return {type} {description}\n\t*/\n\tgetCornerObject(req) {\n\t\tlet corners = {};\n\t\tlet vertices = BoxMath.getVertices(req);\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tlet corner = vertices[i];\n\t\t\tcorners[corner.label] = corner;\n\t\t}\n\t\treturn corners;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} mouse {description}\n\t* @return {type} {description}\n\t*/\n\tgetGrabbedEdge(mouse) {\n\t\t//window.methodCalls[\"getGrabbedEdge\"]++;\n\t\tvar tolerance = 15;\n\t\tvar mouseBox = {\n\t\t\tmin: {\n\t\t\t\tx: mouse.x - tolerance,\n\t\t\t\ty: mouse.y - tolerance\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: mouse.x + tolerance,\n\t\t\t\ty: mouse.y + tolerance\n\t\t\t}\n\t\t};\n\t\tvar edges = [\"top\", \"bottom\", \"left\", \"right\"];\n\t\tfor (var i = 0; i < edges.length; i++) {\n\t\t\tvar edge = edges[i];\n\t\t\tif (BoxMath.intersectBoundingBoxes(mouseBox, this.snappingRegions[edge])) {\n\t\t\t\treturn edge;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} request {description}\n\t* @return {type} {description}\n\t*/\n\tgetResizeHandle(request) {\n\t\tif (this.resizeHandle) {\n\t\t\treturn this.resizeHandle;\n\t\t}\n\t\tvar resizeHandle;\n\t\tif (request.mousePosition) {\n\t\t\tresizeHandle = this.getVertexByPoint(request.mousePosition, 15);\n\t\t\tif (!resizeHandle) {\n\t\t\t\tresizeHandle = this.getGrabbedEdge(request.mousePosition);\n\t\t\t}\n\t\t}\n\n\t\tif (!resizeHandle) {\n\t\t\tif (request.top !== this.top) {\n\t\t\t\tresizeHandle = \"top\";\n\t\t\t\tif (request.right !== this.right) {\n\t\t\t\t\tresizeHandle = \"topRight\";\n\t\t\t\t} else if (request.left !== this.left) {\n\t\t\t\t\tresizeHandle = \"topLeft\";\n\t\t\t\t}\n\n\t\t\t} else if (request.right !== this.right) {\n\t\t\t\tresizeHandle = \"right\";\n\t\t\t\tif (request.bottom !== this.bottom) {\n\t\t\t\t\tresizeHandle = \"bottomRight\";\n\t\t\t\t} else if (request.top !== this.top) {\n\t\t\t\t\tresizeHandle = \"topRight\";\n\t\t\t\t}\n\t\t\t} else if (request.bottom !== this.bottom) {\n\t\t\t\tresizeHandle = \"bottom\";\n\n\t\t\t\tif (request.left !== this.left) {\n\t\t\t\t\tresizeHandle = \"bottomLeft\";\n\t\t\t\t} else if (request.right !== this.right) {\n\t\t\t\t\tresizeHandle = \"bottomRight\";\n\t\t\t\t}\n\t\t\t} else if (request.left !== this.left) {\n\t\t\t\tresizeHandle = \"left\";\n\t\t\t\tif (request.top !== this.top) {\n\t\t\t\t\tresizeHandle = \"topLeft\";\n\t\t\t\t} else if (request.bottom !== this.bottom) {\n\t\t\t\t\tresizeHandle = \"bottomLeft\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resizeHandle && request.changeType !== 0) {\n\t\t\t//if we didn't find a resizeHandle, then no edges moved. Send last handle.\n\t\t\tthis.resizeHandle = resizeHandle;\n\t\t} else if (!resizeHandle && request.changeType === 0) {\n\t\t\tresizeHandle = \"top\";\n\t\t}\n\t\treturn resizeHandle;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bufferSize {description}\n\t* @return {type} {description}\n\t*/\n\tsetBuffer(bufferSize) {\n\t\tif (bufferSize === undefined && this.bufferSize === null) {\n\t\t\treturn;\n\t\t} else if (bufferSize !== undefined) {\n\t\t\tthis.bufferSize = bufferSize;\n\t\t} else {\n\t\t\tbufferSize = this.bufferSize;\n\t\t}\n\t\tthis.buffer = {\n\t\t\tmin: {\n\t\t\t\tx: this.left - bufferSize,\n\t\t\t\ty: this.top - bufferSize\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right + bufferSize,\n\t\t\t\ty: this.bottom + bufferSize\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tsetSnappingRegions() {\n\t\tthis.snappingRegions = BoxMath.getSnappingRegions(this, this.bufferSize);\n\t}\n\n\tsharesACornerWith(win) {\n\t\tvar sharedCorners = this.getSharedCorners(win);\n\t\tvar corners = [\"topLeft\", \"topRight\", \"rightTop\", \"leftTop\", \"bottomRight\", \"bottomLeft\", \"rightBottom\", \"leftBottom\"];\n\t\tfor (var i = 0; i < corners.length; i++) {\n\t\t\tvar corner = corners[i];\n\t\t\tif (sharedCorners[corner]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} win {description}\n\t* @return {type} {description}\n\t*/\n\tsharesAnEdgeWith(win) {\n\t\tvar sharedEdges = this.getSharedEdges(win);\n\n\t\tvar edges = [\"top\", \"right\", \"left\", \"bottom\"];\n\t\tfor (var i = 0; i < edges.length; i++) {\n\t\t\tvar edge = edges[i];\n\t\t\tif (sharedEdges[edge]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} request {description}\n\t* @return {type} {description}\n\t*/\n\tcanSnapToWindow(request) {\n\t\tif (this.sharesAnEdgeWith(request)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn BoxMath.intersectBoundingBoxes(this.buffer, request.windowBoundingBox) && !BoxMath.intersectBoundingBoxes(this.innerBuffer, request.windowBoundingBox);\n\n\t}\n}\nexport default DockableBox;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockableBox.js","import { ObjectPool } from \"./ObjectPool\";\nimport { WindowPool } from \"./WindowPool\";\n\nimport Logger from \"../../../../clients/logger\";\n\nconst dependencies = {\n\tLogger\n}\nconst GroupPoolSingleton = new ObjectPool(\"GroupPoolSingleton\", dependencies);\nconst MonitorPoolSingleton = new ObjectPool(\"MonitorPoolSingleton\", dependencies);\n//Generic list of all windows that the windowService knows about. Contains finsemble windows\nconst WindowPoolSingleton = new ObjectPool(\"WindowPoolSingleton\", dependencies);\n\n//Specific pool of dockable windows.\nconst DockingPoolSingleton = new WindowPool(\"DockingPoolSingleton\", dependencies);\nexport {\n\tGroupPoolSingleton,\n\tWindowPoolSingleton,\n\tMonitorPoolSingleton,\n\tDockingPoolSingleton\n}\n\n\n// WEBPACK FOOTER //\n// src/services/window/Common/Pools/PoolSingletons.ts","\n\nexport const EDGES = [\"top\", \"left\", \"bottom\", \"right\"];\nexport const CORNERS = [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"];\nexport const MINIMUM_HEIGHT = 32;\nexport const MINIMUM_WIDTH = 98;\nexport const OPPOSITE_EDGE_MAP = {\n\tleft: \"right\",\n\tright: \"left\",\n\ttop: \"bottom\",\n\tbottom: \"top\",\n\ttopLeft: \"bottomRight\",\n\ttopRight: \"bottomLeft\",\n\tbottomLeft: \"topRight\",\n\tbottomRight: \"topLeft\"\n};\nexport const SPLIT_HANDLE_MAP = {\n\tbottomLeft: [\"bottom\", \"left\"],\n\tbottomRight: [\"bottom\", \"right\"],\n\tleftBottom: [\"left\", \"bottom\"],\n\trightBottom: [\"right\", \"bottom\"],\n\ttopRight: [\"top\", \"right\"],\n\ttopLeft: [\"top\", \"left\"],\n\trightTop: [\"right\", \"top\"],\n\tleftTop: [\"left\", \"top\"],\n\tleft: [\"left\"],\n\tright: [\"right\"],\n\ttop: [\"top\"],\n\tbottom: [\"bottom\"]\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/constants.js","/** Singleton of the Logger class shared among all instances of ObjectPool\n * @TODO Refactor to instance member of class.\n */\nlet Logger;\nexport class ObjectPool {\n\tobjects: any;\n\tpoolName: string;\n\tconstructor(name: string, dependencies: { Logger: any }) {\n\t\tif (dependencies) {\n\t\t\tLogger = dependencies.Logger;\n\t\t} else {\n\t\t\tthrow new Error(\"ObjectPool class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.\");\n\t\t}\n\t\tthis.objects = {};\n\t\tthis.poolName = name;\n\t}\n\n\tget(name, throwError = true) {\n\t\tvar result;\n\t\tif (!this.objects.hasOwnProperty(name)) {\n\t\t\tif (throwError && name && !(name.toLowerCase().includes(\"finsemble\") || name.toLowerCase().includes(\"service\"))) {\n\t\t\t\tLogger.system.warn(`${this.poolName} pool.get failed for ${name}`);\n\t\t\t}\n\t\t} else {\n\t\t\tresult = this.objects[name];\n\t\t}\n\t\treturn result;\n\t}\n\n\tremove(name) {\n\t\tLogger.system.debug(`${this.poolName} pool.remove for ${name}`);\n\t\tif (!this.objects.hasOwnProperty(name)) {\n\t\t\tLogger.system.warn(`${this.poolName} pool.remove operating on non-existent value for ${name}`);\n\t\t}\n\n\t\tdelete this.objects[name];\n\t}\n\n\tadd(name, obj) {\n\t\tLogger.system.debug(`${this.poolName} pool.add for ${name}`);\n\t\tif (this.objects.hasOwnProperty(name)) {\n\t\t\tLogger.system.warn(`${this.poolName} pool.add overwriting existing value for ${name}`);\n\t\t}\n\n\t\tthis.objects[name] = obj;\n\t}\n\n\t*iterator() {\n\t\tfor (let name in this.objects) {\n\t\t\tlet obj = this.get(name);\n\t\t\tyield obj;\n\t\t}\n\t}\n\tgetAll() {\n\t\treturn this.objects;\n\t}\n}\n\n\n// WEBPACK FOOTER //\n// src/services/window/Common/Pools/ObjectPool.ts","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.debounce/index.js\n// module id = 66\n// module chunks = 0 1 5","import { each as asyncEach, forEach as asyncForEach } from \"async\";\nimport * as CONSTANTS from \"../constants\";\n/** Singleton of the Logger class shared among all instances of ObjectPool\n * @TODO Refactor to instance member of class.\n */\nlet Logger;\nconst groupStates = {\n\tNORMAL: 0,\n\tMINIMIZING: 1,\n\tMINIMIZED: 2,\n\tRESTORING: 3\n};\nexport class WindowGroup {\n\t/**\n\t *\n\t * @param {object} params Params\n\t * @param {string} params.name name of the group\n\t * @param {object} params.windows array of windows in the group\n\t * @param {object} dependencies Dependency object that provides a Logger.\n\t * @param {Logger} dependencies.Logger\n\t */\n\tconstructor(params, dependencies) {\n\t\tLogger = dependencies.Logger;\n\t\tthis.name = params.name;\n\t\tthis.groupState = groupStates.NORMAL;\n\t\tthis.GROUPSTATES = groupStates;\n\t\tif (params.windows) {\n\t\t\tthis.windows = params.windows;\n\t\t} else {\n\t\t\tthis.windows = {};\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tdelete this.windows;\n\t\tdelete this.name;\n\t}\n\n\tsetWindows(windows) {\n\t\tthis.windows = windows;\n\t}\n\n\tgetWindows() {\n\t\treturn this.windows;\n\t}\n\n\taddWindow(win) {\n\t\tLogger.system.debug(\"windowGroup.addWindow\", win.name);\n\t\tthis.windows[win.name] = win;\n\t}\n\n\t/**\n\t *\n\t * @param {*} arr either a window name or window identifier or a list of window names or identifiers\n\t */\n\tremoveWindows(arr, cb = Function.prototype) {\n\t\tvar windowName;\n\t\tif (!Array.isArray(arr)) {\n\t\t\tarr = [arr];\n\t\t}\n\t\tvar self = this;\n\t\tarr.forEach(function (win) {\n\t\t\tif (typeof win === \"string\" || win instanceof String) {\n\t\t\t\twindowName = win;\n\t\t\t} else {\n\t\t\t\twindowName = win.windowName || win.name;\n\t\t\t}\n\t\t\tLogger.system.debug(\"windowGroup.removeWindows\", windowName);\n\n\t\t\tif (this.windows[windowName]) {\n\t\t\t\tdelete self.windows[windowName];\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}, this);\n\t\tcb();\n\t}\n\n\t/**\n\t *\n\t * @param {*} win either a window name or window identifier\n\t */\n\tgetWindow(win) {\n\t\tif (typeof win === \"string\" || win instanceof String) { //we have a window name\n\t\t\treturn this.windows[win];\n\t\t}  // we have an identifier\n\t\tif (win && (win.windowName || win.name)) {\n\t\t\treturn this.windows[win.windowName || win.name];\n\t\t}\n\t\treturn null;\n\n\n\t}\n\n\tgetWindowNames() {\n\t\tlet names = [];\n\t\tfor (let name in this.windows) {\n\t\t\tnames.push(name);\n\t\t}\n\t\treturn names;\n\t}\n\n\taddWindows(arr) {\n\t\tif (!Array.isArray(arr)) {\n\t\t\tarr = [arr];\n\t\t}\n\t\tvar self = this;\n\t\tarr.forEach(function (win) {\n\t\t\tLogger.system.debug(\"windowGroup.addWindows\", win.name);\n\n\t\t\tself.windows[win.name] = win;\n\t\t}, this);\n\t}\n\n\tgetWindowArray() {\n\t\tlet arr = [];\n\t\tfor (let windowName in this.windows) {\n\t\t\tarr.push(this.windows[windowName]);\n\t\t}\n\t\treturn arr;\n\t}\n\n\tminimizeAll() {\n\t\tif (this.groupState == groupStates.RESTORING) {\n\t\t\tthis.interruptRestore = true;\n\t\t\tthis.groupState = groupStates.NORMAL;\n\t\t}\n\t\tif (this.groupState !== groupStates.NORMAL) return;\n\t\tthis.groupState = groupStates.MINIMIZING;\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet win = this.windows[windowName];\n\t\t\tif (win.windowState != CONSTANTS.WINDOWSTATE.MINIMIZED) win.minimize();\n\t\t}\n\t\tthis.groupState = groupStates.MINIMIZED;\n\t\tthis.interruptRestore = false;\n\t}\n\n\tminimize(params) {\n\t\tif (!params) { return this.minimizeAll(); }\n\t\tlet { windowList, componentType } = params;\n\t\tif (componentType) windowList = this.findAllByComponentType(componentType);\n\n\t\tfor (let w of windowList) {\n\t\t\tlet win;\n\t\t\tif (!(typeof w === \"string\" || w instanceof String)) {\n\t\t\t\twin = this.getWindow(w.windowName || w.name);\n\t\t\t} else {\n\t\t\t\twin = this.getWindow(w);\n\t\t\t}\n\t\t\tif (win && win.windowState != CONSTANTS.WINDOWSTATE.MINIMIZED) {\n\t\t\t\twin.minimize();\n\t\t\t}\n\t\t}\n\t}\n\n\trestoreAll(cb = Function.prototype) {\n\t\tif (this.groupState !== groupStates.MINIMIZED) return cb();\n\t\tvar self = this;\n\t\tthis.groupState = groupStates.RESTORING;\n\t\tfunction restoreWindow(windowName, done) {\n\t\t\tif (self.interruptRestore) return done(\"restore interrupted\");\n\t\t\tlet win = self.windows[windowName];\n\t\t\tif (win.restore) {\n\t\t\t\t// if win.win exists, we're in a dockableGroup of dockalbeWindows\n\t\t\t\tlet windowState = win.win ? win.win.windowState : win.windowState;\n\t\t\t\tif (windowState != CONSTANTS.WINDOWSTATE.NORMAL) {\n\t\t\t\t\t// The dockableWindow only takes a single parameter...a callback.\n\t\t\t\t\tif (win.win) {\n\t\t\t\t\t\twin.restore(done);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// All other window wraps accept 2 params for restore.\n\t\t\t\t\t\twin.restore({}, done);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLogger.system.error(windowName + \" does not implement restore\");\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\t\tasyncForEach(Object.keys(this.windows), restoreWindow, function (err, data) {\n\t\t\tself.interruptRestore = false;\n\t\t\tif (!err) {\n\t\t\t\tself.groupState = groupStates.NORMAL;\n\t\t\t}\n\t\t\tcb(err, data);\n\t\t});\n\t}\n\t//takes an array of window names.\n\trestore(params, cb) {\n\t\tlet { windowList } = params;\n\t\tvar self = this;\n\t\tfunction restoreWindow(windowName, done) {\n\t\t\tlet win = self.windows[windowName];\n\t\t\tif (win.restore) {\n\t\t\t\tself.windows[windowName].restore({}, done);\n\t\t\t} else {\n\t\t\t\tLogger.system.error(windowName + \" does not implement restore\");\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\t\tasyncForEach(windowList, restoreWindow, cb);\n\t}\n\n\t/**\n\t * Brings a group of windows to the front (BTF). In other words, puts those windows on top of any other windows so that they can be seen\n\t * @param {object} params\n\t * @param {bool=true} params.restoreWindows If true then windows will attempt to be restored (un-minimized) before being brought to front\n\t * @param {array} params.windowList The list of windows to BTF. Defaults to the windows that are in this window group. This can be a list of window names, or a list of actual window instances.\n\t * @param {string} params.componentType Optionally provide a componentType to BTF only those windows of that type in the list of windows.\n\t */\n\tbringToFront(params, cb = Function.prototype) {\n\t\tvar self = this;\n\t\tif (!params) params = {};\n\t\tif (typeof (params.restoreWindows) == \"undefined\") params.restoreWindows = true;\n\n\t\t// TODO, [terry] this \"windowList\" logic is copy and pasted many times in windowGroup.js. It should be in a helper function.\n\t\tlet { windowList, componentType } = params;\n\t\t// Determine if the windowList is a list of window names, or a list of actual windows (in which case we extract the name)\n\t\tif (windowList && typeof windowList[0] !== \"string\") {\n\t\t\twindowList = windowList.map(win => win.windowName);\n\t\t}\n\n\t\t// Get all windows *in this group* of this component type, then convert them into an array of strings to be passed into the other group functions.\n\t\tif (componentType) {\n\t\t\twindowList = [];\n\t\t\tlet windows = this.findAllByComponentType(componentType);\n\t\t\twindows.forEach(win => {\n\t\t\t\tif (win && win.name) {\n\t\t\t\t\twindowList.push(win.name);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Default to the windows in this group, actually the most common case\n\t\tif (!windowList) windowList = Object.keys(this.windows);\n\n\t\tfunction doBTF() {\n\t\t\t// TODO, [terry] this chunk of code is repeated three times in windowGroup.js. It should be abstracted away\n\t\t\t// TODO, [Sidd] this code now uses async, previously was not using using the callback properly. Make all group functions do this\n\n\t\t\tasyncEach(windowList, (w, callback) => {\n\t\t\t\tlet win;\n\t\t\t\t//if (Array.isArray(windowList)) w = windowList[w];\n\n\t\t\t\tif (!(typeof w === \"string\" || w instanceof String)) {\n\t\t\t\t\twin = self.getWindow(w.windowName || w.name);\n\t\t\t\t} else {\n\t\t\t\t\twin = self.getWindow(w);\n\t\t\t\t}\n\t\t\t\tif (win) {\n\t\t\t\t\twin.bringToFront(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}, () => { cb(); });\n\t\t}\n\n\t\tif (params.restoreWindows) {\n\t\t\tif (typeof windowList[0] !== \"string\") {\n\t\t\t\twindowList = Object.keys(windowList);\n\t\t\t}\n\t\t\tthis.restore({ windowList }, doBTF);\n\t\t} else {\n\t\t\tdoBTF();\n\t\t}\n\n\n\t}\n\n\thyperFocus(params) {\n\t\tlet windowList = params.windowList;\n\t\t// If we got a list of identifiers, convert to names\n\t\tfor (let w in windowList) {\n\t\t\tlet win = windowList[w];\n\t\t\tif (!(typeof win === \"string\" || win instanceof String)) {\n\t\t\t\twindowList[w] = win.windowName || win.name;\n\t\t\t}\n\t\t}\n\n\t\t// If we are trying to hyper focus a stack make sure to also include the children\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\tlet parent = win.getParent();\n\t\t\t// If window is in a stack and the stack is in the windowList but this window is not, add it.\n\t\t\tif (parent && windowList.includes(parent.name) && !windowList.includes(windowName)) {\n\t\t\t\twindowList.push(windowName);\n\t\t\t}\n\t\t}\n\n\t\tfor (let windowName in this.windows) {\n\t\t\tif (!windowList.includes(windowName)) {\n\t\t\t\tthis.windows[windowName].minimize();\n\t\t\t} else {\n\t\t\t\tthis.windows[windowName].restore(() => {\n\t\t\t\t\tthis.windows[windowName].bringToFront();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tfindAllByComponentType(componentType) {\n\t\tvar windowList = [];\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet theWindow = this.windows[windowName];\n\t\t\tlet descriptor = theWindow.windowDescriptor;\n\t\t\tif (componentType === (descriptor.component ? descriptor.component.type : descriptor.customData.component.type)) { //TODO - figure out why this is different in some cases\n\t\t\t\twindowList.push(this.windows[windowName]);\n\t\t\t}\n\t\t}\n\t\treturn windowList;\n\t}\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/window/windowGroup.js","import { ObjectPool } from \"./ObjectPool\";\n\nclass WindowPool extends ObjectPool {\n\t*iterator() {\n\t\tfor (let windowName in this.objects) {\n\t\t\tlet win = this.get(windowName);\n\t\t\tif (!win.isMinimized && !win.isHidden) {\n\t\t\t\tyield win;\n\t\t\t}\n\t\t}\n\t}\n}\nexport { WindowPool }\n\n\n// WEBPACK FOOTER //\n// src/services/window/Common/Pools/WindowPool.ts","import { WindowGroup } from \"../../../common/window/windowGroup\";\nimport DockableBox from \"./dockableBox\";\nimport { clone } from \"../../../common/disentangledUtils\";\nimport { CORNERS, EDGES, OPPOSITE_EDGE_MAP } from \"./constants\";\nimport BoxMath from \"./boxMath\";\nimport debounce from \"lodash.debounce\";\n/** Singleton of the Logger class shared among all instances of DockableGroup\n * @TODO Refactor to instance member of class.\n */\nlet Logger;\nconst debounceTime = 300;\n\nclass DockableGroup extends WindowGroup {\n\t/**\n\t *\n\t * @param {*} config Config for the group. See WindowGroup for more.\n\t * @param {*} dependencies Dependency object that provides a Logger.\n\t */\n\tconstructor(config, dependencies) {\n\t\tsuper(config, dependencies);\n\t\tif (dependencies) {\n\t\t\tLogger = dependencies.Logger;\n\t\t} else {\n\t\t\tthrow new Error(\"DockableGroup class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.\");\n\t\t}\n\t\tthis.setMinimums(config);\n\t\tthis.name = config.name;\n\t\tthis.isMovable = typeof config.isMovable !== \"undefined\" ? config.isMovable : false;\n\t\t/** A mapping from window names to their previous alwaysOnTop state.\n\t\t * Allows us to set window back to the way they were when they leave\n\t\t * the group.\n\t\t */\n\t\tthis.ungroupedAlwaysOnTopState = config.ungroupedAlwaysOnTopState || {};\n\t\tthis.windowBoundingBox = {\n\t\t\tmin: {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0\n\t\t\t}\n\t\t};\n\n\t\t//Number of time's we've tried to fill a particular time. It's limited to 20 attempts to prevent infinite loops. Logs are emitted if we get into that state. Better to throw a warning than an infinite loop.\n\t\tthis.fillAttempts = 0;\n\t\t// Add all dockableBox methods to this\n\t\tthis.dockableBox = new DockableBox();\n\t\tthis.inheritDockableBox();\n\t\tthis.removeWindow = this.removeWindow.bind(this);\n\t\tthis.handleAlwaysOnTopChange = this.handleAlwaysOnTopChange.bind(this);\n\t\t// Will wait 300 ms after every request before moving the group. This gives time for events to arrive from the other windows in the group\n\t\t// The function will only be called after this amount of time has passed with no requests.\n\t\t// Since the OS doesn't care if a group stays together, we need to move the group after the OS is finished moving all windows\n\t\tthis.performDeferredSystemMove = debounce(this.performDeferredSystemMove.bind(this), debounceTime);\n\t\tthis.deferredWindowMoves = [];\n\t}\n\n\t/**\n\t * Fired when the alwaysOnTop of a window in the group changes.\n\t * Sets all windows in the group to the new value.\n\t */\n\thandleAlwaysOnTopChange({ data: { alwaysOnTop } }) {\n\t\tfor (const groupWin of Object.values(this.windows)) {\n\t\t\tconst currentAlwaysOnTop = groupWin.isAlwaysOnTop();\n\t\t\tif (currentAlwaysOnTop != alwaysOnTop) groupWin.alwaysOnTop(alwaysOnTop);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the JSON representation of the group (stored on the workspace).\n\t */\n\tgetJSON() {\n\t\tconst windowNames = this.getWindowNames();\n\t\tconst topRightWindow = windowNames.length ? this.getMoveAnchor(\"BottomLeft\").name : null;\n\n\t\treturn {\n\t\t\twindowNames,\n\t\t\tisMovable: this.isMovable,\n\t\t\tisAlwaysOnTop: this.isAlwaysOnTop,\n\t\t\ttopRightWindow,\n\t\t\tisARectangle: this.isARectangle(),\n\t\t\tungroupedAlwaysOnTopState: this.ungroupedAlwaysOnTopState\n\t\t};\n\t}\n\n\t/**\n\t * Responds to system events when the OS has moved a group. Every time a window in this group triggers this function a shared array will\n\t * be updated with that window and it's bounds. After each update, request the group move.\n\t * If this function is triggered again within a certain time, the group move will continue to be delayed until enough time passes without\n\t * any windows events. Ideally the group will only move when all windows in the group with changes have responded to events.\n\t * @param {*} windowObject - Contains the window name and it's updated bounds\n\t * @param {*} calculator - an instance of docking calculator\n\t */\n\tdeferSystemMove(windowObject, calculator) {\n\t\tthis.deferredWindowMoves.push(windowObject);\n\t\tthis.performDeferredSystemMove(calculator, this.deferredWindowMoves);\n\t}\n\n\n\t/**\n\t * Requests the group move. Uses an array of windows in the group and their bounds to choose which window's bounds to use for the group move.\n\t * Intended to move a group after the monitor configuration has changed as the OS may not keep the group intact when it is moved.\n\t *\n\t * @param {*} calculator\n\t * @param {*} deferredWindowMoves array of windowobjects to be used for the move.\n\t */\n\tperformDeferredSystemMove(calculator, deferredWindowMoves) {\n\t\tLogger.system.verbose(\"dockableGroup.performDeferredSystemMove: Windows in group with bounds updates\", deferredWindowMoves);\n\t\tlet bounds;\n\t\tconst anchors = [\n\t\t\tthis.getMoveAnchor(\"BottomRight\"),\n\t\t\tthis.getMoveAnchor(\"BottomLeft\"),\n\t\t\tthis.getMoveAnchor(\"TopRight\"),\n\t\t\tthis.getMoveAnchor(\"TopLeft\")\n\t\t];\n\n\t\t// Choose one window to be the move anchor. To make sure the group stays intact the updated bounds of only one window\n\t\t// is used when moving the group, the rest of the group will be moved to relative to this \"move anchor\".\n\t\t// That window needs to be in one of the corner positions of the group.\n\t\tfor (let i = 0; i < anchors.length; i++) {\n\t\t\tconst windowObject = deferredWindowMoves.find((win) => { return win.name === anchors[i].name; });\n\t\t\tif (windowObject) {\n\t\t\t\tbounds = windowObject.bounds;\n\t\t\t\tbounds.anchor = anchors[i];\n\t\t\t\tbounds.systemMoved = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Reset the shared array of window moves for this group.\n\t\t// This function will either be passed this object or another locally constructed object.\n\t\t// Either way we want to empty this array so window bounds are only for the current event.\n\t\tthis.deferredWindowMoves = [];\n\n\t\tif (!bounds) {\n\t\t\tLogger.system.debug(\"dockableGroup.performDeferredSystemMove: no window was found that matched a move anchor, returning without moving a group\");\n\t\t\treturn;\n\t\t}\n\t\t// When a group straddles a monitor the OS will move the overlapping windows fully onto one monitor.\n\t\t// This causes the group to break because we don't allow grouping on monitor edge.\n\t\t// In some cases, the move anchor will be unchanged, even though other windows in the group have moved.\n\t\t// This just means the old bounds of the move anchor are still valid.\n\t\t// By shifting the bounds by one pixel, we insure that the move request is processed, and the group will\n\t\t// be fully attached.\n\t\tObject.keys(bounds).forEach(key => { if ([\"right\", \"left\", \"top\", \"bottom\"].includes(key)) bounds[key]++; });\n\t\tthis.moveTo(bounds);\n\t\tcalculator.eliminateGaps();\n\t}\n\n\n\tinheritDockableBox() {\n\t\tvar self = this;\n\t\tvar dockableBoxMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(this.dockableBox)).filter(function (p) {\n\t\t\tif (p != \"constructor\") {\n\t\t\t\treturn typeof self.dockableBox[p] === \"function\";\n\t\t\t}\n\t\t\treturn false;\n\n\t\t});\n\t\tfor (let i = 0; i < dockableBoxMethods.length; i++) {\n\t\t\tlet methodName = dockableBoxMethods[i];\n\t\t\tif (!this[methodName]) {\n\t\t\t\tthis[methodName] = function () {\n\t\t\t\t\treturn self.dockableBox[methodName].call(self, ...arguments);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\taddWindow(win) {\n\t\tif (Object.keys(this.windows).length === 0) {\n\t\t\tthis.windowBoundingBox = clone(win.windowBoundingBox, Logger.system.error);\n\t\t}\n\t\tif (this.isMovable) win.win._updateOptions({\n\t\t\toptions: {\n\t\t\t\t\"taskbarIconGroup\": this.name\n\t\t\t}\n\t\t});\n\t\tsuper.addWindows(win);\n\n\t\tthis.updateBounds();\n\t\tif (this.isMovable) this.bringToFront({ restoreWindows: false });\n\n\t\t// alwaysOnTop setup\n\t\tif (this.isMovable) {\n\t\t\twin.win.addEventListener(\"alwaysOnTop\", this.handleAlwaysOnTopChange);\n\t\t\tconst winIsAlwaysOnTop = win.isAlwaysOnTop();\n\t\t\t// Keep a record of the windows prev alwaysOnTop state\n\t\t\t// In the case of reloading a workspace, the names will already be there,\n\t\t\t// and we don't want to clobber the old state.\n\t\t\tif (!(win.name in this.ungroupedAlwaysOnTopState)) {\n\t\t\t\tthis.ungroupedAlwaysOnTopState[win.name] = winIsAlwaysOnTop;\n\t\t\t}\n\t\t\t// If, after adding this window, any of the windows in the group are alwaysOnTop\n\t\t\t// then all of the windows need to be alwaysOnTop.\n\t\t\tconst anyWindowsAlwaysOnTop = Object.values(this.windows).some((groupWin) => groupWin.isAlwaysOnTop());\n\t\t\tif (anyWindowsAlwaysOnTop) {\n\t\t\t\tif (winIsAlwaysOnTop) {\n\t\t\t\t\t// If this window is already on top, we still need to check the other windows.\n\t\t\t\t\tthis.handleAlwaysOnTopChange({ data: { alwaysOnTop: true } });\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, we need to set this window to always on top.\n\t\t\t\t\twin.alwaysOnTop(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateBounds() {\n\t\tlet groupBounds = this.calculateOuterBounds();\n\t\tif (!groupBounds) {\n\t\t\treturn;\n\t\t}\n\t\tthis.windowBoundingBox = groupBounds;\n\t\tthis.setBuffer();\n\t\tthis.setBounds({\n\t\t\tleft: groupBounds.min.x,\n\t\t\ttop: groupBounds.min.y,\n\t\t\tright: groupBounds.max.x,\n\t\t\tbottom: groupBounds.max.y\n\t\t});\n\t}\n\n\tsaveIndividualWindowStates() {\n\t\tlet windowList = this.getWindows();\n\t\tfor (let windowName in windowList) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\twin.win.saveCompleteWindowState();\n\t\t}\n\t}\n\n\tstartMove() {\n\t\tlet windowList = this.getWindows();\n\t\tfor (let windowName in windowList) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\twin.win.startMove();\n\t\t}\n\t}\n\tstopMove() {\n\t\tlet windowList = this.getWindows();\n\t\tfor (let windowName in windowList) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\twin.win.stopMove();\n\t\t}\n\t}\n\tgetWindowsOnEdges() {\n\t\tlet windowsOnSegment = {};\n\t\tlet windowList = this.getWindows();\n\t\tfor (let windowName in windowList) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\tfor (let i = 0; i < EDGES.length; i++) {\n\t\t\t\tlet edge = EDGES[i];\n\t\t\t\tif (win[edge] === this[edge]) {\n\t\t\t\t\twindowsOnSegment[win.name] = win;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn windowsOnSegment;\n\t}\n\n\tisARectangle() {\n\t\tthis.updateBounds();\n\t\tlet windows = this.getWindows();\n\t\tlet groupArea = this.width * this.height;\n\t\tlet windowArea = 0;\n\t\tfor (let windowName in windows) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\twindowArea += (win.width * win.height);\n\t\t}\n\t\treturn groupArea === windowArea;\n\t}\n\n\t/**\n\t * When you move a group of windows left to right, the anchor algorithm finds the left-most window, and then sorts all of the windows on how close they are to that window. This function just finds the appropriate anchor for that move.\n\t * @param {*} movingDirection\n\t */\n\tgetMoveAnchor(movingDirection) {\n\n\t\tconst DIMENSIONAL_MAP = {\n\t\t\tLeftTop: {\n\t\t\t\tprimaryDimension: \"bottom\",\n\t\t\t\tsecondaryDimension: \"right\",\n\t\t\t},\n\t\t\tLeftBottom: {\n\t\t\t\tprimaryDimension: \"top\",\n\t\t\t\tsecondaryDimension: \"right\",\n\t\t\t},\n\t\t\tTopLeft: {\n\t\t\t\tprimaryDimension: \"right\",\n\t\t\t\tsecondaryDimension: \"bottom\"\n\t\t\t},\n\t\t\tBottomLeft: {\n\t\t\t\tprimaryDimension: \"right\",\n\t\t\t\tsecondaryDimension: \"top\"\n\t\t\t},\n\t\t\tRightTop: {\n\t\t\t\tprimaryDimension: \"bottom\",\n\t\t\t\tsecondaryDimension: \"left\",\n\t\t\t},\n\t\t\tRightBottom: {\n\t\t\t\tprimaryDimension: \"top\",\n\t\t\t\tsecondaryDimension: \"left\"\n\t\t\t},\n\t\t\tTopRight: {\n\t\t\t\tprimaryDimension: \"left\",\n\t\t\t\tsecondaryDimension: \"bottom\"\n\t\t\t},\n\t\t\tBottomRight: {\n\t\t\t\tprimaryDimension: \"left\",\n\t\t\t\tsecondaryDimension: \"top\"\n\t\t\t},\n\t\t\tRight: {\n\t\t\t\tprimaryDimension: \"left\",\n\t\t\t\tsecondaryDimension: \"top\"\n\t\t\t},\n\t\t\tLeft: {\n\t\t\t\tprimaryDimension: \"right\",\n\t\t\t\tsecondaryDimension: \"top\"\n\t\t\t},\n\t\t\tTop: {\n\t\t\t\tprimaryDimension: \"top\",\n\t\t\t\tsecondaryDimension: \"left\"\n\t\t\t},\n\t\t\tBottom: {\n\t\t\t\tprimaryDimension: \"bottom\",\n\t\t\t\tsecondaryDimension: \"left\"\n\t\t\t}\n\t\t};\n\t\t//Had this happen but not reliably. Possible that it fires when the window isn't moving at all and the direction isn't set. Stopgap.\n\t\tif (!DIMENSIONAL_MAP[movingDirection]) {\n\t\t\tconsole.debug(`\"${movingDirection}\" is not a valid argument. Valid options are ${Object.keys(DIMENSIONAL_MAP).join(\", \")}.`);\n\t\t\treturn \"NotMoving\";\n\t\t}\n\n\t\tlet { primaryDimension, secondaryDimension } = DIMENSIONAL_MAP[movingDirection];\n\t\tlet windowArray = this.getWindowArray();\n\t\t//Sorts on the primary dimension; if they're tied, it sorts on the secondary dimension.\n\t\treturn windowArray.sort((a, b) => {\n\t\t\tlet aDim = a[primaryDimension], bDim = b[primaryDimension], comparingDimension = primaryDimension;\n\t\t\tif (aDim === bDim) {\n\t\t\t\taDim = a[secondaryDimension];\n\t\t\t\tbDim = b[secondaryDimension];\n\t\t\t\tcomparingDimension = secondaryDimension;\n\t\t\t}\n\n\t\t\tif (comparingDimension === \"top\" || comparingDimension === \"left\") {\n\t\t\t\t//Will order the array in ascending order.\n\t\t\t\t//In OpenFin's virtual screen, the top-left is the 0,0 point (though it could be (-2000, 2000), or whatever). The higher the top or left, the further to the right the window is. The higher the top number, the closer to the bottom of the screen the window is.\n\t\t\t\treturn aDim - bDim;\n\t\t\t}\n\t\t\t//sort the array in descending order.\n\t\t\t//The higher the right value, the closer the window is to the right of the screen. The higher the bottom number, the closer it is to the toolbar/top of the monitor.\n\t\t\treturn bDim - aDim;\n\n\t\t})[0];\n\n\t}\n\n\t/**\n\t * Used for resize. Grabs the windows on the opposite side of the resize handle.\n\t* @function {function name}\n\t* @param  {type} handle {description}\n\t* @return {type} {description}\n\t*/\n\tgetAnchors(handle) {\n\t\tlet edges = {\n\t\t\ttop: \"bottom\",\n\t\t\tright: \"left\",\n\t\t\tbottom: \"top\",\n\t\t\tleft: \"right\"\n\t\t};\n\n\t\tlet edgeArray = handle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\n\t\tlet anchorNames = [];\n\t\tlet self = this;\n\n\t\tfor (let windowName in this.windows) {\n\t\t\tif (anchorNames.includes(windowName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet win = this.windows[windowName];\n\t\t\tlet isAnchor = true;\n\t\t\tedgeArray.forEach((requestedEdge) => {\n\t\t\t\tlet edge = edges[requestedEdge];\n\t\t\t\tif (win[edge] !== self[edge]) {\n\t\t\t\t\tisAnchor = false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (isAnchor) {\n\t\t\t\tanchorNames.push(windowName);\n\t\t\t}\n\t\t}\n\n\t\treturn anchorNames;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tcalculateOuterBounds() {\n\t\tlet groupBounds = null;\n\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet win = this.windows[windowName];\n\t\t\t// sometimes we get into a state where right and bottom are not set so groups break regtangularity.\n\t\t\tif (!win.right) win.right = win.left + win.width;\n\t\t\tif (!win.bottom) win.bottom = win.top + win.height;\n\t\t\tif (!groupBounds) {\n\t\t\t\tgroupBounds = {\n\t\t\t\t\tmin: {\n\t\t\t\t\t\tx: win.left,\n\t\t\t\t\t\ty: win.top\n\t\t\t\t\t},\n\t\t\t\t\tmax: {\n\t\t\t\t\t\tx: win.right,\n\t\t\t\t\t\ty: win.bottom\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Did some testing and this is much faster than ternary operators.\n\t\t\tif (win.left < groupBounds.min.x) {\n\t\t\t\tgroupBounds.min.x = win.left;\n\t\t\t}\n\n\t\t\tif (win.top < groupBounds.min.y) {\n\t\t\t\tgroupBounds.min.y = win.top;\n\t\t\t}\n\n\t\t\tif (win.bottom > groupBounds.max.y) {\n\t\t\t\tgroupBounds.max.y = win.bottom;\n\t\t\t}\n\n\t\t\tif (win.right > groupBounds.max.x) {\n\t\t\t\tgroupBounds.max.x = win.right;\n\t\t\t}\n\t\t}\n\t\treturn groupBounds;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} name {description}\n\t* @return {type} {description}\n\t*/\n\tremoveWindow(name, updateAOT = true) {\n\t\tconst win = this.getWindow(name);\n\t\tif (this.isMovable) {\n\t\t\twin.win._updateOptions({\n\t\t\t\toptions: {\n\t\t\t\t\ttaskbarIconGroup: win.win.uuid\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Clean up alwaysOnTop state\n\t\t\t// remove the listener\n\t\t\t// Set the window's alwaysOnTop back to its previous state.\n\t\t\twin.win.removeEventListener(\"alwaysOnTop\", this.handleAlwaysOnTopChange);\n\t\t\tif (updateAOT) {\n\t\t\t\twin.alwaysOnTop(this.ungroupedAlwaysOnTopState[win.name]);\n\t\t\t}\n\t\t\t// On workspace reload, the window will be removed then added back.\n\t\t\t// We want the ungroupedAlwaysOnTopState to stick around in that case,\n\t\t\t// so we don't delete it from the object on remove. Window names are unique\n\t\t\t// so there's no risk of collision.\n\t\t}\n\n\t\tsuper.removeWindows(name);\n\t\tthis.updateBounds();\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds {description}\n\t* @return {type} {description}\n\t*/\n\tgetDelta(bounds) {\n\t\treturn {\n\t\t\tleft: bounds.left - this.left,\n\t\t\tright: bounds.right - this.right,\n\t\t\theight: bounds.height - this.height,\n\t\t\twidth: bounds.width - this.width\n\t\t};\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds {description}\n\t* @return {type} {description}\n\t*/\n\tsetBounds(bounds) {\n\t\tthis.left = bounds.left;\n\t\tthis.right = bounds.right;\n\t\tthis.bottom = bounds.bottom;\n\t\tthis.top = bounds.top;\n\t\tthis.width = bounds.right - bounds.left;\n\t\tthis.height = bounds.bottom - bounds.top;\n\t\tthis.vertices = this.getCornerObject(bounds);\n\t}\n\t//Leaving here in case we discover bugs in the new scale.\n\tdeprecatedScale(newBounds, anchor, calculator, cb) {\n\t\tif (typeof newBounds.right === \"undefined\") {\n\t\t\tnewBounds.right = newBounds.left + newBounds.width;\n\t\t\tnewBounds.bottom = newBounds.top + newBounds.height;\n\t\t}\n\t\tvar splitHandle = anchor.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\n\t\tlet groupIter = calculator.groupWindowIterator(this, splitHandle[0]);\n\t\tvar movements = {};\n\t\tfor (let win of groupIter) {\n\t\t\twin.onGroupEdge = {};\n\t\t\twin.resizeHandle = splitHandle[0];\n\t\t\t[\"top\", \"right\", \"left\", \"bottom\"].forEach((handle) => {\n\t\t\t\tif (win[handle] === this[handle]) {\n\t\t\t\t\twin.onGroupEdge[handle] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar newHeight = Math.round(newBounds.height * (win.height / this.height));\n\t\t\tvar newWidth = Math.round(newBounds.width * (win.width / this.width));\n\t\t\tvar request = win.getBounds();\n\t\t\trequest.width = newWidth;\n\t\t\trequest.height = newHeight;\n\t\t\trequest.right = request.left + request.width;\n\t\t\trequest.bottom = request.top + request.height;\n\t\t\trequest.name = win.name;\n\n\t\t\tmovements[request.name] = calculator.checkShortCircuits(request);\n\t\t}\n\t\tsplitHandle.forEach((handle) => {\n\t\t\tgroupIter = calculator.groupWindowIterator(this);\n\t\t\t//cleans up the edges of the group in case rounding error messed us up.\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[handle];\n\t\t\tfor (var win of groupIter) {\n\t\t\t\tvar moveRequest = movements[win.name];\n\t\t\t\tif (win.onGroupEdge && win.onGroupEdge[oppEdge] && moveRequest[oppEdge] !== newBounds[oppEdge]) {\n\t\t\t\t\tmoveRequest.name = win.name;\n\t\t\t\t\tmoveRequest[oppEdge] = newBounds[oppEdge];\n\t\t\t\t\tif (oppEdge === \"bottom\") {\n\t\t\t\t\t\tmoveRequest.top = moveRequest.bottom - moveRequest.height;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"top\") {\n\t\t\t\t\t\tmoveRequest.bottom = moveRequest.top + moveRequest.height;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"left\") {\n\t\t\t\t\t\tmoveRequest.right = moveRequest.left + moveRequest.width;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"right\") {\n\t\t\t\t\t\tmoveRequest.left = moveRequest.right - moveRequest.width;\n\t\t\t\t\t}\n\t\t\t\t\tmoveRequest.width = moveRequest.right - moveRequest.left;\n\t\t\t\t\tmoveRequest.height = moveRequest.bottom - moveRequest.top;\n\t\t\t\t\tmovements[win.name] = calculator.checkShortCircuits(moveRequest, win);\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\n\t\tfor (var windowName in movements) { //TODO: make the actual move only happen once. Looks like it happens here and in group.UpdateBounds\n\t\t\tcalculator.moveWindow(movements[windowName]);\n\t\t}\n\n\t\tvar alreadyDanced = [];\n\t\tsplitHandle.forEach((handle) => {\n\t\t\tvar groupIter = calculator.groupWindowIterator(this);\n\t\t\talreadyDanced = [];\n\t\t\tfor (let anchor of groupIter) {\n\t\t\t\tif (!alreadyDanced.includes(anchor.name)) {\n\t\t\t\t\tvar b = doTheConga(anchor, handle); b;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// group.updateBounds();\n\t\t\tgroupIter = calculator.groupWindowIterator(this);\n\t\t\t//cleans up the edges of the group in case rounding error messed us up.\n\t\t\tfor (var win of groupIter) {\n\t\t\t\tif (win.onGroupEdge && win.onGroupEdge[handle] && win[handle] !== newBounds[handle]) {\n\t\t\t\t\tvar moveRequest = win.getBounds();\n\t\t\t\t\tmoveRequest.name = win.name;\n\t\t\t\t\tmoveRequest[handle] = newBounds[handle];\n\n\t\t\t\t\tmoveRequest.width = moveRequest.right - moveRequest.left;\n\t\t\t\t\tmoveRequest.height = moveRequest.bottom - moveRequest.top;\n\n\t\t\t\t\tcalculator.moveWindow(calculator.checkShortCircuits(moveRequest, win));\n\t\t\t\t\tvar b = doTheConga(win, handle); b;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tthis.updateBounds();\n\t\t});\n\n\t\tif (cb) cb();\n\n\t\tfunction doTheConga(win, handle) {\n\t\t\tif (!win) {\n\t\t\t\tLogger.system.warn(\"INVESTIGATE: No win passed to doTheConga\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[handle];\n\n\t\t\tfor (var i = 0, len = win.snappedWindows.length; i < len; i++) {\n\t\t\t\tvar snappedWindowObj = win.snappedWindows[i];\n\t\t\t\tvar snappedWin = calculator.getWindow(snappedWindowObj.name);\n\t\t\t\tif (!snappedWin) {\n\t\t\t\t\tLogger.system.warn(`INVESTIGATE: No Dockable Window found for ${snappedWindowObj.name}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet groupIntersection = snappedWin.groupNames.some(name => win.groupNames.includes(name));\n\t\t\t\tif (!snappedWindowObj.edges[handle] || !groupIntersection) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar req = snappedWin.getBounds();\n\t\t\t\treq.name = snappedWin.name;\n\n\t\t\t\tsnappedWin[oppEdge] = win[handle];\n\t\t\t\tvar top = snappedWin.top, left = snappedWin.left;\n\t\t\t\tif (handle === \"top\") {\n\t\t\t\t\ttop = win.top - snappedWin.height;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"bottom\") {\n\t\t\t\t\ttop = win.bottom;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"right\") {\n\t\t\t\t\tleft = win.right;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"left\") {\n\t\t\t\t\tleft = win.left - snappedWin.width;\n\t\t\t\t}\n\n\t\t\t\tsnappedWin.moveTo(left, top);\n\t\t\t\tvar b = doTheConga(snappedWin, handle); b;\n\t\t\t\talreadyDanced.push(snappedWin.name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {bounds} newBounds Bounds to scale the group to\n\t * @param {string} anchor\n\t * @param {DockingCalculator} calculator\n\t * @param {function} cb\n\t */\n\tscale(newBounds, anchor, calculator, cb) {\n\t\t//If you go bananas and try to make the group have negative height or width, many problems arise. Check to make sure the bounds aren't negative or too tiny.\n\t\tnewBounds = calculator.checkShortCircuits(newBounds, this);\n\t\tlet windowList = this.getWindowArray().map(win => {\n\t\t\treturn {\n\t\t\t\t...win.getBounds(),\n\t\t\t\tname: win.name\n\t\t\t};\n\t\t});\n\t\tlet scaleDescriptor = DockableGroup.getScaleDescriptor(this.getBounds(), newBounds);\n\t\t///eventually Fix this. Right now it'll just go to the top left.\n\t\tlet corners = JSON.parse(JSON.stringify(this.vertices));\n\t\tfor (let corner in corners) {\n\t\t\tcorners[corner.toLowerCase()] = corners[corner];\n\t\t}\n\n\t\tlet anchorPoint = {};\n\t\t//The \"Anchor\" Is where the group is offset by. It's a point. Top/left is a misnomer. After scaling, each window will be shifted by deltaX and deltaY, where the delta is the distance between that window's top left and the anchor's point.\n\t\tif (EDGES.includes(anchor)) {\n\t\t\tanchorPoint.top = newBounds.top;\n\t\t\tanchorPoint.left = newBounds.left;\n\t\t\tswitch (anchor) {\n\t\t\t\tcase \"left\":\n\t\t\t\t\t// When resizing from the left, we want to make sure the right edge of the group doesn't move.\n\t\t\t\t\tanchorPoint.left = newBounds.right;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"top\":\n\t\t\t\t\t// When resizing from the top, we want to make sure the bottom edge of the group doesn't move.\n\t\t\t\t\tanchorPoint.top = newBounds.bottom;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (CORNERS.includes(anchor)) {\n\t\t\t//Get the opposite corner; that's the anchor.\n\t\t\t//e.g., when resizing from the top right, the bottom left shouldn't move at all.\n\t\t\tlet corner = corners[OPPOSITE_EDGE_MAP[anchor]];\n\t\t\tanchorPoint = {\n\t\t\t\ttop: corner.y,\n\t\t\t\tleft: corner.x\n\t\t\t};\n\t\t}\n\t\t//Pass in the list of windows and how we much we want to scale it. This returns a list of mutated window bounds objects.\n\t\tlet scaledWindowList = DockableGroup.getScaledWindowList({\n\t\t\twindowList,\n\t\t\tscaleDescriptor,\n\t\t\tanchor: anchorPoint,\n\t\t\tMINIMUM_HEIGHT: this.MINIMUM_WINDOW_HEIGHT,\n\t\t\tMINIMUM_WIDTH: this.MINIMUM_WINDOW_WIDTH\n\t\t});\n\n\t\t//Actually move the windows.\n\t\tscaledWindowList.forEach(scaledBounds => {\n\t\t\tcalculator.moveWindow(scaledBounds);\n\t\t});\n\t\tvar windowBounds = {};\n\n\t\tthis.getWindowArray()\n\t\t\t.forEach(win => windowBounds[win.name] = win.getBounds());\n\n\t\t/**\n\t\t * 8/13/19 JC: Added true to the end to set 'triggerByAutoArrange', this will tell the calculator to move the group and to save the bounds\n\t\t */\n\t\tcalculator.cleanupSharedEdges(this, windowBounds, true);\n\n\t\tthis.updateBounds();\n\t}\n\n\t/**\n\t * Sets the minimum height and width for windows. This is used when scaling windows. It prevents us from creating very tiny windows when scaling an entire group.\n\t * @param {object} cfg\n\t * @param {number} cfg.MINIMUM_HEIGHT Minimum height a window can scale to.\n\t * @param {number} cfg.MINIMUM_WIDTH Minimum width a window can scale to.\n\t */\n\tsetMinimums(cfg) {\n\t\tif (cfg) {\n\t\t\tthis.MINIMUM_WINDOW_HEIGHT = cfg.MINIMUM_HEIGHT;\n\t\t\tthis.MINIMUM_WINDOW_WIDTH = cfg.MINIMUM_WIDTH;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array of windows that have an edge on a given line segment.\n\t * @param {object} segment\n\t * @param {object} segment.min minimum point for the line segment.\n\t * @param {number} segment.min.x X coordinate for the minimum point for the line segment.\n\t * @param {number} segment.min.y y coordinate for the minimum point for the line segment.\n\t * @param {object} segment.min maximum point for the line segment.\n\t * @param {number} segment.max.x X coordinate for the maximum point for the line segment.\n\t * @param {number} segment.max.y y coordinate for the maximum point for the line segment.\n\t * @returns {array} windowsOnSegment Array of dockable windows that have an edge on the line segment.\n\t */\n\tgetWindowsOnSegment(segment) {\n\t\tvar windowsOnSegment = [];\n\t\tvar winPool = this.getWindowNames();\n\t\tvar points = [segment.min, segment.max];\n\n\t\tfor (var i = 0; i < winPool.length; i++) {\n\t\t\tlet win = this.getWindow(winPool[i]);\n\t\t\tfor (var p = 0, len = points.length; p < len; p++) {\n\t\t\t\tvar point = points[p];\n\t\t\t\tif (win.pointIsOnBoundingBox(point)) {\n\t\t\t\t\tlet snapObj = {\n\t\t\t\t\t\tname: win.name,\n\t\t\t\t\t\tedge: win.getEdgeByPoint(point)\n\t\t\t\t\t};\n\t\t\t\t\tsnapObj.segment = win.getEdges(\"obj\")[snapObj.edge];\n\t\t\t\t\twindowsOnSegment.push(snapObj);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn windowsOnSegment;\n\t}\n\n\t/**\n\t* Not sure why this function doesn't use the one above. Similar functionality, but you can pass in a string instead of a line segment.\n\t* @todo, make it use the function above.\n\t* @param  {dockableWindow} win\n\t* @param  {string} edge E.g., 'left', 'right', etc.\n\t* @return {array}\n\t*/\n\tgetWindowsOnEdge(win, edge, includeCorners) {\n\t\tif (includeCorners === undefined) {\n\t\t\tincludeCorners = false;\n\t\t}\n\t\tvar windowsOnEdge = [];\n\t\tif (!edge) {\n\n\t\t\t//@todo, what went wrong to cause this.................\n\t\t\treturn [];\n\t\t}\n\n\t\tvar oppEdge = OPPOSITE_EDGE_MAP[edge];\n\t\tvar windowSegment = win.getEdges(\"obj\", includeCorners)[edge];\n\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet possibleSnapper = this.windows[windowName];\n\t\t\tif (possibleSnapper.name === win.name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet segment = possibleSnapper.getEdges(\"obj\", includeCorners)[oppEdge];\n\n\t\t\tvar shouldPush = false;\n\n\t\t\tlet points = [{\n\t\t\t\tname: possibleSnapper.name,\n\t\t\t\tval: segment.min\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: possibleSnapper.name,\n\t\t\t\tval: segment.max\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: win.name,\n\t\t\t\tval: windowSegment.min\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: win.name,\n\t\t\t\tval: windowSegment.max\n\t\t\t}];\n\n\t\t\tif ([\"top\", \"bottom\"].includes(edge)) {\n\t\t\t\tif (segment.min.y !== windowSegment.min.y) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpoints = points.sort((a, b) => {\n\t\t\t\t\treturn b.val.x - a.val.x;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ([\"left\", \"right\"].includes(edge)) {\n\t\t\t\tif (segment.min.x !== windowSegment.min.x) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpoints = points.sort((a, b) => {\n\t\t\t\t\treturn b.val.y - a.val.y;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (points[0].name !== points[1].name) {\n\t\t\t\tshouldPush = true;\n\t\t\t}\n\n\t\t\tif (shouldPush) {\n\t\t\t\tlet snapObj = {\n\t\t\t\t\tname: possibleSnapper.name,\n\t\t\t\t\tedge: oppEdge\n\t\t\t\t};\n\t\t\t\twindowsOnEdge.push(snapObj);\n\t\t\t}\n\t\t}\n\n\t\treturn windowsOnEdge;\n\t}\n\n\t/**\n\t * Given a hole, this function recursively fills the hole, expanding 1 window at a time - until the hole is filled.\n\t * @param {object} hole\n\t * @param {*} cb\n\t */\n\tfillHole(hole, cb = Function.prototype) {\n\t\tthis.fillAttempts++;\n\n\t\tlet myHole = new DockableBox(hole);\n\n\t\t//First, we need to see which windows in this group border our hole.\n\n\t\t//Get the edges in array format, don't include corners in the calculations.\n\t\tlet edges = myHole.getEdges(\"arr\", false);\n\t\tlet candidates = edges.map((edge) => this.getWindowsOnSegment(edge));\n\n\t\t//flatten the array.\n\t\tcandidates = [].concat.apply([], candidates);\n\t\t//If we have no windows bordering the hole, there's nothing we can do.\n\t\tif (!candidates.length) return;\n\n\t\t//We need some of the methods on the docking calculator. This isn't an ideal way to do things. Would be nice if there was some kind of bridge that could allow move requests without needing the calculator.\n\t\t//Chalk that up to a @todo\n\t\tconst calculator = this.getWindow(candidates[0].name).calculator;\n\n\t\t//Bounding box is needed for `sharesAnEdgeWith`.\n\t\tmyHole.windowBoundingBox = BoxMath.getWindowBoundingBox(myHole);\n\n\n\t\t//If the hole takes up the whole width or whole height of the group, we should scale the remaining windows to fill the hole.\n\t\tif ((myHole.width === this.width || myHole.height === this.height) && this.sharesAnEdgeWith(myHole)) {\n\t\t\tlet bounds = {};\n\t\t\t//calculates the bounds of the group prior to the hole being created.\n\t\t\tbounds.left = Math.min(myHole.left, this.left);\n\t\t\tbounds.right = Math.max(myHole.right, this.right);\n\t\t\tbounds.top = Math.min(myHole.top, this.top);\n\t\t\tbounds.bottom = Math.max(myHole.bottom, this.bottom);\n\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\tlet edge = null;\n\n\t\t\t//These are opposite. When the window leaves the group, the bounds are updated. So here, we compare the edge of the window that left to the group. If it was on the left side of the group - the right side of that window will be butted up against the left side of the group after it leaves.\n\t\t\tif (myHole.width === this.width) {\n\t\t\t\tif (myHole.top === this.bottom) edge = \"bottom\";\n\t\t\t\tif (myHole.bottom === this.top) edge = \"top\";\n\t\t\t}\n\t\t\tif (myHole.height === this.height) {\n\t\t\t\tif (myHole.left === this.right) edge = \"right\";\n\t\t\t\tif (myHole.right === this.left) edge = \"left\";\n\t\t\t}\n\t\t\tif (!edge) {\n\t\t\t\treturn new Error(\"No edge found in fillHoles\");\n\t\t\t}\n\t\t\treturn this.scale(bounds, edge, calculator);\n\t\t}\n\n\n\t\t//Once we know that we aren't going to have to scale all of the windows, we get here.\n\t\t//The goal is to do the least amount of damage possible. So if there are 4 windows that border the hole, we will choose the one that will cascade into the fewest windows. If they all impact no other windows, we just choose the first.\n\t\tlet potentialImpact = [];\n\t\tfor (let i = 0; i < candidates.length; i++) {\n\t\t\tlet candidate = candidates[i];\n\t\t\tlet win = this.getWindow(candidate.name);\n\t\t\tlet edge = candidate.edge;\n\n\t\t\t//These are the windows that would be affected if we resized the candidate window.\n\t\t\tlet impactedWindows = this.getWindowsOnEdge(win, edge, false);\n\t\t\tcandidate.impactedWindows = impactedWindows.length;\n\t\t\tcandidate.win = win;\n\t\t\tpotentialImpact.push(candidate);\n\t\t}\n\n\t\t//Goes through and gets the window whose resize would trigger a resize on the fewest windows possible.\n\t\tlet leastImpactfulChange = potentialImpact.reduce(function (p, v) {\n\t\t\treturn (p.impactedWindows < v.impactedWindows ? p : v);\n\t\t});\n\n\t\t//Which edge we're resizing.\n\t\tlet impactedEdge = leastImpactfulChange.edge;\n\t\t//Clone so we don't impact the original windows. Calculate the bounds for our window. We'll use this window if none of the other candidates are better matches.\n\t\tlet newBounds = JSON.parse(JSON.stringify(leastImpactfulChange.win.getBounds()));\n\t\tnewBounds[impactedEdge] = myHole[impactedEdge];\n\t\tnewBounds.height = newBounds.bottom - newBounds.top;\n\t\tnewBounds.width = newBounds.right - newBounds.left;\n\n\n\t\t//We'll use this later.\n\t\tlet holeArea = hole.width * hole.height;\n\t\tlet leastImpactfulArea = newBounds.width * newBounds.height;\n\t\tfor (let i = 0; i < candidates.length; i++) {\n\t\t\tlet candidate = candidates[i];\n\t\t\tlet proposedBounds = JSON.parse(JSON.stringify(candidate.win.getBounds()));\n\t\t\tlet proposedImpactedEdge = candidate.edge;\n\t\t\tproposedBounds[proposedImpactedEdge] = myHole[proposedImpactedEdge];\n\t\t\tproposedBounds.height = proposedBounds.bottom - proposedBounds.top;\n\t\t\tproposedBounds.width = proposedBounds.right - proposedBounds.left;\n\t\t\tlet candidateArea = proposedBounds.height * proposedBounds.width;\n\n\t\t\t//If the candidateArea is less than the holeArea, if the candidateArea is larger than the currently chosen window, and resizing it would cause no more damage than the currently chosen window, it becomes the window to resize.\n\t\t\tif (candidateArea - holeArea > 0 && candidateArea > leastImpactfulArea && candidate.impactedWindows <= leastImpactfulChange.impactedWindows) {\n\t\t\t\tleastImpactfulChange = candidate;\n\t\t\t\tleastImpactfulArea = candidateArea;\n\t\t\t\timpactedEdge = proposedImpactedEdge;\n\t\t\t\tnewBounds = proposedBounds;\n\t\t\t}\n\t\t}\n\t\t//Once we have the window that will cause the least amount of damage, we create a moveRequest to pass to docking. This will be a resize, and it will cascade onto other affected windows.\n\t\tnewBounds.changeType = 1;\n\t\tnewBounds.name = leastImpactfulChange.win.name;\n\t\tnewBounds.resizeHandle = impactedEdge;\n\t\tnewBounds.forceResizeHandle = true;\n\t\tcalculator.requestMove(newBounds, () => {\n\t\t\tthis.updateBounds();\n\n\t\t\t//If we only partially filled the hole, calculate the remaining hole, and call recursively.\n\t\t\tif (!this.isARectangle()) {\n\t\t\t\tif (this.fillAttempts === 20) {\n\t\t\t\t\tlet windowBounds = JSON.stringify(this.getWindowArray().map((win) => win.getBounds()));\n\t\t\t\t\tLogger.system.warn(\"forceObjectsToLogger\", \"FillHoles failed after 20 attempts. Use first string for test case. Second string is hole\", windowBounds, JSON.stringify(myHole.getBounds()));\n\t\t\t\t\tthis.fillAttempts = 0;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet leftovers = BoxMath.clipRect(myHole, new DockableBox(newBounds), impactedEdge);\n\t\t\t\tthis.fillHole(leftovers);\n\t\t\t} else {\n\t\t\t\tcalculator.onMouseUp();\n\t\t\t\tthis.fillAttempts = 0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\n\t}\n\n\tmoveTo(bounds, cb = Function.prototype) {\n\t\t//System moves should already have an anchor window defined. For other moves set choose the top-left window.\n\t\tif (!bounds.anchor) {\n\t\t\tLogger.system.verbose(\"dockableGroup.moveTo: No bounds anchor predefined, defaulting to bottomRight move anchor\");\n\t\t\tbounds.anchor = this.getMoveAnchor(\"BottomRight\");\n\t\t}\n\n\t\t//The group move needs to be handled differently if the move was initiated by the system or auto-arrange.. If a user moved the group neither of these values will be set.\n\t\tconst params = { systemMoved: bounds.systemMoved, triggeredByAutoArrange: bounds.triggeredByAutoArrange };\n\t\tconst calculator = bounds.anchor.calculator;\n\t\tbounds.name = bounds.anchor.name;\n\t\tbounds.changeType = 0;\n\n\t\tcalculator.requestMove(bounds, () => {\n\t\t\tthis.updateBounds();\n\t\t\tcalculator.onMouseUp(params);\n\t\t\tcb();\n\t\t});\n\t}\n\t/**\n\t * In certain configurations, whether a group is a rectangle is _NOT_ the deciding factor in scaling it. Instead, that decision is made based on whether the user is dragging a corner or an edge. If it's a corner, it must not be on another window's edge. If those conditions are met, we scale the group. This function returns the list of x,y points that will trigger this behavior.\n\t */\n\tgetCornersThatCauseScaling() {\n\t\tlet { corners, edges } = this.getCornersAndEdgesOfAllWindows();\n\t\tlet uniqueCorners = corners.filter((value, index, self) => {\n\t\t\tlet firstOccurence = self.findIndex((val) => {\n\t\t\t\treturn val.x === value.x && val.y === value.y;\n\t\t\t});\n\t\t\treturn firstOccurence === index;\n\t\t});\n\t\tlet cornersNotOnEdges = uniqueCorners.filter(corner => {\n\t\t\tlet otherEdges = edges.filter(edge => edge.window !== corner.window);\n\t\t\treturn !otherEdges.some(edge => BoxMath.isPointOnSegment(corner, edge));\n\t\t});\n\t\treturn cornersNotOnEdges;\n\t}\n\n\t/**\n\t * @typedef cornerLabel\n\t * @param {\"topLeft\"|\"topRight\"|\"bottomLeft\"|\"bottomRight\"} Label for the corner.\n\t */\n\n\t/**\n\t * @typedef cornerObject\n\t * @param {string?} window Name of the window the corner belongs to\n\t * @param {number} x X coordinate of the corner\n\t * @param {number} y Y coordinate of the corner\n\t * @param {cornerLabel} label for the corner.\n\t */\n\t/**\n\t * @typedef edgeObject\n\t * @param {string?} window Name of the window the edge belongs to\n\t * @param {object} min Minimum point for line segment\n\t * @param {number} min.x X coordinate of the minimum point for the edge's line segment.\n\t * @param {number} min.y Y coordinate of the minimum point for the edge's line segment.\n\t * @param {object} max maximum point for line segment\n\t * @param {number} max.x X coordinate of the maximum point for the edge's line segment\n\t * @param {number} max.y Y coordinate of the maximum point for the edge's line segment\n\t */\n\t/**\n\t * @typedef {object} cornersAndEdges\n\t * @param {Array<cornerObject>} corners\n\t * @param {Array<edgeObject>} edges\n\t */\n\t/**\n\t * Helper function that will return all corners and all edges for each window in the group.\n\t * @returns {cornersAndEdges} cornersAndEdges Corners and edges.\n\n\t */\n\tgetCornersAndEdgesOfAllWindows() {\n\t\tlet edges = [];\n\n\t\tlet corners = this.getWindowArray().map(win => {\n\t\t\tlet crn = win.getVertices(win.getBounds());\n\t\t\tcrn = crn.map(c => {\n\t\t\t\tc.window = win.name;\n\t\t\t\treturn c;\n\t\t\t});\n\t\t\treturn crn;\n\t\t});\n\n\t\tcorners = corners.reduce((acc, val) => acc.concat(val));\n\n\t\tedges = this.getWindowArray().map(win => {\n\t\t\tlet edg = win.getEdges(\"arr\", true);\n\t\t\tedg = edg.map(e => {\n\t\t\t\te.window = win.name;\n\t\t\t\treturn e;\n\t\t\t});\n\t\t\treturn edg;\n\t\t});\n\t\tedges = edges.reduce((acc, val) => acc.concat(val));\n\t\treturn { corners, edges };\n\t}\n\t/**\n\t * Returns the scale of bounds 1 relative to bounds 2.\n\t * If bounds1 is 1, and bounds2 is 2, the scale will come out as 2.\n\t * If bounds1 is 10 and bounds2 is 5, the scale will come out as 0.5. This is done for both x and y\n\t * @param {bounds} bounds1\n\t * @param {bounds} bounds2\n\t */\n\tstatic getScaleDescriptor(bounds1, bounds2) {\n\t\tconst xScale = bounds2.width / bounds1.width;\n\t\tconst yScale = bounds2.height / bounds1.height;\n\t\treturn {\n\t\t\tx: xScale,\n\t\t\ty: yScale\n\t\t};\n\t}\n\n\t/**\n\t * Essentially moves the window's top-left to the x/y coordinates passed in.\n\t * @param {object} params\n\t * @param {num} params.x x coordinate of a cartesian coordinate pair.\n\t * @param {num} params.y y coordinate of a cartesian coordinate pair.\n\t * @param {bounds} params.bounds bounds object that is being offset\n\t */\n\tstatic getCoordinatesByOffset(params) {\n\t\tconst { x, y, bounds } = params;\n\t\tlet offsetX = bounds.left - x;\n\t\tlet offsetY = bounds.top - y;\n\t\tlet newBounds = {\n\t\t\ttop: bounds.top - offsetY,\n\t\t\tleft: bounds.left - offsetX\n\t\t};\n\t\tnewBounds.height = bounds.height;\n\t\tnewBounds.width = bounds.width;\n\t\tnewBounds.right = newBounds.left + bounds.width;\n\t\tnewBounds.bottom = newBounds.top + bounds.height;\n\t\treturn newBounds;\n\t};\n\t/**\n\t * Given bounds and a scaleDescriptor, returns a scaled bounds object.\n\t * @param {*} params\n\t * @param {object} params.bounds Bounds.\n\t * @param {object} params.scaleDescriptor Tells us how much to scale in the X and Y directions.\n\t * @param {num} params.scaleDescriptor.x 0-Infinity; how much to scale the window in the x direction\n\t * @param {num} params.scaleDescriptor.y 0-Infinity; how much to scale the window in the y direction\n\t * @returns {object} bounds\n\t */\n\tstatic scaleWindow(params) {\n\t\tlet { bounds, scaleDescriptor } = params;\n\n\t\t//\"move\" the window to 0,0 -- makes scaling calculations correct.\n\t\tconst scaledBounds = {\n\t\t\tleft: Math.round(bounds.left * scaleDescriptor.x),\n\t\t\ttop: Math.round(bounds.top * scaleDescriptor.y),\n\t\t\theight: Math.round(bounds.height * scaleDescriptor.y),\n\t\t\twidth: Math.round(bounds.width * scaleDescriptor.x)\n\t\t};\n\t\tscaledBounds.right = scaledBounds.left + scaledBounds.width;\n\t\tscaledBounds.bottom = scaledBounds.top + scaledBounds.height;\n\n\t\treturn scaledBounds;\n\t}\n\n\t/**\n\t * Called after performing scale operations on the group. Depending on where the user scaled the group from, we re-anchor the group so that the move makes sense. Internally, resizes are calculated as if the group was at 0,0. After we do those calculations, we need to re-anchor the group so that the move makes intuitive sense.\n\t * @param {object} params\n\t * @param {array} params.windowList Array of bounds objects. Or windows. Haven't decided.ANGLE_instanced_arrays\n\t * @param {object} params.offset object describing by how much the top and left of a window's bounds should be offset.\n\t * @param {num} params.offset.left how much to offset the left edge of each window in the group.\n\t * @param {num} params.offset.top how much to offset the left edge of each window in the group.\n\t */\n\tstatic offsetGroup(params) {\n\t\tlet { windowList, offset } = params;\n\t\treturn windowList.map(bounds => {\n\t\t\tbounds.left -= offset.left;\n\t\t\tbounds.top -= offset.top;\n\t\t\tbounds.right = bounds.left + bounds.width;\n\t\t\tbounds.bottom = bounds.top + bounds.height;\n\t\t\treturn bounds;\n\t\t});\n\t}\n\n\t/**\n\t * The workhorse of scaling operations. Given a list of windows, how we want to scale them, where to put them after scaling, and a minimum height and width, it will do everything.\n\t * 1. Moves the group to 0,0.\n\t * 2. Calculates the size of each window in the array.\n\t * 3. Actually scales each window.\n\t * 4. Makes sure no windows got too narrow or too short (check minimum height/width).\n\t * 5. Fixes any windows that were too small/too narrow.\n\t * 6. Re-anchors the group so that the move \"feels\" right. See DockableGroup.'offsetGroup' for a better explanation of what \"feels right\" means.\n\t * @param {params} params\n\t * @param {Array<bounds>} params.windowList\n\t * @param {scaleDescriptor} params.scaleDescriptor how much to scale in the x and y dimensions.\n\t * @param {num} param.scaleDescriptor.x How much to scale in the x direction\n\t * @param {num} param.scaleDescriptor.y How much to scale in the y direction\n\t * @param {object} param.anchor top/left coordinates of the 'anchor' for the list of windows. After scaling the windows, we need to make sure every window is reset to this anchor. If one resizes from the bottom right of a group, the top left of the group shouldn't change. If you resize from the top left, the bottom right shouldn't move after scaling.\n\t */\n\tstatic getScaledWindowList(params) {\n\t\tlet { windowList, scaleDescriptor, anchor, MINIMUM_HEIGHT, MINIMUM_WIDTH } = params;\n\t\t///MOVE IT TO 0,0\n\t\twindowList = this.offsetGroup({\n\t\t\twindowList,\n\t\t\toffset: {\n\t\t\t\tleft: anchor.left,\n\t\t\t\ttop: anchor.top\n\t\t\t}\n\t\t});\n\n\t\t///SCALE EVERY WINDOW\n\t\twindowList = windowList.map((bounds) => {\n\t\t\tlet scaledBounds = this.scaleWindow({\n\t\t\t\tbounds,\n\t\t\t\tscaleDescriptor\n\t\t\t});\n\n\t\t\tscaledBounds.name = bounds.name;\n\t\t\treturn scaledBounds;\n\t\t});\n\n\n\t\t//find smallest window. If it's beneath the minimum width/height, scale back out.\n\t\tlet narrowestWindow = windowList.reduce((previousWindow, currentWindow, currentIndex) => {\n\t\t\treturn previousWindow.width < currentWindow.width ? previousWindow : currentWindow;\n\t\t});\n\n\t\tlet shortestWindow = windowList.reduce((previousWindow, currentWindow, currentIndex) => {\n\t\t\treturn previousWindow.height < currentWindow.height ? previousWindow : currentWindow;\n\t\t});\n\n\t\tconst scaleWidthOut = narrowestWindow.width < MINIMUM_WIDTH;\n\t\tconst scaleHeightOut = shortestWindow.height < MINIMUM_HEIGHT;\n\n\t\t//Our narrowest window is _too_ narrow. We need to scale the group back out to make sure windows aren't too narrow.\n\t\tif (scaleWidthOut) {\n\t\t\tlet correctedBounds = JSON.parse(JSON.stringify(narrowestWindow));\n\t\t\tcorrectedBounds.width = MINIMUM_WIDTH;\n\t\t\tcorrectedBounds.right = correctedBounds.left + MINIMUM_WIDTH;\n\n\t\t\tlet newScaleDescriptor = this.getScaleDescriptor(narrowestWindow, correctedBounds);\n\t\t\twindowList = windowList.map((bounds) => {\n\t\t\t\tlet scaledBounds = this.scaleWindow({\n\t\t\t\t\tbounds,\n\t\t\t\t\tscaleDescriptor: newScaleDescriptor\n\t\t\t\t});\n\n\t\t\t\tscaledBounds.name = bounds.name;\n\t\t\t\treturn scaledBounds;\n\t\t\t});\n\t\t}\n\n\t\tif (scaleHeightOut) {\n\t\t\tlet correctedBounds = JSON.parse(JSON.stringify(shortestWindow));\n\t\t\tcorrectedBounds.height = MINIMUM_HEIGHT;\n\t\t\tcorrectedBounds.bottom = correctedBounds.top + MINIMUM_HEIGHT;\n\n\t\t\tlet newScaleDescriptor = this.getScaleDescriptor(shortestWindow, correctedBounds);\n\t\t\twindowList = windowList.map((bounds) => {\n\t\t\t\tlet scaledBounds = this.scaleWindow({\n\t\t\t\t\tbounds,\n\t\t\t\t\tscaleDescriptor: newScaleDescriptor\n\t\t\t\t});\n\t\t\t\tscaledBounds.name = bounds.name;\n\t\t\t\treturn scaledBounds;\n\t\t\t});\n\t\t}\n\t\t///MOVE IT BACK TO WHERE THE ANCHOR IS\n\t\twindowList = this.offsetGroup({\n\t\t\twindowList,\n\t\t\toffset: {\n\t\t\t\tleft: -anchor.left,\n\t\t\t\ttop: -anchor.top\n\t\t\t}\n\t\t});\n\t\treturn windowList;\n\t}\n}\n\n//DockableGroup.prototype = DockableBox;\nexport default DockableGroup;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockableGroup.js","import BoxMath from \"./boxMath\";\nimport Logger from \"../../../clients/logger\";\n\nfunction DockableMonitor(params) {\n\tlet bounds;\n\n\t//Pre-dockable components this function only took bounds. For backwards compatibility if the incoming params do now have a 'bounds' prop, we assume params = bounds\n\tif (!params.hasOwnProperty(\"bounds\")) {\n\t\tbounds = params;\n\t} else {\n\t\tbounds = params.bounds;\n\t}\n\n\tthis.left = bounds.left;\n\tthis.top = bounds.top;\n\tthis.right = bounds.right;\n\tthis.bottom = bounds.bottom;\n\tthis.rawMonitor = params.monitor instanceof DockableMonitor ? params.monitor.rawMonitor : params.monitor; //Need this later in order to do docking related tasks\n\n\t//When docking makes a change to monitor space (claim or unclaim) docking's monitor representation is updated. The rawMonitor (which comes from launcher and is a dumbed-down functionless representation) is not updated at all. We should remove the DockableMonitor reference to rawMonitor, and instead write a function that gets called when a DockableMonitor is updated to update the rawMonitor for launcher's use.\n\tthis.unclaimedRect = params.monitor.unclaimedRect;\n\tthis.availableRect = params.monitor.availableRect;\n\n\tthis.bufferSize = 15;\n\t/**\n\t* @function {function name}\n\t* @param  {type} bufferSize {description}\n\t* @return {type} {description}\n\t*/\n\tthis.setBufferSize = function (bufferSize) {\n\t\tthis.bufferSize = bufferSize;\n\t\tthis.bounds = this.getWindowBoundingBox();\n\t\tthis.calculateSnappingRegions();\n\t};\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tthis.getWindowBoundingBox = function () {\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: this.left,\n\t\t\t\ty: this.top\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right,\n\t\t\t\ty: this.bottom\n\t\t\t}\n\t\t};\n\t};\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds {description}\n\t* @param  {type} edge   {description}\n\t* @return {type} {description}\n\t*/\n\tthis.getSnappingRegion = function (bounds, edge) {\n\t\tlet map = {\n\t\t\tleft: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: bounds.left - this.bufferSize,\n\t\t\t\t\ty: bounds.top\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: bounds.left + this.bufferSize,\n\t\t\t\t\ty: bounds.bottom\n\t\t\t\t}\n\t\t\t},\n\t\t\tright: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: bounds.right - this.bufferSize,\n\t\t\t\t\ty: bounds.top\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: bounds.right + this.bufferSize,\n\t\t\t\t\ty: bounds.bottom\n\t\t\t\t}\n\t\t\t},\n\t\t\tbottom: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: bounds.left,\n\t\t\t\t\ty: bounds.bottom - this.bufferSize,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: bounds.right,\n\t\t\t\t\ty: bounds.bottom + this.bufferSize\n\t\t\t\t}\n\t\t\t},\n\t\t\ttop: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: bounds.left,\n\t\t\t\t\ty: bounds.top - this.bufferSize\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: bounds.right,\n\t\t\t\t\ty: bounds.top + this.bufferSize\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn map[edge];\n\t};\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tthis.calculateSnappingRegions = function () {\n\t\tthis.snappingRegions = {\n\t\t\ttop: this.getSnappingRegion(bounds, \"top\"),\n\t\t\tright: this.getSnappingRegion(bounds, \"right\"),\n\t\t\tbottom: this.getSnappingRegion(bounds, \"bottom\"),\n\t\t\tleft: this.getSnappingRegion(bounds, \"left\"),\n\t\t};\n\t};\n\t/**\n\t* @function {function name}\n\t* @param  {type} region  {description}\n\t* @param  {type} request {description}\n\t* @return {type} {description}\n\t*/\n\tthis.canSnapToRegion = function (region, request) {\n\t\tvar innerAdjustment = 0 - this.bufferSize;\n\t\treturn BoxMath.intersectBoundingBoxes(this.snappingRegions[region],\n\t\t\t{\n\t\t\t\tmin: {\n\t\t\t\t\tx: request.snappingRegions[region].min.x - innerAdjustment,\n\t\t\t\t\ty: request.snappingRegions[region].min.y - innerAdjustment\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: request.snappingRegions[region].max.x + innerAdjustment,\n\t\t\t\t\ty: request.snappingRegions[region].max.y + innerAdjustment\n\t\t\t\t}\n\t\t\t});\n\t};\n\t/**\n\t* @function {function name}\n\t* @param  {type} request {description}\n\t* @return {type} {description}\n\t*/\n\tthis.canSnapToWindow = function (request) {\n\t\tfor (var region in this.snappingRegions) {\n\t\t\tif (this.canSnapToRegion(region, request)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\t/**\n\t * Determines if supplied window (or request) is near a given edge of the monitor\n\t *\n\t * @param {object} request The move request\n\t * @return {string} A string containing any edges of the monitor the given request is near\n\t */\n\tthis.getSnappedEdge = function (request) {\n\t\tlet snappedEdge = \"\";\n\t\tif (request.top === this.bounds.min.y) {\n\t\t\tsnappedEdge += \"top\";\n\t\t} else if (request.bottom === this.bounds.max.y) {\n\t\t\tsnappedEdge += \"bottom\";\n\t\t}\n\t\treturn snappedEdge;\n\t};\n\t/**\n\t* @function {function name}\n\t* @param  {type} request {description}\n\t* @return {type} {description}\n\t*/\n\tthis.snapWindow = function (request) {\n\t\tvar regionsToSnap = [];\n\t\tfor (var region in this.snappingRegions) {\n\t\t\tif (this.canSnapToRegion(region, request)) {\n\t\t\t\tregionsToSnap.push(region);\n\t\t\t}\n\t\t}\n\t\t//let originalRequest = Object.assign({}, request);\n\t\tregionsToSnap = regionsToSnap.join(\"\");\n\t\tif (regionsToSnap) {\n\t\t\tif (regionsToSnap.includes(\"left\")) {\n\t\t\t\t//if req is to the right of the monitor's left edge.\n\t\t\t\tif (request.left >= this.snappingRegions.left.min.x) {\n\t\t\t\t\trequest.left = this.bounds.min.x;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (regionsToSnap.includes(\"top\")) {\n\t\t\t\t//Top edge of request must be below the top edge of the monitor..\n\t\t\t\tif (request.top >= this.snappingRegions.top.min.y) {\n\t\t\t\t\trequest.top = this.bounds.min.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (regionsToSnap.includes(\"right\")) {\n\t\t\t\t//right edge of request must be to the left of the right edge of the monitor.\n\t\t\t\tif (request.right <= this.snappingRegions.right.max.x) {\n\t\t\t\t\t//move\n\t\t\t\t\tif (request.changeType === 0) {\n\t\t\t\t\t\trequest.left = this.bounds.max.x - request.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequest.right = this.bounds.max.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (regionsToSnap.includes(\"bottom\")) {\n\t\t\t\tif (request.bottom <= this.snappingRegions.bottom.max.y) {\n\t\t\t\t\tif (request.changeType === 0) {\n\t\t\t\t\t\trequest.top = this.bounds.max.y - request.height;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequest.bottom = this.bounds.max.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (request.changeType === 0) {\n\t\t\t\trequest.right = request.left + request.width;\n\t\t\t\trequest.bottom = request.top + request.height;\n\t\t\t} else {\n\t\t\t\trequest.width = request.right - request.left;\n\t\t\t\trequest.height = request.bottom - request.top;\n\t\t\t}\n\t\t\treturn request;\n\t\t}\n\n\t\treturn false;\n\t};\n\t/**\n\t * Takes any snapped edges and a given request (window) and sets the appropriate bounds of the window (when docking, the windows width is expanded to take full screen)\n\t * @param {string} edge A string containing any edges the window could snap to\n\t * @param {object} request The window to dock\n\t * @return {object} The modified request object\n\t */\n\tthis.getDockedPosition = function (edge, request) {\n\t\tif (edge === \"\") return false;\n\t\tif (edge.includes(\"top\")) {\n\t\t\t//Top edge of request must be below the top edge of the monitor..\n\t\t\tif (request.top >= this.snappingRegions.top.min.y) {\n\t\t\t\trequest.top = this.bounds.min.y;\n\t\t\t\trequest.width = this.bounds.max.x - this.bounds.min.x;\n\t\t\t\trequest.left = this.bounds.min.x;\n\t\t\t\trequest.right = this.bounds.max.x;\n\t\t\t\trequest.bottom = request.top + request.height;\n\t\t\t}\n\t\t}\n\n\t\tif (edge.includes(\"bottom\")) {\n\t\t\tif (request.bottom <= this.snappingRegions.bottom.max.y) {\n\t\t\t\trequest.top = this.bounds.max.y - request.height;\n\t\t\t\trequest.width = this.bounds.max.x - this.bounds.min.x;\n\t\t\t\trequest.left = this.bounds.min.x;\n\t\t\t\trequest.right = this.bounds.max.x;\n\t\t\t\trequest.bottom = this.bounds.max.y;\n\t\t\t}\n\t\t}\n\t\treturn request;\n\t};\n\t/**\n\t * Docks a window to an edge if it needs to be. Calls to update dockableMonitor/dockableWindow properties\n\t * @param {object} request The move request\n\t */\n\tthis.dockWindowToMonitor = function (request, width, height) {\n\t\tlet oldBounds = {\n\t\t\twidth: width ? width : request.width,\n\t\t\theight: height ? height : request.height\n\t\t};\n\n\t\tLogger.system.debug(\"dockable.monitor.dockWindowToMonitor\", width, height);\n\t\trequest.height = request.dockedHeight;\n\t\tdelete request.dockedHeight;\n\n\t\tlet snappedEdge = request.hasOwnProperty(\"snappedEdge\") ? request.snappedEdge.toLowerCase() : this.getSnappedEdge(request);\n\t\tdelete request.snappedEdge;\n\t\tlet dockedPos = this.getDockedPosition(snappedEdge, request);\n\n\t\tif (snappedEdge) {\n\t\t\tthis.onClaimedSpaceChanged({ win: dockedPos, oldBounds: oldBounds, location: snappedEdge });\n\t\t\treturn request;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * JSON override method\n\t */\n\tthis.toJSON = function () {\n\t\treturn {\n\t\t\tbounds: this.bounds,\n\t\t\tavailableRect: this.availableRect,\n\t\t\tmonitorRect: this.monitorRect,\n\t\t\tunclaimedRect: this.unclaimedRect,\n\t\t\tname: this.name,\n\t\t\ttop: this.top,\n\t\t\tright: this.right,\n\t\t\tbottom: this.bottom,\n\t\t\tleft: this.left\n\t\t};\n\t};\n\n\t/**\n\t * Undocks a window\n\t * @param {object} request The move request\n\t */\n\tthis.undockWindowFromMonitor = function (request) {\n\t\tLogger.system.debug(\"dockable.monitor.undockWindowFromMonitor\");\n\n\t\t//Old bounds is used by DockableWindow to determine its width and height when its undocked. In this scenario, since we're undocking and will use the oldBounds already stored in DockableWindow, we want to pass in an empty object since oldBounds will be empty when the component is undocked\n\t\tthis.onClaimedSpaceChanged({ win: request, oldBounds: {}, location: \"NONE\" });\n\t\treturn request;\n\t};\n\t \n\t/** \n\t* Removes existing claim space for a window (if any)\n\t* Docks window to new position on that same monitor\n\t* Currently only used for monitor-change events. The window is expected to only move monitors if a monitor is removed,\n\t* so there should be no need to release claimed space on a different monitor than it's updated location.\n\t* @param {object} request move request\n\t* @param width width of the window\n\t* @param height height of the window \n\t*/\n\tthis.redockWindowToMonitor = function (request, width, height) {\n\t\tLogger.system.debug(\"monitors-changed dockable.monitor.undockWindowFromMonitor\");\n\t\tconst oldBounds = {\n\t\t\twidth,\n\t\t\theight\n\t\t};\n\t\trequest.height = request.dockedHeight;\n\t\tconst snappedEdge = request.snappedEdge;\t\n\t\tconst dockedPos = this.getDockedPosition(snappedEdge, request);\n\t\n\t\tif (snappedEdge) {\n\t\t\tthis.onClaimedSpaceChanged({ win: dockedPos, oldBounds: oldBounds, location: snappedEdge, action: \"redock\" });\n\t\t}\n\t};\n\n\tthis.bounds = this.getWindowBoundingBox();\n\tthis.calculateSnappingRegions();\n\tthis.name = bounds.name;\n\n\treturn this;\n}\n\n\n\nexport default DockableMonitor;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockableMonitor.js","/* global RouterClient */\n\nimport BoxMath from \"./boxMath\";\nimport DockableBox from \"./dockableBox\";\nimport { guuid, checkIfBoundsAreEqual } from \"../../../common/disentangledUtils\";\nimport _get from \"lodash.get\";\nimport StorageClient from \"../../../clients/storageClient\";\nimport * as util from \"../../../common/util\";\nimport { MOVE_REASON } from \"../../../common/constants\";\n\n/** Singleton of the Logger class shared among all instances of DockableWindow\n * @TODO Refactor to instance member of class.\n */\nlet Logger;\n/** Singleton of the System class shared among all instances of DockableWindow\n * @TODO Refactor to instance member of class.\n */\nlet System;\n/** Singleton of the Calculator class shared among all instances of DockableWindow\n * @TODO Refactor to instance member of class.\n */\nlet calculator;\n//Need config service in order to see if a particular window is dockable presentationalComponents -> components.Toolbar.component.dockable = true?\nconst _throttle = require(\"lodash.throttle\");\n\n//defaults for the openfin version.\n/*var OF_VERSION = {\n\tmajor: 7,\n\tpatch: 0\n};*/\nvar OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT = true;\nconst BOUNDS_CHANGING = \"bounds-change-request\";\nconst BOUNDS_CHANGED = \"bounds-changed\";\nconst SYSTEM_BOUNDS_CHANGED = \"system-bounds-changed\";\n\nvar warningsSent = {\n\tdisableFrame: false,\n\tsetOpacity: false,\n\taddEventListener: false,\n\tremoveEventListener: false\n};\n\n\nclass DockableWindow extends DockableBox {\n\t/**\n\t *\n\t * @param {*} win Window object; WebWindow, ExternalWindow, etc.\n\t * @param {bounds} bounds initial bounds for the window.\n\t * @param {object} dependencies Dependency object that provides the calculator, System, and Logger.\n\t * @param {DockingCalculator} dependencies.calculator\n\t * @param {System} dependencies.System\n\t * @param {Logger} dependencies.Logger\n\t */\n\tconstructor(win, bounds, dependencies) {\n\t\tsuper(bounds);\n\t\tif (dependencies) {\n\t\t\tcalculator = dependencies.calculator;\n\t\t\tSystem = dependencies.System;\n\t\t\tLogger = dependencies.Logger;\n\t\t} else {\n\t\t\tthrow new Error(\"DockableWindow class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.\");\n\t\t}\n\n\t\t/**@todo Document these vars */\n\t\tthis.win = win;\n\t\tthis.bufferSize = 15;\n\n\t\t// The default is to allow grouping. But if it is disabled using any of the various methods, disable it.\n\t\t// @todo this is unsustainable. Needs some kind of cleanup. Should we differentiate docking/snapping?\n\t\tif (typeof win.canGroup === \"boolean\") {\n\t\t\tthis.canGroup = win.canGroup;\n\t\t} else {\n\t\t\tconst canGroup1 = _get(win, \"windowDescriptor.customData.window.canGroup\", true);\n\t\t\tconst canGroup2 = _get(win, \"windowDescriptor.customData.foreign.services.dockingService.canGroup\", true);\n\t\t\tconst canGroup3 = _get(win, \"windowDescriptor.customData.foreign.services.windowService.allowGrouping\", true);\n\t\t\tthis.canGroup = canGroup1 && canGroup2 && canGroup3;\n\t\t}\n\n\t\tthis.name = this.win.name;\n\t\tthis.uuid = this.win.uuid;\n\t\tthis.guid = guuid();\n\t\tthis.disableFrame();\n\t\tthis.top = bounds.top;\n\t\tthis.left = bounds.left;\n\t\tthis.right = bounds.right;\n\t\tthis.bottom = bounds.bottom;\n\t\tthis.width = bounds.width;\n\t\tthis.height = bounds.height;\n\t\tthis.opacity = 1;\n\t\tthis.events = {};\n\t\tthis.groupNames = [];\n\t\tthis.snappedWindows = [];\n\t\tthis.systemBounds = {};\n\t\tthis.type = win.type;\n\t\tthis.calculator = calculator;\n\t\tthis.logger = Logger;\n\t\tthis.retrievedDockedWindowState = this.retrievedDockedWindowState.bind(this);\n\t\tthis.finishInitialize = this.finishInitialize.bind(this);\n\t\tthis.buildDefaultDockingOptions = this.buildDefaultDockingOptions.bind(this);\n\t\tthis.onBoundsChanged = this.onBoundsChanged.bind(this);\n\t\tthis.onBoundsChanging = this.onBoundsChanging.bind(this);\n\t\tthis.addEventListener = this.addEventListener.bind(this);\n\t\tthis.removeEventListener = this.removeEventListener.bind(this);\n\t\tthis.requestBoundsChange = this.requestBoundsChange.bind(this);\n\t\tthis.getDockedStringFromLocation = this.getDockedStringFromLocation.bind(this);\n\t\tthis.hiddenUnclaimSpace = this.hiddenUnclaimSpace.bind(this);\n\t\tthis.unhiddenClaimSpace = this.unhiddenClaimSpace.bind(this);\n\t\tthis.onSystemMovedWindow = this.onSystemMovedWindow.bind(this);\n\t\tthis.dock = this.dock.bind(this);\n\t\tthis.undock = this.undock.bind(this);\n\t\tthis.resizeThrottlePeriod = 5;\n\n\t\tLogger.system.debug(\"dockableWindow constructing\", this.name);\n\n\t\t//This is triggered on a window move which is done by the user dragging a held down mouse over a window. In other words, this is only !finishedMove when a user is moving the window\n\t\t// DH 3/6/2019 Setting the \"markDirty\" param to false ensures instantiating\n\t\t// the DockableWindow doesn't mistakenly mark the workspace dirty.\n\t\tthis.win._stopMove(false);\n\t\tconst startTime = Date.now();\n\t\tthis.lastBoundsAdjustment = startTime;\n\t\tthis.resizeHandle = null;\n\t\tthis.animate = this.animatePositionAndHeight;\n\n\t\t//Needed for dockable components that don't have a static grabber on the side of the component (mostly for when there are dockable windows). When a user undocks the component, they can undock it from anywhere in the components header bar, this will center the window on the undock, so that when the window shrinks back to its old size, the mouse will be in the center\n\t\tthis.shouldOffsetByMouse = false;\n\n\t\t//A DockableWindow can refuse tabbing or tiling requests with the right config props\n\t\tthis.allowTiling = typeof win.tiling == \"boolean\" ? win.tiling : true;\n\t\tthis.allowTabbing = win.tabbing;\n\t\tthis.ignoreTilingAndTabbingRequests = !this.allowTiling && !this.allowTabbing;\n\t\tthis.canMinimize = win.minimize;\n\n\t\t// If the windowOptions say to show the taskbar icon, respect that. Default to true.\n\t\t// This value is checked inside of showTaskbarIcon()\n\t\tthis.shouldShowTaskbarIcon = win.windowOptions && typeof win.windowOptions.showTaskbarIcon !== \"undefined\" ? win.windowOptions.showTaskbarIcon : true;\n\t\tthis.setBoundingBoxes();\n\t\tthis.addListeners();\n\t\t//Disable the frame so that users cannot move the window. Only we move the window after we verify that their intended movement shouldn't result in a snap.\n\t\tthis.setOpacity = _throttle(this.setOpacity, 100, { trailing: true });\n\n\t\tlet options = win.hasOwnProperty(\"dockingOptions\") ? win.dockingOptions : null;\n\t\tlet dockingDefaults = options !== null ? this.buildDefaultDockingOptions(options) : { isDockable: false };\n\n\t\t// flag indicating if this a monitor-docked window (e.g. a toolbar)\n\t\tthis.isDockableComponent = dockingDefaults.isDockable;\n\n\t\tthis.monitorDockablePositions = {};\n\t\tif (dockingDefaults.isDockable) {\n\t\t\tif (Array.isArray(options.dockable)) {\n\t\t\t\toptions.dockable.map((option, i) => {\n\t\t\t\t\t//make upper case\n\t\t\t\t\toption = option.toUpperCase();\n\n\t\t\t\t\tif (option === \"TOP\") this.monitorDockablePositions.TOP = 0;\n\t\t\t\t\tif (option === \"LEFT\") this.monitorDockablePositions.LEFT = 1;\n\t\t\t\t\tif (option === \"RIGHT\") this.monitorDockablePositions.RIGHT = 2;\n\t\t\t\t\tif (option === \"BOTTOM\") this.monitorDockablePositions.BOTTOM = 3;\n\t\t\t\t});\n\t\t\t\tthis.monitorDockablePositions.NONE = 4;\n\t\t\t} else {\n\t\t\t\t//If options.dockable is not supplied, or it is just 'true' that means this window can dock everywhere\n\t\t\t\tthis.monitorDockablePositions = {\n\t\t\t\t\tTOP: 0,\n\t\t\t\t\tLEFT: 1,\n\t\t\t\t\tRIGHT: 2,\n\t\t\t\t\tBOTTOM: 3,\n\t\t\t\t\tNONE: 4\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t//pass through from the windowWrap. This property is added during the registration. Options include, min/max height/width, whether the window is dockable, whether it starts docked, etc.\n\t\tthis.dockingOptions = win.dockingOptions;\n\t\tthis.dockedPosition = this.monitorDockablePositions.NONE;\n\t\tthis.ignoreSnappingRequests = options && options.ignoreSnappingRequests || options && options.ephemeral; // OR if isEphemeral is true\n\t\tthis.dockedDimensions = {\n\t\t\twidth: dockingDefaults.dockedWidth,\n\t\t\theight: dockingDefaults.dockedHeight\n\t\t};\n\n\t\t//If overwriteDockedOptions is true we should expect there to be some information regarding this component in memory. That saved information will provide bounds for where the window should spawn\n\t\tlet startsDocked = options !== null && typeof options.startsDocked === \"string\" ? options.startsDocked : \"none\";\n\n\t\tif (this.isDockableComponent && options && options.overwriteDockedOptions) {\n\n\t\t\t// first look in component state for cached toolbar location -- this is only for backwards compatability with vertions before 3.9\n\t\t\tthis.win.getComponentState({}, async (err, result) => {\n\t\t\t\tLogger.system.debug(\"MONITOR: getComponentState\", err, result);\n\t\t\t\tlet monitorChanged, isToolbarVisible;\n\n\t\t\t\t// for backwards compatability check if bounds data in component state, if not then check in storage\n\t\t\t\tif (!result || !result.hasOwnProperty(\"window-bounds\") || result[\"window-bounds\"] == null) {\n\t\t\t\t\tLogger.system.debug(\"MONITOR: read monitor-docked data from storage\", err, result);\n\n\t\t\t\t\t// get data from storage -- this is the normal path\n\t\t\t\t\tresult = await StorageClient.get({ topic: win.name, key: win.name });\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.debug(\"MONITOR: using monitor-docked data from component state\", err, result);\n\t\t\t\t\t// since the bounds data is in component state only for backwords compatability, use it this time then remove it so that going forward the lastest values will be picked up from storage.\n\t\t\t\t\tthis.win.setComponentState({\n\t\t\t\t\t\tfield: \"window-bounds\",\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tLogger.system.debug(\"MONITOR: DockableWindow get results\", err, result);\n\n\t\t\t\tlet visible = (result && result.hasOwnProperty(\"visible\") && typeof result.visible === \"boolean\") ? result.visible : true;\n\t\t\t\tlet windowBounds = result && result.hasOwnProperty(\"window-bounds\") && result[\"window-bounds\"] !== null ? result[\"window-bounds\"] : null;\n\t\t\t\tlet savedMonitorData = result ? result.monitorData : null;\n\n\t\t\t\t// if all the saved data is available, then check if monitor changed since last restart;\n\t\t\t\t// Note: currently monitorChanged is only used for diagnostics, but later will be used to affect window placement\n\t\t\t\tif (windowBounds && savedMonitorData) {\n\t\t\t\t\tmonitorChanged = await this.monitorChanged(savedMonitorData);\n\n\t\t\t\t\t// else since all the data isn't available, assume the monitors did not change since last restart;\n\t\t\t\t} else {\n\t\t\t\t\tmonitorChanged = false;\n\t\t\t\t}\n\n\t\t\t\t// if could not find bounds data either in window state or in storage, then use default settings.\n\t\t\t\tif (!windowBounds) {\n\t\t\t\t\tLogger.system.debug(\"MONITOR: DockableWindow using defaults.\", err);\n\n\t\t\t\t\tthis.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];\n\t\t\t\t\tthis.undockedPosition = {\n\t\t\t\t\t\twidth: dockingDefaults.undockedWidth,\n\t\t\t\t\t\theight: dockingDefaults.undockedHeight\n\t\t\t\t\t};\n\n\t\t\t\t\twin._show();\n\t\t\t\t} else {\n\t\t\t\t\t// since have window Bounds, check if in visible space.  If not in visible space then will adjust bounds to be visible\n\t\t\t\t\tlet boundsToCheck = util.clone(windowBounds);\n\t\t\t\t\tboundsToCheck.isDocked = (windowBounds.dockedPosition !== this.monitorDockablePositions.NONE) ? true : false;\n\t\t\t\t\twindowBounds = util.adjustWindowIfInTaskbarSpace(boundsToCheck);\n\t\t\t\t\tLogger.system.debug(\"MONITOR: DockableWindow status\", result, monitorChanged, isToolbarVisible, boundsToCheck, windowBounds);\n\n\t\t\t\t\tthis.top = windowBounds.top;\n\t\t\t\t\tthis.bottom = windowBounds.bottom;\n\t\t\t\t\tthis.left = windowBounds.left;\n\t\t\t\t\tthis.right = windowBounds.right;\n\t\t\t\t\tthis.width = windowBounds.width;\n\t\t\t\t\tthis.height = windowBounds.height;\n\t\t\t\t\tthis.dockedPosition = windowBounds.dockedPosition;\n\n\t\t\t\t\t// move undocked toolbar to its previously saved location\n\t\t\t\t\tthis.setBounds(windowBounds, (err) => {\n\t\t\t\t\t\t// NOTE: there is a bug related to the \"hidden\" event that prevents visible state from being saved, so initial visiblity will alway be true until bug fixed\n\t\t\t\t\t\tif (visible) {\n\t\t\t\t\t\t\twin._show();\n\t\t\t\t\t\t\t// observed problem with toolbar not being on top, so bring to front to\n\t\t\t\t\t\t\twin._bringToFront();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.undockedPosition = {\n\t\t\t\t\twidth: dockingDefaults.undockedWidth,\n\t\t\t\t\theight: dockingDefaults.undockedHeight\n\t\t\t\t};\n\n\t\t\t\tthis.dockedParams = {\n\t\t\t\t\twidth: dockingDefaults.dockedWidth,\n\t\t\t\t\theight: dockingDefaults.dockedHeight\n\t\t\t\t};\n\n\t\t\t\t//@todo here we should check to see if the window's bounds match monitor bounds. If so, dock it. For now, we have a hack to not save the toolbar's location on dock.\n\t\t\t\tthis.finishInitialize(options);\n\n\t\t\t});\n\n\t\t} else if (dockingDefaults.isDocked && this.monitorDockablePositions.hasOwnProperty(startsDocked.toUpperCase())) {\n\t\t\tthis.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];\n\t\t\tthis.undockedPosition = {\n\t\t\t\twidth: dockingDefaults.undockedWidth,\n\t\t\t\theight: dockingDefaults.undockedHeight\n\t\t\t};\n\t\t\tthis.finishInitialize(options);\n\t\t}\n\t}\n\t// For diagnostics.\n\t// \tthis.wipeMethodCalls = this.wipeMethodCalls.bind(this);\n\t// \tthis.wipeMethodCalls();\n\t// \twindow.wipeMethodCalls = this.wipeMethodCalls;\n\t// }\n\t// wipeMethodCalls() {\n\t// \tfor (let m in this) {\n\t// \t\tif (typeof this[m] === \"function\") {\n\t// \t\t\tconsole.log(\"FUNCTION\", m);\n\t// \t\t\t//window.methodCalls[m] = 0;\n\t// \t\t} else {\n\t// \t\t\tconsole.log(\"NON FUNCTION\", m);\n\t// \t\t}\n\t// \t}\n\t// \t//window.methodCalls['setBounds'] = 0;\n\t// }\n\n\t/**\n\t * Returns turn if the current monitor dimensions are different from the previous monitor dimensions\n\t * @param {array} previousMonitorData the previous monitor info (an array of monitors)\n\t */\n\tmonitorChanged(previousMonitorData) {\n\t\tconst monitorChangedPromiseResolver = (resolve) => {\n\t\t\tSystem.getMonitorInfo((monitorInfo) => {\n\t\t\t\tlet monitorData = [monitorInfo.primaryMonitor, ...monitorInfo.nonPrimaryMonitors];\n\t\t\t\tlet changed = false;\n\t\t\t\tif (monitorData && previousMonitorData && (monitorData.length == previousMonitorData.length)) {\n\t\t\t\t\tfor (let i = 0; i < monitorData.length; i++) {\n\t\t\t\t\t\t// since claimed space may change monitor dimensions, must compare against availableRect (which is independent of claimed space)\n\t\t\t\t\t\tif (monitorData[i].availableRect.top != previousMonitorData[i].availableRect.top) changed = true;\n\t\t\t\t\t\tif (monitorData[i].availableRect.bottom != previousMonitorData[i].availableRect.bottom) changed = true;\n\t\t\t\t\t\tif (monitorData[i].availableRect.left != previousMonitorData[i].availableRect.left) changed = true;\n\t\t\t\t\t\tif (monitorData[i].availableRect.right != previousMonitorData[i].availableRect.right) changed = true;\n\t\t\t\t\t\tif (changed) break;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\tthis.logger.system.debug(\"MONITOR: DockableWindow.monitorChanged\", \"monitorData\", monitorData, \"previousMonitorData\", previousMonitorData, changed ? \"changed\" : \"not changed\");\n\t\t\t\tresolve(changed);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(monitorChangedPromiseResolver);\n\t}\n\n\t/**\n\t * Returns turn if the toolber handle (i.e. what the user can grab to move toolbar) is visible on one of the current monitors (based on the toolbars current bounds\n\t * @param {array} currentBounds the toolbars current bounds\n\t */\n\tisToolbarVisible(currentBounds) {\n\t\tconst isToolbarVisiblePromiseResolver = (resolve) => {\n\t\t\tSystem.getMonitorInfo((monitorInfo) => {\n\t\t\t\tlet monitorData = [monitorInfo.primaryMonitor, ...monitorInfo.nonPrimaryMonitors];\n\t\t\t\tlet isVisible = false;\n\n\t\t\t\t// calculate the approximate bounds of the toolbar \"handle\", based on the current toolbar bounds;\n\t\t\t\t// if these four points are within a single monitor then visible;\n\t\t\t\t// this function is not exact since toolbar might span monitors but close enough until we rearchitect -- at worst will just move toolbar to default position;\n\t\t\t\t// note the rightReference is calculated in relation to the left bounds\n\t\t\t\tlet topReference = currentBounds.top + 5;\n\t\t\t\tlet bottomReference = currentBounds.bottom - 5;\n\t\t\t\tlet leftReference = currentBounds.left + 5;\n\t\t\t\tlet rightReference = currentBounds.left + 20;\n\n\t\t\t\tfor (let i = 0; i < monitorData.length; i++) {\n\t\t\t\t\tlet topOK = false;\n\t\t\t\t\tlet bottomOK = false;\n\t\t\t\t\tlet leftOK = false;\n\t\t\t\t\tlet rightOK = false;\n\n\t\t\t\t\t// since claimed space may change monitor dimensions, must compare against availableRect (which is independent of claimed space)\n\t\t\t\t\tif (topReference >= monitorData[i].monitor.scaledRect.top) topOK = true;\n\t\t\t\t\tif (bottomReference <= monitorData[i].monitor.scaledRect.bottom) bottomOK = true;\n\t\t\t\t\tif (leftReference >= monitorData[i].monitor.scaledRect.left) leftOK = true;\n\t\t\t\t\tif (rightReference <= monitorData[i].monitor.scaledRect.right) rightOK = true;\n\n\t\t\t\t\tisVisible = topOK && bottomOK && leftOK && rightOK;\n\n\t\t\t\t\tif (isVisible) break;\n\t\t\t\t}\n\t\t\t\tthis.logger.system.debug(\"MONITOR: DockableWindow.isToolbarVisible\", \"monitorData\", monitorData, \"currentBounds\", currentBounds, isVisible ? \"isVisible\" : \"not visible\");\n\t\t\t\tthis.logger.system.debug(\"MONITOR: DockableWindow.isToolbarVisible T-B-L-R=\", topReference.toString(), bottomReference.toString(), leftReference.toString(), rightReference.toString());\n\t\t\t\tresolve(isVisible);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(isToolbarVisiblePromiseResolver);\n\t}\n\n\t/**\n\t * Returns a string representation of the docked location\n\t * @param {number} dockedPosition The integer value of the docked position\n\t */\n\tgetDockedStringFromLocation(dockedPosition) {\n\t\tlet locValue = null;\n\t\tfor (let i = 0; i < Object.keys(this.monitorDockablePositions).length; i++) {\n\t\t\tlet key = Object.keys(this.monitorDockablePositions)[i];\n\t\t\tif (this.monitorDockablePositions[key] === this.dockedPosition) {\n\t\t\t\tlocValue = key.toUpperCase();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn locValue;\n\t}\n\n\t/**\n\t * Uses the state retrieved from storage and config to determine where to dock and dockable windows\n\t * @param {object} params\n\t * @param {Error} err The error, if any, returned from retrieving storage data\n\t * @param {object} result The resulting data from storage\n\t * @param {object} dockingDefaults The defaults to apply to dockable components\n\t * @param {object} options The options retrieved from the config\n\t * @param {boolean} startsDocked If true, the toolbar should dock\n\t */\n\tretrievedDockedWindowState(params) {\n\n\t\tconst { err, result, dockingDefaults, options, startsDocked } = params;\n\n\t\tif (err && err !== \"Not found\") {\n\t\t\tLogger.system.error(\"Error retrieving component state. Using defaults.\");\n\t\t\tthis.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];\n\t\t\tthis.undockedPosition = {\n\t\t\t\twidth: dockingDefaults.undockedWidth,\n\t\t\t\theight: dockingDefaults.undockedHeight\n\t\t\t};\n\t\t\tthis.finishInitialize(options);\n\t\t\treturn;\n\t\t}\n\n\t\tlet windowBounds = result && result.hasOwnProperty(\"window-bounds\") && result[\"window-bounds\"] !== null ? result[\"window-bounds\"] : null;\n\n\t\tif (!windowBounds) {\n\t\t\tthis.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];\n\t\t} else {\n\t\t\tthis.top = windowBounds.top;\n\t\t\tthis.bottom = windowBounds.bottom;\n\t\t\tthis.left = windowBounds.left;\n\t\t\tthis.right = windowBounds.right;\n\t\t\tthis.width = windowBounds.width;\n\t\t\tthis.height = windowBounds.height;\n\t\t\tthis.dockedPosition = windowBounds.dockedPosition;\n\t\t}\n\n\t\tthis.undockedPosition = {\n\t\t\twidth: dockingDefaults.undockedWidth,\n\t\t\theight: dockingDefaults.undockedHeight\n\t\t};\n\n\t\tthis.dockedParams = {\n\t\t\twidth: dockingDefaults.dockedWidth,\n\t\t\theight: dockingDefaults.dockedHeight\n\t\t};\n\t\t//@todo here we should check to see if the window's bounds match monitor bounds. If so, dock it. For now, we have a hack to not save the toolbar's location on dock.\n\t\tthis.finishInitialize(options);\n\t}\n\n\t/**\n\t * Finishes the initialization of this dockable window\n\t * @param {object} dockingDefaults Defaults that have been determined by incoming config\n\t * @param {object} options\n\t */\n\tasync finishInitialize(options) {\n\t\t//This allows the config to specify whether a dockable component should show on the taskbar\n\t\tthis.shouldShowTaskbarIcon = options !== null && options.hasOwnProperty(\"showTaskbarIcon\") ? options.showTaskbarIcon : true;\n\t\tthis.isDocked = (this.dockedPosition !== this.monitorDockablePositions.NONE) ? true : false;\n\n\t\t//If the registering window is dockable, and wants to 'start docked' we need to determine which of the dockable positions it requests to start docked in. If the position is found, we call to dock it which will set the appropriate variables and move any launched windows out of its space.\n\t\tif (this.isDocked) {\n\t\t\t//We only dock the window if it's visible. If it's hidden, we don't want to claim space.\n\t\t\tlet locValue = this.getDockedStringFromLocation(this.dockedPosition);\n\t\t\tif (locValue !== null) {\n\t\t\t\tlet monitor = this.calculator.getMonitorForWindow(this);\n\t\t\t\tlet windowBounds = {\n\t\t\t\t\ttop: this.top,\n\t\t\t\t\tbottom: this.bottom,\n\t\t\t\t\tleft: this.left,\n\t\t\t\t\tright: this.right,\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\theight: this.height\n\t\t\t\t};\n\n\t\t\t\t//Handles dimensions that need window specific calculations\n\t\t\t\tswitch (locValue) {\n\t\t\t\t\tcase \"TOP\":\n\t\t\t\t\t\twindowBounds.height = this.dockedParams.height;\n\t\t\t\t\t\twindowBounds.top = monitor.top;\n\t\t\t\t\t\twindowBounds.bottom = monitor.top + windowBounds.height;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"BOTTOM\":\n\t\t\t\t\t\twindowBounds.height = this.dockedParams.height;\n\t\t\t\t\t\twindowBounds.top = monitor.bottom - windowBounds.height;\n\t\t\t\t\t\twindowBounds.bottom = monitor.bottom;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t//Handles dimensions that need monitor specific calculations\n\t\t\t\tswitch (locValue) {\n\t\t\t\t\tcase \"TOP\":\n\t\t\t\t\tcase \"BOTTOM\":\n\t\t\t\t\t\twindowBounds.left = monitor.left;\n\t\t\t\t\t\twindowBounds.right = monitor.right;\n\t\t\t\t\t\twindowBounds.width = monitor.unclaimedRect.width;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"LEFT\":\n\t\t\t\t\tcase \"RIGHT\":\n\t\t\t\t\t\twindowBounds.top = monitor.top;\n\t\t\t\t\t\twindowBounds.bottom = monitor.bottom;\n\t\t\t\t\t\twindowBounds.height = monitor.unclaimedRect.height;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tthis.setBounds(windowBounds, (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tLogger.system.error(\"Error moving dockable component to default docked position\");\n\t\t\t\t\t}\n\t\t\t\t\tthis.dockedHeight = this.dockedParams.height;\n\t\t\t\t\tmonitor.dockWindowToMonitor(this, this.undockedPosition.width, this.undockedPosition.height);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// now that window is up, make sure the monitor data is save (also saved when bounds change or monitors change)\n\t\tthis.saveDockableData();\n\t}\n\n\t/**\n\t * Function to respond to finWindow bounds-changed events. Currently we only respond to this event in some cases.\n\t * Aero_key: Sets bounds after an aero snap action is initiated (windows key + arrow key). Only triggers if Aero is enabled.\n\t * System_restored: Triggered when a window is restored from minimized outside of Finsemble. This code block should only be hit if the\n\t\t\tmonitor configuration has changed after a window is minimized and the window's old restore position would be partially off-monitor.\n\t\t\tThe OS does not change the bounds of minimized windows, so they only action we can take\tis to force it on monitor.\n\t * @param {object} e The event\n\t */\n\tonSystemMovedWindow(e) {\n\t\tlet incomingBounds = util.clone(e.data);\n\t\tlet bounds;\n\t\tswitch(e.data.action) {\n\t\t\tcase MOVE_REASON.AERO_KEY:\n\t\t\t\t//If the user is moving the window (and not the OS) these movements will be handled elsewhere\n\t\t\t\tif (!this.win.finishedMove) return;\n\t\t\t\tLogger.system.log(\"aero_key: aero key action occurred\", e.data.action);\n\t\t\t\tif (this.calculator.enableWindowsAeroSnap) {\n\t\t\t\t\tbounds = incomingBounds;\n\t\t\t\t} else {\n\t\t\t\t\tbounds = this.getBounds();\n\t\t\t\t}\n\t\t\t\tLogger.system.verbose(`aero_key: aero key action occurred. Action: ${e.data.action}, bounds: ${bounds}`);\n\t\t\t\t// Docking listens for a restoreFromMaximized message on the router.\n\t\t\t\t// That doesn't happen when aero-snap triggers a restore after the window is maximized.\n\t\t\t\t// Here we manually reset the isMaximized flag.\n\t\t\t\tthis.isMaximized = false;\n\t\t\t\t//Update the Finsemble bounds after aero snap\n\t\t\t\t//For groups, break the group and and only aero snap the selected window.\n\t\t\t\tthis.setBounds(bounds, () => {\n\t\t\t\t\tthis.calculator.removeWindowFromAllGroups(this, true);\n\t\t\t\t\tthis.calculator.buildSnapRelationships(this);\n\t\t\t\t\tthis.calculator.updateGroupData();\n\t\t\t\t\t// Move out of claimed space was happening too soon. The method was firing before the OS had moved the windows,\n\t\t\t\t\t// so at that point the window wasn't in claimed space. The timeout fixes that even with zero delay,\n\t\t\t\t\t// cause there is still the delay of going through the timeout\n\t\t\t\t\tsetTimeout(() => this.calculator.moveWindowOutOfClaimedSpaceByName(this.name), 0);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t// Triggered when a window is restored outside of finsemble (such as from the taskbar), and the previous window position would now be off-monitor\n\t\t\t// The OS does not move minimized windows when a monitor changes so we have to move the window on monitor when it is restored.\n\t\t\tcase MOVE_REASON.SYSTEM_RESTORED:\n\t\t\tdefault:\n\t\t\t\tbounds = incomingBounds;\n\t\t\t\tlet adjustedBounds;\n\n\t\t\t\t// Because we don't get an updated window position when a window is restored off monitor, we must force the window onto a monitor so it isn't lost\n\t\t\t\t// Prioritize the current monitor if it exists so windows restore on the same monitor they were minimized from.\n\t\t\t\tconst updatedMonitor = this.calculator.getUpdatedWindowMonitorIfItExists(this.monitor);\n\t\t\t\tif (updatedMonitor) {\n\t\t\t\t\tlet response = util.getNewBoundsWhenMovedToMonitor(updatedMonitor, bounds);\n\t\t\t\t\tadjustedBounds = response.newBounds;\n\t\t\t\t} else {\n\t\t\t\t\t// If the current monitor no longer exists, choose the monitor to restore to based on distance to the passed in bounds\n\t\t\t\t\tadjustedBounds = util.adjustBoundsToBeOnMonitor(bounds);\n\t\t\t\t}\n\t\t\t\t// If the bounds haven't changed, the window wasn't restored after a monitor change and doesn't need to be forced on monitor\n\t\t\t\t// One exception is assimilated windows, which do get moved on monitor when restored. If these windows has been moved after a monitor change, we need to update the bounds\n\t\t\t\t// so Finsemble knows where they are.\n\t\t\t\tif (!checkIfBoundsAreEqual(bounds, adjustedBounds) || bounds.force) {\n\t\t\t\t\tconst group = this.calculator.getMovableGroup(this.name);\n\n\t\t\t\t//If the window is in a group, wait until all the events come in before trying to move the event\n\t\t\t\t\tif (group) {\n\t\t\t\t\t\tLogger.system.verbose(`dockableWindow.onSystemMovedWindow system_restored: Window ${this.name} is in a group, updated bounds for restore ${JSON.stringify(adjustedBounds)}`);\n\t\t\t\t\t\tgroup.deferSystemMove({name: this.name, bounds: adjustedBounds}, this.calculator);\n\t\t\t\t//Otherwise update the bounds to the values passed in.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLogger.system.verbose(`dockableWindow.onSystemMovedWindow system_restored: Window ${this.name} is restoring to new position: ${JSON.stringify(adjustedBounds)}`);\n\t\t\t\t\t\tthis.setBounds(adjustedBounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * Builds default docking options for dockable windows\n\t * @param {object} options Taken from the incoming config\n\t * @return {object} The docking defaults\n\t */\n\tbuildDefaultDockingOptions(options) {\n\t\t//Building a default options object based on the incoming config props. Since windows can have different dockable areas and different starting docked positions, we must build starting props based on those options.\n\t\tlet hasUndockedParams = this.win.hasOwnProperty(\"dockingOptions\") && this.win.dockingOptions.hasOwnProperty(\"undockedParams\");\n\t\tlet hasDockedParams = this.win.hasOwnProperty(\"dockingOptions\") && this.win.dockingOptions.hasOwnProperty(\"dockedParams\");\n\t\tlet dockingDefaults = {\n\t\t\tisDockable: options !== null && (options.dockable === true || Array.isArray(options.dockable)) ? true : false,\n\t\t\tundockedWidth: hasUndockedParams ? this.win.dockingOptions.undockedParams.width : 300,\n\t\t\tundockedHeight: hasUndockedParams ? this.win.dockingOptions.undockedParams.height : 30,\n\t\t\tisDocked: options !== null && options.hasOwnProperty(\"startsDocked\") ? true : false,\n\t\t\tdockedWidth: hasDockedParams ? this.win.dockingOptions.dockedParams.width : 300,\n\t\t\tdockedHeight: hasDockedParams ? this.win.dockingOptions.dockedParams.height : 39\n\t\t};\n\t\treturn dockingDefaults;\n\t}\n\n\t/**\n\t * Function to handle chain of events when a dockable component type is docked\n\t *\n\t * @param {object} monitor Information about the monitor the component was docked to\n\t * @param {string} location A string containing the location to dock to: \"TOP\", \"LEFT\", \"BOTTOM\", and \"RIGHT\" are the acceptable values\n\t */\n\tdock(monitor, oldBounds, location) {\n\t\tif (this.isDockableComponent) {\n\t\t\tlet dockPos = -1;\n\t\t\tthis.undockedPosition = {\n\t\t\t\twidth: oldBounds.width,\n\t\t\t\theight: oldBounds.height\n\t\t\t};\n\t\t\tthis.logger.system.debug(\"MONITOR: DockableWindow.dock\", \"undockedPosition\", this.undockedPosition);\n\n\t\t\t//Assuming the re-assignment of positions/size doesn't need to take place\n\t\t\t//we don't need a switch here\n\t\t\tswitch (location) {\n\t\t\t\tcase this.monitorDockablePositions.TOP:\n\t\t\t\t\tdockPos = this.monitorDockablePositions.TOP;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.monitorDockablePositions.LEFT:\n\t\t\t\t\tdockPos = this.monitorDockablePositions.LEFT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.monitorDockablePositions.RIGHT:\n\t\t\t\t\tdockPos = this.monitorDockablePositions.RIGHT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.monitorDockablePositions.BOTTOM:\n\t\t\t\t\tdockPos = this.monitorDockablePositions.BOTTOM;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.dockedPosition = dockPos;\n\t\t\tthis.isDocked = true;\n\t\t}\n\t}\n\n\t/**\n\t * Function to handle chain of events when a dockable component type is undocked\n\t */\n\tundock() {\n\t\tif (this.isDockableComponent) {\n\t\t\tthis.isDocked = false;\n\t\t\tthis.dockedPosition = this.monitorDockablePositions.NONE;\n\t\t}\n\t}\n\n\thiddenUnclaimSpace() {\n\t\tif (this.isDocked) {\n\t\t\tlet locValue = this.getDockedStringFromLocation(this.dockedPosition);\n\t\t\tthis.monitor.onClaimedSpaceChanged({\n\t\t\t\twin: this,\n\t\t\t\toldBounds: this.undockedPosition,\n\t\t\t\tlocation: locValue,\n\t\t\t\tunchangedDockState: true,\n\t\t\t\taction: \"undock\"\n\t\t\t});\n\t\t}\n\t}\n\n\tunhiddenClaimSpace() {\n\t\tif (this.isDocked) {\n\t\t\tlet locValue = this.getDockedStringFromLocation(this.dockedPosition);\n\t\t\tthis.monitor.onClaimedSpaceChanged({\n\t\t\t\twin: this,\n\t\t\t\toldBounds: {},\n\t\t\t\tlocation: locValue,\n\t\t\t\tunchangedDockState: true,\n\t\t\t\taction: \"dock\"\n\t\t\t});\n\t\t}\n\t}\n\n\tsaveDockableData() {\n\t\tlet thisWindow = this;\n\t\tlet bounds = {\n\t\t\ttop: thisWindow.top,\n\t\t\tbottom: thisWindow.bottom,\n\t\t\tleft: thisWindow.left,\n\t\t\tright: thisWindow.right,\n\t\t\twidth: thisWindow.width,\n\t\t\theight: thisWindow.height,\n\t\t\tisDockable: this.isDocked,\n\t\t\tdockedPosition: thisWindow.dockedPosition\n\t\t};\n\n\t\t// must save the monitor date since if monitors changed since last restart then toolbar will use default settings (otherwise might have problems with visibility)\n\t\tSystem.getMonitorInfo((monitorInfo) => {\n\t\t\tlet monitorData = [monitorInfo.primaryMonitor, ...monitorInfo.nonPrimaryMonitors];\n\t\t\tthis.logger.system.debug(\"MONITOR: DockableWindow saveDockableData\", monitorData, !this.isHidden, bounds);\n\t\t\tStorageClient.save({\n\t\t\t\ttopic: this.name, key: this.name, value: {\n\t\t\t\t\tvisible: !this.isHidden,\n\t\t\t\t\t\"window-bounds\": bounds,\n\t\t\t\t\tmonitorData\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t}\n\n\t/**\n\t * If toolbar is not visible then move it to a visible position\n\t */\n\tasync makeSureMonitorDockableIsVisible() {\n\t\tthis.logger.system.debug(\"DockableWindow.makeSureMonitorDockableIsVisible\");\n\t\tlet currentBounds = {\n\t\t\ttop: this.top,\n\t\t\tbottom: this.bottom,\n\t\t\tleft: this.left,\n\t\t\tright: this.right,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t};\n\n\t\t// Could optionally put in user notication here.  I tested but commented out since not specified and it might be overkill.\n\t\t// UserNotification.alert(\"system\", \"ALWAYS\", \"toolbar\", \"Toolbar moved out of visible space. Adjusted to a visible position.\", { duration: 1000 * 3});\n\n\t\tlet newBounds = util.adjustBoundsToBeOnMonitor(currentBounds);\n\t\tthis.logger.system.debug(\"DockableWindow.makeSureMonitorDockableIsVisible requestMove\", \"currentBounds\", currentBounds, \"newBounds\", newBounds);\n\n\t\t// have to clone since the call below to calculator.requestMove modifies the bounds that were passed in (causing setBounds to be incorrect)\n\t\tlet newCopy = util.clone(newBounds);\n\n\t\t// since the toolbar is not visible, set to new adjusted position;\n\t\t// before moving, call request move to insure internal docking state is correctly maintained.\n\t\tthis.calculator.requestMove(newBounds, (bounds) => {\n\t\t\tthis.logger.system.debug(\"DockableWindow.makeSureMonitorDockableIsVisible setBounds\", \"newBounds\", newBounds);\n\t\t\tthis.setBounds(newCopy, (err) => {\n\t\t\t\tif (!this.hidden) {\n\t\t\t\t\tthis.win._show();\n\t\t\t\t\t// when remote connection is made using RDP, the monitor changes will redisplay window and potentially leave toolbar on bottom;\n\t\t\t\t\t// using a timer is dirty, but until we implement multi-monitor architecture there is not a signal to key on to indicate all monitor changes are done\n\t\t\t\t\t// (i.e. the time to invoke bringToFront since all the other windows have already been moved); note this bringToFront fixes an observed problen when RDP\n\t\t\t\t\t// caused the monitor change and the toolbar was left on the bottom of many other windows\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.logger.system.debug(\"DockableWindow.makeSureMonitorDockableIsVisible bringToFront\");\n\t\t\t\t\t\tthis.win._bringToFront();\n\t\t\t\t\t}, 3000);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tonBoundsChanged() {\n\t\tthis.logger.system.debug(\"MONITOR: onBoundsChanged\", this.isDockableComponent);\n\t\t//window.methodCalls[\"onBoundsChanged\"]++;\n\t\t//this represents the dockableWindow's context\n\t\tthis.setOpacity({ opacity: 1 });\n\t\tthis.resizeHandle = null;\n\t\tlet timestamp = Date.now();\n\t\t//This would be true if the window was maximized when the move request that triggered mouseDown was requested.\n\t\t//It should only be changed if, on mouse down the window is maximized.\n\t\tthis.shouldOffsetByMouse = false;\n\t\tthis.onboundschanged = timestamp;\n\t\tthis.lastBoundsAdjustment = timestamp;\n\t\tthis.monitor = this.calculator.getMonitorForWindow(this);\n\t\tthis.calculator.onMouseUp();\n\t\tthis.win._stopMove();\n\n\t\tif (this.isDockableComponent) {\n\t\t\tthis.logger.system.debug(\"MONITOR: onBoundsChanged saveDockableData\");\n\t\t\tthis.saveDockableData();\n\t\t\tthis.makeSureMonitorDockableIsVisible();\n\t\t}\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} request  {description}\n\t* @param  {type} callback {description}\n\t* @return {type} {description}\n\t*/\n\tonBoundsChanging(event, callback) {\n\t\t//this makes me cri\n\t\tlet request = event.data || event;\n\t\t//window.methodCalls[\"onBoundsChanging\"]++;\n\t\tthis.win._startMove();\n\t\ttry {\n\t\t\trequest.timestamp = Date.now();\n\t\t} catch (e) {\n\t\t\treturn;\n\t\t}\n\t\tvar self = this;\n\t\tSystem.getMousePosition(function (err, position) {\n\t\t\tfunction finishMove() {\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t\tself.lastBoundsAdjustment = Date.now();\n\t\t\t\tself.win.eventManager.addListener(BOUNDS_CHANGING, self.onBoundsChanging);\n\t\t\t}\n\t\t\tvar invalidateRequest = false;\n\t\t\tvar shouldThrottle = request.timestamp < self.lastBoundsAdjustment + self.resizeThrottlePeriod;\n\n\n\t\t\t//@note this conditional here is for testing. Node is faster than JS or something. In openfin, we need to also exclude requests that came in at the same time as the request we last processed. I think they sometimes send multiple events and in my testing, that never happens. Truthfully though I don't know why this bit has to be different in the different environments. But I do remember losing a day when I ported this stuff from test-world to openfin. Don't delete it. --Brad\n\t\t\tif (typeof fin === \"undefined\") {\n\t\t\t\tinvalidateRequest = shouldThrottle || request.timestamp < self.lastBoundsAdjustment;\n\t\t\t} else {\n\t\t\t\tinvalidateRequest = shouldThrottle || request.timestamp <= self.lastBoundsAdjustment;\n\t\t\t}\n\n\t\t\tif (invalidateRequest) {\n\t\t\t\tLogger.system.debug(\"DOCKING: Invalid request\", \"TIMESTAMPS:\", JSON.stringify(request.timestamp), JSON.stringify(self.lastBoundsAdjustment));\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (self.isMaximized) {\n\t\t\t\t/**\n\t\t\t\t * This is a way to lock out any processing until we finish processing the first move request\n\t\t\t\t * that comes in when a window is maximized.\n\t\t\t\t *\n\t\t\t\t * Events more or less get 'queued' by the underlying container. As quickly as they can, our container (openfin or electron)\n\t\t\t\t * will consume OS-level events and bubble them up to this layer. We have code in this file\n\t\t\t\t * here that says \"Hey, this request came in prior to the last time I made a change. I'm going to drop\n\t\t\t\t * this request . You're invalid. Goodbye.\" The thing we trigger off of is `lastBoundsAdjustment`.\n\t\t\t\t * This value is set _after_ we process the current move request.\n\t\t\t\t *\n\t\t\t\t * Maximize is special though. As soon as our first request comes in, we want to ensure that no additional requests are even considered.\n\t\t\t\t * To do that, we just say \"The last time we changed this window was super far into the future.\" Now,\n\t\t\t\t * every incoming request will be dropped until we have time to restore the window, do any group adjustments, and recalibrate.\n\t\t\t\t *\n\t\t\t\t * It sounds clunky, and it is somewhat. But I can't think of a better way to do this.\n\t\t\t\t */\n\t\t\t\tself.lastBoundsAdjustment = Date.now() + 1000000000;\n\n\t\t\t\t/**\n\t\t\t\t * This tells the `setMoveRequest` function to offset the incoming request in such a way\n\t\t\t\t * that the window is centered on the mouse pointer. If you call setBounds on a window that is maximized, subsequent move\n\t\t\t\t * requests will come in as though the window's left edge never moved, until mouseUp happens. This boolean helps us get\n\t\t\t\t * around this openfin bug.\n\t\t\t\t */\n\t\t\t\tself.shouldOffsetByMouse = true;\n\n\t\t\t}\n\t\t\t//For some reason their bounds are wrong for `move` changeTypes. How can a changeType be 0 and the width and height change? c'mon openfin. Gimme that logical consistency.\n\t\t\tif (OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT) {\n\t\t\t\trequest.width = self.width && request.changeType === 0 ? self.width : request.width;\n\t\t\t\trequest.height = self.height && request.changeType === 0 ? self.height : request.height;\n\t\t\t}\n\n\t\t\t//This comparison used to check right and bottom...props that don't exist on the request.\n\t\t\t//If all of the bounds haven't changed, don't waste time processing it.\n\t\t\t//On monitor resolution change, bounds will not change, but we still need to move\n\t\t\t//If the changeSource is \"system\", we might need to move even if the bounds haven't changed.\n\t\t\tif (request.changeSource !== \"system\") {\n\t\t\t\tif (request.left === self.left && request.top === self.top && request.width === self.width && request.height === self.height) {\n\t\t\t\t\tconsole.debug(\"No change being requested. Dropping.\");\n\t\t\t\t\tif (callback) callback();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tself.win.eventManager.removeListener(BOUNDS_CHANGING, self.onBoundsChanging);\n\n\n\t\t\trequest.right = request.left + request.width;\n\t\t\trequest.bottom = request.top + request.height;\n\t\t\trequest.groupNames = self.groupNames;\n\t\t\trequest.mousePosition = request.mousePosition || position;\n\n\t\t\tself.calculator.requestMove(request, function (bounds) {\n\n\t\t\t\tif (!bounds) {\n\t\t\t\t\tfinishMove();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.setBounds(bounds, function () {\n\t\t\t\t\tfinishMove();\n\t\t\t\t}, function (err) {\n\t\t\t\t\tLogger.system.error(\"ERROR IN SET BOUNDS\", err);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tsetResizeThrottlePeriod(throttlePeriod) {\n\t\t//window.methodCalls[\"setResizeThrottlePeriod\"]++;\n\t\tthis.resizeThrottlePeriod = throttlePeriod;\n\t}\n\n\t/**\n\t * This removes event listeners. I can't be entirely certain, but from my testing, it _appears_ that openfin isn't actually deleting these objects. if you close the window, then load the window with the same name, old listeners are still registered with your new window. So if you reload a workspace, and then try to move a window, you get weird scenarios where onBoundsChanging is called twice with different values (presumably for old eventlisteners). Removing the eventListeners on close seems to handle this.\n\t */\n\tremoveEventListeners() {\n\t\t//window.methodCalls[\"removeEventListeners\"]++;\n\t\tthis.removeEventListener(BOUNDS_CHANGING, this.onBoundsChanging);\n\t\tthis.removeEventListener(BOUNDS_CHANGED, this.onBoundsChanged);\n\t\t//This reason this is necessary is hard to explain.\n\t\t//When the dockableWindow is created we call win.addEventListener(BOUNDS_CHANGING, blah blah).\n\t\t//This forces the openfin window to bubble bounds events up to us. This function also goes out to the router and is pretty heavy for rapid addition/removal. Inside of onBoundsChanging, we add and remove handlers _on the event manager_. So when removeEventListeners is called, the two handlers above are removed. However, there's still that lingering listener that we added to the event manager inside of finishMove. If we don't remove that listener, we could get events thrown from other older incarnations of the same dockable window.\n\t\tthis.win.eventManager.removeListener(BOUNDS_CHANGING, this.onBoundsChanging);\n\t\tthis.win.removeEventListener(SYSTEM_BOUNDS_CHANGED, this.onSystemMovedWindow);\n\t}\n\n\t/********************************************\n\t *\t\t\t\t\t\t\t\t\t\t\t*\n\t *\t\t\tWindow Moving Methods\t\t\t*\n\t *\t\t\t\t\t\t\t\t\t\t\t*\n\t ********************************************/\n\n\t/**\n\t * Hides taskbar icon for openfin windows. This prevents them from being clobbered by aeroshake.\n\t */\n\thideTaskbarIcon() {\n\t\t//window.methodCalls[\"hideTaskbarIcon\"]++;\n\t\t//Check to see if the method exists. It wouldn't on an external window wrapper.\n\t\tif (this.win._updateOptions) {\n\t\t\tthis.win._updateOptions({ showTaskbarIcon: false });\n\t\t}\n\t}\n\n\t/**\n\t * This shows the taskbar icon for a given window.\n\t */\n\tshowTaskbarIcon() {\n\t\t//window.methodCalls[\"showTaskbarIcon\"]++;\n\n\t\tif (this.win._updateOptions && this.shouldShowTaskbarIcon) {\n\t\t\tthis.win._updateOptions({ showTaskbarIcon: true });\n\t\t}\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} event {description}\n\t* @param  {type} cb    {description}\n\t* @return {type} {description}\n\t*/\n\taddEventListener(event, cb) {\n\t\t//window.methodCalls[\"addEventListener\"]++;\n\t\tvar self = this;\n\t\tif (self.win.addEventListener) {\n\t\t\tself.win.addEventListener(event, cb);\n\t\t\tif (!this.events[event]) {\n\t\t\t\tthis.events[event] = [];\n\t\t\t}\n\t\t\tthis.events[event].push(cb);\n\t\t} else if (!warningsSent.addEventListener) {\n\t\t\twarningsSent.addEventListener = true;\n\t\t\tLogger.system.warn(\"Window wrapper does not have an addEventListener Method.\");\n\t\t}\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} event {description}\n\t* @param  {type} cb    {description}\n\t* @return {type} {description}\n\t*/\n\tremoveEventListener(event, cb) {\n\t\t//window.methodCalls[\"removeEventListener\"]++;\n\t\tvar self = this;\n\t\tif (self.win.removeEventListener) {\n\t\t\tself.win.removeEventListener(event, cb);\n\t\t\tthis.events[event].splice(this.events[event].indexOf(cb), 1);\n\t\t} else if (!warningsSent.removeEventListener) {\n\t\t\twarningsSent.removeEventListener = true;\n\t\t\tLogger.system.warn(\"Window wrapper does not have an removeEventListener Method.\");\n\t\t}\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tdisableFrame() {\n\t\t//window.methodCalls[\"disableFrame\"]++;\n\t\tif (this.win.disableFrame) {\n\t\t\tthis.win.disableFrame();\n\t\t} else if (!warningsSent.disableFrame) {\n\t\t\twarningsSent.disableFrame = true;\n\t\t\tLogger.system.warn(\"Window wrapper does not have a disableFrame Method\");\n\t\t}\n\t}\n\n\tsetOpacity(params = { opacity: 1, persist: false }) {\n\t\t//window.methodCalls[\"setOpacity\"]++;\n\t\t// if (opacity === this.opacity) return;\n\t\tthis.opacity = params.opacity;\n\t\tif (this.win._setOpacity) {\n\t\t\tthis.win._setOpacity(params);\n\t\t} else if (!warningsSent.setOpacity) {\n\t\t\twarningsSent.setOpacity = true;\n\t\t\tLogger.system.warn(\"Window wrapper does not have a setOpacity Method\");\n\t\t}\n\t}\n\n\t/**\n\t * Sets bounds for internal calculations.\n\t */\n\tsetInternalBounds(bounds) {\n\t\t//window.methodCalls[\"setInternalBounds\"]++;\n\t\t//Bunch of if statements was quicker than ternary operators when inside of loops.\n\t\tthis.left = typeof bounds.left === \"undefined\" ? this.left : bounds.left;\n\t\tthis.top = typeof bounds.top === \"undefined\" ? this.top : bounds.top;\n\t\tthis.width = typeof bounds.width === \"undefined\" ? this.width : bounds.width;\n\t\tthis.height = typeof bounds.height === \"undefined\" ? this.height : bounds.height;\n\t\tthis.right = typeof bounds.right === \"undefined\" ? this.left + this.width : bounds.right;\n\t\tthis.bottom = typeof bounds.bottom === \"undefined\" ? this.top + this.height : bounds.bottom;\n\t\tthis.setBoundingBoxes();\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds    {description}\n\t* @param  {type} successCB {description}\n\t* @param  {type} errCB     {description}\n\t* @return {type} {description}\n\t*/\n\tsetBounds(bounds, successCB, errCB) {\n\t\tthis.setInternalBounds(bounds);\n\t\tbounds = {\n\t\t\tleft: bounds.left,\n\t\t\twidth: bounds.width,\n\t\t\theight: bounds.height,\n\t\t\ttop: bounds.top,\n\t\t\tright: bounds.right,\n\t\t\tbottom: bounds.bottom,\n\t\t\tpersistBounds: bounds.persistBounds\n\t\t};\n\t\t//Old way was to update the monitor on the window when onMouseUp occurred, but now the OS (as well as user) can move a window and the monitor for that window should be updated every time\n\t\tthis.monitor = this.calculator.getMonitorForWindow(this);\n\t\t//window.methodCalls[\"setBounds\"]++;\n\t\tthis.win._setBounds({ bounds }, () => {\n\t\t\tif (successCB) {\n\t\t\t\tsuccessCB();\n\t\t\t}\n\t\t}, errCB);\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} left {description}\n\t* @param  {type} top  {description}\n\t* @return {type} {description}\n\t*/\n\tmoveTo(left, top) {\n\t\t//window.methodCalls[\"moveTo\"]++;\n\t\tthis.setBounds({\n\t\t\tleft: left,\n\t\t\ttop: top,\n\t\t\tright: left + this.width,\n\t\t\tbottom: top + this.height,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t});\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tgetGroupNames() {\n\t\treturn this.groupNames;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} request  {description}\n\t* @param  {type} callback {description}\n\t* @return {type} {description}\n\t*/\n\trequestBoundsChange(request, callback) {\n\t\t//window.methodCalls[\"requestBoundsChange\"]++;\n\t\t//for testing purposes only - TODO: this is probably broken\n\t\tvar self = this;\n\t\tif (!callback) {\n\t\t\tcallback = self.onBoundsChanged;\n\t\t}\n\t\tSystem.getMousePosition((err, position) => {\n\t\t\tself.onBoundsChanging({\n\t\t\t\tdata: {\n\t\t\t\t\tcorners: this.getCornerObject(request),\n\t\t\t\t\tleft: request.left,\n\t\t\t\t\ttop: request.top,\n\t\t\t\t\twidth: request.width,\n\t\t\t\t\theight: request.height,\n\t\t\t\t\tchangeType: request.changeType,\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tuuid: this.uuid,\n\t\t\t\t\tmousePosition: request.mousePosition || position\n\t\t\t\t}\n\t\t\t}, () => {\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n\n\n\t/********************************************\n\t *\t\t\t\t\t\t\t\t\t\t\t*\n\t *\t\t\tHelper Functions\t\t\t\t*\n\t *\t\t\t\t\t\t\t\t\t\t\t*\n\t ********************************************/\n\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tcalculateInnerBoundingBox() {\n\t\t//window.methodCalls[\"calculateInnerBoundingBox\"]++;\n\t\tvar adjustment = this.bufferSize * 2;\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: this.left + adjustment,\n\t\t\t\ty: this.top + adjustment\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right - adjustment,\n\t\t\t\ty: this.bottom - adjustment\n\t\t\t}\n\t\t};\n\t}\n\n\tgetInnerBoundingBox() {\n\t\treturn this.innerBuffer;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bufferSize {description}\n\t* @return {type} {description}\n\t*/\n\tsetBufferSize(bufferSize) {\n\t\tthis.bufferSize = bufferSize;\n\t\tthis.setBoundingBoxes();\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tsetBoundingBoxes() {\n\t\tlet myBounds = this.getBounds();\n\t\tthis.setBuffer();\n\t\tthis.innerBuffer = this.calculateInnerBoundingBox();\n\t\tthis.windowBoundingBox = BoxMath.getWindowBoundingBox(myBounds);\n\t\tthis.setSnappingRegions();\n\t\tthis.vertices = this.getCornerObject(myBounds);\n\t}\n\n\n\tgetSnappingRegions() {\n\t\treturn this.snappingRegions;\n\t}\n\n\tupdateState() {\n\t\tthis.win._getBounds(null, (err, bounds) => {\n\t\t\tthis.setBounds(bounds);\n\t\t});\n\t}\n\n\t/**\n * @function setHidden\n * @param  {function=} callback when done\n *\n\t * Sets the internal state to hidden.  Only needed if window is hidden outside of this class.\n */\n\tsetHidden(cb = Function.prototype) {\n\t\tthis.logger.system.debug(\"MONITOR: DockableWindow hide state\");\n\t\tthis.isHidden = true;\n\t}\n\n\t/**\n * @function setHidden\n * @param  {function=} callback when done\n *\n\t * Sets the internal state to shown (i.e. not hidden). Only needed if window is hidden outside of this class.\n */\n\tsetShown(cb = Function.prototype) {\n\t\tthis.logger.system.debug(\"MONITOR: DockableWindow.show state\");\n\t\tthis.isHidden = false;\n\t}\n\n\thide(cb = Function.prototype) {\n\t\tthis.win._hide(cb);\n\t\tthis.isHidden = true;\n\t}\n\n\tshow(cb = Function.prototype) {\n\t\tthis.win._show(cb);\n\t\tthis.isHidden = false;\n\t}\n\n\tminimize(cb = Function.prototype) {\n\t\tthis.isMinimized = true;\n\t\tthis.win._minimize(cb);\n\t}\n\n\trestore(cb) {\n\t\tthis.isMinimized = false;\n\t\tthis.win._restore(cb);\n\t}\n\n\talwaysOnTop(isAlwaysOnTop) {\n\t\ttry {\n\t\t\tthis.win._alwaysOnTop({ alwaysOnTop: isAlwaysOnTop });\n\t\t} catch (e) {\n\t\t\tLogger.system.debug(\"Implement alwaysOnTop\");\n\t\t}\n\t}\n\n\t/**\n\t * Returns the present alwaysOnTop status of the window.\n\t *\n\t * NOTE: This only reflects Finsemble's internal representation\n\t * of the alwaysOnTop status, not the container/OS. When changing the status,\n\t * Finsemble's status changes before the underlying container, causing them\n\t * to briefly become out of sync.\n\t */\n\tisAlwaysOnTop() {\n\t\treturn this.win._isAlwaysOnTop();\n\t}\n\n\tbringToFront() {\n\t\t//window.methodCalls[\"bringToFront\"]++;\n\t\ttry {\n\t\t\tthis.win._bringToFront();\n\t\t} catch (e) {\n\t\t\tLogger.system.error(\"Implement bringToFront\");\n\t\t}\n\t}\n\n\n\tnotifyWindowTitleBarOfGroupMembership() {\n\t\tif (typeof (RouterClient) !== \"undefined\") {\n\t\t\tRouterClient.transmit(this.name + \".groupMembershipChange\", {\n\t\t\t\ttype: \"joined\"\n\t\t\t});\n\t\t}\n\t}\n\n\tnotifyWindowTitleBarOfGroupEjection() {\n\t\tif (typeof (RouterClient) !== \"undefined\") {\n\t\t\tRouterClient.transmit(this.name + \".groupMembershipChange\", {\n\t\t\t\ttype: \"ejected\"\n\t\t\t});\n\t\t}\n\t}\n\n\taddSnappedWindow(snapObj) {\n\t\tif (!this.snappedWindows) {\n\t\t\tthis.snappedWindows = [];\n\t\t}\n\t\tvar shouldAdd = true;\n\t\tfor (var i = 0; i < this.snappedWindows.length; i++) {\n\t\t\tvar snappedWin = this.snappedWindows[i];\n\t\t\tif (snappedWin.name === snapObj.name) {\n\t\t\t\tshouldAdd = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (shouldAdd) {\n\t\t\tthis.snappedWindows.push(snapObj);\n\t\t}\n\t}\n\n\tremoveSnappedWindow(name) {\n\t\tif (this.snappedWindows) {\n\t\t\tfor (var i = 0; i < this.snappedWindows.length; i++) {\n\t\t\t\tvar snappedWin = this.snappedWindows[i];\n\t\t\t\tif (name === snappedWin.name) {\n\t\t\t\t\t// Logger.system.log(\"Removing\", name, \"from\", this.name);\n\t\t\t\t\tthis.snappedWindows.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tanimatePositionAndHeight(params, cb) {\n\t\tthis.setInternalBounds(params);\n\t\tif (false && this.win.animate) { //temporarily disable animations - look for this function in autoarrange.js\n\t\t\tthis.win.animate({\n\t\t\t\ttransitions: {\n\t\t\t\t\tposition: {\n\t\t\t\t\t\ttop: params.top || 0,\n\t\t\t\t\t\tleft: params.left || 0,\n\t\t\t\t\t\tduration: params.duration || 175\n\t\t\t\t\t},\n\t\t\t\t\tsize: {\n\t\t\t\t\t\theight: params.height || 100,\n\t\t\t\t\t\twidth: params.width || 100,\n\t\t\t\t\t\tduration: params.duration || 175\n\t\t\t\t\t}\n\t\t\t\t}, options: null\n\t\t\t}, {\n\t\t\t\tpersistBounds: true\n\t\t\t}, cb);\n\t\t} else if (this.win._setBounds) {\n\t\t\tparams.persistBounds = true;\n\t\t\tthis.win._setBounds({ bounds: params }, cb);\n\t\t}\n\t}\n\n\tisGrouped() {\n\t\treturn this.groups.length;\n\t}\n\n\t/**\n\t * Adds eventListeners so that when the finWIndow moves, we can do things with that data.\n\t */\n\taddListeners() {\n\t\tthis.addEventListener(BOUNDS_CHANGED, this.onBoundsChanged);\n\t\tthis.addEventListener(BOUNDS_CHANGING, this.onBoundsChanging);\n\t\tthis.win.addEventListener(BOUNDS_CHANGED, this.onBoundsChanged);\n\t\tthis.win.addEventListener(\"hidden\", this.hiddenUnclaimSpace);\n\t\tthis.win.addEventListener(\"shown\", this.unhiddenClaimSpace);\n\t\tthis.win.addEventListener(SYSTEM_BOUNDS_CHANGED, this.onSystemMovedWindow);\n\n\t}\n}\nexport default DockableWindow;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockableWindow.js","import DockableMonitor from \"./dockableMonitor\";\nimport DockableGroup from \"./dockableGroup\";\nimport DockableBox from \"./dockableBox\";\nimport BoxMath from \"./boxMath\";\nimport maskBoundsCalculator from \"./maskBoundsCalculator\";\nimport { queue, eachSeries as asyncEachSeries, forEach as asyncForEach } from \"async\";\nimport { MonitorPoolSingleton, GroupPoolSingleton, DockingPoolSingleton } from \"../Common/Pools/PoolSingletons\";\nimport { clone } from \"../../../common/disentangledUtils\";\n/** Singleton of the Logger class shared among all instances of DockingCalculator\n * @TODO Refactor to instance member of class.\n */\nlet Logger;\n/** Singleton of the System class shared among all instances of DockingCalculator\n * @TODO Refactor to instance member of class.\n */\nlet System;\nvar RouterClient = null;\nif (typeof (window) !== \"undefined\") {\n\tif (window.RouterClient) {\n\t\t//docking service\n\t\tRouterClient = window.RouterClient;\n\n\t}\n}\nif (typeof FSBL !== \"undefined\") {\n\tif (FSBL && FSBL.Clients.RouterClient) {\n\t\t//test runner\n\t\tRouterClient = FSBL.Clients.RouterClient;\n\t}\n}\n\nvar MINIMUM_HEIGHT, MINIMUM_WIDTH, ALLOW_GROUPS_TO_SNAP;\nimport { CORNERS, EDGES, OPPOSITE_EDGE_MAP } from \"./constants\";\nvar SNAPPING_OPACITY = 0.8;\nvar debug = false;\nvar restrictedAreas = [];\n\nfunction uuidv4() {\n\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n\t\tvar r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * The pools are just the collection of windows that the DockingCalculator is concerned with\n */\n\nvar groupPool = GroupPoolSingleton,\n\t//@todo, investigate why I made this a global.\n\tsnappableWindows,\n\t//Amount of wiggle room to give when trying to figure out whether the user was clicking a corner or not. Since windows can have different resize regions, there's no guarantee that the user will click directly on the corner of a window.\n\tcornerTolerance = 15,\n\t//Stationary and moving window are cached onMouseDown and cleared onMouseUp.\n\tstationaryWindow = null,\n\t//Windows to ignore for grouping functions (e.g., toolbar - it can snap, but shouldn't group)\n\tgroupBlacklist = [],\n\t//@todo, investigate why I made this global. I suspect it was a mistake, or an early pass. This is used when resizing interior windows of a group.\n\tjoinedWindowNames = [],\n\tjoinedWindows = [],\n\t//This allows us to defer adding windows/removing windows from a group until onMouseDown. It's modified onMouseMove. @todo, just calculate it onMouseDown, ya dummy.\n\tgroupAction = {\n\t\tname: null,\n\t\twindows: []\n\t},\n\tshortCircuit = false,\n\tmonitorPool = MonitorPoolSingleton;\n\nfunction setBoundsErrorCB(err) {\n\tLogger.system.error(err);\n}\n\n/**\n *\n *\n * @returns\n */\nclass DockingCalculator {\n\t/**\n\t * @param {object} params Config for the Calculator\n\t * @param {object} dependencies Dependency object that provides the System, and Logger.\n\t * @param {System} dependencies.System\n\t * @param {Logger} dependencies.Logger\n\t */\n\tconstructor(params, dependencies) {\n\t\tif (dependencies) {\n\t\t\tLogger = dependencies.Logger;\n\t\t\tSystem = dependencies.System;\n\t\t} else {\n\t\t\tthrow new Error(\"DockingCalculator class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.\");\n\t\t}\n\n\t\t//object that's created onMouseDown. Used to cache potentially expensive operations and common information needed across functions.\n\t\tthis.resizeObject = {};\n\t\tthis.groupMode = {\n\t\t\tenabled: true,\n\t\t};\n\t\tthis.groupMask = null;\n\t\t//Placeholder for the moveRequest. @todo, see if this is necessary. Pretty sure I just pass the reference around everywhere.\n\t\tthis.moveRequest = null;\n\t\tthis.dockingPool = DockingPoolSingleton;\n\t\t//See comment above.\n\t\tthis.stationaryWindow = null;\n\t\tthis.movingWindow = null;\n\t\t//Default bufferSize. Can be overwritten by `setBufferSize`.\n\t\tthis.bufferSize = 15;\n\t\tthis.resizeEventThrottlePeriod = 0;\n\t\tthis.moveCount = 0;\n\t\tthis.intersection = null;\n\t\t//The group mask operations are asynchronous and take a variable amount of time. Generally speaking, show takes longer to complete than hide. So if you call show, and 4ms later call hide, you can finish hiding the group mask before the show has completed. This boolean tells the calculator whether the mask should be hidden or shown. Before calling .show or .hide, we check to see if the last function called matches. So if we expect the mask to be hidden, but we're about to call .show, we exit early.\n\t\tthis.groupMaskExpectedState = \"hidden\";\n\t\tthis.groupMaskQueue = queue(function (task, callback) {\n\t\t\ttask(callback);\n\t\t});\n\t}\n\n\t/****************************************\n * Core Loop\n * Docking works like this:\n * A dockableWindow receives a `bounds-change-request` event from the window object that it wraps (e.g., an openfin window). Then the docking calculator gets to work.\n * 1. `this.requestMove`.\n * 2. `this.onMouseDown`.\n * 3. `this.onMouseMove`.\n *\n * As the user moves her mouse around, steps 1 and 3 are executed.When she releases her mouse, the dockableWindow throws a `bounds-changed` event, which in turn calls `this.onMouseUp`.\n * The general idea is that the user says \"Hey, I'd like to move my window 10px to the right of this window. The calculator spins through, notices that the window that the user is moving is within a snapping buffer around the other window. So it responds, \"You're too close to that window, sorry, but we're snapping you.\". If the movingWindow isn't within the stationaryWindow's buffer, we give the window the all clear to proceed.\n ****************************************/\n\t/**\n\t* This is the core controller of the program. It routes the window's moveRequest to the appropriate place, and it receives the modified bounds afterwards. It communicates the modified bounds to the window via the CB.\n\t* @param  {moveRequest} Request from the `dockableWindow`.\n\t* @param  {function} cb What to do after the window's new bounds have been calculated.\n\t*/\n\trequestMove(userRequest, cb) {\n\t\t// console.log(\"REQUEST MOVE\", userRequest.changeType);\n\t\tif (!userRequest) {\n\t\t\tLogger.system.warn(\"INVESTIGATE: userRequest null or undefined in requestMove.\");\n\t\t\tcb(null);\n\t\t\treturn;\n\t\t}\n\t\tlet win = this.getWindow(userRequest.name);\n\n\t\tif (!win) {\n\t\t\tcb(null);\n\t\t\treturn Logger.system.warn(\"Got Move Request From Window Not Registered With Docking\", userRequest.name);\n\t\t}\n\n\n\t\t//Occasionally openfin bubbles up an incorrect change type. A resize from the top right would start with a changeType of 0. The next move will have the proper change type. If we detect that scenario, we need to reset the resizeObject.\n\t\tif (this.moveRequest && this.moveRequest === 0 && userRequest.changeType !== 0) {\n\t\t\tthis.resizeObject = this.constructResizeObject(moveRequest);\n\t\t}\n\t\t// Force minimum height and width even if not in group.\n\t\tif (userRequest.changeType !== 0) userRequest = this.checkShortCircuits(userRequest);\n\n\t\tif (this.shiftKey && userRequest.changeType === 0 && userRequest.groupNames.length) {//Remove from group and move\n\t\t\tlet groupNames = clone(userRequest.groupNames, Logger.system.error);\n\t\t\tgroupNames.forEach(groupName => {\n\t\t\t\tthis.removeWindowFromGroup(userRequest.name, groupName);\n\t\t\t\tthis.wipeSnapRelationships(userRequest.name);\n\t\t\t});\n\n\t\t\tif (this.updateGroupData) {\n\t\t\t\tthis.updateGroupData();\n\t\t\t}\n\t\t\tuserRequest.groupName = null;\n\t\t}\n\t\tfunction afterMove(bounds) {\n\t\t\tself.onMouseMove(bounds, cb);\n\t\t}\n\t\tgroupAction = {\n\t\t\tname: null,\n\t\t\twindows: []\n\t\t};\n\n\t\t/***\n\t\t * The check below is to see whether we should call onMouseDown, which resets a lot of cached information for docking. There are a couple of cases where we want to call onMouseDown.\n\t\t\t1. We don't have a cached movingWindow reference. This can mean that onMouseDown hasn't been called, _or_ the moving window was removed from docking before onMouseUp was called. This can be triggered by tiling operations.\n\t\t\t2. We don't have a cached moveRequest.\n\t\t\t3. We have a moverequest, but the incoming request has a different change type. The only time we've seen that is in the case of aero-snap. if you aero-snap a window to the side or top of a monitor, then move it, it sends in a changeType of 2 - change in position in size. In any normal world, this is a resize. But it comes in as though a user moved the window. That confuses docking.\n\t\t */\n\t\tif (!this.movingWindow || !this.moveRequest || (this.moveRequest && this.moveRequest.changeType !== userRequest.changeType)) {\n\t\t\tthis.onMouseDown(userRequest);\n\t\t}\n\n\t\tvar moveRequest = this.setMoveRequest(userRequest),\n\t\t\tself = this;\n\n\t\tif (moveRequest.changeType === undefined) {\n\t\t\tmoveRequest.changeType = 0;\n\t\t}\n\n\t\tmoveRequest.groupNames = this.movingWindow.groupNames;\n\t\tmoveRequest.movingRegion = this.resizeObject.correctedHandle;\n\t\tmoveRequest.resizeHandle = moveRequest.forceResizeHandle ? moveRequest.resizeHandle : this.resizeObject.correctedHandle;\n\n\t\t/**\n\t\t * 5/20/19 Joe: Previously handleMoveRequestForMaximizedWindow was being called\n\t\t * without setting movingGroup. In the event that the maximize request comes\n\t\t * into a window that is a group, this will throw an error.\n\t\t */\n\t\tthis.movingGroup = this.getMovingGroup(moveRequest);\n\n\t\t/**\n\t\t * 6/5/19 Joe: If the moving window is in a group (movingGroup is defined)\n\t\t * and any windows in the group that aren't the moving window are maximized\n\t\t * then restore them\n\t\t */\n\t\tif (this.movingGroup) {\n\t\t\tObject.keys(this.movingGroup.windows).map(windowName => {\n\t\t\t\tconst win = this.movingGroup.windows[windowName];\n\t\t\t\tif (win.isMaximized && win.name !== this.movingWindow.name) {\n\t\t\t\t\twin.restore();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (this.movingWindow.isMaximized) {\n\t\t\treturn this.handleMoveRequestForMaximizedWindow(userRequest, cb);\n\t\t}\n\n\t\tif (this.groupMode.enabled && moveRequest.groupNames.length) {///Do something if in a group.\n\t\t\tthis.handleGroup(moveRequest, afterMove);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.checkBuffers(moveRequest, afterMove);\n\t}\n\n\t/**\n\t * Move requests from windows that were maximized were previously ignored because solving the problem is hard.\n\t *\n\t * There are a couple of difficult things we have to contend with.\n\t * 1. Let's ay the window is maximized, and its left edge is 100. So we go ahead and restore the window, and\n\t * continue processing moves. Sadly, openfin (maybe electron too??) bubbles up events as though the left\n\t * edge never changed. To combat this we add a `shouldOffsetByMousePosition` property on the dockableWindow.\n\t * This forces the window to center itself on the user's mouse.\n\t *\n\t * That solves the single window scenario perfectly. Now what if the window is in a group? :scream_emoji:.\n\t *\n\t * Now we need to offset _every window in the group_ by the mouse offset. This is bananas, but it's what we have to do so that the user gets\n\t * the experience that she deserves.\n\t *\n\t * @param req moveRequest.\n\t * @param cb function to call when finished.\n\t */\n\thandleMoveRequestForMaximizedWindow(req, cb) {\n\t\tif (!req.mousePosition) {\n\t\t\tLogger.system.error(\"Assertion Failed! A move request was received for a maximized window, but the request\"\n\t\t\t\t+ \"is missing a mouse position. If moving the window programmatically, did you forget to add a mouse position ? \");\n\t\t\treturn cb(null);\n\t\t}\n\n\t\tlet win = this.getWindow(req.name);\n\n\t\tlet newBounds = req;\n\t\t//If we have cached bounds, its the size that the window was before it was maximized. Otherwise...well...we shouldn't be getting in here.\n\t\t//This is just for safety's sake.\n\t\tnewBounds = Object.assign(newBounds, win.cachedBounds || {\n\t\t\tleft: win.left,\n\t\t\ttop: win.top,\n\t\t\twidth: win.width,\n\t\t\theight: win.height\n\t\t});\n\n\t\t//The difference between where the window _is_ and where the window _will be_.\n\t\t//This value will be used to offset other windows in the group, if the window is part of the group.\n\t\tconst offsetTop = newBounds.top - win.top;\n\t\tconst offsetLeft = newBounds.left - win.left;\n\n\t\t//Center the window on the user's pointer.\n\t\tnewBounds.left = req.mousePosition.x + Math.round(newBounds.width / 2);\n\t\tnewBounds.top = req.mousePosition.y;\n\t\tnewBounds.right = newBounds.left + newBounds.width;\n\t\tnewBounds.bottom = newBounds.top + newBounds.height;\n\n\t\t//Restore our window to where it was before it was maximized. Afterwards, move it.\n\t\t//If it's part of a group, drag everyone along for the ride.\n\t\twin.restore(() => {\n\t\t\tif (this.groupMode.enabled && win.groupNames.length) {///Do something if in a group.\n\t\t\t\tconst windowsInGroup = this.groupWindowIterator(this.movingGroup);\n\n\t\t\t\t//Next, we'll move each window by the offset that the mouse position will create. Essentially we are teleporting every window in the group so that they're relative to the window that's moving.\n\t\t\t\tconst moveWindowByOffset = (win, done) => {\n\t\t\t\t\tconst newSpot = win.getBounds();\n\t\t\t\t\tnewSpot.left = win.left + offsetLeft;\n\t\t\t\t\tnewSpot.top = win.top + offsetTop;\n\t\t\t\t\tnewSpot.name = win.name;\n\t\t\t\t\tthis.moveWindow(newSpot, done);\n\t\t\t\t};\n\n\t\t\t\tconst updateGroupAndExit = () => {\n\t\t\t\t\t//This ensures that the group knows where its boundaries are.\n\t\t\t\t\tthis.movingGroup.updateBounds();\n\t\t\t\t\tcb(null);\n\t\t\t\t};\n\n\t\t\t\tasyncForEach(windowsInGroup, moveWindowByOffset, updateGroupAndExit);\n\t\t\t} else {\n\t\t\t\tthis.moveWindow(newBounds, () => {\n\t\t\t\t\tcb(null);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// If the window has been restored, we want to reset this.movingWindow.isMaximized\n\t\t\t// otherwise every subsequent move of this window will enter this function\n\t\t\tthis.movingWindow.isMaximized = false;\n\t\t});\n\t}\n\t/**\n\t * Makes sure that the requested move is occurring in space that is unclaimed by toolbars or other components. This should prevent a window from resizing/moving on top of a toolbar until it passes a threshold.\n\t * @param {object} moveRequest moverequest.\n\t */\n\tmakeSureMoveIsInUnclaimedSpace(moveRequest) {\n\t\tvar unclaimedSpaceOverlaps = this.getUnclaimedSpaceOverlaps(moveRequest);\n\t\tvar win = this.getWindow(moveRequest.name);\n\t\tfor (var i = 0, len = unclaimedSpaceOverlaps.length; i < len; i++) {\n\t\t\tvar overlap = unclaimedSpaceOverlaps[i];\n\t\t\tfor (var e = 0, edgeLen = EDGES.length; e < edgeLen; e++) {\n\t\t\t\tvar edge = EDGES[e];\n\t\t\t\tif (BoxMath.intersectBoundingBoxes(moveRequest.snappingRegions[edge], overlap)) {\n\t\t\t\t\tif (overlap.position === \"top\") {\n\t\t\t\t\t\tmoveRequest.top = overlap.max.y;\n\t\t\t\t\t\tif (moveRequest.changeType === 0 && moveRequest.top === win.top) {\n\t\t\t\t\t\t\tmoveRequest.bottom = moveRequest.top + win.height;\n\t\t\t\t\t\t\tmoveRequest.height = win.height;\n\t\t\t\t\t\t}//do stuff;\n\n\t\t\t\t\t}\n\t\t\t\t\tif (overlap.position === \"bottom\") {\n\t\t\t\t\t\tmoveRequest.bottom = overlap.min.y;\n\t\t\t\t\t\tif (moveRequest.changeType === 0 && moveRequest.bottom === win.bottom) {\n\t\t\t\t\t\t\tmoveRequest.top = moveRequest.bottom - win.height;\n\t\t\t\t\t\t\tmoveRequest.height = win.height;\n\t\t\t\t\t\t}//do stuff;\n\n\t\t\t\t\t}\n\t\t\t\t\tif (overlap.position === \"right\") {\n\t\t\t\t\t\tmoveRequest.right = overlap.min.x;\n\t\t\t\t\t\tif (moveRequest.changeType === 0 && moveRequest.left === win.left) {\n\t\t\t\t\t\t\tmoveRequest.left = moveRequest.right - win.width;\n\t\t\t\t\t\t\tmoveRequest.width = win.width;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif (overlap.position === \"left\") {\n\t\t\t\t\t\tmoveRequest.left = overlap.max.x;\n\t\t\t\t\t\tif (moveRequest.changeType === 0 && moveRequest.right === win.right) {\n\t\t\t\t\t\t\tmoveRequest.right = moveRequest.left + win.width;\n\t\t\t\t\t\t\tmoveRequest.width = win.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (moveRequest.changeType !== 0) {\n\t\t\tmoveRequest.height = moveRequest.bottom - moveRequest.top;\n\t\t\tmoveRequest.width = moveRequest.right - moveRequest.left;\n\t\t}\n\n\n\t\treturn moveRequest;\n\t}\n\n\t/**\n\t * This function goes through the restricted areas, or claimedSpaces as they're called in the launcherService. If the moveRequest would cause the window to overlap with the claimed space, we return True - this is an invalid request. requestMove then just drops the request on the floor.\n\t */\n\tgetUnclaimedSpaceOverlaps(moveRequest) {\n\t\tvar innerBoundary = {\n\t\t\tmin: {\n\t\t\t\tx: moveRequest.left + (moveRequest.width * .25),\n\t\t\t\ty: moveRequest.top + (moveRequest.height * .25)\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: moveRequest.right - (moveRequest.width * .25),\n\t\t\t\ty: moveRequest.bottom - (moveRequest.bottom * .25)\n\t\t\t}\n\t\t};\n\t\tif (restrictedAreas.length) {\n\t\t\tvar overlaps = [];\n\t\t\tfor (var i = 0, len = restrictedAreas.length; i < len; i++) {\n\t\t\t\tvar boundingBox = restrictedAreas[i];\n\t\t\t\tif (BoxMath.intersectBoundingBoxes(innerBoundary, boundingBox)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (BoxMath.intersectBoundingBoxes(BoxMath.getWindowBoundingBox(moveRequest), boundingBox)) {\n\t\t\t\t\toverlaps.push(boundingBox);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn overlaps;\n\t\t}\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Windows can be part of two groups - one that can move, and one that allows shared border resizing/group resizing. When N windows are snapped together but not explicitly grouped together, they form an \"immobileGroup\". A movable group is one that the user has explicitly formed. This function returns the appropriate group, given a moveRequest.\n\t * @param {object} moveRequest moverequest.\n\t */\n\tgetMovingGroup(moveRequest) {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"getMovingGroup\", moveRequest.name);\n\t\t}\n\n\t\t//If snapped windows can't resize, we always want to return the movable group first.\n\t\tif (this.groupMode.allowSnappedWindowsToResize && moveRequest.changeType !== 0) {\n\t\t\treturn this.getImmobileGroup(moveRequest.name) || this.getMovableGroup(moveRequest.name);\n\t\t}\n\n\t\treturn this.getMovableGroup(moveRequest.name) || this.getImmobileGroup(moveRequest.name);\n\t}\n\n\t/**\n\t * Loops through all DockableGroups and reconstitutes gaps. This is to clean up an issue where\n\t * grouped windows containing a single pixel gap would break on mouse down as the system would\n\t * no longer consider them snapped, and therefore would break and remove the group\n\t */\n\tfixAllGroupGaps() {\n\t\tObject.values(this.getGroups()).forEach(group => {\n\t\t\tthis.cleanupGroupGaps(group);\n\t\t});\n\t}\n\n\t/**\n\t * Given a group, will clean up the gaps and reconstitute the groups\n\t * @param {object} group An object containing groups, with groupName as key\n\t */\n\tcleanupGroupGaps(group) {\n\t\tlet windowBounds = this.getBoundsOfGroupWindows(group);\n\t\t//windowBounds = this.cleanupSharedEdges(group, windowBounds, 0);\n\t\twindowBounds = this.cleanupGaps(group, windowBounds);\n\t\tthis.setBoundsOfGroupWindows(group, windowBounds);\n\t}\n\n\t/**\n\t * This function caches information in the resizeObject so that it doesn't need to be calculated onMouseMove.\n\t */\n\tonMouseDown(moveRequest) {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"onMouseDown\", moveRequest.name);\n\t\t}\n\t\tif (RouterClient) RouterClient.transmit(\"Assimilation.taskbar\", { visible: false });\n\n\t\tif (this.moveCount === 0) {\n\t\t\t/*\n\t\t\t * JC 7/26/19 - Cleanup group gaps on first move to solve an issue where grouped\n\t\t\t * windows with a single pixel gap would break when the group was moved\n\t\t\t */\n\t\t\tthis.fixAllGroupGaps();\n\t\t\tthis.recalculateSnaps();\n\t\t}\n\t\tthis.moveCount++;\n\t\tthis.movingWindow = this.getWindow(moveRequest.name);\n\t\tthis.movingWindow.resizeHandle = null;\n\t\tif (!this.movingWindow) {\n\t\t\tthrow new Error(\"Window not found\");\n\t\t}\n\n\t\t//When we mouse down on a dockable component, we need to store the monitor its on immediately.\n\t\t//Sometimes, in a multi-monitor configuration, when the window undocks it will momentarily\n\t\t//jump to another monitor (since the grabber when docked is always near a monitor edge).\n\t\t//To prevent the moveAllWindowsOutOfClaimedSpace calculation from using the\n\t\t//wrong monitor, we store it on the window to remove it later.\n\t\tif (this.movingWindow.isDockableComponent && this.movingWindow.isDocked) {\n\t\t\tthis.movingWindow.dockedMonitor = this.getMonitorForWindow(this.movingWindow); // Not sure why this.movingWindow.monitor is wrong on restart (is always display1)\n\t\t}\n\t\tthis.movingGroup = this.getMovingGroup(moveRequest);\n\t\tif (this.movingGroup) {\n\t\t\tfor (const windowName in this.movingGroup.windows) {\n\t\t\t\tthis.getWindow(windowName).bringToFront();\n\t\t\t}\n\t\t\tthis.movingGroup.startMove();\n\t\t} else {\n\t\t\tthis.movingWindow.win.startMove();\n\t\t}\n\t\tif (this.groupMode.behavior === \"explicit\") {\n\t\t\t//If there's no moving group, then we're moving an individual window. if it's part of a resizableGroup, it needs to be removed from that group.\n\t\t\tif (moveRequest.changeType === 0 && this.movingGroup && !this.movingGroup.isMovable) {\n\t\t\t\tthis.removeWindowFromGroup(moveRequest.name, this.movingGroup.name);\n\t\t\t\tthis.wipeSnapRelationships(moveRequest.name);\n\t\t\t}\n\n\t\t}\n\t\tthis.resizeObject = this.constructResizeObject(moveRequest);\n\n\t\tlet dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (let win of dockingPoolIterator) {\n\t\t\tif (win.name !== moveRequest.name) {\n\t\t\t\twin.hideTaskbarIcon();\n\t\t\t}\n\t\t}\n\n\t\tif (this.resizeObject.scalingGroup) {\n\t\t\tlet groupIter = this.groupWindowIterator(this.movingGroup);\n\t\t\tfor (let win of groupIter) {\n\t\t\t\twin.hide();\n\t\t\t}\n\t\t\tmaskBoundsCalculator.mouseDown(\n\t\t\t\tthis.movingGroup.getBounds(),\n\t\t\t\tmoveRequest.mousePosition,\n\t\t\t\tthis.resizeObject\n\t\t\t);\n\t\t\tthis.showGroupMask({ bounds: this.movingGroup.getBounds(), opacity: 0.5 }, () => { });\n\t\t}\n\t}\n\n\thideGroupMask(cb = Function.prototype) {\n\t\tthis.groupMaskExpectedState = \"hidden\";\n\t\tthis.groupMaskQueue.push((done) => {\n\t\t\tif (this.groupMaskExpectedState === \"shown\") {\n\t\t\t\tcb();\n\t\t\t\treturn done();\n\t\t\t}\n\t\t\tthis.groupMask.win._hide({}, () => {\n\t\t\t\tthis.groupMaskIsVisible = false;\n\t\t\t\tcb();\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Transparency breaks often with group mask. So use this to show it.\n\t *\n\t * @param {any} bounds\n\t * @param {number} [opacity=0.5]\n\t * @param {any} [cb=Function.prototype]\n\t * @memberof DockingCalculator\n\t */\n\tshowGroupMask(params, cb = Function.prototype) {\n\t\tthis.groupMaskExpectedState = \"shown\";\n\t\t//console.log(\"in show group mask\", this.groupMaskIsVisible);\n\t\tlet bounds = params.bounds;\n\t\tlet groupMaskBounds = this.groupMask.getBounds();\n\t\tif (this.groupMaskIsVisible\n\t\t\t&& groupMaskBounds.top == bounds.top\n\t\t\t&& groupMaskBounds.left == bounds.left\n\t\t\t&& groupMaskBounds.height == bounds.height\n\t\t\t&& groupMaskBounds.width == bounds.width) {\n\t\t\treturn cb();\n\t\t}\n\n\t\tthis.groupMask.setBounds(params.bounds, () => {\n\t\t\tthis.groupMask.win._updateOptions({ opacity: params.opacity }, () => {\n\t\t\t\tthis.groupMaskQueue.push((done) => {\n\t\t\t\t\tif (this.groupMaskExpectedState === \"hidden\") {\n\t\t\t\t\t\tcb();\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthis.groupMask.win._show({}, () => {\n\t\t\t\t\t\tthis.groupMask.win._bringToFront({}, () => {\n\t\t\t\t\t\t\tthis.groupMaskIsVisible = true;\n\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\n\t/**\n\t * Show the modal scrim\n\t *\n\t * @memberof DockingCalculator\n\t */\n\tshowModalScrim(params, cb = Function.prototype) {\n\t\tSystem.getMonitorInfo((info) => {\n\t\t\tlet bounds = info.virtualScreen;\n\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\tthis.modalScrim.setBounds(bounds, () => {\n\t\t\t\tthis.modalScrim.win._updateOptions({ opacity: 0.01 }, () => {\n\t\t\t\t\tthis.modalScrim.show(() => {\n\t\t\t\t\t\tthis.modalScrim._bringToFront(() => {\n\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\thideModalScrim() {\n\t\tthis.modalScrim.win._updateOptions({ opacity: 0 }, () => {\n\t\t\tthis.modalScrim.setBounds({ top: -40, left: -40, height: 40, width: 40 }, () => {\n\t\t\t\tthis.modalScrim.hide();\n\t\t\t}, () => {\n\t\t\t\tthis.modalScrim.hide();\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * This function happens _after_ the calculations have been made. The request comes in, `this.requestMove` routes the request to the appropriate place, and modified bounds are passed into this function. It's a choke point for all docking-sanctioned window movement.\n\t */\n\tonMouseMove(bounds, cb) {\n\t\tthis.fixWindowOpacity({\n\t\t\tcheckForSnappability: true\n\t\t});\n\t\tif (this.resizeObject.scalingGroup) {\n\t\t\tthis.moveGroupMask();\n\t\t}\n\t\tif (bounds.finished) {\n\t\t\tif (typeof (bounds.top) !== \"undefined\") {\n\t\t\t\tthis.moveWindow(bounds);\n\t\t\t}\n\t\t\tcb(null);\n\t\t}\n\t}\n\n\t/**\n\t* When the user lifts her mouse, this is fired. It cleans up opacity, shows windows if we were moving a group, and cleans up global variables.\n\t*\n\t* @param {} params - Optional. Possible parameters:\n\t*\t\t\t\t\t\t\t\t\tsystemMoved: If true, indicates the OS initiated the group move\n\t*\t\t\t\t\t\t\t\t\ttriggeredByAutoArrange: If true, indicate the move was initiated by auto-arrange\n\t*/\n\tonMouseUp(params) {\n\t\tparams = params || {};\n\n\t\tif (!this.movingWindow) return;\n\t\tif (this.movingWindow && this.movingWindow.isMaximized) {\n\t\t\treturn;\n\t\t}\n\t\tif (RouterClient) RouterClient.transmit(\"Assimilation.taskbar\", { visible: true });\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"onMouseUp\", \"movingAGroupOfWindows\", this.movingAGroupOfWindows, \"groupMode\", this.groupMode, \"resizeObject\", this.resizeObject);\n\t\t}\n\n\t\tif (this.movingAGroupOfWindows) {\n\t\t\t//@todo refactor. correct sounds dumb.\n\t\t\tthis.resizeObject = this.correctResizeObject(this.movingWindow, this.resizeObject);\n\t\t\tthis.movingGroup.scale(this.groupMask.getBounds(), this.resizeObject.handle, this);\n\t\t\tthis.hideGroupMask();\n\t\t\tvar groupIter = this.groupWindowIterator(this.movingGroup);\n\t\t\tfor (let win of groupIter) {\n\t\t\t\twin.show();\n\t\t\t}\n\t\t\tthis.movingAGroupOfWindows = false;\n\t\t}\n\n\t\tlet dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (let win of dockingPoolIterator) {\n\t\t\t//Only break and remake the groups if a user initiated the move action. If the OS moved the group, there is no reason to break it\n\t\t\tif (!params.systemMoved) {\n\t\t\t\tthis.buildSnapRelationships(win);\n\t\t\t\tif (win.snappedWindows.length === 0 && win.groupNames.length) {\n\t\t\t\t\tthis.removeWindowFromAllGroups(win);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If this window is in a movable group, get the window in the\n\t\t\t// top right and show only its taskbar icon.\n\t\t\tconst movableGroup = this.getMovableGroup(win.name);\n\t\t\tif (movableGroup) {\n\t\t\t\tlet groupAnchor = movableGroup.getMoveAnchor(\"BottomLeft\");\n\t\t\t\tif (groupAnchor.name === win.name) {\n\t\t\t\t\twin.showTaskbarIcon();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twin.showTaskbarIcon();\n\t\t\t}\n\t\t}\n\n\t\tlet movedWin = {\n\t\t\tname: this.movingWindow.name,\n\t\t\tmonitor: this.getMonitorForWindow(this.movingWindow)\n\t\t};\n\n\t\tstationaryWindow = null;\n\t\tdockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (let win of dockingPoolIterator) {\n\t\t\twin.resizeHandle = null;\n\t\t\tif (win.groupNames.length) {\n\t\t\t\twin.groupNames.forEach(groupName => {\n\t\t\t\t\tlet group = this.getGroup(groupName);\n\t\t\t\t\tgroup.updateBounds();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tjoinedWindows = [];\n\t\tjoinedWindowNames = [];\n\t\t//If we did a group operation, call stopMove, which triggers a bounds save.\n\t\tif (this.movingGroup) {\n\t\t\t// When we have finished acting on the group, update each individual window's 'finished' property. Then call the function to complete the move.\n\t\t\tfor (let windowName in this.movingGroup.windows) {\n\t\t\t\tlet win = this.getWindow(windowName);\n\t\t\t\twin.finished = true;\n\t\t\t}\n\t\t\tthis.movingGroup.stopMove();\n\t\t\t// When we have finished acting on the group, update each individual window's 'finishedMove' property. Then call the function to complete the move.\n\t\t\tfor (let windowName in this.movingGroup.windows) {\n\t\t\t\tlet win = this.getWindow(windowName);\n\t\t\t\twin.win._stopMove();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.movingWindow.win.stopMove();\n\t\t}\n\n\t\t//If we mouse up on a dockable component we need to check if it should be docked. If it should, we have to call to move the window since we also want to expand one side or another. Since a docked window expands to take the width (or height) of the monitor.\n\t\tlet monitor = movedWin.monitor;\n\t\tlet modifiedRequest = this.moveRequest;\n\t\tif (modifiedRequest) {\n\t\t\tif (this.movingWindow.isDockableComponent && !this.movingWindow.isDocked && this.movingWindow.snappedMonitor) {\n\t\t\t\tmodifiedRequest.dockedHeight = this.movingWindow.dockedParams.height;//TODO: This will only work when docking top/bottom (which is all that's allowed for now)\n\t\t\t\tmodifiedRequest = monitor.dockWindowToMonitor(this.moveRequest);\n\t\t\t\tif (modifiedRequest) {\n\t\t\t\t\tthis.moveWindow(modifiedRequest, Function.prototype);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.hideGroupMask();\n\n\t\tthis.movingGroup = null;\n\t\tthis.movingWindow = null;\n\t\tthis.resizeObject = {};\n\t\t//moveRequest is null on group mask resizes..sometimes.\n\t\t//@todo, investigate.\n\t\tif (this.moveRequest && this.groupMode.enabled && groupAction.name) {\n\t\t\t// let group = this.getGroup(groupAction.name);\n\t\t\t// for (let windowName in groupAction.windows) {\n\t\t\t// \tif (groupBlacklist.includes(windowName)) {\n\t\t\t// \t\tdelete groupAction.windows[windowName];\n\t\t\t// \t}\n\t\t\t// }\n\n\t\t\t// if (group || (Object.keys(groupAction.windows).length > 1)) {\n\t\t\t// \tfor (let windowName in groupAction.windows) {\n\t\t\t// \t\tLogger.system.verbose(windowName);\n\t\t\t// \t\tthis.addWindowToGroup({\n\t\t\t// \t\t\tgroupName: groupAction.name,\n\t\t\t// \t\t\twin: this.getWindow(windowName)\n\t\t\t// \t\t});\n\t\t\t// \t}\n\t\t\t// }\n\t\t\tthis.formGroup(this.moveRequest.name, { isMovable: false });\n\t\t}\n\t\tthis.moveRequest = null;\n\t\tthis.fixWindowOpacity({\n\t\t\tcheckForSnappability: false,\n\t\t\tpersist: true\n\t\t});\n\n\t\tshortCircuit = false;\n\n\t\t//function below defined by the service. Tell it which monitor the window was on when it moved.\n\t\tif (this.onMoveComplete) {\n\t\t\tthis.onMoveComplete(movedWin, params.triggeredByAutoArrange);\n\t\t}\n\t}\n\n\tstatic get NO_CHANGE() { return -1; }\n\n\t/**\n\t* Moves one window into claimed space, if outside of said space.\n\t*\n\t* @param {object} windowThatCanClaimSpace The window that might have claimed space.\n\t*  Its height/width will be used to determine where to move other windows to\n\t* @param {array} monitors An array of monitors. Will be used to determine what windows are where, and what needs to move\n\t* @param {object} windowName the window to move\n\t* @param {boolean} initializing indicates whether this window is still initializing.  If it is, we move the window by resizing it\n\t*   \"manually\" instead of moving it as part of a group\n\t* @param {function} done callback on completion\n\t*/\n\tmoveWindowOutOfClaimedSpace(windowThatCanClaimSpace, monitors, windowName, initializing = false, done = Function.prototype) {\n\t\tvar self = this;\n\n\t\tlet win = self.getWindow(windowName);\n\t\t// Don't move a minimized window out of claimed space, that move needs to be handled on restore. The OS doesn't update a window's position while minimized\n\t\t// so updating the bounds here, won't affect window positon on restore\n\t\tif (!win || win.name === windowThatCanClaimSpace.name || win.isMinimized) return done();\n\t\t//gets set once we find the monitor for the window.\n\t\tlet isDone = false;\n\t\tfor (let i = 0; i < monitors.length; i++) {\n\t\t\tlet mon = monitors[i];\n\t\t\t//Only need to move windows if the current monitor is the one we docked to and if the current window is on said monitor\n\t\t\tif (windowThatCanClaimSpace.monitor.name === mon.name && win.monitor.name === mon.name) {\n\t\t\t\t//If the window is initializing, we calculate a resize instead of a move.  See below.\n\t\t\t\tlet newBounds = DockingCalculator.calculateNewBoundsOutsideClaimedSpace(windowThatCanClaimSpace, win, initializing);\n\n\t\t\t\tconst boundsChanged = newBounds.changeType != DockingCalculator.NO_CHANGE;\n\t\t\t\tif (boundsChanged) {\n\t\t\t\t\tisDone = true;\n\t\t\t\t\tif (initializing) {\n\t\t\t\t\t\t//If the window is initializing, we don't yet have all of the group information necessary to move windows as groups by calling\n\t\t\t\t\t\t//self.requestMove(), so instead we just resize it out of the way of the claimed space.\n\t\t\t\t\t\twin.setBounds(newBounds, (res) => {\n\t\t\t\t\t\t\tself.onMouseUp(false);\n\t\t\t\t\t\t\t//Update the monitor attached to the window on each bounds change (as it may have moved monitors)\n\t\t\t\t\t\t\t//If the operation causes any windows to move monitors we need to be sure the monitor attached to that window is updated\n\t\t\t\t\t\t\twin.monitor = this.getMonitorForWindow(win);\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tself.requestMove(newBounds, (res) => {\n\t\t\t\t\t\t\tself.onMouseUp(false);\n\t\t\t\t\t\t\t//Update the monitor attached to the window on each bounds change (as it may have moved monitors)\n\t\t\t\t\t\t\t//If the operation causes any windows to move monitors we need to be sure the monitor attached to that window is updated\n\t\t\t\t\t\t\twin.monitor = this.getMonitorForWindow(win);\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!isDone) {\n\t\t\tdone();\n\t\t}\n\t}\n\n\t/**\n\t * Calculates new bounds outside of a window that can claim space if and only if the window has claimed space and\n\t * the `win` window intersects it on the vertical axis.  (As of 8/29/19, the only window that can claim space is the toolbar.)\n\t * @param {object} windowThatCanClaimSpace the window that can claim space (which may or may not have claimd space)\n\t * @param {object} win the window that might need new bounds\n\t * @param {boolean} resize indicates to resize the window out of the way instead of moving it\n\t * @return {object} the new bounds for the window.  changeType is DockingCalculator.NO_CHANGE if no new bounds are needed.\n\t */\n\tstatic calculateNewBoundsOutsideClaimedSpace(windowThatCanClaimSpace, win, resize) {\n\t\tlet newBounds = {\n\t\t\tleft: win.left,\n\t\t\tright: win.right,\n\t\t\ttop: win.top,\n\t\t\tbottom: win.bottom,\n\t\t\theight: win.height,\n\t\t\twidth: win.width,\n\t\t\tname: win.name,\n\t\t\tprocessSnaps: false,\n\t\t\t//NO_CHANGE indicates an invalid change type; i.e., no change.  if changed, it will be set to one of BoundsChangeType\n\t\t\tchangeType: DockingCalculator.NO_CHANGE\n\t\t};\n\n\t\tconst spaceHasBeenClaimedOnTop = windowThatCanClaimSpace.monitorDockablePositions.TOP === windowThatCanClaimSpace.dockedPosition;\n\t\tconst spaceHasBeenClaimedOnBottom = windowThatCanClaimSpace.monitorDockablePositions.BOTTOM === windowThatCanClaimSpace.dockedPosition;\n\t\tif (spaceHasBeenClaimedOnTop) {\n\t\t\tconst windowIntersectsClaimedSpace = win.top < windowThatCanClaimSpace.bottom;\n\t\t\tif (windowIntersectsClaimedSpace) {\n\t\t\t\t// Set the top of the window to the bottom of the window that has claimed space\n\t\t\t\tnewBounds.top = windowThatCanClaimSpace.bottom;\n\t\t\t\tif (resize) // if we are resizing, all we do after we set the top is recalculate the height\n\t\t\t\t{\n\t\t\t\t\tnewBounds.height = newBounds.bottom - newBounds.top;\n\t\t\t\t\tnewBounds.changeType = 2;\n\t\t\t\t}\n\t\t\t\telse // otherwise, we recalculate the bottom (and the height stays the same)\n\t\t\t\t{\n\t\t\t\t\tnewBounds.bottom = newBounds.top + newBounds.height;\n\t\t\t\t\tnewBounds.changeType = 0;\n\t\t\t\t}\n\t\t\t\tnewBounds.mousePosition = {\n\t\t\t\t\tx: win.left + (win.width / 2),\n\t\t\t\t\ty: newBounds.top\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\telse if (spaceHasBeenClaimedOnBottom) {\n\t\t\tconst windowIntersectsClaimedSpace = win.bottom > windowThatCanClaimSpace.top;\n\t\t\tif (windowIntersectsClaimedSpace) {\n\t\t\t\t// Set the bottom of the window to the top of the window that has claimed space\n\t\t\t\tnewBounds.bottom = windowThatCanClaimSpace.top;\n\t\t\t\tif (resize) // if we are resizing, all we do after we set the new bottom is recalculate the height\n\t\t\t\t{\n\t\t\t\t\tnewBounds.height = newBounds.bottom - newBounds.top;\n\t\t\t\t\tnewBounds.changeType = 1;\n\t\t\t\t}\n\t\t\t\telse // otherwise, we recalculate the top (and the height stays the same)\n\t\t\t\t{\n\t\t\t\t\tnewBounds.top = newBounds.bottom - newBounds.height;\n\t\t\t\t\tnewBounds.changeType = 0;\n\t\t\t\t}\n\t\t\t\tnewBounds.mousePosition = {\n\t\t\t\t\tx: win.left + (win.width / 2),\n\t\t\t\t\ty: newBounds.bottom\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn newBounds;\n\t}\n\n\t/**\n\t * Loops through monitors/windows and moves any windows that are in the space of `windowThatCanClaimSpace` outside of said space.\n\t *\n\t * @param {object} windowThatCanClaimSpace The window that has claimed space. Its position will be used to determine where to move other windows to\n\t * @param {array} monitors An array of monitors. Will be used to determine what windows are where, and what needs to move\n\t */\n\tmoveAllWindowsOutOfClaimedSpace(windowThatCanClaimSpace, monitors) {\n\t\tthis.movingWindow = null;\n\t\tlet windowNames = this.getWindowNames();\n\n\t\tvar moveOne = (windowName, done) => {\n\t\t\tthis.moveWindowOutOfClaimedSpace(windowThatCanClaimSpace, monitors, windowName, false, done);\n\t\t};\n\n\t\tasyncEachSeries(windowNames, moveOne, Function.prototype);\n\t}\n\n\t/**\n\t * Adjusts the claimed/available space of a monitor based on the docked window supplied to it\n\t *\n\t * @param {object} params\n\t * @param {string} params.action \"dock\" or \"undock\". The action determines whether space is claimed or released.\n\t * @param {object} params.win The window being docked\n\t * @param {object} params.monitor The monitor the window is docking to\n\t * @param {integer} params.location An enum from DockableWindow. A number that ties back to a docking location\n\t */\n\tadjustClaimedSpace(params) {\n\t\tif (params.action === undefined || params.dockableWin === undefined || params.dockableMonitor === undefined || params.location === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tlet { action, dockableWin: win, dockableMonitor: monitor, location } = params;\n\t\tLogger.system.warn(\"Adjust claimed space\", action, location);\n\n\t\tlet adjustedMonitor = monitor;\n\t\tswitch (action) {\n\t\t\tcase \"dock\":\n\t\t\t\t// ToDo: this manipulation here of claimed space state within a window is lacking abstraction; ideally encapsulate the functionality within the DockableWindow;\n\t\t\t\t// or minimally provide functions (win.enableClaimedSpace() and win.disableClaimedSpace())\n\t\t\t\tif (!win.isClaimingSpace) {\n\t\t\t\t\tadjustedMonitor = this.claimSpace(win, monitor, location);\n\t\t\t\t\twin.isClaimingSpace = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"undock\":\n\t\t\t\tif (win.isClaimingSpace) {\n\t\t\t\t\tadjustedMonitor = this.releaseClaimedSpace(win, monitor);\n\t\t\t\t\twin.isClaimingSpace = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"redock\":\n\t\t\t\t// Release the claimed space for the current monitor. Use that updated monitor to claim space at the new location\n\t\t\t\t// Currently only claimed space on the same monitor is released. For the current use case we don't expect the window\n\t\t\t\t// to be claiming space on a monitor that still exists.\n\t\t\t\tadjustedMonitor = this.releaseClaimedSpace(win, monitor);\n\t\t\t\tadjustedMonitor = this.claimSpace(win, adjustedMonitor, location);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn adjustedMonitor;\n\t}\n\n\t/**\n\t * Releases claimed space for an undocked window.\n\t *\n\t * @param {object} win The window being undocked\n\t * @param {object} monitor The monitor the window is undocking from\n\t * @return {object} The modified monitor with new unclaimedRect (released space)\n\t */\n\treleaseClaimedSpace(win, monitor) {\n\t\tlet availableRect = clone(monitor.availableRect, Logger.system.error);\n\n\t\tLogger.debug(\"RELEASING CLAIMED SPACE, unclaimedRect is being set to availableRect\");\n\t\tmonitor.unclaimedRect = availableRect;\n\t\t[\"left\", \"top\", \"right\", \"bottom\", \"height\", \"width\"].forEach((dimension) => {\n\t\t\tmonitor[dimension] = availableRect[dimension];\n\t\t});\n\t\tmonitor.calculateSnappingRegions();\n\t\treturn monitor;\n\t}\n\n\t/**\n\t * Called when a window is docked in order to claim that space and not allow other windows inside of it\n\t *\n\t * @param {object} win The window being docked\n\t * @param {object} monitor The monitor the window is being docked to\n\t * @param {integer} location An enum from DockableWindow. A number that ties back to a docking location\n\t * @return {object} The modified monitor with new unclaimedRect (claimed space)\n\t */\n\tclaimSpace(win, monitor, location) {\n\t\tlet unclaimedRect = clone(monitor.unclaimedRect, Logger.system.error);\n\n\t\t//TODO: Handle LEFT and RIGHT cases.\n\t\tswitch (location) {\n\t\t\tcase win.monitorDockablePositions.TOP:\n\t\t\t\tunclaimedRect.top = unclaimedRect.top + win.dockedParams.height;\n\t\t\t\tLogger.debug(\"CLAIMING SPACE, unclaimed.top now: \", unclaimedRect.top);\n\t\t\t\tbreak;\n\t\t\tcase win.monitorDockablePositions.BOTTOM:\n\t\t\t\tunclaimedRect.bottom = unclaimedRect.bottom - win.dockedParams.height;\n\t\t\t\tLogger.debug(\"CLAIMING SPACE, unclaimed.bottom now: \", unclaimedRect.bottom);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t//!NOTE: This may need to be moved inside of the TOP and BOTTOM blocks as it won't be applicable when docking left or right\n\t\tunclaimedRect.height = unclaimedRect.bottom - unclaimedRect.top;\n\t\t[\"left\", \"top\", \"right\", \"bottom\", \"height\", \"width\"].forEach((dimension) => {\n\t\t\tmonitor[dimension] = unclaimedRect[dimension];\n\t\t});\n\t\tmonitor.unclaimedRect = unclaimedRect;\n\t\treturn monitor;\n\t}\n\n\t/**\n\t * Updates local references of monitor information. Happens when a user removes/adds a monitor.\n\t */\n\tupdateMonitorInfo(monitorUpdate) {\n\t\tLogger.system.debug(\"MONITOR: dockingCalculator.updateMonitorInfo\", monitorUpdate);\n\n\t\trestrictedAreas = [];\n\t\t//@todo, pick up zones that are off limits from terry's update.\n\t\tmonitorUpdate.forEach((monitor) => {\n\t\t\t//Push updated bounds to the pool.\n\t\t\tif (monitor.availableRect.top !== monitor.unclaimedRect.top) {\n\t\t\t\trestrictedAreas.push({\n\t\t\t\t\tmin: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.left,\n\t\t\t\t\t\ty: monitor.availableRect.top\n\t\t\t\t\t},\n\t\t\t\t\tmax: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.right,\n\t\t\t\t\t\ty: monitor.unclaimedRect.top\n\t\t\t\t\t},\n\t\t\t\t\tposition: \"top\"\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (monitor.availableRect.left !== monitor.unclaimedRect.left) {\n\t\t\t\trestrictedAreas.push({\n\t\t\t\t\tmin: {\n\t\t\t\t\t\tx: monitor.availableRect.left,\n\t\t\t\t\t\ty: monitor.unclaimedRect.top\n\t\t\t\t\t},\n\t\t\t\t\tmax: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.right,\n\t\t\t\t\t\ty: monitor.unclaimedRect.bottom\n\t\t\t\t\t},\n\t\t\t\t\tposition: \"left\"\n\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (monitor.availableRect.right !== monitor.unclaimedRect.right) {\n\t\t\t\trestrictedAreas.push({\n\t\t\t\t\tmin: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.right,\n\t\t\t\t\t\ty: monitor.unclaimedRect.top\n\t\t\t\t\t},\n\t\t\t\t\tmax: {\n\t\t\t\t\t\tx: monitor.availableRect.right,\n\t\t\t\t\t\ty: monitor.unclaimedRect.bottom\n\t\t\t\t\t},\n\t\t\t\t\tposition: \"right\"\n\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (monitor.availableRect.bottom !== monitor.unclaimedRect.bottom) {\n\t\t\t\trestrictedAreas.push({\n\t\t\t\t\tmin: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.left,\n\t\t\t\t\t\ty: monitor.unclaimedRect.bottom\n\t\t\t\t\t},\n\t\t\t\t\tmax: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.right,\n\t\t\t\t\t\ty: monitor.availableRect.bottom\n\t\t\t\t\t},\n\t\t\t\t\tposition: \"bottom\"\n\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\n\t/****************************************\n\t *\t  Calculators - Window Collections \t*\n\t ****************************************/\n\tformGroup(name, params) {\n\t\tlet { isMovable, whitelist, isAlwaysOnTop } = params;\n\t\tvar self = this;\n\t\tif (!whitelist) {\n\t\t\twhitelist = this.getWindowNames();\n\t\t}\n\t\tlet win = this.getWindow(name);\n\t\tlet windows = win.snappedWindows.map(snapObj => snapObj.name).filter(name => {\n\t\t\treturn whitelist.includes(name);\n\t\t});\n\n\t\tlet processed = [win.name];\n\t\tfunction getSnappedWindows(windo) {\n\t\t\tprocessed.push(windo.name);\n\t\t\tlet snappedWindows = windo.snappedWindows.map(snapObj => snapObj.name).filter(name => {\n\t\t\t\treturn whitelist.includes(name);\n\t\t\t});\n\t\t\twindo.snappedWindows.forEach((snapObj) => {\n\t\t\t\tif (!processed.includes(snapObj.name) && whitelist.includes(snapObj.name)) {\n\t\t\t\t\tlet snapWin = self.getWindow(snapObj.name);\n\t\t\t\t\tlet grandSnaps = getSnappedWindows(snapWin);\n\t\t\t\t\tsnappedWindows = snappedWindows.concat(grandSnaps);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn snappedWindows;\n\t\t}\n\n\t\twin.snappedWindows.forEach((snapObj) => {\n\t\t\tif (whitelist.includes(snapObj.name)) {\n\t\t\t\tlet snapWin = self.getWindow(snapObj.name);\n\t\t\t\tlet snappedWindows = getSnappedWindows(snapWin);\n\t\t\t\twindows = windows.concat(snappedWindows);\n\t\t\t}\n\t\t});\n\t\t//dedupe.\n\t\twindows = windows.filter(function (el, i, arr) {\n\t\t\treturn arr.indexOf(el) === i;\n\t\t});\n\t\tif (windows.length) {\n\t\t\tthis.groupWindows({ windows, isMovable: isMovable, isAlwaysOnTop: isAlwaysOnTop });\n\t\t}\n\t\treturn windows;\n\t}\n\n\t/**\n\t* Spins through all of the windows that can group and creates groups based on window position.\n\t*/\n\tconstituteGroups() {\n\t\tfor (var groupName in this.getGroups()) {\n\t\t\tthis.removeGroup(groupName);\n\t\t}\n\t\tthis.eliminateGaps();\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tif (groupBlacklist.includes(win.name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar groupList = this.getGroupNames();\n\t\t\tif (!Object.keys(groupList).length) {\n\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\tgroupName: uuidv4(),\n\t\t\t\t\twin: win\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.buildSnapRelationships(win);\n\t\t\tvar snappedWindows = win.snappedWindows;\n\t\t\tfor (var i = 0, len = snappedWindows.length; i < len; i++) {\n\t\t\t\tvar snapObj = snappedWindows[i];\n\t\t\t\tvar snappedWindow = this.getWindow(snapObj.name);\n\t\t\t\tif (win.groupNames.length) {\n\t\t\t\t\twin.groupNames.forEach(groupName => {\n\t\t\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\t\t\tgroupName: groupName,\n\t\t\t\t\t\t\twin: snappedWindow\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else if (snappedWindow && snappedWindow.groupNames.length) {\n\t\t\t\t\tsnappedWindow.groupNames.forEach(groupName => {\n\t\t\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\t\t\tgroupName: groupName,\n\t\t\t\t\t\t\twin: win\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlet groupParams = {\n\t\t\t\t\t\tname: uuidv4(),\n\t\t\t\t\t\tMINIMUM_HEIGHT: this.MINIMUM_HEIGHT,\n\t\t\t\t\t\tMINIMUM_WIDTH: this.MINIMUM_WIDTH\n\t\t\t\t\t};\n\t\t\t\t\tvar newGroup = new DockableGroup(groupParams, {\n\t\t\t\t\t\tLogger\n\t\t\t\t\t});\n\t\t\t\t\tthis.addGroup(newGroup);\n\t\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\t\tgroupName: newGroup.name,\n\t\t\t\t\t\twin: win\n\t\t\t\t\t});\n\t\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\t\tgroupName: newGroup.name,\n\t\t\t\t\t\twin: snappedWindow\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Given a moveRequest, it returns an array of windowNames. The check essentially boils down to \"is this window within my snapping buffer?\"\n\t* @param  {moveRequest} moveRequest\n\t*/\n\tgetSnappableWindows(moveRequest) {\n\t\tvar snappableWindows = [];\n\t\tvar windowIter = this.dockingPool.iterator();\n\t\tfor (let win of windowIter) {\n\t\t\t//if moveRequest puts the window inside of the stationary window's buffer, snap.\n\t\t\tif (moveRequest.name === win.name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!win.ignoreSnappingRequests && win.canSnapToWindow(moveRequest) && !moveRequest.ignoreSnappingRequests) {\n\t\t\t\tsnappableWindows.push(win.name);\n\t\t\t}\n\t\t}\n\n\t\treturn snappableWindows;\n\t}\n\n\t/**\n\t* Checks to see if the window is within the snapping region of any monitor.\n\t* @todo, make setBufferSize trickles down to monitors.\n\t*/\n\tgetSnappableMonitors(moveRequest) {\n\t\tvar monitorNames = Object.keys(monitorPool.getAll()),\n\t\t\tsnappableMonitors = [];\n\t\tfor (var i = 0, len = monitorNames.length; i < len; i++) {\n\t\t\tvar monitorName = monitorNames[i];\n\t\t\tvar monitor = monitorPool.get(monitorName);\n\n\t\t\tif (monitor.canSnapToWindow(moveRequest)) {\n\t\t\t\tsnappableMonitors.push(monitorName);\n\t\t\t}\n\n\t\t}\n\n\t\treturn snappableMonitors;\n\t}\n\n\t/**\n\t * Returns an object that describes the edges and corners that are shared between two windows.\n\t */\n\tgetSnapObj(win1, win2) {\n\t\treturn {\n\t\t\tcanGroup: !groupBlacklist.includes(win2.name),\n\t\t\tname: win2.name,\n\t\t\tedges: win1.getSharedEdges(win2),\n\t\t\tcorners: win1.getSharedCorners(win2)\n\t\t};\n\t}\n\n\t/**\n\t * Snaps two windows..\n\t */\n\tsnapTwoWindows(win1, win2) {\n\t\tif (groupBlacklist.includes(win1.name) || groupBlacklist.includes(win2.name)) {\n\t\t\treturn;\n\t\t}\n\t\twin1.addSnappedWindow(this.getSnapObj(win1, win2));\n\t\twin2.addSnappedWindow(this.getSnapObj(win2, win1));\n\t}\n\n\t/**\n\t * Wipes all relationships between windows and recalculates them.\n\t */\n\trecalculateSnaps() {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"RECALCULATING SNAP RELATIONSHIPS\");\n\t\t}\n\t\tvar windowIter = this.dockingPool.iterator();\n\t\tfor (let win of windowIter) {\n\t\t\tthis.buildSnapRelationships(win);\n\t\t\tif (win.groupNames.length) {\n\t\t\t\twin.groupNames.forEach(groupName => {\n\t\t\t\t\tlet group = this.getGroup(groupName);\n\t\t\t\t\tgroup.updateBounds();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Returns an array of `snapObject`s. Just name, shared edges, shared corners, and whether the window canGroup.\n\t* @param  {dockableWindow} win\n\t*/\n\tbuildSnapRelationships(win) {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ws buildSnapRelationships\", win.name);\n\t\t}\n\t\tif (win.snappedWindows.length) {\n\t\t\tthis.wipeSnapRelationships(win.name);\n\t\t}\n\t\tvar snappedWindows = [];\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\n\t\tfor (var snappedWindow of dockingPoolIterator) {\n\t\t\tif (debug) {\n\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ws dockingPoolIterator\", snappedWindow.name);\n\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ws win.sharesAnEdgeWith(snappedWindow)\", win.sharesAnEdgeWith(snappedWindow));\n\t\t\t}\n\t\t\tif (snappedWindow.name === win.name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (win.sharesAnEdgeWith(snappedWindow) || win.sharesACornerWith(snappedWindow)) {\n\t\t\t\tthis.snapTwoWindows(win, snappedWindow);\n\t\t\t}\n\t\t}\n\t\treturn snappedWindows;\n\t}\n\n\t/**\n\t* Returns any window with a vertex on a segment.\n\t* @param  {segment} segment A line segment. An array with 2 points in it (start and end).\n\t* @return {type}\n\t*/\n\tgetWindowsOnSegment(segment) {\n\t\tvar windowsOnSegment = [];\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tvar points = [segment.min, segment.max];\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tfor (var p = 0, len = points.length; p < len; p++) {\n\t\t\t\tvar point = points[p];\n\t\t\t\tif (win.pointIsOnBoundingBox(point)) {\n\t\t\t\t\tlet snapObj = {\n\t\t\t\t\t\tname: win.name,\n\t\t\t\t\t\tedge: win.getEdgeByPoint(point)\n\t\t\t\t\t};\n\t\t\t\t\tsnapObj.segment = win.getEdges(\"obj\")[snapObj.edge];\n\t\t\t\t\twindowsOnSegment.push(snapObj);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn windowsOnSegment;\n\t}\n\n\t/**\n\t* Not sure why this function doesn't use the one above. Similar functionality, but you can pass in a string instead of a line segment.\n\t* @todo, make it use the function above.\n\t* @param  {dockableWindow} win\n\t* @param  {string} edge E.g., 'left', 'right', etc.\n\t* @return {array}\n\t*/\n\tgetWindowsOnEdge(win, edge, includeCorners) {\n\t\tif (includeCorners === undefined) {\n\t\t\tincludeCorners = false;\n\t\t}\n\t\tvar windowsOnEdge = [];\n\t\tif (!edge) {\n\n\t\t\t//@todo, what went wrong to cause this.................\n\t\t\treturn [];\n\t\t}\n\t\tvar splitEdge = edge.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\t\tif (splitEdge.length > 1) {\n\t\t\tlet cornerPoint = win.getPointByVertex(edge);\n\t\t\tvar windowsAtCorner = this.getWindowsAtPoint(cornerPoint);\n\n\t\t\tfor (let i = 0, len = windowsAtCorner.length; i < len; i++) {\n\t\t\t\tlet possibleSnapper = this.getWindow(windowsAtCorner[i]);\n\n\t\t\t\twindowsOnEdge.push({\n\t\t\t\t\tname: possibleSnapper.name,\n\t\t\t\t\tedge: possibleSnapper.getVertexByPoint(cornerPoint)\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t} else {\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[edge];\n\t\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\t\tvar windowSegment = win.getEdges(\"obj\", includeCorners)[edge];\n\n\t\t\tfor (let possibleSnapper of dockingPoolIterator) {\n\t\t\t\tif (possibleSnapper.name === win.name) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet segment = possibleSnapper.getEdges(\"obj\", includeCorners)[oppEdge];\n\n\t\t\t\tvar shouldPush = false;\n\n\t\t\t\tlet points = [{\n\t\t\t\t\tname: possibleSnapper.name,\n\t\t\t\t\tval: segment.min\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: possibleSnapper.name,\n\t\t\t\t\tval: segment.max\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: win.name,\n\t\t\t\t\tval: windowSegment.min\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: win.name,\n\t\t\t\t\tval: windowSegment.max\n\t\t\t\t}];\n\n\t\t\t\tif ([\"top\", \"bottom\"].includes(edge)) {\n\t\t\t\t\tif (segment.min.y !== windowSegment.min.y) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tpoints = points.sort((a, b) => {\n\t\t\t\t\t\treturn b.val.x - a.val.x;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif ([\"left\", \"right\"].includes(edge)) {\n\t\t\t\t\tif (segment.min.x !== windowSegment.min.x) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tpoints = points.sort((a, b) => {\n\t\t\t\t\t\treturn b.val.y - a.val.y;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (points[0].name !== points[1].name) {\n\t\t\t\t\tshouldPush = true;\n\t\t\t\t}\n\n\t\t\t\tif (shouldPush) {\n\t\t\t\t\tif (debug) {\n\t\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", windowSegment, segment, win.name, possibleSnapper.name, edge);\n\t\t\t\t\t}\n\t\t\t\t\tlet snapObj = {\n\t\t\t\t\t\tname: possibleSnapper.name,\n\t\t\t\t\t\tedge: oppEdge\n\t\t\t\t\t};\n\t\t\t\t\twindowsOnEdge.push(snapObj);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn windowsOnEdge;\n\t}\n\n\t/**\n\t* Returns a list of windows that straddle a given edge.\n\t*\t+-----------+------------+\n\t*\t|           |            |\n\t*\t|           |            |\n\t*\t|    A      |     B      |\n\t*\t|           |            |\n\t*\t+-----------+--+---------+\n\t*\t|              |         |\n\t*\t|    C         |   D     |\n\t*\t|              |         |\n\t*\t+--------------+---------+\n\t*\n\t* In the drawing above, B straddles the left edge of D and the right Edge of C.\n\t* @param  {dockableWindow} win\n\t* @param  {string} edge E.g., 'left', 'right', etc.\n\t*/\n\tgetStraddlers(win, edge) {\n\t\tvar straddlers = [];\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var straddler of dockingPoolIterator) {\n\n\t\t\tif (straddler.name === win.name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar corners = straddler.vertices;\n\t\t\tfor (var corner in corners) {\n\t\t\t\tif (win.pointIsOnBoundingBox(corners[corner], false)) {\n\t\t\t\t\tstraddlers.push({\n\t\t\t\t\t\tname: straddler.name,\n\t\t\t\t\t\tedge: win.getEdgeByPoint(corners[corner])\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn straddlers;\n\t}\n\n\t/**\n\t* Given an X, Y point, it returns a list of windows with that point on their boundingBox.\n\t* @param  {object} point\n\t* @return {array}\n\t*/\n\tgetWindowsAtPoint(point) {\n\t\tvar windows = [];\n\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tif (groupBlacklist.includes(win.name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (win.pointIsOnBoundingBox(point)) {\n\t\t\t\twindows.push(win.name);\n\t\t\t}\n\t\t}\n\t\treturn windows;\n\t}\n\n\t/**\n\t* Just a helper to say whether a window has an edge on the edge of the group.\n\t* @todo refactor to just compare win[edge] to group[edge].\n\t* @param  {dockableWindow} win\n\t* @param  {dockableGroup} group\n\t*/\n\twindowIsOnExteriorEdgeOfGroup(win, group) {\n\t\tvar winBounds = win.windowBoundingBox;\n\t\tvar groupBounds = group.bounds;\n\t\t//left\n\t\tif (winBounds.min.x === groupBounds.min.x) {\n\t\t\treturn true;\n\t\t}\n\t\t//bottom\n\t\tif (winBounds.max.y === groupBounds.max.y) {\n\t\t\treturn true;\n\t\t}\n\t\t//right\n\t\tif (winBounds.max.x === groupBounds.max.x) {\n\t\t\treturn true;\n\t\t}\n\t\t//top\n\t\tif (winBounds.min.y === groupBounds.min.y) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Lets the program know that shift is being held down. This is used when moving a window that's explicitly grouped (if assimilation is turned on). In that case, the window moves out of the group.\n\t */\n\tsetShift(bool) {\n\t\tthis.shiftKey = bool;\n\t}\n\n\t/**\n\t* Returns an ordered Object. Sorts by Top, then Left.\n\t* @return {Object} Object where the keys are names of the window.\n\t*/\n\torderWindows(windowList, anchor) { //TODO: move this into group (see groupWindowIterator, scaleGroup, group.scale)\n\t\t//sort windows by top so that when we constitute groups it won't randomly compare windows in the bottom to ones in the top of the monitor.\n\t\tvar sortableArray = [];\n\t\tif (windowList === undefined) {\n\t\t\twindowList = this.dockingPool.getAll();\n\t\t}\n\t\tfor (var windowName in windowList) {\n\t\t\tvar win = this.getWindow(windowName);\n\t\t\tsortableArray.push(win);\n\t\t}\n\t\tsortableArray.sort(function (a, b) {\n\t\t\tvar aTop = a.top;\n\t\t\tvar aLeft = a.left;\n\n\t\t\tvar bTop = b.top;\n\t\t\tvar bLeft = b.left;\n\t\t\t//if the window's top is above the anchor's top, compare its bottom to the anchor's top. In a 3x3 grid, this will ensure that windows in row 2 end up after windows in row 3. Looking at the grid below, if we just compared the window's top to the anchor's top, window D would appear in the array before D, even though D is closer to G. By comparing the bottoms of windows above the anchor, we force the algorithm to look at the left instead of the top. That all may be a crock of shit, too. I Basically, if I resize from the top-right of this group I want it to go: G, H, I, D, E, F, A, B, C. The algorithm below does that.\n\t\t\t/**\n\t\t\t * +-----------+--------------+-------------+\n\t\t\t * |           |              |             |\n\t\t\t * |           |              |             |\n\t\t\t * |    A      |      B       |     C       |\n\t\t\t * |           |              |             |\n\t\t\t * |           |              |             |\n\t\t\t * +-----------+              +-------------+\n\t\t\t * |           +--------------+             |\n\t\t\t * |           |              |             |\n\t\t\t * |    D      |      E       |      F      |\n\t\t\t * |           |              |             |\n\t\t\t * +----------------------------------------+\n\t\t\t * |           |              |             |\n\t\t\t * |           |              |             |\n\t\t\t * |   G       |       H      |      I      |\n\t\t\t * |           |              |             |\n\t\t\t * |           |              |             |\n\t\t\t * +-----------+--------------+-------------+\n\t\t\t */\n\t\t\tif (anchor) {\n\t\t\t\tlet aDelta = {\n\t\t\t\t\tleft: Math.abs(anchor.left - a.left),\n\t\t\t\t\ttop: a.bottom === anchor.top ? Math.abs(anchor.top - a.bottom) : Math.abs(anchor.top - a.top)\n\t\t\t\t};\n\t\t\t\tlet bDelta = {\n\t\t\t\t\tleft: Math.abs(anchor.left - b.left),\n\t\t\t\t\ttop: b.bottom === anchor.top ? Math.abs(anchor.top - b.bottom) : Math.abs(anchor.top - b.top)\n\t\t\t\t};\n\n\t\t\t\tif (aDelta.left === bDelta.left) {\n\t\t\t\t\treturn aDelta.top > bDelta.top;\n\t\t\t\t}\n\t\t\t\treturn aDelta.left > bDelta.left;\n\t\t\t}\n\t\t\t//orders windows ascending by their Top values.\n\t\t\tif (aTop === bTop) {\n\t\t\t\treturn aLeft - bLeft;\n\t\t\t}\n\t\t\treturn aTop - bTop;\n\n\t\t});\n\n\t\treturn sortableArray;\n\t}\n\n\t/****************************************\n\t *\t\t\tGetters/Setters\t\t\t\t*\n\t ****************************************/\n\t/**\n\t* Registers the window with the calculator\n\t* @param  {string} name\n\t* @param  {dockableWindow} val\n\t*/\n\taddWindow(name, val) {\n\t\tval.setBufferSize(this.bufferSize);\n\t\tval.setResizeThrottlePeriod(this.resizeEventThrottlePeriod);\n\t\tthis.dockingPool.add(name, val);\n\t\tval.limits = {\n\t\t\tminHeight: val.dockingOptions.minHeight,\n\t\t\tminWidth: val.dockingOptions.minWidth,\n\t\t\tmaxHeight: val.dockingOptions.maxHeight,\n\t\t\tmaxWidth: val.dockingOptions.maxWidth\n\t\t};\n\t\tval.monitor = this.getMonitorForWindow(val);\n\t\tif (val.groupName) {\n\t\t\tlet group = this.getGroup(val.groupName);\n\t\t\tgroup.addWindow(val);\n\t\t}\n\t\tthis.buildSnapRelationships(val);\n\t}\n\n\t/**\n\t * Virtually unsnaps a window from all other windows. This doesn't affect physical positioning. Only the relationships that Docking is a aware of.\n\t */\n\twipeSnapRelationships(name) {\n\t\tlet win = this.getWindow(name);\n\t\tif (win && win.snappedWindows) {\n\t\t\tlet snappedWindows = clone(win.snappedWindows, Logger.system.error);\n\t\t\tfor (var i = 0, len = snappedWindows.length; i < len; i++) {\n\t\t\t\tvar snapObj = snappedWindows[i];\n\t\t\t\tvar snappedWindow = this.getWindow(snapObj.name);\n\t\t\t\twin.removeSnappedWindow(snappedWindow.name);\n\t\t\t\tif (snappedWindow) {\n\t\t\t\t\tsnappedWindow.removeSnappedWindow(win.name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes a window from all groups.\n\t */\n\tremoveWindowFromAllGroups(win, deleteGroupsWithOneWindow = true) {\n\t\tif (!win) {\n\t\t\tLogger.system.warn(\"INVESTIGATE: No win passed to removeWindowFromAllGroups.\");\n\t\t\treturn;\n\t\t}\n\t\tlet groupNames = clone(win.groupNames, Logger.system.error);\n\t\tfor (var i = 0, len = groupNames.length; i < len; i++) {\n\t\t\tvar groupName = groupNames[i];\n\t\t\tthis.removeWindowFromGroup(win.name, groupName, deleteGroupsWithOneWindow);\n\t\t}\n\t}\n\n\t/**\n\t* Unregisters the window.\n\t* @param  {string} name\n\t*/\n\tremoveWindow(name, removeListeners = true) {\n\n\t\tlet win = this.getWindow(name);\n\t\tif (!win) {\n\t\t\tLogger.system.warn(\"window was not found:\", name);\n\t\t\treturn;\n\t\t}\n\t\t//Removes event listeners from the window.\n\t\tif (removeListeners) {\n\t\t\twin.removeEventListeners();\n\t\t}\n\t\tif (!win) {\n\t\t\tLogger.system.warn(`INVESTIGATE: No win found for ${name} in removeWindow.`);\n\t\t}\n\t\tif (win && win.groupNames.length) {\n\t\t\t//If we aren't removing listeners, we're removing the window for tiling purposes (so it doesn't mess up other windows resizing). In that case, we don't want to remove groups with a single window, which is what the 2nd param here does.\n\t\t\tthis.removeWindowFromAllGroups(win, !removeListeners);\n\t\t}\n\t\t//If we're removing the window that was last cached on mouseDown, wipe the reference. This way, onMouseUp, the window's bounds-changed event will not trigger, and it will not break everything.\n\t\tif (this.movingWindow && this.movingWindow.name === win.name) {\n\t\t\tthis.movingWindow = null;\n\t\t}\n\t\tthis.wipeSnapRelationships(win.name);\n\t\tthis.dockingPool.remove(name);\n\t}\n\n\t/**\n\t * Returns an array of window names.\n\t */\n\tgetWindowNames() {\n\t\treturn Object.keys(this.dockingPool.getAll());\n\t}\n\n\t/**\n\t* @return {dockingPool}\n\t*/\n\tgetWindows() {\n\t\treturn this.dockingPool.getAll();\n\t}\n\tgetUnignoredWindows() {\n\t\tlet windowIter = this.dockingPool.iterator();\n\t\tlet ret = [];\n\t\tfor (let win of windowIter) {\n\t\t\tret.push(win);\n\t\t}\n\t\treturn ret;\n\t}\n\t/**\n\t * Gets a window object by name.\n\t* @param  {type} name\n\t* @param  {type} throwError Usually we want to throw the error, but sometimes we use this function to filter (e.g., autoarrange).\n\t* @return {type}\n\t*/\n\tgetWindow(name, throwError) {\n\t\tlet win = this.dockingPool.get(name, throwError);\n\t\tif (!win && (typeof throwError === \"undefined\" || throwError)) {\n\t\t\tLogger.system.debug(`No win found for ${name}.`);\n\t\t}\n\t\treturn win;\n\t}\n\n\t/**\n\t * Given a list of monitors, returns the one that overlaps the most with the window.\n\t * @param {string} win\n\t * @param {array} monitors\n\t */\n\tgetMonitorByMajority(win, monitors) {\n\t\tlet overlaps = [];\n\t\t//Sometimes bad objects get passed into this function. They shouldn't, but they do. if we can't retrieve bounds, it's not a window. Try to get a window. If there's no window, return the first monitor.\n\t\tif (!win.getBounds && win.name) win = this.getWindow(win.name);\n\t\tif (!win.getBounds) return monitors[0];\n\t\tlet boundingBox = win.getBounds();\n\t\tmonitors.forEach(monitor => {\n\t\t\toverlaps.push({\n\t\t\t\tmonitor: monitor,\n\t\t\t\toverlap: BoxMath.getOverlap(boundingBox, monitor.availableRect || monitor.monitorRect)\n\t\t\t});\n\t\t});\n\t\t//Gets the monitor with the greatest overlap. The reduce function pulls the proper object with the greats overlap value. We return the monitor property of that object.\n\t\treturn overlaps.reduce((prev, current) => prev.overlap > current.overlap ? prev : current).monitor;\n\t}\n\n\t/**\n\t * returns the monitor that the window is on. If the left edge of the window is on two or more monitors, we calculate the monitor that houses the majority of the window.\n\t * @param {string} windowName\n\t */\n\tgetMonitorForWindow(win) {\n\t\t//monitors is an array of monitors that the window's top-left edge is on. This can be 1, 2 (e.g., snapped to the edge of two monitors), or none(top-left is off in virtual space). If it's none or more than 1, we call getMonitorByMajority.\n\t\tlet monitors = [], allMonitors = [];\n\t\tlet iterator = monitorPool.iterator();\n\t\tfor (let monitor of iterator) {\n\t\t\tlet rect = monitor.availableRect || monitor.monitorRect;\n\t\t\tif (win.left >= rect.left && win.left <= rect.right && win.top <= rect.bottom && win.top >= rect.top) {\n\t\t\t\tmonitors.push(monitor);\n\t\t\t}\n\t\t\tallMonitors.push(monitor);\n\t\t}\n\t\tif (monitors.length === 1) {\n\t\t\treturn monitors[0];\n\t\t}\n\t\treturn this.getMonitorByMajority(win, allMonitors);\n\n\t}\n\t/**\n\t * Returns a monitor object.\n\t * @param {string} name name of monitor.\n\t */\n\tgetMonitor(name) {\n\t\treturn monitorPool.get(name);\n\t}\n\t/**\n\t * Registers a monitor with the calculator.\n\t* @param  {type} bounds\n\t*/\n\taddMonitor(bounds, onChange) {\n\t\tvar monitor = new DockableMonitor({ bounds: bounds, monitor: bounds._monitor });\n\t\tmonitor.onClaimedSpaceChanged = onChange;\n\t\tmonitor.setBufferSize(this.bufferSize);\n\t\tmonitorPool.add(monitor.name, monitor);\n\t}\n\t/**\n\t* Unregisters a monitor with the calculator.\n\t* @param  {type} name\n\t* @return {type}\n\t*/\n\tremoveMonitor(name) {\n\t\tmonitorPool.remove(name);\n\t}\n\n\t/**\n\t* @return {monitorPool}\n\t*/\n\tgetMonitors() {\n\t\treturn monitorPool.getAll();\n\t}\n\n\t/**\n\t * Returns a list of 'rawMonitors' from the container. These are only available when they are actually passed into the DockableMonitor when its instantiated.\n\t */\n\tgetRawMonitors() {\n\t\tlet rawMonitors = [];\n\t\tlet iterator = monitorPool.iterator();\n\t\tfor (var monitor of iterator) {\n\t\t\trawMonitors.push(monitor.rawMonitor);\n\t\t}\n\t\treturn rawMonitors;\n\t}\n\n\t/**\n\t * Returns the monitors in an array\n\t */\n\tgetMonitorArray() {\n\t\tlet monitors = [];\n\t\tlet iterator = monitorPool.iterator();\n\t\tfor (var monitor of iterator) {\n\t\t\tmonitors.push(monitor);\n\t\t}\n\t\treturn monitors;\n\t}\n\n\t/**\n\t *\n\t */\n\tremoveAllMonitors() {\n\t\tlet iterator = monitorPool.iterator();\n\t\tfor (var monitor of iterator) {\n\t\t\tthis.removeMonitor(monitor.name);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the resize throttle period. This allows the system to drop events that occur too quickly.\n\t */\n\tsetResizeThrottlePeriod(throttlePeriod) {\n\t\tLogger.system.log(\"DockingService.SetThrottle\", JSON.stringify(throttlePeriod));\n\t\tthis.resizeEventThrottlePeriod = throttlePeriod;\n\t\tlet windowIter = this.dockingPool.iterator();\n\t\tfor (let win of windowIter) {\n\t\t\twin.setResizeThrottlePeriod(throttlePeriod);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the opacity that windows take when entering another window's snapping region.\n\t */\n\tsetSnappingOpacity(opacity) {\n\t\tSNAPPING_OPACITY = opacity;\n\t}\n\n\t/**\n\t * At one point we weren't sure if we were going to allow groups to snap because of bugs. This is vestigial and should be removed at some point.\n\t */\n\tsetAllowGroupsToSnap(bool) {\n\t\tALLOW_GROUPS_TO_SNAP = bool;\n\t}\n\n\t/**\n\t * whether to push debug to the logger.\n\t * @param {boolean} bool\n\t */\n\tsetDebug(bool) {\n\t\tdebug = bool;\n\t}\n\n\t/**\n\t * Sets the size of the region around windows that will trigger a snap.\n\t */\n\tsetBufferSize(buffer) {\n\t\tLogger.system.info(\"Setting buffer size\", `${buffer}`);\n\t\tthis.bufferSize = buffer;\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\twin.setBufferSize(buffer);\n\t\t}\n\t\tlet monitorIterator = monitorPool.iterator();\n\t\tfor (const monitor in monitorIterator) {\n\t\t\tmonitor.setBufferSize(buffer);\n\t\t}\n\t}\n\n\t/**\n\t * Will prevent a window from being added to groups.\n\t */\n\taddToGroupBlacklist(windowName) {\n\t\tgroupBlacklist.push(windowName);\n\t}\n\n\t/**\n\t * Will allow a window previously blacklisted to be included in group operations.\n\t */\n\tremoveFromGroupBlacklist(windowName) {\n\t\tif (groupBlacklist.includes(windowName)) {\n\t\t\tgroupBlacklist.splice(groupBlacklist.indexOf(windowName), 1);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a group to the calculator.\n\t* @param  {type} group\n\t*/\n\taddGroup(group) {\n\t\tgroupPool.add(group.name, group);\n\t}\n\t/**\n\t* Removes a group from the calculator.\n\t* @param  {type} groupName\n\t*/\n\tremoveGroup(groupName) {\n\t\tlet group = this.getGroup(groupName);\n\t\tlet groupIter = this.groupWindowIterator(group);\n\t\tif (group) {\n\t\t\tif (group.getWindowNames().length) {\n\t\t\t\tfor (var win of groupIter) {\n\t\t\t\t\tif (debug) {\n\t\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"removing group\", win.name);\n\t\t\t\t\t}\n\t\t\t\t\tthis.removeWindowFromGroup(win.name, groupName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgroupPool.remove(groupName);\n\t\t} else {\n\t\t\tconsole.warn(`Tried removing a group that was already removed. ${groupName}.`);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of groups that are capable of moving together.\n\t */\n\tgetMovableGroups() {\n\t\tlet groupNames = this.getGroupNames();\n\t\tlet groups = {};\n\n\t\tfor (let i = 0, len = groupNames.length; i < len; i++) {\n\t\t\tlet groupName = groupNames[i];\n\t\t\tlet group = this.getGroup(groupName);\n\t\t\tif (group.isMovable) {\n\t\t\t\tgroups[groupName] = group;\n\t\t\t}\n\t\t}\n\t\treturn groups;\n\t}\n\n\t/**\n\t* Returns the group Pool\n\t* @return {type}\n\t*/\n\tgetGroups() {\n\t\treturn groupPool.getAll();\n\t}\n\n\t/**\n\t* Gets a group by name.\n\t* @param  {type} name\n\t* @return {type}\n\t*/\n\tgetGroup(name) {\n\t\treturn groupPool.get(name, false);\n\t}\n\n\t/**\n\t* Gets an array of group names.\n\t* @return {type}\n\t*/\n\tgetGroupNames() {\n\t\tvar names = [];\n\t\tlet iter = groupPool.iterator();\n\t\tfor (let group of iter) {\n\t\t\tnames.push(group.name);\n\t\t}\n\t\treturn names;\n\t}\n\n\t/**\n\t * Imagine 3 windows snapped horizontally. All are grouped ([A][B][C]). You ungroup B. This function will remove A and C. It iterates through all of the windows in the group and makes sure it's still attached to the group.\n\t */\n\tcheckGroupMembership(win) {\n\t\tif (!win) {\n\t\t\tLogger.system.warn(\"INVESTIGATE: No win passed in to checkGroupMembership.\");\n\t\t\treturn;\n\t\t}\n\n\t\tlet groupNames = clone(win.groupNames, Logger.system.error);\n\t\tlet snappedWindowGroupNames = win.snappedWindows.map((snapObj) => {\n\t\t\tlet snapWin = this.getWindow(snapObj.name);\n\t\t\tif (snapWin) {\n\t\t\t\treturn snapWin.groupNames;\n\t\t\t}\n\t\t\tLogger.system.warn(`INVESTIGATE: SnapWin does not exist. ${JSON.stringify(snapObj)}.`);\n\t\t\treturn [];\n\n\t\t});\n\t\tgroupNames.forEach((groupName) => {\n\t\t\tlet hasSnappedWindowAttachedToGroup = snappedWindowGroupNames.some((arr) => {\n\t\t\t\treturn arr.includes(groupName);\n\t\t\t});\n\t\t\tif (!hasSnappedWindowAttachedToGroup) {\n\t\t\t\tthis.removeWindowFromGroup(win.name, groupName);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Removes a window from a group. When tiling, we do not delete groups with only one window. We could be doing an operation on a group with two windows, and we want to retain group membership so that hole-filling works appropriately.\n\t */\n\tremoveWindowFromGroup(windowName, groupName, deleteGroupsWithOneWindow = true, updateAOT = true) {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"removing window from group\", windowName, groupName);\n\t\t}\n\t\tlet win = this.getWindow(windowName);\n\t\tif (!win || !groupName || !win.groupNames.includes(groupName)) {\n\t\t\treturn;\n\t\t}\n\t\twin.groupNames.splice(win.groupNames.indexOf(groupName), 1);\n\t\tlet group = this.getGroup(groupName);\n\t\tif (!group) { return; }\n\n\n\t\tgroup.removeWindow(win.name, updateAOT);\n\t\tif (deleteGroupsWithOneWindow && group.getWindowNames().length === 1) {\n\t\t\tthis.removeWindowFromGroup(group.getWindowNames()[0], group.name, true, updateAOT);\n\t\t\tthis.removeGroup(group.name);\n\t\t}\n\t}\n\n\t/**\n\t * Groups n-Windows.\n\t *\n\t * @param {any} params\n\t * @param {any} cb\n\t */\n\tgroupWindows(params, cb) {\n\t\tvar groupName = params.groupName || uuidv4();\n\t\tfor (var i = 0, len = params.windows.length; i < len; i++) {\n\t\t\tvar windowName = params.windows[i];\n\t\t\tlet win = this.getWindow(windowName);\n\n\t\t\t// Only group windows if they are allowed to. e.g. prevent docking of toolbar.\n\t\t\tif (win.canGroup) {\n\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\twin: win,\n\t\t\t\t\tgroupName: groupName,\n\t\t\t\t\tisMovable: typeof params.isMovable !== \"undefined\" ? params.isMovable : false\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (cb) {\n\t\t\tcb(null);\n\t\t}\n\t}\n\n\t/**\n\t* @param  {type} groupName\n\t* @param  {dockableWindow} win\n\t*/\n\taddWindowToGroup(params, cb) {\n\t\tlet { groupName, win } = params;\n\t\tif (!win) {\n\t\t\tLogger.system.warn(\"INVESTIGATE: No win passed in to addWindowToGroup.\");\n\t\t\treturn;\n\t\t}\n\t\t//in the explicit paradigm, groups default to not being immobile, but resizable.\n\t\tlet isMovable = typeof params.isMovable !== \"undefined\" ? params.isMovable : false;\n\t\tlet isAlwaysOnTop = typeof params.isAlwaysOnTop !== \"undefined\" ? params.isAlwaysOnTop : false;\n\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"add to group\", win.name, isMovable, groupName);\n\t\t}\n\t\tif (groupBlacklist.includes(win.name)) {\n\t\t\treturn;\n\t\t}\n\t\tif (win.groupNames.includes(groupName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet groupParams = {\n\t\t\tname: groupName,\n\t\t\tisMovable: isMovable,\n\t\t\tisAlwaysOnTop: isAlwaysOnTop\n\t\t};\n\n\t\tvar group = this.getGroup(groupName);\n\n\t\tif (!group) {\n\t\t\tif (!groupName) {\n\t\t\t\tgroupName = uuidv4();\n\t\t\t}\n\t\t\tgroupParams.name = groupName;\n\t\t\tgroupParams.MINIMUM_HEIGHT = this.MINIMUM_HEIGHT;\n\t\t\tgroupParams.MINIMUM_WIDTH = this.MINIMUM_WIDTH;\n\t\t\tgroup = new DockableGroup(groupParams, {\n\t\t\t\tLogger\n\t\t\t});\n\t\t\tthis.addGroup(group);\n\t\t}\n\t\t//You can only be in two groups at a time. a movable one, and a resizable one.\n\t\tif (group.isMovable) {\n\t\t\tlet movableGroup = this.getMovableGroup(win.name);\n\t\t\tif (movableGroup) {\n\t\t\t\tthis.removeWindowFromGroup(win.name, movableGroup.name, true, false);\n\t\t\t}\n\t\t} else {\n\t\t\tlet immobileGroup = this.getImmobileGroup(win.name);\n\t\t\tif (immobileGroup) {\n\t\t\t\tthis.removeWindowFromGroup(win.name, immobileGroup.name, true, false);\n\t\t\t}\n\t\t}\n\n\t\twin.groupNames.push(groupName);\n\t\tgroup.addWindow(win);\n\t\tif (group.isMovable) {\n\t\t\tgroup.bringToFront();\n\t\t}\n\t\tif (cb) {\n\t\t\tcb(group);\n\t\t}\n\t\treturn group;\n\t}\n\n\t/**\n\t * Vestigial function; used to pop a window out of a group. Can likely be removed in the future.\n\t */\n\tejectWindow(name) {\n\t\tvar win = this.getWindow(name);\n\t\tvar newBounds = win;\n\t\tnewBounds.left += 40;\n\t\tnewBounds.top -= 40;\n\t\tnewBounds.name = win.name;\n\t\tthis.moveWindow(newBounds);\n\t}\n\n\t/**\n\t* @return {boolean}\n\t*/\n\tgetGroupMode() {\n\t\treturn this.groupMode;\n\t}\n\n\t/**\n\t* @todo refactor the way config is set. This is so bad.\n\t* @param  {object} groupMade\n\t* @param  {boolean} groupMade.enabled Whether group mode is enabled.\n\t* @param  {number} groupMode.headerHeight How large the header is in windows. This shouldn't be in this config. So bad.\n\t* @param  {number} groupMode.groupTileBuffer How large the buffer is on the edge of a group to trigger a group-tile operation.\n\t* @param  {boolean} groupMode.allowSnappedWindowsToResize Whether snapped windows will resize as a group.\n\t* @param  {boolean} groupMode.fillHolesOnUndock Whether leaving a group triggers a hole-filling operation\n\t* @param  {boolean} groupMode.undockDisbandsEntireGroup Whether clicking the undock button on one window will disband the entire group.\n\t* @param  {boolean} groupMode.requireRectangularityForGroupResize Whether a group must be a rectangle to scale the individual windows as a unit.\n\t*/\n\tsetGroupMode(groupMode) {\n\t\tlet bool = groupMode.enabled;\n\t\tif (!bool) {\n\t\t\tshortCircuit = false;\n\t\t\tthis.getGroupNames().forEach((groupName) => {\n\t\t\t\tthis.removeGroup(groupName);\n\t\t\t});\n\t\t} else if (bool) {\n\t\t\tthis.constituteGroups();\n\t\t\tthis.groupTileBuffer = groupMode.groupTileBuffer;\n\t\t\tthis.headerHeight = groupMode.headerHeight;\n\t\t}\n\n\t\tif (typeof groupMode.allowSnappedWindowsToResize === \"undefined\") groupMode.allowSnappedWindowsToResize = true;\n\t\tif (typeof groupMode.fillHolesOnUndock === \"undefined\") groupMode.fillHolesOnUndock = true;\n\t\tif (typeof groupMode.undockDisbandsEntireGroup === \"undefined\") groupMode.undockDisbandsEntireGroup = false;\n\t\tif (typeof groupMode.requireRectangularityForGroupResize === \"undefined\") groupMode.requireRectangularityForGroupResize = true;\n\n\t\tthis.groupMode = groupMode;\n\t}\n\n\t/**\n\t* Adds useful properties to a raw request.\n\t* @param  {moveRequest} req\n\t* @return {moveRequest}\n\t*/\n\tsetMoveRequest(req, win) {\n\t\tif (!win) {\n\t\t\twin = this.getWindow(req.name);\n\t\t}\n\t\t/**\n\t\t * If you call setBounds on a window that is maximized, subsequent move requests will come in as though the window's\n\t\t * left edge never moved, until mouseUp happens. This boolean helps us get around this openfin bug.\n\t\t */\n\t\tif (win.shouldOffsetByMouse) {\n\t\t\treq.left = req.mousePosition.left - (req.width / 2);\n\t\t\treq.right = req.left + req.width;\n\t\t}\n\n\t\treq.windowBoundingBox = BoxMath.getWindowBoundingBox(req);\n\t\treq.innerBuffer = this.getInnerBoundingBox(req);\n\t\treq.snappingRegions = BoxMath.getSnappingRegions(req, this.bufferSize);\n\t\treq = this.makeSureMoveIsInUnclaimedSpace(req);\n\n\t\tthis.moveRequest = req;\n\t\treturn req;\n\t}\n\n\t/**\n\t* @param  {dockableWindow} win\n\t*/\n\tsetStationaryWindow(win) {\n\t\tstationaryWindow = win;\n\t}\n\n\t/**\n\t* @param  {dockableWindow} win\n\t*/\n\tsetMovingWindow(win) {\n\t\tthis.movingWindow = win;\n\t}\n\n\t/**\n\t* Convenience function I used for like 2 minutes.\n\t* @todo, remove this function.\n\t* @param  {dockableWindow} stationary\n\t* @param  {dockableWindow} moving\n\t*/\n\tsetWindows(stationary, moving) {\n\t\tstationaryWindow = stationary;\n\t\tthis.movingWindow = moving;\n\t}\n\n\t/****************************************************\n\t *\t\t\t\t\t\t\t\t\t\t\t\t\t*\n\t *\t\tCalculators - Multiple Positions/Sizes\t\t*\n\t *\t\t\t\t\t\t\t\t\t\t\t\t\t*\n\t ****************************************************/\n\n\t/**\n\t * when a non-docking movement is made, we don't grab the bounds changing events.\n\t * So this updates everything. Example: auto-arrange.\n\t */\n\tupdateWindowPositions() {\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\twin.updateState();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the movableGroup for a window.\n\t */\n\tgetMovableGroup(windowName) {\n\t\tlet win = this.getWindow(windowName);\n\t\tif (!win) {\n\t\t\tLogger.system.debug(`INVESTIGATE: getMovableGroup failure. No win found for ${windowName}`);\n\t\t\treturn null;\n\t\t}\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"Getting movable group\", windowName, win.groupNames);\n\t\t}\n\t\tfor (var i = 0, len = win.groupNames.length; i < len; i++) {\n\t\t\tvar groupName = win.groupNames[i];\n\t\t\tlet group = this.getGroup(groupName);\n\t\t\tif (group.isMovable) {\n\t\t\t\tif (debug) {\n\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"Found movableGroup\", groupName);\n\t\t\t\t}\n\t\t\t\treturn group;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the immobile group for a window. This is one where it is snapped to other windows, but not explicitly grouped by the user.\n\t */\n\tgetImmobileGroup(windowName) {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"Getting immobileGroup\", windowName);\n\t\t}\n\t\tlet win = this.getWindow(windowName);\n\t\tif (!win) {\n\t\t\tLogger.system.warn(\"INVESTIGATE: getImmobileGroup failure. No win found for ${windowName}\");\n\t\t\treturn null;\n\t\t}\n\t\tfor (var i = 0, len = win.groupNames.length; i < len; i++) {\n\t\t\tvar groupName = win.groupNames[i];\n\t\t\tlet group = this.getGroup(groupName);\n\t\t\tif (group.isMovable) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn group;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t* Basically just code flow controller. Figures out whether the move will affect just a couple, a single window, or all windows in the group.\n\t* @param  {moveRequest} moveRequest\n\t* @param  {function} cb\n\t*/\n\thandleGroup(moveRequest, cb) {\n\t\tthis.setMoveRequest(moveRequest);\n\t\tmoveRequest = this.moveRequest;\n\t\t//Before beginning a group's move function set each individual window's 'finishedMove' property\n\t\t//This is necessary because the logic which determines whether to set a window's internal bounds after a window aero movement will check to make sure the _user_ is not physically moving the window. As long as the mouse is not causing the movement, and instead the system, we mark all the windows as finished = true. This is just the opposite of that, the group is beginning a movement, so we set finishedMove = false.\n\t\tfor (let windowName in this.movingGroup.windows) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\twin.win._startMove();\n\t\t}\n\t\tif (this.movingGroup.isMovable && moveRequest.changeType === 0) {\n\t\t\t//Before beginning a group's move function set each individual window's 'finished' property\n\t\t\t//This is necessary because the logic which determines whether to set a window's internal bounds after a window aero movement will check to make sure the _user_ is not physically moving the window. As long as the mouse is not causing the movement, and instead the system, we mark all the windows as finished = true. This is just the opposite of that, the group is beginning a movement, so we set finished = false.\n\t\t\tfor (let windowName in this.movingGroup.windows) {\n\t\t\t\tlet win = this.getWindow(windowName);\n\t\t\t\twin.finished = false;\n\t\t\t}\n\t\t\tthis.handleGroupMove(moveRequest, cb);//Move a group\n\t\t} else {\n\t\t\tif (this.resizeObject.scalingGroup) {\n\t\t\t\tthis.movingAGroupOfWindows = true;\n\t\t\t} else {\n\t\t\t\tthis.resizeInteriorWindow(moveRequest);\n\t\t\t}\n\t\t\tcb({ finished: true });\n\t\t}\n\t}\n\n\t/**\n\t * I wrote this to kill any gap that may have happened after scaling a group proportionately. It seems to work.\n\t * @todo, make sure this is necessary. Consider a better way to do it.\n\t */\n\teliminateGaps() {\n\t\tvar self = this;\n\t\tvar dimensionsToChange = {\n\t\t\tleft: \"width\",\n\t\t\tright: \"width\",\n\t\t\tbottom: \"height\",\n\t\t\ttop: \"height\"\n\t\t};\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tvar snappableWindows = this.getSnappableWindows(win);\n\t\t\tvar bounds = win.getBounds();\n\t\t\tsnappableWindows.forEach((windowName) => {\n\t\t\t\tvar snappedWin = self.getWindow(windowName);\n\t\t\t\tvar sharedEdges = win.getSharedEdges(snappedWin, self.bufferSize);\n\t\t\t\tfor (var edge in sharedEdges) {\n\t\t\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[edge];\n\t\t\t\t\tif (sharedEdges[edge] && win[edge] !== snappedWin[oppEdge]) {\n\t\t\t\t\t\tbounds[edge] = snappedWin[oppEdge];\n\t\t\t\t\t\tif (edge === \"left\") {\n\t\t\t\t\t\t\tbounds.right = bounds.left + bounds.width;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (edge === \"right\") {\n\t\t\t\t\t\t\tbounds.left = bounds.right - bounds.width;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (edge === \"top\") {\n\t\t\t\t\t\t\tbounds.bottom = bounds.top + bounds.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (edge === \"bottom\") {\n\t\t\t\t\t\t\tbounds.top = bounds.bottom - bounds.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbounds.name = win.name;\n\t\t\t\tself.moveWindow(bounds);\n\t\t\t});\n\t\t}\n\t}\n\n\t/****************************************************\n\t *\t\t\t\t\t\t\t\t\t\t\t\t\t*\n\t *\tCalculators - Individual Window Position/Size\t*\n\t *\t\t\t\t\t\t\t\t\t\t\t\t\t*\n\t ****************************************************/\n\t/**\n\t* Returns a modified moveRequest. If the code gets here, its' because the moving window was inside of the stationary window's buffer, and a snap needed to occur.\n\t* @param  {moveRequest} request\n\t* @return {moveRequest}\n\t*/\n\tsnapWindow(request) {\n\t\tvar intersection = null;\n\t\t//order matters here. corners should take precedence, as they'll also handle the vanilla bottom/top/left/right order. The algorithm stops with the first intersection.\n\t\tvar regions = [\n\t\t\t\"bottomLeft\",\n\t\t\t\"bottomRight\",\n\t\t\t\"topLeft\",\n\t\t\t\"topRight\",\n\t\t\t\"leftTop\",\n\t\t\t\"leftBottom\",\n\t\t\t\"rightTop\",\n\t\t\t\"rightBottom\",\n\t\t\t\"top\",\n\t\t\t\"left\",\n\t\t\t\"right\",\n\t\t\t\"bottom\"];\n\n\t\tvar stationaryBoundingBoxes = stationaryWindow.snappingRegions;\n\t\tvar movingBoundingBoxes = request.snappingRegions;\n\t\tvar intersectionFound = false;\n\t\tfor (var i = 0, len = regions.length; i < len; i++) {\n\t\t\tvar region = regions[i];\n\t\t\tif (intersectionFound && request.changeType !== 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tintersection = null;\n\t\t\t//Two checks:\n\t\t\t//1) Is it inside of the stationary window? If so, exit.\n\t\t\t//2) Is it within one of the region bounding boxes.\n\n\t\t\tif (BoxMath.intersectBoundingBoxes(stationaryBoundingBoxes[region], request.windowBoundingBox)) {\n\t\t\t\tif (request.changeType === 0) {\n\t\t\t\t\trequest.movingRegion = this.getIntersections(request, stationaryWindow, region)[0];\n\t\t\t\t}\n\t\t\t\tvar movingRegion = request.movingRegion;\n\n\t\t\t\tif (movingRegion && BoxMath.intersectBoundingBoxes(stationaryBoundingBoxes[region], movingBoundingBoxes[movingRegion])) {\n\t\t\t\t\tintersection = {\n\t\t\t\t\t\tstationaryRegion: region,\n\t\t\t\t\t\tmovingRegion: movingRegion\n\t\t\t\t\t};\n\t\t\t\t\tintersectionFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (intersection) {\n\t\t\t\tthis.intersection = intersection;\n\t\t\t\trequest = this.getNewCoordinates({\n\t\t\t\t\teventType: request.changeType === 0 ? \"move\" : \"resize\",\n\t\t\t\t\tintersection: intersection,\n\t\t\t\t\tstationaryWindow: stationaryWindow,\n\t\t\t\t\trequest: request\n\t\t\t\t});\n\t\t\t\tthis.movingWindow.removedBoundsChanging = true;\n\n\t\t\t\t//if moving window isn't in a group, see if stationary window is. if so, add moving to the stationary group. if not, create a new group with them.\n\t\t\t\t//GroupAction is just a placeholder. We only modify groups on mouseDown defers this\n\t\t\t\tlet sharedEdges = stationaryWindow.getSharedEdges(request);\n\t\t\t\tlet sharedEdgesArr = Object.keys(sharedEdges).map(edge => {\n\t\t\t\t\treturn { edge: sharedEdges[edge] };\n\t\t\t\t});\n\t\t\t\tif (!sharedEdgesArr.some(obj => obj.edge)) {\n\t\t\t\t\tlet sharedCorners = stationaryWindow.getSharedCorners(request);\n\t\t\t\t\tlet sharedCornersArr = Object.keys(sharedCorners).map(corner => {\n\t\t\t\t\t\treturn { corner: sharedCorners[corner] };\n\t\t\t\t\t});\n\t\t\t\t\tif (!sharedCornersArr.some(obj => obj.corner)) {\n\t\t\t\t\t\treturn request;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!groupBlacklist.includes(stationaryWindow.name)) {\n\t\t\t\t\tgroupAction = this.getDeferredGroupAction(stationaryWindow, this.movingWindow);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.intersection = {\n\t\t\t\t\tstationaryRegion: null,\n\t\t\t\t\tmovingRegion: null\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthis.requestMade = request;\n\t\treturn request;\n\t}\n\n\t/**\n\t * When moving a window, we don't want to add it to a group until all the calculations are complete. If two windows snap, this function is called. It figures out which group that the windows should form. Note: It always forms an immobile group (one that allows shared-border resizing). This is because a snap is not an explicit group.\n\t */\n\tgetDeferredGroupAction(stationaryWin, movingWin) {\n\t\tlet action = groupAction;\n\t\tlet stationaryGroup = this.getImmobileGroup(stationaryWin.name);\n\t\tlet movingWindowGroup = this.getImmobileGroup(movingWin.name);\n\t\tif (stationaryGroup && !movingWindowGroup) {\n\t\t\taction.name = stationaryGroup.name;\n\t\t\taction.windows[movingWin.name] = true;\n\t\t} else if (movingWindowGroup && !stationaryGroup) {\n\t\t\taction.name = movingWindowGroup.name;\n\t\t\taction.windows[stationaryWin.name] = true;\n\t\t} else if (!movingWindowGroup && !stationaryGroup) {\n\t\t\taction.name = uuidv4();\n\t\t\taction.windows[stationaryWin.name] = true;\n\t\t\taction.windows[movingWin.name] = true;\n\t\t} else {\n\t\t\taction.name = stationaryGroup.name;\n\t\t\taction.windows[stationaryWin.name] = true;\n\t\t\taction.windows[movingWin.name] = true;\n\t\t}\n\t\treturn action;\n\t}\n\n\t/**\n\t* Calculates resize bounds.\n\t* @param  {object} params\n\t* @return {moveRequest}\n\t*/\n\tadjustSize(params) {\n\t\tvar request = params.request,\n\t\t\tstationaryWindow = params.stationaryWindow,\n\t\t\tstationaryRegion = params.intersection.stationaryRegion;\n\t\tvar intersections = this.getIntersections(request, stationaryWindow, stationaryRegion).toString().toLowerCase();\n\t\tif (!intersections) {\n\t\t\treturn request;\n\t\t}\n\n\t\tswitch (stationaryRegion) {\n\t\t\tcase \"leftBottom\":\n\t\t\tcase \"bottomLeft\":\n\t\t\t\tif (intersections.includes(\"top\") || intersections.includes(\"topleft\") || intersections.includes(\"topright\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"topright\") || intersections.includes(\"right\")) {\n\t\t\t\t\trequest.right = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"topleft\") || intersections.includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottom\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"rightBottom\":\n\t\t\tcase \"bottomRight\":\n\t\t\t\tif (intersections.includes(\"top\") || intersections.includes(\"topleft\") || intersections.includes(\"topright\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"topleft\") || intersections.includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\n\t\t\t\tif (intersections.includes(\"topright\") || intersections.includes(\"right\")) {\n\t\t\t\t\trequest.right = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottom\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.bottom;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase \"topLeft\":\n\t\t\tcase \"leftTop\":\n\t\t\t\tif (intersections.includes(\"bottom\") || intersections.includes(\"bottomleft\") || intersections.includes(\"bottomright\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottomleft\") || intersections.includes(\"left\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.top;\n\t\t\t\t\trequest.left = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottomright\") || intersections.includes(\"right\")) {\n\t\t\t\t\trequest.right = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase \"rightTop\":\n\t\t\tcase \"topRight\":\n\t\t\t\tif (intersections.includes(\"bottom\") || intersections.includes(\"bottomleft\") || intersections.includes(\"bottomright\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottomleft\") || intersections.includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottomright\") || intersections.includes(\"right\")) {\n\t\t\t\t\trequest.right = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"top\":\n\t\t\t\tif (intersections.includes(\"bottom\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"right\":\n\t\t\t\tif (intersections.includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"bottom\":\n\t\t\t\tif (intersections.includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"left\":\n\t\t\t\tif (intersections.includes(\"right\")) {\n\t\t\t\t\trequest.right = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\trequest.width = request.right - request.left;\n\t\trequest.height = request.bottom - request.top;\n\n\t\trequest = this.checkShortCircuits(request);\n\t\treturn request;\n\t}\n\n\t/**\n\t * Checks to see if a window has gotten too narrow, or too short.\n\t */\n\tcheckShortCircuitsWithEdge(request, edge) {\n\t\tlet win = this.getWindow(request.name);\n\t\t//The code for resizing groups goes through here. It just passes bounds, not a window. Here, use the global minimums and no maximums (until a global max is allowed...).\n\t\tif (!win) {\n\t\t\twin = {\n\t\t\t\tlimits: {\n\t\t\t\t\tminHeight: MINIMUM_HEIGHT,\n\t\t\t\t\tminWidth: MINIMUM_WIDTH,\n\t\t\t\t\tmaxHeight: Infinity,\n\t\t\t\t\tmaxWidth: Infinity\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t//Checks to see if the height/widths are below the window's minimum height/width. If so, it sets them to the minimum values.\n\t\tswitch (edge) {\n\t\t\tcase \"top\":\n\t\t\t\tif (request.height <= win.limits.minHeight) {\n\t\t\t\t\trequest.height = win.limits.minHeight;\n\t\t\t\t\trequest.bottom = request.top + win.limits.minHeight;\n\t\t\t\t} else if (request.height >= win.limits.maxHeight) {\n\t\t\t\t\trequest.height = win.limits.maxHeight;\n\t\t\t\t\trequest.bottom = request.top + win.limits.maxHeight;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"bottom\":\n\t\t\t\tif (request.height <= win.limits.minHeight) {\n\t\t\t\t\trequest.height = win.limits.minHeight;\n\t\t\t\t\trequest.top = request.bottom - win.limits.minHeight;\n\t\t\t\t} else if (request.height >= win.limits.maxHeight) {\n\t\t\t\t\trequest.height = win.limits.maxHeight;\n\t\t\t\t\trequest.top = request.bottom - win.limits.maxHeight;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"left\":\n\t\t\t\tif (request.width < win.limits.minWidth) {\n\t\t\t\t\trequest.width = win.limits.minWidth;\n\t\t\t\t\trequest.right = request.left + win.limits.minWidth;\n\t\t\t\t} else if (request.width > win.limits.maxWidth) {\n\t\t\t\t\trequest.width = win.limits.maxWidth;\n\t\t\t\t\trequest.right = request.left + win.limits.maxWidth;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"right\":\n\t\t\t\tif (request.width < win.limits.minWidth) {\n\t\t\t\t\trequest.width = win.limits.minWidth;\n\t\t\t\t\trequest.left = request.right - win.limits.minWidth;\n\t\t\t\t} else if (request.width > win.limits.maxWidth) {\n\t\t\t\t\trequest.width = win.limits.maxWidth;\n\t\t\t\t\trequest.left = request.right - win.limits.maxWidth;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn request;\n\n\t}\n\n\t/**\n\t * Checks to see if a request is allowed. Are you trying to make my window -20px? or 10px? Get out of here.\n\t * @todo, rename. 'shortcircuitRequest' or something.\n\t */\n\tcheckShortCircuits(request, win) {\n\t\tvar currentBounds;\n\n\t\tconst defaultLimits = {\n\t\t\tminHeight: MINIMUM_HEIGHT,\n\t\t\tminWidth: MINIMUM_WIDTH,\n\t\t\tmaxHeight: Infinity,\n\t\t\tmaxWidth: Infinity\n\t\t};\n\n\t\tif (typeof win === \"undefined\") {\n\t\t\twin = this.getWindow(request.name);\n\t\t}\n\t\t//@note from Daniel, PR Review on 12/4. Address this at some point.\n\t\t//Looking at the code isolated from it's calling context, it's not obvious to me that this won't throw a null reference error. You're checking to see if request.name is truthy, which to me implies it's optional, but you're accessing it before this check, which looks really dangerous.We should switch the order, and only access request.name when we've confirmed it's really there.\n\t\tif (request.name) {\n\t\t\tcurrentBounds = win.getBounds();\n\t\t} else {\n\t\t\tcurrentBounds = request;\n\t\t\t//The code for resizing groups goes through here. It just passes bounds, not a window. Here, use the global minimums and no maximums (until a global max is allowed...).\n\t\t\twin = {};\n\t\t}\n\n\t\twin.limits = Object.assign(defaultLimits, win.limits || {});\n\n\t\t//@todo consider consolidation. The code for adjusting the bounds are the same. The only difference is the inputs (e.g, we change the height or width, and the anchor);\n\n\t\t//CASE: WINDOW IS TOO NARROW\n\t\t//handles shortCircuits for the moving window.\n\t\tif (request.width <= win.limits.minWidth) {\n\t\t\trequest.width = win.limits.minWidth;\n\n\t\t\t//If we're dragging the left edge around, anchor the right edge.\n\t\t\tif (request.left !== currentBounds.left) {\n\t\t\t\trequest.right = currentBounds.right;\n\t\t\t\trequest.left = request.right - request.width;\n\t\t\t} else if (request.right !== currentBounds.right) {\n\t\t\t\t//If we're dragging the right edge around, anchor the left edge.\n\t\t\t\trequest.left = currentBounds.left;\n\t\t\t\trequest.right = request.left + request.width;\n\t\t\t}\n\t\t} else if (request.width >= win.limits.maxWidth) {\n\t\t\t//CASE: WINDOW IS TOO WIDE\n\t\t\trequest.width = win.limits.maxWidth;\n\n\t\t\t//If we're dragging the left edge around, anchor the right edge.\n\t\t\tif (request.left !== currentBounds.left) {\n\t\t\t\trequest.right = currentBounds.right;\n\t\t\t\trequest.left = request.right - request.width;\n\t\t\t} else if (request.right !== currentBounds.right) {\n\t\t\t\t//If we're dragging the right edge around, anchor the left edge.\n\t\t\t\trequest.left = currentBounds.left;\n\t\t\t\trequest.right = request.left + request.width;\n\t\t\t}\n\t\t}\n\t\t//CASE: WINDOW IS TOO SHORT\n\t\tif (request.height <= win.limits.minHeight) {\n\t\t\trequest.height = win.limits.minHeight;\n\n\t\t\t//If we're dragging the top edge around, anchor on the bottom.\n\t\t\tif (request.top !== currentBounds.top) {\n\t\t\t\trequest.bottom = currentBounds.bottom;\n\t\t\t\trequest.top = request.bottom - request.height;\n\t\t\t} else if (request.bottom !== currentBounds.bottom) {\n\t\t\t\t//If we're dragging the bottom edge around, anchor on the top.\n\t\t\t\trequest.top = currentBounds.top;\n\t\t\t\trequest.bottom = request.top + request.height;\n\t\t\t}\n\t\t} else if (request.height >= win.limits.maxHeight) {\n\t\t\t//CASE: WINDOW IS TOO TALL\n\t\t\trequest.height = win.limits.maxHeight;\n\n\t\t\t//If we're dragging the top edge around, anchor on the bottom.\n\t\t\tif (request.top !== currentBounds.top) {\n\t\t\t\trequest.bottom = currentBounds.bottom;\n\t\t\t\trequest.top = request.bottom - request.height;\n\t\t\t} else if (request.bottom !== currentBounds.bottom) {\n\t\t\t\t//If we're dragging the bottom edge around, anchor on the top.\n\t\t\t\trequest.top = currentBounds.top;\n\t\t\t\trequest.bottom = request.top + request.height;\n\t\t\t}\n\t\t}\n\t\treturn request;\n\t}\n\n\t/**\n\t* Use when a window is moving and needs to be snapped. Width/Height aren't modified like in `this.adjustSize`.\n\t* @param  {type} params\n\t* @return {type}\n\t*/\n\tgetNewCoordinates(params) {\n\t\tvar request = params.request,\n\t\t\tstationaryWindow = params.stationaryWindow,\n\t\t\tmovingRegion = params.intersection.movingRegion,\n\t\t\tstationaryRegion = params.intersection.stationaryRegion;\n\n\t\tif (params.eventType === \"resize\") {\n\t\t\treturn this.adjustSize(params);\n\t\t}\n\n\t\tswitch (stationaryRegion) {\n\t\t\tcase \"bottomLeft\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom - request.height;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"bottomRight\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom - request.height;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"topLeft\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top - request.height;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left;\n\t\t\t\t}\n\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"topRight\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top - request.height;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"leftTop\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top - request.height;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"leftBottom\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom - request.height;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"rightTop\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top - request.height;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"rightBottom\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom - request.height;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"top\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top - request.height;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"right\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"bottom\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"left\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left - request.width;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\trequest.right = request.left + request.width;\n\t\trequest.bottom = request.top + request.height;\n\t\treturn request;\n\t}\n\n\t/**\n\t* Helper function for figuring out why snapping isn't working.\n\t* @todo, consider deleting.\n\t* @return {type}\n\t*/\n\tgetDiagnostics() {\n\t\treturn {\n\t\t\trequestMade: this.moveRequest,\n\t\t\tstationaryWindow: stationaryWindow,\n\t\t\tmovingWindow: this.movingWindow,\n\t\t\tstationaryBoundingBoxes: stationaryWindow.snappingRegions,\n\t\t\tmovingBoundingBoxes: this.moveRequest.snappingRegions,\n\t\t\tintersection: this.intersection\n\t\t};\n\t}\n\n\t/**\n\t * Helper to return an object that says which edges are moving.\n\t * @todo, why not just use splitHandle and a regex? This seems unnecessary.\n\t* @function this.getMovingEdgesFromResizeHandle\n\t* @param  {type} handle\n\t* @return {type}\n\t*/\n\tgetMovingEdgesFromResizeHandle(handle) {\n\t\tvar edges = {\n\t\t\ttop: false,\n\t\t\tright: false,\n\t\t\tleft: false,\n\t\t\tbottom: false\n\t\t};\n\t\tif (!handle) {\n\t\t\treturn edges;\n\t\t}\n\t\thandle = handle.toLowerCase();\n\t\tfor (var edge in edges) {\n\t\t\tif (handle.includes(edge)) {\n\t\t\t\tedges[edge] = true;\n\t\t\t}\n\t\t}\n\t\treturn edges;\n\t}\n\n\t/**\n\t * NOT CALLED RIGHT NOW.\n\t * Will basically be like `this.onMouseUp`, but for groups...once I can get that stuff working.\n\t */\n\tonGroupMaskMoved(cb) {\n\n\t\tvar initialWindowBounds = this.movingWindow.initialBounds || this.movingWindow.getBounds();\n\t\tvar groupName = this.movingGroup.name;\n\t\tvar boundsDelta = this.getBoundsDelta(this.movingWindow, initialWindowBounds);\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ongroupmaskmoved\", boundsDelta);\n\t\t}\n\t\tif (boundsDelta.height === 0 && boundsDelta.width === 0) {\n\t\t\t//move group.\n\t\t\tthis.handleGroupMove(groupName, boundsDelta.left, boundsDelta.top);\n\t\t} else {\n\t\t\tthis.handleGroupResize(boundsDelta);\n\t\t}\n\n\t\tvar groupIter = this.groupWindowIterator(this.movingGroup);\n\t\tfor (var win of groupIter) {\n\t\t\twin.show();\n\t\t}\n\t\t// this.resizeObject = {};\n\t\tthis.movingWindow.initialBounds = null;\n\t\tthis.fixWindowOpacity({\n\t\t\tcheckForSnappability: false\n\t\t});\n\t}\n\n\t/**\n\t * This is being used\n\t * bounds are calculated in maskBoundsCalculator.js\n\t */\n\tmoveGroupMask() {\n\t\tthis.groupMask.setBounds(\n\t\t\tmaskBoundsCalculator.mousePosToBounds(this.moveRequest.mousePosition)\n\t\t);\n\t}\n\t/**\n\t * NOT CURRENTLY USED.\n\t * Will be like `onMouseMove`, but for groups. Goal is to only move all grouped windows `onMouseUp`. In the interim, just move the mask around. Right now I move every window on every resizeEvent\n\t */\n\t_moveGroupMaskOld() {\n\t\tlet moveRequest = clone(this.moveRequest, Logger.system.error);\n\t\tlet bounds = this.groupMask.getBounds();\n\t\tif (moveRequest.changeType !== 0) {\n\t\t\tlet resizeHandle = this.resizeObject.correctedHandle;\n\t\t\t//@todo figure out why the handle wouldn't be set. sometimes, under strange circumstances (e.g., resizing a group of windows), this is undefined.\n\t\t\tif (resizeHandle) {\n\t\t\t\tlet splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\t\t\treturn s.toLowerCase();\n\t\t\t\t});\n\n\t\t\t\tsplitHandle.forEach((handle) => {\n\t\t\t\t\tif (handle === \"top\" || handle === \"bottom\") {\n\t\t\t\t\t\tbounds[handle] = moveRequest.mousePosition.y || moveRequest.mousePosition.top;\n\t\t\t\t\t}\n\t\t\t\t\tif (handle === \"right\" || handle === \"left\") {\n\t\t\t\t\t\tbounds[handle] = moveRequest.mousePosition.x || moveRequest.mousePosition.left;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tbounds.width = bounds.right - bounds.left;\n\t\tbounds.height = (bounds.bottom - bounds.top);\n\t\tbounds.name = \"groupMask\";\n\t\tthis.groupMask.setBounds(bounds);\n\t}\n\t/**\n\t * Scales a group of windows proportionately.\n\t * @param {moveRequest} moveRequest\n\t */\n\tscaleGroup(moveRequest) { //TODO: see group.scale and convert this to use that\n\t\tvar self = this;\n\t\tvar group = this.getMovingGroup(moveRequest);\n\t\tvar groupIter;\n\t\tvar resizeHandle = this.resizeObject.correctedHandle;\n\t\tvar newGroupDimensions = {\n\t\t\theight: self.groupMask.height,\n\t\t\twidth: self.groupMask.width\n\t\t};\n\t\tvar splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\n\t\tvar anchors = group.getAnchors(resizeHandle);\n\n\t\tgroupIter = this.groupWindowIterator(group, anchors[0]);\n\t\tvar movements = {};\n\t\tfor (let win of groupIter) {\n\t\t\twin.onGroupEdge = {};\n\t\t\twin.resizeHandle = this.resizeObject.correctedHandle;\n\t\t\t[\"top\", \"right\", \"left\", \"bottom\"].forEach((handle) => {\n\t\t\t\tif (win[handle] === group[handle]) {\n\t\t\t\t\twin.onGroupEdge[handle] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar newHeight = Math.round(newGroupDimensions.height * (win.height / group.height));\n\t\t\tvar newWidth = Math.round(newGroupDimensions.width * (win.width / group.width));\n\t\t\tvar request = win.getBounds();\n\t\t\trequest.width = newWidth;\n\t\t\trequest.height = newHeight;\n\t\t\trequest.right = request.left + request.width;\n\t\t\trequest.bottom = request.top + request.height;\n\t\t\trequest.name = win.name;\n\n\t\t\tmovements[request.name] = this.checkShortCircuits(request);\n\t\t}\n\t\tsplitHandle.forEach((handle) => {\n\t\t\tgroupIter = this.groupWindowIterator(group);\n\t\t\t//cleans up the edges of the group in case rounding error messed us up.\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[handle];\n\t\t\tfor (var win of groupIter) {\n\t\t\t\tvar moveRequest = movements[win.name];\n\t\t\t\tif (win.onGroupEdge && win.onGroupEdge[oppEdge] && moveRequest[oppEdge] !== self.groupMask[oppEdge]) {\n\t\t\t\t\tmoveRequest.name = win.name;\n\t\t\t\t\tmoveRequest[oppEdge] = self.groupMask[oppEdge];\n\t\t\t\t\tif (oppEdge === \"bottom\") {\n\t\t\t\t\t\tmoveRequest.top = moveRequest.bottom - moveRequest.height;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"top\") {\n\t\t\t\t\t\tmoveRequest.bottom = moveRequest.top + moveRequest.height;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"left\") {\n\t\t\t\t\t\tmoveRequest.right = moveRequest.left + moveRequest.width;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"right\") {\n\t\t\t\t\t\tmoveRequest.left = moveRequest.right - moveRequest.width;\n\t\t\t\t\t}\n\t\t\t\t\tmoveRequest.width = moveRequest.right - moveRequest.left;\n\t\t\t\t\tmoveRequest.height = moveRequest.bottom - moveRequest.top;\n\t\t\t\t\tmovements[win.name] = self.checkShortCircuits(moveRequest, win);\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t\tfor (var windowName in movements) {\n\t\t\tself.moveWindow(movements[windowName]);\n\t\t}\n\n\t}\n\n\t/**\n\t* This basically will re-snap all windows after the movingWindow moves.\n\t* @todo, document inline.\n\t* @param  {type} group\n\t* @param  {function} cb\n\t*/\n\tcleanupGroupResize(group, cb) { // TODO: see group.scale (replace scaleGroup and this with group.scale)\n\t\tvar resizeHandle = group.resizeHandle || this.resizeObject.correctedHandle;\n\t\tvar splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\n\t\tvar self = this;\n\t\tvar alreadyDanced = [];\n\t\tsplitHandle.forEach((handle) => {\n\t\t\tvar groupIter = this.groupWindowIterator(group);\n\t\t\talreadyDanced = [];\n\t\t\tfor (var anchor of groupIter) {\n\t\t\t\tif (!alreadyDanced.includes(anchor.name)) {\n\t\t\t\t\tvar b = doTheConga(anchor, handle); b;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// group.updateBounds();\n\t\t\tgroupIter = this.groupWindowIterator(group);\n\t\t\t//cleans up the edges of the group in case rounding error messed us up.\n\t\t\tfor (var win of groupIter) {\n\t\t\t\tif (win.onGroupEdge && win.onGroupEdge[handle] && win[handle] !== self.groupMask[handle]) {\n\t\t\t\t\tvar moveRequest = win.getBounds();\n\t\t\t\t\tmoveRequest.name = win.name;\n\t\t\t\t\tmoveRequest[handle] = self.groupMask[handle];\n\n\t\t\t\t\tmoveRequest.width = moveRequest.right - moveRequest.left;\n\t\t\t\t\tmoveRequest.height = moveRequest.bottom - moveRequest.top;\n\n\t\t\t\t\tself.moveWindow(self.checkShortCircuits(moveRequest, win));\n\t\t\t\t\tvar b = doTheConga(win, handle); b;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tgroup.updateBounds();\n\t\t});\n\n\t\tfunction doTheConga(win, handle) {\n\t\t\tif (!win) {\n\t\t\t\tLogger.system.warn(\"INVESTIGATE: No win passed to doTheConga\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[handle];\n\n\t\t\tfor (var i = 0, len = win.snappedWindows.length; i < len; i++) {\n\t\t\t\tvar snappedWindowObj = win.snappedWindows[i];\n\t\t\t\tvar snappedWin = self.getWindow(snappedWindowObj.name);\n\t\t\t\tif (!snappedWin) {\n\t\t\t\t\tLogger.system.warn(`INVESTIGATE: No Dockable Window found for ${snappedWindowObj.name}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet groupIntersection = snappedWin.groupNames.some(name => win.groupNames.includes(name));\n\t\t\t\tif (!snappedWindowObj.edges[handle] || !groupIntersection) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar req = snappedWin.getBounds();\n\t\t\t\treq.name = snappedWin.name;\n\n\t\t\t\tsnappedWin[oppEdge] = win[handle];\n\t\t\t\tvar top = snappedWin.top, left = snappedWin.left;\n\t\t\t\tif (handle === \"top\") {\n\t\t\t\t\ttop = win.top - snappedWin.height;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"bottom\") {\n\t\t\t\t\ttop = win.bottom;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"right\") {\n\t\t\t\t\tleft = win.right;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"left\") {\n\t\t\t\t\tleft = win.left - snappedWin.width;\n\t\t\t\t}\n\n\t\t\t\tsnappedWin.moveTo(left, top);\n\t\t\t\tvar b = doTheConga(snappedWin, handle); b;\n\t\t\t\talreadyDanced.push(snappedWin.name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This returns an object with all of the bounds of all of the windows in a given group. This should be moved in to the dockableGroup.\n\t */\n\tgetBoundsOfGroupWindows(group) {\n\t\tvar groupIter = this.groupWindowIterator(group);\n\t\tvar bounds = {};\n\t\tfor (var win of groupIter) {\n\t\t\tbounds[win.name] = win.getBounds();\n\t\t\t//bounds[win.name].name = win.name;\n\t\t}\n\t\treturn bounds;\n\t}\n\n\t/**\n\t * For a group, it will iterate through its windows and set bounds on each of them.\n\t */\n\tsetBoundsOfGroupWindows(group, windowBounds, stopMove = false) {\n\t\tvar groupIter = this.groupWindowIterator(group);\n\t\tfor (var win of groupIter) {\n\t\t\twindowBounds[win.name].name = win.name;\n\t\t\tthis.moveWindow(windowBounds[win.name]);\n\t\t\tif (stopMove) {\n\t\t\t\twin.win.stopMove();\n\n\t\t\t\t//TODO: Calling stop move should take care of saving the window options, but didn't seem to work in for certain windows in groups\n\t\t\t\twin.win._saveWindowOptions();\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Exports an array of bounds for the windows that are currently being managed by docking. This makes it easy to generate oddball test cases.\n\t */\n\texport() {\n\t\tlet windowList = this.getWindowNames().map((name, i) => {\n\t\t\tlet win = this.getWindow(name);\n\t\t\tlet bounds = win.getBounds();\n\t\t\tbounds.name = `window${i}`;\n\t\t\treturn bounds;\n\t\t});\n\t\tif (windowList) {\n\t\t\treturn JSON.stringify(windowList);\n\n\t\t}\n\t\treturn \"\";\n\n\t}\n\n\t/**\n\t * Cleans up shared edges of windows in a group\n\t * @param {*} group The group to operate on\n\t * @param {*} windowBounds An object containing bounds key'ed by window name\n\t * @param {*} triggeredByAutoArrange Wether or not this cleanup was trigger by auto arrange (if true will fire stopMove())\n\t */\n\tcleanupSharedEdges(group, windowBounds, triggeredByAutoArrange = false) {\n\t\tlet groupIter = this.groupWindowIterator(group);\n\t\tfor (let win of groupIter) {\n\t\t\tlet edges = {\n\t\t\t\t\"right\": 0,\n\t\t\t\t\"left\": 0,\n\t\t\t\t\"top\": 0,\n\t\t\t\t\"bottom\": 0\n\t\t\t};\n\t\t\t// How many things is this window snapped to on each edge??\n\t\t\tfor (let sWin of win.snappedWindows) {\n\t\t\t\tfor (let i in sWin.edges) {\n\t\t\t\t\tif (sWin.edges[i]) edges[i]++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are only snapped to one thing and are disconnected, reconnect:\n\t\t\tfor (let sWin of win.snappedWindows) {\n\t\t\t\tfor (let edge in sWin.edges) {\n\t\t\t\t\tif (sWin.edges[edge] && edges[edge] === 1) {\n\t\t\t\t\t\tlet snappedWin = windowBounds[sWin.name];\n\t\t\t\t\t\t;\n\n\t\t\t\t\t\t//if a window is snapped to a window (but not grouped with it), that window won't be in the movable group's window bounds. So make sure it exists first.\n\t\t\t\t\t\tif (snappedWin) {\n\t\t\t\t\t\t\tif (win[edge] !== snappedWin[OPPOSITE_EDGE_MAP[edge]]) {\n\t\t\t\t\t\t\t\twindowBounds[win.name][edge] = snappedWin[OPPOSITE_EDGE_MAP[edge]];\n\t\t\t\t\t\t\t\tif ([\"right\", \"left\"].includes(edge)) {\n\t\t\t\t\t\t\t\t\twindowBounds[win.name].width = windowBounds[win.name].right - windowBounds[win.name].left;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\twindowBounds[win.name].height = windowBounds[win.name].bottom - windowBounds[win.name].top;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.setBoundsOfGroupWindows(group, windowBounds, triggeredByAutoArrange);\n\t\treturn windowBounds;\n\n\t}\n\n\t/**\n\t * A resize-helper that needs better documentation. I'm pretty sure this re-snaps windows during group resizes.\n\t *\n\t * @todo @deprecate at 4.0\n\t */\n\tcleanupSharedEdges_old(group, windowBounds) {\n\t\tvar groupIter = this.groupWindowIterator(group);\n\n\t\t// find everything attached to right and bottom of group mask\n\t\tlet alignRight = [],\n\t\t\talignBottom = [];\n\n\t\tfor (var win of groupIter) {\n\t\t\tvar bounds = windowBounds[win.name];\n\t\t\tif (bounds.right == this.groupMask.right) {\n\t\t\t\talignRight.push(win);\n\t\t\t}\n\t\t\tif (bounds.bottom == this.groupMask.bottom) {\n\t\t\t\talignBottom.push(win);\n\t\t\t}\n\t\t\tbounds = this.checkShortCircuitsWithEdge(bounds, \"left\");\n\t\t\tbounds = this.checkShortCircuitsWithEdge(bounds, \"top\");\n\t\t}\n\n\t\tthis.setBoundsOfGroupWindows(group, windowBounds);\n\t\tlet anchor = this.movingWindow;\n\t\tif (this.resizeObject) {\n\t\t\tanchor = group.getMoveAnchor(this.resizeObject.handle);\n\t\t}\n\t\tgroupIter = this.groupWindowIterator(group, anchor);\n\t\t// move stuff right / down\n\t\tfor (let win of groupIter) {\n\t\t\twin.snappedWindows.forEach((val) => {\n\t\t\t\tlet sWin = this.getWindow(val.name);\n\t\t\t\tvar bounds = windowBounds[win.name];\n\t\t\t\tvar snappedWindowBounds = windowBounds[sWin.name];\n\t\t\t\t//windows can be snapped but in different groups.\n\t\t\t\tif (snappedWindowBounds) {\n\t\t\t\t\tvar sharedEdges = val.edges;\n\t\t\t\t\tif (sharedEdges.right) {\n\t\t\t\t\t\tif (bounds.right !== snappedWindowBounds.left) {\n\t\t\t\t\t\t\tsnappedWindowBounds.left = bounds.right;\n\t\t\t\t\t\t\tsnappedWindowBounds.width = snappedWindowBounds.right - snappedWindowBounds.left;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sharedEdges.bottom) {\n\t\t\t\t\t\tif (bounds.bottom !== snappedWindowBounds.top) {\n\t\t\t\t\t\t\tsnappedWindowBounds.top = bounds.bottom;\n\t\t\t\t\t\t\tsnappedWindowBounds.bottom = snappedWindowBounds.height + snappedWindowBounds.top;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (sharedEdges.left) {\n\t\t\t\t\t\tif (bounds.left !== snappedWindowBounds.right) {\n\t\t\t\t\t\t\tsnappedWindowBounds.right = bounds.left;\n\t\t\t\t\t\t\tsnappedWindowBounds.width = snappedWindowBounds.right - snappedWindowBounds.left;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.setBoundsOfGroupWindows(group, windowBounds);\n\n\t\tgroupIter = this.groupWindowIterator(group, anchor);\n\t\t// resize to fit\n\t\tfor (let win of groupIter) {\n\t\t\twin.snappedWindows.forEach((val) => {\n\t\t\t\tlet sWin = this.getWindow(val.name);\n\t\t\t\tvar bounds = windowBounds[win.name];\n\t\t\t\tvar snappedWindowBounds = windowBounds[sWin.name];\n\t\t\t\tif (snappedWindowBounds) {\n\t\t\t\t\tvar sharedEdges = val.edges;\n\t\t\t\t\tif (sharedEdges.right) {\n\t\t\t\t\t\tif (snappedWindowBounds.left > bounds.right) {\n\t\t\t\t\t\t\tbounds.right = snappedWindowBounds.left;\n\t\t\t\t\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (sharedEdges.bottom) {\n\t\t\t\t\t\tif (snappedWindowBounds.top > bounds.bottom) {\n\t\t\t\t\t\t\tbounds.bottom = snappedWindowBounds.top;\n\t\t\t\t\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sharedEdges.left) {\n\t\t\t\t\t\tif (bounds.left !== snappedWindowBounds.right) {\n\t\t\t\t\t\t\tsnappedWindowBounds.right = bounds.left;\n\t\t\t\t\t\t\tsnappedWindowBounds.width = snappedWindowBounds.right - snappedWindowBounds.left;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tgroupIter = this.groupWindowIterator(group);\n\n\t\tvar maxRight = false;\n\t\tvar maxBottom = false;\n\t\tvar minLeft = false;\n\t\tvar minTop = false;\n\n\t\tfor (let win of groupIter) {\n\t\t\tlet bounds = windowBounds[win.name];\n\t\t\tif (maxRight === false || bounds.right > maxRight) {\n\t\t\t\tmaxRight = bounds.right;\n\t\t\t}\n\t\t\tif (maxBottom === false || bounds.bottom > maxBottom) {\n\t\t\t\tmaxBottom = bounds.bottom;\n\t\t\t}\n\t\t\tif (minLeft === false || bounds.left < minLeft) {\n\t\t\t\tminLeft = bounds.left;\n\t\t\t}\n\t\t\tif (minTop === false || bounds.top < minTop) {\n\t\t\t\tminTop = bounds.top;\n\t\t\t}\n\n\t\t}\n\n\t\tgroupIter = this.groupWindowIterator(group);\n\n\t\tfor (let win of groupIter) {\n\t\t\tlet bounds = windowBounds[win.name];\n\t\t\tif (win.onGroupEdge && win.onGroupEdge.right && maxRight > bounds.right) {\n\t\t\t\tbounds.right = maxRight;\n\t\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\t}\n\n\t\t\tif (win.onGroupEdge && win.onGroupEdge.bottom && maxBottom > bounds.bottom) {\n\t\t\t\tbounds.bottom = maxBottom;\n\t\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\t}\n\n\t\t\tif (win.onGroupEdge && win.onGroupEdge.left && minLeft < bounds.left) {\n\t\t\t\tbounds.left = minLeft;\n\t\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\t}\n\n\t\t\tif (win.onGroupEdge && win.onGroupEdge.top && minTop < bounds.top) {\n\t\t\t\tbounds.top = minTop;\n\t\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\t}\n\t\t}\n\t\treturn windowBounds;\n\t}\n\n\t/**\n\t * Run after everything, it removes any gaps that might have occurred (e.g., from fractional pixels, rounding, etc). It needs better inline documentation.\n\t */\n\tcleanupGaps(group, windowBounds) {\n\t\tvar groupIter = this.groupWindowIterator(group);\n\n\t\tvar xs = [];\n\t\tvar ys = [];\n\t\tfor (var win of groupIter) {\n\t\t\tvar bounds = windowBounds[win.name];\n\t\t\t//if (!xs.length) xs.push(bounds.left);\n\t\t\tlet found = false;\n\t\t\tfor (let i = 0, len = xs.length; i < len; i++) {\n\t\t\t\tvar x = xs[i];\n\t\t\t\tif (Math.abs(bounds.left - x) < 5) {\n\t\t\t\t\tbounds.left = x;\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) { xs.push(bounds.left); }\n\n\t\t\tfound = false;\n\t\t\tfor (let i = 0, len = xs.length; i < len; i++) {\n\t\t\t\tvar x = xs[i];\n\t\t\t\tif (Math.abs(bounds.right - x) < 5) {\n\t\t\t\t\tbounds.right = x;\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) { xs.push(bounds.right); }\n\n\t\t\tbounds.width = bounds.right - bounds.left;\n\n\t\t\t//if (!ys.length) ys.push(bounds.top);\n\t\t\tfound = false;\n\t\t\tfor (let i = 0, len = ys.length; i < len; i++) {\n\t\t\t\tvar y = ys[i];\n\t\t\t\tif (Math.abs(bounds.top - y) < 5) {\n\t\t\t\t\tbounds.top = y;\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) { ys.push(bounds.top); }\n\n\t\t\tfound = false;\n\t\t\tfor (let i = 0, len = ys.length; i < len; i++) {\n\t\t\t\tvar y = ys[i];\n\t\t\t\tif (Math.abs(bounds.bottom - y) < 5) {\n\t\t\t\t\tbounds.bottom = y;\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) { ys.push(bounds.bottom); }\n\n\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\t//win.setBounds(bounds)\n\t\t}\n\n\t\treturn windowBounds;\n\t}\n\n\tshouldShortCircuit(request) {\n\t\tlet shouldShortCircuit = {\n\t\t\twidth: false,\n\t\t\theight: false\n\t\t};\n\t\tlet win = this.getWindow(request.name);\n\t\tif (win) {\n\t\t\tif (request.width <= win.limits.minWidth || request.width >= win.limits.maxWidth) {\n\t\t\t\tshouldShortCircuit.width = true;\n\t\t\t}\n\t\t\tif (request.height <= win.limits.minHeight || request.height >= win.limits.maxHeight) {\n\t\t\t\tshouldShortCircuit.height = true;\n\t\t\t\tif (debug) {\n\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"short circuiting height because of\", request.name, request.height);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn shouldShortCircuit;\n\t}\n\t/**\n\t * Resizes a window or group of windows on the interior of a group\n\t * @param {moveRequest} moveRequest\n\t */\n\tresizeInteriorWindow(moveRequest) {\n\t\tvar shortCircuits = this.shouldShortCircuit(moveRequest);\n\t\tvar resizeHandle = this.resizeObject.correctedHandle;\n\t\t//Hole filling algorithm for tiling calls this method. It passes in the resize handle. It'll never be a corner. No need for the resizeObject here.\n\t\tif (moveRequest.forceResizeHandle) {\n\t\t\tresizeHandle = moveRequest.resizeHandle;\n\t\t}\n\n\t\tvar self = this;\n\t\tif (!resizeHandle) { return; }\n\n\t\tvar movements = {};\n\t\tvar snappableWindows = this.getSnappableWindows(moveRequest);\n\t\tvar modifiedRequest = clone(moveRequest, Logger.system.error);\n\t\tvar splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\n\t\tvar snappedWindowNames = [];\n\t\tfor (let i = 0, len = this.movingWindow.snappedWindows.length; i < len; i++) {\n\t\t\tlet snapObj = this.movingWindow.snappedWindows[i];\n\t\t\tfor (var h = 0, handleLen = splitHandle.length; h < handleLen; h++) {\n\t\t\t\tlet handle = splitHandle[h];\n\t\t\t\tif (snapObj.edges[handle] || snapObj.corners[resizeHandle]) {\n\t\t\t\t\tsnappedWindowNames.push(snapObj.name);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//will snap the window to other windows before going and modifying the rest of it\n\t\tfor (let i = 0, len = snappableWindows.length; i < len; i++) {\n\n\t\t\tif (snappedWindowNames.includes(snappableWindows[i]) || snappableWindows[i] === this.movingWindow.name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (groupBlacklist.includes(snappableWindows[i])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet win = this.getWindow(snappableWindows[i]);\n\n\t\t\tthis.setStationaryWindow(win);\n\t\t\tmodifiedRequest.movingRegion = resizeHandle;\n\t\t\tvar shouldContinue = false;\n\t\t\tfor (let h = 0, handleLen = splitHandle.length; h < handleLen; h++) {\n\t\t\t\tvar handle = splitHandle[h];\n\t\t\t\tif (modifiedRequest[handle] === moveRequest[handle]) {\n\t\t\t\t\tshouldContinue = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmodifiedRequest = this.snapWindow(modifiedRequest);\n\n\t\t\tif (shouldContinue) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmodifiedRequest.snappingRegions = BoxMath.getSnappingRegions(modifiedRequest, this.bufferSize);\n\n\t\t\tmodifiedRequest.windowBoundingBox = BoxMath.getWindowBoundingBox(modifiedRequest);\n\t\t\tbreak;\n\t\t}\n\t\tmoveRequest = modifiedRequest;\n\t\tmovements[moveRequest.name] = moveRequest;\n\n\t\tvar movingWindowSnappedWindows = [];\n\t\tvar terds = [];\n\n\t\tfunction recurse(snappedWindows, handle, originalHandle) {\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[handle];\n\t\t\tfor (let i = 0, len = snappedWindows.length; i < len; i++) {\n\t\t\t\tlet snapObj = snappedWindows[i];\n\n\t\t\t\tlet snappedWindow = self.getWindow(snapObj.name);\n\t\t\t\tif (!terds.includes(snapObj.name + oppEdge)) {\n\t\t\t\t\tterds.push(snapObj.name + oppEdge);\n\t\t\t\t\tmovingWindowSnappedWindows.push({\n\t\t\t\t\t\tname: snapObj.name,\n\t\t\t\t\t\tedge: oppEdge,\n\t\t\t\t\t\thandle: originalHandle\n\t\t\t\t\t});\n\t\t\t\t\tvar a = recurse(self.getWindowsOnEdge(snappedWindow, oppEdge), oppEdge, originalHandle);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tfunction recurseCorner(cornerWindows, handle, originalHandle) {\n\n\t\t\tfor (let i = 0, len = cornerWindows.length; i < len; i++) {\n\n\t\t\t\tlet snapObj = cornerWindows[i];\n\n\t\t\t\tlet snappedWindow = self.getWindow(snapObj.name);\n\t\t\t\tif (snapObj.corner && !terds.includes(snapObj.name + snapObj.corner)) {\n\t\t\t\t\tvar splitHandle = snapObj.corner.split(/(?=[A-Z])/).map(function (s) {\n\t\t\t\t\t\treturn s.toLowerCase();\n\t\t\t\t\t});\n\t\t\t\t\tsplitHandle.forEach((handle) => {\n\t\t\t\t\t\t//if splitHandle == bottomLeft and the originalHandle is bottom, we don't want to do anything with the Left edge. The algorithm will run through this function twice.\n\t\t\t\t\t\tvar doStuff = handle === originalHandle || handle === OPPOSITE_EDGE_MAP[originalHandle];\n\t\t\t\t\t\tif (doStuff && !terds.includes(snapObj.name + handle)) {\n\t\t\t\t\t\t\tmovingWindowSnappedWindows.push({\n\t\t\t\t\t\t\t\tname: snapObj.name,\n\t\t\t\t\t\t\t\tedge: handle,\n\t\t\t\t\t\t\t\thandle: originalHandle\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tvar a = recurse(self.getWindowsOnEdge(snappedWindow, handle), handle, originalHandle);\n\t\t\t\t\t\t\tterds.push(snapObj.name + handle);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\t// recurseCorner(snappedWindow, snapObj.corner);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tvar movingCorner = CORNERS.includes(resizeHandle);\n\t\tif (movingCorner) {\n\t\t\tvar cornerPoint = self.movingWindow.getPointByVertex(resizeHandle);\n\t\t\tvar cornerWindows = self.getWindowsAtPoint(cornerPoint).map((val, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: val,\n\t\t\t\t\tcorner: self.getWindow(val).getVertexByPoint(cornerPoint),\n\t\t\t\t\tedge: self.getWindow(val).getEdgeByPoint(cornerPoint)\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tsplitHandle.forEach((handle) => {\n\t\t\t\tvar b = recurseCorner(cornerWindows, resizeHandle, handle);\n\t\t\t});\n\t\t} else {\n\t\t\tvar clonedSnaps = self.getWindowsOnEdge(self.movingWindow, resizeHandle);\n\t\t\tvar b = recurse(clonedSnaps, resizeHandle, resizeHandle);\n\t\t}\n\n\t\tfor (let i = 0, len = movingWindowSnappedWindows.length; i < len; i++) {\n\t\t\tlet snapObj = movingWindowSnappedWindows[i];\n\t\t\tvar snappedWindow = self.getWindow(snapObj.name);\n\t\t\tlet newBounds = movements[snapObj.name] ? movements[snapObj.name] : snappedWindow.getBounds();\n\t\t\tnewBounds.name = snapObj.name;\n\t\t\tnewBounds[snapObj.edge] = moveRequest[snapObj.handle];\n\n\t\t\tnewBounds.width = newBounds.right - newBounds.left;\n\t\t\tnewBounds.height = newBounds.bottom - newBounds.top;\n\n\t\t\tif (newBounds.width <= snappedWindow.limits.minWidth || newBounds.width >= snappedWindow.limits.maxWidth) {\n\t\t\t\tshortCircuits.width = true;\n\t\t\t}\n\n\t\t\tif (newBounds.height <= snappedWindow.limits.minHeight || newBounds.width >= snappedWindow.limits.maxHeight) {\n\t\t\t\tshortCircuits.height = true;\n\t\t\t\tif (debug) {\n\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"short circuiting height because of\", newBounds.name, newBounds.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnewBounds = self.checkShortCircuits(newBounds, snappedWindow);\n\t\t\tmovements[newBounds.name] = newBounds;\n\n\t\t}\n\t\tfor (var windowName in movements) {\n\t\t\tif (groupBlacklist.includes(windowName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar movement = movements[windowName];\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\tif (shortCircuits.width) {\n\t\t\t\tmovement.width = win.width;\n\t\t\t\tmovement.left = win.left;\n\t\t\t\tmovement.right = win.right;\n\t\t\t}\n\t\t\tif (shortCircuits.height) {\n\n\t\t\t\tmovement.height = win.height;\n\t\t\t\tmovement.top = win.top;\n\t\t\t\tmovement.bottom = win.bottom;\n\t\t\t}\n\n\t\t\tthis.moveWindow(movement);\n\t\t}\n\n\t}\n\n\t/**\n\t * function for debugging a 3x3 grid.\n\t*/\n\tlogger() {\n\t\tvar boundingBoxes = {};\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tboundingBoxes[windowName] = JSON.stringify(win.windowBoundingBox);\n\t\t}\n\t\tvar box = \"\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|   \" + boundingBoxes[\"A\"] + \"          |    \" + boundingBoxes[\"B\"] + \"         |   \" + boundingBoxes[\"C\"] + \"         |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|   \" + boundingBoxes[\"D\"] + \"          |    \" + boundingBoxes[\"E\"] + \"         |   \" + boundingBoxes[\"F\"] + \"         |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|   \" + boundingBoxes[\"G\"] + \"          |    \" + boundingBoxes[\"H\"] + \"         |   \" + boundingBoxes[\"I\"] + \"         |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tglobal.Logger.system.verbose(box);\n\t}\n\n\t/**\n\t\t* Helper to determine whether a moveRequest will affect a window, the group, or just a local collection of windows that are snapped to the movingWindow.\n\t\t*/\n\tshouldScaleGroup(moveRequest) {\n\t\tif (this.groupMode.requireRectangularityForGroupResize) {\n\t\t\treturn this.shouldMoveAffectGroup(moveRequest);\n\t\t}\n\n\t\tif (!this.groupMode.enabled) {\n\t\t\treturn false;\n\t\t}\n\t\tvar win = this.getWindow(moveRequest.name);\n\n\t\tif (!win || !win.groupNames.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar group = this.getMovingGroup(moveRequest);\n\t\tlet req = new DockableBox(moveRequest);\n\n\t\t//if the handle that's being dragged is on an exterior edge of a group resizing all.\n\t\t//This used to be derived from the window because it was only calculated on mouseDown. Now that it can be calculated at any time, we need to derive the handle from the request that's coming in. On group resizes, window bounds are only modified on mouse up.\n\t\tlet resizeHandle = req.getResizeHandle(moveRequest);\n\n\t\tif (moveRequest.changeType !== 0 && CORNERS.includes(resizeHandle)) {\n\t\t\tvar cornerPoint = win.getPointByVertex(resizeHandle);\n\t\t\tlet cornersThatCauseScaling = group.getCornersThatCauseScaling();\n\t\t\tlet shouldScale = cornersThatCauseScaling.some((corner) => {\n\t\t\t\treturn corner.x === cornerPoint.x && corner.y === cornerPoint.y;\n\t\t\t});\n\t\t\treturn shouldScale;\n\t\t}\n\t\treturn false;\n\n\t}\n\t/**\n\t * Helper to determine whether a moveRequest will affect a window, the group, or just a local collection of windows that are snapped to the movingWindow.\n\t */\n\tshouldMoveAffectGroup(moveRequest) {\n\t\tif (!this.groupMode.enabled) {\n\t\t\treturn false;\n\t\t}\n\t\tvar win = this.getWindow(moveRequest.name);\n\n\t\tif (!win || !win.groupNames.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar group = this.getMovingGroup(moveRequest);\n\t\tif (!group.isARectangle()) {\n\t\t\treturn false;\n\t\t}\n\n\t\t//if the handle that's being dragged is on an exterior edge of a group resizing all.\n\t\tvar resizeHandle = this.resizeObject.correctedHandle || win.getResizeHandle(moveRequest);\n\n\t\tvar edges = [\"top\", \"left\", \"right\", \"bottom\"];\n\t\tif (moveRequest.changeType !== 0 && CORNERS.includes(resizeHandle)) {\n\t\t\tvar cornerPoint = win.getPointByVertex(resizeHandle);\n\t\t\treturn group.pointIsOnBoundingBox(cornerPoint);\n\t\t}\n\n\t\tif (moveRequest.changeType !== 0) {\n\t\t\treturn win[resizeHandle] === group[resizeHandle];\n\t\t}\n\t\t//never used, but could be used if you wanted to only allow exterior windows the ability to move the group.\n\t\tfor (var i = 0, len = edges.length; i < len; i++) {\n\t\t\tvar edge = edges[i];\n\t\t\tif (win[edge] === group[edge]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\n\t/**\n\t * Should use this. Computes the difference between two boundsObjects.\n\t * @param {moveRequest} newBounds\n\t * @param {moveRequest} old\n\t */\n\tgetBoundsDelta(newBounds, old) {\n\t\tvar boundsDelta = {};\n\t\tvar widthDelta = newBounds.width - old.width;\n\n\t\tvar heightDelta = newBounds.height - old.height;\n\n\t\tboundsDelta.width = widthDelta;\n\t\tboundsDelta.height = heightDelta;\n\t\tboundsDelta.top = Math.abs(newBounds.top - old.top);\n\t\tboundsDelta.left = Math.abs(newBounds.left - old.left);\n\t\tif (newBounds.top < old.top) {\n\t\t\tboundsDelta.top = -boundsDelta.top;\n\t\t}\n\t\tif (newBounds.left < old.left) {\n\t\t\tboundsDelta.left = -boundsDelta.left;\n\t\t}\n\n\t\treturn boundsDelta;\n\t}\n\n\t/**\n\t* Will move a group of windows.\n\t* @param  {moveRequest} moveRequest\n\t* @param  {function} cb\n\t*/\n\thandleGroupMove(moveRequest, cb) {\n\t\tconst invokeCallback = function () {\n\t\t\tcb({ finished: true });\n\t\t};\n\n\t\tlet self = this;\n\t\tlet group = this.getMovableGroup(moveRequest.name);\n\t\tif (typeof moveRequest.anchor === \"undefined\") {\n\t\t\tlet movingDirection = this.getMovingDirection(moveRequest, this.movingWindow);\n\t\t\tmoveRequest.anchor = group.getMoveAnchor(movingDirection);\n\t\t\tif (moveRequest.anchor === \"NotMoving\") {\n\t\t\t\treturn invokeCallback();\n\t\t\t}\n\t\t}\n\t\tlet updateGroupWindowsByDelta = function (delta, moveWindows, cb) {\n\t\t\t// console.log(\"updateGroupWindowsByDelta\", delta);\n\t\t\tvar groupIter = self.groupWindowIterator(group, moveRequest.anchor);\n\t\t\t//don't need to add anything if the delta is 0.\n\t\t\tvar modifyBounds = delta.x || delta.y;\n\t\t\tfor (let win of groupIter) {\n\t\t\t\tlet bounds = win.getBounds();\n\t\t\t\tif (modifyBounds) {\n\t\t\t\t\tvar newLeft = win.left + delta.x;\n\t\t\t\t\tvar newTop = win.top + delta.y;\n\t\t\t\t\tbounds.left = newLeft;\n\t\t\t\t\tbounds.top = newTop;\n\t\t\t\t\tbounds.bottom = newTop + bounds.height;\n\t\t\t\t\tbounds.right = newLeft + bounds.width;\n\t\t\t\t\tbounds.name = win.name;\n\t\t\t\t}\n\t\t\t\t//don't want wrappers saving here..\n\t\t\t\tbounds.persistBounds = false;\n\t\t\t\tif (moveWindows) {\n\t\t\t\t\t//I'm breaking my own rule by calling setBounds directly. Sadly, isJiggling was being triggered (I think...didn't really investigate), and the window wasn't moving with small adjustments. Set bounds fixes that.\n\t\t\t\t\tif (debug) {\n\t\t\t\t\t\tLogger.system.verbose(\"Docking: setBounds\", win.name);\n\t\t\t\t\t}\n\t\t\t\t\twin.setBounds(bounds);\n\t\t\t\t} else {\n\t\t\t\t\twin.setInternalBounds(bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgroup.updateBounds();\n\t\t\tif (cb) {\n\t\t\t\tcb();\n\t\t\t}\n\t\t};\n\n\t\tlet delta = self.getMoveDelta(moveRequest);\n\t\t//processSnaps was added for moving groups out of claimed space. When you snapped a window to a movable group, the movable group would snap to the top of the other window rather than being dumped below the claimed space. Basically the first request would shift it down 40px, but then it'd snap to the top of the other window. When we move windows out of claimed space, processSnaps is false.\n\t\tif (ALLOW_GROUPS_TO_SNAP) {\n\t\t\t//make the group get its new bounds, but don't move the windows until the snap calculation is finished.\n\t\t\tupdateGroupWindowsByDelta(delta, false);\n\t\t\tlet preSnapBounds = group.getBounds();\n\t\t\tlet mr = group.getBounds();\n\t\t\tmr.name = moveRequest.name;\n\t\t\tmr.mousePosition = moveRequest.mousePosition;\n\t\t\tlet groupMoveRequest = this.setMoveRequest(mr);\n\t\t\tgroupMoveRequest.changeType = 0;\n\t\t\tthis.checkBuffers(groupMoveRequest, function (modifiedRequest) {\n\t\t\t\tif (modifiedRequest.finished) {\n\t\t\t\t\tvar delta = self.getMoveDelta(modifiedRequest, preSnapBounds);\n\t\t\t\t\tupdateGroupWindowsByDelta(delta, true, invokeCallback);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tupdateGroupWindowsByDelta(delta, true, invokeCallback);\n\t\t}\n\t}\n\n\t/**\n\t* Calculates the % change that a moveRequest inflicts on a group of windows.\n\t* @param  {moveRequest} moveRequest\n\t* @return {type}\n\t*/\n\tgetGroupDelta(groupName, moveRequest) {\n\t\tvar group = this.getGroup(groupName);\n\t\tvar win = this.getWindow(moveRequest.name);\n\t\tvar widthDelta = moveRequest.width - win.width;\n\t\tvar heightDelta = moveRequest.height - win.height;\n\n\t\tvar delta = {\n\t\t\theight: BoxMath.getPercentChange(group.height, group.height + heightDelta),\n\t\t\twidth: BoxMath.getPercentChange(group.width, group.width + widthDelta)\n\t\t};\n\t\treturn delta;\n\t}\n\n\t/**\n\t * Creates the resizeObject. Put anything here that should be cached onMouseDown. Will be cleared onMouseUp.\n\t * @param {moveRequest} moveRequest\n\t * @return {resizeObject}\n\t */\n\tconstructResizeObject(moveRequest) {\n\t\tvar win = this.getWindow(moveRequest.name);\n\t\tlet req = new DockableBox(moveRequest);\n\n\t\t//if the handle that's being dragged is on an exterior edge of a group resizing all.\n\t\tvar resizeObject = {\n\t\t\t//This used to be derived from the window because it was only calculated on mouseDown. Now that it can be calculated at any time, we need to derive the handle from the request that's coming in. On group resizes, window bounds are only modified on mouse up.\n\t\t\thandle: req.getResizeHandle(moveRequest),\n\t\t\ttype: \"edge\",\n\t\t\tscalingGroup: moveRequest.changeType !== 0 ? this.shouldScaleGroup(moveRequest) : false\n\t\t};\n\n\t\tresizeObject.correctedHandle = resizeObject.handle;\n\t\tif (CORNERS.includes(resizeObject.handle)) {\n\t\t\tresizeObject.type = \"corner\";\n\t\t\tif (resizeObject.scalingGroup) {\n\t\t\t\tresizeObject = this.correctResizeObject(win, resizeObject);\n\t\t\t}\n\t\t}\n\n\t\tresizeObject.movingEdges = this.getMovingEdgesFromResizeHandle(resizeObject.correctedHandle);\n\t\twin.resizeHandle = resizeObject.correctedHandle;\n\n\t\treturn resizeObject;\n\t}\n\n\t/**\n\t * If a corner of a window is on the edge of the group, but it's not an actual corner, we need to treat that as an edge resize. See inline documentation for more. This is basically correcting errant resize-handles.\n\t * @note this behavior is locked behind `requireRectangularityForGroupResize`. Without that flag turned on, there's no need to change the resize handle.\n\t */\n\tcorrectResizeObject(win, resizeObject, force) {\n\t\t//If we don't require rectangularity, we don't need to  change the resize handle.\n\t\tif (this.groupMode.requireRectangularityForGroupResize && CORNERS.includes(resizeObject.handle)) {\n\t\t\tlet group = this.movingGroup;\n\t\t\tlet cornerPoint = win.getPointByVertex(resizeObject.handle);\n\t\t\tlet groupEdge = group.getEdgeByPoint(cornerPoint);\n\t\t\tif (group.pointIsOnBoundingBox(cornerPoint, false)) {\n\t\t\t\tlet splitHandle = resizeObject.handle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\t\t\treturn s.toLowerCase();\n\t\t\t\t});\n\n\t\t\t\tif (this.moveRequest) {\n\t\t\t\t\t//E.g., 'bottomRight'. Takes and resets the bottom to whatever it was before the user started moving. So even if I grab the bottom right corner and drag it down, the window's bottom edge will not shift.\n\t\t\t\t\tthis.moveRequest[splitHandle[0]] = this.movingWindow[splitHandle[0]];\n\t\t\t\t\tthis.moveRequest.height = this.moveRequest.bottom - this.moveRequest.top;\n\t\t\t\t\tthis.moveRequest.width = this.moveRequest.right - this.moveRequest.left;\n\t\t\t\t}\n\t\t\t\tresizeObject.type = \"edge\";\n\t\t\t\t//e.g., bottomRight; this will just choose 'right'. This happens when you grab the corner of a window that's also on the edge of the window...but isn't the corner of the group.\n\n\t\t\t\tresizeObject.correctedHandle = groupEdge;\n\t\t\t}\n\t\t}\n\n\t\treturn resizeObject;\n\t}\n\n\t/**\n\t* Resizes a window based on some delta.\n\t* @param  {dockableWindow} win\n\t* @param  {Object} delta Object with a width/height change.\n\t* @return {type}\n\t*/\n\tresizeByDelta(win, delta) {\n\t\tvar bounds = win.getBounds();\n\t\tbounds.width = BoxMath.scaleProportionately(win.width, delta.width);\n\t\tbounds.height = BoxMath.scaleProportionately(win.height, delta.height);\n\t\tif (win.resizeHandle.toLowerCase().includes(\"right\")) {\n\t\t\tbounds.right = bounds.left + bounds.width;\n\t\t}\n\t\tif (win.resizeHandle.toLowerCase().includes(\"bottom\")) {\n\n\t\t\tbounds.bottom = bounds.top + bounds.height;\n\t\t}\n\n\t\tif (win.resizeHandle.toLowerCase().includes(\"top\")) {\n\n\t\t\tbounds.top = bounds.bottom - bounds.height;\n\t\t}\n\n\t\tif (win.resizeHandle.toLowerCase().includes(\"left\")) {\n\n\t\t\tbounds.left = bounds.right - bounds.width;\n\t\t}\n\t\treturn bounds;\n\t}\n\n\tgetMovingDirection(bounds, win) {\n\t\tif (!win) {\n\t\t\twin = this.getWindow(bounds.name);\n\t\t}\n\t\tlet direction = \"\";\n\t\tif (win.left > bounds.left) {\n\t\t\tdirection = \"Left\";\n\t\t}\n\t\tif (win.left < bounds.left) {\n\t\t\tdirection += \"Right\";\n\t\t}\n\t\tif (win.top > bounds.top) {\n\t\t\tdirection += \"Top\";\n\t\t}\n\t\tif (win.top < bounds.top) {\n\t\t\tdirection += \"Bottom\";\n\t\t}\n\t\treturn direction;\n\t}\n\n\t/**\n\t* Does the dirty work of actually moving windows.\n\t* @todo, shortCircuit moves that try to squash windows beyond a minimum width/height.\n\t* @param  {moveRequest} bounds\n\t* @param  {function} callback\n\t*/\n\tmoveWindow(bounds, callback) {\n\t\t//if window resize causes ANY window to be smaller than the minimum_width, quit that shit.\n\t\tif (!bounds) {\n\t\t\tif (callback) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!callback) {\n\t\t\tcallback = function noop() { };\n\t\t}\n\t\tvar win = this.getWindow(bounds.name);\n\t\tif (win) {\n\t\t\tbounds.persistBounds = false;\n\t\t\twin.setBounds(bounds, callback, setBoundsErrorCB);\n\t\t}\n\t}\n\n\n\t/**\n\t* Checks to see whether a window can be snapped to other windows/monitors.\n\t* @param  {moveRequest} bounds\n\t* @param  {function} callback\n\t */\n\tcheckBuffers(moveRequest, cb) {\n\t\tif (this.movingWindow && this.movingWindow.ignoreSnappingRequests) {\n\t\t\tmoveRequest.ignoreSnappingRequests = true;\n\t\t}\n\t\tvar snappableWindows = this.getSnappableWindows(moveRequest);\n\t\tvar snappableMonitors = this.getSnappableMonitors(moveRequest);\n\n\t\t//When a window is moved (ends up inside checkBuffers) and it is docked, we can safely assume the window is being undocked (why else would you move a window that takes up the width of the window (or height)?). Here, we set the new bounds of the move request and call to undock the window, which will propagate to all the necessary items changing (the window will shrink, undock, etc).\n\t\tlet dockableWin = this.movingWindow;\n\t\tif (dockableWin.isDocked) {\n\t\t\t//if the user tries to resize a docked component, ignore it.\n\t\t\tif (moveRequest.changeType !== 0) {\n\t\t\t\tlet req = this.movingWindow.getBounds();\n\t\t\t\treq.name = this.movingWindow.name;\n\t\t\t\treq.finished = true;\n\t\t\t\tthis.hideGroupMask();\n\t\t\t\treturn cb(req);\n\t\t\t}\n\n\t\t\tif (dockableWin.dockedPosition === dockableWin.monitorDockablePositions.TOP) {\n\t\t\t\tmoveRequest.top = dockableWin.top + (this.bufferSize * 2);\n\t\t\t\tmoveRequest.bottom = moveRequest.top + dockableWin.height;\n\t\t\t} else if (dockableWin.dockedPosition === dockableWin.monitorDockablePositions.BOTTOM) {\n\t\t\t\tmoveRequest.bottom = dockableWin.bottom - (this.bufferSize * 2);\n\t\t\t\tmoveRequest.top = moveRequest.bottom - dockableWin.height;\n\t\t\t}\n\t\t\tmoveRequest.height = dockableWin.undockedPosition.height;\n\t\t\tmoveRequest.width = dockableWin.undockedPosition.width;\n\n\t\t\tlet monitor = dockableWin.monitor;\n\t\t\tif (dockableWin.dockedMonitor) {\n\t\t\t\tmoveRequest.dockedMonitor = dockableWin.dockedMonitor;\n\t\t\t\tthis.movingWindow.dockedMonitor = null;\n\t\t\t}\n\t\t\tmonitor.undockWindowFromMonitor(moveRequest);\n\t\t\tthis.hideGroupMask();\n\n\n\t\t\t//Force exit\n\t\t\tdockableWin.snappedMonitor = null;\n\t\t\tsnappableWindows = [];\n\t\t\tsnappableMonitors = [];\n\t\t}\n\n\n\n\t\t//processSnaps was added for moving groups out of claimed space. When you snapped a window to a movable group, the movable group would snap to the top of the other window rather than being dumped below the claimed space. Basically the first request would shift it down 40px, but then it'd snap to the top of the other window. When we move windows out of claimed space, processSnaps is false.\n\t\tif (moveRequest.processSnaps === false || (!snappableWindows.length && !snappableMonitors.length) && cb) {\n\t\t\tmoveRequest.finished = true;\n\t\t\tthis.hideGroupMask();\n\t\t\tcb(moveRequest);\n\t\t\treturn;\n\t\t}\n\n\t\tvar modifiedRequest;\n\n\t\tfor (let i = 0, len = snappableMonitors.length; i < len; i++) {\n\t\t\tvar monitor = monitorPool.get(snappableMonitors[i]);\n\t\t\tlet snapRequest = monitor.snapWindow(moveRequest);\n\n\t\t\tif (dockableWin.isDockableComponent) {\n\t\t\t\t//If we've made it this far we're moving a dockable component and it isn't already docked (which means we're constantly checking for whether we need to dock). Here we do calculations to determine if a 'dockable mask' should be shown.\n\t\t\t\tdockableWin.snappedMonitor = monitor;\n\t\t\t\tlet clonedRequest = clone(snapRequest, Logger.system.error);\n\t\t\t\tsnapRequest.dockedMonitor = monitor.name;\n\t\t\t\tlet maskBounds = monitor.getSnappedEdge(clonedRequest);\n\t\t\t\tlet newBounds = monitor.getDockedPosition(maskBounds, clonedRequest);\n\t\t\t\tif (newBounds) {\n\t\t\t\t\tthis.showGroupMask({ bounds: newBounds });\n\t\t\t\t}\n\t\t\t\tsnappableWindows = []; //Force exit if window docks to monitor\n\t\t\t}\n\t\t\tif (snapRequest) {\n\t\t\t\tmoveRequest = snapRequest;\n\t\t\t}\n\n\t\t\tif (i === snappableMonitors.length - 1 && snappableWindows.length === 0) {\n\t\t\t\tmoveRequest.finished = true;\n\t\t\t\tcb(moveRequest);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0, len = snappableWindows.length; i < len; i++) {\n\t\t\tvar win = this.getWindow(snappableWindows[i]);\n\t\t\tthis.setStationaryWindow(win);\n\t\t\twin.setOpacity({ opacity: SNAPPING_OPACITY });\n\t\t\tmodifiedRequest = this.snapWindow(moveRequest);\n\t\t\t//The original request has been changed because of a snap to a straddler window. replace the reference so new comparisons are made against the newly snapped window.\n\t\t\tmoveRequest = modifiedRequest;\n\n\t\t\tmoveRequest.windowBoundingBox = BoxMath.getWindowBoundingBox(moveRequest);\n\t\t\tif (i === snappableWindows.length - 1) {\n\t\t\t\tmodifiedRequest.finished = true;\n\t\t\t}\n\n\t\t\tcb(modifiedRequest);\n\t\t}\n\t}\n\n\t/**\n\t* Spins through windows and fixes opacity. For onMouseMove, we skip any windows that could be snapped to the movingWindow. onMouseUp, everything gets hit.\n\t* @todo, see if I can keep a list of windows that are set to 0.5. I don't need to loop through all windows here. Only the ones that aren't set to 1.\n\t* @param  {object} params\n\t* @param  {object} params.checkForSnappability\n\t*/\n\tfixWindowOpacity(params) {\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tif (params.checkForSnappability) {\n\t\t\t\tif (win.canSnapToWindow(this.moveRequest)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparams.opacity = 1;\n\t\t\twin.setOpacity(params);\n\t\t}\n\t}\n\n\t/**\n\t * Happens when config is loaded from the configClient.\n\t */\n\tsetGlobalMinimums(serviceConfig) {\n\t\tMINIMUM_HEIGHT = serviceConfig.MINIMUM_HEIGHT;\n\t\tMINIMUM_WIDTH = serviceConfig.MINIMUM_WIDTH;\n\t\t//@todo, set minimums on all windows.\n\t\tthis.MINIMUM_HEIGHT = serviceConfig.MINIMUM_HEIGHT;\n\t\tthis.MINIMUM_WIDTH = serviceConfig.MINIMUM_WIDTH;\n\t\tlet groups = this.getGroupNames();\n\n\t\tgroups.forEach(name => {\n\t\t\tlet group = this.getGroup(name);\n\t\t\tgroup.setMinimums(serviceConfig);\n\t\t});\n\t}\n\n\t/****************************************\n\t *\t\t\tCalculators - general\t\t*\n\t****************************************/\n\t/**\n\t* Given an object, will set boundingboxes on it. If it's a dockableWindow, it'll let the window set itself up.\n\t* @param  {dockableWindow} win\n\t* @return {type}\n\t*/\n\tsetBoundingBoxes(win) {\n\n\t\tif (win.setBoundingBoxes) {\n\t\t\twin.setBoundingBoxes();\n\t\t} else {\n\t\t\twin.buffer = this.getBuffer(win);\n\t\t\twin.snappingRegions = BoxMath.getSnappingRegions(win, this.bufferSize);\n\t\t\twin.windowBoundingBox = BoxMath.getWindowBoundingBox(win);\n\t\t\twin.innerBuffer = this.getInnerBoundingBox(win);\n\t\t}\n\t\treturn win;\n\t}\n\n\t/**\n\t * Returns the difference between the movingWindow's location and the requested movement.\n\t* @param  {moveRequest} moveRequest\n\t* @return {type}\n\t*/\n\tgetMoveDelta(moveRequest, oldBounds) {\n\t\tvar movingWin = oldBounds || this.getWindow(moveRequest.name);\n\t\tvar delta = {\n\t\t\tx: moveRequest.left - movingWin.left,\n\t\t\ty: moveRequest.top - movingWin.top\n\t\t};\n\t\treturn delta;\n\t}\n\n\t/**\n\t* Returns the inner bounds. We use this to give the windows some internal stickiness.\n\t* @param  {type} bounds\n\t* @return {object}\n\t*/\n\tgetInnerBoundingBox(bounds) {\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: bounds.left + this.bufferSize,\n\t\t\t\ty: bounds.top + this.bufferSize\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: bounds.right - this.bufferSize,\n\t\t\t\ty: bounds.bottom - this.bufferSize\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t* Gets the snapping buffer of a request.\n\t* @param  {type} request\n\t* @return {type}\n\t*/\n\tgetBuffer(request) {\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: request.left - this.bufferSize,\n\t\t\t\ty: request.top - this.bufferSize\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: request.right + this.bufferSize,\n\t\t\t\ty: request.bottom + this.bufferSize\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t* Given a request, a window, and a region, it'll tell you whether they intersect. We use this to figure out which corner/edge to snap to.\n\t* @param  {moveRequest} moveRequest\n\t* @param  {dockableWindow} stationaryWindow\n\t* @param  {string} stationaryRegion\n\t* @return {object}\n\t*/\n\tgetIntersections(moveRequest, stationaryWindow, stationaryRegion) {\n\n\t\tvar movingBoundingBoxes = moveRequest.snappingRegions;\n\t\tvar stationaryBoundingBoxes = stationaryWindow.snappingRegions;\n\t\tvar intersections = [];\n\t\tfor (var movingRegion in movingBoundingBoxes) {\n\n\t\t\tif (movingRegion === \"inner\") { continue; }\n\t\t\tif (BoxMath.intersectBoundingBoxes(stationaryBoundingBoxes[stationaryRegion], movingBoundingBoxes[movingRegion])) {\n\t\t\t\tintersections.push(movingRegion);\n\t\t\t}\n\t\t}\n\t\treturn intersections;\n\t}\n\n\t/****************************************\n\t *\t\t\t\tIterators\t\t\t\t*\n\t****************************************/\n\t* groupWindowIterator(group, orderAnchor = this.movingWindow) { //TODO: move this into group so you can do group.windowIterator (also will help cleanup group.scale)\n\t\tlet windows = this.orderWindows(group.windows, orderAnchor);\n\t\t//preserves order..for .. in does not.\n\t\tfor (let i = 0; i < windows.length; i++) {\n\t\t\tyield windows[i];\n\t\t}\n\t}\n\n\tsetRouterClient(client) {\n\t\tthis.routerClient = client;\n\t}\n}\nexport default DockingCalculator;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockingCalculator.js","// Wanted to do ES6 export but that didn't work in current WP configurations, not sure why\nmodule.exports = {\n\tmouseDown,\n\tmousePosToBounds\n};\n// The following variables refers to last known state of\n// group mask, mouse down position and the resize object.\nlet oldBounds = null;\nlet resizeObject = null;\nlet mouseDownPosition = null;\n\n/**\n * Caches the passed 3 arguments which are the old and last known group mask bounds\n * the mouse down position and the resize object.\n * @param {object} initialBounds The current group mask bounds (width, height, top, left)\n * @param {object} mousePosition The onMouseDown mouse's position (top, left)\n * @param {object} resizeObj The resize object, we need from this object the movingEdges property\n * @returns {object}\n */\nfunction mouseDown(initialBounds, mousePosition, resizeObj) {\n\toldBounds = initialBounds;\n\tmouseDownPosition = mousePosition;\n\tresizeObject = resizeObj;\n\treturn {\n\t\toldBounds,\n\t\tmouseDownPosition,\n\t\tresizeObj\n\t};\n}\n/**\n * Takes the latest mouse position top and left and calculates where and how many pixels\n * should we shift the mask and return the newly calculated bounds as an object\n * @param {object} mousePosition The moveRequest's mousePosition (top and left)\n */\nfunction mousePosToBounds(mousePosition) {\n\t// We will use the next 2 variables to decide whether we are modifying the width\n\t// or height or both\n\tconst noHorResize = !resizeObject.movingEdges.left && !resizeObject.movingEdges.right;\n\tconst noVertResize = !resizeObject.movingEdges.top && !resizeObject.movingEdges.bottom;\n\tconst topPixels = mousePosition.y - mouseDownPosition.y;\n\tconst leftPixels = mousePosition.x - mouseDownPosition.x;\n\tconst bounds = {\n\t\twidth: oldBounds.width + (noHorResize ? 0 : leftPixels),\n\t\theight: oldBounds.height + (noVertResize ? 0 : topPixels),\n\t\ttop: oldBounds.top,\n\t\tleft: oldBounds.left,\n\t\tname: \"groupMask\"\n\t};\n\t// If we are changing the top position if the mask\n\t// we know this when movingEdges.top is true\n\tif(resizeObject.movingEdges.top) {\n\t\tbounds.top = bounds.top + topPixels;\n\t\tif(mousePosition.y > mouseDownPosition.y) {\n\t\t\t// If wondering why *2, its because we initially added those\n\t\t\t// pixels above, see const bounds = {}\n\t\t\tbounds.height = bounds.height - Math.abs(topPixels * 2);\n\t\t} else {\n\t\t\tbounds.height = bounds.height + Math.abs(topPixels * 2);\n\t\t}\n\t}\n\t// If we are changing the left position of the mask\n\t// we know this when movingEdges.left is true\n\tif(resizeObject.movingEdges.left) {\n\t\tbounds.left = bounds.left + leftPixels;\n\t\tif(mousePosition.x > mouseDownPosition.x) {\n\t\t\tbounds.width = bounds.width - Math.abs(leftPixels * 2);\n\t\t} else {\n\t\t\tbounds.width = bounds.width + Math.abs(leftPixels * 2);\n\t\t}\n\t}\n\t// Return newly calculated bounds\n\treturn bounds;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/maskBoundsCalculator.js","import DockableWindow from \"../../dockableWindow\";\nimport MockMonitor from \"./mockMonitor\";\nvar dockableWindows = {};\nimport calc from \"../../dockingCalculator\";\nimport { mockLogger } from \"../../../../../common/disentangledUtils\";\nvar DockingCalculator = new calc({}, {\n\tLogger: mockLogger\n});\nvar CONSTANTS = require(\"../../constants\");\nconst MockSystem = require(\"./mockSystem\");\n// var AutoArrange = require(\"../../../MultiWindowFeatures/autoArrange\");\n\nDockingCalculator.sendAutoArrangeStatusUpdate = Function.prototype;\nfunction DockingMath() {\n\tvar self = this;\n\tself.bufferSize = 15;\n\tthis.recalculateSnaps = () => {\n\t\tDockingCalculator.recalculateSnaps();\n\t};\n\tthis.shouldMoveAffectGroup = function (req) {\n\t\treturn DockingCalculator.shouldMoveAffectGroup(req);\n\t};\n\tthis.setGroupMask = function (win) {\n\t\twin._getBounds((bounds) => {\n\t\t\tvar mask = new DockableWindow(win, bounds, {\n\t\t\t\tcalculator: DockingCalculator,\n\t\t\t\tLogger\n\t\t\t});\n\t\t\tDockingCalculator.groupMask = mask;\n\t\t});\n\t};\n\t// this.AutoArrange = new AutoArrange({\n\t// \tDockingCalculator: DockingCalculator\n\t// });\n\n\tthis.eliminateGaps = function () {\n\t\tDockingCalculator.eliminateGaps();\n\t};\n\tthis.getGroupMask = function () {\n\t\treturn DockingCalculator.getGroupMask();\n\t};\n\tthis.addGroup = (params) => {\n\t\tDockingCalculator.addGroup(params);\n\t};\n\n\tthis.addWindow = function (win) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\twin._getBounds((bounds) => {\n\t\t\t\tif (win.name.includes(\"toolbar\")) {\n\t\t\t\t\twin.canGroup = false;\n\t\t\t\t} else {\n\t\t\t\t\twin.canGroup = true;\n\t\t\t\t}\n\t\t\t\tvar dockableWindow = new DockableWindow(win, bounds, {\n\t\t\t\t\tcalculator: DockingCalculator,\n\t\t\t\t\tSystem: MockSystem,\n\t\t\t\t\tLogger: mockLogger\n\t\t\t\t});\n\t\t\t\tDockingCalculator.addWindow(win.name, dockableWindow);\n\t\t\t\tresolve(dockableWindow);\n\t\t\t});\n\t\t});\n\t};\n\n\tthis.removeWindow = function (windowName) {\n\t\tDockingCalculator.removeWindow(windowName);\n\t};\n\tthis.setAllowGroupsToSnap = function (bool) {\n\t\tDockingCalculator.setAllowGroupsToSnap(bool);\n\t};\n\tthis.removeWindowFromAllGroups = function (windowName) {\n\t\tlet win = DockingCalculator.getWindow(windowName);\n\t\tDockingCalculator.removeWindowFromAllGroups(win);\n\t};\n\tthis.requestMove = function (request) {\n\t\tDockingCalculator.requestMove(request);\n\t};\n\tthis.getDiagnostics = function () {\n\t\treturn DockingCalculator.getDiagnostics();\n\t};\n\tthis.setBufferSize = function (bufferSize) {\n\t\tDockingCalculator.setBufferSize(bufferSize);\n\t};\n\n\tthis.addMonitor = function (monitor) {\n\t\tmonitor = new MockMonitor(monitor);\n\t\tDockingCalculator.addMonitor(monitor);\n\t};\n\n\tthis.removeMonitor = function (monitor) {\n\t\tDockingCalculator.removeMonitor(monitor);\n\t};\n\n\tthis.getMonitors = function () {\n\t\treturn DockingCalculator.getMonitors();\n\t};\n\n\tthis.getMonitor = function (name) {\n\t\treturn DockingCalculator.getMonitor(name);\n\t};\n\tthis.getGroups = function () {\n\t\treturn DockingCalculator.getGroups();\n\t};\n\tthis.getGroup = function (name) {\n\t\treturn DockingCalculator.getGroup(name);\n\t};\n\tthis.removeGroup = function (name) {\n\t\treturn DockingCalculator.removeGroup(name);\n\t};\n\tthis.constituteGroups = function () {\n\t\treturn DockingCalculator.constituteGroups();\n\t};\n\tthis.groupWindows = function (params) {\n\t\tDockingCalculator.groupWindows(params);\n\t};\n\tthis.addWindowToGroup = function (params, cb) {\n\t\tDockingCalculator.addWindowToGroup(params);\n\t};\n\tthis.getGroupNames = function () {\n\t\treturn DockingCalculator.getGroupNames();\n\t};\n\tthis.setGroupMode = function (groupMode) {\n\t\tDockingCalculator.setGroupMode(groupMode);\n\t};\n\tthis.getWindow = function (name) {\n\t\treturn DockingCalculator.getWindow(name);\n\t};\n\tthis.getWindows = function () {\n\t\treturn DockingCalculator.getWindows();\n\t};\n\tthis.getWindowNames = function () {\n\t\tvar winList = DockingCalculator.getWindows();\n\t\tvar names = [];\n\t\tfor (var windowName in winList) {\n\t\t\tnames.push(windowName);\n\t\t}\n\t\treturn names;\n\t};\n\tthis.windowIsOnExteriorEdgeOfGroup = function (win, group) {\n\t\treturn DockingCalculator.windowIsOnExteriorEdgeOfGroup(win, group);\n\t};\n\tthis.scaleProportionately = function (num, pct) {\n\t\treturn DockingCalculator.scaleProportionately(num, pct);\n\t};\n\tthis.getPercentChange = function (num1, num2) {\n\t\treturn DockingCalculator.getPercentChange(num1, num2);\n\t};\n\n\tthis.setBoundingBoxes = function (req) {\n\t\treturn DockingCalculator.setBoundingBoxes(req);\n\t};\n\n\tthis.buildSnapRelationships = function (win) {\n\t\tDockingCalculator.buildSnapRelationships(win);\n\t};\n\tthis.setMovingGroup = function (grp) {\n\t\tDockingCalculator.movingGroup = grp;\n\t};\n\tthis.setMovingWindow = function (win) {\n\t\tDockingCalculator.setMovingWindow(win);\n\t};\n\tthis.getImmobileGroup = function (windowName) {\n\t\treturn DockingCalculator.getImmobileGroup(windowName);\n\t};\n\tthis.getMovableGroup = function (windowName) {\n\t\treturn DockingCalculator.getMovableGroup(windowName);\n\t};\n\tDockingCalculator.setGlobalMinimums(CONSTANTS);\n\treturn this;\n}\nDockingMath.prototype = DockingCalculator;\nmodule.exports = new DockingMath();\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/tests/mocks/mockDockingService.js","export default class MockMonitor {\n\tconstructor(bounds) {\n\t\tthis.name = bounds.name;\n\t\tthis.left = bounds.left;\n\t\tthis.top = bounds.top;\n\t\tthis.right = bounds.right;\n\t\tthis.bottom = bounds.bottom;\n\t\tthis._monitor = {\n\t\t\tavailableRect: bounds,\n\t\t\tunclaimedRect: bounds\n\t\t};\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/tests/mocks/mockMonitor.js","// passthrough to openfin. In the future we can make this the passthrough to any container.\n\nconst fin = {\n\tdesktop: {\n\t\tWindow: {},\n\t\tApplication: {},\n\t\tNotification: {},\n\t\tSystem: {\n\t\t\tgetMousePosition: (cb) => cb({})\n\t\t}\n\t}\n};\nclass SystemWindow {\n\tconstructor(params, cb) {\n\t\treturn new fin.desktop.Window(params, cb);\n\t}\n\n\tstatic get getCurrent() {\n\t\treturn fin.desktop.Window.getCurrent;\n\t}\n\n\tstatic get wrap() {\n\t\treturn fin.desktop.Window.wrap;\n\t}\n\n}\n\nclass Application {\n\tconstructor(params, cb) {\n\t\treturn new fin.desktop.Application(params, cb);\n\t}\n\n\tstatic get getCurrent() {\n\t\treturn fin.desktop.Application.getCurrent;\n\t}\n\n\tstatic get wrap() {\n\t\treturn fin.desktop.Application.wrap;\n\t}\n}\n\nclass SystemNotification {\n\tconstructor(params) {\n\t\tnew fin.desktop.Notification(params);\n\t}\n}\n\nclass System {\n\tstatic get Application() {\n\t\treturn Application;\n\t}\n\tstatic get Window() {\n\t\treturn SystemWindow;\n\t}\n\tstatic get Notification() {\n\t\treturn SystemNotification;\n\t}\n\n\tstatic getMousePosition(cb) {\n\t\tfin.desktop.System.getMousePosition((mousePosition) => {\n\t\t\tif (mousePosition.left || mousePosition.left === 0) mousePosition.x = mousePosition.left;\n\t\t\tif (mousePosition.top || mousePosition.top === 0) mousePosition.y = mousePosition.top;\n\t\t\tcb(null, mousePosition);\n\t\t}, (err) => { cb(err, null); });\n\t}\n\n\tstatic getMonitorInfo(cb) {\n\t\tfin.desktop.System.getMonitorInfo((info) => {\n\t\t\tcb(info);\n\t\t});\n\t}\n\n\t// static get makes this behave like a static variable. so calling system.ready is eqivalent to fin.desktop.main.\n\tstatic get ready() {\n\t\treturn fin.desktop.main;\n\t}\n\n\tstatic get getHostSpecs() {\n\t\treturn fin.desktop.System.getHostSpecs;\n\t}\n\n\tstatic get launchExternalProcess() {\n\t\treturn fin.desktop.System.launchExternalProcess;\n\t}\n\n\tstatic get terminateExternalProcess() {\n\t\treturn fin.desktop.System.terminateExternalProcess;\n\t}\n\n\tstatic get getAllApplications() {\n\t\treturn fin.desktop.System.getAllApplications;\n\t}\n\n\tstatic get exit() {\n\t\treturn fin.desktop.System.exit;\n\t}\n\n\tstatic get clearCache() {\n\t\treturn fin.desktop.System.clearCache;\n\t}\n\n\tstatic get showDeveloperTools() {\n\t\treturn fin.desktop.System.showDeveloperTools;\n\t}\n\n\tstatic get getRuntimeInfo() {\n\t\treturn fin.desktop.System.getRuntimeInfo || chrome.desktop.getDetails;\n\t}\n\n\tstatic get addEventListener() {\n\t\t/* events we use so far in Finsemble: monitor-info-changed, session-changed */\n\t\treturn fin.desktop.System.addEventListener;\n\t}\n\n\tstatic get getVersion() {\n\t\treturn fin.desktop.System.getVersion;\n\t}\n\n\tstatic get openUrlWithBrowser() {\n\t\treturn fin.desktop.System.openUrlWithBrowser;\n\t}\n\n\tstatic get getAllWindows() {\n\t\treturn fin.desktop.System.getAllWindows;\n\t}\n\n\tstatic FinsembleReady(cb) {\n\t\tif (FSBL && FSBL.addEventListener) {\n\t\t\treturn FSBL.addEventListener(\"onready\", cb);\n\t\t}\n\t\treturn window.addEventListener(\"FSBLready\", cb);\n\t}\n\n\t// This is not overriding or pointing to Openfin. This is the pattern used to close applications.\n\tstatic closeApplication(app, cb = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tlet t;\n\t\t\tlet timeoutCleared = false;\n\n\t\t\t// Need to terminate after closing because otherwise applications sit around in OpenFin with isRunning: false.\n\t\t\tlet terminateAndResolve = () => {\n\t\t\t\tif (timeoutCleared) return;\n\t\t\t\ttimeoutCleared = true;\n\t\t\t\tconsole.log(\"terminating \", app.uuid);\n\t\t\t\tclearTimeout(t);\n\t\t\t\tapp.terminate(() => {\n\t\t\t\t\tcb();\n\t\t\t\t\tresolve();\n\t\t\t\t}, () => {\n\t\t\t\t\tapp.terminate();\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t// Sometimes app.close() never calls back (only happens with logger). So after 2 seconds terminate.\n\t\t\tt = setTimeout(terminateAndResolve, 2000);\n\n\t\t\tconsole.log(\"closing \", app.uuid);\n\t\t\t// Try to close normally\n\t\t\tapp.close(false, terminateAndResolve, () => {\n\t\t\t\tif (timeoutCleared) return;\n\t\t\t\tclearTimeout(t);\n\t\t\t\t// If closing fails, force close\n\t\t\t\tconsole.log(\"force closing \", app.uuid);\n\t\t\t\tapp.close(true, terminateAndResolve, terminateAndResolve);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n}\n\n\nmodule.exports = System;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/tests/mocks/mockSystem.js"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChEA;;;AAGA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;;;;;ACvvvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjzJA;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;;;AAGA;;AAkBA;AACA;AACA;AACA;;;;;AAKA;AAEA;;;AAGA;AACA;AACA;AAEA;;;;;;;;ACtCA;AAAA;AAAA;;;;AAIA;AACA;AACA;;;;;;AAMA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC5JA;;;AAGA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAIA;;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;AAeA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;AC5LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;;;;;;AAMA;AACA;AACA;AAIA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5BA;AACA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AAdA;AAgBA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC58BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxqKA;;;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;AA6BA;AA5BA;AACA;AAGA;AACA;AACA;AAQA;AACA;AACA;AACA;AAKA;AACA;AAmBA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAAA;AACA;AAlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAuEA;AAjHA;AAmHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AACA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;;;;;ACzUA;AACA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;ACrIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;AC7ZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrBA;;;AAGA;AAEA;;AA0BA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AAGA;AACA;AAHA;AA6JA;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuLA;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAoDA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA/bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;AASA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAgBA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC5nBA;;;AAGA;;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AApBA;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAUA;;AAEA;AACA;AANA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;AASA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAhGA;AAiGA;;;;;AAKA;AACA;AACA;;;;;;;;;;AClbA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AArBA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAdA;AAcA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AANA;AAMA;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAIA;AAEA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AALA;AAOA;;;;;;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAVA;;;;;;;ACntbA;;;AAGA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;AAYA;AACA;AAAA;;AACA;AA4PA;AACA;AAiBA;AA5QA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;AAIA;AACA;AACA;AACA;AAKA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AA/QA;AA+QA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;ACxvzDA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AA7BA;AA8BA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;;;;;AAQA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAvBA;AA+BA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAxWA;AA0WA;AACA;;;;;;;;;ACnXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvIA;AACA;AAyIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9DA;;;AAGA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AAekBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;ACvzCA;AAEA;;AAEA;AACA;AAaA;AAbA;AAeA;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AATA;;;;;;;;;AC5BA;;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;;;;AAIA;AACA;AACA;AACA;AAFA;AAKA;;;;;AAKA;AACA;AACA;AACA;AAFA;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACl6BA;;;;;AAKA;;;;;;AAMA;;;;;AAKA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACvthBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACtfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AA1HA;AAqIA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAngBA;AAqgBA;AACA;;;;;;;;;;;;;;;;;;ACxgBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;AArjBA;AAujBA;AACA;;;;;;;;;;;ACzjBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAQA;AAPA;AASA;AARA;AACA;AAMA;AAJA;AACA;AAKA;;;;;;;;;;;ACjBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AACA;;;;;;;;;;;;ACjBA;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApxXA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA7SA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;ACbA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AA7CA;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;;;AAOA;;;;;;;;;;AAUA;;;;;AAKA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AAltCA;AACA;AAotCA;AACA;AACA;;;;;;;;;ACnuCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AA/BA;AA0CA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;ACtVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;;;;;;;;;AASA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAEA;AACA;AArFA;AAAA;AAAA;AAAA;AAsFA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;;;AAKA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjEA;AAkEA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AA8DA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgrCA;AAsCA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAOA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AANA;AADA;AAcA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AApwCA;AAswCA;AACA;;;;;;;;;AClzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AACA;AACA;AAFA;AAbA;AAAA;AACA;AAmBA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AACA;AAyBA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;AAKA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApFA;AACA;AAsFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAsCA;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzHA;AA2HA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;AAIA;AACA;AAGA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhmIA;AAkmIA;AACA;;;;;;;;AChrIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAXA;AAAA;AAAA;AACA;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAazHA;AACA;AA4HA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}