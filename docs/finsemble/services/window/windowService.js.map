{"version":3,"file":"services/window/windowService.js","sources":["webpack:///webpack/bootstrap eea8a8d8e37df5f038e4?0c30","webpack:///src/clients/logger.ts?6e2d","webpack:///./~/process/browser.js?82e4","webpack:///(webpack)/buildin/harmony-module.js?cc96","webpack:///src/common/system.ts?b036","webpack:///(webpack)/buildin/global.js?3698","webpack:///src/clients/RouterClientInstance.ts?db85","webpack:///./src/common/validate.js?611e","webpack:///src/clients/baseClient.ts?3f66","webpack:///./src/common/util.js?b343","webpack:///./~/async/dist/async.js?b52e","webpack:///src/common/constants.ts?24da","webpack:///./src/common/configUtil.js?1ec6","webpack:///./~/events/events.js?7c71","webpack:///(webpack)/buildin/module.js?c3c2","webpack:///src/common/dependencyManager.ts?ea4d","webpack:///src/clients/configClient.ts?2071","webpack:///src/clients/localLogger.ts?0d5e","webpack:///./~/uuid/lib/bytesToUuid.js?3068","webpack:///./~/uuid/lib/rng-browser.js?945e","webpack:///./~/uuid/v1.js?f9c7","webpack:///./src/common/userNotification.js?3698","webpack:///src/clients/storageClient.ts?61d1","webpack:///src/common/disentangledUtils.ts?5e28","webpack:///./~/lodash.throttle/index.js?e1ce","webpack:///./~/lodash.get/index.js?ed5b","webpack:///./~/lodash.isequal/index.js?6cec","webpack:///./src/common/monitorsAndScaling.js?6d63","webpack:///./src/common/routerTransport.js?2fc6","webpack:///src/clients/routerClientConstructor.ts?9c56","webpack:///./src/common/systemSettings.js?40b6","webpack:///./~/setimmediate/setImmediate.js?4a80","webpack:///./~/timers-browserify/main.js?b088","webpack:///src/services/baseService.ts?56db","webpack:///src/clients/distributedStoreClient.ts","webpack:///./~/lodash/lodash.js?03cc","webpack:///src/common/window/FinsembleWindow.ts","webpack:///./~/uuid/v4.js?42e7","webpack:///./~/p-limit/index.js?05fb","webpack:///./~/lodash.pick/index.js?97c7","webpack:///./~/p-try/index.js?6a90","webpack:///./~/uuid/index.js?7e8f","webpack:///src/clients/launcherClient.ts","webpack:///./src/common/storeUtils.js","webpack:///src/clients/StoreModel.ts","webpack:///src/clients/windowClient.ts","webpack:///src/clients/hotkeysClient.ts","webpack:///./src/common/keyMaps.json","webpack:///src/common/window/FinsembleEvent.ts","webpack:///src/common/window/WindowEventManager.ts","webpack:///./~/lodash.cloneDeep/index.js","webpack:///./src/services/window/Docking/boxMath.js","webpack:///src/clients/workspaceClient.ts","webpack:///./~/deepmerge/index.js","webpack:///src/services/window/WindowAbstractions/BaseWindow.ts","webpack:///./src/services/window/Docking/dockableBox.js","webpack:///src/services/window/Common/Pools/PoolSingletons.ts","webpack:///./src/services/window/Docking/constants.js","webpack:///src/services/window/Common/Pools/ObjectPool.ts","webpack:///./~/lodash.debounce/index.js","webpack:///./src/common/window/windowGroup.js","webpack:///src/common/windowStorageManager.ts","webpack:///./src/services/window/WindowAbstractions/FinsembleWindowInternal.js","webpack:///src/services/window/Splintering/SplinterAgentSlave.ts","webpack:///src/services/window/Common/Pools/WindowPool.ts","webpack:///./src/services/window/Docking/dockableGroup.js","webpack:///./src/services/window/Docking/dockableMonitor.js","webpack:///./src/services/window/Docking/dockableWindow.js","webpack:///./src/services/window/Docking/dockingCalculator.js","webpack:///./src/services/window/Docking/maskBoundsCalculator.js","webpack:///./src/services/window/windowService.js","webpack:///src/services/window/Common/MockDockableWindow.ts","webpack:///src/services/window/Common/spawnUtils.ts","webpack:///src/services/window/Docking/monitorUpdateHandler.ts","webpack:///src/services/window/Launcher/LauncherDefaults.ts","webpack:///src/services/window/Launcher/WrapManager.ts","webpack:///src/services/window/Launcher/createSplinterAndInject.ts","webpack:///src/services/window/Launcher/launcher.ts","webpack:///src/services/window/ServiceEntryPoints/launcherEntryPoints.ts","webpack:///src/services/window/ServiceEntryPoints/tabbingEntryPoints.ts","webpack:///src/services/window/ServiceEntryPoints/windowCreateEntryPoints.ts","webpack:///src/services/window/ServiceEntryPoints/windowPrimitivesEntryPoints.ts","webpack:///src/services/window/StackedWindowManager/stackedWindowManager.ts","webpack:///./~/lodash.clone/index.js","webpack:///./~/lodash.difference/index.js","webpack:///./src/services/window/Docking/dockingMain.js","webpack:///./src/services/window/Launcher/_test.js","webpack:///./src/services/window/Launcher/launcherGroup.js","webpack:///./src/services/window/MultiWindowFeatures/autoArrange.js","webpack:///./src/services/window/ServiceEntryPoints/setupAllEntryPoints.js","webpack:///./src/services/window/Splintering/SplinterAgent.js","webpack:///./src/services/window/Splintering/SplinterAgentPool.js","webpack:///./src/services/window/WindowAbstractions/externalWindowWrapper.js","webpack:///./src/services/window/WindowAbstractions/openfinWindowWrapper.js","webpack:///./src/services/window/WindowAbstractions/stackedWindowWrapper.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"http://localhost:3375/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 192);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap eea8a8d8e37df5f038e4","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nconst LOCAL_ONLY_DEFAULT = false; // if true all logging will default to local console; will be overwritten by LoggerService's registration response\nconst ALWAY_ADD_STACKTRACE = false; // if true always add stacktrace data to all log messages (e.g. debug and verbose, not just errors, warning)\n\n// capture everything at startup; will be filtered later as needed when LoggerService's registration response provides settings; overhead here is not too high\nvar DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true, Verbose: true, LocalOnly: LOCAL_ONLY_DEFAULT }; // if true captured for logger\nvar CONSOLE_DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true }; // if true then goes to console and captured for logger\nconst MAX_LOG_MESSAGE_SIZE = 50000;\nconst OVER_LOG_SIZE_LIMIT_MESSAGE = `Log argument greater than ${MAX_LOG_MESSAGE_SIZE / 1000}KB. Check local Console to see output of the object.`;\nconst MAX_QUEUE_SIZE = 5 * 1000; // maximum logger queue size; plenty of space although shouldn't need much since continuously sending to logger if working correctly;\n\nimport throttle = require(\"lodash.throttle\");\nimport { System } from \"../common/system\";\nimport { LocalLogger } from \"./localLogger\";\n\n/**\n * @introduction\n *\n * <h2>Logger Client</h2>\n *\n * The Logger Client supports very efficient and configurable run-time logging to the <a href=tutorial-CentralLogger.html>Central Logger</a>.\n * Logging has a small performance overhead, so developers can liberally instrument their code with log messages for debugging and diagnostics.\n * By default, only error and warning messages are captured by the Logger, with the other message types (e.g., log, info, debug) disabled.\n * Which message types are enabled or disabled is fully controlled from the <a href=tutorial-CentralLogger.html>Central Logger</a> - this means developers can fully instrument their code once and dynamically enable and disable logging later, as needed, for debugging or field support.\n *\n * The Finsemble team uses the Central Logger to <a href=tutorial-Troubleshooting.html>capture log message for field support</a>.\n * Finsemble customers, building their own Finsemble applications, have the option to do the same.\n *\n * **Note:** The Logger Client **wraps** all console logging (e.g., `console.error`, `console.log`) so these message can also be captured and viewed in the Central Logger, but console logging is never disabled locally. For better performance, we recommend most of your code's instrumentation be based on the Logger Client (e.g., `FSBL.Clients.Logger.debug(...)` instead of the `console.debug(...)`).\n *\n * Using the Logger is similar to using the browser's console for logging (e.g., `console.error` or `console.log`), although the Logger Client is accessed through the FSBL object as shown in the examples below.\n *\n *```javascript\n * \t\t\tFSBL.Clients.Logger.error(\"an error message\", anErrorObject);\n * \t\t\tFSBL.Clients.Logger.warn(\"a warning message\", object1, object2, object3);\n * \t\t\tFSBL.Clients.Logger.log(\"logging message\");\n * \t\t\tFSBL.Clients.Logger.info(\"logging message\");\n * \t\t\tFSBL.Clients.Logger.log(\"log message\");\n * \t\t\tFSBL.Clients.Logger.debug(\"debug message\");\n *```\n * The Logger Client also supports system logging (e.g., `Logger.system.log`) for Finsemble's internal logging. All Finsemble client APIs are in the process of being instrumented to log their entry-point calls and parameters, as shown below.\n *\n *```javascript\n * \t\t\tLogger.system.info(\"RouterClient.transmit\", \"TO CHANNEL\", toChannel, \"EVENT\", event);\n *```\n * Developers can view all system logging in the Central Logger, although only `Logger.system.info` messages (recording API interactions) are intended for use outside the Finsemble development team.\n *\n *<strong>Note:</strong> Any service can also use the Logger by directing requiring the client. The Logger can immediately be used, but log message will not be transmitted to the Central Logger until `Logger.start()` is invoked (as shown below).\n *```javascript\n *\n * \t\t\tvar Logger = require(\"../../clients/logger\").default;\n * \t\t\tLogger.log(\"Service Ready\");\n * \t\t\tLogger.start();\n *```\n * @hideConstructor\n * @shouldBePublished true\n * @class Logger\n * @constructor\n */\nexport var LoggerConstructor = function (dependencies?: { RouterClient: any; }) {\n\tvar self = this;\n\tself.RouterClient = dependencies && dependencies.RouterClient;\n\tvar isRegistering = false; // if registering start\n\tvar isRegistered = false; // if registering complete\n\tvar loggerConsole = self;\n\tvar updatedLogState;\n\tvar calibratedTimeStampOffset = 0;\n\tvar newCalibratedTimeStampOffset;\n\tvar filteredMessagesCounter = 0;\n\tthis.startupTime = 0;\n\tvar loggerQueue = [];\n\tvar warningIssued = false; // used to limit warning messages\n\tif (typeof window === \"undefined\") return;\n\tvar loggerClientName = System.Window.getCurrent().name.replace(/\\./, \"-\");\n\tif (window.top !== window) { // amend name if iFrame\n\t\tloggerClientName += \".Frame\";\n\t}\n\tvar clientChannel = \"finsemble.logger.client.\" + loggerClientName;\n\n\t//const CATEGORIES = [\"console\", \"dev\", \"system\", \"perf\"];\n\n\t// Will be updated on registration with Central Logger, but capture everything until then.\n\tvar initialLogState = {\n\t\tconsole: CONSOLE_DEFAULT_LOG_SETTING,\n\t\tdev: DEFAULT_LOG_SETTING,\n\t\tsystem: DEFAULT_LOG_SETTING,\n\t\tperf: DEFAULT_LOG_SETTING,\n\t};\n\n\tvar currentLogState = initialLogState;\n\tfunction LoggerMessage(category, type, data) {\n\t\tthis.category = category;\n\t\tthis.logClientName = loggerClientName;\n\t\tthis.logType = type;\n\t\tthis.logData = data;\n\t\tthis.logTimestamp = window.performance.timing.navigationStart + window.performance.now() + calibratedTimeStampOffset;\n\t}\n\n\tfunction addToQueue(message) {\n\t\tif (loggerQueue.length < MAX_QUEUE_SIZE) {\n\t\t\tloggerQueue.push(message);\n\t\t} else {\n\t\t\tif (!warningIssued) {\n\t\t\t\tconsole.warn(\"Logging Queue Overflowed!\", loggerQueue.length);\n\t\t\t\twarningIssued = true;\n\t\t\t\tlet logState = { Error: false, Warn: false, Info: false, Log: false, Debug: false, Verbose: false, LocalOnly: false };\n\t\t\t\tlet newState = {\n\t\t\t\t\tconsole: logState,\n\t\t\t\t\tdev: logState,\n\t\t\t\t\tsystem: logState,\n\t\t\t\t\tperf: logState,\n\t\t\t\t};\n\n\t\t\t\tsetLogState(newState, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// if log state changes then update queue based on that data (e.g. if no longer logging debug messages, then remove them from the queue)\n\tfunction updateQueueBasedOnState(calibrateTimeFlag) {\n\t\tloggerConsole.system.debug(\"Logger updateQueueBasedOnState\", calibrateTimeFlag, calibratedTimeStampOffset, \"QUEUE LENGTH\", loggerQueue.length, currentLogState);\n\t\tvar newQueue = [];\n\t\tfor (var i = 0, length = loggerQueue.length; i < length; i++) {\n\t\t\tif (currentLogState[loggerQueue[i].category][loggerQueue[i].logType] && !currentLogState[loggerQueue[i].category].LocalOnly) {\n\t\t\t\tif (calibrateTimeFlag) {\n\t\t\t\t\tloggerQueue[i].logTimestamp += calibratedTimeStampOffset; // if flag set then timestamp hasn't been adjusted yet by calibrated offset time\n\t\t\t\t}\n\t\t\t\tnewQueue.push(loggerQueue[i]);\n\t\t\t} else { // only now know LocalOnly for messages, so print those queued out otherwise they will be lost\n\t\t\t\tif (currentLogState[loggerQueue[i].category][loggerQueue[i].logType] && currentLogState[loggerQueue[i].category].LocalOnly) {\n\t\t\t\t\tlet msg = loggerQueue[i];\n\t\t\t\t\tconsole.log(msg.category, msg.logType, msg.logTimestamp - window.performance.timing.navigationStart, msg.logData, \"(Previously queued!)\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tloggerQueue = newQueue;\n\t}\n\n\tthis.setClientName = function (name) {\n\t\tloggerClientName = name;\n\t};\n\n\tthis.getClientName = function (name) {\n\t\treturn loggerClientName;\n\t};\n\n\tthis.clearMessageList = function () {\n\t\tloggerQueue = [];\n\t};\n\n\tfunction setLogState(state, calibrateTimeFlag) {\n\t\tif (state && state.dev) currentLogState = state;\n\t\tupdateQueueBasedOnState(calibrateTimeFlag);\n\t}\n\n\t// logger entry point to return call stack that can be included in a log message\n\tthis.callStack = function () {\n\t\treturn traceString();\n\t};\n\n\tthis.setting = function () {\n\t\treturn currentLogState;\n\t};\n\n\tfunction traceString() {\n\t\tfunction getPosition(string, subString, index) {\n\t\t\treturn string.split(subString, index).join(subString).length;\n\t\t}\n\n\t\tfunction getErrorObject() {\n\t\t\ttry { throw Error(\"\"); } catch (err) { return err; }\n\t\t}\n\t\tvar stack = getErrorObject().stack;\n\t\tvar position = getPosition(stack, \"\\n\", 4);\n\t\tvar tString = stack.substring(position); // strip off irrelevant part of stack\n\t\tvar final = \"Log Stack: \\n\" + tString.substr(1); // insert description\n\t\treturn final;\n\t}\n\n\t// save original console functions since going to wrap/redefine each\n\tvar originalConsoleError = console.error;\n\tvar originalConsoleWarn = console.warn;\n\tvar originalConsoleInfo = console.info;\n\tvar originalConsoleLog = console.log;\n\tvar originalConsoleDebug = console.debug;\n\n\tfunction getRoughSizeOfObject(object) {\n\t\tvar objectList = [];\n\t\tvar stack = [object];\n\t\tvar bytes = 0;\n\t\t//prevent infinite recursion\n\t\tvar attempts = 0;\n\t\twhile (stack.length && attempts < 1000) {\n\t\t\tattempts++;\n\t\t\tvar value = stack.pop();\n\n\t\t\tif (typeof value === \"boolean\") {\n\t\t\t\tbytes += 4;\n\t\t\t}\n\t\t\telse if (typeof value === \"string\") {\n\t\t\t\tbytes += value.length * 2;\n\t\t\t}\n\t\t\telse if (typeof value === \"number\") {\n\t\t\t\tbytes += 8;\n\t\t\t}\n\t\t\telse if\n\t\t\t\t(\n\t\t\t\ttypeof value === \"object\"\n\t\t\t\t&& objectList.indexOf(value) === -1\n\t\t\t) {\n\t\t\t\tobjectList.push(value);\n\n\t\t\t\tfor (var i in value) {\n\t\t\t\t\tstack.push(value[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn bytes;\n\t}\n\n\t// filter out message containing certain substrings;\n\tfunction filterMessage(message) {\n\t\tvar result = (message.logData.includes(\"Finsemble.heartbeat\") === true);\n\t\treturn result;\n\t}\n\n\tfunction formatAndQueueMessage(category, type, args) {\n\t\tvar message;\n\t\tvar noFilter = false;\n\t\tlet CHECK_OBJECT_SIZE = true;\n\t\tif (args[0] === \"forceObjectsToLogger\") {\n\t\t\tnoFilter = true;\n\t\t\tCHECK_OBJECT_SIZE = false;\n\t\t\targs.splice(0, 1);\n\t\t}\n\t\t//Kicks out overly-large objects to prevent the loggerService from jamming up.\n\t\targs = args.map((object) => {\n\t\t\tif (CHECK_OBJECT_SIZE) {\n\t\t\t\tlet bytes = getRoughSizeOfObject(object);\n\t\t\t\tif (bytes > MAX_LOG_MESSAGE_SIZE) {\n\t\t\t\t\t// @todo, Terry, instead of *not* sending the message at all, we should send the first X bytes of the message.\n\t\t\t\t\toutputToConsole(originalConsoleInfo, [\"Message too large to send to the logger.\", args]);\n\t\t\t\t\treturn OVER_LOG_SIZE_LIMIT_MESSAGE;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn object;\n\t\t});\n\n\t\ttry {\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\t// Convert arg into a string if it doesn't stringify properly. JavaScript Error class (such as thrown by an unhandled exception) doesn't stringify properly so you must coerce it to a string.\n\t\t\t\tif (args[i] instanceof Error) {\n\t\t\t\t\targs[i] = args[i].toString();\n\t\t\t\t}\n\t\t\t}\n\t\t\tmessage = new LoggerMessage(category, type, JSON.stringify(args));\n\t\t} catch (err) {\n\t\t\targs.splice(0, args.length); // clear but don't redefine since must return updated value\n\t\t\targs.push(traceString());\n\t\t\tmessage = new LoggerMessage(category, type, \"*** Logging Error: \" + JSON.stringify(args));\n\t\t}\n\n\t\tif (noFilter || !filterMessage(message)) {\n\t\t\taddToQueue(message);\n\t\t} else {\n\t\t\tif (++filteredMessagesCounter <= 5) {\n\t\t\t\tlet filterMsg = `\"Filtered Logger Message (${filteredMessagesCounter} of first 5 shown)`;\n\t\t\t\toutputToConsole(originalConsoleInfo, [filterMsg, message]); // put out a few filtered messages then stop so won't clutter console\n\t\t\t}\n\t\t}\n\n\t\tif (isRegistered) {\n\t\t\ttransmitAndClearQueue();\n\t\t}\n\t}\n\n\tlet transmitAndClearQueue = function () {\n\t\tif (loggerQueue.length > 0) {\n\t\t\tself.RouterClient.transmit(\"logger.service.logMessages\", loggerQueue);\n\t\t\tloggerConsole.clearMessageList();\n\t\t}\n\t};\n\n\tif (loggerClientName === \"routerService\") {\n\t\ttransmitAndClearQueue = throttle(transmitAndClearQueue, 100, { leading: false }); // HERE is the interval for transmitting queued messages to the logger service\n\t} else {\n\t\ttransmitAndClearQueue = throttle(transmitAndClearQueue, 250, { leading: false }); // HERE is the interval for transmitting queued messages to the logger service\n\t}\n\t//Helper to flatten the array of arguments passed in, so we can log the full message locally.\n\tfunction flatten(arr) {\n\t\treturn arr.reduce(function (flat, toFlatten) {\n\t\t\treturn flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\n\t\t}, []);\n\t}\n\tfunction outputToConsole(consoleType, args) {\n\t\ttry {\n\t\t\tconsoleType.apply(console, flatten(args));\n\t\t} catch (err) {\n\t\t\targs = [];\n\t\t\targs.push(traceString());\n\t\t\t// [Terry] This has invalid syntax, \"category\" and \"type\" don't exist. I don't think this ever gets called.\n\t\t\t// message = new LoggerMessage(category, type, \"*** Logging Error: \" + JSON.stringify(args));\n\t\t}\n\t}\n\n\n\t/**\n\t * Log a dev error message.\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.error(\"some message\", parm1, parm2);\n\t */\n\tthis.error = function () {\n\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\targs.push(traceString());\n\t\tif (currentLogState.dev.Error && !currentLogState.dev.LocalOnly) {\n\t\t\tformatAndQueueMessage(\"dev\", \"Error\", args);\n\t\t}\n\n\t\targs.unshift(\"dev error (\" + window.performance.now() + \"):\");\n\t\toutputToConsole(originalConsoleError, args);\n\t};\n\n\t/**\n\t * Log a dev warning message.\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.warn(\"some message\", parm1, parm2);\n\t */\n\tthis.warn = function () {\n\t\tif (currentLogState.dev.Warn) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\targs.push(traceString());\n\t\t\tif (currentLogState.dev.Warn && !currentLogState.dev.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"dev\", \"Warn\", args);\n\t\t\t}\n\t\t\tif (currentLogState.dev.Warn && currentLogState.dev.LocalOnly) {\n\t\t\t\targs.unshift(\"dev warn (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleWarn, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Log a dev info message.\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.info(\"some message\", parm1, parm2);\n\t */\n\tthis.info = function () {\n\t\tif (currentLogState.dev.Info) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.dev.Info && !currentLogState.dev.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"dev\", \"Info\", args);\n\t\t\t}\n\t\t\tif (currentLogState.dev.Info && currentLogState.dev.LocalOnly) {\n\t\t\t\targs.unshift(\"dev info (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleInfo, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Log a dev log message.\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.log(\"some message\", parm1, parm2);\n\t */\n\tthis.log = function () {\n\t\tif (currentLogState.dev.Log) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.dev.Log && !currentLogState.dev.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"dev\", \"Log\", args);\n\t\t\t}\n\t\t\tif (currentLogState.dev.Log && currentLogState.dev.LocalOnly) {\n\t\t\t\targs.unshift(\"dev log (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleLog, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Log a dev debug message.\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.debug(\"some message\", parm1, parm2);\n\t */\n\tthis.debug = function () {\n\t\tif (currentLogState.dev.Debug) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.dev.Debug && !currentLogState.dev.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"dev\", \"Debug\", args);\n\t\t\t}\n\t\t\tif (currentLogState.dev.Debug && currentLogState.dev.LocalOnly) {\n\t\t\t\targs.unshift(\"dev debug (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Log a dev verbose message (an extra level of verbose-debug output).\n\t *\n\t * @param {any} message parameter of any type that can be stringified (e.g. string, object)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.Logger.verbose(\"some message\", parm1, parm2);\n\t */\n\tthis.verbose = function () {\n\t\tif (currentLogState.dev.Verbose) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.dev.Verbose && !currentLogState.dev.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"dev\", \"Verbose\", args);\n\t\t\t}\n\t\t\tif (currentLogState.dev.Verbose && currentLogState.dev.LocalOnly) {\n\t\t\t\targs.unshift(\"dev verbose (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t// system mode functions\n\tthis.system = {};\n\n\t/**\n\t * @param {Array.<any>} arguments\n\t*/\n\tthis.system.error = function () {\n\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\targs.push(traceString());\n\n\t\tif (currentLogState.system.Error && !currentLogState.system.LocalOnly) {\n\t\t\tformatAndQueueMessage(\"system\", \"Error\", args);\n\t\t}\n\n\t\targs.unshift(\"system error (\" + window.performance.now() + \"):\");\n\t\toutputToConsole(originalConsoleError, args);\n\t};\n\n\tthis.system.warn = function () {\n\t\tif (currentLogState.system.Warn) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\targs.push(traceString());\n\t\t\tif (currentLogState.system.Warn && !currentLogState.system.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"system\", \"Warn\", args);\n\t\t\t}\n\t\t\tif (currentLogState.system.Warn && currentLogState.system.LocalOnly) {\n\t\t\t\targs.unshift(\"system warn (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleWarn, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.system.info = function () {\n\t\tif (currentLogState.system.Info) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.system.Info && !currentLogState.system.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"system\", \"Info\", args);\n\t\t\t}\n\t\t\tif (currentLogState.system.Info && currentLogState.system.LocalOnly) {\n\t\t\t\targs.unshift(\"system info (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleInfo, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.system.log = function () {\n\t\tif (currentLogState.system.Log) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.system.Log && !currentLogState.system.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"system\", \"Log\", args);\n\t\t\t}\n\t\t\tif (currentLogState.system.Log && currentLogState.system.LocalOnly) {\n\t\t\t\targs.unshift(\"system log (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleLog, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.system.debug = function () {\n\t\tif (currentLogState.system.Debug) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.system.Debug && !currentLogState.system.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"system\", \"Debug\", args);\n\t\t\t}\n\t\t\tif (currentLogState.system.Debug && currentLogState.system.LocalOnly) {\n\t\t\t\targs.unshift(\"system debug (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.system.verbose = function () {\n\t\tif (currentLogState.system.Verbose) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.system.Verbose && !currentLogState.system.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"system\", \"Verbose\", args);\n\t\t\t}\n\t\t\tif (currentLogState.system.Verbose && currentLogState.system.LocalOnly) {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\t\targs.unshift(\"system log (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\t// performance mode functions\n\tthis.perf = {};\n\tthis.perf.error = function () {\n\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\targs.push(traceString());\n\t\tif (currentLogState.perf.Error && !currentLogState.perf.LocalOnly) {\n\t\t\tformatAndQueueMessage(\"perf\", \"Error\", args);\n\t\t}\n\n\t\targs.unshift(\"perf error (\" + window.performance.now() + \"):\");\n\t\toutputToConsole(originalConsoleError, args);\n\t};\n\n\tthis.perf.warn = function () {\n\t\tif (currentLogState.perf.Warn) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\targs.push(traceString());\n\t\t\tif (currentLogState.perf.Warn && !currentLogState.perf.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"perf\", \"Warn\", args);\n\t\t\t}\n\t\t\tif (currentLogState.perf.Warn && currentLogState.perf.LocalOnly) {\n\t\t\t\targs.unshift(\"perf warn (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleWarn, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.perf.info = function () {\n\t\tif (currentLogState.perf.Info) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.perf.Info && !currentLogState.perf.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"perf\", \"Info\", args);\n\t\t\t}\n\t\t\tif (currentLogState.perf.Info && currentLogState.perf.LocalOnly) {\n\t\t\t\targs.unshift(\"perf info (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleInfo, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.perf.log = function () {\n\t\tif (currentLogState.perf.Log) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.perf.Log && !currentLogState.perf.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"perf\", \"Log\", args);\n\t\t\t}\n\t\t\tif (currentLogState.perf.Log && currentLogState.perf.LocalOnly) {\n\t\t\t\targs.unshift(\"perf log (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleLog, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.perf.debug = function () {\n\t\tif (currentLogState.perf.Debug) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.perf.Debug && !currentLogState.perf.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"perf\", \"Debug\", args);\n\t\t\t}\n\t\t\tif (currentLogState.perf.Debug && currentLogState.perf.LocalOnly) {\n\t\t\t\targs.unshift(\"perf debug (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.perf.verbose = function () {\n\t\tif (currentLogState.perf.Verbose) {\n\t\t\tvar args = Array.prototype.slice.call(arguments); // make a real array so can manipulate\n\t\t\tif (ALWAY_ADD_STACKTRACE) {\n\t\t\t\targs.push(traceString());\n\t\t\t}\n\t\t\tif (currentLogState.perf.Verbose && !currentLogState.perf.LocalOnly) {\n\t\t\t\tformatAndQueueMessage(\"perf\", \"Verbose\", args);\n\t\t\t}\n\t\t\tif (currentLogState.perf.Verbose && currentLogState.perf.LocalOnly) {\n\t\t\t\targs.unshift(\"perf verbose (\" + window.performance.now() + \"):\");\n\t\t\t\toutputToConsole(originalConsoleDebug, args);\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.onClose = function () {\n\t\tthis.unregisterClient();\n\t};\n\n\tfunction registerClient() {\n\t\tloggerConsole.system.debug(\"logger.service.registering\", loggerClientName);\n\t\tif (!LOCAL_ONLY_DEFAULT) {\n\t\t\tself.RouterClient.query(\"logger.service.register\", {\n\t\t\t\tclientName: loggerClientName,\n\t\t\t\tclientChannel,\n\t\t\t\tuuid: System.Window.getCurrent().uuid,\n\t\t\t\twindowName: System.Window.getCurrent().name\n\t\t\t}, function (error, queryMessage) {\n\t\t\t\tif (error) { // for some very early clients the logger may not be ready yet, so retry after a small wait\n\t\t\t\t\tsetTimeout(registerClient, 750);\n\t\t\t\t} else {\n\t\t\t\t\tisRegistered = true;\n\t\t\t\t\tloggerConsole.system.debug(\"logger.service.registered\");\n\t\t\t\t\tupdatedLogState = queryMessage.data;\n\t\t\t\t\tif (loggerClientName !== \"routerService\") {\n\t\t\t\t\t\tcalibratedTimeStampOffset = newCalibratedTimeStampOffset; // from now the real offset time will be used for all timestamps\n\t\t\t\t\t\tsetLogState(updatedLogState, true); // true indicates must adjust already queued timestamps by the new offset time\n\t\t\t\t\t} else { // router services doesn't need to calibrate time since it is the reference time\n\t\t\t\t\t\tsetLogState(updatedLogState, false);\n\t\t\t\t\t}\n\t\t\t\t\tformatAndQueueMessage(\"system\", \"Debug\", [\"Logger Registered\"]);\n\t\t\t\t\ttransmitAndClearQueue();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tself.RouterClient.addListener(clientChannel, function (error, message) {\n\t\t\tloggerConsole.system.debug(\"logger.client.setLogState\", message.data);\n\t\t\tupdatedLogState = message.data;\n\t\t\tsetLogState(updatedLogState, false);\n\t\t});\n\t}\n\n\tfunction unregisterClient(params = {}, cb = Function.prototype) {\n\t\tloggerConsole.system.debug(\"logger.service.unregister\", loggerClientName);\n\t\ttransmitAndClearQueue(); // send any message currently in the log queue\n\t\tself.RouterClient.query(\"logger.service.unregister\", loggerClientName, cb);\n\t}\n\n\tfunction registerOnceWhenStarted() {\n\t\tif (!isRegistering) {\n\t\t\tself.startupTime = performance.now() - self.startupTime;\n\t\t\tregisterClient();\n\t\t\tisRegistering = true;\n\t\t}\n\t}\n\n\tthis.unregisterClient = unregisterClient;\n\n\tthis.isLogMessage = function (channel) {\n\t\treturn (channel === \"logger.service.logMessages\");\n\t};\n\tthis.status = \"offline\";\n\t/** Sets the router client for this instance of the Logger client.\n\t *\n\t * This is necessary to do after instantiation because the RouterClient\n\t * and the Logger have a mutual dependency on each other.\n\t*/\n\tthis.setRouterClient = (routerClient) => {\n\t\tthis.RouterClient = routerClient;\n\t}\n\tthis.start = function (routerClient?) {\n\t\tthis.startupTime = performance.now();\n\t\tvar self = this;\n\t\tif (!self.RouterClient) {\n\t\t\tconsole.log(\"No instance of the RouterClient found for this instance of the Logger. Dynamically requiring it.\");\n\t\t\tself.RouterClient = require(\"./routerClientInstance\").default;\n\t\t}\n\t\tlet onlineSubscription, allActiveSubscription;\n\t\t//Wait for the service before coming online. can't use the dependency manager, because it uses the router, which uses the logger.\n\t\tfunction comeOnline() {\n\t\t\tself.status = \"online\";\n\t\t\tloggerConsole.system.debug(\"Logger onReady\", loggerClientName);\n\t\t\t// timer calibration must be done so the messages will be correctly sorted in the central logger;\n\t\t\t// this is necessary because there is timer drift between windows --- this appears to be a Chromium\n\t\t\t// bug we have to work around it.  The timeOffset value adjusts the time using the routerService's\n\t\t\t// time as a central reference point.\n\t\t\tself.RouterClient.calibrateTimeWithRouterService(function (timeOffset) {\n\t\t\t\tnewCalibratedTimeStampOffset = timeOffset;\n\t\t\t\tregisterOnceWhenStarted();\n\t\t\t});\n\t\t}\n\t\tlet onRouterReady = () => {\n\t\t\tallActiveSubscription = self.RouterClient.subscribe(\"Finsemble.Service.State.loggerService\", function (err, event) {\n\t\t\t\tif (event.data.state === \"ready\") {\n\t\t\t\t\tcomeOnline();\n\t\t\t\t\tself.RouterClient.unsubscribe(allActiveSubscription);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tif (window.name === \"routerService\") {\n\t\t\tself.RouterClient.query(\"logger.service.register\", {\n\t\t\t}, function (error, queryMessage) {\n\t\t\t\tif (error) { // for some very early clients the logger may not be ready yet, so retry after a small wait\n\t\t\t\t\tsetTimeout(onRouterReady, 750);\n\t\t\t\t} else {\n\t\t\t\t\tonRouterReady();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tself.RouterClient.onReady(onRouterReady);\n\t\t}\n\t};\n};\n\n/** When running unit tests, we don't want to use the real Logger.\n * `window` is an easy indicator of our environment.\n * @TODO - refactor to some sort of global like FSBL.environment. */\nexport const Logger = typeof window !== \"undefined\" ?\n\tnew LoggerConstructor()\n\t: new LocalLogger();\n\nexport default Logger;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/logger.ts","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/process/browser.js\n// module id = 1\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","module.exports = function(originalModule) {\r\n\tif(!originalModule.webpackPolyfill) {\r\n\t\tvar module = Object.create(originalModule);\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"exports\", {\r\n\t\t\tenumerable: true,\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/harmony-module.js\n// module id = 2\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","// pass through to openfin. In the future we can make this the pass through to any container.\ndeclare var fin;\ndeclare var chrome;\n\nimport { IGlobals } from \"../common/Globals\";\n/** The global `window` object. We cast it to a specific interface here to be\n * explicit about what Finsemble-related properties it may have.*/\nconst Globals =\n\t/** In our testing environments (i.e, mocha running in node.js),\n\t * `window` is not defined. Therefore, we have to check that `window`\n\t * exists; otherwise, in node, `process` is the global context.\n\t */\n\ttypeof window !== \"undefined\" ?\n\t\twindow as IGlobals\n\t\t: process as any as IGlobals;\n\nclass SystemWindow {\n\tconstructor(params, cb, errCb?) {\n\t\treturn new fin.desktop.Window(params, cb);\n\t}\n\n\tstatic get getCurrent() {\n\t\treturn fin.desktop.Window.getCurrent;\n\t}\n\n\tstatic get wrap() {\n\t\treturn fin.desktop.Window.wrap;\n\t}\n}\n\nclass Application {\n\tconstructor(params, cb, errCb?) {\n\t\treturn new fin.desktop.Application(params, cb);\n\t}\n\n\tstatic get getCurrent() {\n\t\treturn fin.desktop.Application.getCurrent;\n\t}\n\n\tstatic get wrap() {\n\t\treturn fin.desktop.Application.wrap;\n\t}\n}\n\nclass SystemNotification {\n\tconstructor(params) {\n\t\tnew fin.desktop.Notification(params);\n\t}\n}\n\nexport class System {\n\tstatic get Application() {\n\t\treturn Application;\n\t}\n\tstatic get Window() {\n\t\treturn SystemWindow;\n\t}\n\tstatic get Notification() {\n\t\treturn SystemNotification;\n\t}\n\n\tstatic getMousePosition(cb) {\n\t\tfin.desktop.System.getMousePosition((mousePosition) => {\n\t\t\tif (mousePosition.left || mousePosition.left === 0) mousePosition.x = mousePosition.left;\n\t\t\tif (mousePosition.top || mousePosition.top === 0) mousePosition.y = mousePosition.top;\n\t\t\tcb(null, mousePosition);\n\t\t}, (err) => { cb(err, null); });\n\t}\n\n\tstatic getMonitorInfo(cb) {\n\t\tfin.desktop.System.getMonitorInfo((info) => {\n\t\t\tcb(info);\n\t\t});\n\t}\n\n\t// static get makes this behave like a static variable. so calling system.ready is equivalent to fin.desktop.main.\n\tstatic get ready() {\n\t\treturn fin.desktop.main;\n\t}\n\n\tstatic get getHostSpecs() {\n\t\treturn fin.desktop.System.getHostSpecs;\n\t}\n\n\tstatic get launchExternalProcess() {\n\t\treturn fin.desktop.System.launchExternalProcess;\n\t}\n\n\tstatic get terminateExternalProcess() {\n\t\treturn fin.desktop.System.terminateExternalProcess;\n\t}\n\n\tstatic get getAllApplications() {\n\t\treturn fin.desktop.System.getAllApplications;\n\t}\n\n\tstatic get exit() {\n\t\treturn fin.desktop.System.exit;\n\t}\n\n\tstatic get clearCache() {\n\t\treturn fin.desktop.System.clearCache;\n\t}\n\n\tstatic get showDeveloperTools() {\n\t\treturn fin.desktop.System.showDeveloperTools;\n\t}\n\n\tstatic get getRuntimeInfo() {\n\t\treturn fin.desktop.System.getRuntimeInfo || chrome.desktop.getDetails;\n\t}\n\n\tstatic get addEventListener() {\n\t\t/* events we use so far in Finsemble: monitor-info-changed, session-changed */\n\t\treturn fin.desktop.System.addEventListener;\n\t}\n\n\tstatic get getVersion() {\n\t\treturn fin.desktop.System.getVersion;\n\t}\n\n\tstatic get openUrlWithBrowser() {\n\t\treturn fin.desktop.System.openUrlWithBrowser;\n\t}\n\n\tstatic get getAllWindows() {\n\t\treturn fin.desktop.System.getAllWindows;\n\t}\n\n\tstatic FinsembleReady(cb) {\n\t\tif (Globals.FSBL && Globals.FSBL.addEventListener) {\n\t\t\treturn Globals.FSBL.addEventListener(\"onready\", cb);\n\t\t}\n\t\treturn window.addEventListener(\"FSBLready\", cb);\n\t}\n\n\t/**\n\t * Performs handshake with FEA to indicate the primary application started successfully\n\t */\n\tstatic startupApplicationHandshake() {\n\t\tif (fin.desktop.System.startupApplicationHandshake) {\n\t\t\tfin.desktop.System.startupApplicationHandshake();\n\t\t}\n\t}\n\n\t// This is not overriding or pointing to Openfin. This is the pattern used to close applications.\n\tstatic closeApplication(app, cb = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tlet t;\n\t\t\tlet timeoutCleared = false;\n\t\t\tlet terminateAndResolve = () => {\n\t\t\t\tif (timeoutCleared) return;\n\t\t\t\tconsole.log(\"Attempting to terminate\", app.uuid);\n\t\t\t\tapp.terminate(() => {\n\t\t\t\t\tcb();\n\t\t\t\t\tresolve();\n\t\t\t\t}, () => {\n\t\t\t\t\tif (timeoutCleared) return;\n\t\t\t\t\ttimeoutCleared = true;\n\t\t\t\t\tclearInterval(t);\n\t\t\t\t\t// If closing fails, force close\n\t\t\t\t\tconsole.log(\"force closing \", app.uuid);\n\t\t\t\t\tapp.terminate();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Hanging apps can be unresponsive to close and terminate calls for a period of time, keep trying until they're closed\n\t\t\tt = setInterval(terminateAndResolve, 2000);\n\n\t\t\tconsole.log(\"closing \", app.uuid);\n\t\t\t//OpenFin windows will wait to callback until close is successful, so no need to keep trying to close on a success callback.\n\t\t\tapp.close(false, () => {\n\t\t\t\tconsole.log(\"app.close: successfully closed\", app.uuid);\n\t\t\t\ttimeoutCleared = true;\n\t\t\t\tclearInterval(t);\n\t\t\t\tcb();\n\t\t\t\tresolve();\n\t\t\t}, terminateAndResolve);\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tstatic isElectron() {\n\t\treturn fin.container === 'Electron';\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// src/common/system.ts","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 4\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n/**\n * @introduction\n * <h2>Router Client Instance</h2>\n * Exports a single shared instance of the router client.  See {@link RouterClientConstructor} for the complete API definition with examples.\n *\n * Example:\n *\n *\t// get a shared instance of RouterClient (shared within the containing component or service)\n *\tvar RouterClient = require('./routerClientInstance').default;\n *\n * @namespace routerClientInstance\n * @shouldBePublished false\n */\n\nimport { IRouterClient } from \"./IRouterClient\";\n\nimport { RouterClientConstructor } from \"./routerClientConstructor\";\nimport { Logger } from \"./logger\";\nlet RCConstructor = RouterClientConstructor as any;\n/** The logger needs a router client, and the router client needs a logger.\n * To get around this fundamental circular dependency, we pass a reference\n * of the RouterClient to the Logger. Only after this is called will the\n * RouterClient and Logger be ready. If RouterClient is NOT required before\n * the Logger, then this file will be dynamically required at Logger.start().\n */\n\n/** An instance of the IRouterClient interface, (that is, the Router Client).\n * All other clients are built on top of the RouterClient; its API is the\n * primary form of communication between the various components of Finsemble.\n */\nlet RouterClientInstance: IRouterClient = new RCConstructor ({ clientName: \"RouterClient\" });\nLogger.setRouterClient(RouterClientInstance);\n\nexport default RouterClientInstance;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/RouterClientInstance.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\nimport SystemSettings from \"./systemSettings\";\n\n/**\n * @introduction\n * <h2>Finsemble Validate Functions</h2>\n *\n */\n\n/**\n * Constructor for Finsemble argument validator.\n *\n * Validation logic is ONLY RAN when SystemSettings diagnostics level is set to debug (i.e. 4 or above)\n * A failed validation will generate a warning message, but nothing more; however application logic can check the validation results.\n *\n * @param {string} console Finsemble console object used to display messages and check diagnostic level\n * @constructor\n * @shouldBePublished false\n */\nvar Validate = function () {\n\n\tfunction warningMsg(paramDescript, thisArg, thisArgType) {\n\n\t\tfunction getErrorObject() {\n\t\t\ttry { throw Error(\"\"); } catch (err) { return err; }\n\t\t}\n\n\t\tvar err = getErrorObject();\n\n\t\tvar caller_line1 = err.stack.split(\"\\n\")[5];\n\t\tvar index1 = caller_line1.indexOf(\"at \");\n\t\tvar msgPart1 = caller_line1.slice(index1 + 2, caller_line1.length);\n\n\t\tvar caller_line2 = err.stack.split(\"\\n\")[6];\n\t\tvar index2 = caller_line2.indexOf(\"at \");\n\t\tvar msgPart2 = caller_line2.slice(index2 + 2, caller_line2.length);\n\n\t\tconsole.warn(\"parameter validation failed: parameter \" + paramDescript + \" is of type '\" + typeof (thisArg) + \"' but should be of type '\" + thisArgType + \"' in\" + msgPart1 + \" called by\" + msgPart2);\n\t}\n\n\t/**\n\t * Confirm parameters are valid. A variable number of parameter pairs are supported.\n\t * @param {any} param1 is arg to validate\n\t * @param {string} paramType1 is required type for parameter (if '=' suffix then parameter is optional). \"any\" represents any type (but not \"undefined\").\n\t * @param {any=} param2 is next arg to validate\n\t * @param {string=} paramType2 os required type for next arg\n\t * @return {boolean} returns turn if parameter list is valid; otherwise, false.\n\t *\n\t * @example\n\t *\n\t * var validate = new Validate(console);\n\t * validate.args(name, \"string\", age, \"number\")\n\t *\n\t * validate.args(topic, \"string\", initialState, \"object=\"); // with optional paramter (represented by \"=\")\n\t *\n\t * validate.args(topic, \"string\", initialState, \"any\"); // with \"any\" type\n\t *\n\t * validate.args(subscribeIDStruct, \"object\") && validate.args(subscribeIDStruct.subscribeID, \"string\"); // only do second validate if first test successful\n\t *\n\t * validate.args(subscribeIDStruct, \"object\", subscribeIDStruct.subscribeID, \"string\"); // only check second parm if first validated successful\n\t *\n\t * validate.args(topic, \"any\", initialState, \"object=\", params, \"object=\"); // depending on logic, can break into separate validations\n\t * params = params || {};\n\t * validate.args(params.subscribeCallback, \"function=\", params.publishCallback, \"function=\", params.unsubscribeCallback, \"function=\");\n\t */\n\tthis.args = function (param1, paramType1, param2, paramType2 /*.....optional more paramter pairs....*/) {\n\t\tvar returnCode = true;\n\t\tif (SystemSettings.validationEnabled()) {\n\t\t\tvar parmCount = arguments.length;\n\t\t\tif ((parmCount + 1) % 2 !== 0) { // parameters must come in pairs (i.e. even number)\n\t\t\t\tfor (var i = 0; i < parmCount; i = i + 2) {\n\t\t\t\t\tvar optionalArg = false;\n\t\t\t\t\tvar thisArg = arguments[i];\n\t\t\t\t\tvar thisArgType = arguments[i + 1];\n\t\t\t\t\tif (thisArgType.slice(-1) === \"=\") { // if last char is \"=\" then optional argument\n\t\t\t\t\t\tthisArgType = thisArgType.slice(0, -1);\n\t\t\t\t\t\toptionalArg = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof (thisArg) !== thisArgType) { // confirms basic case -- the required type\n\t\t\t\t\t\tif (!optionalArg || typeof (thisArg) !== \"undefined\") { // but optional params can be undefined\n\t\t\t\t\t\t\tif (typeof (thisArg) === \"undefined\" || thisArgType !== \"any\") { // but \"any\" type doesn't have to match but can't be undefined\n\t\t\t\t\t\t\t\tvar parameterPosition = (i / 2) + 1;\n\t\t\t\t\t\t\t\twarningMsg(parameterPosition, thisArg, thisArgType);\n\t\t\t\t\t\t\t\treturnCode = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"validate.args requires even number of parameters: \" + JSON.stringify(arguments));\n\t\t\t}\n\t\t}\n\t\treturn returnCode; // always return turn when validation is disable due debug label turned off\n\t};\n\n\t/**\n\t * Confirm parameters are valid. args2() has the same functionality as args() except a third \"parameter description\" is passed in for each argument verified\n\t * Typically this for passing in a properties name for better diagnostic messages when verifying object properties.\n\t * A variable number of parameter \"triples\"\" are supported.\n\t *\n\t * @param {string} paramName1 is descriptive name of param1 (for diagnostic message)\n\t * @param {any} param1 is arg to validate\n\t * @param {string} paramType1 is required type for parameter (if '=' suffix then parameter is optional). \"any\" represents any type (but not \"undefined\").\n\t * @param {string} paramName2 is descriptive name of param1 (for diagnostic message)\n\t * @param {any} param2 is arg to validate\n\t * @param {string} paramType2 is required type for parameter (if '=' suffix then parameter is optional). \"any\" represents any type (but not \"undefined\").\n\t * @return {boolean} returns turn if parameter list is valid; otherwise, false.\n\t *\n\t * @example\n\t *\n\t * var validate = new Utils.Validate(console);\n\t * validate.args2(\"record.name\", record.name, \"string\", \"record.age\", age, \"number\")\n\t *\n\t * // common case using args() and args2() together\n\t * validate.args(topic, \"any\", initialState, \"object=\", params, \"object=\") &&\n\t *   validate.args2(\"params.subscribeCallback\", params.subscribeCallback, \"function=\", \"params.publishCallback\", params.publishCallback, \"function=\") &&\n\t *   validate.args2(\"params.unsubscribeCallback\", params.unsubscribeCallback, \"function=\");\n\t */\n\tthis.args2 = function (paramName1, param1, paramType1, paramName2, param2, paramType2 /*.....optional, more paramter sets of three....*/) {\n\n\t\tvar returnCode = true;\n\t\tif (SystemSettings.validationEnabled()) {\n\t\t\tvar parmCount = arguments.length;\n\t\t\tif ((parmCount + 1) % 3 !== 0) { // parameters must come in sets of three\n\t\t\t\tfor (var i = 0; i < parmCount; i = i + 3) {\n\t\t\t\t\tvar optionalArg = false;\n\t\t\t\t\tvar thisArgName = arguments[i];\n\t\t\t\t\tvar thisArg = arguments[i + 1];\n\t\t\t\t\tvar thisArgType = arguments[i + 2];\n\t\t\t\t\tif (thisArgType.slice(-1) === \"=\") { // if last char is \"=\" then optional argument\n\t\t\t\t\t\tthisArgType = thisArgType.slice(0, -1);\n\t\t\t\t\t\toptionalArg = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof (thisArg) !== thisArgType) { // confirms basic case -- the required type\n\t\t\t\t\t\tif (!optionalArg || typeof (thisArg) !== \"undefined\") { // but optional params can be undefined\n\t\t\t\t\t\t\tif (typeof (thisArg) === \"undefined\" || thisArgType !== \"any\") { // but \"any\" type doesn't have to match but can't be undefined\n\t\t\t\t\t\t\t\twarningMsg(thisArgName, thisArg, thisArgType);\n\t\t\t\t\t\t\t\treturnCode = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(\"validate.args requires even number of parameters: \" + JSON.stringify(arguments));\n\t\t\t}\n\t\t}\n\t\treturn returnCode; // always return turn when validation is disable due debug label turned off\n\t};\n};\n\nexport default new Validate();\n\n\n// WEBPACK FOOTER //\n// ./src/common/validate.js","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\nimport RouterClient from \"./routerClientInstance\";\nimport Validate from \"../common/validate\"; // Finsemble args validator\nimport Logger from \"./logger\";\nimport { ICentralLogger } from \"./ICentralLogger\";\nimport { System } from \"../common/system\";\n\nimport { FSBLDependencyManagerSingleton as FSBLDependencyManager } from \"../common/dependencyManager\";\nexport type BaseClientParams = {\n\t/** A function to be called after the client has initialized. */\n\tonReady?: (cb) => void,\n\t/** The name of the client. Must be unique. */\n\tname: string,\n\t/** @TODO - add enumerations for all clients and services. */\n\t/** The clients that must be online before this client comes online. */\n\trequiredClients?: any[],\n\t/** The services that must be online before this client comes online. */\n\trequiredServices?: any[],\n\tstartupDependencies?: { services?: string[], clients?: string[] }\n};\n\n/**\n * @introduction\n * <h2>Base Client</h2>\n * The Base Client is inherited by every client to provide common functionality to the clients. Clients communicate their status to each other through the Router and receive service status from the service manager. Once all dependencies are met, either client or service, the client's `onReady` method is fired.\n *\n * We're currently halfway through migrating our clients from extending a normal function prototype to an ES6 class.\n * \"_BaseClient\" represents the new class, while \"BaseClient\" is the original function. When the migration is complete,\n * we will remove the old function and rename \"_BaseClient\" to \"BaseClient\".\n * @constructor\n * @param {Object} params\n * @param {Function} params.onReady - A function to be called after the client has initialized.\n * @param {String} params.name - The name of the client\n * @shouldBePublished false\n\t@example\n\timport { _BaseClient as BaseClient } from \"./baseClient\";\n\tvar NewClient = function (params) {\n\t\tBaseClient.call(this, params);\n\t\tvar self = this;\n\n\t\treturn this;\n\t};\n\n\tvar clientInstance = new NewClient({\n\t\tonReady: function (cb) {\n\t\t\tLogger.system.log(\"NewClient Online\");\n\t\t\tcb();\n\t\t},\n\t\tname:\"NewClient\"\n\t});\n\tclientInstance.requiredServices = [REPLACE_THIS_ARRAY_WITH_DEPENENCIES];\n\tclientInstance.initialize();\n\tmodule.exports = clientInstance;\n\t@private\n */\nexport class _BaseClient {\n\t/** The current status of this service. */\n\tstatus: \"offline\" | \"online\" = \"offline\";\n\t/** The callback called when this service is ready. */\n\tprivate _onReady: any;\n\tstartupTime = 0;\n\tinitialized = false;\n\tstartupDependencies: { services?: any[], clients?: any[] } = { services: [], clients: [] };\n\t/** Reference to the RouterClient. */\n\trouterClient;\n\t/** Gets the current openfin window - stays here for backward compatibility. */\n\tfinWindow: {\n\t\tname: string,\n\t\tuuid: string,\n\t};\n\t/** Gets the current window. */\n\tfinsembleWindow = null;\n\t/** Gets the current window name. */\n\twindowName = \"\";\n\t/** Services that must be online before the client can come online. */\n\trequiredServices: any[];\n\t/** Clients that must be online before the client may come online.*/\n\trequiredClients: any[];\n\t/** Queue of functions to process once the client goes online. */\n\tclientReadyQueue: (() => void)[] = [];\n\t/** A unique name for the client.*/\n\tname: string;\n\tlogger: ICentralLogger;\n\n\tconstructor(params: BaseClientParams) {\n\t\tthis.name = params.name;\n\t\tthis._onReady = params.onReady;\n\t\tthis.startupDependencies = params.startupDependencies || {\n\t\t\tservices: [],\n\t\t\tclients: []\n\t\t};\n\t\t// @TODO - Refactor this to use DI.\n\t\tthis.logger = Logger;\n\t\t/**\n\t\t * Reference to the RouterClient\n\t\t */\n\t\tthis.routerClient = RouterClient;\n\t}\n\t/**\n\t * @private\n\t *\n\t */\n\tprocessClientReadyQueue = () => {\n\t\tfor (let cb of this.clientReadyQueue) {\n\t\t\tcb();\n\t\t}\n\t\tthis.clientReadyQueue = [];\n\t};\n\t/**\n\t * @private\n\t *\n\t */\n\tonReady = (cb) => {\n\t\tthis.clientReadyQueue.push(cb);\n\t\tif (this.status === \"online\") {\n\t\t\tthis.processClientReadyQueue();\n\t\t}\n\t}\n\n\t/** Check to see if the client can come online. We check this against the required services and clients */\n\t/**\n * @private\n *\n */\n\tsetClientOnline = () => {\n\t\tthis.status = \"online\";\n\t\tconst onReadyMessage = `STARTUP:CLIENT ONLINE:${this.finWindow.name}:${this.name}`;\n\t\tthis.startupTime = window.performance.now() - this.startupTime;\n\t\tconst readyCB = () => {\n\t\t\tthis.logger.system.debug(onReadyMessage);\n\t\t\tthis.processClientReadyQueue();\n\t\t\tFSBLDependencyManager.setClientOnline(this.name);\n\t\t}\n\t\tif (this._onReady) {\n\t\t\tthis._onReady(readyCB);\n\t\t} else {\n\t\t\treadyCB();\n\t\t}\n\t}\n\t/**\n\t * @private\n\t *\n\t */\n\tinitialize = (cb = Function.prototype) => {\n\t\tif (this.initialized) return;\n\n\t\tthis.initialized = true;\n\t\tthis.startupTime = performance.now();\n\t\tthis.routerClient.onReady(() => {\n\t\t\t// TODO, [terry] allow the finsembleWindow to be passed in, so we can support proxying windowClient in RPC\n\t\t\tthis.finWindow = System.Window.getCurrent();\n\t\t\tthis.windowName = this.finWindow.name;\n\t\t\tthis.logger.system.debug(\"Baseclient Init Router Ready\", this.name);\n\t\t\tFSBLDependencyManager.startup.waitFor(\n\t\t\t\tthis.startupDependencies,\n\t\t\t\t() => {\n\t\t\t\t\tcb();\n\t\t\t\t\tthis.setClientOnline();\n\t\t\t\t});\n\t\t});\n\t}\n\t/**\n\t * @private\n\t *\n\t */\n\tonClose = (cb?) => {\n\t\tif (cb) cb();\n\t};\n}\n\n/**\n * @introduction\n * <h2>Base Client</h2>\n * The Base Client is inherited by every client to provide common functionality to the clients. Clients communicate their status to each other through the Router and receive service status from the service manager. Once all dependencies are met, either client or service, the client's `onReady` method is fired.\n * @constructor\n * @param {Object} params\n * @param {Function} params.onReady - A function to be called after the client has initialized.\n * @param {String} params.name - The name of the client\n * @shouldBePublished false\n\t@example\n\timport { _BaseClient as BaseClient } from \"./baseClient\";\n\tvar NewClient = function (params) {\n\t\tBaseClient.call(this, params);\n\t\tvar self = this;\n\n\t\treturn this;\n\t};\n\n\tvar clientInstance = new NewClient({\n\t\tonReady: function (cb) {\n\t\t\tLogger.system.log(\"NewClient Online\");\n\t\t\tcb();\n\t\t},\n\t\tname:\"NewClient\"\n\t});\n\tclientInstance.requiredServices = [REPLACE_THIS_ARRAY_WITH_DEPENENCIES];\n\tclientInstance.initialize();\n\tmodule.exports = clientInstance;\n\t@private\n */\nvar BaseClient = function (params) {\n\tValidate.args(params, \"object=\");\n\tvar self = this;\n\tvar status = \"offline\";\n\tvar onReady;\n\tthis.startupTime = 0;\n\tif (params) {\n\t\tif (params.onReady) {\n\t\t\tonReady = params.onReady;\n\t\t}\n\t\tthis.name = params.name;\n\t}\n\tthis.initialized = false;\n\tthis.startupDependencies = params.startupDependencies || {\n\t\tservices: [],\n\t\tclients: []\n\t};\n\t/**\n\t * Reference to the RouterClient\n\t *  @type {Object}\n\t */\n\tthis.routerClient = RouterClient;\n\n\t/**\n\t * Gets the current openfin window - stays here for backward compatibility\n\t * @type {object}\n\t */\n\tthis.finWindow = null;\n\n\t/**\n\t * Gets the current window\n\t * @type {object}\n\t */\n\tthis.finsembleWindow = null;\n\n\t/**\n\t * Gets the current window name\n\t *  @type {string}\n\t */\n\tthis.windowName = \"\";//The current window\n\n\t/**\n\t * Services the are required to be online before the service can come online\n\t *  @type {Array.<Object>}\n\t */\n\tthis.requiredServices = [];\n\t/**\n\t * Clients the are required to be online before the service can come online\n\t *  @type {Array.<Object>}\n\t */\n\tthis.requiredClients = [];\n\n\t/**\n\t * Queue of functions to process once the client goes online.\n\t * @private\n\t */\n\tthis.clientReadyQueue = [];\n\n\t/**\n\t * Iterates through the clientReadyQueue, invoking each call to `.ready`.\n\t */\n\tthis.processClientReadyQueue = function () {\n\t\tfor (var i = 0; i < this.clientReadyQueue.length; i++) {\n\t\t\tlet callback = this.clientReadyQueue[i];\n\t\t\tif (typeof callback === \"function\") {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t\tthis.clientReadyQueue = [];\n\t};\n\n\t/**\n\t * Method for adding callbacks to each client.\n\t */\n\tthis.onReady = function (cb) {\n\t\tthis.clientReadyQueue.push(cb);\n\t\tif (status === \"online\") {\n\t\t\tthis.processClientReadyQueue();\n\t\t}\n\t};\n\t//Check to see if the client can come online. We check this against the required services and clients\n\tthis.setClientOnline = function () {\n\t\tvar self = this;\n\t\tstatus = \"online\";\n\t\tlet onReadyMessage = `STARTUP:CLIENT ONLINE:${self.finWindow.name}:${self.name}`;\n\t\tself.startupTime = performance.now() - self.startupTime;\n\t\tif (onReady) {\n\t\t\tonReady(function () {\n\t\t\t\tLogger.system.debug(onReadyMessage);\n\t\t\t\tself.processClientReadyQueue();\n\t\t\t\tFSBLDependencyManager.setClientOnline(self.name);\n\t\t\t});\n\t\t} else {\n\t\t\tLogger.system.debug(onReadyMessage);\n\t\t\tself.processClientReadyQueue();\n\t\t\tFSBLDependencyManager.setClientOnline(self.name);\n\t\t}\n\t};\n\n\n\t/**\n\t* Starts the process of checking services and any other function required before the client can come online\n\t*/\n\tthis.initialize = function (cb = Function.prototype) {\n\t\tif (self.initialized) { return; }\n\t\tself.initialized = true;\n\t\tself.setClientOnline = self.setClientOnline.bind(self);\n\t\tself.startupTime = performance.now();\n\t\tself.routerClient.onReady(function () {\n\t\t\t// TODO, [terry] allow the finsembleWindow to be passed in, so we can support proxying windowClient in RPC\n\t\t\tself.finWindow = System.Window.getCurrent();\n\t\t\tself.windowName = self.finWindow.name;\n\t\t\tLogger.system.debug(\"Baseclient Init Router Ready\", self.name);\n\t\t\tFSBLDependencyManager.startup.waitFor({\n\t\t\t\tservices: self.startupDependencies.services || [],\n\t\t\t\tclients: self.startupDependencies.clients || []\n\t\t\t}, () => {\n\t\t\t\tcb();\n\t\t\t\tself.setClientOnline();\n\t\t\t});\n\t\t});\n\t};\n\n\tthis.onClose = function () { };\n\n};\n\nexport default BaseClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/baseClient.ts","/*!\n * Copyright 2017 by ChartIQ, Inc.\n * All rights reserved.\n */\nimport { System } from \"./system\";\nimport _Monitors from \"./monitorsAndScaling\";\nexport const Monitors = new _Monitors(Function.prototype, Function.prototype, { System });\nimport Logger from \"../clients/logger\";\nimport uuidv1 from \"uuid/v1\";\n\n/*if (typeof fin !== \"undefined\") { //For Docking Tests -> removing this because Monitors are now handled bu the Monitors object. Docking tests will fail.\n\tSystem.ready(() => {\n\t\tSystem.addEventListener(\"monitor-info-changed\", function () {\n\t\t\tallMonitors = [];\n\t\t\tgetAllMonitors();\n\t\t});\n\t});\n}*/\n\n/**\n * Gets the openfin version in object form.\n */\nexport function getOpenfinVersion(cb = Function.prototype) {\n\treturn new Promise(function (resolve /*, reject*/) {\n\t\tSystem.getVersion((ver) => {\n\t\t\tlet verArr = ver.split(\".\").map(Number);\n\t\t\tlet versionObject = {\n\t\t\t\tmajor: verArr[0],\n\t\t\t\tchromium: verArr[1],\n\t\t\t\tminor: verArr[2],\n\t\t\t\tpatch: verArr[3]\n\t\t\t};\n\t\t\tcb(versionObject);\n\t\t\tresolve({ versionObject });\n\t\t});\n\t});\n};\n/**\n\t * Given a function _that returns a value_, this method will return a thenable object.\n\t * **NOTE** This will not work if your function doesn't return something.\n\t *  <example>\n\t *\t\tfunction myFunc(){\n\t\t\t\tconsole.log('I promise that this is not a promise.');\n\t\t\t }\n\t\tlet myPromise = util.castToPromise(myFunc);\n\t\tmyPromise().then(doSomethingElse);\n\t\t</example>\n\n\t */\nexport function castToPromise(f) {\n\treturn function () {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t//Calls f, checks to see if the returned object has a `then` method. if not, it will resolve the result from the initial function.\n\t\t\tconst result = f.apply(null, Array.from(arguments));\n\t\t\ttry {\n\t\t\t\treturn result.then(resolve, reject);\n\t\t\t} catch (e) {\n\t\t\t\tif (e instanceof TypeError) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t} else {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n};\n\n/**\n * @introduction\n * <h2>Finsemble Utility Functions</h2>\n */\n\nexport function isPercentage(val) {\n\tif (typeof (val) !== \"string\") {\n\t\treturn false;\n\t}\n\treturn val.indexOf(\"%\") !== -1;\n};\n\nexport function crossDomain(url) {\n\tvar parser = document.createElement(\"a\");\n\tparser.href = url;\n\n\tvar isSameHost = (window.location.hostname === parser.hostname);\n\n\tvar isSameProtocol = (window.location.protocol === parser.protocol);\n\n\tvar wport = (window.location.port !== undefined) ? window.location.port : 80;\n\tvar pport = (parser.port !== undefined) ? parser.port : 80;\n\tvar isSamePort = (wport === pport);\n\n\tvar isCrossDomain = !(isSameHost && isSamePort && isSameProtocol);\n\tLogger.system.debug(\"Launcher crossDomain=\" + isCrossDomain + \" (\" + isSameHost + \":\" + isSameProtocol + \":\" + isSamePort + \")\");\n\treturn isCrossDomain;\n};\n\n/**\n * Gets an array of monitor descriptors. Essentially rationalizing the results of OpenFin getMonitorInfo.\n * into a single array with additional information added.\n *\n * whichMonitor is set to the secondary monitor number, or \"primary\" if the primary monitor.\n * position is set to a zero index, where primary is the zero position, and each non-primary increments thereafter.\n *\n * Additionally, width and height are calculated and filled in for availableRect and monitorRect.\n *\n * @param {callback-array} cb Returns a list of monitor descriptors (optional or use promise)\n */\nexport var getAllMonitors = Monitors.getAllMonitors;\n\n/**\n * Retrieves a monitor descriptor given an absolute X Y on the OpenFin virtual screen\n * @param  {number} x The x position\n * @param  {number} y The y position\n * @param {callback-object}  cb Returns the monitor information from OpenFin.\n * \"isPrimary\" is set to true if it's the primary monitor.\n * null is returned if the x,y coordinates are beyond the bounds of the virtual screen.\n */\nexport var getMonitorFromOpenFinXY = Monitors.getMonitorFromScaledXY;\n\n/**\n * Retrieves a monitor descriptor for a window. If the window straddles two monitors\n * then the monitor from the top left is provided and \"straddling\" flag is set to true.\n *\n * @param  {WindowDescriptor}   windowDescriptor A windowDescriptor\n * @param  {Function} cb               Returns a monitor descriptor (optional or use promise)\n * @returns {Promise} A promise that resolves to a monitor descriptor\n */\nexport function getMonitorFromWindow(windowDescriptor, cb) {\n\tvar x = Number.isFinite(windowDescriptor.x) ? windowDescriptor.x : windowDescriptor.defaultLeft;\n\tvar y = Number.isFinite(windowDescriptor.y) ? windowDescriptor.y : windowDescriptor.defaultTop;\n\tvar x2 = x + windowDescriptor.defaultWidth;\n\tvar y2 = y + windowDescriptor.defaultHeight;\n\treturn new Promise(function (resolve, reject) {\n\n\t\t// get monitor of top-left\n\t\tMonitors.getMonitorFromScaledXY(x, y, function (monitor) {\n\t\t\tif (!monitor) {\n\t\t\t\tLogger.system.debug(\"getMonitorFromWindow - top-left is off screen, trying bottom right\");\n\t\t\t\t// get monitor of bottom-right\n\t\t\t\tMonitors.getMonitorFromScaledXY(x2, y2, function (monitor) {\n\t\t\t\t\tif (!monitor) {\n\t\t\t\t\t\tLogger.system.debug(\"getMonitorFromWindow - bottom-right is off screen, getting primary\");\n\t\t\t\t\t\t// get primary monitor - add message to the monitor saying that this window isn't really on a monitor\n\t\t\t\t\t\tMonitors.getAllMonitors(function (monitors) {\n\t\t\t\t\t\t\tif (monitors[0]) {\n\t\t\t\t\t\t\t\tif (cb) { cb(monitors[0]); }\n\t\t\t\t\t\t\t\tresolve(monitors[0]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treject(new Error(\"Cannot find monitor for window.\"));\n\t\t\t\t\t\t\t\tif (cb) { cb(null); }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmonitor = clone(monitor);\n\t\t\t\t\tvar monitorRect = monitor.monitorRect;\n\t\t\t\t\tif (monitorRect.left < x || monitorRect.right < y) {\n\t\t\t\t\t\tmonitor.straddling = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (cb) { cb(monitor); }\n\t\t\t\t\tresolve(monitor);\n\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmonitor = clone(monitor);\n\t\t\tvar monitorRect = monitor.monitorRect;\n\t\t\tif (monitorRect.right > x2 || monitorRect.bottom > y2) {\n\t\t\t\tmonitor.straddling = true;\n\t\t\t}\n\t\t\tif (cb) { cb(monitor); }\n\t\t\tresolve(monitor);\n\t\t});\n\t});\n};\n\n/**\n * Returns a finWindow or null if not found\n * @param  {WindowIdentifier}   windowIdentifier A window identifier\n * @param  {Function} cb               Optional callback containing finWindow or null if not found (or use Promise)\n * @return {Promise}                    Promise that resolves to a finWindow or rejects if not found\n */\nexport function getFinWindow(windowIdentifier, cb) {\n\treturn new Promise(function (resolve, reject) {\n\t\t// Default to current window\n\t\tvar myWindow = System.Window.getCurrent();\n\n\t\t// Get OpenFin options (windowDescriptor) for current window\n\t\t// we need this info even if we're going to reference a different window\n\t\tmyWindow.getOptions(function (options) {\n\t\t\t// If windowName is provided, then find that window\n\t\t\tif (windowIdentifier && windowIdentifier.windowName) {\n\t\t\t\t// If we didn't get a uuid from the caller, then assume\n\t\t\t\t// it's the same window as current window\n\t\t\t\tif (!windowIdentifier.uuid) {\n\t\t\t\t\twindowIdentifier.uuid = options.uuid;\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * Try to wrap the window; if it exists, getInfo will get in\n\t\t\t\t *  to the success function. If not, it'll go into the error callback.\n\t\t\t\t */\n\t\t\t\tlet remoteWindow = System.Window.wrap(windowIdentifier.uuid, windowIdentifier.windowName);\n\t\t\t\tremoteWindow.getInfo(() => {\n\t\t\t\t\tif (cb) { cb(remoteWindow); }\n\n\t\t\t\t\tresolve(remoteWindow);\n\t\t\t\t}, function () {\n\t\t\t\t\tif (cb) { cb(null); }\n\t\t\t\t\treject(`Window ${windowIdentifier.windowName} not found. UUID: ${windowIdentifier.uuid}`);\n\t\t\t\t\tconsole.debug(\"util.getFinWindow: Window \" + windowIdentifier.windowName + \" not found\");\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t\t} else if (windowIdentifier && windowIdentifier.componentType) {\n\t\t\t\tif (typeof LauncherService !== \"undefined\") {\n\t\t\t\t\tlet remoteWindow = LauncherService.componentFinder(windowIdentifier);\n\t\t\t\t\tif (remoteWindow) {\n\t\t\t\t\t\tresolve(remoteWindow);\n\t\t\t\t\t\tif (cb) { cb(remoteWindow); }\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(\"util.getFinWindow: Component \" + windowIdentifier.componentType + \" not found.\");\n\t\t\t\t\t\tif (cb) { cb(null); }\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//@TODO, get this through a remote call to Launcher service\n\t\t\t\t\treject(\"getFinWindow by componentType is currently only operable within LaunchService\");\n\t\t\t\t\tif (cb) { cb(null); }\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// return windowDescriptor for current window\n\t\t\t\tif (cb) { cb(myWindow); }\n\t\t\t\tresolve(myWindow);\n\t\t\t}\n\t\t});\n\t});\n};\n\n/**\n * Retrieves a windowDescriptor given a windowIdentifier\n * @param {WindowIdentifier} [windowIdentifier] The window to locate. If empty then the current window is returned.\n * @param {function} cb Function to retrieve result (optional or use Promise)\n * @return {Promise} A promise that resolves to a WindowDescriptor\n */\nexport function getWindowDescriptor(windowIdentifier, cb) {\n\treturn new Promise(function (resolve, reject) {\n\t\tgetFinWindow(windowIdentifier).then(function (finWindow) {\n\t\t\tfinWindow.getOptions(function (options) {\n\t\t\t\tif (cb) { cb(options); }\n\t\t\t\tresolve(options);\n\t\t\t});\n\t\t}).catch(function (errorMessage) {\n\t\t\tconsole.warn(errorMessage);\n\t\t\tif (cb) { cb(null); }\n\t\t\treject(errorMessage);\n\t\t});\n\t});\n};\n\nexport function findMonitor(monitors, field, value) {\n\tfor (var i = 0; i < monitors.length; i++) {\n\t\tvar monitor = monitors[i];\n\t\tif (monitor[field] === value) { return monitor; }\n\t}\n\treturn null;\n};\n/**\n * @param {number} commandMonitor\n * @param {Array.<Object>} monitors\n * @param {number} launchingMonitorPosition\n * commandMonitor, monitors, launchingMonitorPosition\n */\nexport function getWhichMonitor(params, cb) {\n\t//First release of this method took 3 params.\n\tif (arguments.length > 2) {\n\t\tparams = {\n\t\t\tcommandMonitor: arguments[0],\n\t\t\tmonitors: arguments[1],\n\t\t\tlaunchingMonitorPosition: arguments[2]\n\t\t};\n\t\tcb = null;\n\t}\n\tvar monitor;\n\tvar { commandMonitor, monitors, launchingMonitorPosition } = params;\n\tvar isANumber = (commandMonitor && commandMonitor !== \"\") || commandMonitor === 0;\n\tif (commandMonitor === \"primary\") {\n\t\tmonitor = findMonitor(monitors, \"whichMonitor\", \"primary\");\n\t} else if (commandMonitor === \"next\") {\n\t\tlet position = launchingMonitorPosition + 1;\n\t\tif (position >= monitors.length) {\n\t\t\tposition = 0;\n\t\t}\n\t\tmonitor = monitors[position];\n\t} else if (commandMonitor === \"previous\") {\n\t\tlet position = launchingMonitorPosition - 1;\n\t\tif (position < 0) {\n\t\t\tposition = monitors.length - 1;\n\t\t}\n\t\tmonitor = monitors[position];\n\t} else if (commandMonitor === \"mine\") {\n\t\tvar waiting = true;\n\t\t//assuming this is always used in the launcher\n\t\tvar w = activeWindows.getWindow(params.windowIdentifier.windowName);\n\t\tw._getBounds((err, bounds) => {\n\t\t\tif (!err) {\n\t\t\t\tMonitors.getMonitorFromScaledXY(bounds.left, bounds.top, (monitor) => {\n\t\t\t\t\tcb(monitor);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmonitor = monitors[0];\n\t\t\t\tcb(monitor);\n\t\t\t}\n\t\t});\n\t} else if (isANumber) {\n\t\tif (commandMonitor >= monitors.length) {\n\t\t\tcommandMonitor = monitors.length - 1;\n\t\t}\n\t\tmonitor = monitors.filter(monitor => monitor.position === commandMonitor)[0];\n\t} else if (launchingMonitorPosition) {\n\t\tmonitor = monitors[launchingMonitorPosition];\n\t}\n\n\tif (!monitor) { // primary if no monitor found\n\t\tmonitor = monitors[0];\n\t}\n\n\tif (!waiting) {\n\t\tif (cb) {\n\t\t\tcb(monitor);\n\t\t} else {\n\t\t\t//maintaining backwards compatibility\n\t\t\treturn monitor;\n\t\t}\n\t}\n};\n\n/**\n * Gets a monitorInfo based on a command. A command is the typical \"monitor\" param\n * @param  {string} commandMonitor   Monitor command. See {@link LauncherClient#spawn}\n * @param  {object} windowIdentifier The windowIdentifier of the calling function. Necessary to support \"next\",\"previous\" an default.\n * @param {function} [cb] Optional callback\n * @returns {Promise} A promise that resolves to a monitorInfo\n */\nexport function getMonitorFromCommand(commandMonitor, windowIdentifier, cb) {\n\treturn new Promise(function (resolve /*, reject*/) {\n\t\tgetMonitor(windowIdentifier, function (monitorInfo) {\n\t\t\tMonitors.getAllMonitors(function (monitors) {\n\t\t\t\tlet params = {\n\t\t\t\t\tcommandMonitor: commandMonitor,\n\t\t\t\t\tmonitors: monitors,\n\t\t\t\t\tlaunchingMonitorPosition: monitorInfo.position\n\t\t\t\t};\n\t\t\t\tgetWhichMonitor(params, function (finalMonitorInfo) {\n\t\t\t\t\tif (cb) { cb(finalMonitorInfo); }\n\t\t\t\t\tresolve(finalMonitorInfo);\n\t\t\t\t});\n\n\t\t\t});\n\t\t});\n\t});\n};\n\n/**\n * @private\n * @param {WindowDescriptor} windowDescriptor\n * @param {monitorDimensions} monitorDimensions\n * @returns {boolean} Whether window is on the current monitor.\n */\nexport function windowOnMonitor(windowDescriptor, monitorDimensions) {\n\t//if right or left edge is within the window's bounds.\n\tif ((windowDescriptor.left >= monitorDimensions.left && windowDescriptor.left < monitorDimensions.right) ||\n\t\t(windowDescriptor.right <= monitorDimensions.right && windowDescriptor.right > monitorDimensions.left)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n/**\n * Convenience function to get the monitor for the current window\n * @param {WindowDescriptor} [windowIdentifier] The window to find the monitor for. Current window if empty.\n * @param  {Function} cb Returns a monitor descriptor (optional or use Promise)\n * @returns {Promise} A promise that resolves to a monitor descriptor\n */\nexport function getMonitorByDescriptor(windowDescriptor, cb) {\n\treturn new Promise(function (resolve /*, reject*/) {\n\t\tgetMonitorFromWindow(windowDescriptor, function (monitor) {\n\t\t\tif (cb) { cb(monitor); }\n\t\t\tresolve(monitor);\n\t\t});\n\t});\n};\n/**\n * Convenience function to get the monitor for the current window\n * @param {WindowIdentifier} [windowIdentifier] The window to find the monitor for. Current window if empty.\n * @param  {Function} cb Returns a monitor descriptor (optional or use Promise)\n * @returns {Promise} A promise that resolves to a monitor descriptor\n */\nexport function getMonitor(windowIdentifier, cb) {\n\treturn new Promise(function (resolve, reject) {\n\t\tgetWindowDescriptor(windowIdentifier, function (windowDescriptor) {\n\t\t\tif (!windowDescriptor) {\n\t\t\t\treject(\"util.getMonitor: Can't locate windowDescriptor.\");\n\t\t\t} else {\n\t\t\t\tgetMonitorFromWindow(windowDescriptor, function (monitor) {\n\t\t\t\t\tif (cb) { cb(monitor); }\n\t\t\t\t\tresolve(monitor);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n};\n/**\n * Returns a windowIdentifier for the current window\n * @param {Function} cb Callback function returns windowIdentifier for this window (optional or use Promise)\n * @returns {Promise} A promise that resolves to a windowIdentifier\n */\n// @TODO, [Terry] this should be eliminated in favor of calls to windowClient.getWindowIdentifier()\nexport function getMyWindowIdentifier(cb) {\n\tvar finWindow = System.Window.getCurrent();\n\treturn new Promise(function (resolve) {\n\t\tfinWindow.getOptions((windowDescriptor) => {\n\t\t\tvar componentType = null;\n\n\t\t\t// Figure out the component type from what was originally stored when we launched the window\n\t\t\t// options.customData is where our stuff is found\n\t\t\tvar customData = windowDescriptor.customData;\n\t\t\tif (customData && customData.component) {\n\t\t\t\tcomponentType = customData.component.type;\n\t\t\t}\n\t\t\tvar windowIdentifier = {\n\t\t\t\twindowName: finWindow.name,\n\t\t\t\tuuid: finWindow.uuid,\n\t\t\t\tcomponentType: componentType\n\t\t\t};\n\n\t\t\tif (cb) { cb(windowIdentifier); }\n\t\t\tresolve(windowIdentifier);\n\t\t});\n\t});\n};\n/**\n *\t@returns {string} Transforms an array of strings into a camel cased string.\n * @memberof Utils\n */\nexport function camelCase() {\n\tvar str = \"\";\n\tfor (var i = 0; i < arguments.length; i++) {\n\t\tstr += \" \" + arguments[i];\n\t}\n\treturn str\n\t\t.replace(/\\s(.)/g, function ($1) { return $1.toUpperCase(); })\n\t\t.replace(/\\s/g, \"\")\n\t\t.replace(/^(.)/, function ($1) { return $1.toLowerCase(); });\n};\n\n/**\n * Convenience method for cloning an object.\n * @param  {any} from The thing you want to copy\n * @param {any=} to Where you want your copy to end up.\n * @return {any} to Where you want your copy gwe end up.\n */\nexport function clone(from, to) {\n\tif (from === null || typeof from !== \"object\") {\n\t\treturn from;\n\t}\n\t// if (from.constructor != Object && from.constructor != Array) return from;\n\tif (from.constructor == Date || from.constructor == RegExp || from.constructor == Function ||\n\t\tfrom.constructor == String || from.constructor == Number || from.constructor == Boolean) { return new from.constructor(from); }\n\n\tto = to || new from.constructor();\n\n\tfor (var n in from) {\n\t\tto[n] = typeof to[n] === \"undefined\" ? clone(from[n], null) : to[n];\n\t}\n\n\treturn to;\n}\n\nexport function guuid() {\n\treturn uuidv1(); // return global uuid\n};\n\nexport function injectJS(path, cb) { //Inject a script tag with the path given. Once the script is loaded, it executes the callback.\n\tvar script = document.createElement(\"script\");\n\tscript.onload = cb;\n\tscript.type = \"text/javascript\";\n\tscript.async = true;\n\tscript.src = path;\n\tvar head = document.getElementsByTagName(\"head\")[0];\n\tvar firstScript = head.getElementsByTagName(\"script\")[0];\n\thead.insertBefore(script, firstScript);\n};\n\n/** Daniel H. 1/14/2019\n * @TODO - This method is only used in the DragAndDrop client, and it introduces a sneaky circular dependency between\n * this module and the launcherClient. It should be refactored out of this module. This can't be done until v4.0.0, as\n * it would be a breaking change to our API.\n */\n/**\n * This will either open a component with the shared data or publish the shared data using the linker client if the window is linked.\n * @experimental\n *\n * @param {object} params\n * @param {object} [params.data]\n * @param {boolean} [params.publishOnly] if the component is linked, this will only publish the data, not force open a window if it does not exist. If the component is not linked, this is ignored.\n * @param {function} [params.multipleOpenerHandler] Optional. This function is called with on object that contains a map of componentTypes to the data types they can open. It must return a list of components to be opened. If no handler is provided, the first found component will be chosen. It is possible that the component opened may not handle all the data provided.\n * @param {function} cb callback invoked with action taken.\n *\n * @since 1.5: multipleOpenerHandler and callback added\n *\n */\nexport function openSharedData(params, cb) {\n\tvar launcherClient = FSBL.Clients.LauncherClient;\n\tvar linkerClient = FSBL.Clients.LinkerClient;\n\t//If no handler is specified to deal with multiple components, use the first found\n\tif (!params.multipleOpenerHandler) params.multipleOpenerHandler = function (componentsMappedToData) {\n\t\t// find the component that can open the most amount of data\n\t\tvar maxDataTypesOpened = 0;\n\t\tvar componentToOpen;\n\t\tfor (var componentType of Object.keys(componentsMappedToData)) {\n\t\t\tif (componentsMappedToData[componentType].length > maxDataTypesOpened) {\n\t\t\t\tcomponentToOpen = componentType;\n\t\t\t\tmaxDataTypesOpened = componentsMappedToData[componentType].length;\n\t\t\t}\n\t\t}\n\t\treturn [componentToOpen];\n\t};\n\n\tvar errors = [];\n\tvar componentsMappedToData = {};\n\n\t// Loop through the data\n\tlauncherClient.getComponentsThatCanReceiveDataTypes({ dataTypes: Object.keys(params.data) }, function (err, dataTypeComponentMap) {\n\t\tfor (var dataType of Object.keys(dataTypeComponentMap)) {\n\t\t\tif (!dataTypeComponentMap[dataType].componentTypes.length) {\n\t\t\t\tvar error = \"No Components Available to Handle the type: \" + dataType;\n\t\t\t\terrors.push(error);\n\t\t\t\tLogger.system.error(error);\n\t\t\t} else {\n\t\t\t\tfor (var component of dataTypeComponentMap[dataType].componentTypes) {\n\t\t\t\t\tif (!componentsMappedToData[component]) { componentsMappedToData[component] = [dataType]; }\n\t\t\t\t\telse componentsMappedToData[component].push(dataType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// What if multiple components need to be opened?\n\t\tvar componentsToOpen = Object.keys(componentsMappedToData);\n\t\tif (componentsToOpen.length) {\n\t\t\tif (componentsToOpen.length > 1) {\n\t\t\t\tcomponentsToOpen = params.multipleOpenerHandler(componentsMappedToData);\n\t\t\t}\n\t\t\tvar linkerChannels = Object.keys(linkerClient.channels);\n\t\t\tif (linkerChannels.length) { //if linked\n\t\t\t\tvar linkedWindows = linkerClient.getLinkedComponents({ componentTypes: componentsToOpen, windowIdentifier: linkerClient.windowIdentifier() });\n\t\t\t\t// TODO: deal with the case if not all componentTypes that need to be opened are linked\n\t\t\t\tif (linkedWindows.length || params.publishOnly) { // If publishOnly is true then just publish, not spawn\n\t\t\t\t\tlinkerClient.publish({\n\t\t\t\t\t\tdataType: \"Finsemble.DragAndDropClient\",\n\t\t\t\t\t\tdata: params.data\n\t\t\t\t\t});\n\t\t\t\t\tif (cb) cb(errors.length ? errors : null, \"Data published\");\n\t\t\t\t} else { // spawn\n\t\t\t\t\tfor (let component of componentsToOpen) {\n\t\t\t\t\t\tlauncherClient.spawn(component, {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tsharedData: params.data,\n\t\t\t\t\t\t\t\tlinker: {\n\t\t\t\t\t\t\t\t\tchannels: linkerChannels\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\taddToWorkspace: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (cb) cb(errors.length ? errors : null, \"Linked Window(s) spawned with data\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!params.publishOnly) {\n\t\t\t\t\tfor (let component of componentsToOpen) {\n\t\t\t\t\t\tlauncherClient.spawn(component, {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tsharedData: params.data\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\taddToWorkspace: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tif (cb) cb(errors.length ? errors : null, \"New Window(s) spawned with data\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (cb) cb(errors.length ? errors : null, null);\n\t\t}\n\t});\n};\n\n/**\n * Calculate the new bounds of a window if moved onto the monitor by pulling the monitor along the line\n * between the top-left of the window and the center of the monitor\n * @param {*} monitor a monitor\n * @param {*} bounds current window bounds\n */\nexport function getNewBoundsWhenMovedToMonitor(monitor, bounds) {\n\n\t// Depending if the monitor has claimed space, determine rectangle\n\tlet monitorRect = monitor.unclaimedRect || monitor.availableRect || monitor.monitorRect;\n\n\t// Placeholder for new bounds\n\tlet newBounds = clone(bounds);\n\n\t// adjust vertical offset from monitor by moving top down or bottom up\n\tif (bounds.top < monitorRect.top) {\n\t\tnewBounds.top = monitorRect.top;\n\t} else if (bounds.top > monitorRect.bottom - bounds.height) {\n\t\tnewBounds.top = monitorRect.bottom - bounds.height;\n\t}\n\n\t// Adjust horizontal offset from monitor by moving left-edge rightward or right-edge leftward\n\tif (bounds.left < monitorRect.left) {\n\t\tnewBounds.left = monitorRect.left;\n\t} else if (bounds.left > monitorRect.right - bounds.width) {\n\t\tnewBounds.left = monitorRect.right - bounds.width;\n\t}\n\n\t// Recalculate bottom / right, based on movement of top / left, maintaining width / height\n\tnewBounds.bottom = newBounds.top + newBounds.height;\n\tnewBounds.right = newBounds.left + newBounds.width;\n\n\t// Truncate portions off monitor in case we are downsizing from a maximized window\n\tif (newBounds.right > monitorRect.right) newBounds.right = monitorRect.right;\n\tif (newBounds.top < monitorRect.top) newBounds.top = monitorRect.top;\n\tif (newBounds.left < monitorRect.left) newBounds.left = monitorRect.left;\n\tif (newBounds.bottom > monitorRect.bottom) newBounds.bottom = monitorRect.bottom;\n\n\t// Recalculate width, height in case of truncation to ensure the window fits on the new monitor\n\tnewBounds.height = newBounds.bottom - newBounds.top;\n\tnewBounds.width = newBounds.right - newBounds.left;\n\n\t// Calculate distance the window moved\n\tlet distanceMoved = Math.sqrt((bounds.left - newBounds.left) ** 2 + (bounds.top - newBounds.top) ** 2);\n\n\treturn {\n\t\tnewBounds: newBounds,\n\t\tdistanceMoved: distanceMoved,\n\t\tmonitor: monitor\n\t};\n};\n\n/**\n * Given bounds of a window, will check all monitors against those bounds\n * Will return true if it is completely on a single monitor, false otherwise\n * @param {*} bounds\n * @returns True if the supplied bounds are entirely within a single monitor, false otherwise\n */\nexport function isOnAMonitor(bounds) {\n\treturn this.Monitors.allMonitors.some((monitor) => {\n\t\t/*\n\t\t * 8/26/19 Joe: This used to only use the monitorRect (the entirety of monitor's dimensions)\n\t\t * Switched it to use the unclaimedRect. If window is inside of claimed space, then its\n\t\t * in unusable space anyway.\n\t\t * Included whole rect as a fallback\n\t\t */\n\t\tlet monitorRect = monitor.unclaimedRect || monitor.monitorRect;\n\n\t\treturn bounds.left >= monitorRect.left && bounds.left <= monitorRect.right\n\t\t\t&& bounds.right >= monitorRect.left && bounds.right <= monitorRect.right\n\t\t\t&& bounds.top >= monitorRect.top && bounds.top <= monitorRect.bottom\n\t\t\t&& bounds.bottom >= monitorRect.top && bounds.bottom <= monitorRect.bottom;\n\t});\n}\n\n/**\n * Takes a window's bounds and makes sure it's on a monitor. If the window is just off the monitor, bounds will be adjusted to be on the monitor it was on and then the check will occur again. If the window isn't on a monitor (or runs off of a monitor), we determine the closest monitor\n * based on the distance from the top-left corner of the window to the center of the monitor, and then pull the monitor along that line\n * until the window is on the edge of the monitor\n * @param {*} currentBounds\n * @returns the new bounds for the window. which are different from currentBounds only if the window needs to be relocated\n */\nexport function adjustBoundsToBeOnMonitor(bounds) {\n\tif (this.isOnAMonitor(bounds)) {\n\t\t//If the window is already on a monitor keep the old bounds and stay on monitor\n\t\tLogger.system.info(\"Launcher.adjustWindowDescriptorBoundsToBeOnMonitor: on monitor.\");\n\t\treturn bounds;\n\t}\n\n\t// calculate if the window is on any monitor, and the distance between the top left and the center of the window\n\tlet monitorAdjustments = this.Monitors.allMonitors.map((monitor) => this.getNewBoundsWhenMovedToMonitor(monitor, bounds));\n\n\t// Get the closest monitor, the one with minimum distanceMoved\n\tlet monitorAdjustmentClosest = monitorAdjustments.sort((md1, md2) => md1.distanceMoved - md2.distanceMoved)[0];\n\n\t// notify the movement\n\tLogger.system.info(\"Launcher.adjustWindowDescriptorBoundsToBeOnMonitor: not on monitor.  bounds\", bounds, \"monitor name\", monitorAdjustmentClosest.monitor.name, \"newBounds\", monitorAdjustmentClosest.newBounds);\n\n\t// assign bounds\n\treturn monitorAdjustmentClosest.newBounds;\n};\n\n/**\n * Calculates windowType for a newly spawned window\n * windowType can be set or overwritten in many ways. The intention here is to end up with a limited set of\n * final windowTypes\n * @export\n * @param {*} config - Object containing all possible values used to set windowTypes, some of these values may be unset depending on the execution path\n */\nexport function getWindowType(config) {\n\tconst DEFAULT_WINDOW_TYPE = \"OpenFinWindow\";\n\t// All possible windowTypes. Some of these values will be converted to other types\n\tconst validTypes = [\n\t\t\"openfin\",\n\t\t\"assimilation\",\n\t\t\"assimilated\",\n\t\t\"native\",\n\t\t\"application\",\n\t\t\"OpenFinWindow\",\n\t\t\"NativeWindow\",\n\t\t\"FinsembleNativeWindow\",\n\t\t\"OpenFinApplication\",\n\t\t\"CompoundWindow\",\n\t\t\"StackedWindow\"\n\t];\n\t// If an invalid windowType is given, default and log an error. Note that an empty windowType\n\t// is not an error case. This is to let the user know that they may have made a typo setting a type in\n\t// the config file. We default to keep Finsemble from breaking, but the user may have intended to launch a\n\t// component as a different type.\n\tif (config.windowType && !validTypes.includes(config.windowType)) {\n\t\tLogger.system.error(`Invalid windowType: ${config.windowType}, defaulting to windowType: ${DEFAULT_WINDOW_TYPE}`);\n\t\treturn DEFAULT_WINDOW_TYPE;\n\t}\n\tlet ret = config.windowType || DEFAULT_WINDOW_TYPE;\n\n  // We allow several additional windowTypes to be inputted to make the config user-friendly\n\t// These windowTypes need to be converted to values Finsemble can process\n\tswitch (config.windowType) {\n\t\tcase \"assimilation\":\n\t\tcase \"assimilated\":\n\t\t\tret = \"NativeWindow\";\n\t\t\tbreak;\n\t\tcase \"native\":\n\t\t\tret = \"FinsembleNativeWindow\";\n\t\t\tbreak;\n\t\tcase \"application\":\n\t\t\tret = \"OpenFinApplication\";\n\t\t\tbreak;\n\t\tcase \"openfin\":\n\t\t\tret = \"OpenFinWindow\";\n\t\t\tbreak;\n\t\tcase \"StackedWindow\":\n\t\t\tret = \"StackedWindow\";\n\t\t\tbreak;\n\t\t// If config.windowType is unset, we'll use the DEFAULT_WINDOW_TYPE\n\t\tcase \"default\":\n\t\t\tbreak;\n\t}\n\n\t// Next handle any backward compatibility windowType inputs\n\tif (config.native) ret = \"NativeWindow\"; //Backward Compatibility\n\tif (config.type === \"openfinApplication\") ret = \"OpenFinApplication\"; //Backward Compatibility\n\tif (config.compound) ret = \"CompoundWindow\";\n\treturn ret;\n}\n\nexport function adjustWindowIfInTaskbarSpace(bounds) {\n\tlet adjustedBounds = this.clone(bounds);\n\n\t//Only one adjustment should be necessary if the docked window is now inside of taskbar space,\n\t//making anymore than one means we need to find a new monitor\n\tlet wasAdjusted = false;\n\tthis.Monitors.allMonitors.forEach(monitor => {\n\t\t// For each monitor, see if the window to be adjusted is currently\n\t\t// 'inside' of the monitor's taskbar space. If so, adjust to be right\n\t\t// below/above the taskbar and recheck isOnAMonitor\n\t\tif (windowBoundsAreInTaskbarSpace(bounds, monitor) && !wasAdjusted) {\n\t\t\tconst taskbar = calculateTaskbarBounds(monitor);\n\t\t\tconst monitorRect = monitor.unclaimedRect || monitor.monitorRect;\n\n\t\t\tswitch (taskbar.edge) {\n\t\t\t\tcase \"top\":\n\t\t\t\t\tadjustedBounds.top = monitorRect.top;\n\t\t\t\t\tadjustedBounds.bottom = adjustedBounds.top + adjustedBounds.height;\n\t\t\t\t\twasAdjusted = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"bottom\":\n\t\t\t\t\tadjustedBounds.top = monitorRect.bottom - adjustedBounds.height;\n\t\t\t\t\tadjustedBounds.bottom = monitorRect.bottom;\n\t\t\t\t\twasAdjusted = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"left\":\n\t\t\t\t\tadjustedBounds.left = monitorRect.left;\n\t\t\t\t\tadjustedBounds.right = adjustedBounds.left + adjustedBounds.width;\n\t\t\t\t\twasAdjusted = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"right\":\n\t\t\t\t\tadjustedBounds.left = adjustedBounds.right - adjustedBounds.width;\n\t\t\t\t\tadjustedBounds.right = monitorRect.right;\n\t\t\t\t\twasAdjusted = true;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\t// After adjusting bounds to be on the monitor's new dimensions check if the window is\n\t// now on the monitor\n\t// If the window can stay on the current monitor with adjusted bounds, there is no need\n\t// to determine a new monitor to move to. Return the adjusted bounds\n\tif (wasAdjusted && this.isOnAMonitor(adjustedBounds)) {\n\t\treturn adjustedBounds;\n\t}\n\n\treturn this.adjustBoundsToBeOnMonitor(bounds);\n}\n\n/**\n * Takes a window's bounds and a monitor, returns true if the window is in\n * the monitor's taskbar space, false otherwise.\n * @param {*} windowBounds\n * @param {*} monitor\n */\nfunction windowBoundsAreInTaskbarSpace(windowBounds, monitor) {\n\tconst taskbar = calculateTaskbarBounds(monitor);\n\n\tif (!taskbar) return false;\n\n\tswitch (taskbar.edge) {\n\t\tcase \"top\":\n\t\tcase \"bottom\":\n\t\t\treturn windowBounds.top >= taskbar.top &&\n\t\t\t\twindowBounds.bottom <= taskbar.bottom &&\n\t\t\t\twindowBounds.left >= taskbar.left &&\n\t\t\t\twindowBounds.right <= taskbar.right;\n\t\tcase \"left\":\n\t\tcase \"right\":\n\t\t\treturn windowBounds.left >= taskbar.left &&\n\t\t\t\twindowBounds.right <= taskbar.right &&\n\t\t\t\twindowBounds.top >= taskbar.top &&\n\t\t\t\twindowBounds.bottom <= taskbar.bottom;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\n/**\n * Given a monitor, will return the Windows taskbar's claimed space.\n * In electron, this comes with monitor info. In openfin it must be calculated using the differences in\n * monitor.availableRect and monitor.monitorRect.\n * @param {*} monitor The monitor to return the taskbar bounds for\n * @return {*} A bounding box object containing dimensions for the monitor's taskbar (top, bottom, left, right, width, height, and edge)\n * or undefined if the taskbar doesn't exist (Windows 7 has only one taskbar even in a multi-monitor setup, so this is a plausible scenario)\n */\nfunction calculateTaskbarBounds(monitor) {\n\t//Electron keeps a representation of the taskbar on each monitor\n\tif (fin.container === \"Electron\" && monitor.taskbar) {\n\t\treturn monitor.taskbar;\n\t}\n\n\t//OpenFin is left to calculate it with monitorRect/availableRect\n\tif (monitor.availableRect && monitor.monitorRect) {\n\t\tconst usableBounds = monitor.availableRect;\n\t\tconst allBounds = monitor.monitorRect;\n\n\t\t//The edge that differs between monitorRect and availableRect is where the toolbar is.\n\t\t//Calculating that edge here\n\t\tconst differingEdge = findDifferingDimension(allBounds, usableBounds);\n\n\t\t//If this happens it is not necessarily an error, it depends on the environment. Send it as a verbose message.\n\t\t//If it does happen, and is the cause of an error, it will be logged but out-of-the-way for anyone with standard logging\n\t\tif (!differingEdge) {\n\t\t\tLogger.system.debug(\"Utils.calculateTaskbarBounds: Taskbar not found on current monitor: \", monitor);\n\t\t}\n\n\t\tlet taskbar = {\n\t\t\tedge: differingEdge\n\t\t};\n\n\t\t/*\n\t\t * Picturing monitors as coordinate representations, given monitorRect (the entire monitors bounds)\n\t\t * and availableRect (the usable space according to the OS), we can determine where the OS's 'claimed' space/taskbar are.\n\t\t *\n\t\t * e.g.\n\t\t *\n\t\t * This entire square (monitor) is 'monitorRect'\n\t\t * +------------------------------------------+\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |               availableRect              |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * |                                          |\n\t\t * +------------------------------------------+\n\t\t * |                 Taskbar                  |\n\t\t * +------------------------------------------+\n\n\n\t\t */\n\t\tif (differingEdge === \"top\" || differingEdge === \"bottom\") {\n\n\t\t\ttaskbar.left = allBounds.left;\n\t\t\ttaskbar.right = allBounds.right;\n\t\t\ttaskbar.width = allBounds.width;\n\t\t\ttaskbar.height = allBounds.height - usableBounds.height;\n\n\t\t\tif (differingEdge === \"top\") {\n\t\t\t\ttaskbar.top = allBounds.top;\n\t\t\t\ttaskbar.bottom = usableBounds.top;\n\t\t\t} else {\n\t\t\t\ttaskbar.top = usableBounds.bottom;\n\t\t\t\ttaskbar.bottom = allBounds.bottom;\n\t\t\t}\n\n\t\t} else if (differingEdge === \"left\" || differingEdge === \"right\") {\n\n\t\t\ttaskbar.top = allBounds.top;\n\t\t\ttaskbar.bottom = allBounds.bottom;\n\t\t\ttaskbar.width = allBounds.width - usableBounds.width;\n\t\t\ttaskbar.height = allBounds.height;\n\n\t\t\tif (differingEdge === \"left\") {\n\t\t\t\ttaskbar.left = allBounds.left;\n\t\t\t\ttaskbar.right = usableBounds.left;\n\t\t\t} else {\n\t\t\t\ttaskbar.left = usableBounds.right;\n\t\t\t\ttaskbar.right = allBounds.right;\n\t\t\t}\n\n\t\t} else {\n\t\t\ttaskbar = undefined;\n\t\t}\n\n\t\treturn taskbar;\n\t}\n}\n\n/**\n * Given two bounding boxes (objects containing all bounds: top, left, right, bottom, width, height) returns\n * the dimension which differs between the two\n * @param {*} boundingBox1\n * @param {*} boundingBox2\n * @return {string} The string representation of the differing dimension\n */\nfunction findDifferingDimension(boundingBox1, boundingBox2) {\n\tfor (let i = 0; i < Object.keys(boundingBox1).length; i++) {\n\t\tconst dimensionName = Object.keys(boundingBox1)[i];\n\t\tif (boundingBox1[dimensionName] !== boundingBox2[dimensionName]) {\n\t\t\treturn dimensionName;\n\t\t}\n\t}\n\n\t//Return null if no differing dimension found\n\treturn null;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/util.js","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (factory((global.async = global.async || {})));\n}(this, (function (exports) { 'use strict';\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest$1(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\n// Lodash rest function without function.toString()\n// remappings\nfunction rest(func, start) {\n    return overRest$1(func, start, identity);\n}\n\nvar initialParams = function (fn) {\n    return rest(function (args /*..., callback*/) {\n        var callback = args.pop();\n        fn.call(this, args, callback);\n    });\n};\n\nfunction applyEach$1(eachfn) {\n    return rest(function (fns, args) {\n        var go = initialParams(function (args, callback) {\n            var that = this;\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat(cb));\n            }, callback);\n        });\n        if (args.length) {\n            return go.apply(this, args);\n        } else {\n            return go;\n        }\n    });\n}\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Built-in value references. */\nvar Symbol$1 = root.Symbol;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n\n  try {\n    value[symToStringTag$1] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag$1] = tag;\n    } else {\n      delete value[symToStringTag$1];\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$1 = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString$1 = objectProto$1.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString$1.call(value);\n}\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]';\nvar funcTag = '[object Function]';\nvar genTag = '[object GeneratorFunction]';\nvar proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nvar breakLoop = {};\n\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nfunction once(fn) {\n    return function () {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nvar iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n\nvar getIterator = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n};\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/** Used for built-in method references. */\nvar objectProto$3 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/** `Object#toString` result references. */\nvar argsTag$1 = '[object Arguments]';\nvar arrayTag = '[object Array]';\nvar boolTag = '[object Boolean]';\nvar dateTag = '[object Date]';\nvar errorTag = '[object Error]';\nvar funcTag$1 = '[object Function]';\nvar mapTag = '[object Map]';\nvar numberTag = '[object Number]';\nvar objectTag = '[object Object]';\nvar regexpTag = '[object RegExp]';\nvar setTag = '[object Set]';\nvar stringTag = '[object String]';\nvar weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]';\nvar dataViewTag = '[object DataView]';\nvar float32Tag = '[object Float32Array]';\nvar float64Tag = '[object Float64Array]';\nvar int8Tag = '[object Int8Array]';\nvar int16Tag = '[object Int16Array]';\nvar int32Tag = '[object Int32Array]';\nvar uint8Tag = '[object Uint8Array]';\nvar uint8ClampedTag = '[object Uint8ClampedArray]';\nvar uint16Tag = '[object Uint16Array]';\nvar uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag$1] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/** Detect free variable `exports`. */\nvar freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports$1 && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/** Used for built-in method references. */\nvar objectProto$2 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty$1.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar objectProto$5 = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;\n\n  return value === proto;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\n/** Used for built-in method references. */\nvar objectProto$4 = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? { value: coll[i], key: i } : null;\n    };\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done) return null;\n        i++;\n        return { value: item.value, key: i };\n    };\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = keys(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? { value: obj[key], key: key } : null;\n    };\n}\n\nfunction iterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function () {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, arguments);\n    };\n}\n\nfunction _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n        callback = once(callback || noop);\n        if (limit <= 0 || !obj) {\n            return callback(null);\n        }\n        var nextElem = iterator(obj);\n        var done = false;\n        var running = 0;\n\n        function iterateeCallback(err, value) {\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            } else if (value === breakLoop || done && running <= 0) {\n                done = true;\n                return callback(null);\n            } else {\n                replenish();\n            }\n        }\n\n        function replenish() {\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n        }\n\n        replenish();\n    };\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array. The iteratee is passed a `callback(err)` which must be called once it\n * has completed. If no error has occurred, the callback should be run without\n * arguments or with an explicit `null` argument. Invoked with\n * (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n  _eachOfLimit(limit)(coll, iteratee, callback);\n}\n\nfunction doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n        return fn(iterable, limit, iteratee, callback);\n    };\n}\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback || noop);\n    var index = 0,\n        completed = 0,\n        length = coll.length;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err) {\n            callback(err);\n        } else if (++completed === length || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nvar eachOfGeneric = doLimit(eachOfLimit, Infinity);\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array. The iteratee is passed a `callback(err)` which must be called once it\n * has completed. If no error has occurred, the callback should be run without\n * arguments or with an explicit `null` argument. Invoked with\n * (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nvar eachOf = function (coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, iteratee, callback);\n};\n\nfunction doParallel(fn) {\n    return function (obj, iteratee, callback) {\n        return fn(eachOf, obj, iteratee, callback);\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    callback = callback || noop;\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n\n    eachfn(arr, function (value, _, callback) {\n        var index = counter++;\n        iteratee(value, function (err, v) {\n            results[index] = v;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines)\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a\n * transformed item. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nvar map = doParallel(_asyncMap);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of asynchronous functions\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument, `fns`, is provided, it will\n * return a function which lets you pass in the arguments as if it were a single\n * function call. The signature is `(..args, callback)`. If invoked with any\n * arguments, `callback` is required.\n * @example\n *\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async.applyEach([enableSearch, updateSchema]),\n *     callback\n * );\n */\nvar applyEach = applyEach$1(map);\n\nfunction doParallelLimit(fn) {\n    return function (obj, limit, iteratee, callback) {\n        return fn(_eachOfLimit(limit), obj, iteratee, callback);\n    };\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a transformed\n * item. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapLimit = doParallelLimit(_asyncMap);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a\n * transformed item. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nvar mapSeries = doLimit(mapLimit, 1);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument is provided, it will return\n * a function which lets you pass in the arguments as if it were a single\n * function call.\n */\nvar applyEachSeries = applyEach$1(mapSeries);\n\n/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} function - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nvar apply$2 = rest(function (fn, args) {\n    return rest(function (callArgs) {\n        return fn.apply(null, args.concat(callArgs));\n    });\n});\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2016 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function to convert to an\n * asynchronous function.\n * @returns {Function} An asynchronous wrapper of the `func`. To be invoked with\n * (callback).\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es6 example\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (isObject(result) && typeof result.then === 'function') {\n            result.then(function (value) {\n                callback(null, value);\n            }, function (err) {\n                callback(err.message ? err : new Error(err));\n            });\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\n/**\n * Determines the best order for running the functions in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the functions pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * Functions also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the function itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns undefined\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nvar auto = function (tasks, concurrency, callback) {\n    if (typeof concurrency === 'function') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || noop);\n    var keys$$1 = keys(tasks);\n    var numTasks = keys$$1.length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    baseForOwn(tasks, function (task, key) {\n        if (!isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        arrayEach(dependencies, function (dependencyName) {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));\n            }\n            addListener(dependencyName, function () {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(function () {\n            runTask(key, task);\n        });\n    }\n\n    function processQueue() {\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while (readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        arrayEach(taskListeners, function (fn) {\n            fn();\n        });\n        processQueue();\n    }\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce(rest(function (err, args) {\n            runningTasks--;\n            if (args.length <= 1) {\n                args = args[0];\n            }\n            if (err) {\n                var safeResults = {};\n                baseForOwn(results, function (val, rkey) {\n                    safeResults[rkey] = val;\n                });\n                safeResults[key] = args;\n                hasError = true;\n                listeners = Object.create(null);\n\n                callback(err, safeResults);\n            } else {\n                results[key] = args;\n                taskComplete(key);\n            }\n        }));\n\n        runningTasks++;\n        var taskFn = task[task.length - 1];\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            arrayEach(getDependents(currentTask), function (dependent) {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error('async.auto cannot execute tasks due to a recursive dependency');\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        baseForOwn(tasks, function (task, key) {\n            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n};\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n */\nfunction charsEndIndex(strSymbols, chrSymbols) {\n  var index = strSymbols.length;\n\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f';\nvar reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f';\nvar rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff';\nvar rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\nvar rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange$1 = '\\\\ud800-\\\\udfff';\nvar rsComboMarksRange$1 = '\\\\u0300-\\\\u036f';\nvar reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f';\nvar rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff';\nvar rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\nvar rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange$1 + ']';\nvar rsCombo = '[' + rsComboRange$1 + ']';\nvar rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nvar rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\nvar rsNonAstral = '[^' + rsAstralRange$1 + ']';\nvar rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nvar rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nvar rsZWJ$1 = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?';\nvar rsOptVar = '[' + rsVarRange$1 + ']?';\nvar rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\nvar rsSeq = rsOptVar + reOptMod + rsOptJoin;\nvar rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nvar FN_ARGS = /^(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    func = func.toString().replace(STRIP_COMMENTS, '');\n    func = func.match(FN_ARGS)[2].replace(' ', '');\n    func = func ? func.split(FN_ARG_SPLIT) : [];\n    func = func.map(function (arg) {\n        return trim(arg.replace(FN_ARG, ''));\n    });\n    return func;\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is a function of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    baseForOwn(tasks, function (taskFn, key) {\n        var params;\n\n        if (isArray(taskFn)) {\n            params = taskFn.slice(0, -1);\n            taskFn = taskFn[taskFn.length - 1];\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (taskFn.length === 1) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if (taskFn.length === 0 && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = arrayMap(params, function (name) {\n                return results[name];\n            });\n            newArgs.push(taskCb);\n            taskFn.apply(null, newArgs);\n        }\n    });\n\n    auto(newTasks, callback);\n}\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return rest(function (fn, args) {\n        defer(function () {\n            fn.apply(null, args);\n        });\n    });\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nfunction DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nDLL.prototype.removeLink = function (node) {\n    if (node.prev) node.prev.next = node.next;else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n};\n\nDLL.prototype.empty = DLL;\n\nDLL.prototype.insertAfter = function (node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.insertBefore = function (node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n};\n\nDLL.prototype.unshift = function (node) {\n    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n};\n\nDLL.prototype.push = function (node) {\n    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n};\n\nDLL.prototype.shift = function () {\n    return this.head && this.removeLink(this.head);\n};\n\nDLL.prototype.pop = function () {\n    return this.tail && this.removeLink(this.tail);\n};\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    } else if (concurrency === 0) {\n        throw new Error('Concurrency must not be zero');\n    }\n\n    function _insert(data, insertAtFront, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function () {\n                q.drain();\n            });\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                callback: callback || noop\n            };\n\n            if (insertAtFront) {\n                q._tasks.unshift(item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n        setImmediate$1(q.process);\n    }\n\n    function _next(tasks) {\n        return rest(function (args) {\n            workers -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n                var index = baseIndexOf(workersList, task, 0);\n                if (index >= 0) {\n                    workersList.splice(index);\n                }\n\n                task.callback.apply(task, args);\n\n                if (args[0] != null) {\n                    q.error(args[0], task.data);\n                }\n            }\n\n            if (workers <= q.concurrency - q.buffer) {\n                q.unsaturated();\n            }\n\n            if (q.idle()) {\n                q.drain();\n            }\n            q.process();\n        });\n    }\n\n    var workers = 0;\n    var workersList = [];\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        concurrency: concurrency,\n        payload: payload,\n        saturated: noop,\n        unsaturated: noop,\n        buffer: concurrency / 4,\n        empty: noop,\n        drain: noop,\n        error: noop,\n        started: false,\n        paused: false,\n        push: function (data, callback) {\n            _insert(data, false, callback);\n        },\n        kill: function () {\n            q.drain = noop;\n            q._tasks.empty();\n        },\n        unshift: function (data, callback) {\n            _insert(data, true, callback);\n        },\n        process: function () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while (!q.paused && workers < q.concurrency && q._tasks.length) {\n                var tasks = [],\n                    data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    data.push(node.data);\n                }\n\n                if (q._tasks.length === 0) {\n                    q.empty();\n                }\n                workers += 1;\n                workersList.push(tasks[0]);\n\n                if (workers === q.concurrency) {\n                    q.saturated();\n                }\n\n                var cb = onlyOnce(_next(tasks));\n                worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length: function () {\n            return q._tasks.length;\n        },\n        running: function () {\n            return workers;\n        },\n        workersList: function () {\n            return workersList;\n        },\n        idle: function () {\n            return q._tasks.length + workers === 0;\n        },\n        pause: function () {\n            q.paused = true;\n        },\n        resume: function () {\n            if (q.paused === false) {\n                return;\n            }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    return q;\n}\n\n/**\n * A cargo of tasks for the worker function to complete. Cargo inherits all of\n * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\n * @typedef {Object} CargoObject\n * @memberOf module:ControlFlow\n * @property {Function} length - A function returning the number of items\n * waiting to be processed. Invoke like `cargo.length()`.\n * @property {number} payload - An `integer` for determining how many tasks\n * should be process per round. This property can be changed after a `cargo` is\n * created to alter the payload on-the-fly.\n * @property {Function} push - Adds `task` to the `queue`. The callback is\n * called once the `worker` has finished processing the task. Instead of a\n * single task, an array of `tasks` can be submitted. The respective callback is\n * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\n * @property {Function} saturated - A callback that is called when the\n * `queue.length()` hits the concurrency and further tasks will be queued.\n * @property {Function} empty - A callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - A callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke like `cargo.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\n */\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {Function} worker - An asynchronous function for processing an array\n * of queued tasks, which must call its `callback(err)` argument when finished,\n * with an optional `err` argument. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargo.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n */\nfunction cargo(worker, payload) {\n  return queue(worker, 1, payload);\n}\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`. The\n * `key` is the item's key, or index in the case of an array. The iteratee is\n * passed a `callback(err)` which must be called once it has completed. If no\n * error has occurred, the callback should be run without arguments or with an\n * explicit `null` argument. Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachOfSeries = doLimit(eachOfLimit, 1);\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {Function} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction. The `iteratee` is passed a\n * `callback(err, reduction)` which accepts an optional error as its first\n * argument, and the state of the reduction as the second. If an error is\n * passed to the callback, the reduction is stopped and the main `callback` is\n * immediately called with the error. Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback || noop);\n    eachOfSeries(coll, function (x, i, callback) {\n        iteratee(memo, x, function (err, v) {\n            memo = v;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, memo);\n    });\n}\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...Function} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nvar seq$1 = rest(function seq(functions) {\n    return rest(function (args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = noop;\n        }\n\n        reduce(functions, args, function (newargs, fn, cb) {\n            fn.apply(that, newargs.concat(rest(function (err, nextargs) {\n                cb(err, nextargs);\n            })));\n        }, function (err, results) {\n            cb.apply(that, [err].concat(results));\n        });\n    });\n});\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...Function} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nvar compose = rest(function (args) {\n  return seq$1.apply(null, args.reverse());\n});\n\nfunction concat$1(eachfn, arr, fn, callback) {\n    var result = [];\n    eachfn(arr, function (x, index, cb) {\n        fn(x, function (err, y) {\n            result = result.concat(y || []);\n            cb(err);\n        });\n    }, function (err) {\n        callback(err, result);\n    });\n}\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. There is no guarantee that the\n * results array will be returned in the original order of `coll` passed to the\n * `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, results)` which must be called once\n * it has completed with an error (which can be `null`) and an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nvar concat = doParallel(concat$1);\n\nfunction doSeries(fn) {\n    return function (obj, iteratee, callback) {\n        return fn(eachOfSeries, obj, iteratee, callback);\n    };\n}\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, results)` which must be called once\n * it has completed with an error (which can be `null`) and an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback(err)] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n */\nvar concatSeries = doSeries(concat$1);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {Function} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nvar constant = rest(function (values) {\n    var args = [null].concat(values);\n    return initialParams(function (ignoredArgs, callback) {\n        return callback.apply(this, args);\n    });\n});\n\nfunction _createTester(check, getResult) {\n    return function (eachfn, arr, iteratee, cb) {\n        cb = cb || noop;\n        var testPassed = false;\n        var testResult;\n        eachfn(arr, function (value, _, callback) {\n            iteratee(value, function (err, result) {\n                if (err) {\n                    callback(err);\n                } else if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    callback(null, breakLoop);\n                } else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            if (err) {\n                cb(err);\n            } else {\n                cb(null, testPassed ? testResult : getResult(false));\n            }\n        });\n    };\n}\n\nfunction _findGetResult(v, x) {\n    return x;\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, truthValue)` which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nvar detect = doParallel(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, truthValue)` which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, truthValue)` which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nvar detectSeries = doLimit(detectLimit, 1);\n\nfunction consoleFunc(name) {\n    return rest(function (fn, args) {\n        fn.apply(null, args.concat(rest(function (err, args) {\n            if (typeof console === 'object') {\n                if (err) {\n                    if (console.error) {\n                        console.error(err);\n                    }\n                } else if (console[name]) {\n                    arrayEach(args, function (x) {\n                        console[name](x);\n                    });\n                }\n            }\n        })));\n    });\n}\n\n/**\n * Logs the result of an `async` function to the `console` using `console.dir`\n * to display the properties of the resulting object. Only works in Node.js or\n * in browsers that support `console.dir` and `console.error` (such as FF and\n * Chrome). If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} function - The function you want to eventually apply all\n * arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\n * the order of operations, the arguments `test` and `fn` are switched.\n *\n * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\n * @name doDuring\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.during]{@link module:ControlFlow.during}\n * @category Control Flow\n * @param {Function} fn - A function which is called each time `test` passes.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `fn`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error if one occured, otherwise `null`.\n */\nfunction doDuring(fn, test, callback) {\n    callback = onlyOnce(callback || noop);\n\n    var next = rest(function (err, args) {\n        if (err) return callback(err);\n        args.push(check);\n        test.apply(this, args);\n    });\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        fn(next);\n    }\n\n    check(null, true);\n}\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} iteratee - A function which is called each time `test`\n * passes. The function is passed a `callback(err)`, which must be called once\n * it has completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `iteratee`. Invoked with the non-error callback results of \n * `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var next = rest(function (err, args) {\n        if (err) return callback(err);\n        if (test.apply(this, args)) return iteratee(next);\n        callback.apply(null, [null].concat(args));\n    });\n    iteratee(next);\n}\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {Function} fn - A function which is called each time `test` fails.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `fn`. Invoked with the non-error callback results of `fn`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `fn`'s\n * callback. Invoked with (err, [results]);\n */\nfunction doUntil(fn, test, callback) {\n    doWhilst(fn, function () {\n        return !test.apply(this, arguments);\n    }, callback);\n}\n\n/**\n * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n * is passed a callback in the form of `function (err, truth)`. If error is\n * passed to `test` or `fn`, the main callback is immediately called with the\n * value of the error.\n *\n * @name during\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (callback).\n * @param {Function} fn - A function which is called each time `test` passes.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error, if one occured, otherwise `null`.\n * @example\n *\n * var count = 0;\n *\n * async.during(\n *     function (callback) {\n *         return callback(null, count < 5);\n *     },\n *     function (callback) {\n *         count++;\n *         setTimeout(callback, 1000);\n *     },\n *     function (err) {\n *         // 5 seconds have passed\n *     }\n * );\n */\nfunction during(test, fn, callback) {\n    callback = onlyOnce(callback || noop);\n\n    function next(err) {\n        if (err) return callback(err);\n        test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        fn(next);\n    }\n\n    test(check);\n}\n\nfunction _withoutIndex(iteratee) {\n    return function (value, index, callback) {\n        return iteratee(value, callback);\n    };\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item\n * in `coll`. The iteratee is passed a `callback(err)` which must be called once\n * it has completed. If no error has occurred, the `callback` should be run\n * without arguments or with an explicit `null` argument. The array index is not\n * passed to the iteratee. Invoked with (item, callback). If you need the index,\n * use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n  eachOf(coll, _withoutIndex(iteratee), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each item in `coll`. The\n * iteratee is passed a `callback(err)` which must be called once it has\n * completed. If no error has occurred, the `callback` should be run without\n * arguments or with an explicit `null` argument. The array index is not passed\n * to the iteratee. Invoked with (item, callback). If you need the index, use\n * `eachOfLimit`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n  _eachOfLimit(limit)(coll, _withoutIndex(iteratee), callback);\n}\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each\n * item in `coll`. The iteratee is passed a `callback(err)` which must be called\n * once it has completed. If no error has occurred, the `callback` should be run\n * without arguments or with an explicit `null` argument. The array index is\n * not passed to the iteratee. Invoked with (item, callback). If you need the\n * index, use `eachOfSeries`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n */\nvar eachSeries = doLimit(eachLimit$1, 1);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {Function} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    return initialParams(function (args, callback) {\n        var sync = true;\n        args.push(function () {\n            var innerArgs = arguments;\n            if (sync) {\n                setImmediate$1(function () {\n                    callback.apply(null, innerArgs);\n                });\n            } else {\n                callback.apply(null, innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    });\n}\n\nfunction notId(v) {\n    return !v;\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the\n * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\n * which must be called with a  boolean argument once it has completed. Invoked\n * with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nvar every = doParallel(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in the\n * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\n * which must be called with a  boolean argument once it has completed. Invoked\n * with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everyLimit = doParallelLimit(_createTester(notId, notId));\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the\n * collection in parallel. The iteratee is passed a `callback(err, truthValue)`\n * which must be called with a  boolean argument once it has completed. Invoked\n * with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n */\nvar everySeries = doLimit(everyLimit, 1);\n\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            truthValues[index] = !!v;\n            callback(err);\n        });\n    }, function (err) {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, function (x, index, callback) {\n        iteratee(x, function (err, v) {\n            if (err) {\n                callback(err);\n            } else {\n                if (v) {\n                    results.push({ index: index, value: x });\n                }\n                callback();\n            }\n        });\n    }, function (err) {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, arrayMap(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), baseProperty('value')));\n        }\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    filter(eachfn, coll, iteratee, callback || noop);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nvar filter = doParallel(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar filterLimit = doParallelLimit(_filter);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n */\nvar filterSeries = doLimit(filterLimit, 1);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the\n * callback then `errback` is called with the error, and execution stops,\n * otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} fn - a function to call repeatedly. Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback || noop);\n    var task = ensureAsync(fn);\n\n    function next(err) {\n        if (err) return done(err);\n        task(next);\n    }\n    next();\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} function - The function you want to eventually apply all\n * arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A function to apply to each value in `obj`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a\n * transformed value. Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback || noop);\n    var newObj = {};\n    eachOfLimit(obj, limit, function (val, key, next) {\n        iteratee(val, key, function (err, result) {\n            if (err) return next(err);\n            newObj[key] = result;\n            next();\n        });\n    }, function (err) {\n        callback(err, newObj);\n    });\n}\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each value and key in\n * `coll`. The iteratee is passed a `callback(err, transformed)` which must be\n * called once it has completed with an error (which can be `null`) and a\n * transformed value. Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\n\nvar mapValues = doLimit(mapValuesLimit, Infinity);\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each value in `obj`.\n * The iteratee is passed a `callback(err, transformed)` which must be called\n * once it has completed with an error (which can be `null`) and a\n * transformed value. Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n */\nvar mapValuesSeries = doLimit(mapValuesLimit, 1);\n\nfunction has(obj, key) {\n    return key in obj;\n}\n\n/**\n * Caches the results of an `async` function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {Function} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    hasher = hasher || identity;\n    var memoized = initialParams(function memoized(args, callback) {\n        var key = hasher.apply(null, args);\n        if (has(memo, key)) {\n            setImmediate$1(function () {\n                callback.apply(null, memo[key]);\n            });\n        } else if (has(queues, key)) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            fn.apply(null, args.concat(rest(function (args) {\n                memo[key] = args;\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i].apply(null, args);\n                }\n            })));\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `setImmediate`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @alias setImmediate\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nfunction _parallel(eachfn, tasks, callback) {\n    callback = callback || noop;\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, function (task, key, callback) {\n        task(rest(function (err, args) {\n            if (args.length <= 1) {\n                args = args[0];\n            }\n            results[key] = args;\n            callback(err);\n        }));\n    }, function (err) {\n        callback(err, results);\n    });\n}\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to run.\n * Each function is passed a `callback(err, result)` which it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallelLimit(tasks, callback) {\n  _parallel(eachOf, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Collection} tasks - A collection containing functions to run.\n * Each function is passed a `callback(err, result)` which it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n */\nfunction parallelLimit$1(tasks, limit, callback) {\n  _parallel(_eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Object} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {Function} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {Function} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {Function} saturated - a callback that is called when the number of\n * running workers hits the `concurrency` limit, and further tasks will be\n * queued.\n * @property {Function} unsaturated - a callback that is called when the number\n * of running workers is less than the `concurrency` & `buffer` limits, and\n * further tasks will not be queued.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a callback that is called when the last item\n * from the `queue` is given to a `worker`.\n * @property {Function} drain - a callback that is called when the last item\n * from the `queue` has returned from the `worker`.\n * @property {Function} error - a callback that is called when a task errors.\n * Has the signature `function(error, task)`.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. Invoke with `queue.kill()`.\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} worker - An asynchronous function for processing a queued\n * task, which must call its `callback(err)` argument when finished, with an\n * optional `error` as an argument.  If you want to handle errors from an\n * individual task, pass a callback to `q.push()`. Invoked with\n * (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain = function() {\n *     console.log('all items have been processed');\n * };\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * q.push({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nvar queue$1 = function (worker, concurrency) {\n  return queue(function (items, cb) {\n    worker(items[0], cb);\n  }, concurrency, 1);\n};\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {Function} worker - An asynchronous function for processing a queued\n * task, which must call its `callback(err)` argument when finished, with an\n * optional `error` as an argument.  If you want to handle errors from an\n * individual task, pass a callback to `q.push()`. Invoked with\n * (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nvar priorityQueue = function (worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    // Override push to accept second parameter representing priority\n    q.push = function (data, priority, callback) {\n        if (callback == null) callback = noop;\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(function () {\n                q.drain();\n            });\n        }\n\n        priority = priority || 0;\n        var nextNode = q._tasks.head;\n        while (nextNode && priority >= nextNode.priority) {\n            nextNode = nextNode.next;\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority: priority,\n                callback: callback\n            };\n\n            if (nextNode) {\n                q._tasks.insertBefore(nextNode, item);\n            } else {\n                q._tasks.push(item);\n            }\n        }\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n};\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing functions to run. Each function\n * is passed a `callback(err, result)` which it must call on completion with an\n * error `err` (which can be `null`) and an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        tasks[i](callback);\n    }\n}\n\nvar slice = Array.prototype.slice;\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {Function} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction. The `iteratee` is passed a\n * `callback(err, reduction)` which accepts an optional error as its first\n * argument, and the state of the reduction as the second. If an error is\n * passed to the callback, the reduction is stopped and the main `callback` is\n * immediately called with the error. Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n */\nfunction reduceRight(array, memo, iteratee, callback) {\n  var reversed = slice.call(array).reverse();\n  reduce(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the function in another function that always returns data even when it\n * errors.\n *\n * The object returned has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push(rest(function callback(err, cbArgs) {\n            if (err) {\n                reflectCallback(null, {\n                    error: err\n                });\n            } else {\n                var value = null;\n                if (cbArgs.length === 1) {\n                    value = cbArgs[0];\n                } else if (cbArgs.length > 1) {\n                    value = cbArgs;\n                }\n                reflectCallback(null, {\n                    value: value\n                });\n            }\n        }));\n\n        return fn.apply(this, args);\n    });\n}\n\nfunction reject$1(eachfn, arr, iteratee, callback) {\n    _filter(eachfn, arr, function (value, cb) {\n        iteratee(value, function (err, v) {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nvar reject = doParallel(reject$1);\n\n/**\n * A helper function that wraps an array or an object of functions with reflect.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array} tasks - The array of functions to wrap in `async.reflect`.\n * @returns {Array} Returns an array of functions, each function wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (isArray(tasks)) {\n        results = arrayMap(tasks, reflect);\n    } else {\n        results = {};\n        baseForOwn(tasks, function (task, key) {\n            results[key] = reflect.call(this, task);\n        });\n    }\n    return results;\n}\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectLimit = doParallelLimit(reject$1);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n */\nvar rejectSeries = doLimit(rejectLimit, 1);\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant$1(value) {\n  return function() {\n    return value;\n  };\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {Function} task - A function which receives two arguments: (1) a\n * `callback(err, result)` which must be called when finished, passing `err`\n * (which can be `null`) and the `result` of the function's execution, and (2)\n * a `results` object, containing the results of the previously executed\n * functions (if nested inside another control flow). Invoked with\n * (callback, results).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // It can also be embedded within other control flow functions to retry\n * // individual methods that are not as reliable, like this:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retry(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nfunction retry(opts, task, callback) {\n    var DEFAULT_TIMES = 5;\n    var DEFAULT_INTERVAL = 0;\n\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    function parseTimes(acc, t) {\n        if (typeof t === 'object') {\n            acc.times = +t.times || DEFAULT_TIMES;\n\n            acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);\n\n            acc.errorFilter = t.errorFilter;\n        } else if (typeof t === 'number' || typeof t === 'string') {\n            acc.times = +t || DEFAULT_TIMES;\n        } else {\n            throw new Error(\"Invalid arguments for async.retry\");\n        }\n    }\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || noop;\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || noop;\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var attempt = 1;\n    function retryAttempt() {\n        task(function (err) {\n            if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt));\n            } else {\n                callback.apply(null, arguments);\n            }\n        });\n    }\n\n    retryAttempt();\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method wraps a task and makes it\n * retryable, rather than immediately calling it with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`\n * @param {Function} task - the asynchronous function to wrap\n * @returns {Functions} The wrapped function, which when invoked, will retry on\n * an error, based on the parameters specified in `opts`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nvar retryable = function (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    return initialParams(function (args, callback) {\n        function taskFn(cb) {\n            task.apply(null, args.concat(cb));\n        }\n\n        if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\n    });\n};\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to run, each\n * function is passed a `callback(err, result)` it must call on completion with\n * an error `err` (which can be `null`) and an optional `result` value.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n  _parallel(eachOfSeries, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the array\n * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\n * be called with a boolean argument once it has completed. Invoked with\n * (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nvar some = doParallel(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in the array\n * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\n * be called with a boolean argument once it has completed. Invoked with\n * (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someLimit = doParallelLimit(_createTester(Boolean, identity));\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in the array\n * in parallel. The iteratee is passed a `callback(err, truthValue)` which must\n * be called with a boolean argument once it has completed. Invoked with\n * (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n */\nvar someSeries = doLimit(someLimit, 1);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A function to apply to each item in `coll`.\n * The iteratee is passed a `callback(err, sortValue)` which must be called once\n * it has completed with an error (which can be `null`) and a value to use as\n * the sort criteria. Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy(coll, iteratee, callback) {\n    map(coll, function (x, callback) {\n        iteratee(x, function (err, criteria) {\n            if (err) return callback(err);\n            callback(null, { value: x, criteria: criteria });\n        });\n    }, function (err, results) {\n        if (err) return callback(err);\n        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria,\n            b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} asyncFn - The asynchronous function you want to set the\n * time limit.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {Function} Returns a wrapped function that can be used with any of\n * the control flow functions. Invoke this function with the same\n * parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var originalCallback, timer;\n    var timedOut = false;\n\n    function injectedCallback() {\n        if (!timedOut) {\n            originalCallback.apply(null, arguments);\n            clearTimeout(timer);\n        }\n    }\n\n    function timeoutCallback() {\n        var name = asyncFn.name || 'anonymous';\n        var error = new Error('Callback function \"' + name + '\" timed out.');\n        error.code = 'ETIMEDOUT';\n        if (info) {\n            error.info = info;\n        }\n        timedOut = true;\n        originalCallback(error);\n    }\n\n    return initialParams(function (args, origCallback) {\n        originalCallback = origCallback;\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        asyncFn.apply(null, args.concat(injectedCallback));\n    });\n}\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil;\nvar nativeMax$1 = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - The function to call `n` times. Invoked with the\n * iteration index and a callback (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n */\nfunction timeLimit(count, limit, iteratee, callback) {\n  mapLimit(baseRange(0, count, 1), limit, iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {Function} iteratee - The function to call `n` times. Invoked with the\n * iteration index and a callback (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nvar times = doLimit(timeLimit, Infinity);\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {Function} iteratee - The function to call `n` times. Invoked with the\n * iteration index and a callback (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n */\nvar timesSeries = doLimit(timeLimit, 1);\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in series, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {Function} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator. The `iteratee` is\n * passed a `callback(err)` which accepts an optional error as its first\n * argument. If an error is passed to the callback, the transform is stopped\n * and the main `callback` is immediately called with the error.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc.push(item * 2)\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform(coll, accumulator, iteratee, callback) {\n    if (arguments.length === 3) {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = isArray(coll) ? [] : {};\n    }\n    callback = once(callback || noop);\n\n    eachOf(coll, function (v, k, cb) {\n        iteratee(accumulator, v, k, cb);\n    }, function (err) {\n        callback(err, accumulator);\n    });\n}\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {Function} fn - the memoized function\n * @returns {Function} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {Function} iteratee - A function which is called each time `test` passes.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns undefined\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function() { return count < 5; },\n *     function(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback || noop);\n    if (!test()) return callback(null);\n    var next = rest(function (err, args) {\n        if (err) return callback(err);\n        if (test()) return iteratee(next);\n        callback.apply(null, [null].concat(args));\n    });\n    iteratee(next);\n}\n\n/**\n * Repeatedly call `fn` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `fn`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `fn`. Invoked with ().\n * @param {Function} fn - A function which is called each time `test` fails.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `fn`'s\n * callback. Invoked with (err, [results]);\n */\nfunction until(test, fn, callback) {\n    whilst(function () {\n        return !test.apply(this, arguments);\n    }, fn, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of functions to run, each function is passed\n * a `callback(err, result1, result2, ...)` it must call on completion. The\n * first argument is an error (which can be `null`) and any further arguments\n * will be passed as arguments in order to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nvar waterfall = function (tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        if (taskIndex === tasks.length) {\n            return callback.apply(null, [null].concat(args));\n        }\n\n        var taskCallback = onlyOnce(rest(function (err, args) {\n            if (err) {\n                return callback.apply(null, [err].concat(args));\n            }\n            nextTask(args);\n        }));\n\n        args.push(taskCallback);\n\n        var task = tasks[taskIndex++];\n        task.apply(null, args);\n    }\n\n    nextTask([]);\n};\n\n/**\n * Async is a utility module which provides straight-forward, powerful functions\n * for working with asynchronous JavaScript. Although originally designed for\n * use with [Node.js](http://nodejs.org) and installable via\n * `npm install --save async`, it can also be used directly in the browser.\n * @module async\n */\n\n/**\n * A collection of `async` functions for manipulating collections, such as\n * arrays and objects.\n * @module Collections\n */\n\n/**\n * A collection of `async` functions for controlling the flow through a script.\n * @module ControlFlow\n */\n\n/**\n * A collection of `async` utility functions.\n * @module Utils\n */\nvar index = {\n  applyEach: applyEach,\n  applyEachSeries: applyEachSeries,\n  apply: apply$2,\n  asyncify: asyncify,\n  auto: auto,\n  autoInject: autoInject,\n  cargo: cargo,\n  compose: compose,\n  concat: concat,\n  concatSeries: concatSeries,\n  constant: constant,\n  detect: detect,\n  detectLimit: detectLimit,\n  detectSeries: detectSeries,\n  dir: dir,\n  doDuring: doDuring,\n  doUntil: doUntil,\n  doWhilst: doWhilst,\n  during: during,\n  each: eachLimit,\n  eachLimit: eachLimit$1,\n  eachOf: eachOf,\n  eachOfLimit: eachOfLimit,\n  eachOfSeries: eachOfSeries,\n  eachSeries: eachSeries,\n  ensureAsync: ensureAsync,\n  every: every,\n  everyLimit: everyLimit,\n  everySeries: everySeries,\n  filter: filter,\n  filterLimit: filterLimit,\n  filterSeries: filterSeries,\n  forever: forever,\n  log: log,\n  map: map,\n  mapLimit: mapLimit,\n  mapSeries: mapSeries,\n  mapValues: mapValues,\n  mapValuesLimit: mapValuesLimit,\n  mapValuesSeries: mapValuesSeries,\n  memoize: memoize,\n  nextTick: nextTick,\n  parallel: parallelLimit,\n  parallelLimit: parallelLimit$1,\n  priorityQueue: priorityQueue,\n  queue: queue$1,\n  race: race,\n  reduce: reduce,\n  reduceRight: reduceRight,\n  reflect: reflect,\n  reflectAll: reflectAll,\n  reject: reject,\n  rejectLimit: rejectLimit,\n  rejectSeries: rejectSeries,\n  retry: retry,\n  retryable: retryable,\n  seq: seq$1,\n  series: series,\n  setImmediate: setImmediate$1,\n  some: some,\n  someLimit: someLimit,\n  someSeries: someSeries,\n  sortBy: sortBy,\n  timeout: timeout,\n  times: times,\n  timesLimit: timeLimit,\n  timesSeries: timesSeries,\n  transform: transform,\n  unmemoize: unmemoize,\n  until: until,\n  waterfall: waterfall,\n  whilst: whilst,\n\n  // aliases\n  all: every,\n  any: some,\n  forEach: eachLimit,\n  forEachSeries: eachSeries,\n  forEachLimit: eachLimit$1,\n  forEachOf: eachOf,\n  forEachOfSeries: eachOfSeries,\n  forEachOfLimit: eachOfLimit,\n  inject: reduce,\n  foldl: reduce,\n  foldr: reduceRight,\n  select: filter,\n  selectLimit: filterLimit,\n  selectSeries: filterSeries,\n  wrapSync: asyncify\n};\n\nexports['default'] = index;\nexports.applyEach = applyEach;\nexports.applyEachSeries = applyEachSeries;\nexports.apply = apply$2;\nexports.asyncify = asyncify;\nexports.auto = auto;\nexports.autoInject = autoInject;\nexports.cargo = cargo;\nexports.compose = compose;\nexports.concat = concat;\nexports.concatSeries = concatSeries;\nexports.constant = constant;\nexports.detect = detect;\nexports.detectLimit = detectLimit;\nexports.detectSeries = detectSeries;\nexports.dir = dir;\nexports.doDuring = doDuring;\nexports.doUntil = doUntil;\nexports.doWhilst = doWhilst;\nexports.during = during;\nexports.each = eachLimit;\nexports.eachLimit = eachLimit$1;\nexports.eachOf = eachOf;\nexports.eachOfLimit = eachOfLimit;\nexports.eachOfSeries = eachOfSeries;\nexports.eachSeries = eachSeries;\nexports.ensureAsync = ensureAsync;\nexports.every = every;\nexports.everyLimit = everyLimit;\nexports.everySeries = everySeries;\nexports.filter = filter;\nexports.filterLimit = filterLimit;\nexports.filterSeries = filterSeries;\nexports.forever = forever;\nexports.log = log;\nexports.map = map;\nexports.mapLimit = mapLimit;\nexports.mapSeries = mapSeries;\nexports.mapValues = mapValues;\nexports.mapValuesLimit = mapValuesLimit;\nexports.mapValuesSeries = mapValuesSeries;\nexports.memoize = memoize;\nexports.nextTick = nextTick;\nexports.parallel = parallelLimit;\nexports.parallelLimit = parallelLimit$1;\nexports.priorityQueue = priorityQueue;\nexports.queue = queue$1;\nexports.race = race;\nexports.reduce = reduce;\nexports.reduceRight = reduceRight;\nexports.reflect = reflect;\nexports.reflectAll = reflectAll;\nexports.reject = reject;\nexports.rejectLimit = rejectLimit;\nexports.rejectSeries = rejectSeries;\nexports.retry = retry;\nexports.retryable = retryable;\nexports.seq = seq$1;\nexports.series = series;\nexports.setImmediate = setImmediate$1;\nexports.some = some;\nexports.someLimit = someLimit;\nexports.someSeries = someSeries;\nexports.sortBy = sortBy;\nexports.timeout = timeout;\nexports.times = times;\nexports.timesLimit = timeLimit;\nexports.timesSeries = timesSeries;\nexports.transform = transform;\nexports.unmemoize = unmemoize;\nexports.until = until;\nexports.waterfall = waterfall;\nexports.whilst = whilst;\nexports.all = every;\nexports.allLimit = everyLimit;\nexports.allSeries = everySeries;\nexports.any = some;\nexports.anyLimit = someLimit;\nexports.anySeries = someSeries;\nexports.find = detect;\nexports.findLimit = detectLimit;\nexports.findSeries = detectSeries;\nexports.forEach = eachLimit;\nexports.forEachSeries = eachSeries;\nexports.forEachLimit = eachLimit$1;\nexports.forEachOf = eachOf;\nexports.forEachOfSeries = eachOfSeries;\nexports.forEachOfLimit = eachOfLimit;\nexports.inject = reduce;\nexports.foldl = reduce;\nexports.foldr = reduceRight;\nexports.select = filter;\nexports.selectLimit = filterLimit;\nexports.selectSeries = filterSeries;\nexports.wrapSync = asyncify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/async/dist/async.js\n// module id = 9\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","export const WRAPPERS = {\n\t/*\n\t\tTODO: For the time being these are just events our windows fire but not OpenFin (this is used in the OF wrapper. Long term we might have to reverse this)\n\t\tTODO: Event naming is inconsistent. Our events should not be camel case to maintain consistency.\n\t*/\n\tEVENTS: [\"title-changed\", \"bringToFront\", \"setBounds\", \"alwaysOnTop\", \"setOpacity\"]\n};\nexport const APPLICATION_STATE_CHANNEL = \"Finsemble.Application.State\";\n//These next four channels are used in service => service manager communication. The SM receives these messages and then pushes out state updates to the rest of the system.\nexport const SERVICE_INITIALIZING_CHANNEL = \"Finsemble.ServiceManager.serviceInitializing\";\nexport const SERVICE_READY_CHANNEL = \"Finsemble.ServiceManager.serviceReady\";\nexport const SERVICE_CLOSING_CHANNEL = \"Finsemble.ServiceManager.serviceClosing\";\nexport const SERVICE_CLOSED_CHANNEL = \"Finsemble.ServiceManager.serviceClosed\";\n\n//This channel is where the aggregated state of all services is sent out on.\nexport const SERVICES_STATE_CHANNEL = \"Finsemble.State.Services\";\nexport const WINDOWSTATE = {\n\tNORMAL: 0,\n\tMINIMIZED: 1,\n\tMAXIMIZED: 2,\n\tHIDDEN: 3\n};\n//These channels are to start and stop services dynamically.\nexport const SERVICE_START_CHANNEL = \"Finsemble.Service.Start\";\nexport const SERVICE_STOP_CHANNEL = \"Finsemble.Service.Stop\";\n\nexport const DOCKING = {\n\tGROUP_UPDATE: \"DockingService.groupUpdate\",\n\t// For legacy reasons, this is named Workspace, even though it's generated by docking.\n\tWORKSPACE_GROUP_UPDATE: \"Finsemble.WorkspaceService.groupUpdate\",\n}\n\n// These channels are for interrupting events\nexport const EVENT_INTERRUPT_CHANNEL = \"Finsemble.Event.Interrupt\";\nexport const INTERRUPTIBLE_EVENTS = [\"close-requested\", \"closed\", \"close-complete\", \"_container-close-handlers\"];\nexport const REMOTE_FOCUS = \"WindowService.remoteFocus\";\nexport const WORKSPACE = {\n\tCLEAN_SHUTDOWN: \"Finsemble.Workspace.cleanShutdown\",\n\tUPDATE_PUBSUB: \"Finsemble.WorkspaceService.update\",\n\tSTORAGE_TOPIC: \"finsemble.workspace\",\n\tCACHE_STORAGE_TOPIC: \"finsemble.workspace.cache\",\n\tALL_WORKSPACES: \"finsemble.allWorkspaces\",\n\tACTIVE_WORKSPACE: \"activeWorkspace\",\n\t// When we have the liberty of breaking API's, we should consolidate this topic.\n\tLAST_USED_WORKSPACE_TOPIC: \"finsemble\",\n\tLAST_USED_WORKSPACE: \"finsemble.lastUsedWorkspace\",\n\tINITIAL_WORKSPACE_PREFERENCE: \"finsemble.initialWorkspace\",\n\tPUBLISH_REASONS: {\n\t\tINIT: \"workspace:initialization\",\n\t\tLOAD_DATA_RETRIEVED: \"workspace:load:dataRetrieved\",\n\t\tLOAD_FINISHED: \"workspace:load:finished\",\n\t\tWINDOW_REMOVED: \"window:remove\",\n\t\tWINDOW_ADDED: \"window:add\",\n\t\tLOAD_STARTED: \"workspace:load:start\",\n\t\tWORKSPACE_REMOVED: \"Workspace:remove\",\n\t\tWORKSPACE_RENAMED: \"rename\",\n\t\tSWITCHTO_TERMINATED: \"workspace:switchTo:terminated\",\n\t\tNEW_WORKSPACE: \"new workspace\",\n\t\tSAVE_AS: \"APPLICATION LIFECYCLE:WORKSPACE LIFECYCLE:SaveAs:Workspace:Save As\",\n\t},\n\tAPI_CHANNELS: {\n\t\tNEW_WORKSPACE: \"Finsemble.Workspace.NewWorkspace\",\n\t\tSAVE: \"Finsemble.Workspace.Save\",\n\t\tRENAME: \"Finsemble.Workspace.Rename\",\n\t\tSAVE_AS: \"Finsemble.Workspace.SaveAs\",\n\t\tSWITCH_TO: \"Finsemble.Workspace.SwitchTo\",\n\t\tIMPORT: \"Finsemble.Workspace.Import\",\n\t\tEXPORT: \"Finsemble.Workspace.Export\",\n\t\tREMOVE: \"Finsemble.Workspace.Remove\",\n\t\tSAVE_GLOBAL_DATA: \"Finsemble.Workspace.SaveGlobalData\",\n\t\tSAVE_VIEW_DATA: \"Finsemble.Workspace.SaveViewData\",\n\t\tGET_GLOBAL_DATA: \"Finsemble.Workspace.GetGlobalData\",\n\t\tGET_VIEW_DATA: \"Finsemble.Workspace.GetViewData\",\n\t\tGET_WORKSPACES: \"Finsemble.Workspace.GetWorkspaces\",\n\t\tGET_WORKSPACE_NAMES: \"Finsemble.Workspace.GetWorkspaceNames\",\n\t\tSET_WORKSPACE_ORDER: \"Finsemble.Workspace.SetWorkspaceOrder\",\n\t\tGET_ACTIVE_WORKSPACE: \"Finsemble.Workspace.GetActiveWorkspace\",\n\t\tSET_ACTIVEWORKSPACE_DIRTY: \"Finsemble.Workspace.SetActiveWorkspaceDirty\",\n\t\tGET_TEMPLATES: \"Finsemble.Workspace.GetTemplates\",\n\t\tIMPORT_TEMPLATE: \"Finsemble.Workspace.ImportTemplate\",\n\t\tEXPORT_TEMPLATE: \"Finsemble.Workspace.ExportTemplate\",\n\t\tREMOVE_TEMPLATE: \"Finsemble.Workspace.RemoveTemplate\",\n\t\tSET_WINDOW_STATE: \"Finsemble.Workspace.SetWindowData\",\n\t\tGET_WINDOW_STATE: \"Finsemble.Workspace.GetWindowData\",\n\t\tADD_WINDOW: \"WorkspaceService.addWindow\",\n\t\tREMOVE_WINDOW: \"WorkspaceService.removeWindow\",\n\t}\n};\n\nexport const COMPONENT_STATE_STORAGE_TOPIC = \"finsemble.componentStateStorage\";\n\nexport const HEARTBEAT_TIMEOUT_CHANNEL = \"Finsemble.WindowService.HeartbeatTimeout\";\n\nexport const LAUNCHER_SERVICE = {\n\tWINDOW_CLOSED: \"LauncherService.WindowClosed\"\n};\n\nexport const DELIVERY_MECHANISM = {\n\tPRELOAD: 'preload',\n\tINJECTION: 'injection',\n};\n\nexport const MOVE_REASON = {\n\tAERO_KEY: \"aero_key\", \n\tSYSTEM_RESTORED: \"system_restored\"\n};\n\n\n// WEBPACK FOOTER //\n// src/common/constants.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nimport FSBLUtils from \"./util\";\n\nimport Logger from \"../clients/logger\";\nimport { System } from \"./system\";\n\nvar ConfigUtil = function () {\n\n\tvar self = this;\n\n\t/**\n\t * @introduction\n\t * <h2>Finsemble Configuration Utility Functions</h2>\n\t * @private\n\t * @class ConfigUtil\n\t */\n\t// run through the configuration object and resolve any variables definitions (i.e. $applicationRoot)\n\tthis.resolveConfigVariables = function (finsembleConfig, startingConfigObject) {\n\t\tvar pass = 0;\n\t\tvar needsAnotherPass = true;\n\n\t\t/**\n\t\t * Called by resolveObject().\n\t\t * This function parses a string to find variables.\n\t\t * It looks up the value of any identified variables, replacing them in the string.\n\t\t * The completed string is then returned.\n\t\t * @TODO convert this function to use an actual tokenizer?\n\t\t **/\n\t\tfunction resolveString(configString) {\n\t\t\tvar delimiters = /[/\\\\:?=&\\s]/; // delimiters in regex form\n\t\t\tvar tokens = configString.split(delimiters);\n\t\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\t\tif (tokens[i][0] === \"$\") { // special variable character $ has to first char in string\n\t\t\t\t\tvar variableReference = tokens[i].substring(1); // string off the leading $\n\t\t\t\t\tvar variableResolution = finsembleConfig[variableReference]; // the variable value is another config property, which already must be set\n\t\t\t\t\tvar newValue = configString.replace(tokens[i], variableResolution); // replace the variable reference with new value\n\t\t\t\t\tLogger.system.info(\"forceObjectsToLogger\", \"ConfigUtil.resolveConfigVariables:resolveString configString\", tokens[i], variableReference, variableResolution, \"old value=\", configString, \"value=\", newValue);\n\t\t\t\t\tneedsAnotherPass = true; // <<-- here is the only place needsAnotherPass is set, since still resolving variables\n\t\t\t\t\tconfigString = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn configString;\n\t\t}\n\n\t\t// process an array of config items looking for variables to resolve (a recursive routine)\n\t\tfunction resolveArray(configArray, pass, recursionLevel) {\n\t\t\tLogger.system.info(\"forceObjectsToLogger\", \"resolveArray\", \"pass\", pass, \"recursionLevel\", recursionLevel, \"configArray:\", configArray);\n\t\t\tfor (var i = 0; i < configArray.length; i++) {\n\t\t\t\tvar value = configArray[i];\n\t\t\t\tif (typeof (value) === \"string\" && value.indexOf(\"$\") > -1) {\n\t\t\t\t\tconfigArray[i] = resolveString(value);\n\t\t\t\t} else if (value instanceof Array) {\n\t\t\t\t\tresolveArray(value, pass, recursionLevel + 1); // array reference passed so don't need return value\n\t\t\t\t} else if (typeof (value) === \"object\") {\n\t\t\t\t\tresolveObject(value, pass, recursionLevel + 1); // object reference passed so don't need return value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Expand \"variables\" within a config object. Variables are strings that begin with \"$\".\n\t\t * For instance, `finsemble.bar:\"help\", foo:$bar` would be expanded into `finsemble.bar:\"help\",foo:\"help\"`\n\t\t * This is a recursive routine\n\t\t */\n\t\tfunction resolveObject(configObject, pass, recursionLevel) {\n\t\t\tconfigObject = configObject || {}; // don't error on bad config\n\t\t\tLogger.system.info(\"forceObjectsToLogger\", \"ConfigUtil.resolveConfigVariables:resolveObject\", \"pass\", pass, \"recursionLevel\", recursionLevel, \"configObject:\", configObject);\n\t\t\tObject.keys(configObject).forEach(function (key) {\n\t\t\t\tvar value = configObject[key];\n\t\t\t\tif (typeof (value) === \"string\" && value.indexOf(\"$\") > -1) {\n\t\t\t\t\tconfigObject[key] = resolveString(value);\n\t\t\t\t} else if (value instanceof Array) {\n\t\t\t\t\tresolveArray(value, pass, recursionLevel + 1); // array reference passed so don't need return value\n\t\t\t\t} else if (typeof (value) === \"object\") {\n\t\t\t\t\tresolveObject(value, pass, recursionLevel + 1); // object reference passed so don't need return value\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// since variables may be nested, keep resolving till no more left\n\t\twhile (needsAnotherPass) {\n\t\t\tneedsAnotherPass = false; // don't need another pass afterwards unless a variable is resolved somewhere in finsembleConfig\n\t\t\tresolveObject(startingConfigObject, ++pass, 1);\n\t\t}\n\t};\n\n\t// This does minimal processing of the manifest, just enough to support getting the router up, which is only expanding variables (e.g. moduleRoot) in the raw manifest\n\tthis.getExpandedRawManifest = function (callback, errorCB) {\n\t\tLogger.system.debug(\"ConfigUtil.getExpandedRawManifest starting\");\n\n\t\tfunction getRawManifest(callback, application, level) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ConfigUtil.getExpandedRawManifest:getRawManifest\", application, level);\n\n\t\t\tapplication.getManifest(function (manifest) { // get raw openfin manifest\n\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ConfigUtil.getExpandedRawManifest:getExpandedRawManifest: manifest retrieved. Pre-variable resolution\", manifest);\n\t\t\t\tself.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables first time so can find config location\n\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ConfigUtil.getExpandedRawManifest:getExpandedRawManifest:Complete. post-variable resolution\", manifest);\n\t\t\t\tcallback(manifest);\n\t\t\t}, function (err) {\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.error(\"ConfigUtil.getExpandedRawManifest:application.getManifest:err\", err);\n\t\t\t\t\tif (errorCb) errorCB();\n\t\t\t\t}\n\t\t\t\t// no manifest so try parent\n\t\t\t\tapplication.getParentUuid(function (parentUuid) {\n\t\t\t\t\tvar parentApplication = System.Application.wrap(parentUuid);\n\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"uuid\", parentUuid, \"parentApplication\", parentApplication);\n\t\t\t\t\tif (level < 10) {\n\t\t\t\t\t\tgetRawManifest(callback, parentApplication, ++level);\n\t\t\t\t\t} else { // still could find so must be a problem (i.e. avoid infinite loop)\n\t\t\t\t\t\tcallback(\"could not find manifest in parent applications\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tSystem.ready(function () { // make sure openfin is ready\n\t\t\tvar application = System.Application.getCurrent();\n\t\t\tgetRawManifest(callback, application, 1);\n\t\t});\n\t};\n\n\t// async read of JSON config file\n\tthis.readConfigFile = function (coreConfigFile, importCallback) {\n\t\tLogger.system.debug(\"fetching \" + coreConfigFile);\n\t\tfetch(coreConfigFile, {\n\t\t\tcredentials: \"include\"\n\t\t}).then(function (response) {\n\t\t\treturn response.json();\n\t\t}).catch(function (err) {\n\t\t\timportCallback(\"failure importing: \" + err, null);\n\t\t}).then(function (importObject) {\n\t\t\timportCallback(null, importObject);\n\t\t});\n\t};\n\n\t// This does a \"first stage\" processing of the manifest, providing enough config to start finsemble.\n\t// Pull in the initial manifest, which includes getting the \"hidden\" core config file along with its import definitions, and expand all variables.\n\t// However, the full config processing, including actually doing the imports, is only done in the Config Service.\n\tthis.getInitialManifest = function (callback) {\n\n\t\tSystem.ready(function () { // make sure openfin is ready\n\t\t\tvar application = System.Application.getCurrent();\n\t\t\tapplication.getManifest(function (manifest) { // get raw openfin manifest\n\t\t\t\tmanifest.finsemble = manifest.finsemble || {}; // don't error on bad config\n\t\t\t\tself.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables first time so can find config config location\n\t\t\t\tlet CORE_CONFIG = manifest.finsemble.moduleRoot + \"/configs/core/config.json\"; // <<<--- here is the \"hidden\" core config file\n\t\t\t\tself.readConfigFile(CORE_CONFIG, function (error, newFinsembleConfigObject) { // fetch the core config file\n\t\t\t\t\tif (!error) {\n\t\t\t\t\t\tObject.keys(newFinsembleConfigObject).forEach(function (key) {\n\t\t\t\t\t\t\tif (key === \"importConfig\") {\n\t\t\t\t\t\t\t\t// add any importConfig items from the core to the existing importConfig\n\t\t\t\t\t\t\t\tmanifest.finsemble.importConfig = manifest.finsemble.importConfig || [];\n\t\t\t\t\t\t\t\tfor (let i = 0; i < newFinsembleConfigObject.importConfig.length; i++) {\n\t\t\t\t\t\t\t\t\tmanifest.finsemble.importConfig.unshift(newFinsembleConfigObject.importConfig[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (key === \"importThirdPartyConfig\") {\n\t\t\t\t\t\t\t\t// add any importThirdPartyConfig items from the core to the existing importConfig\n\t\t\t\t\t\t\t\tmanifest.finsemble.importThirdPartyConfig = manifest.finsemble.importThirdPartyConfig || [];\n\t\t\t\t\t\t\t\tfor (let i = 0; i < newFinsembleConfigObject.importThirdPartyConfig.length; i++) {\n\t\t\t\t\t\t\t\t\tmanifest.finsemble.importThirdPartyConfig.unshift(newFinsembleConfigObject.importThirdPartyConfig[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmanifest.finsemble[key] = newFinsembleConfigObject[key];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tself.resolveConfigVariables(manifest.finsemble, manifest.finsemble); // resolve variables with finsemble config\n\t\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ConfigUtil.getInitialManifest:getCoreConfig:Initial Manifest after variables Resolved\", manifest);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLogger.system.error(\"ConfigUtil.getInitialManifest:getCoreConfig:failed importing into finsemble config\", error);\n\t\t\t\t\t}\n\t\t\t\t\tcallback(manifest);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n\n\t// output JSON object to file\n\tthis.promptAndSaveJSONToLocalFile = function (filename, jsonObject) {\n\t\tLogger.system.debug(\"saveJSONToLocalFile\", filename, jsonObject);\n\n\t\tlet dataStr = JSON.stringify(jsonObject, null, \"\\t\");\n\t\tlet dataUri = \"data:application/json;charset=utf-8,\" + encodeURIComponent(dataStr);\n\n\t\tlet exportFileDefaultName = filename + \".json\";\n\n\t\tlet linkElement = document.createElement(\"a\");\n\t\tlinkElement.setAttribute(\"href\", dataUri);\n\t\tlinkElement.setAttribute(\"download\", exportFileDefaultName);\n\t\tlinkElement.click();\n\t};\n\n\t// utility function for future use\n\tthis.configFormatForExport = function(typeOfConfig, configObject) {\n\t\tLogger.system.debug(\"configFormatForExport starting\", typeOfConfig, configObject);\n\t\tvar exportConfig = FSBLUtils.clone(configObject);\n\n\t\tif (typeOfConfig === \"raw\") {\n\t\t\t// do nothing since config is ready to export as is\n\t\t} else if (typeOfConfig === \"all\") {\n\t\t\tdelete exportConfig.importConfig;\n\t\t\tdelete exportConfig.comment;\n\t\t} else if (typeOfConfig === \"application\") {\n\t\t\tdelete exportConfig.importConfig;\n\t\t\tdelete exportConfig.comment;\n\t\t\tdelete exportConfig.system;\n\t\t\tdelete exportConfig.services;\n\t\t} else if (typeOfConfig === \"workspace\") {\n\t\t\texportConfig = { workspace: exportConfig };\n\t\t} else if (typeOfConfig === \"workspaceTemplate\") {\n\t\t\tlet workspaceDefinition = {};\n\t\t\tworkspaceDefinition[exportConfig.name] = exportConfig;\n\t\t\texportConfig = { workspaceTemplates: workspaceDefinition };\n\t\t} else if (typeOfConfig === \"services\") {\n\t\t\texportConfig = exportConfig.services;\n\t\t} else if (typeOfConfig === \"components\") {\n\t\t\texportConfig = exportConfig.components;\n\t\t}\n\n\t\treturn exportConfig;\n\t};\n\n\t/////////////////////////////////////////////////////////////////////////\n\t/////////////// Remaining code is for config verification ///////////////\n\t/////////////////////////////////////////////////////////////////////////\n\n\t// convenience constructor to return record used in configVerifyObject.\n\tthis.VerifyConfigRecord = function (propertyType, propertyCondition) {\n\t\tthis._verify = {\n\t\t\ttype: propertyType,\n\t\t\tcondition: propertyCondition\n\t\t};\n\t};\n\n\t// convenience constants for defining verification object. See example usage in ServiceManager or ConfigService.\n\t// Required means startup will break without it, so error.\n\t// Optional means startup will not break without it; however, it is documented and expected as part of the config that should always be there.  So warning message only.\n\t// Deprecated mean startup will no break but old config format is used and should be updated.\n\tthis.REQUIRED_STRING = new this.VerifyConfigRecord(\"string\", \"required\");\n\tthis.REQUIRED_OBJECT = new this.VerifyConfigRecord(\"object\", \"required\");\n\tthis.REQUIRED_BOOLEAN = new this.VerifyConfigRecord(\"boolean\", \"required\");\n\tthis.REQUIRED_ARRAY = new this.VerifyConfigRecord(\"array\", \"required\");\n\tthis.OPTIONAL_EXPECTED_STRING = new this.VerifyConfigRecord(\"string\", \"optional\");\n\tthis.OPTIONAL_EXPECTED_OBJECT = new this.VerifyConfigRecord(\"object\", \"optional\");\n\tthis.OPTIONAL_EXPECTED_BOOLEAN = new this.VerifyConfigRecord(\"boolean\", \"optional\");\n\tthis.OPTIONAL_EXPECTED_ARRAY = new this.VerifyConfigRecord(\"array\", \"optional\");\n\tthis.DEPRECATED_STRING = new this.VerifyConfigRecord(\"string\", \"DEPRECATED\");\n\tthis.DEPRECATED_OBJECT = new this.VerifyConfigRecord(\"object\", \"DEPRECATED\");\n\tthis.DEPRECATED_BOOLEAN = new this.VerifyConfigRecord(\"boolean\", \"DEPRECATED\");\n\tthis.DEPRECATED_ARRAY = new this.VerifyConfigRecord(\"array\", \"DEPRECATED\");\n\n\t// check type of one config property. Return true if ok; otherwise false. Must handle null configProperty (returning false).\n\tfunction checkType(configProperty, type) {\n\t\tvar typeOk = true;\n\t\tif (configProperty) {\n\t\t\tif (type == \"array\") {\n\t\t\t\tif (!Array.isArray(configProperty)) {\n\t\t\t\t\ttypeOk = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// note \"array\" type is being distinguished from \"object\" type, so configProperty type shouldn't be an array\n\t\t\t\tif (Array.isArray(configProperty) || typeof configProperty !== type) {\n\t\t\t\t\ttypeOk = false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\ttypeOk = false;\n\t\t}\n\t\treturn typeOk;\n\t}\n\n\t// Verifies one config property given it's corresponding verifyRecord and returns appropriate result.\n\tfunction verifyConfigProperty(fullPathName, configProperty, verifyRecord) {\n\t\tLogger.system.verbose(`verifyConfigProperty for ${fullPathName}`, configProperty, verifyRecord);\n\t\tvar resultOk = true;\n\t\tswitch (verifyRecord._verify.condition) {\n\t\t\tcase \"required\":\n\t\t\t\tresultOk = checkType(configProperty, verifyRecord._verify.type);\n\t\t\t\tif (!resultOk) { // required must exist and have correct type\n\t\t\t\t\tLogger.system.error(`Illegally formatted configuration.  Type of ${fullPathName} is not an expected ${verifyRecord._verify.type}`, configProperty, verifyRecord);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"optional\":\n\t\t\t\tif (!configProperty) { // missing optional only generates warning\n\t\t\t\t\tLogger.system.warn(`CONFIGURATION WARNING: Expected configuration missing for ${fullPathName}.`, configProperty, verifyRecord);\n\t\t\t\t} else {\n\t\t\t\t\tresultOk = checkType(configProperty, verifyRecord._verify.type);\n\t\t\t\t\tif (!resultOk) { // optional only errors with wrong type\n\t\t\t\t\t\tLogger.system.error(`Illegally formatted configuration. Type of ${fullPathName} is not an expected ${verifyRecord._verify.type}`, configProperty, verifyRecord);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"DEPRECATED\":\n\t\t\t\tif (configProperty) { // DEPRECATED generates warning\n\t\t\t\t\tLogger.system.warn(`CONFIGURATION WARNING: DEPRECATED configuration ${fullPathName}.`, configProperty, verifyRecord);\n\t\t\t\t\tresultOk = checkType(configProperty, verifyRecord._verify.type);\n\t\t\t\t\tif (!resultOk) { // DEPRECATED only errors with wrong type\n\t\t\t\t\t\tLogger.system.error(`Config ${fullPathName} is DEPRECATED and illegally formatted.  Expected type is ${verifyRecord._verify.type}.`, configProperty, verifyRecord);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tLogger.system.error(`Illegally formatted config record.  Condition ${verifyRecord._verify.condition} unknown`, configProperty, verifyRecord);\n\t\t}\n\t\treturn resultOk;\n\t}\n\n\t/**\n\t * Verifies config is correct and logs messages as needed. Recursively walks configObject and configVerifyObject.\n\t *\n\t * @param {object} fullPathName path name of config being verified (e.g. \"manifest\", \"manifest.finsemble\"); used for error messages\n\t * @param {object} configObject the configuration object to verify (typically the manifest object or manifest.finsemble object)\n\t * @param {object} configVerifyObject object to drive the verification; data driven.\n\t *\n\t * Example configVerifyObject below.\n\t * \t\tNote verification records (e.g. REQUIRED_STRING) only go at the leaf level, but code must handle corresponding undefined config at all levels.\n\t *\n\t * \t\tvar configVerifyObject = {\n\t *\t\tfinsemble: {\n\t *\t\t\tapplicationRoot: REQUIRED_STRING,\n\t *\t\t\tmoduleRoot: REQUIRED_STRING,\n\t *\t\t\tsystem: {\n\t *\t\t\t\tFSBLVersion: REQUIRED_STRING,\n\t *\t\t\t\trequiredServicesConfig: REQUIRED_OBJECT,\n\t *\t\t\t},\n\t *\t\t\tsplinteringConfig: {\n\t *\t\t\t\tsplinterAgents: OPTIONAL_EXPECTED_ARRAY\n\t *\t\t\t},\n\t *\t\t\tstorage: {\n\t *\t\t\t\tLocalStorageAdapter: DEPRECATED_STRING\n\t *\t\t\t},\n\t *\t\t}\n\t *\t};\n \t *\n\t *\n\t * @returns If correct, return true (with no log messages generated); return false otherwise. For optional or DEPRECATED generate warning if not defined, but no error unless if wrong type.\n\t *\n\t * @example See ConfigService for example usage.\n\t *\n\t * @private\n\t */\n\tthis.verifyConfigObject = function (fullPathName, configObject, configVerifyObject) {\n\t\tLogger.system.verbose(`verifyConfigObject for ${fullPathName}`, configObject, configVerifyObject);\n\t\tvar verifyConfigObjectOk = true;\n\n\t\tif (configVerifyObject._verify) { // currently config records only defined at leaf level (could enhance by allowing at any level)\n\t\t\tverifyConfigObjectOk = verifyConfigProperty(fullPathName, configObject, configVerifyObject);\n\t\t} else {\n\t\t\tif (!configVerifyObject) { // shouldn't happen unless by api input\n\t\t\t\tLogger.system.error(`configUtil.verify: configVerifyObject not defined for ${fullPathName}`, configObject, configVerifyObject);\n\t\t\t} else {\n\t\t\t\tvar propertyList = Object.keys(configVerifyObject);\n\t\t\t\tif (!propertyList) { // shouldn't happen unless by api input\n\t\t\t\t\tLogger.system.error(`configUtil.verify: illegally formatted verification record for ${fullPathName}`, configObject, configVerifyObject);\n\t\t\t\t} else { // not at leaf level so recursively iterate though all the properties\n\t\t\t\t\tfor (let i = 0; i < propertyList.length; i++) {\n\t\t\t\t\t\tlet property = propertyList[i];\n\t\t\t\t\t\tlet thisPropertyPath = fullPathName + \".\" + property;\n\t\t\t\t\t\tlet thisConfigProperty = null;\n\t\t\t\t\t\tif (configObject && (property in configObject)) {\n\t\t\t\t\t\t\tthisConfigProperty = configObject[property];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// the order of the conditional (i.e. \"&&\") insures verification will continue after error(s)\n\t\t\t\t\t\tverifyConfigObjectOk = this.verifyConfigObject(thisPropertyPath, thisConfigProperty, configVerifyObject[property]) && verifyConfigObjectOk;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn verifyConfigObjectOk;\n\t};\n\n\t/**\n\t * Convenience function to get a default value from config.\n\t *\n\t * @param {object} base base path of config object\n\t * @param {string} path path string of config property\n\t * @param {any} defaultValue if path value not defined or null, then use default value\n\t *\n\t * @returns {object} return config value or default value\n\t *\n\t * @example\n\t *\n\t *\t\tdefaultAdaptor = ConfigUtil.getDefault(manifest, \"manifest.finsemble.defaultStorage\", \"LocalStorageAdapter\");\n\t *\t\tsameDomainTransport = ConfigUtil.getDefault(finConfig, \"finConfig.router.sameDomainTransport\", \"SharedWorker\");\n\t *\t\tvar serverAddress = getDefault(params, \"params.transportSettings.FinsembleTransport.serverAddress\", \"ws://127.0.0.1:3376\");\n\t *\n\t */\n\tthis.getDefault = function (base, path, defaultValue) {\n\t\tvar result = defaultValue;\n\t\tif (base) {\n\t\t\ttry {\n\t\t\t\tlet properties = path.split(\".\");\n\t\t\t\tlet currentValue = base;\n\t\t\t\tfor (let i = 1; i < properties.length; i++) {\n\t\t\t\t\tcurrentValue = currentValue[properties[i]];\n\t\t\t\t}\n\t\t\t\tresult = currentValue;\n\t\t\t} catch (err) {\n\t\t\t\tresult = defaultValue;\n\t\t\t}\n\n\t\t\tif (typeof(result) === \"undefined\") result = defaultValue;\n\t\t}\n\t\treturn result;\n\t};\n\n};\n\nexport const ConfigUtilInstance = new ConfigUtil();\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/configUtil.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/events/events.js\n// module id = 12\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 13\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","import { EventEmitter } from \"events\";\nimport RouterClient from \"../clients/routerClientInstance\";\nconst STARTUP_TIMEOUT_DURATION = 10000;\nimport { APPLICATION_STATE_CHANNEL, SERVICES_STATE_CHANNEL, SERVICE_CLOSED_CHANNEL } from \"./constants\";\n\ntype StartupDependencyParams = {\n\tcallback: Function;\n\tdependencies: string[];\n}\n/**\n * Small class to hold on to dependencies and callbacks. Also emits a timeout event that the startupManager is listening for. When it times out, the startupManager catches the event and generates a message that includes all of the offline clients and services. It then causes this class to emit an  err event that the baseService is listening for. This arrangement is set up for a couple of reasons.\n * 1. I can't use the logger in here because the logger uses the startupManager, and there'd be a circular dependency.\n * 2. FSBLDependencyManager is a singleton, and there can be multiple services living in a single window. I didn't want them all to log that they were offline if they weren't (e.g., if I'd put the emitter on the StartupManager instead of this class).\n */\nclass StartupDependency extends EventEmitter {\n\tstartupTimer: number | null;\n\tcallback: Function;\n\tdependencies: string[];\n\tconstructor(params: StartupDependencyParams) {\n\t\tsuper();\n\t\tthis.callback = params.callback;\n\t\tthis.dependencies = params.dependencies;\n\t\tthis.startupTimer = null;\n\t\tthis.setStartupTimer = this.setStartupTimer.bind(this);\n\t\tthis.clearStartupTimer = this.clearStartupTimer.bind(this);\n\t\tthis.setStartupTimer();\n\t}\n\n\t/**\n\t * Removes the startup timer (because the dependency was resolved within the allotted time);\n\t */\n\tclearStartupTimer() {\n\t\tclearTimeout(this.startupTimer);\n\t\tdelete this.startupTimer;\n\t}\n\t/**\n\t * If the dependency hasn't resolved within STARTUP_TIMEOUT_DURATION, emit a timeout event that the StartupManager can catch.\n\t */\n\tsetStartupTimer() {\n\t\tlet self = this;\n\t\t//+ coerces the result to a number, making typescript happy.\n\t\tthis.startupTimer = +setTimeout(() => {\n\t\t\tself.emit(\"timeout\");\n\t\t}, STARTUP_TIMEOUT_DURATION);\n\t}\n}\n\n/**\n * Used to generate a unique ID for the list of dependencies.\n */\nfunction uuidv4() {\n\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n\t\tvar r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n/**\n * @private\n */\nclass StartupManager {\n\tonlineClients: string[];\n\tonlineServices: string[];\n\tdependencies: object;\n\tAuthorizationCompleted: boolean;\n\tstartupTimers: object;\n\tstartupTimerFired: boolean;\n\tservicesAreAllOnline: object = {};\n\tclientsAreAllOnline: object = {};\n\n\t/**\n\t * @private\n\t */\n\tconstructor() {\n\t\tthis.onlineClients = [];\n\t\tthis.onlineServices = [];\n\t\tthis.dependencies = {};\n\t\tthis.AuthorizationCompleted = false;\n\t\tthis.startupTimers = {};\n\t\tthis.startupTimerFired = false;\n\t\tthis.bindCorrectContext();\n\t}\n\t/**\n\t * This function and `checkDependencies` are the most important parts of this class. This function accepts a FinsembleDependency object and a callback to be invoked when all required dependencies are ready.\n\t *\n\t * @param {FinsembleDependency} dependencies\n\t * @param {any} callback\n\t * @memberof StartupManager\n\t */\n\twaitFor(dependencies, callback) {\n\t\tlet id = uuidv4();\n\n\t\t//Set defaults to an empty array if they aren't passed in.\n\t\tif (!dependencies.services) dependencies.services = [];\n\t\tif (!dependencies.clients) dependencies.clients = [];\n\t\t//The dependency manager can pass in a name to the dependency. If it does, we'll use it. If not, we won't.\n\n\t\tif (dependencies.clients.length) {\n\t\t\tif (this.AuthorizationCompleted === false && dependencies.clients.includes(\"authenticationClient\")) {\n\t\t\t\tdependencies.clients.splice(dependencies.clients.indexOf(\"authenticationClient\"), 1);\n\t\t\t}\n\t\t\t//Lowercase the first letter of the client.\n\t\t\tdependencies.clients = dependencies.clients.map(clientName => {\n\t\t\t\treturn clientName.charAt(0).toLowerCase() + clientName.slice(1);\n\t\t\t});\n\t\t}\n\n\t\tlet dependency = new StartupDependency({ dependencies, callback });\n\n\t\t//If the dependency times out, throw an error that the baseService can catch. It will then log out why it's not online.\n\t\tdependency.on(\"timeout\", () => {\n\t\t\tthis.onDependencyTimeout(dependency);\n\t\t});\n\n\t\tthis.dependencies[id] = dependency;\n\t\tthis.checkDependencies();\n\t\treturn dependency;\n\t}\n\n\t/**\n\t * This method generates a helpful error message giving possible reasons for why the service is offline. After the message is generated, it emits an event on the dependency that's passed in as a parameter. The BaseService is listening for this event, and logs the error message to the central logger.\n\t * @param {Dependency} dependency\n\t */\n\tonDependencyTimeout(dependency) {\n\t\tconst NEW_LINE = \"\\n\",\n\t\t\tTAB = \"\\u0009\",\n\t\t\tBULLET = \"\\u2022\",\n\t\t\tBULLET_POINT = NEW_LINE + TAB + BULLET,\n\t\t\tSTORAGE_ADAPTER_ERROR = \"The default storage adapter failed to fully initialize, or has a syntax error. Ensure that the default storage adapter is up, connected, and sending/receiving data properly.\";\n\n\t\tconst HELPFUL_MESSAGES = {\n\t\t\tpreferencesService: [\n\t\t\t\t`PreferencesService failed to start.${BULLET_POINT}Typically this is caused by a failure to retrieve data from your default storage adapter. ${STORAGE_ADAPTER_ERROR}`],\n\t\t\tstorageService: [\n\t\t\t\t`StorageService failed to start. Here are some common reasons for failure:${BULLET_POINT}${STORAGE_ADAPTER_ERROR}${BULLET_POINT}The data coming back from your adapter is improperly formatted or otherwise corrupted. Try clearing your storage and restarting. If the problem persists, the issue may not be in your adapter.`\n\t\t\t],\n\t\t\trouterService: [\n\t\t\t\t\"RouterService failed to start. This is a fatal error. Contact finsemble support.\"\n\t\t\t],\n\t\t\tworkspaceService: [\n\t\t\t\t`WorkspaceService failed to start. Here are some common reasons for failure:${BULLET_POINT}${STORAGE_ADAPTER_ERROR}.${BULLET_POINT}Your active workspace is corrupted.`\n\t\t\t],\n\t\t\tassimilationService: [\n\t\t\t\t\"AssimilationService failed to start. Check to see that the 'FinsembleAssimilation' is active in your taskManager. If it is, please contact finsemble support.\"\n\t\t\t]\n\t\t};\n\n\t\tlet offlineClients = this.getOfflineClients();\n\t\tlet offlineServices = this.getOfflineServices();\n\t\tlet errorMessage = `APPLICATION LIFECYCLE:STARTUP:Dependency not online after ${STARTUP_TIMEOUT_DURATION / 1000} seconds.`;\n\n\t\tif (offlineClients.length) {\n\t\t\terrorMessage += ` Waiting for these clients: ${offlineClients.join(\", \")}.`;\n\t\t}\n\t\tif (offlineServices.length) {\n\t\t\terrorMessage += ` Waiting for these services: ${offlineServices.join(\", \")}.`;\n\t\t}\n\n\t\t//For every service that's offline, check to see if we have any helpful messages for it. If so, iterate through the array and append to the error message.\n\t\tofflineServices.forEach((service) => {\n\t\t\tif (HELPFUL_MESSAGES[service]) {\n\t\t\t\tHELPFUL_MESSAGES[service].forEach((msg) => {\n\t\t\t\t\terrorMessage += NEW_LINE + NEW_LINE + msg + NEW_LINE;\n\t\t\t\t});\n\t\t\t\t//puts a line between our helpful messages and the log stack.\n\t\t\t\terrorMessage += NEW_LINE;\n\t\t\t}\n\t\t});\n\n\t\t//The BaseService is listening for this event, and will log the errorMessage to the central logger.\n\t\tdependency.emit(\"err\", errorMessage);\n\t}\n\t/**\n\t * This function loops through all of the registered dependencies and checks to see if the conditions have been met. If so, it invokes the callback and removes the reference to the dependency.\n\t *\n\t * @memberof StartupManager\n\t */\n\tcheckDependencies() {\n\t\tfor (let id in this.dependencies) {\n\t\t\tlet dependency = this.dependencies[id];\n\t\t\tlet { dependencies, callback } = dependency;\n\t\t\tif (dependencies.services.length && !this.servicesAreAllOnline[id]) {\n\t\t\t\tthis.servicesAreAllOnline[id] = this.checkServices(dependencies.services);\n\t\t\t\tif (!this.servicesAreAllOnline[id]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (dependencies.clients.length && !this.clientsAreAllOnline[id]) {\n\t\t\t\tthis.clientsAreAllOnline[id] = this.checkClients(dependencies.clients);\n\t\t\t\tif (!this.clientsAreAllOnline[id]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete this.dependencies[id];\n\t\t\tdependency.clearStartupTimer();\n\t\t\tif (callback) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t}\n\n\tgetOfflineClients() {\n\t\tlet offlineClients = [];\n\t\tfor (let id in this.dependencies) {\n\t\t\tlet { dependencies } = this.dependencies[id];\n\t\t\tofflineClients = offlineClients.concat(dependencies.clients.filter((dep) => !this.onlineClients.includes(dep)));\n\t\t}\n\t\t//return deduped list.\n\t\treturn offlineClients.filter((client, i) => offlineClients.indexOf(client) === i);\n\t}\n\n\tgetOfflineServices() {\n\t\tlet offlineServices = [];\n\t\tfor (let id in this.dependencies) {\n\t\t\tlet { dependencies } = this.dependencies[id];\n\t\t\tofflineServices = offlineServices.concat(dependencies.services.filter((dep) => !this.onlineServices.includes(dep)));\n\t\t}\n\t\treturn offlineServices.filter((client, i) => offlineServices.indexOf(client) === i);\n\t}\n\t/**\n\t * Iterates through required service list, returns false if any required service is offline.\n\t *\n\t * @param {any} serviceList\n\t * @memberof StartupManager\n\t */\n\tcheckServices(serviceList) {\n\t\treturn serviceList.every(service => this.onlineServices.includes(service));\n\t}\n\t/**\n\t * Iterates through required client list, returns false if any required client is offline.\n\t *\n\t * @param {any} clientList\n\n\t * @memberof StartupManager\n\t */\n\tcheckClients(clientList) {\n\t\treturn clientList.every(client => this.onlineClients.includes(client));\n\t}\n\n\t/**\n\t * When a service comes online, we push it onto our array of online services, and run through all of the registered dependencies.\n\t *\n\t * @param {any} serviceName\n\t * @memberof StartupManager\n\t */\n\tsetServiceOnline(serviceName) {\n\t\tthis.onlineServices.push(serviceName);\n\t\tthis.checkDependencies();\n\t}\n\t/**\n\t * Sets an array of services online. Only happens once at startup.\n\t *\n\t * @param {any} serviceList\n\t * @memberof StartupManager\n\t */\n\tsetServicesOnline(serviceList) {\n\t\tthis.onlineServices = this.onlineServices.concat(serviceList);\n\t\tthis.checkDependencies();\n\t}\n\t/**\n\t *\n\t *\n\t * @param {any} clientName\n\n\t * @memberof StartupManager\n\t */\n\tsetClientOnline(clientName) {\n\t\t//This check is done because multiple clients of the same type can be on a page.\n\t\tif (this.onlineClients.includes(clientName)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.onlineClients.push(clientName);\n\t\tthis.checkDependencies();\n\t}\n\t/**\n\t * Returns the array of online clients.\n\t *\n\n\t * @memberof StartupManager\n\t */\n\tgetOnlineClients() {\n\t\treturn this.onlineClients;\n\t}\n\t/**\n\t * Returns the array of online services.\n\t *\n\n\t * @memberof StartupManager\n\t */\n\tgetOnlineServices() {\n\t\treturn this.onlineServices;\n\t}\n\t/**\n\t * Method to make sure that `this` is correct when the callbacks are invoked.\n\t *\n\t * @memberof StartupManager\n\t */\n\tbindCorrectContext() {\n\t\tthis.checkDependencies = this.checkDependencies.bind(this);\n\t\tthis.checkServices = this.checkServices.bind(this);\n\t\tthis.checkClients = this.checkClients.bind(this);\n\t\tthis.getOfflineClients = this.getOfflineClients.bind(this);\n\t\tthis.getOfflineServices = this.getOfflineServices.bind(this);\n\t\tthis.onDependencyTimeout = this.onDependencyTimeout.bind(this);\n\t\tthis.waitFor = this.waitFor.bind(this);\n\t}\n}\n/**\n * @private\n */\nclass ShutdownManager {\n\tofflineServices: string[];\n\tdependencies: object;\n\t/**\n\t * @private\n\t */\n\tconstructor() {\n\t\tthis.offlineServices = [];\n\t\tthis.dependencies = {};\n\t\tthis.checkDependencies = this.checkDependencies.bind(this);\n\t}\n\n\t/**\n\t * This function and `checkDependencies` are the most important parts of this class. This function accepts a FinsembleDependency object and a callback to be invoked when all required dependencies are ready.\n\t *\n\t * @param {FinsembleDependency} dependencies\n\t * @param {any} callback\n\t * @memberof StartupManager\n\t */\n\twaitFor(dependencies, callback) {\n\t\t//Set defaults to an empty array if they aren't passed in.\n\t\tif (!dependencies.services) {\n\t\t\tdependencies.services = [];\n\t\t}\n\n\t\tlet id = uuidv4();\n\n\t\tthis.dependencies[id] = { dependencies, callback };\n\t}\n\t/**\n\t * This function loops through all of the registered dependencies and checks to see if the conditions have been met. If so, it invokes the callback and removes the reference to the dependency.\n\t *\n\t * @memberof ShutdownDependencies\n\t */\n\tcheckDependencies() {\n\t\tconsole.debug(\"checkDependencies\", this.dependencies);\n\t\tif (Object.keys(this.dependencies)) {\n\t\t\tfor (let id in this.dependencies) {\n\t\t\t\tlet { dependencies, callback } = this.dependencies[id];\n\t\t\t\tconsole.debug(\"checkDependency\", dependencies.services, this.offlineServices);\n\t\t\t\tif (dependencies.services.length) {\n\t\t\t\t\tlet servicesAreAllOffline = this.checkServices(dependencies.services);\n\t\t\t\t\tif (!servicesAreAllOffline) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.debug(\"checkDependencies callback\");\n\t\t\t\tdelete this.dependencies[id];\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\t/**\n\t * Iterates through required service list, returns false if any required service is offline.\n\t *\n\t * @param {any} serviceList\n\n\t * @memberof StartupManager\n\t */\n\tcheckServices(serviceList) {\n\t\treturn serviceList.every(service => this.offlineServices.includes(service));\n\t}\n\n\tsetServiceOffline(service) {\n\t\tconsole.debug(\"setServiceOffline\", service);\n\t\tthis.offlineServices.push(service);\n\t\tthis.checkDependencies();\n\t}\n\n}\n/**\n * This is a class that handles FSBL client/service dependency management. Given a list of services and/or clients, it will invoke a callback when all dependencies are ready. This is a singleton.\n * @shouldBePublished false\n * @private\n * @class FSBLDependencyManager\n */\nclass FSBLDependencyManager extends EventEmitter {\n\t/**\n\t * Binds context, and listens for services to come online.\n\t * Creates an instance of FSBLDependencyManager.\n\t * @private\n\t * @memberof FSBLDependencyManager\n\t */\n\tstartup: StartupManager;\n\tshutdown: ShutdownManager;\n\tAuthorizationCompleted;\n\tRouterClient;\n\tname;\n\tconstructor() {\n\t\tsuper();\n\t\tthis.startup = new StartupManager();\n\t\tthis.shutdown = new ShutdownManager();\n\t\tthis.RouterClient = RouterClient;\n\t\tthis.AuthorizationCompleted = false;\n\t\tthis.bindCorrectContext();\n\t\tthis.onAuthorizationCompleted(this.startup.checkDependencies);\n\t\tRouterClient.onReady(this.listenForServices);\n\t}\n\t/**\n * Method to make sure that `this` is correct when the callbacks are invoked.\n *\n * @memberof StartupManager\n */\n\tbindCorrectContext() {\n\t\tthis.listenForServices = this.listenForServices.bind(this);\n\t\tthis.onAuthorizationCompleted = this.onAuthorizationCompleted.bind(this);\n\t}\n\n\tsetClientOnline(client) {\n\t\tthis.startup.setClientOnline(client);\n\t}\n\t/*\n\t* handler for when a service changes its state. If a service comes online or goes offline, dependencies are checked and callbacks invoked.\n\t*/\n\tonServiceStateChange(data) {\n\t\tlet ServiceNames = Object.keys(data);\n\t\t//Iterate through all services. If it was online but isn't anymore, set it offline. If it was offline but now is, set it online.\n\t\tServiceNames.forEach((serviceName: string) => {\n\t\t\tlet state: ServiceState = data[serviceName].state;\n\t\t\tlet wasOnline: boolean = this.startup.onlineServices.includes(serviceName);\n\t\t\tlet isOnline: boolean = state === \"ready\";\n\n\t\t\tif (!wasOnline && isOnline) {\n\t\t\t\tthis.startup.setServiceOnline(serviceName);\n\t\t\t}\n\t\t\tif (wasOnline && !isOnline && state === \"closed\") {\n\t\t\t\tthis.shutdown.setServiceOffline(serviceName);\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Listens on the router for services to come online. The first subscriber gets the activeServices as of object instantiation. The 2nd subscriber listens for services to come online after the object is created. We should consider make this all one subscriber, though I see the advantage of having this setup.\n\t *\n\t */\n\tlistenForServices() {\n\t\tconsole.debug(\"dependency manager: listenForServices in \" + this.name);\n\n\t\tthis.RouterClient.subscribe(SERVICES_STATE_CHANNEL, (err, event) => {\n\t\t\tthis.onServiceStateChange(event.data);\n\t\t});\n\n\t\t// TODO: The pubsub responder doesn't seem to work here. IT works for the above when not closing.\n\t\tthis.RouterClient.addListener(SERVICE_CLOSED_CHANNEL, (err, event) => {\n\t\t\tlet services = {};\n\t\t\tservices[event.data.name] = {\n\t\t\t\tstate: \"closed\"\n\t\t\t}\n\t\t\tthis.onServiceStateChange(services);\n\t\t});\n\n\t\tthis.RouterClient.subscribe(APPLICATION_STATE_CHANNEL, (err, response: ApplicationStateChange) => {\n\t\t\tswitch (response.data.state) {\n\t\t\t\t//authenticated will only be caught by components/services that are up before auth does its thing. Otherwise, a component/service coming up will have the 'ready' application state. In either case, we need to do the things below. But only once.\n\t\t\t\tcase \"authenticated\":\n\t\t\t\tcase \"ready\":\n\t\t\t\t\t//No need to send this message out twice.\n\t\t\t\t\tif (this.AuthorizationCompleted) break;\n\t\t\t\t\tconsole.debug(\"Authorization Completed\");\n\t\t\t\t\tthis.AuthorizationCompleted = true;\n\t\t\t\t\tthis.startup.AuthorizationCompleted = true;\n\t\t\t\t\tthis.emit(\"AuthorizationCompleted\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"closing\":\n\t\t\t\t\tthis.shutdown.checkDependencies();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tonAuthorizationCompleted(callback) {\n\t\tif (this.AuthorizationCompleted) {\n\t\t\tcallback();\n\t\t} else {\n\t\t\tthis.addListener(\"AuthorizationCompleted\", callback);\n\t\t}\n\t}\n\n}\n/**\n * This is a class that handles FSBL client/service dependency management. Given a list of services and/or clients, it will invoke a callback when all dependencies are ready. This is a singleton.\n * @shouldBePublished false\n * @private\n * @class FSBLDependencyManager\n */\nexport let FSBLDependencyManagerSingleton: FSBLDependencyManager = new FSBLDependencyManager();\nexport default FSBLDependencyManagerSingleton;\n\n\n\n// WEBPACK FOOTER //\n// src/common/dependencyManager.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n\"use strict\";\ntype fieldOnlyParam = {\n\t/** Name of the field */\n\tfield: string\n}\ntype fieldOnlyParams = fieldOnlyParam[] | string[];\n\ntype fieldAndValueParam = {\n\t/** Name of the field */\n\tfield: string,\n\t/** Value of the field */\n\tvalue?: any\n};\ntype fieldAndValueParams = fieldAndValueParam[] | string[];\ntype listenerParam = {\n\t/**\n\t * The data field to listen for.\n\t*/\n\tfield?: string,\n\t/**\n\t * The function to be called when the observed piece of config is modified. If this is empty, fn is used.\n\t */\n\tlistener?: Function\n}\ntype removeListenersType = listenerParam | listenerParam[];\n\nimport Validate from \"../common/validate\"; // Finsemble args validator\nimport { _BaseClient as BaseClient } from \"./baseClient\";\nimport { map as asyncMap } from \"async\";\n\nimport Logger from \"./logger\";\n\n/**\n * @introduction\n * <h2>Config Client</h2>\n *\n * This client provides run-time access to Finsemble's configuration.\n * The Config Client functions similar to a global store created with the Distributed Store Client and offers many of the same methods.\n * Values modified at runtime are not persisted.\n *\n *\n * See the [Configuration tutorial](tutorial-Configuration.html) for a configuration overview.\n *\n * @hideconstructor\n * @constructor\n */\nclass ConfigClient extends BaseClient {\n\tlisteners = [];\n\tsubs;\n\tconstructor(params) {\n\t\tsuper(params);\n\t\t//Methods were formally an arrow function. If we want our documentation build to read nested parameters, we need to use this instead of an arrow.\n\t\tthis.processAndSet = this.processAndSet.bind(this);\n\t\tthis.getValue = this.getValue.bind(this);\n\t\tthis.getValues = this.getValues.bind(this);\n\t\tthis.setValue = this.setValue.bind(this);\n\t\tthis.setValues = this.setValues.bind(this);\n\t\tthis.removeValue = this.removeValue.bind(this);\n\t\tthis.removeValues = this.removeValues.bind(this);\n\t\tthis.addListener = this.addListener.bind(this);\n\t\tthis.addListeners = this.addListeners.bind(this);\n\t\tthis.removeListener = this.removeListener.bind(this);\n\t\tthis.removeListeners = this.removeListeners.bind(this);\n\t\tthis.setPreference = this.setPreference.bind(this);\n\t\tthis.getPreferences = this.getPreferences.bind(this);\n\t}\n\t/**\n\t * Get a value from the config.\n\t * @param {Function} cb Will return the value if found.\n\t * @returns {any} The value of the field. If no callback is given and the value is local, this will run synchronous\n\t * @example\n\t * FSBL.Clients.ConfigClient.getValue({ field:'field1' }, function(err,value){ });\n\t * FSBL.Clients.ConfigClient.getValue('field1', function(err,value){ });\n\t */\n\tgetValue(params: fieldOnlyParam | string, cb = Function.prototype): Promise<any> {\n\t\tif (typeof params === \"string\") { params = { field: params }; }\n\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tif (!(params as fieldOnlyParam).field) {\n\t\t\t\tconst err = \"no field provided\";\n\t\t\t\treject(err);\n\t\t\t\treturn cb(err);\n\t\t\t}\n\n\t\t\tthis.routerClient.query(\"configService.getValue\", { field: (params as fieldOnlyParam).field },\n\t\t\t\tfunction (err, response) {\n\t\t\t\t\tif (err) { reject(err); return cb(err); }\n\t\t\t\t\tresolve({ err, data: response.data });\n\t\t\t\t\treturn cb(err, response.data);\n\t\t\t\t});\n\t\t};\n\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t * Get multiple values from the config.\n\t* @param {fieldOnlyParam[] | string[]} fields An array of field objects. If there are no fields provided, the complete configuration manifest is returned.\n\t * @param {Function} cb Will return the value if found.\n\t * @returns {Object} - Returns an object of with the fields as keys. If no callback is given and the value is local, this will run synchronous\n\t * @example\n\t * FSBL.Clients.ConfigClient.getValues([{ field: 'field1' },{ field2: 'field2' }],function(err,values){ });\n\t * FSBL.Clients.ConfigClient.getValues(['field1','field2'], function(err,values){ });\n\t * FSBL.Clients.ConfigClient.get(null, callback); // returns the complete manifest containing the finsemble property\n\t*/\n\tgetValues(fields?: fieldOnlyParam[] | string[], cb = Function.prototype) {\n\t\tif (typeof fields === \"function\") {\n\t\t\tcb = fields;\n\t\t\tfields = null;\n\t\t}\n\t\tif (fields && !Array.isArray(fields)) {\n\t\t\treturn this.getValue(fields, cb);\n\t\t}\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"configService.getValues\",\n\t\t\t\t{\n\t\t\t\t\tfields: fields\n\t\t\t\t}\n\t\t\t\t, function (err, response) {\n\t\t\t\t\tif (err) { return cb(err); }\n\t\t\t\t\tresolve({ err, data: response.data });\n\t\t\t\t\treturn cb(err, response.data);\n\t\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t * Set a value in the config. Setting a value will trigger events that you can listen to using <a href=\"ConfigClient.html#addListener\">addListener</a>.\n\t * @param {function} cb Optional callback\n\t * @returns {null}\n\t *\n\t * @example\n\t * FSBL.Clients.ConfigClient.setValue({ field:'field1', value:\"new value\" });\n\t */\n\tsetValue(params: fieldAndValueParam, cb?) {\n\t\tvar data = {\n\t\t\tfield: params.field,\n\t\t\tvalue: params.value\n\t\t};\n\t\treturn this.routerClient.query(\"configService.setValue\", data, function (err) {\n\t\t\treturn cb ? cb(err) : null;\n\t\t});\n\t};\n\n\t/**\n\t * This will set multiple values in the config.\n\t * @param {function} cb Optional callback\n\t * @returns {null}\n\t *\n\t * @example\n\t * FSBL.Clients.ConfigClient.setValues([{ field:'field1', value: \"new value\" }]);\n\t */\n\tsetValues(fields: fieldAndValueParams, cb?) {\n\t\tif (!fields) {\n\t\t\treturn Logger.system.error(\"ConfigClient.SetValues. No params given\");\n\t\t}\n\t\tif (!Array.isArray(fields)) {\n\t\t\treturn Logger.system.error(\"ConfigClient.SetValues. Params must be an array\");\n\t\t}\n\t\treturn this.routerClient.query(\"configService.setValues\", fields, function (err) {\n\t\t\treturn cb ? cb(err) : null;\n\t\t});\n\t};\n\n\t/**\n\t * Remove a value from the config.\n\t * @param {fieldAndValueParam | String} params - Either an object or string\n\t * @param {Function} cb -  Returns an error if there is one\n\t * @example\n\t * FSBL.Clients.ConfigClient.removeValue({ field:'field1' }, function(err,bool){ });\n\t */\n\tremoveValue(params: fieldAndValueParam, cb = Function.prototype) {\n\n\t\tif (params !== undefined) {\n\t\t\tif (!params.field && typeof params === \"string\") {\n\t\t\t\tparams = { field: params };\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn cb(\"no field provided\");\n\t\t\t}\n\t\t}\n\t\tparams.value = null;\n\t\treturn this.setValue(params, cb);\n\t};\n\n\t/**\n\t * Removes multiple values from the config.\n\t * @param {fieldAndValueParams} params - An Array of field objects\n\t * @param {Function} cb -  Returns an error if there is one.\n\t * @example\n\t * FSBL.Clients.ConfigClient.removeValues([{\n\t * \tfield:'field1'\n\t * }],\n\t * function(err,bool){\t});\n\t */\n\tremoveValues(params: fieldAndValueParams, cb = Function.prototype) {\n\t\tif (!Array.isArray(params)) { return cb(\"The passed in parameter needs to be an array\"); }\n\t\t//casting needed here because params doesn't have an index method?? My guess is that their type defs aren't great.\n\t\tasyncMap((params as any), this.removeValue, function (err, data) {\n\t\t\treturn cb(err, data);\n\t\t});\n\t};\n\n\t/**\n\t * make sure we dont have duplicate router subscribers\n\t * @private\n\t */\n\tchangeSub = (change) => {\n\t\tif (!this.subs) this.subs = {};\n\t\tif (!this.subs[change]) {\n\t\t\tthis.routerClient.query(\"configService.addListener\", change, (err, queryResponse) => {\n\t\t\t\tthis.routerClient.subscribe(change, this.handleChanges);\n\t\t\t});\n\t\t\tthis.subs[change] = true;\n\t\t}\n\t};\n\n\t/**\n\t* Add a listener to the config at either the root config level or field level. If no field is given, the root config level is used. You can also listen for changes to config fields any number of levels deep -- finsemble.configitem.deeperconfigitem.evendeeperconfigitem\n\t* @param {Function} fn The function to be called when the observed piece of config is modified.\n\t* @param {Function} cb Callback to be invoked after the listener is added.\n\t* @example\n\t* var myFunction = function(err,data){};\n\t* FSBL.Clients.ConfigClient.addListener({ field:'field1' }, myFunction, cb);\n\t*/\n\taddListener(params: fieldOnlyParam, fn, cb?) {\n\t\tvar field = null;\n\t\tif (typeof params === \"function\") {\n\t\t\tfn = params;\n\t\t\tparams = { field };\n\t\t}\n\t\tif (params.field) { field = params.field; }\n\n\t\tvar combined = \"configService\" + (field ? \".\" + field : \"\");\n\t\tif (this.listeners[combined]) {\n\t\t\tthis.listeners[combined].push(fn);\n\t\t}\n\t\telse {\n\t\t\tthis.listeners[combined] = [fn];\n\t\t}\n\n\t\tthis.changeSub(combined);\n\t\treturn cb ? cb() : null;\n\t};\n\n\t/**\n\t *\n\t* Add an array of listeners as objects or strings. If using strings, you must provide a function callback as the second parameter.\n\t* @param {function} fn The function to be called when the observed piece of config is modified.\n\t* @param {function} cb Callback to be invoked after the listeners are added.\n\t* @example\n\t* var myFunction = function(err,data){}\n  * FSBL.Clients.ConfigClient.addListeners(\n\t* \t[\n\t* \t\t{ field: \"field1\", listener: myFunction },\n\t* \t\t{ field: \"field2\", listener: myFunction }\n\t* \t],\n\t* \tnull,\n\t* \tcb\n\t* );\n\t*\n\t* FSBL.Clients.ConfigClient.addListeners(\n\t* [{ field: \"field1\" }, { field: \"field2\", listener: myFunction }],\n\t* myFunction,\n\t* cb\n\t* );\n\t*\n\t* FSBL.Clients.ConfigClient.addListeners([\"field1\", \"field2\"], myFunction, cb);\n\t*/\n\taddListeners(params: listenerParam | listenerParam[], fn?: Function, cb?: Function) {\n\t\tif (!Array.isArray(params)) {\n\t\t\treturn this.addListener({ field: params.field }, fn, cb);\n\t\t}\n\n\t\tfor (var i = 0; i < params.length; i++) {\n\t\t\tvar field = null;\n\t\t\tvar item = params[i];\n\t\t\tvar ls;\n\t\t\tif (typeof item === \"string\") {\n\t\t\t\tfield = item;\n\t\t\t} else if (item.field) {\n\t\t\t\tfield = item.field;\n\t\t\t\tls = params[i].listener;\n\t\t\t}\n\n\t\t\tvar combined = \"configService\" + (field ? \".\" + field : \"\");\n\t\t\tif (!ls) {\n\t\t\t\tif (fn && typeof fn === \"function\") {\n\t\t\t\t\tls = fn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.listeners[combined]) {\n\t\t\t\tthis.listeners[combined].push(ls);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.listeners[combined] = [ls];\n\t\t\t}\n\t\t\tthis.changeSub(combined);\n\t\t}\n\t\treturn cb ? cb() : null;\n\t};\n\n\t/**\n\t * Remove a listener from config. If no field is given, we look for a config root listener\n\t * @param {function} fn The listener to remove.\n\t * @param {function} cb Returns true if it was successful in removing the listener.\n\t *\n\t * @example\n\t * var myFunction = function(err,data){ }\n\t * FSBL.Clients.ConfigClient.removeListener({\n\t * \tfield:'field1'\n\t * }, MyFunction, function(bool){ });\n\t * FSBL.Clients.ConfigClient.removeListener(MyFunction, function(bool){ });\n\t */\n\tremoveListener(params: fieldOnlyParam, fn: Function, cb?: Function) {\n\t\tvar field = null;\n\n\t\t// The case below is for removing the root level config listener\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = fn;\n\t\t\tfn = params;\n\t\t\tparams = { field };\n\t\t}\n\n\t\tif (params.field) { field = params.field; }\n\t\tvar combined = this.name + (field ? \".\" + field : \"\");\n\t\tif (this.listeners[combined]) {\n\t\t\tfor (var i = 0; i < this.listeners[combined].length; i++) {\n\t\t\t\tif (this.listeners[combined][i] === fn) {\n\t\t\t\t\tthis.listeners[combined].pop(i);\n\t\t\t\t\treturn cb ? cb(null, true) : null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cb ? cb(null, false) : null;\n\t};\n\n\t/**\n\t * Remove an array of listeners from the config\n\t * @param {removeListenersType} params\n\t * @param {function} fn The listener to remove\n\t * @param {function} cb Returns true if it was successful in removing the listener.\n\t *\n\t * @example\n\t * var myFunction = function(err,data){ }\n\t * FSBL.Clients.ConfigClient.removeListeners({\n\t * \tfield: 'field1'\n\t * }, MyFunction, function(bool){ });\n\t * FSBL.Clients.ConfigClient.removeListeners([{ field:'field1', listener: MyFunction }], function(bool){ });\n\t * FSBL.Clients.ConfigClient.removeListeners(['field1'], MyFunction, function(bool) { });\n\t */\n\tremoveListeners(params: removeListenersType, fn?: Function, cb?: Function) {\n\t\tif (!Array.isArray(params)) {\n\t\t\t// The typecasting below is bad but it prevents build problems. We should tighten the APIs.\n\t\t\tif (typeof params === \"function\") {\n\t\t\t\tthis.removeListener(({} as fieldOnlyParam), params, cb);\n\t\t\t} else if (params.field) {\n\t\t\t\tthis.removeListener((params as fieldOnlyParam), fn, cb);\n\t\t\t}\n\t\t\treturn cb(\"missing fields\");\n\t\t}\n\t\tvar removeCount = 0;\n\t\tfor (var i = 0; i < params.length; i++) {\n\t\t\tvar field = null;\n\t\t\tvar item = params[i];\n\t\t\tvar ls;\n\t\t\tif (typeof item === \"string\") {\n\t\t\t\tfield = item;\n\t\t\t} else if (item.field) {\n\t\t\t\tfield = item.field;\n\t\t\t\tls = params[i].listener;\n\t\t\t}\n\n\t\t\tvar combined = \"configService\" + (field ? \".\" + field : \"\");\n\t\t\tif (!ls) {\n\t\t\t\tif (fn && typeof fn === \"function\") {\n\t\t\t\t\tls = fn;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var j = 0; j < this.listeners[combined].length; j++) {\n\t\t\t\tif (this.listeners[combined][j] === ls) {\n\t\t\t\t\tthis.listeners[combined].pop(i);\n\t\t\t\t\tremoveCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (removeCount < params.length) {\n\t\t\treturn cb(\"All listeners could not be found\", false);\n\t\t}\n\t\treturn cb ? cb(null, true) : null;\n\t};\n\n\n\t/**\n\t * @private\n\t * @memberof ConfigClient\n\t */\n\thandleChanges = (err, response) => {// we use this to format our responses\n\t\tif (err) { Logger.system.error(err); }\n\t\tif (!response.data.field) { response.data.field = null; }\n\t\t//var combined = \"configService\" + (response.data.field ? \".\" + response.data.field : \"\");\n\t\tvar val = response.data.storeData ? response.data.storeData : response.data.value;\n\t\tthis.triggerListeners(response.data.field ? response.data.field : \"configService\", val);\n\t}\n\t// Trigger any function that is listening for changes\n\t/**\n\t * @private\n\t * @memberof ConfigClient\n\t */\n\ttriggerListeners = (listenerKey, data) => {\n\t\tif (this.listeners[listenerKey]) {\n\t\t\tfor (var i = 0; i < this.listeners[listenerKey].length; i++) {\n\t\t\t\tif (typeof this.listeners[listenerKey][i] === \"function\") {\n\t\t\t\t\tthis.listeners[listenerKey][i](null, { field: listenerKey, value: data });\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.warn(\"ConfigClient:triggerListeners: listener is not a function\", listenerKey);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Get all or a portion of the configuration from the Config Service. Typically this function is used to return Finsemble configuration\n\t * (e.g. \"finesemble.components\"); however, if can also return all or part of the manifest which contains the Finsemble config property.\n\t * If no configReference parameter is passed in (i.e. only the callback parameter is specified), then the complete manifest object is returned\n\t * (including manifest.finsemble).\n\t *\n\t * @param {object=} params field property identifies specific config to return\n\t * @param {function} callback callback function(error, data) to get the configuration data\n\t * @private\n\t * @example\n\t *\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble\" }, function(err, finsemble) {\n\t *\t\tif (!err) {\n\t *\t\t\tfinsembleConfig = finsemble;\n\t *\t\t} else {\n\t *\t\t\tconsole.error(\"failed to get finsemble configuration\");\n\t *\t\t}\n\t * });\n\t *\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble.isAuthEnabled\" }, function(err, isAuthEnabled) {\n\t *\t\tvar authorizationOn = isAuthEnabled;\n\t * });\n\t *\n\t * FSBL.Clients.ConfigClient.get(callback); // returns the complete manifest containing the finsemble property\n\t * FSBL.Clients.ConfigClient.get(null, callback); // alternate form; returns the complete manifest containing the finsemble property\n\t * FSBL.Clients.ConfigClient.get({}, callback); // alternate form; returns the complete manifest containing the finsemble property\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble.components\" }, callback);\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble.services\" }, callback);\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble.components\" }, callback);\n\t * FSBL.Clients.ConfigClient.get({ field: \"finsemble.assimilation\" }, callback);\n\t * FSBL.Clients.ConfigClient.get({ field: \"runtime.version\", callback) }; // returns the manifest's runtime.version property\n\t */\n\tget(params: fieldOnlyParam | {}, callback) {\n\t\tLogger.system.debug(\"ConfigClient.Get\", params);\n\t\tLogger.system.warn(\"This functionality has been deprecated. It will be removed in Finsemble version 3.0. Use getValue instead.\", params);\n\n\t\t// if only one argument then assume no filtering parameters -- the complete manifest will be returned\n\t\tif (arguments.length === 1) {\n\t\t\tcallback = params; // since only one arg, it must be the callback\n\t\t\tValidate.args(callback, \"function\");\n\t\t\tparams = {};\n\t\t} else {\n\t\t\tValidate.args(params, \"object\", callback, \"function\");\n\t\t}\n\t\tthis.routerClient.query(\"config.get\", params, function (queryErr, queryResponse) {\n\t\t\tcallback(queryErr, queryResponse ? queryResponse.data : null);\n\t\t});\n\t};\n\n\t/**\n\t * This is designed to mirror the get. Private because security TBD.\n\t * @private\n\t *\n\t * @param {object} params\n\t * @param {function} callback\n\t */\n\n\tset = (params: fieldAndValueParam | {}, callback) => {\n\t\tLogger.system.debug(\"ConfigClient.Set\", params);\n\t\t// if only one argument then assume no filtering parameters -- the complete manifest will be returned\n\t\tif (arguments.length === 1) {\n\t\t\tcallback = params; // since only one arg, it must be the callback\n\t\t\tValidate.args(callback, \"function\");\n\t\t\tparams = {};\n\t\t} else {\n\t\t\tValidate.args(params, \"object\", callback, \"function\");\n\t\t}\n\t\tthis.routerClient.query(\"config.set\", params, function (queryErr, queryResponse) {\n\t\t\tcallback(queryErr, queryResponse ? queryResponse.data : null);\n\t\t});\n\t}\n\n\t/**\n\t * Dynamically set config values within the Finsemble configuration.  New config properties may be set or existing ones modified. Note that configuration changes will not necessarily dynamically modify the components or services that use the corresponding configuration -- it depends if the component or service handles the corresponding change notifications (either though PubSub or the Config's DataStore). Also, these changes do not persist in any config files.\n\t *\n\t * <b>Note</b>: Anytime config is set using this API, the newConfig along with the updated manifest will by published to the PubSub topic \"Config.changeNotification\".  To get these notifications any component or service can subscribe to the topic. An example is shown below.\n\t *\n\t * <b>Note</b>: Anytime config is set using this API, the dataStore underlying configuration 'Finsemble-Configuration-Store' will also be updated. To get these dataStore events a listener can be set as shown in the example below. However, any config modifications made directly though the DataStore will not result in corresponding PubSub notifications.\n\t *\n\t * @param {object} params\n\t * @param {object} params.newConfig Provides the configuration properties to add into the existing configuration under manifest.finsemble. This config must match the Finsemble config requirements as described in the [Configuration tutorial]{@tutorial Configuration}. It can include importConfig references to dynamically fetch additional configuration files.\n\t * @param {boolean} params.overwrite If true then overwrite any preexisting config with new config (can only set to true when running from same origin, not cross-domain); if false then newConfig must not match properties of existing config, including service and component configuration.\n\t * @param {boolean} params.replace True specifies any component or service definitions in the new config will place all existing non-system component and service configuration\n\t * @param {StandardCallback} callback Callback to be invoked upon task completion.\n\t * @example\n\t * // Examples using processAndSet()\n\t * FSBL.Clients.ConfigClient.processAndSet({ newConfig: { myNewConfigField: 12345 }, overwrite: false });\n\t * FSBL.Clients.ConfigClient.processAndSet(\n\t * {\n\t *\tnewConfig: {\n\t *\t\t\"myNewConfigField\": 12345,\n\t *\t\t\"myNewConfigObject\": {\n\t *\t\t\tA: \"this is a test\",\n\t *\t\t\tB: \"more test\"\n\t *\t\t},\n\t *\t\t\"importConfig\": [\n\t *\t\t\t\"$applicationRoot/configs/application/test.json\",\n\t *\t\t]\n\t *\t},\n\t *\toverwrite: true,\n\t *  replace: false,\n\t * },\n\t *\tfunction (err, finsemble) {\n\t *\t\tif (err) {\n\t *\t\t\tconsole.error(\"ConfigClient.set\", err);\n\t *\t\t} else {\n\t *\t\t\tconsole.log(\"new finsemble config\", finsemble);\n\t *\t\t}\n\t *\t}\n\t * );\n\t *\n\t *  // example subscribing to PubSub to get notifications of dynamic updates\n\t * RouterClient.subscribe(\"Config.changeNotification\", function (err, notify) {\n\t *\t\tconsole.log(\"set notification\", notify.data.newConfig, notify.data.finsemble);\n\t *\t});\n\t *\n\t *  // example using DataStore to get notifications of dynamic updates\n\t * DistributedStoreClient.getStore({ store: 'Finsemble-Configuration-Store', global: true }, function (err, configStore) {\n\t *\t\tconfigStore.addListener({ field: \"finsemble\" }, function (err, newFinsembleConfig) {\n\t *\t\t\tconsole.log(\"new manifest.finsemble configuration\", newFinsembleConfig);\n\t *\t\t});\n\t * });\n\t *\n\t */\n\tprocessAndSet(params: {\n\t\tnewConfig: any,\n\t\toverwrite: boolean,\n\t\treplace: boolean\n\t}, callback?: StandardCallback) {\n\t\tLogger.system.debug(\"ConfigClient.processAndSet\", params);\n\n\t\tValidate.args(params, \"object\", callback, \"function=\") &&\n\t\t\t(Validate as any).args2(\"params.newConfig\", params.newConfig, \"object\", \"params.overwrite\", params.overwrite, \"boolean=\", \"params.replace\", params.replace, \"boolean=\");\n\n\t\tif (!params.overwrite && params.replace) {\n\t\t\tvar errMsg = \"cannot use replace option unless overwrite is also true\";\n\t\t\tLogger.system.warn(\"ConfigClient.processAndSet:\", errMsg);\n\t\t\tif (callback) {\n\t\t\t\tcallback(errMsg, null);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.routerClient.query(\"config.processAndSet\", params, function (queryErr, queryResponse) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback(queryErr, queryResponse ? queryResponse.data : null);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * Sets a value on the configStore and persists that value to storage. On application restart, this value will overwrite any application defaults.\n\t * @param {fieldAndValueParam} params\n\t * @param {StandardCallback} callback Callback to be invoked when callback to be invoked when preferences have been retrieved from the service.\n\t * @example\n\t * FSBL.Clients.ConfigClient.setPreference({\n\t * \tfield: \"finsemble.initialWorkspace\",\n\t * \tvalue: \"Workspace 2\"\n\t * }, (err, response) => {\n\t * \t\t//preference has been set\n\t * });\n\t */\n\tsetPreference(params: fieldAndValueParam, callback?: StandardCallback) {\n\t\tthis.routerClient.query(\"PreferencesService.setPreference\", params, function (queryErr, queryResponse) {\n\t\t\tif (callback) {\n\t\t\t\tcallback(queryErr, queryResponse ? queryResponse.data : null);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Retrieves all of the preferences set for the application.\n\t * @param {Object} params Parameters to pass to getPreferences. Optional. Defaults to null and currently ignored.\n\t * @param {StandardCallback} callback Callback to be invoked when preferences have been retrieved from the service.\n\t * @example\n\t * FSBL.Clients.ConfigClient.getPreferences((err, preferences)=> {\n\t * \t\t//use preferences.\n\t * });\n\t */\n\tgetPreferences(params?: any, callback?: StandardCallback) {\n\t\tif (typeof params === \"function\") {\n\t\t\tcallback = params;\n\t\t\tparams = null;\n\t\t}\n\t\tthis.routerClient.query(\"PreferencesService.getPreferences\", params, function (queryErr, queryResponse) {\n\t\t\tif (callback) {\n\t\t\t\tcallback(queryErr, queryResponse ? queryResponse.data : null);\n\t\t\t}\n\t\t});\n\t};\n};\n\nvar configClient = new ConfigClient({\n\tstartupDependencies: {\n\t\tservices: [\"configService\"]\n\t},\n\tonReady: function (cb) {\n\t\tif (cb) {\n\t\t\tcb();\n\t\t}\n\t},\n\tname: \"configClient\"\n});\n\nexport default configClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/configClient.ts","/*!\n* Copyright 2018 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nimport { ILogger } from \"./ILogger\"\nimport { ICentralLogger } from \"./ICentrallogger\"\n\nconst { debug, warn, log, /*info,*/ error } = console;\nconst info = () => { };\nconst verbose = info;\n\nconst logger: ILogger = {\n\twarn, info, log, debug,\n\terror, verbose\n}\n\n// This is all stolen from the logger.\n// @TODO - make consumers agnostic of this stuff and remove from the interface.\nconst LOCAL_ONLY_DEFAULT = false;\nvar DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true, Verbose: true, LocalOnly: LOCAL_ONLY_DEFAULT }; // if true captured for logger\nvar CONSOLE_DEFAULT_LOG_SETTING = { Error: true, Warn: true, Info: true, Log: true, Debug: true }; // if true then goes to console and captured for logger\n\nvar initialLogState = {\n\tconsole: CONSOLE_DEFAULT_LOG_SETTING,\n\tdev: DEFAULT_LOG_SETTING,\n\tsystem: DEFAULT_LOG_SETTING,\n\tperf: DEFAULT_LOG_SETTING,\n}; // will be updated on registration with Central Logger, but capture everything until then\n\n\nfunction IsLogMessage(channel) {\n\treturn (channel === \"logger.service.logMessages\");\n};\n\nfunction traceString() {\n\tfunction getPosition(string, subString, index) {\n\t\treturn string.split(subString, index).join(subString).length;\n\t}\n\n\tfunction getErrorObject() {\n\t\ttry {\n\t\t\tthrow Error(\"\");\n\t\t} catch (err) {\n\t\t\treturn err;\n\t\t}\n\t}\n\tvar stack = getErrorObject().stack;\n\tvar position = getPosition(stack, \"\\n\", 4);\n\tvar tString = stack.substring(position); // strip off irrelevant part of stack\n\tvar final = \"Log Stack: \\n\" + tString.substr(1); // insert description\n\treturn final;\n}\n\n/** An implementation of the ICentralLogger interface that\n * merely logs straight to the console rather than going over to\n * Central Logging service. Used in situations where use of the\n * Central Logging service is not possible (such as in test\n * environments, or in the Central Logging service itself).\n */\nexport class LocalLogger implements ICentralLogger {\n\t// Log things.\n\t// @TODO - Make consumers agnostic of these and remove from interface.\n\tstart = () => { }\n\tisLogMessage = IsLogMessage;\n\tsetting = () => initialLogState;\n\tcallStack = () => traceString();\n\tunregisterClient = (_) => {}\n\tsetRouterClient = () => { };\n\t// Top level logging methods\n\twarn = warn;\n\tinfo = info;\n\tlog = log;\n\tdebug = debug;\n\terror = error;\n\tverbose = verbose;\n\n\t// \"Namespaced\" methods - they still point to console.\n\tsystem = logger;\n\tperf = logger;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/clients/localLogger.ts","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/lib/bytesToUuid.js\n// module id = 17\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/lib/rng-browser.js\n// module id = 18\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/v1.js\n// module id = 19\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nimport Logger from \"../clients/logger\";\n\nimport { ConfigUtilInstance as ConfigUtil } from \"./configUtil\";\nimport { System } from \"../common/system\";\nvar ConfigClient = null;\n\n\"use strict\";\n\n/**\n * @introduction\n * <h2>Notification Client</h2>\n *\n * Finsemble makes use of pop up (toast) notifications for communicating information to the end user in a gentler way than modal dialogs.\n * Use the Notification API to route messages so that your components can create these notifications.\n *\n *\n * Notifications are called from `FSBL.UserNotification.alert`.\n *\n *\n * See the [Notifications tutorial](tutorial-Notifications.html) for an overview.\n *\n * @hideconstructor\n * @constructor\n */\nvar UserNotification = function () {\n\tvar alertOnceSinceStartUp = {};\n\tvar alertCurrentCount = {};\n\tvar defaultTemplateURL = null;\n\n\t/**\n\t * Gets the default template URL from the manifest at finsemble->notificationURL. If that doesn't exist then it falls back to the system template location.\n\t * @private\n\t */\n\tthis.getDefaultTemplateURL = function (cb) {\n\t\tif (defaultTemplateURL) {\n\t\t\tsetTimeout(function () { // Ensure async, just like else clause\n\t\t\t\tcb(defaultTemplateURL);\n\t\t\t}, 0);\n\t\t} else {\n\t\t\t// Require configClient here instead of at top of page to avoid a dependency error (Router uses UserNotification before config service is ready).\n\t\t\tif (!ConfigClient) ConfigClient = require(\"../clients/configClient\").default;\n\t\t\tConfigClient.get({ field: \"finsemble\" }, function (err, finConfig) {\n\t\t\t\tdefaultTemplateURL = ConfigUtil.getDefault(finConfig, \"finsemble.notificationURL\", finConfig.moduleRoot + \"/components/system/notification/notification.html\");\n\t\t\t\tcb(defaultTemplateURL);\n\t\t\t});\n\t\t}\n\t};\n\n\n\t/**\n\t * Conditionally alerts the end user using a desktop notification.\n\t *\n\t * @param {string} topic Specifies a category for the notification. Topic is currently unused, but in the future it will be used to filter notifications (e.g., applying regEx's defined in config to determine which notifications are displayed). Any topic string can be specified; however \"system\" is the recommended topic for system notifications applicable both to end uses and to developers. \"dev\" is the recommended topic for notifications applicable only during development (e.g., a notification that <i>config.json</i> has an illegal value).\n\t * @param {string} frequency Either \"ALWAYS\", \"ONCE-SINCE-STARTUP\", or \"MAX-COUNT\" to determine if alert should be displayed. Note, the frequencies are based on the number of notifications emitted from a window (as opposed to system wide).\n\t * @param {string} identifier Uniquely identifies this specific notification message. Used when \"frequency\" is set to \"ONCE-SINCE-STARTUP\" or \"MAX-COUNT\".\n\t * @param {any} message Message to display in the notification. Typically a string. Finsemble's built in templating accepts and object. See <i>../src-built-in/components/notification/notification.html<i>.\n\t * @param {object=} params\n\t * @param {number} params.maxCount Specifies the max number of notifications to display for specified identifier when frequency=\"MAX-COUNT\" (default is 1).\n\t * @param {number} params.duration Time in milliseconds before auto-dismissing the notification (defaults to 24 hours).\n\t * @param {number} params.url The URL for for notification HTML. If not provided then the system default will be used. Defaults to Finsemble's built-in version at <i>\"../components/system/notification/notification.html\"</i>.\n\t *\n\t * @example\n\t * FSBL.UserNotification.alert(\"system\", \"ONCE-SINCE-STARTUP\", \"MANIFEST-Error\", message);\n\t * FSBL.UserNotification.alert(\"dev\", \"ALWAYS\", \"Config-Error\", message, { url: notificationURL, duration: 1000 * 5 });\n\t * FSBL.UserNotification.alert(\"dev\", \"MAX-COUNT\", \"Transport-Failure\", message, { url: notificationURL, maxCount: 2 });\n\t*/\n\n\tthis.alert = function (topic, frequency, identifier, message, params) {\n\t\tvar self = this;\n\t\t// If the url for the template is passed in then don't bother fetching the config\n\t\tif (params && params.url) {\n\t\t\tthis.alertInternal(topic, frequency, identifier, message, params, params.url);\n\t\t} else {\n\t\t\t// If no url, then we need to get the template from config\n\t\t\tthis.getDefaultTemplateURL(function (url) {\n\t\t\t\tself.alertInternal(topic, frequency, identifier, message, params, url);\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * @private\n\t */\n\tthis.alertInternal = function (topic, frequency, identifier, message, params, url) {\n\t\tparams = params || {};\n\t\tvar alertUser = false;\n\t\tvar key = \"UserNotification.alert.\" + identifier;\n\t\tvar duration = params.duration || 1000 * 60 * 60 * 24;\n\n\t\tswitch (frequency) {\n\t\t\tcase \"ONCE-SINCE-STARTUP\":\n\t\t\t\tif (key in alertOnceSinceStartUp) {\n\t\t\t\t\talertUser = false;\n\t\t\t\t} else { // if no key then must be first time\n\t\t\t\t\talertUser = true;\n\t\t\t\t\talertOnceSinceStartUp[key] = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"MAX-COUNT\":\n\t\t\t\tlet currentCount = 0;\n\t\t\t\tlet maxCount = params.maxCount || 1;\n\t\t\t\tif (key in alertCurrentCount) {\n\t\t\t\t\tcurrentCount = alertCurrentCount[key];\n\t\t\t\t}\n\t\t\t\talertCurrentCount[key] = ++currentCount; // increment and store\n\t\t\t\tif (currentCount <= maxCount) {\n\t\t\t\t\talertUser = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault: // default to \"ALWAYS\"\n\t\t\t\talertUser = true;\n\t\t}\n\n\t\tLogger.log(\"UserNotification.alert\", topic, alertUser, frequency, identifier, message, params);\n\t\tif (alertUser) {\n\t\t\tvar notifyObject = {\n\t\t\t\turl: url,\n\t\t\t\tmessage: message,\n\t\t\t\ttimeout: duration\n\t\t\t};\n\t\t\tnew System.Notification(notifyObject);\n\t\t}\n\t};\n};\n\nexport default new UserNotification();\n\n\n// WEBPACK FOOTER //\n// ./src/common/userNotification.js","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nimport Validate from \"../common/validate\";\n\nimport Logger from \"./logger\";\n\nimport { _BaseClient } from \"./baseClient\";\nimport pLimit from \"p-limit\";\nimport { promisify } from \"../common/disentangledUtils\";\nconst limit = pLimit(1);\n\nimport { componentMutateParams } from '../services/window/WindowAbstractions/BaseWindow';\n\n/**\n *\n * @introduction\n * <h2>Storage Client</h2>\n *\n * The Storage Client handles saving and retrieving data for your smart desktop.\n *\n *\n *See the <a href=tutorial-storingData.html>Storing Data tutorial</a> for an overview of using the Storage Client.\n * @hideconstructor\n *  @todo add clear method\n * @constructor\n */\nexport class StorageClient extends _BaseClient {\n\t/**\n\t * Define the user name for storage (i.e., each user has unique storage).\n\t * @param {Object} params\n\t * @param {String} params.user The user name defined for storage.\n\t * @param {StandardCallback} cb Callback to be called on success.\n\t *\n\t * @example\n\t * FSBL.Clients.StorageClient.setUser({ user: \"JohnDeere\"});\n\t */\n\tsetUser(params: { user: string }, cb?: StandardCallback) {\n\t\tValidate.args(params.user, \"string\", cb, \"function=\");\n\t\tthis.routerClient.query(\"Storage.setUser\", { user: params.user }, function (err, response) {\n\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\tlogMethod(\"APPLICATION LIFECYCLE:StorageClient.setUser\", params, err, response);\n\t\t\tif (cb) {\n\t\t\t\tcb(err, response.data);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Specifies the data store. For normal operation this function doesn't have to be invoked -- the default data store is set in configuration.\n\t * @param {Object} params\n\t * @param {String} params.topic If specified then data store is set only for topic.\n\t * @param {string} params.dataStore Identifies the data store (e.g. \"localStorage\", \"redis\").\n\t * @param {function} cb Callback to be called on success.\n\t *\n\t * @example\n\t * FSBL.Clients.StorageClient.setStore({topic:\"finsemble\", dataStore:\"redis\"})\n\t */\n\tsetStore(params: { topic: string, dataStore?: string }, cb?: StandardCallback) {\n\t\tValidate.args(params.topic, \"string\", params.dataStore, \"string=\", cb, \"function=\");\n\t\tLogger.system.log(\"APPLICATION LIFECYCLE:StorageClient.setStore\", params, cb);\n\t\tthis.routerClient.query(\"Storage.setStore\", params, (err, response) => {\n\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\tlogMethod(\"Storage.setStore\", err, response);\n\t\t\tif (cb) {\n\t\t\t\tcb(err, response.data);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Save a key value pair into storage.\n\t * @param {Object} params\n\t * @param {String} params.topic Storage topic for key being stored.\n\t * @param {String} params.key The key to be stored.\n\t * @param {any} params.value The value to be stored.\n\t * @param {function} cb Callback to be called on success.\n\t *\n\t * @example\n\t * FSBL.Clients.StorageClient.save({topic:\"finsemble\", key:\"testKey\", value:\"testValue\"})\n\t */\n\tsave(params: componentMutateParams, cb?: StandardCallback) {\n\t\tif (typeof params.key !== \"string\" || typeof params.topic !== \"string\") {\n\t\t\tthrow new Error(\"Values for key and topic must be strings.\");\n\t\t}\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tValidate.args(params.topic, \"string\", params.key, \"string\", params.value, \"any\", cb, \"function=\");\n\t\t\tthis.routerClient.query(\"Storage.save\", params, (err, response) => {\n\t\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\t\tlogMethod(\"Storage.save\", err, response);\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(err, response.data);\n\t\t\t\t}\n\t\t\t\tif (err) {\n\t\t\t\t\treject({ err: err, data: null });\n\t\t\t\t} else {\n\t\t\t\t\tresolve({ err: err, data: response.data });\n\t\t\t\t}\n\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t *\n\t * @param params\n\t * @private\n\t */\n\tsave1(params: { key: string, topic: string, value: any }) {\n\t\treturn limit(() => this.save(params));\n\t}\n\n\t/**\n\t * Get a value from storage.\n\t * @param {Object} params\n\t * @param {String} params.key The key to get from storage.\n\t * @param {String} params.topic The topic that the data is saved under.\n\t * @param {function} cb Callback to be called on success.\n\t *\n\t * @example\n\t * FSBL.Clients.StorageClient.get({ topic:\"finsemble\", key:\"testKey\" }, function(err, data) {\n\t *\tvar myData = data;\n\t * });\n\t */\n\tget<T = any>(params: { key: string, topic: string }, cb?: StandardCallback<string | Error, T>): Promise<T> {\n\t\tif (typeof params.key !== \"string\" || typeof params.topic !== \"string\") {\n\t\t\tthrow new Error(\"Values for key and topic must be strings.\");\n\t\t}\n\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tValidate.args(params.topic, \"string\", params.key, \"string\", cb, \"function=\");\n\t\t\tthis.routerClient.query(\"Storage.get\", params, (err, response) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.error(\"Storage.get\", err, response);\n\t\t\t\t\tcb(err, response ? response.data : null);\n\t\t\t\t\treturn reject(err, response ? response.data : null);\n\t\t\t\t}\n\t\t\t\tLogger.system.info(\"Storage.get\", err, response);\n\t\t\t\tif (cb) cb(err, response.data);\n\t\t\t\tresolve(response.data);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t *\n\t * @param params\n\t * @param cb\n\t * @private\n\t */\n\tget1<T = any>(params: { key: string, topic: string }, cb?: StandardCallback<string | Error, T>): Promise<T> {\n\t\treturn limit(() => this.get(params));\n\t}\n\n\t/**\n\t * Asynchronously updates provided key in storage by first retrieving the key\n\t * then running a provided function on the result and re-saving its value.\n\t * There’s no guarantees of consistency or atomicity\n\t *\n\t * @param params {any} Update storage params\n\t * @param params.topic {string} The storage topic\n\t * @param params.key {string} The storage key\n\t * @param params.updateFn {Function} Function to run to determine the value to store\n\t * @private\n\t */\n\tasync updateStorage(params: { topic: string, key: string, updateFn: (x: any) => any }) {\n\t\tconst { topic, key, updateFn } = params;\n\t\tconst result = await this.get({ topic, key });\n\t\treturn this.save({ topic, key, value: updateFn(result) });\n\t}\n\n\t/**\n\t *\n\t * @param params\n\t * @private\n\t */\n\tupdateStorage1(params: { topic: string, key: string, updateFn: (x: any) => any }) {\n\t\treturn limit(() => this.updateStorage(params));\n\t}\n\n\t/**\n\t * Get all keys for the topic.\n\t * @param {Object} params\n\t * @param {String} params.topic Topic for the keys to return.\n\t * @param {String=} params.keyPrefix Filter all keys that don't start with this prefix.\n\t * @param {function} cb Callback to be called on success.\n\t *\n\t * @example\n\t * FSBL.Clients.StorageClient.keys({topic:\"finsemble\", keyPrefix:\"test\"}, function(err, data){\n\t *\tvar myKeys = data;\n\t * });\n\t */\n\tkeys(params: { topic: string, keyPrefix?: string }, cb?: StandardCallback) {\n\t\tValidate.args(params.topic, \"string\", cb, \"function=\");\n\t\tLogger.system.debug(\"StorageClient.keys\", params, cb);\n\t\tthis.routerClient.query(\"Storage.keys\", params, function (err, response) {\n\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\tlogMethod(\"Storage.keys\", err, response);\n\t\t\tif (cb) {\n\t\t\t\tcb(err, response.data);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t *\n\t * @param params\n\t * @private\n\t */\n\tkeys1(params: { topic: string, keyPrefix?: string }): Promise<string[]> {\n\t\treturn limit(() => promisify(this.keys.bind(this))(params));\n\t}\n\n\t/**\n\t * Get a multiple values from storage based on regex.(coming soon)\n\t * @param {Object} params\n\t * @param {function} cb Callback to be called on success.\n\t * @private\n\t * @todo make this work.\n\t * @example\n\t * StorageClient.get({key:\"testKey\"});\n\t */\n\tgetMultiple(params, cb?: StandardCallback) {\n\t\tLogger.system.info(\"StorageClient.getMultiple\", params, cb);\n\t\tthis.routerClient.query(\"Storage.getMultiple\", params, function (err, response) {\n\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\tlogMethod(\"StorageClient.getMultiple:\", params, response);\n\t\t\tif (cb) {\n\t\t\t\tcb(err, response);\n\t\t\t}\n\t\t});\n\t};\n\t/**\n\t * Delete a value from storage.\n\t * @param {Object} params\n\t * @param {String} params.key The key to get from storage.\n\t * @param {String} params.topic The topic that the data is saved under.\n\t * @example\n\t * FSBL.Clients.StorageClient.remove({ key:\"testKey\" })\n\t */\n\tremove(params: { key: string, topic: string }, cb?: StandardCallback) {\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tValidate.args(params.topic, \"string\", params.key, \"string\", cb, \"function=\");\n\t\t\tthis.routerClient.query(\"Storage.delete\", params, function (err, response) {\n\t\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\t\tlogMethod(\"StorageClient.delete\", err, response);\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(err, response.data);\n\t\t\t\t}\n\t\t\t\tif (err) {\n\t\t\t\t\treject({ err: err, data: null });\n\t\t\t\t} else {\n\t\t\t\t\tresolve({ err: err, data: response.data });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t *\n\t * @param params\n\t * @private\n\t */\n\tremove1(params: { key: string, topic: string }) {\n\t\treturn limit(() => this.remove(params));\n\t}\n\n\t//Did this because \"delete\" is a reserved keyword; for autocomplete the client is exported as a namespace with a bunch of functions and wouldn't work with a function called delete.\n\tdelete = this.remove;\n\n\t/**\n\t * Clears a storage adapter of all data.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t *\n\t */\n\tclearCache(cb?: StandardCallback) {\n\t\tLogger.system.log(\"StorageClient.clearCache\", cb);\n\t\tthis.routerClient.query(\"Storage.clearCache\", null, function (err, response) {\n\t\t\tconst logMethod = err ? Logger.system.error : Logger.system.info;\n\t\t\tlogMethod(\"StorageClient.clearCache\", err, response);\n\t\t\tif (cb) {\n\t\t\t\tcb(err, response.data);\n\t\t\t}\n\t\t});\n\t};\n};\n\nvar storageClient = new StorageClient({\n\tstartupDependencies: {\n\t\tservices: [\"storageService\"]\n\t},\n\tonReady: function (cb: () => void) {\n\t\tif (cb) {\n\t\t\tcb();\n\t\t}\n\t},\n\tname: \"storageClient\"\n});\n\nexport default storageClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/storageClient.ts","import { v1 as uuidv1 } from \"uuid\";\nimport * as get from \"lodash.get\";\nimport * as pick from \"lodash.pick\";\nimport { isEqual as deepEqual } from \"lodash\";\n\n//Class without deep openfin/system dependencies.\nexport function guuid() {\n\treturn uuidv1(); // return global uuid\n}\n\nexport function clone(obj, logFn) {\n\t//This has been tested a good amount. Previous to this commit we were using a mix of deepmerge and JSON.parse(JSON.stringify()).\n\t//Trying lodash.deepclone made my tests take 2-3s.\n\t//JSON.parse everywhere made them take ~ 1s.\n\t//Using JSON.parse on arrays and deep merge on objects makes them take 7-900ms.\n\tif (Array.isArray(obj)) {\n\t\treturn obj.slice();\n\t}\n\ttry {\n\t\treturn JSON.parse(JSON.stringify(obj));\n\t} catch (e) {\n\t\tlogFn(\"clone error\", e);\n\t\treturn e;\n\t}\n};\n\nexport function capitalizeFirst(s: string) {\n\treturn s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nclass MockLogger {\n\tsystem;\n\tconstructor({ debug } = { debug: true }) {\n\t\tif (debug) {\n\t\t\tthis.system = console;\n\t\t\tthis.system.debug = console.log;\n\t\t} else {\n\t\t\t//Suppress everything but errors for tests\n\t\t\tthis.system = {\n\t\t\t\twarn: Function.prototype,\n\t\t\t\tdebug: Function.prototype,\n\t\t\t\tlog: Function.prototype,\n\t\t\t\tinfo: Function.prototype,\n\t\t\t\terror: console.error\n\t\t\t};\n\t\t}\n\n\t}\n\tisLogMessage() { return true; };\n\n\tstart() { }\n};\n\nexport const mockLogger = new MockLogger();\n\n/** Converts a flat array into an array of arrays of length n.\n *\n * If the length of the array is not divisble by n, the last\n * element of the new array will contain the remainder items.\n*/\nexport function chunkArray(n: number, arr: any[]) {\n\tif (n <= 0) {\n\t\tthrow new Error(\"Can't chunk array by number less than 0\");\n\t}\n\n\treturn arr.reduce((prev, curr, index) => {\n\t\tif (index % n === 0) {\n\t\t\tconst chunk = []\n\t\t\tfor (let i = index; i < index + n; i++) {\n\t\t\t\tif (i < arr.length) {\n\t\t\t\t\tchunk.push(arr[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprev.push(chunk);\n\t\t}\n\t\treturn prev;\n\t}, []);\n}\n\n/**\n * Confirms wether a variable passed to it exists and is a number.\n * If true, returns the parsed Number, otherwise returns false\n * @param {string} [num] A string potentially containing a number\n * @returns False or Number(input)\n */\nexport function isNumber(num: string) {\n\tif (!num || Number.isNaN(Number(num))) {\n\t\treturn false;\n\t}\n\n\treturn Number(num);\n};\n\n/** Returns exactly what's passed to it. Useful for higher-order functions. */\nexport function identity<T>(arg: T): T {\n\treturn arg;\n}\n\n/*\ntyped-promisify, https://github.com/notenoughneon/typed-promisify\n\nMIT License\n\nCopyright (c) 2016 Emma Kuo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\n// DH 3/11/2019 - I've removed the type-inferring overloads, as they aren't\n// working correctly.\n\n/**\n * Wraps a callback accepting function in a promise. The callback must have the type\n * specified in StandardCallback, and the wrapped function *MUST* call the callback\n * on all possible code paths.\n */\nexport function promisify<T = any>(f: any, thisContext?: any): (...args) => Promise<T> {\n\treturn function () {\n\t\tlet args = Array.prototype.slice.call(arguments);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\targs.push((err: any, result: any) => err ? reject(err) : resolve(result));\n\t\t\tf.apply(thisContext, args);\n\t\t});\n\t}\n}\n\n/**\n * Wraps a promsie in logs that fire immediately before and after the execution of the promise. Returns a new promise.\n *\n * @param {*} logger A logging function that will log the message. E.g. `Logger.system.debug` or `console.log`.\n * @param {string} message A message to be logged. Suffixed with \"start\" and \"end\", before and after the promise, respectively.\n * @param {Promise} promise The promise to be wrapped.\n */\nexport const instrumentPromise = async (logger, message, promise) => {\n\tconst start = message + \" start\";\n\tconst end = message + \" end\";\n\tlogger(start);\n\treturn promise.then(() => logger(end));\n};\n\n/**\n * Composes an array of functions together, producing\n * a new function that is the result of applying each\n * function from right to left on its arguments.\n *\n * @example\n * const add1 = x => x + 1;\n * const multiply3 = x => x * 3\n * const mulityply3Add1 = composeRL(add1, multiply3);\n * mulityply3Add1(4); // => 13\n*/\nexport const composeRL = (...fns) => fns.reduce((f, g) => (...args) => f(g(...args)));\n\n/**\n * getProp utility - an alternative to lodash.get\n * @author @harish2704, @muffypl, @pi0, @imnnquy\n * @param {Object} object\n * @param {String|Array} path\n * @param {*} defaultVal\n */\nexport function getProp<T = any>(object, path, defaultVal?): T {\n\tconst _path = Array.isArray(path)\n\t\t? path\n\t\t: path.split('.').filter(i => i.length)\n\n\tif (!_path.length) {\n\t\treturn object === undefined ? defaultVal : object\n\t}\n\n\treturn getProp(object[_path.shift()], _path, defaultVal)\n}\n\nexport function getUniqueName(baseName = \"RouterClient\") {\n\treturn `${baseName}-${Math.floor(Math.random() * 100)}-${Math.floor(Math.random() * 10000)}`;\n}\n\nexport function getRandomWindowName(s: string, uuid: string) {\n\treturn `${getUniqueName(s)}-${uuid}`;\n}\n\n/**\n * Creates a promise that rejcts after the specified time with\n * the given message.\n */\nexport function timeoutPromise(ms, message: string) {\n\treturn new Promise((resolve, reject) => {\n\t\tlet id = setTimeout(() => {\n\t\t\tclearTimeout(id);\n\t\t\treject(message)\n\t\t}, ms)\n\t});\n}\n\n/**\n * Wraps a promise in another promise that either rejects after the specified number of miliseconds\n * or resolves with the result of the promise.\n */\nexport function wrapWithTimeout<T>(promise: Promise<T>, ms: number, message: string): Promise<T> {\n\treturn Promise.race([\n\t\tpromise,\n\t\ttimeoutPromise(ms, message),\n\t]) as Promise<T>\n}\n\n/**\n * Will determine if a given window is a StackedWindow. Returns true if the window is a\n * StackedWindow, false otherwise\n * @param {FinsembleWindow} win The window to check for StackedWindow\n */\nexport function isStackedWindow(win) {\n\treturn win &&\n\t\t((get(win, \"windowIdentifier.windowType\")\n\t\t\t|| win.windowType) === \"StackedWindow\");\n};\n\n/**\n * Converts an array into a record where the keys are the result of applying the key function\n * to each item in the array, and the values are the items.\n *\n * @param key Either the key whose value you want to become the new index, or a function\n * that returns the new index when given the current value.\n * @param arr An array of values.\n *\n * @example\n * const arr = [{foo: \"bar\"}, {foo: \"bam\"}];\n * toRecord(\"foo\", arr) // => {bar: {foo: \"bar\"}, {bam: {foo: \"bam\"}}}\n *\n * @example\n * const arr = [{foo: \"bar\"}, {foo: \"bam\"}];\n * toRecord(x => x.foo.toUpperCase(), arr) // => {BAR: {foo: \"bar\"}, {BAM: {foo: \"bam\"}}}\n */\nexport function toRecord<T>(key: string | ((x: T) => string), arr: T[]): Record<string, T> {\n\tconst keyFn = typeof key === \"string\"\n\t\t? x => x[key]\n\t\t: key;\n\treturn arr.reduce((prev, curr) => {\n\t\tprev[keyFn(curr)] = curr;\n\t\treturn prev;\n\t}, {});\n}\n\n/**\n * Given an object and array of keys as strings,\n * returns a new object copied from the first but\n * with those keys removed.\n */\nexport function removeKeys(obj, keys: string[]) {\n\tif (!obj) return obj;\n\tconst allKeys = Object.keys(obj);\n\tconst keepKeys = allKeys.filter(x => !keys.includes(x));\n\treturn pick(obj, keepKeys);\n}\n\n/**\n * Deep equal doesn't work properly if the objects aren't exactly equal\n * We have several places in the code that attach extra parameters to bounds objects\n * This function will test equality on bounds for the only left, right, top, bottom, width and height\n * @param {} bounds1 \n * @param {*} bounds2 \n */\nexport function checkIfBoundsAreEqual(bounds1, bounds2) {\n\tif (!bounds1 || !bounds2) return false;\n\tconst keepKeys = ['left', 'right', 'top', 'bottom', 'width', 'height'];\n\tconst updatedBounds1 = pick(bounds1, keepKeys);\n\tconst updatedBounds2 = pick(bounds2, keepKeys);\n\tif (deepEqual(updatedBounds1, updatedBounds2)) {\n\t\treturn true;\n\t}\n\treturn false;\n\n}\n\n\n\n// WEBPACK FOOTER //\n// src/common/disentangledUtils.ts","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.throttle/index.js\n// module id = 23\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.get/index.js\n// module id = 24\n// module chunks = 0 1 2 3 4 5 6 7 8 9 11 12","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.isequal/index.js\n// module id = 25\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","import { EventEmitter } from \"events\";\r\nconst deepEqual = require(\"lodash.isequal\");\r\n/** Singleton of the System class shared among all instances of Monitors\r\n * @TODO Refactor to instance member of class.\r\n */\r\nlet System;\r\nclass Monitors extends EventEmitter {\r\n\t/**\r\n\t *\r\n\t * @param {function} readyCB Function to be invoked when monitors are retrieved from the system for the first time.\r\n\t * @param {function} changeCB Function to be invoked when monitor information changes\r\n\t * @param {Object} dependencies Dependency object that provides a system object capable of retrieving monitors.\r\n\t */\r\n\tconstructor(readyCB, changeCB, dependencies) {\r\n\t\tsuper();\r\n\t\tif (dependencies && dependencies.System) {\r\n\t\t\tSystem = dependencies.System;\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Monitors class requires dependency injection. Ensure that System is being passed in.\");\r\n\t\t}\r\n\r\n\t\tthis.cachedMonitorInfo = null;\r\n\r\n\t\tthis.bindAllFunctions();\r\n\t\tthis.refreshMonitors(readyCB);\r\n\r\n\t\tSystem.addEventListener(\"monitor-info-changed\", () => {\r\n\t\t\tthis.refreshMonitors(changeCB);\r\n\t\t});\r\n\r\n\t\t//This is to handle 'wake events'. This is technically only going to handle unlock events (user locks screen or logs out then logs back in)\r\n\t\t//Technically, if the user has disabled 'lock on sleep', then this will not fire, but openfin does not have an event for waking/sleeping\r\n\t\tSystem.addEventListener(\"session-changed\", (params) => {\r\n\t\t\t// FEA returns undefined, openfin returns reason\r\n\t\t\tif (!params ||\r\n\t\t\t\t(typeof (params) === \"object\" &&\r\n\t\t\t\t\tparams.hasOwnProperty(\"reason\") &&\r\n\t\t\t\t\t(params.reason === \"unlock\" || params.reason === \"remote-connect\" || params.reason === \"unknown\"))) {\r\n\t\t\t\tthis.refreshMonitors(changeCB);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tbindAllFunctions() {\r\n\t\tlet self = this;\r\n\t\tfor (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {\r\n\t\t\tlet method = self[name];\r\n\t\t\t// skip constructor\r\n\t\t\tif (!(method instanceof Function) || method === Monitors) continue;\r\n\t\t\tself[name] = self[name].bind(self);\r\n\t\t}\r\n\t}\r\n\r\n\tasyncIt(data, cb) {\r\n\t\tcb(data);\r\n\t\treturn data;\r\n\t}\r\n\r\n\trationalizeMonitor(monitor) {\r\n\t\tmonitor.monitorRect.width = monitor.monitorRect.right - monitor.monitorRect.left;\r\n\t\tmonitor.monitorRect.height = monitor.monitorRect.bottom - monitor.monitorRect.top;\r\n\t\tmonitor.availableRect.width = monitor.availableRect.right - monitor.availableRect.left;\r\n\t\tmonitor.availableRect.height = monitor.availableRect.bottom - monitor.availableRect.top;\r\n\t}\r\n\r\n\tcalculateMonitorScale(dipRect, scaledRect) {\r\n\t\treturn ((scaledRect.right - scaledRect.left) / (dipRect.right - dipRect.left));\r\n\t}\r\n\r\n\t/**\r\n\t * Determines if two monitor configurations are different by performing a deep equal\r\n\t * @param {object} monitorInfo1 Object containing information about a set of monitors\r\n\t * @param {object} monitorInfo2 Object containing information about a set of monitors\r\n\t * @return {boolean} True if the monitors are different, false if they are the same\r\n\t */\r\n\tmonitorInfoIsChanged(monitorInfo1, monitorInfo2) {\r\n\t\tif (monitorInfo1 === null || monitorInfo2 === null || !deepEqual(monitorInfo1, monitorInfo2)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves monitor info from the system and sends an event that docking responds to.\r\n\t * If the number of monitors or id of all monitors hasn't changed, its assumed this\r\n\t * is a scaling/resolution change. The internal state will still be updated and the\r\n\t * returned result will include a 'monitorsChanged' boolean to indicate wether it\r\n\t * has changed or not\r\n\t *\r\n\t * @param {Function} cb\r\n\t */\r\n\trefreshMonitors(cb = Function.prototype) {\r\n\t\tlet monitorsChanged = true;\r\n\r\n\t\tSystem.getMonitorInfo((monitorInfo) => {\r\n\t\t\tif (!this.monitorInfoIsChanged(this.cachedMonitorInfo, monitorInfo)) {\r\n\t\t\t\tconsole.info(\"Skipped refreshMonitors because monitors do not change.\");\r\n\t\t\t\tmonitorsChanged = false;\r\n\t\t\t}\r\n\t\t\t//console.log(\"getAllMonitors\");\r\n\t\t\tthis.allMonitors = [];\r\n\t\t\tvar primaryMonitor = monitorInfo.primaryMonitor;\r\n\t\t\tthis.primaryMonitor = primaryMonitor;\r\n\t\t\tprimaryMonitor.whichMonitor = \"primary\";\r\n\r\n\t\t\tif (fin.container !== \"Electron\") {\r\n\t\t\t\tprimaryMonitor.deviceScaleFactor = this.calculateMonitorScale(primaryMonitor.monitor.dipRect, primaryMonitor.monitor.scaledRect);\r\n\t\t\t}\r\n\t\t\tprimaryMonitor.position = 0;\r\n\t\t\tthis.allMonitors.push(primaryMonitor);\r\n\t\t\tfor (let i = 0; i < monitorInfo.nonPrimaryMonitors.length; i++) {\r\n\t\t\t\tlet monitor = monitorInfo.nonPrimaryMonitors[i];\r\n\t\t\t\tif (fin.container !== \"Electron\") {\r\n\t\t\t\t\tmonitor.deviceScaleFactor = this.calculateMonitorScale(monitor.monitor.dipRect, monitor.monitor.scaledRect);\r\n\t\t\t\t}\r\n\t\t\t\tmonitor.whichMonitor = i;\r\n\t\t\t\tmonitor.position = i + 1;\r\n\t\t\t\tthis.allMonitors.push(monitor);\r\n\t\t\t}\r\n\t\t\tfor (let i = 0; i < this.allMonitors.length; i++) {\r\n\t\t\t\tlet monitor = this.allMonitors[i];\r\n\t\t\t\tthis.rationalizeMonitor(monitor);\r\n\t\t\t}\r\n\t\t\tthis.cachedMonitorInfo = monitorInfo;\r\n\t\t\tcb(this.allMonitors);\r\n\t\t\tthis.ready = true;\r\n\t\t\tthis.emit(\"monitors-changed\", {\r\n\t\t\t\tmonitors: this.allMonitors,\r\n\t\t\t\tmonitorsChanged\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Gets All Monitors.\r\n\t * @param {*} cb\r\n\t */\r\n\tgetAllMonitors(cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tif (cb) this.refreshMonitors(cb);\r\n\t\t\telse return \"not ready\";\r\n\t\t} else {\r\n\t\t\treturn this.asyncIt(this.allMonitors, cb);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the monitor on which the point is or null if not on any monitor. This assumes scaled dimensions for the monitor (For example from Openfin or WPF directly).\r\n\t * @param {*} x\r\n\t * @param {*} y\r\n\t * @param {*} cb\r\n\t */\r\n\tgetMonitorFromScaledXY(x, y, cb = Function.prototype) {\r\n\t\tlet promiseResolver = (resolve) => {\r\n\t\t\tif (!this.ready) {\r\n\t\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\t\tthis.getMonitorFromScaledXY(x, y, cb);\r\n\t\t\t\t});\r\n\t\t\t\t//This will recursively call until we have monitors.\r\n\t\t\t\treturn \"not ready\";\r\n\t\t\t}\r\n\t\t\tlet theMonitor = null;\r\n\t\t\tvar monitors = this.allMonitors;\r\n\t\t\tfor (var i = 0; i < monitors.length; i++) {\r\n\t\t\t\tvar monitor = monitors[i];\r\n\t\t\t\tvar monitorRect = monitor.monitorRect;\r\n\t\t\t\t// Are our coordinates inside the monitor? Note that\r\n\t\t\t\t// left and top are inclusive. right and bottom are exclusive\r\n\t\t\t\t// In OpenFin, two adjacent monitors will share a right and left pixel value!\r\n\t\t\t\tif (x >= monitorRect.left && x < monitorRect.right &&\r\n\t\t\t\t\ty >= monitorRect.top && y < monitorRect.bottom) {\r\n\t\t\t\t\ttheMonitor = monitor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresolve(theMonitor);\r\n\t\t\tcb(theMonitor);\r\n\t\t};\r\n\t\treturn new Promise(promiseResolver);\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the monitor on which the point is or null if not on any monitor. This assumes unscaled positions of x,y (for example from windows API).\r\n\t *\r\n\t * @param {any} x\r\n\t * @param {any} y\r\n\t * @param {any} [cb=function () { }]\r\n\t * @returns monitor if found or null\r\n\t * @memberof Monitors\r\n\t */\r\n\tgetMonitorFromUnscaledXY(x, y, cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\tthis.getMonitorFromUnscaledXY(x, y, cb);\r\n\t\t\t});\r\n\t\t\treturn \"not ready\";\r\n\t\t}\r\n\t\tvar monitors = this.allMonitors;\r\n\t\tfor (var i = 0; i < monitors.length; i++) {\r\n\t\t\tvar monitor = monitors[i];\r\n\t\t\tvar monitorRect = monitor.monitor.scaledRect;\r\n\t\t\tif (x >= monitorRect.left && x < monitorRect.right &&\r\n\t\t\t\ty >= monitorRect.top && y < monitorRect.bottom) {\r\n\t\t\t\treturn this.asyncIt(monitor, cb);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.asyncIt(null, cb);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts Point from scaled (e.g. from OpenFin/WPF) to unscaled (e.g. to give Windows API) position\r\n\t *\r\n\t * @param {any} point\r\n\t * @param {any} [cb=function () { }]\r\n\t * @returns monitor if found or null\r\n\t * @memberof Monitors\r\n\t */\r\n\tasync translatePointFromScaled(params, cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\tthis.translatePointFromScaled(params, cb);\r\n\t\t\t});\r\n\t\t\treturn \"not ready\";\r\n\t\t}\r\n\t\tvar point;\r\n\t\tif (params.point) point = params.point;\r\n\t\telse point = params;\r\n\t\tvar monitor = params.monitor;\r\n\t\tif (!monitor) {\r\n\t\t\tlet result = await this.getMonitorFromScaledXY(point.x, point.y);\r\n\t\t\tmonitor = result.data;\r\n\t\t}\r\n\r\n\t\tlet unscaledPoint = null;\r\n\t\tif (monitor) {\r\n\t\t\tvar relativeX = point.x - monitor.monitorRect.left;\r\n\t\t\tvar relativeY = point.y - monitor.monitorRect.top;\r\n\t\t\tvar unscaledRelativeX = relativeX * monitor.deviceScaleFactor;\r\n\t\t\tvar unscaledRelativeY = relativeY * monitor.deviceScaleFactor;\r\n\t\t\tunscaledPoint = {\r\n\t\t\t\tx: unscaledRelativeX + monitor.monitor.scaledRect.left,\r\n\t\t\t\ty: unscaledRelativeY + monitor.monitor.scaledRect.top\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tcb(unscaledPoint);\r\n\t\treturn Promise.resolve(unscaledPoint);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts Point to scaled (e.g. from OpenFin/WPF) from unscaled (e.g. to give Windows API) position\r\n\t *\r\n\t * @param {any} point\r\n\t * @param {any} [cb=function () { }]\r\n\t * @returns point if on monitor or null\r\n\t * @memberof Monitors\r\n\t */\r\n\ttranslatePointToScaled(params, cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\tthis.translatePointToScaled(params, cb);\r\n\t\t\t});\r\n\t\t\treturn \"not ready\";\r\n\t\t}\r\n\t\tvar point;\r\n\t\tif (params.point) point = params.point;\r\n\t\telse point = params;\r\n\t\tvar monitor = params.monitor || this.getMonitorFromUnscaledXY(point.x, point.y);\r\n\t\tif (!monitor) return this.asyncIt(null, cb);\r\n\t\tvar relativeX = point.x - monitor.monitor.scaledRect.left;\r\n\t\tvar relativeY = point.y - monitor.monitor.scaledRect.top;\r\n\t\tvar scaledRelativeX = relativeX / monitor.deviceScaleFactor;\r\n\t\tvar scaledRelativeY = relativeY / monitor.deviceScaleFactor;\r\n\t\tvar scaledPoint = {\r\n\t\t\tx: scaledRelativeX + monitor.monitorRect.left,\r\n\t\t\ty: scaledRelativeY + monitor.monitorRect.top\r\n\t\t};\r\n\t\treturn this.asyncIt(scaledPoint, cb);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts Rectangle (top, left, bottom, right) from unscaled to scaled. Mainly for use to translate window locations to/from Windows API.\r\n\t *\r\n\t * @param {any} rect\r\n\t * @param {any} [cb=function () { }]\r\n\t * @returns rect\r\n\t * @memberof Monitors\r\n\t */\r\n\tasync translateRectToScaled(rect, cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\tthis.translateRectToScaled(rect, cb);\r\n\t\t\t});\r\n\t\t\treturn \"not ready\";\r\n\t\t}\r\n\t\tvar topLeft = this.translatePointToScaled({ x: rect.left, y: rect.top });\r\n\t\tvar bottomRight = this.translatePointToScaled({ x: rect.right, y: rect.bottom });\r\n\t\tif (!topLeft && bottomRight) {\r\n\t\t\tmonitor = await this.getMonitorFromScaledXY(bottomRight);\r\n\t\t\ttopLeft = this.translatePointToScaled({\r\n\t\t\t\tmonitor,\r\n\t\t\t\tpoint: { x: rect.left, y: rect.top }\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (!bottomRight && topLeft) {\r\n\t\t\tmonitor = await this.getMonitorFromScaledXY(bottomRight);\r\n\t\t\tbottomRight = this.translatePointToScaled({\r\n\t\t\t\tmonitor,\r\n\t\t\t\tpoint: { x: rect.right, y: rect.bottom }\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this.asyncIt({\r\n\t\t\ttop: topLeft ? topLeft.y : null,\r\n\t\t\tleft: topLeft ? topLeft.x : null,\r\n\t\t\tbottom: bottomRight ? bottomRight.y : null,\r\n\t\t\tright: bottomRight ? bottomRight.x : null,\r\n\t\t\theight: (topLeft && bottomRight) ? bottomRight.y - topLeft.y : null,\r\n\t\t\twidth: (topLeft && bottomRight) ? bottomRight.x - topLeft.x : null\r\n\t\t}, cb);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts Rectangle (top, left, bottom, right) to unscaled from scaled. Mainly for use to translate window locations to/from Windows API.\r\n\t *\r\n\t * @param {any} rect\r\n\t * @param {any} [cb=function () { }]\r\n\t * @returns rect\r\n\t * @memberof Monitors\r\n\t */\r\n\ttranslateRectFromScaled(rect, cb = Function.prototype) {\r\n\t\tif (!this.ready) {\r\n\t\t\tthis.refreshMonitors(() => {\r\n\t\t\t\tthis.translateRectFromScaled(rect, cb);\r\n\t\t\t});\r\n\t\t\treturn \"not ready\";\r\n\t\t}\r\n\t\tvar topLeft = this.translatePointFromScaled({ x: rect.left, y: rect.top });\r\n\t\tvar bottomRight = this.translatePointFromScaled({ x: rect.right, y: rect.bottom });\r\n\t\tif (!topLeft && bottomRight) {\r\n\t\t\ttopLeft = this.translatePointFromScaled({\r\n\t\t\t\tmonitor: this.getMonitorFromUnscaledXY(bottomRight),\r\n\t\t\t\tpoint: { x: rect.left, y: rect.top }\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (!bottomRight && topLeft) {\r\n\t\t\tbottomRight = this.translatePointFromScaled({\r\n\t\t\t\tmonitor: this.getMonitorFromUnscaledXY(topLeft),\r\n\t\t\t\tpoint: { x: rect.right, y: rect.bottom }\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this.asyncIt({\r\n\t\t\ttop: topLeft ? topLeft.y : null,\r\n\t\t\tleft: topLeft ? topLeft.x : null,\r\n\t\t\tbottom: bottomRight ? bottomRight.y : null,\r\n\t\t\tright: bottomRight ? bottomRight.x : null,\r\n\t\t\theight: (topLeft && bottomRight) ? bottomRight.y - topLeft.y : null,\r\n\t\t\twidth: (topLeft && bottomRight) ? bottomRight.x - topLeft.x : null\r\n\t\t}, cb);\r\n\t}\r\n}\r\nexport default Monitors;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/monitorsAndScaling.js","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n// This routerTransport module is shared between router clients and the router service.  It supports\n// the addition of new transports without any change to the router code. Each transport is\n// point-to-point between a router client and the router service (i.e. hub and spoke).  Each router\n// client can use a different transport (i.e. the router service connects to them all).\n\n\"use strict\";\n\nimport { ConfigUtilInstance as ConfigUtils } from \"./configUtil\";\nimport Logger from \"../clients/logger\";\nimport { System } from \"../common/system\";\n\n/**\n * @introduction\n * <h2>Router Transport</h2>\n * **Service-Level Module**.  Manages and contains the point-to-point transports (i.e., Layer 2) supported by Finsemble.\n * Each transport communicates between a Finsemble services or component (i.e. a router client on one end) and the Finsemble router service (another router client on the other end).\n *\n * Integration into routerService.js is automatic on startup.\n *\n * Developer Notes on Adding New Transport:\n * 1) Create new transport constructor.\n * 2) Call RouterTransport.addTransport() to make the transport constructor (see the bottom of this file)\n *\n * Each transport constructor must be implemented with the following interface:\n *\n *\tExampleTransportConstructor(params, parentMessageHandler, source, destination) where\n *\n * \t\t\tparams is a passed in object including data that may (or may not) be needed for implementing the transport\n * \t\t\t\t\tparams.FinsembleUUID: globally unique identifier for Finsemble (one per host machine)\n *\t\t\t\t\tparams.applicationRoot:  value of manifest.finsemble.applicationRoot,\n *\t\t\t\t\tparams.routerDomainRoot: value of manifest.finsemble.moduleRoot,\n *\t\t\t\t\tparams.sameDomainTransport: transport to use for same domain clients\n *\t\t\t\t\tparams.crossDomainTransport: transport to use for cross domain clients\n *\t\t\t\t\tparams.transportSettings: transport settings from finsemble.router.transportSettings if defined, otherwise an empty object\n *\n * \t\t\tparentMessageHandler(incomingTransportInfo, routerMessage) where\n * \t\t\t\t\tincomingTransportInfo is a transport-specific object containing essential information to route back to the same client.\n * \t\t\t\t\t\tThe same object will be returned on a send() so the transport can use to send the message to that client.\n * \t\t\t\t\t\tIt's up to the developer to decide what to put in the incomingTransportInfo object. The RouterService never\n * \t\t\t\t\t\tdirectly uses the object, except to do a property-based comparison for equality (so equality must be based on the top-level properties within the object.)\n * \t\t\t\t\trouterMessage is an object containing a single router message. The transport generally does not need to know the contents --\n * \t\t\t\t\t\tit only sends and receives these messages. However, the router's header (routerMessage.header) is available to the transport if needed.\n *\n * \t\t\tsource is either the source's client name or \"RouterService\" (when the RouterService is the source)\n *\n * \t\t\tdestination is either the destination's client name or \"RouterService\" (when the RouterService is the designation)\n *\n * \t\t\tcallback(this) returns the constructor.  Normally a constructor is not asynchronous, but support in case the constructed transport requires async initialization.\n *\n * The transport constructor must implement two functions.\n * \t\t1) send(transport, routerMessage) -- transport object contains destination transport info; routerMessage is the message to send\n * \t\t2) identifier() -- returns transport's name\n *\n * These functions along with the parentMessageHandler callback all that's needed to interface with the higher-level router (either a client or router service):\n *\n * The three transports implemented at the bottom of this file can serve as examples.\n *\n * @namespace RouterTransport\n */\nvar RouterTransport = {\n\n\tactiveTransports: {},\n\n\t/**\n\t * Adds a new type of router transport to pass message between RouterClient and RouterService.\n\t *\n\t * @param {string} transportName identifies the new transport\n\t * @param {object} transportConstructor returns an instance of the new transport\n\t */\n\taddTransport: function (transportName, transportConstructor) {\n\t\tthis.activeTransports[transportName] = transportConstructor;\n\t\tLogger.system.log(`RouterTransport ${transportName} added to activeTransports`);\n\t},\n\n\t/**\n\t * Gets array of active transports.  What is active depends both on config and what is supported by the environment. Typically, if OF IAB is defined then the IAB transport is added to active list.  Likewise, if SharedWorker defined, then SharedWork transport added to the active list.  Special transports that don't have backwards compatibility (e.g. FinsembleTransport) are only added if specified in the config.\n\t *\n\t * @param {string} params transport parameters\n\t *\n\t * @returns array of active transport names\n\t */\n\tgetActiveTransports: function (params) {\n\t\tvar transportNames = [];\n\n\t\t// convenience function to add transport to active list only if it's not already in the list\n\t\tfunction addToActive(transportName) {\n\t\t\tif (transportNames.indexOf(transportName) === -1) { // if not already in the list, then add it\n\t\t\t\ttransportNames.push(transportName);\n\t\t\t}\n\t\t}\n\n\t\t// if OpenFin IAB available, then add IAB to active list\n\t\tif (fin && fin.desktop && fin.desktop.InterApplicationBus) addToActive(\"OpenFinBus\");\n\n\t\t// If electron, always have FinsembleTransport active\n\t\tif (fin && fin.container === \"Electron\") addToActive(\"FinsembleTransport\");\n\n\t\t// if shared worker available, then add shared-worker transport to active list\n\t\tif (SharedWorker) addToActive(\"SharedWorker\");\n\n\t\t// add whatever the sameDomainTransport is to the active list\n\t\taddToActive(params.sameDomainTransport);\n\n\t\t// add whatever the crossDomainTransport is to the active list\n\t\taddToActive(params.crossDomainTransport);\n\n\t\tLogger.system.log(\"getActiveTransports\", transportNames);\n\t\treturn transportNames;\n\t},\n\n\t/**\n\t * Get default transport for event router - this is the most reliable transport across all contexts.\n\t *\n \t * @param {object} params parameters for transport\n\t * @param {any} incomingMessageHandler\n\t * @param {any} source\n\t * @param {any} destination\n\t * @returns the transport object\n\t */\n\tgetDefaultTransport: function (params, incomingMessageHandler, source, destination) {\n\t\treturn RouterTransport.getTransport(params, \"OpenFinBus\", incomingMessageHandler, source, destination);\n\t},\n\n\t/**\n\t * Get best client transport based on the run-time context. Will only return cross-domain transport if current context is inter-domain.\n\t *\n \t * @param {object} params parameters for transport\n\t * @param {any} incomingMessageHandler\n\t * @param {any} source\n\t * @param {any} destination\n\t * @returns the transport object\n\t */\n\tgetRecommendedTransport: function (params, incomingMessageHandler, source, destination) {\n\n\t\t// returns true if this window's location is in another domain\n\t\tfunction crossDomain() {\n\t\t\tvar parser = document.createElement(\"a\");\n\t\t\tparser.href = params.routerDomainRoot;\n\n\t\t\tvar isSameHost = (window.location.hostname === parser.hostname);\n\n\t\t\tvar isSameProtocol = (window.location.protocol === parser.protocol);\n\n\t\t\tvar wport = (window.location.port !== undefined) ? window.location.port : 80;\n\t\t\tvar pport = (parser.port !== undefined) ? parser.port : 80;\n\t\t\tvar isSamePort = (wport === pport);\n\n\t\t\tvar isCrossDomain = !(isSameHost && isSamePort && isSameProtocol);\n\t\t\tLogger.system.debug(\"Transport crossDomain=\" + isCrossDomain + \" (\" + isSameHost + \":\" + isSameProtocol + \":\" + isSamePort + \")\");\n\t\t\treturn isCrossDomain;\n\t\t}\n\n\t\t// returns name of the best transport for communicating with router service\n\t\tfunction recommendedTransportName() {\n\t\t\tvar sameDomainTransport = params.sameDomainTransport;\n\t\t\tvar crossDomainTransport = params.crossDomainTransport;\n\n\t\t\tvar selectedTransport = sameDomainTransport;\n\t\t\tif (crossDomain()) {\n\t\t\t\tselectedTransport = crossDomainTransport;\n\t\t\t}\n\n\t\t\tLogger.system.log(`Transport Info: Selected=${selectedTransport} SameDomainDefault=${sameDomainTransport} CrossDomainDefault=${crossDomainTransport}`);\n\t\t\tconsole.log(`Transport Info: Selected=${selectedTransport} SameDomainDefault=${sameDomainTransport} CrossDomainDefault=${crossDomainTransport}`);\n\n\t\t\treturn selectedTransport;\n\t\t}\n\n\t\tvar transportName = recommendedTransportName();\n\t\treturn RouterTransport.getTransport(params, transportName, incomingMessageHandler, source, destination);\n\t},\n\n\t/**\n\t * Get a specific transport by name. The transport must be in list of the active transports (i.e. previously added).\n\t *\n \t * @param {object} params parameters for transport\n\t * @param {any} transportName\n\t * @param {any} incomingMessageHandler\n\t * @param {any} source\n\t * @param {any} destination\n\t * @returns the transport object\n\t */\n\tgetTransport: function (params, transportName, incomingMessageHandler, source, destination) {\n\t\tvar self = this;\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tvar transportConstructor = self.activeTransports[transportName];\n\t\t\tif (transportConstructor) {\n\t\t\t\tnew transportConstructor(params, incomingMessageHandler, source, destination, function (newTransport) {\n\t\t\t\t\tresolve(newTransport);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject(\"unknown router transport name: \" + transportName);\n\t\t\t}\n\t\t});\n\t}\n};\n\n//////////////////////////////////////////////////////////////\n// Below all transports are defined then added to active list\n//////////////////////////////////////////////////////////////\n\nvar RouterTransportImplementation = {}; // a convenience namespace for router-transport implementations\n\n/*\n * Implements the SharedWorker Transport.\n *\n * Required Functions (used by transport clients):\n * \t\tsend(routerMessage) -- transports the event\n * \t\tidentifier() -- returns transport name/identifier\n *\n * @param {object} params various params to support transports\n * @param {any} parentMessageHandler callback for incoming event\n * @param {any} source either the client name or \"RouterService\"\n * @param {any} destination either the client name or \"RouterService\" (unused in SharedWorker)\n */\nRouterTransportImplementation.SharedWorkerTransport = function (params, parentMessageHandler, source, destination, callback) {\n\tvar routerThread;\n\tvar self = this;\n\n\n\t// receives incoming shared-worker messages then passes on to parent with correct \"wrapper\"\n\tfunction sharedWorkerMessageHandler(swMessage) {\n\t\tvar port = swMessage.data[0];\n\t\tvar routerMessage = swMessage.data[1];\n\t\tvar incomingTransportInfo = { \"transportID\": self.identifier(), \"port\": port };\n\t\tLogger.system.verbose(\"SharedWorkerTransport Incoming Transport\", incomingTransportInfo, \"Message\", routerMessage);\n\t\tparentMessageHandler(incomingTransportInfo, routerMessage);\n\t}\n\n\t//required function for parent (i.e. routeClient or routeService)\n\tthis.send = function (transport, routerMessage) {\n\t\t// handle optional transport parm\n\t\tif (arguments.length === 1) {  // clients use just one parm -- routerMessage\n\t\t\trouterMessage = arguments[0];\n\t\t\ttransport = null;\n\t\t} else { // router services uses both parameters\n\t\t\ttransport = arguments[0];\n\t\t\trouterMessage = arguments[1];\n\t\t}\n\t\tLogger.system.verbose(\"SharedWorkerTransport Outgoing Transport\", routerMessage);\n\n\t\ttry {\n\t\t\trouterThread.port.postMessage([transport, routerMessage]);\n\t\t}\n\t\tcatch (e) {\n\t\t\tLogger.system.error(\"SharedWorkerTransport: post message failed: \" + JSON.stringify(e), \"Probable cause is sending illegal data type (e.g. function).\");\n\t\t}\n\t};\n\n\t//required function for parent (i.e. routeClient or routeService)\n\tthis.identifier = function () {\n\t\treturn \"SharedWorker\";\n\t};\n\n\tvar workerPath = (params.transportSettings.SharedWorker && params.transportSettings.SharedWorker.workerPath) ?\n\t\tparams.transportSettings.SharedWorker.workerPath : params.routerDomainRoot + \"/common/routerSharedWorker.js\";\n\n\tLogger.system.log(`SharedWorker Transport Initializing for ${source} using ${workerPath}`);\n\tconsole.log(`SharedWorker Transport Initializing for ${source} using ${workerPath}`);\n\n\trouterThread = new SharedWorker(workerPath, { name: \"Finsemble\", credentials: \"included\" });\n\trouterThread.port.onmessage = sharedWorkerMessageHandler;\n\trouterThread.onerror = function (e) {\n\t\tLogger.system.error(\"SharedWorkerTransport Transport Error\" + JSON.stringify(e));\n\t};\n\trouterThread.port.start();\n\n\tif (source === \"RouterService\") {  // send first message though shared worker to identify router service\n\t\trouterThread.port.postMessage({ data: \"connect\", source: \"RouterService\" });\n\t}\n\n\tcallback(this);\n};\n\n/*\n * Implements the OpenFin Bus Transport.\n *\n * Required Functions (used by transport clients):\n * \t\tsend(transport, routerMessage) -- transport object contains destination transport info; routerMessage is the message to send\n * \t\tidentifier() -- returns transport's name\n *\n * @param {object} params unused in OpenFin transport\n * @param {any} parentMessageHandler callback for incoming event\n * @param {any} source either the client name or \"RouterService\"\n * @param {any} destination either the client name or \"RouterService\"\n */\nRouterTransportImplementation.OpenFinTransport = function (params, parentMessageHandler, source, destination, callback) {\n\tvar uuid = System.Application.getCurrent().uuid;\n\tvar self = this;\n\n\t// receives incoming OpenFin bus messages then passes on to parent with correct \"wrapper\"\n\tfunction openFinMessageHandler(routerMessage, senderUuid) {\n\t\tvar incomingTransportInfo = { \"transportID\": self.identifier(), \"senderUuid\": senderUuid, \"name\": routerMessage.header.origin };\n\t\tLogger.system.verbose(\"OpenFinTransport Incoming Transport\", incomingTransportInfo, \"Message\", routerMessage);\n\t\tparentMessageHandler(incomingTransportInfo, routerMessage);\n\t}\n\n\tfunction subscribeFailure(reason) {\n\t\tLogger.system.error(\"OpenFinBus Subscribe Failure: \" + reason);\n\t}\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.send = function (transport, routerMessage) {\n\t\tvar destTopic;\n\n\t\t// handle optional transport parm\n\t\tif (arguments.length === 1) { // client use just one parameter - routerMessage\n\t\t\tdestTopic = destination;\n\t\t\trouterMessage = arguments[0];\n\t\t} else { // router service uses both parameters\n\t\t\tdestTopic = transport.name;\n\t\t\trouterMessage = arguments[1];\n\t\t}\n\n\t\tLogger.system.verbose(\"OpenFinTransport Outgoing Transport\", uuid, destTopic, \"Message\", routerMessage);\n\t\tfin.desktop.InterApplicationBus.publish(destTopic, routerMessage,\n\t\t\tfunction () { }, function (err) { });\n\t};\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.identifier = function () {\n\t\treturn \"OpenFinBus\";\n\t};\n\n\tLogger.system.log(`OpenFinBus Transport Initializing for ${source}`);\n\tconsole.log(`OpenFinBus Transport Initializing for ${source}`);\n\tfin.desktop.InterApplicationBus.subscribe(\"*\", source, openFinMessageHandler, null, subscribeFailure);\n\n\tcallback(this);\n};\n\n/*\n * Implements the FinsembleTransport (alternative to IAB without iFrame problems with supporting server commonly running on local server).\n *\n * Required Functions (used by transport clients):\n * \t\tsend(event) -- transports the event\n * \t\tidentifier() -- returns transport name/identifier\n *\n * @param {object} params various params to support transports\n * @param {any} parentMessageHandler callback for incoming event\n * @param {any} source either the client name or \"RouterService\"\n * @param {any} destination either the client name or \"RouterService\" (unused in FinsembleTransport)\n */\nRouterTransportImplementation.FinsembleTransport = function (params, parentMessageHandler, source, destination, callback) {\n\t/** @TODO - split into two separate vars for clarity. */\n\tvar serverAddress = ConfigUtils.getDefault(params, \"params.transportSettings.FinsembleTransport.serverAddress\",\n\t\tConfigUtils.getDefault(params, \"params.IAC.serverAddress\",\"ws://127.0.0.1:3376\")\n\t);\n\tconst SOCKET_SERVER_ADDRESS = serverAddress + \"/router\"; // \"router\" is the socket namespace used on server\n\n\tvar self = this;\n\n\t// receives incoming messages then passes on to parent (what's passed to parent should be same routerMessage received in send()\n\tfunction finsembleMessageHandler(routerMessage) {\n\t\tvar incomingTransportInfo = { \"transportID\": self.identifier(), \"client\": routerMessage.clientMessage.header.origin };\n\t\tLogger.system.verbose(\"FinsembleTransport Incoming Transport\", incomingTransportInfo, \"Message\", routerMessage);\n\t\tparentMessageHandler(incomingTransportInfo, routerMessage.clientMessage);\n\t}\n\n\t// Both sending and receiving is based on the following routing functionality located in a local node server (the below is a copy of the node server code)\n\t// \t\t// destination is RouterClient (message.client)\n\t//  \tclient.on('ROUTER_CLIENT', function(message) {\n\t// \t\t\trouterServer.emit(message.client, message);\n\t// \t\t});\n\t// \t\t// destination is RouterService\n\t// \t\tclient.on('ROUTER_SERVICE', function(message) {\n\t// \t\t\trouterServer.emit('ROUTER_SERVICE_IN', message);\n\t// \t\t});\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.send = function (transport, routerMessage) {\n\t\tlet dest;\n\t\tlet message;\n\n\t\t// decide how to route the message based on whether client or routerService is sending\n\t\tif (arguments.length === 1) { // clients use just one parameter, so send client message to RouterService\n\t\t\tdest = \"ROUTER_SERVICE\";\n\t\t\trouterMessage = arguments[0];\n\t\t\tmessage = { clientMessage: routerMessage };  // no client property needed to route on server since always going to router service\n\n\t\t} else { // router service uses both parameters, so send router-service message to a client\n\t\t\tdest = \"ROUTER_CLIENT\";\n\t\t\trouterMessage = arguments[1];\n\t\t\tmessage = { client: transport.client, clientMessage: routerMessage }; // client property used to router on server\n\t\t}\n\n\t\tLogger.system.verbose(\"FinsembleTransport Outgoing Transport\", dest, \"NewMessage\", message);\n\t\trouterServerSocket.send(JSON.stringify({ dest, message }));\n\t};\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.identifier = function () {\n\t\treturn \"FinsembleTransport\";\n\t};\n\n\tLogger.system.log(`FinsembleTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);\n\tconsole.log(`FinsembleTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);\n\n\tfunction connectTimeoutHandler() {\n\t\tLogger.system.error(`FinsembleTransport Connection Timeout for ${source}`);\n\t\tcallback(self);\n\t}\n\n\t// set up for receiving incoming messages\n\tvar routerServerSocket;\n\tif (SOCKET_SERVER_ADDRESS.startsWith(\"ws:\") || SOCKET_SERVER_ADDRESS.startsWith(\"wss:\")) {\n\t\trouterServerSocket = new WebSocket(SOCKET_SERVER_ADDRESS);\n\t} else {\n\t\tconsole.error(\"wss not found as SOCKET_SERVER_ADDRESS.  Use wss!\", SOCKET_SERVER_ADDRESS);\n\t\trouterServerSocket = new WebSocket(SOCKET_SERVER_ADDRESS);\n\t}\n\tvar connectTimer = setTimeout(connectTimeoutHandler, 3000); // cleared in setServiceOnline\n\n\trouterServerSocket.addEventListener(\"open\", () => {\n\t\tclearTimeout(connectTimer);\n\t\tLogger.system.log(\"FinsembleTransport Connected to Server\");\n\t\tconsole.log(\"FinsembleTransport Connected to Server\");\n\t\t// TODO: Currently all messages are broadcast to everyone and filtering happens here. Need to implement a system similar to socket.io to prevent this or only send messages to proper destinations.\n\t\trouterServerSocket.addEventListener(\"message\", (event) => {\n\t\t\tlet data = JSON.parse(event.data);\n\t\t\tif (source === \"RouterService\" && data.dest == \"ROUTER_SERVICE\") {\n\t\t\t\tfinsembleMessageHandler(data.message);\n\t\t\t} else if (source === data.message.client) {\n\t\t\t\tfinsembleMessageHandler(data.message);\n\t\t\t}\n\t\t});\n\t\tcallback(self);\n\t});\n\n};\n\n\n/*\n * Implements the FinsembleCloudTransport (a version of FinsembleTransport with server commonly running on remote server).\n *\n * Required Functions (used by transport clients):\n * \t\tsend(event) -- transports the event\n * \t\tidentifier() -- returns transport name/identifier\n *\n * @param {object} params various params to support transports\n * @param {any} parentMessageHandler callback for incoming event\n * @param {any} source either the client name or \"RouterService\"\n * @param {any} destination either the client name or \"RouterService\" (unused in FinsembleCloudTransport)\n */\nRouterTransportImplementation.FinsembleCloudTransport = function (params, parentMessageHandler, source, destination, callback) {\n\tvar serverAddress;\n\tvar defaultAddress = ConfigUtils.getDefault(params, \"params.transportSettings.FinsembleCloudTransport.serverAddress\", params.applicationRoot);\n\tvar FinsembleUUID = params.FinsembleUUID;\n\n\tif (defaultAddress.substr(defaultAddress.length - 1) === \"/\") {\n\t\tserverAddress = defaultAddress.substring(0, defaultAddress.length - 1); // truncate and trailing slash because it causes problem with socket.io namespace\n\t} else {\n\t\tserverAddress = defaultAddress;\n\t}\n\n\tconst SOCKET_SERVER_ADDRESS = serverAddress + \"/router\"; // \"router\" is the socket namespace used on server\n\n\tvar self = this;\n\n\t// receives incoming messages then passes on to parent (what's passed to parent should be same routerMessage received in send()\n\tfunction finsembleMessageHandler(routerMessage) {\n\t\tvar incomingTransportInfo = { \"transportID\": self.identifier(), \"client\": routerMessage.clientMessage.header.origin };\n\t\tLogger.system.verbose(\"FinsembleCloudTransport Incoming Transport\", incomingTransportInfo, \"Message\", routerMessage);\n\t\tparentMessageHandler(incomingTransportInfo, routerMessage.clientMessage);\n\t}\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.send = function (transport, routerMessage) {\n\t\tvar dest;\n\t\tvar newMessage;\n\n\t\t// decide how to route the message based on whether client or routerService is sending\n\t\tif (arguments.length === 1) { // clients use just one parameter, so send client message to RouterService\n\t\t\tdest = \"ROUTER_SERVICE\";\n\t\t\trouterMessage = arguments[0];\n\t\t\tnewMessage = { FinsembleUUID, clientMessage: routerMessage };  // no client property needed to route on server since always going to router service\n\n\t\t} else { // router service uses both parameters, so send router-service message to a client\n\t\t\tdest = \"ROUTER_CLIENT\";\n\t\t\trouterMessage = arguments[1];\n\t\t\tnewMessage = { FinsembleUUID, client: transport.client, clientMessage: routerMessage }; // client property used to router on server\n\t\t}\n\n\t\tLogger.system.verbose(\"FinsembleCloudTransport Outgoing Transport\", dest, \"NewMessage\", newMessage);\n\t\trouterServerSocket.emit(dest, newMessage);\n\t};\n\n\t//required function for the parent (i.e. routeClient or routeService)\n\tthis.identifier = function () {\n\t\treturn \"FinsembleCloudTransport\";\n\t};\n\n\tLogger.system.log(`FinsembleCloudTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);\n\tconsole.log(`FinsembleCloudTransport Transport Initializing for ${source} using ${SOCKET_SERVER_ADDRESS}`);\n\n\tfunction connectTimeoutHandler() {\n\t\tLogger.system.error(`FinsembleCloudTransport Connection Timeout for ${source}`);\n\t\tcallback(self);\n\t}\n\n\t// set up for receiving incoming messages\n\tvar routerServerSocket;\n\tif (SOCKET_SERVER_ADDRESS.indexOf(\"ws:\") !== -1) {\n\t\trouterServerSocket = new ws(SOCKET_SERVER_ADDRESS);\n\t} else {\n\t\tconsole.error(\"SOCKET_SERVER_ADDRESS not wss!\", SOCKET_SERVER_ADDRESS);\n\t\trouterServerSocket = new ws(SOCKET_SERVER_ADDRESS); // if not ws then http\n\t}\n\tvar connectTimer = setTimeout(connectTimeoutHandler, 3000); // cleared in setServiceOnline\n\n\trouterServerSocket.on(\"connect\", function () {\n\t\tclearTimeout(connectTimer);\n\t\tLogger.system.log(\"FinsembleCloudTransport Connected to Server\", FinsembleUUID);\n\t\tconsole.log(\"FinsembleCloudTransport Connected to Server\");\n\t\tif (source === \"RouterService\") {\n\t\t\t// if this transport is for router service, use hard coded socket address (\"ROUTER_SERVICE_IN\") along with FinsembleUUID\n\t\t\tLogger.system.debug(\"Setting Up Socket Connection\", \"ROUTER_SERVICE_IN\" + FinsembleUUID);\n\t\t\tconsole.log(\"Setting Up Socket Connection\", \"ROUTER_SERVICE_IN\" + FinsembleUUID);\n\t\t\trouterServerSocket.on(\"ROUTER_SERVICE_IN\" + FinsembleUUID, function (data) {\n\t\t\t\tfinsembleMessageHandler(data);\n\t\t\t});\n\t\t} else {\n\t\t\t// for all other clients, the source == client name, so each socket address is based on client name along with FinsembleUUID\n\t\t\tLogger.system.debug(\"Setting Up Socket Connection\", source + FinsembleUUID);\n\t\t\tconsole.log(\"SETTING UP Socket CONNECTION\", source + FinsembleUUID);\n\t\t\trouterServerSocket.on(source + FinsembleUUID, function (data) {\n\t\t\t\tfinsembleMessageHandler(data);\n\t\t\t});\n\t\t}\n\t\tcallback(self);\n\t});\n\n};\n\n// add the transports to the available/active list\nRouterTransport.addTransport(\"SharedWorker\", RouterTransportImplementation.SharedWorkerTransport);\nRouterTransport.addTransport(\"OpenFinBus\", RouterTransportImplementation.OpenFinTransport);\nRouterTransport.addTransport(\"FinsembleTransport\", RouterTransportImplementation.FinsembleTransport);\n\nexport default RouterTransport;\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/routerTransport.js","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n\"use strict\";\nimport RouterTransport from \"../common/routerTransport\";\nimport * as Utils from \"../common/util\";\nimport { ConfigUtilInstance as ConfigUtil } from \"../common/configUtil\";\nimport Validate from \"../common/validate\"; // Finsemble args validator\nimport UserNotification from \"../common/userNotification\";\nimport { System } from \"../common/system\";\nimport { Logger as _Logger } from \"./logger\";\nvar queue = []; // should never be used, but message sent before router ready will be queue\n/** The global `window` object. We cast it to a specific interface here to be\n * explicit about what Finsemble-related properties it may have. */\nimport { IGlobals } from \"../common/Globals\";\nconst Globals = typeof window !== \"undefined\"\n\t? window as IGlobals\n\t: process as any as IGlobals;\n\nimport { ICentralLogger } from \"./ICentralLogger\";\nimport { LocalLogger } from \"../clients/localLogger\";\nlet Logger: ICentralLogger = _Logger;\n//@todo proper types for router messages would be great.\n\n// Use global data for these objects in case multiple clients running in same window (a side effect of injection and perhaps other edge conditions).\nGlobals.FSBLData = Globals.FSBLData || {};\nGlobals.FSBLData.clientIDCounter = Globals.FSBLData.clientIDCounter || 1000;\nGlobals.FSBLData.RouterClients = Globals.FSBLData.RouterClients || {};\n\n/**\n * @introduction\n *\n * <h2>Router Client</h2>\n *\n * The Router Client sends and receives event messages between Finsemble components and services. See the <a href=tutorial-TheRouter.html>Router tutorial</a> for an overview of the Router's functionality.\n *\n * Router callbacks for incoming messages are **always** in the form `callback(error, event)`. If `error` is null, then the incoming data is always in `event.data`. If `error` is set, it contains a diagnostic object and message. On error, the `event` parameter is not undefined.\n *\n *\n * @constructor\n * @hideconstructor\n * @publishedName RouterClient\n * @param {string} clientName router base client name for human readable messages (window name is concatenated to baseClientName)\n * @param {string=} transportName router transport name, currently either \"SharedWorker\" or \"OpenFinBus\" (usually this is auto-configured internally but can be selected for testing or special configurations)\n */\n// un-comment for optimization.\n// console.time(\"FinMainStartup\");\nexport var RouterClientConstructor = function (params: { clientName: string, transportName?: string }) {\n\tValidate.args(params, \"object\") && Validate.args2(\"params.clientName\", params.clientName, \"string\", \"params.transportName\", params.transportName, \"string=\");\n\t// console.timeStamp(\"Router\");\n\t// console.profile(\"Router\");\n\n\t///////////////////////////\n\t// Private Data\n\t///////////////////////////\n\tvar baseClientName = params.clientName;\n\tvar transportName = params.transportName;\n\tvar handshakeHandler;\n\tvar timeCalibrationHandler;\n\tvar mapListeners = {};\n\tvar mapResponders = {};\n\tvar mapPubSubResponders = {};\n\tvar mapPubSubResponderState = {};\n\tvar mapPubSubResponderRegEx = {};\n\tvar pubsubListOfSubscribers = {};\n\tvar mapSubscribersID = {};\n\tvar mapSubscribersTopic = {};\n\tvar mapQueryResponses = {};\n\tvar mapQueryResponseTimeOut = {};\n\tvar clientName;\n\tvar transport = null;\n\tvar isRouterReady = false;\n\tvar parentReadyCallbackQueue = []; // must be queue because may be multiple waiters\n\tvar self = this;\n\tthis.startupTime = 0;\n\t/////////////////////////////////////////////////////////////////////\n\t// Private Message Constructors for Communicating with RouterService\n\t/////////////////////////////////////////////////////////////////////\n\n\tfunction InitialHandshakeMessage() {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"initialHandshake\",\n\t\t};\n\t}\n\tfunction TimeCalibrationHandshakeMessage(clientBaseTime, serviceBaseTime) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"timeCalibration\",\n\t\t};\n\t\tthis.clientBaseTime = clientBaseTime;\n\t\tthis.serviceBaseTime = serviceBaseTime;\n\t}\n\tfunction AddListenerMessage(channel) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"addListener\",\n\t\t\t\"channel\": channel\n\t\t};\n\t}\n\tfunction TransmitMessage(toChannel, data, options) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"transmit\",\n\t\t\t\"channel\": toChannel\n\t\t};\n\t\tthis.data = data;\n\t\tthis.options = options;\n\t}\n\tfunction RemoveListenerMessage(channel) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"removeListener\",\n\t\t\t\"channel\": channel\n\t\t};\n\t}\n\tfunction addResponderMessage(channel) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"addResponder\",\n\t\t\t\"channel\": channel\n\t\t};\n\t}\n\tfunction QueryMessage(queryID, channel, data) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"query\",\n\t\t\t\"queryID\": queryID,\n\t\t\t\"channel\": channel\n\t\t};\n\t\tthis.data = data;\n\t}\n\tfunction QueryResponseMessage(queryID, error, data) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"queryResponse\",\n\t\t\t\"queryID\": queryID,\n\t\t\t\"error\": error\n\t\t};\n\t\tthis.data = data;\n\t}\n\tfunction RemoveResponderMessage(channel) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"removeResponder\",\n\t\t\t\"channel\": channel\n\t\t};\n\t}\n\tfunction SubscribeMessage(subscribeID, topic) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"subscribe\",\n\t\t\t\"subscribeID\": subscribeID,\n\t\t\t\"topic\": topic\n\t\t};\n\t}\n\tfunction UnsubscribeMessage(subscribeID, topic) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"unsubscribe\",\n\t\t\t\"subscribeID\": subscribeID,\n\t\t\t\"topic\": topic\n\t\t};\n\t}\n\tfunction PublishMessage(topic, data) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"publish\",\n\t\t\t\"topic\": topic\n\t\t};\n\t\tthis.data = data;\n\t}\n\tfunction NotifyMessage(subscribeID, topic, error, data) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"notify\",\n\t\t\t\"subscribeID\": subscribeID,\n\t\t\t\"topic\": topic,\n\t\t\t\"error\": error\n\t\t};\n\t\tthis.data = data;\n\t}\n\tfunction AddPubSubResponderMessage(topic) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"addPubSubResponder\",\n\t\t\t\"topic\": topic\n\t\t};\n\t}\n\tfunction RemovePubSubResponderMessage(topic) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"removePubSubResponder\",\n\t\t\t\"topic\": topic\n\t\t};\n\t}\n\tfunction JoinGroupMessage(group) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"joinGroup\",\n\t\t\t\"group\": group\n\t\t};\n\t}\n\tfunction LeaveGroupMessage(group) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"leaveGroup\",\n\t\t\t\"group\": group\n\t\t};\n\t}\n\tfunction GroupTransmitMessage(group, toChannel, message, data) {\n\t\tthis.header = {\n\t\t\t\"origin\": clientName,\n\t\t\t\"type\": \"groupTransmit\",\n\t\t\t\"group\": group,\n\t\t\t\"channel\": toChannel\n\t\t};\n\t\tthis.data = data;\n\t}\n\n\t//////////////////////\n\t// Private Functions\n\t//////////////////////\n\n\t// router client is being terminated so cleanup\n\tfunction destructor(event) {\n\t\tLogger.system.info(\"WINDOW LIFECYCLE:Shutdown:RouterClient:Shutting down.\");\n\t\tself.disconnectAll(); // this will let the router know the client is terminating\n\t}\n\n\t// invoked when router init is complete\n\tfunction onReadyCallBack() {\n\t\tself.startupTime = performance.now() - self.startupTime;\n\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient Ready\");\n\t\tisRouterReady = true;\n\t\t// console.profileEnd(\"Router\");\n\t\t// invoke all the parent callbacks waiting for router to be ready\n\t\twhile (parentReadyCallbackQueue.length > 0) {\n\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient parentReady invoked\");\n\t\t\tvar nextParentCallback = parentReadyCallbackQueue.shift();\n\t\t\tnextParentCallback();\n\t\t}\n\t}\n\n\t// called once on router-client creation\n\tfunction constructor(clientName, transportName) {\n\n\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient Constructor:Name:\", clientName);\n\t\tvar callbackCounter = 0;\n\t\tfunction processManifest(manifest) {\n\t\t\tLogger.system.info(\"WINDOW LIFECYCLE:STARTUP:RouterClient:processManifest\");\n\t\t\t//If manifest is a string, then there was an error getting the manifest because in a separate application\n\t\t\tif (!manifest || typeof (manifest) === \"string\") {\n\t\t\t\tLogger.system.error(\"WINDOW LIFECYCLE:STARTUP:RouterClient:processManifest failed -- fatal error\", manifest);\n\t\t\t} else {\n\t\t\t\tasyncConnectToEventRouter(manifest, clientName, transportName, onReadyCallBack); /**** establish connection to router service ****/\n\t\t\t}\n\t\t}\n\t\t//This is the only place we need to wait for desktop.main\n\t\tSystem.ready(function () { // wait for openfin to be ready\n\t\t\tvar finWindow = System.Window.getCurrent();\n\t\t\tLogger.system.debug(`WINDOW LIFECYCLE:STARTUP: fin.main invoked in ${finWindow.name}`);\n\t\t\tconsole.debug(`WINDOW LIFECYCLE:STARTUP: fin.main invoked in ${finWindow.name}`);\n\t\t\tself.startupTime = performance.now();\n\t\t\t// un-comment for optimization.\n\t\t\t// console.timeEnd(\"FinMainStartup\");\n\t\t\tif (callbackCounter++ === 0) { // this check should  not be needed; patch for OpenFin bug which invokes callback twice\n\t\t\t\t// catch \"window closing\" event so can cleanup\n\t\t\t\t//got rid of onClose destructors because it's handled inside of the baseService and inside of FSBL. if we disconnect all before other close handlers complete, we could end up with a hanging window.\n\t\t\t\tfinWindow.getOptions((opts) => {\n\t\t\t\t\t// now the manifest data is available in custom data for all windows except the service manager window (i.e. the first window)\n\t\t\t\t\tif (opts.customData && opts.customData.manifest) {\n\t\t\t\t\t\tLogger.system.debug(\"Router Init using custom data\");\n\t\t\t\t\t\tprocessManifest(opts.customData.manifest);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tConfigUtil.getExpandedRawManifest(function (manifest) {\n\t\t\t\t\t\t\tLogger.system.debug(\"Router Init using getExpandedRawManifest\");\n\t\t\t\t\t\t\tif (Globals.FinsembleUUID) {\n\t\t\t\t\t\t\t\tmanifest.finsemble.FinsembleUUID = Globals.FinsembleUUID; // every window except serviceManager has FinsembleUUID -- this case covers the service manager,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprocessManifest(manifest);\n\t\t\t\t\t\t}, function (err) {\n\t\t\t\t\t\t\tLogger.system.error(\"WINDOW LIFECYCLE:STARTUP:RouterClient:manifest error\", err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t}, function (err) {\n\t\t\t\t\tLogger.system.error(\"WINDOW LIFECYCLE:STARTUP:finWindow.getOptions error\", err);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t// connects to event-router service. will retry various ways if needed\n\tfunction asyncConnectToEventRouter(manifest, clientName, transportName, onReadyCallBack) {\n\t\tvar transportNotSpecified = (typeof (transportName) === \"undefined\");\n\t\tvar myTimer;\n\t\tvar myRetryCounter;\n\t\tvar isFinished = false;\n\t\tvar handshakeFailedCount = 0;\n\t\tvar finConfig = manifest.finsemble;\n\n\t\tvar isElectron = fin && fin.container == \"Electron\";\n\t\tvar routerParams = {\n\t\t\tFinsembleUUID: finConfig.FinsembleUUID,\n\t\t\tapplicationRoot: finConfig.applicationRoot,\n\t\t\trouterDomainRoot: finConfig.moduleRoot,\n\t\t\tforceWindowTransport: ConfigUtil.getDefault(finConfig, \"finConfig.router.forceWindowTransport\", {}),\n\t\t\tsameDomainTransport: ConfigUtil.getDefault(finConfig, \"finConfig.router.sameDomainTransport\", \"SharedWorker\"),\n\t\t\tcrossDomainTransport: ConfigUtil.getDefault(finConfig, \"finConfig.router.crossDomainTransport\", \"OpenFinBus\"),\n\t\t\ttransportSettings: ConfigUtil.getDefault(finConfig, \"finConfig.router.transportSettings\", {}),\n\t\t\tIAC: ConfigUtil.getDefault(finConfig, \"finConfig.IAC\", {})\n\t\t};\n\n\t\tfunction getClientTransport() {\n\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient:getClientTransport\", \"ROUTER PARAMS:\", routerParams);\n\n\t\t\tif (transportNotSpecified) {\n\t\t\t\ttransport = RouterTransport.getRecommendedTransport(routerParams, incomingMessageHandler, clientName, \"RouterService\")\n\t\t\t\t\t.then(transportReady)\n\t\t\t\t\t.catch(errHandler);\n\t\t\t} else { // transport specified...typically only for regression testing\n\t\t\t\ttransport = RouterTransport.getTransport(routerParams, transportName, incomingMessageHandler, clientName, \"RouterService\")\n\t\t\t\t\t.then(transportReady)\n\t\t\t\t\t.catch(errHandler);\n\t\t\t}\n\t\t}\n\n\t\tfunction transportReady(transportObj) {\n\t\t\tmyRetryCounter = 0;\n\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient:transport ready\", \"TRANSPORT OBJECT\", transportObj);\n\t\t\ttransport = transportObj;\n\t\t\thandshakeHandler = finished; // set function to receive handshake response\n\t\t\tsendHandshake();\n\t\t\tmyTimer = setInterval(sendHandshake, 200); // start time to retry if response not received back from router service\n\t\t}\n\n\t\tfunction handshakeFailedHandler() {\n\t\t\tclearInterval(myTimer);\n\t\t\thandshakeFailedCount++;\n\n\t\t\tif (handshakeFailedCount <= 3) {\n\t\t\t\tLogger.system.error(\"WINDOW LIFECYCLE:STARTUP:RouterClient: failure to connect to router service. Retrying...\", handshakeFailedCount, routerParams);\n\t\t\t\tgetClientTransport();\n\n\t\t\t} else {\n\t\t\t\tlet failureMessage = `A cross domain transport has failed to connect. Cross domain components may not work. Please contact your administrator.`;\n\t\t\t\tLogger.system.error(failureMessage, routerParams);\n\t\t\t\tlet notificationURL = ConfigUtil.getDefault(finConfig, \"finConfig.notificationURL\", finConfig.moduleRoot + \"/components/system/notification/notification.html\");\n\t\t\t\tUserNotification.alert(\"dev\", \"ONCE-SINCE-STARTUP\", \"FSBL-Internal-Transport-Failure\", failureMessage, { url: notificationURL });\n\t\t\t}\n\t\t}\n\n\t\tfunction sendHandshake() {\n\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient: sendHandshake\", myRetryCounter);\n\t\t\tsendToRouterService(new InitialHandshakeMessage());\n\t\t\tif (myRetryCounter++ > 50) {\n\t\t\t\thandshakeFailedHandler();\n\t\t\t}\n\t\t}\n\n\t\tfunction finished() {\n\t\t\tif (!isFinished) { // ensure only invoked once\n\t\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE:STARTUP:RouterClient connected: Starting \" + clientName + \" with transport \" + transport.identifier());\n\t\t\t\tisFinished = true;\n\t\t\t\tclearInterval(myTimer);\n\t\t\t\tif (queue) { // this should not happen with proper startup order, which waits on routerClient to be ready\n\t\t\t\t\tfor (var i = 0; i < queue.length; i++) {\n\t\t\t\t\t\tLogger.system.debug(\"RouterClient: firing queued msg\");\n\t\t\t\t\t\tvar msg = queue[i];\n\t\t\t\t\t\ttransport.send(msg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// notify initialization is complete\n\t\t\t\tif (onReadyCallBack) {\n\t\t\t\t\tonReadyCallBack();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction errHandler(errorMessage) {\n\t\t\tLogger.system.error(\"RouterClientError\", errorMessage);\n\t\t}\n\n\t\t// main code for this asyncConnectToEventRouter function -- only executed once\n\t\tgetClientTransport();\n\t}\n\n\t// provides unique id within one router client for queries\n\tfunction clientID() {\n\t\treturn clientName + \".\" + (++Globals.FSBLData.clientIDCounter);\n\t}\n\n\t// returns true if this routerClient originated the message\n\tfunction originatedHere() {\n\t\treturn this.header.origin === this.header.lastClient;\n\t}\n\n\t// invoke client callbacks in the input array (that are attached to a specific channel and listener type)\n\tfunction invokeListenerCallbacks(map, message) {\n\t\tvar originalClientCallbackArray = map[message.header.channel] || [];\n\t\tvar clientCallbackArray = [];\n\t\tif (!Array.isArray(originalClientCallbackArray) ||\n\t\t\t(originalClientCallbackArray.length === 0)) {\n\t\t\tLogger.system.warn(\"RouterClient: no listener for incoming transmit on channel \" + message.header.channel + \" from \" + message.header.origin, message);\n\t\t} else {\n\t\t\tmessage.originatedHere = originatedHere;// add local function to test origin\n\t\t\t//@note, have to operate off of a copy because a callback may call removeListener, which will modify map[message.header.channel].\n\t\t\toriginalClientCallbackArray.forEach(cb => {\n\t\t\t\tclientCallbackArray.push(cb);\n\t\t\t});\n\t\t\tfor (var i = 0; i < clientCallbackArray.length; i++) { // for each callback defined for the channel\n\t\t\t\tif (!Logger.isLogMessage(message.header.channel)) { // logger messages\n\t\t\t\t\tLogger.system.info(\"RouterClient: incoming transmit\", \"CHANNEL\", message.header.channel, \"FROM\", message.header.origin, \"MESSAGE\", message);\n\t\t\t\t}\n\t\t\t\tclientCallbackArray[i](null, message); // invoke the callback; the error parameter is always null for this case\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction sendQueryResponse(err, responseData) {\n\t\t//@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.\n\t\tLogger.system.info(\"RouterClient: outgoing query response\", \"CHANNEL\", this.header.channel, \"RESPONSE DATA\", responseData, \"QUERY ID\", this.header.queryID);\n\t\tsendToRouterService(new QueryResponseMessage(this.header.queryID, err, responseData));\n\t}\n\n\t// invoke responder-listener callback (attached to a specific channel)\n\tfunction invokeResponderCallback(map, queryMessage) {\n\t\tvar responderCallback = map[queryMessage.header.channel];\n\t\tif (responderCallback === undefined) {\n\t\t\tLogger.system.warn(\"RouterClient: no query responder define on channel \" + queryMessage.header.channel + \" incoming from \" + queryMessage.header.origin, queryMessage);\n\t\t} else {\n\t\t\tif (!queryMessage.header.error) {\n\t\t\t\tqueryMessage.originatedHere = originatedHere; // add local function to test origin\n\t\t\t\tqueryMessage.sendQueryResponse = sendQueryResponse.bind(queryMessage); // add callback function to message so responder can respond to query\n\t\t\t\tLogger.system.info(\"RouterClient: incoming query\", \"CHANNEL\", queryMessage.header.channel, \"FROM\", queryMessage.header.origin, \"QUERY MESSAGE\", queryMessage);\n\t\t\t\tresponderCallback(null, queryMessage); // invoke the callback (no error)\n\t\t\t} else { // invoke the callback with error since  flag in message (from router service)\n\t\t\t\tLogger.system.warn(\"RouterClient: queryResponder error\", queryMessage);\n\t\t\t\tresponderCallback(queryMessage.header.error, null);\n\t\t\t\tdelete map[queryMessage.header.channel]; // this is a bad responder (e.g. duplicate) so remove it\n\t\t\t}\n\t\t}\n\t}\n\n\t// add a callbackHandler into the query-response map for the given queryID\n\tfunction addQueryResponseCallBack(map, queryID, responseCallback) {\n\t\tmap[queryID] = responseCallback;\n\t}\n\n\t// add timer to wait for query response\n\tfunction addQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID, channel, timeout) {\n\t\tif (timeout > 0) {\n\t\t\tmapQueryResponseTimeOut[newQueryID] = setTimeout(function () {\n\t\t\t\tLogger.system.warn(\"RouterClient: timeout waiting on query response on channel \" + channel + \" for queryID \" + newQueryID +\n\t\t\t\t\t\" on timer \" + mapQueryResponseTimeOut[newQueryID] + \" timeout=\" + timeout);\n\t\t\t}, timeout);\n\t\t}\n\t}\n\n\t// delete timer waiting on query response (if it exists)\n\tfunction deleteQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID) {\n\t\tvar theTimer = mapQueryResponseTimeOut[newQueryID];\n\t\tif (theTimer !== undefined) {\n\t\t\tclearTimeout(theTimer);\n\t\t}\n\t}\n\n\t// invoke query-response callback (that is attached to a specific channel and listener type)\n\tfunction invokeQueryResponseCallback(map, responseMessage) {\n\t\tvar clientCallback = map[responseMessage.header.queryID];\n\t\tif (clientCallback === undefined) {\n\t\t\tLogger.system.warn(\"RouterClient: no handler for incoming query response\", \"QUERY ID\", responseMessage.header.queryID);\n\t\t} else {\n\t\t\t// delete any existing timer waiting on the response\n\t\t\tdeleteQueryResponseTimeout(mapQueryResponseTimeOut, responseMessage.header.queryID);\n\n\t\t\tif (!responseMessage.header.error) {\n\t\t\t\t//@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.\n\t\t\t\tLogger.system.info(\"RouterClient: incoming query response\", \"RESPONSE MESSAGE\", responseMessage, \"QUERY ID\", responseMessage.header.queryID);\n\t\t\t\tclientCallback(null, responseMessage); // invoke the callback passing the response message\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"RouterClient: incoming queryResponse error\", responseMessage.header, \"QUERY ID\", responseMessage.header.queryID);\n\t\t\t\tclientCallback(responseMessage.header.error, responseMessage); // error from router service so pass it back instead of a message\n\t\t\t}\n\t\t\tdelete map[responseMessage.header.queryID];\n\t\t}\n\t}\n\n\t// add responder callbackHandler for the given channel\n\tfunction addResponderCallBack(map, channel, callback) {\n\t\tvar status = false;\n\t\tvar clientCallback = map[channel];\n\t\tif (clientCallback === undefined) {\n\t\t\tmap[channel] = callback;\n\t\t\tstatus = true;\n\t\t}\n\t\treturn status;\n\t}\n\n\t// support function for sendNotifyToSubscriber -- maintains local list of subscribers for pubsub responder\n\tfunction addToPubSubListOfSubscribers(pubsubListOfSubscribers, topic, subscribeID) {\n\t\tif (!(topic in pubsubListOfSubscribers)) {\n\t\t\tpubsubListOfSubscribers[topic] = [subscribeID];\n\t\t} else {\n\t\t\tpubsubListOfSubscribers[topic].push(subscribeID);\n\t\t}\n\t}\n\n\t// support function for addPubSubResponder -- add pubsub responder callbackHandler for the given channel\n\tfunction addPubSubResponderCallBack(topic, subscribeCallback, publishCallback, unsubscribeCallback) {\n\t\tvar status = false;\n\t\tvar callbacks = mapPubSubResponders[topic.toString()];\n\t\tif (callbacks === undefined) {\n\t\t\tif (topic instanceof RegExp) {\n\t\t\t\tmapPubSubResponderRegEx[topic.toString()] = topic;\n\t\t\t\tLogger.system.info(\"RouterClient: PubSub RegEx added for topic \" + topic.toString()); // Note: topic may be a RegEx, so use toString() where applicable\n\t\t\t}\n\t\t\tmapPubSubResponders[topic.toString()] = { \"subscribeCallback\": subscribeCallback, \"publishCallback\": publishCallback, \"unsubscribeCallback\": unsubscribeCallback };\n\t\t\tstatus = true;\n\t\t}\n\t\treturn status;\n\t}\n\n\t// callback function for invokeSubscribePubSubCallback to notify new subscriber\n\tfunction sendNotifyToSubscriber(err, notifyData) {\n\t\t//@todo consider removing this log. Why log it? Why not log it _only_ if the dev wants a particular message logged. This can cause problems.\n\t\tsendToRouterService(new NotifyMessage(this.header.subscribeID, this.header.topic, err, notifyData));\n\t\tif (!err) {\n\t\t\t// add new subscriber to list\n\t\t\taddToPubSubListOfSubscribers(pubsubListOfSubscribers, this.header.topic, this.header.subscribeID);\n\t\t\tLogger.system.info(\"RouterClient: incoming subscription added\", \"TOPIC\", this.header.topic, \"MESSAGE\", this);\n\t\t} else {\n\t\t\tLogger.system.warn(\"RouterClient: incoming subscription rejected by pubsub responder\", \"TOPIC\", this.header.topic, \"MESSAGE\", this);\n\t\t}\n\t}\n\n\t// for incoming subscribe: invoke notify callback for pubsub responder\n\tfunction invokeSubscribePubSubCallback(subscribeMessage) {\n\t\tvar callbacks = mapPubSubResponders[subscribeMessage.header.topic];\n\t\t//@todo consider removing this log. Why log it? Why not log it _onlY_ if the dev wants a particular message logged. This can cause problems.\n\t\tif (callbacks === undefined) { // if undefined then may be a matching RegEx topic\n\t\t\tfor (var key in mapPubSubResponderRegEx) {\n\t\t\t\tif (mapPubSubResponderRegEx[key].test(subscribeMessage.header.topic)) {\n\t\t\t\t\tcallbacks = mapPubSubResponders[key];\n\t\t\t\t\tvar initialState = mapPubSubResponderState[subscribeMessage.header.topic]; // may already be initial state defined from publish\n\t\t\t\t\tif (initialState === undefined) { // if there isn't already state defined then use default from regEx\n\t\t\t\t\t\tinitialState = mapPubSubResponderState[key]; // initialize the state from RegEx topic\n\t\t\t\t\t}\n\t\t\t\t\tmapPubSubResponderState[subscribeMessage.header.topic] = initialState;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (callbacks === undefined) { // if still undefined\n\t\t\tLogger.system.warn(\"RouterClient: no pubsub responder defined for incoming subscribe\", subscribeMessage);\n\t\t} else {\n\t\t\tif (subscribeMessage.header.error) { // the router service uses the subscribe message in this case to return a pubsub error (ToDO: consider a generic error message)\n\t\t\t\tLogger.system.warn(\"RouterClient: pubsub error received from router service: \" + JSON.stringify(subscribeMessage.header.error));\n\t\t\t} else {\n\t\t\t\tsubscribeMessage.sendNotifyToSubscriber = sendNotifyToSubscriber; // add callback function to message so pubsub responder can respond with Notify message\n\t\t\t\tif (callbacks.subscribeCallback) {\n\t\t\t\t\tsubscribeMessage.data = mapPubSubResponderState[subscribeMessage.header.topic];\n\t\t\t\t\tcallbacks.subscribeCallback(null, subscribeMessage); // invoke the callback (no error)\n\t\t\t\t} else { // since no subscribe callback defined, use default functionality\n\t\t\t\t\tsubscribeMessage.sendNotifyToSubscriber(null, mapPubSubResponderState[subscribeMessage.header.topic]); // must invoke from message to set this properly\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// support function for removeSubscriber callback --  remove one subscribeID from array for the given subscription topic\n\tfunction removeFromPubSubListOfSubscribers(pubsubListOfSubscribers, topic, subscribeID) {\n\t\tvar removed = false;\n\t\tif (topic in pubsubListOfSubscribers) {\n\t\t\tvar list = pubsubListOfSubscribers[topic];\n\t\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\t\tif (subscribeID === list[i]) {\n\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t\tif (list.length === 0) {\n\t\t\t\t\t\tdelete pubsubListOfSubscribers[topic];\n\t\t\t\t\t}\n\t\t\t\t\tremoved = true;\n\t\t\t\t\tLogger.system.info(\"RouterClient: PubSub removeListener\", \"TOPIC\", topic, \"FROM\", subscribeID);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!removed) {\n\t\t\tLogger.system.warn(\"RouterClient: tried to remove non-existent listener on \" + topic + \" from \" + JSON.stringify(subscribeID));\n\t\t}\n\t}\n\n\t// callback function for invokeUnsubscribePubSubCallback to remove the subscriber from the subscription\n\tfunction removeSubscriber() {\n\t\tremoveFromPubSubListOfSubscribers(pubsubListOfSubscribers, this.header.topic, this.header.subscribeID);\n\t}\n\n\t// for incoming unsubscribe: invoke unsubscribe callback for pubsub server\n\tfunction invokeUnsubscribePubSubCallback(unsubscribeMessage) {\n\t\tvar callbacks = mapPubSubResponders[unsubscribeMessage.header.topic];\n\n\t\tif (callbacks === undefined) { // if undefined then may be a matching RegEx topic\n\t\t\tfor (var key in mapPubSubResponderRegEx) {\n\t\t\t\tif (mapPubSubResponderRegEx[key].test(unsubscribeMessage.header.topic)) {\n\t\t\t\t\tcallbacks = mapPubSubResponders[key];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (callbacks === undefined) { // if still undefined\n\t\t\tLogger.system.warn(\"RouterClient: no pubsub responder defined for incoming unsubscribe\", \"TOPIC\", unsubscribeMessage.header.topic, \"UNSUBSCRIBE MESSAGE\", unsubscribeMessage);\n\t\t} else {\n\t\t\tunsubscribeMessage.removeSubscriber = removeSubscriber; // add callback function to message for pubsub responder (but must always remove)\n\t\t\tif (callbacks.unsubscribeCallback) {\n\t\t\t\tLogger.system.info(\"RouterClient: incoming unsubscribe callback\", \"TOPIC\", unsubscribeMessage.header.topic, \"UNSUBSCRIBE MESSAGE\", unsubscribeMessage);\n\t\t\t\tcallbacks.unsubscribeCallback(null, unsubscribeMessage); // invoke the callback (no error)\n\t\t\t} else { // since no unsubscribe callback defined, use default functionality\n\t\t\t\tLogger.system.info(\"RouterClient: incoming unsubscribe\", \"TOPIC\", unsubscribeMessage.header.topic, \"UNSUBSCRIBE MESSAGE\", unsubscribeMessage);\n\t\t\t\tunsubscribeMessage.removeSubscriber();\n\t\t\t}\n\t\t}\n\t}\n\n\t// callback function for invokePublishPubSubCallback to send Notify\n\tfunction sendNotifyToAllSubscribers(err, notifyData) {\n\t\tif (!err) {\n\t\t\tmapPubSubResponderState[this.header.topic] = notifyData; // store new state\n\t\t\tvar listOfSubscribers = pubsubListOfSubscribers[this.header.topic];\n\t\t\tif (typeof (listOfSubscribers) !== \"undefined\") { // confirm subscribers to send to, if none then nothing to do\n\t\t\t\tfor (var i = 0; i < listOfSubscribers.length; i++) {\n\t\t\t\t\tLogger.system.info(\"RouterClient: sending pubsub notify\", \"TOPIC\", this.header.topic, \"NOTIFY DATA\", notifyData);\n\t\t\t\t\tsendToRouterService(new NotifyMessage(listOfSubscribers[i], this.header.topic, err, notifyData));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tLogger.system.warn(\"RouterClient: income publish rejected by pubsub responder\", err, notifyData);\n\t\t}\n\t}\n\n\t// for incoming Publish: invoke publish callback for pubsub server\n\tfunction invokePublishPubSubCallback(publishMessage) {\n\t\tvar callbacks = mapPubSubResponders[publishMessage.header.topic];\n\n\t\tif (callbacks === undefined) { // if undefined then may be a matching RegEx topic\n\t\t\tfor (var key in mapPubSubResponderRegEx) {\n\t\t\t\tif (mapPubSubResponderRegEx[key].test(publishMessage.header.topic)) {\n\t\t\t\t\tcallbacks = mapPubSubResponders[key];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (callbacks === undefined) { // if still undefined\n\t\t\tLogger.system.warn(\"RouterClient: no pubsub responder defined for incoming publish\", \"TOPIC\", publishMessage.header.topic, \"PUBLISH MESSAGE\", publishMessage);\n\t\t} else {\n\t\t\tpublishMessage.sendNotifyToAllSubscribers = sendNotifyToAllSubscribers; // add callback function to message so pubsub responder can respond to publish\n\t\t\tif (callbacks.publishCallback) {\n\t\t\t\tLogger.system.info(\"RouterClient: incoming PubSub publish callback invoked\", \"TOPIC\", publishMessage.header.topic, \"PUBLISH MESSAGE\", publishMessage);\n\t\t\t\tcallbacks.publishCallback(null, publishMessage); // invoke the callback (no error)\n\t\t\t} else { // since no publish callback defined, use default functionality\n\t\t\t\tLogger.system.info(\"RouterClient: incoming PubSub publish\", \"TOPIC\", publishMessage.header.topic, \"PUBLISH MESSAGE\", publishMessage);\n\t\t\t\tpublishMessage.sendNotifyToAllSubscribers(null, publishMessage.data); // must call from publish message (like a callback) so 'this' is properly set\n\t\t\t}\n\t\t}\n\t}\n\n\t// for incoming Notify: invoke notify callback (that are attached to a specific channel and listener type)\n\tfunction invokeNotifyCallback(mapSubscribersID, notifyMessage) {\n\t\tvar notifyCallback = mapSubscribersID[notifyMessage.header.subscribeID];\n\t\tif (notifyCallback === undefined) {\n\t\t\tLogger.system.warn(\"RouterClient: no subscription handler defined for incoming notify for subscriberID\", notifyMessage.header.subscribeID, notifyMessage);\n\t\t} else {\n\t\t\tif (!notifyMessage.header.error) {\n\t\t\t\tnotifyMessage.originatedHere = originatedHere;// add local function to test origin\n\t\t\t\tLogger.system.info(\"RouterClient: incoming PubSub notify\", \"SUBSCRIBER ID\", notifyMessage.header.subscribeID, \"NOTIFY MESSAGE\", notifyMessage);\n\t\t\t\tnotifyCallback(null, notifyMessage); // invoke the callback passing the response message\n\t\t\t} else {\n\t\t\t\tLogger.system.info(\"RouterClient: incoming PubSub notify error for subscriberID\", \"SUBSCRIBER ID\", notifyMessage.header.subscribeID, \"NOTIFY MESSAGE\", notifyMessage);\n\t\t\t\tnotifyCallback(notifyMessage.header.error, notifyMessage); // error from router service so pass it back instead of a message\n\t\t\t}\n\t\t}\n\t}\n\n\t// outgoing Unsubscribe: remove subscriber callbackHandler for the given channel\n\tfunction removeSubscriberCallBack(mapSubscribersID, subscribeID) {\n\t\tvar status = false;\n\t\tvar notifyCallback = mapSubscribersID[subscribeID];\n\t\tif (notifyCallback !== undefined) {\n\t\t\tdelete mapSubscribersID[subscribeID];\n\t\t\tstatus = true;\n\t\t}\n\t\treturn status;\n\t}\n\n\t// for outgoing addSubscriber -- add a callback Handler for the subscribe\n\tfunction addSubscriberCallBack(mapSubscribersID, subscribeID, notifyCallback, topic) {\n\t\tmapSubscribersID[subscribeID] = notifyCallback;\n\t\tmapSubscribersTopic[subscribeID] = topic;\n\n\t}\n\n\t// for removePubSubResponder: remove responder callbackHandler for the given channel\n\tfunction removeResponderCallBack(map, channel) {\n\t\tvar status = false;\n\t\tvar clientCallback = map[channel];\n\t\tif (clientCallback !== undefined) {\n\t\t\tdelete map[channel];\n\t\t\tstatus = true;\n\t\t}\n\t\treturn status;\n\t}\n\n\t// for addListener: add a callbackHandler into the specified map (which depends on listener type) for the given channel\n\tfunction addListenerCallBack(map, channel, callback) {\n\t\tvar firstChannelClient = false;\n\t\tvar clientCallbackArray = map[channel];\n\t\tif (clientCallbackArray === undefined || clientCallbackArray.length === 0) {\n\t\t\tmap[channel] = [callback];\n\t\t\tfirstChannelClient = true;\n\t\t} else {\n\t\t\tclientCallbackArray.push(callback);\n\t\t}\n\t\treturn firstChannelClient;\n\t}\n\n\t// for removeListener: remove a callbackHandler from the specified map (which depends on listener type) for the given channel\n\tfunction removeListenerCallBack(map, channel, callback) {\n\t\tvar lastChannelClient = false;\n\t\tvar clientCallbackArray = map[channel];\n\t\tif (clientCallbackArray !== undefined) {\n\t\t\tvar index = clientCallbackArray.indexOf(callback);\n\t\t\tif (index > -1) {\n\t\t\t\tclientCallbackArray.splice(index, 1);\n\t\t\t\tif (clientCallbackArray.length === 0) {\n\t\t\t\t\tlastChannelClient = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"no listener defined for channel: \" + channel);\n\t\t\t}\n\t\t}\n\t\treturn lastChannelClient;\n\t}\n\n\t// route incoming message to appropriate callback, which depends on the message type and channel\n\tfunction routeIncomingMessage(incomingMessage) {\n\t\tLogger.system.verbose(\"Incoming Message Type\", incomingMessage.header.type, incomingMessage);\n\t\tswitch (incomingMessage.header.type) {\n\t\t\tcase \"transmit\":\n\t\t\t\tinvokeListenerCallbacks(mapListeners, incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"query\":\n\t\t\t\tinvokeResponderCallback(mapResponders, incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"queryResponse\":\n\t\t\t\tinvokeQueryResponseCallback(mapQueryResponses, incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"notify\":\n\t\t\t\tinvokeNotifyCallback(mapSubscribersID, incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"publish\":\n\t\t\t\tinvokePublishPubSubCallback(incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"subscribe\":\n\t\t\t\tinvokeSubscribePubSubCallback(incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"unsubscribe\":\n\t\t\t\tinvokeUnsubscribePubSubCallback(incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"timeCalibration\":\n\t\t\t\ttimeCalibrationHandler(incomingMessage);\n\t\t\t\tbreak;\n\t\t\tcase \"initialHandshakeResponse\":\n\t\t\t\thandshakeHandler();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\n\t// *** all incoming messages from underlying transport arrive here ***\n\t// although incoming transport information is available, it is not passed on because not needed\n\tfunction incomingMessageHandler(incomingTransportInfo, message) {\n\t\t// ToDo: good place to put a function to validate incoming message/data\n\t\tmessage.header.lastClient = clientName; // add last client for diagnostics\n\t\tmessage.header.incomingTransportInfo = incomingTransportInfo;\n\t\trouteIncomingMessage(message);\n\t}\n\n\t// *** all outbound messages exit here though the appropriate transport ***\n\tfunction sendToRouterService(message) {\n\t\tif (!transport || (transport instanceof Promise)) {\n\t\t\tLogger.system.warn(\"RouterClient: Queuing message since router initialization not complete\", message);\n\t\t\tqueue.push(message);\n\t\t} else {\n\t\t\ttransport.send(message);\n\t\t}\n\t}\n\n\t/**\n\t * Estimates offset to align the reference time with Router Service.  Does this by exchanging messages with RouterService, getting the service's time, and estimating communication delay.\n\t *\n\t * @private\n\t */\n\tthis.calibrateTimeWithRouterService = function (callback) {\n\t\tconst TARGET_HANDSHAKE_COUNT = 5;\n\t\tvar handshakeCounter = 0;\n\t\tvar timeOffset;\n\t\tvar offsetForFastest;\n\t\tvar fastestRRT = Infinity;\n\n\t\tfunction calibrationCalculation(finalHandshakeMessage) {\n\t\t\tvar timeOffset = 0;\n\t\t\tfor (var i = 1; i < TARGET_HANDSHAKE_COUNT; i++) {\n\t\t\t\tvar startClientTime = finalHandshakeMessage.clientBaseTime[i - 1];\n\t\t\t\tvar stopClientTime = finalHandshakeMessage.clientBaseTime[i];\n\t\t\t\tvar rtt = stopClientTime - startClientTime; // round-trip time\n\t\t\t\tvar serviceTime = finalHandshakeMessage.serviceBaseTime[i - 1];\n\t\t\t\tvar offset = serviceTime - (startClientTime + (rtt / 2));\n\t\t\t\tif (rtt < fastestRRT) {\n\t\t\t\t\tfastestRRT = rtt;\n\t\t\t\t\toffsetForFastest = offset;\n\t\t\t\t}\n\t\t\t\ttimeOffset += offset;\n\t\t\t\tLogger.system.debug(\"calibrationCalculation Intermediate Values\", \"lastRRT\", rtt, \"lastOffset\", offset, \"fastestOffset\", offsetForFastest, \"fastestRRT\", fastestRRT);\n\t\t\t}\n\t\t\ttimeOffset /= (TARGET_HANDSHAKE_COUNT - 1);\n\t\t\tLogger.system.debug(\"RouterClient calibrationCalculation\", \"Average Offset\", timeOffset, \"Chosen FastestOffset\", offsetForFastest, finalHandshakeMessage);\n\t\t\tcallback(offsetForFastest); // use the offset with the shortest RTT since it is often the most accurate\n\t\t}\n\n\t\tfunction timeCalibrationHandlerFunction(message) {\n\t\t\thandshakeCounter++;\n\t\t\tif (handshakeCounter > TARGET_HANDSHAKE_COUNT) {\n\t\t\t\tcalibrationCalculation(message); // enough handshake data gather, so do the calibration\n\t\t\t} else {\n\t\t\t\tmessage.clientBaseTime.push(Globals.performance.timing.navigationStart + Globals.performance.now());\n\t\t\t\tsendToRouterService(new TimeCalibrationHandshakeMessage(message.clientBaseTime, message.serviceBaseTime));\n\t\t\t}\n\t\t}\n\n\t\ttimeCalibrationHandler = timeCalibrationHandlerFunction; // used in routeIncomingMessage to route handshake response back to handler\n\t\ttimeCalibrationHandler(new TimeCalibrationHandshakeMessage([], [])); // invoke first time to start exchanging handshakes; will be invoked each time handshake message received back from RouterService\n\t};\n\n\t/**\n\t * Backward compatibility?\n\t * @private\n\t */\n\tthis.ready = (cb) => this.onReady(cb);\n\n\t/**\n * Get router client name.\n *\n * @param {string} newClientName string identify the client\n * FSBL.Clients.RouterClient.setClientName(\"MyComponent\");\n * @private\n */\n\tthis.getClientName = function () {\n\t\tLogger.system.debug(\"RouterClient.getClientName\", clientName);\n\t\treturn clientName;\n\t};\n\n\t/////////////////////////////////////////////\n\t// Public Functions -- The Router Client API\n\t/////////////////////////////////////////////\n\t/**\n\t * Checks if router is ready. May be invoked multiple times. Invokes cb when ready, which may be immediately.  Router is not ready until underlying transport to router service is ready.\n\t *\n\t * @param {function} cb callback function to invoke when router is ready\n\t */\n\tthis.onReady = function (cb) {\n\t\tValidate.args(cb, \"function\");\n\t\tif (isRouterReady) {\n\t\t\tcb();\n\t\t} else {\n\t\t\tparentReadyCallbackQueue.push(cb);\n\t\t}\n\t};\n\n\t/**\n\t * Add listener for incoming transmit events on specified channel. Each of the incoming events will trigger the specified event handler. The number of listeners is not limited (either local to this Finsemble window or in a separate Finsemble window).\n\t *\n\t * See [transmit]{@link RouterClientConstructor#transmit} for sending a corresponding event message to listener. See [removeListener]{@link RouterClientConstructor#removeListener} to remove the listener.\n\t *\n\t * @param {string} channel any unique string to identify the channel (must match correspond transmit channel name)\n\t * @param {function} eventHandler function (see example below)\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.addListener(\"SomeChannelName\", function (error, response) {\n\t * \tif (error) {\n\t *\t\t\tLogger.system.log(\"ChannelA Error: \" + JSON.stringify(error));\n\t *\t\t} else {\n\t *\t\t\tvar data = response.data;\n\t *\t\t\tLogger.system.log(\"ChannelA Response: \" + JSON.stringify(response));\n\t *\t\t}\n\t * });\n\t *\n\t */\n\tthis.addListener = function (channel: string, eventHandler: Function) {\n\t\tLogger.system.info(\"RouterClient.addListener\", \"CHANNEL\", channel);\n\t\tValidate.args(channel, \"string\", eventHandler, \"function\");\n\t\tvar firstChannelClient = addListenerCallBack(mapListeners, channel, eventHandler);\n\t\tif (firstChannelClient) {\n\t\t\tsendToRouterService(new AddListenerMessage(channel));\n\t\t}\n\t};\n\n\t/**\n\t * Transmit event to all listeners on the specified channel. If no listeners the event is discarded without error. All listeners to the channel in this Finsemble window and other Finsemble windows will receive the transmit.\n\t *\n\t * See [addListener]{@link RouterClientConstructor#addListener} to add a listener to receive the transmit.\n\t *\n\t * @param {string} toChannel any unique string to identify the channel (must match correspond listener channel name)\n\t * @param {any} event any object or primitive type to be transmitted\n\t * @param {object} [options] Options object for your transmit\n\t * @param {boolean} [options.suppressWarnings=false] By default, the Router will log warnings if you transmit to a channel with no listeners. Set this to true to eliminate those warnings.\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.transmit(\"SomeChannelName\", event);\n\t *\n\t */\n\tthis.transmit = function (toChannel: string, event: any, options: { suppressWarnings: boolean } = { suppressWarnings: false }) {\n\t\tif (!Logger.isLogMessage(toChannel)) { // logger messages\n\t\t\tLogger.system.info(\"RouterClient.transmit\", \"TO CHANNEL\", toChannel, \"EVENT\", event);\n\t\t}\n\t\tValidate.args(toChannel, \"string\", event, \"any\");\n\t\tsendToRouterService(new TransmitMessage(toChannel, event, options));\n\t};\n\n\t/* @TODO - This works via object reference - it relies on the physical pointer to the function object originally passed in.\n\tThis is very confusing, and not idiomatic. Moreover, it entirely prevents a user from using anonymous functions, which will fall\n\tquite unexpected if the user isn't prepared. A better API would be to pass in some unique ID, or have a unique ID automatically generated,\n\tthat could then be passed to this function, e.g:\n\n\tRouterClient.addListener('some-channel', 'my-unique-listener-id', () => { });\n\tRouterClient.removeListener('some-channel', 'my-unique-listener-id');*/\n\n\t/**\n\t * Remove event listener from specified channel for the specific event handler (only listeners created locally can be removed).\n\t *\n\t * See [addListener]{@link RouterClientConstructor#addListener} for corresponding add of a listener.\n\t *\n\t * @param {string} channel unique channel name to remove listener from\n\t * @param {function} eventHandler function used for the event handler when the listener was added\n\t */\n\tthis.removeListener = function (channel: string, eventHandler: Function) {\n\t\tLogger.system.info(\"RouterClient.removeListener\", \"CHANNEL\", channel, \"EVENT HANDLER\", eventHandler);\n\t\tValidate.args(channel, \"string\", eventHandler, \"function\");\n\t\tvar lastChannelListener = removeListenerCallBack(mapListeners, channel, eventHandler);\n\t\tif (lastChannelListener) {\n\t\t\tsendToRouterService(new RemoveListenerMessage(channel));\n\t\t}\n\t};\n\n\t/**\n\t * Add a query responder to the specified channel. The responder's queryEventHander function will receive all incoming queries for the specified channel (whether from this Finsemble window or remote Finsemble windows).\n\t *\n\t * *Note:* Only one responder is allowed per channel within the Finsemble application.\n\t *\n\t * See [query]{@link RouterClientConstructor#query} for sending a corresponding query-event message to this responder.\n\t *\n\t * @param {string} channel any unique string to identify the channel (must match correspond query channel name); only one responder allowed per channel\n\t * @param {function} queryEventHandler function to handle the incoming query (see example below); note incoming queryMessage contains function to send response\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.addResponder(\"ResponderChannelName\", function (error, queryMessage) {\n\t *\tif (error) {\n\t *\t\tLogger.system.log('addResponder failed: ' + JSON.stringify(error));\n\t *\t} else {\n\t *\tconsole.log(\"incoming data=\" + queryMessage.data);\n\t * \tvar response=\"Back at ya\"; // Responses can be objects or strings\n\t *\tqueryMessage.sendQueryResponse(null, response); // A QUERY RESPONSE MUST BE SENT OR THE REMOTE SIDE WILL HANG\n\t *\t}\n\t * });\n\t *\n\t */\n\tthis.addResponder = function (channel: string, queryEventHandler: Function) {\n\t\tLogger.system.info(\"RouterClient.addResponder\", \"CHANNEL\", channel);\n\t\tValidate.args(channel, \"string\", queryEventHandler, \"function\");\n\t\tvar status = addResponderCallBack(mapResponders, channel, queryEventHandler);\n\t\tif (status) {\n\t\t\tsendToRouterService(new addResponderMessage(channel));\n\t\t} else {\n\t\t\tLogger.system.warn(\"RouterClient.addResponder: Responder already locally defined for channel \" + channel);\n\t\t\tqueryEventHandler({\n\t\t\t\t\"RouteClient QueryError\": \"Responder already locally defined for channel\" + channel\n\t\t\t}, null); // immediately invoke callback passing error\n\t\t}\n\t};\n\n\t/**\n\t * Send a query to responder listening on specified channel. The responder may be in this Finsemble window or another Finsemble window.\n\t *\n\t * See [addResponder]{@link RouterClientConstructor#addResponder} to add a responder to receive the query.\n\t *\n\t * @param {string} responderChannel a unique string that identifies the channel (must match the channel name on which a responder is listening)\n\t * @param {object} queryEvent event message sent to responder\n\t * @param {any} params optional params\n\t * @param {number} [params.timeout=20000]  timeout value for a query-response timer.  Timer defaults to 5000 milliseconds if no params value is passed in. Set timeout to zero to wait indefinitely. If the timer expires, this function call will return with an error.\n\t * @param {function} responseEventHandler event handler to receive the query response (sent from a responder that is listening on this channel)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.query(\"someChannelName\", {}, function (error, queryResponseMessage) {\n\t *\tif (error) {\n\t *\t\tLogger.system.log('query failed: ' + JSON.stringify(error));\n\t *\t} else {\n\t *\t\t// process income query response message\n\t *\t\tvar responseData = queryResponseMessage.data;\n\t *\t\tLogger.system.log('query response: ' + JSON.stringify(queryResponseMessage));\n\t *\t}\n\t * });\n\t *\n\t * FSBL.Clients.RouterClient.query(\"someChannelName\", { queryKey: \"abc123\"}, { timeout: 1000 }, function (error, queryResponseMessage) {\n\t *\tif (!error) {\n\t *\t\t// process income query response message\n\t *\t\tvar responseData = queryResponseMessage.data;\n\t *\t}\n\t * }); */\n\tthis.query = function (responderChannel: string, queryEvent: any, params: any, responseEventHandler: Function = Function.prototype) {\n\t\tvar newQueryID = `${clientID()}.${responderChannel}`;\n\t\tvar timestamp = window.performance.timing.navigationStart + window.performance.now();\n\t\tvar navstart = window.performance.timing.navigationStart;\n\t\tvar timenow = window.performance.now(); // these timer values used for logging diagnostics\n\n\t\tLogger.system.info(\"RouterClient.query\", \"RESPONDER CHANNEL\", responderChannel, \"QUERY EVENT\", queryEvent, \"PARAMS\", params, \"QUERY ID\", newQueryID, { timestamp, navstart, timenow });\n\t\tif (arguments.length === 3) {\n\t\t\tresponseEventHandler = params;\n\t\t\tparams = { timeout: 20000 };\n\t\t}\n\t\tValidate.args(responderChannel, \"string\", queryEvent, \"any=\", params, \"object=\", responseEventHandler, \"function\");\n\t\tparams = params || {};\n\t\t(Validate as any).args2(\"params.timeout\", params.timeout, \"number\");\n\n\t\tfunction promiseResolver(resolve) {\n\t\t\t//Allows us to await on queries, cleaning up code quite a bit.\n\t\t\tconst modifiedHandler = (err, response) => {\n\t\t\t\tresolve({ err, response });\n\t\t\t\tif (typeof responseEventHandler === \"function\") {\n\t\t\t\t\tresponseEventHandler(err, response);\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.warn(\n\t\t\t\t\t\t\"No response event handler passed to RouterClient.query\",\n\t\t\t\t\t\t\"RESPONDER CHANNEL\", responderChannel,\n\t\t\t\t\t\t\"QUERY EVENT\", queryEvent,\n\t\t\t\t\t\t\"PARAMS\", params,\n\t\t\t\t\t\t\"QUERY ID\", newQueryID,\n\t\t\t\t\t\t{ timestamp, navstart, timenow })\n\t\t\t\t}\n\t\t\t};\n\n\t\t\taddQueryResponseCallBack(mapQueryResponses, newQueryID, modifiedHandler);\n\t\t\taddQueryResponseTimeout(mapQueryResponseTimeOut, newQueryID, responderChannel, params.timeout);\n\t\t\tsendToRouterService(new QueryMessage(newQueryID, responderChannel, queryEvent));\n\t\t}\n\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t * Remove query responder from specified channel. Only a locally added responder can be removed (i.e. a responder defined in the same component or service).\n\t *\n\t * See [addResponder]{@link RouterClientConstructor#addResponder} for corresponding add of a query responder.\n\t *\n\t * @param {string} responderChannel string identifying the channel to remove responder from\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.removeResponder(\"someChannelName\");\n\t *\n\t */\n\tthis.removeResponder = function (responderChannel: string) {\n\t\tLogger.system.info(\"RouterClient.removeResponder\", \"RESPONDER CHANNEL\", responderChannel);\n\t\tValidate.args(responderChannel, \"string\");\n\t\tvar status = removeResponderCallBack(mapResponders, responderChannel);\n\t\tif (status) {\n\t\t\tsendToRouterService(new RemoveResponderMessage(responderChannel));\n\t\t}\n\t};\n\n\t/**\n\t * Add a PubSub responder for specified topic. All subscribes and publishes to the topic will comes to responder (whether from local window or another window). Only one PubSub responder allowed per topic value in Finsemble application; however, the topic value may be a regular-expression representing a set of related topics, in which case the PubSub responder will responder to all matching topics. When a regEx topic is used, the same default functionality is provides for each matching topic -- the difference is only one PubSub responder is needed to cover a set of related topics, plus the same callback handlers can be used (if provided).\n\t *\n\t * All the callback function are optional because each PubSub responder comes with build-in default functionality (described below).\n\t *\n\t * Note an exact topic match will take precedence over a regEx match, but otherwise results are unpredictable for overlapping RegEx topics.\n\t *\n\t * See [subscribe]{@link RouterClientConstructor#subscribe} and [publish]{@link RouterClientConstructor#publish} for corresponding functions sending to the PubSub responder.\n\t *\n\t * @param {string} topic unique topic for this responder, or a topic RegEx (e.g. '/abc.+/') to handle a set of topics\n\t * @param {object} [initialState] initial state for the topic (defaults to empty struct); can be any object\n\t * @param {object} [params] optional parameters\n\t * @param {function} [params.subscribeCallback] allows responder know of incoming subscription and accept or reject it (default is to accept)\n\t * @param {function} [params.publishCallback] allows responder to use the publish data to form a new state (default is the publish data becomes the new state)\n\t * @param {function} [params.unsubscribeCallback] allows responder to know of the unsubscribe, but it must be accepted (the default accepts)\n\t * @param {function} [callback] optional callback(err,res) function. If addPubSubResponder failed then err set; otherwise, res set to \"success\"\n\t *\n\t * @example\n\t *\n\t * function subscribeCallback(error, subscribe) {\n\t * \tif (subscribe) {\n\t * \t\t// must make this callback to accept or reject the subscribe (default is to accept). First parm is err and second is the initial state\n\t * \t\tsubscribe.sendNotifyToSubscriber(null, { \"NOTIFICATION-STATE\": \"One\" });\n\t * \t}\n\t * }\n\t * function publishCallback(error, publish) {\n\t * \tif (publish) {\n\t * \t\t// must make this callback to send notify to all subscribers (if error parameter set then notify will not be sent)\n\t * \t\tpublish.sendNotifyToAllSubscribers(null, publish.data);\n\t * \t}\n\t * }\n\t * function unsubscribeCallback(error, unsubscribe) {\n\t * \tif (unsubscribe) {\n\t * \t\t// must make this callback to acknowledge the unsubscribe\n\t * \t\tunsubscribe.removeSubscriber();\n\t * \t}\n\t * }\n\t * FSBL.Clients.RouterClient.addPubSubResponder(\"topicABC\", { \"State\": \"start\" },\n\t * \t{\n\t * \t\tsubscribeCallback:subscribeCallback,\n\t * \t\tpublishCallback:publishCallback,\n\t * \t\tunsubscribeCallback:unsubscribeCallback\n\t * \t});\n\t *\n\t *   or\n\t *\n\t * FSBL.Clients.RouterClient.addPubSubResponder(\"topicABC\", { \"State\": \"start\" });\n\t *\n\t *   or\n\t *\n\t * FSBL.Clients.RouterClient.addPubSubResponder(\\/topicA*\\/, { \"State\": \"start\" });\n\t *\n\t */\n\tthis.addPubSubResponder = function (topic: string, initialState?: any, params?: {\n\t\tsubscribeCallback?: Function,\n\t\tpublishCallback?: Function,\n\t\tunsubscribeCallback?: Function\n\t}, callback?: Function) {\n\t\tvar error;\n\t\tvar response;\n\t\tLogger.system.info(\"RouterClient.addPubSubResponder\", \"TOPIC\", topic, \"INITIAL STATE\", initialState, \"PARAMS\", params);\n\t\tValidate.args(topic, \"any\", initialState, \"object=\", params, \"object=\");\n\t\tparams = params || {};\n\t\tValidate.args2(\"params.subscribeCallback\", params.subscribeCallback, \"function=\", \"params.publishCallback\", params.publishCallback, \"function=\") &&\n\t\t\t(Validate as any).args2(\"params.unsubscribeCallback\", params.unsubscribeCallback, \"function=\");\n\n\t\tvar status = addPubSubResponderCallBack(topic, params.subscribeCallback, params.publishCallback, params.unsubscribeCallback);\n\t\tif (status) {\n\t\t\tinitialState = initialState || {};\n\t\t\tmapPubSubResponderState[topic.toString()] = Utils.clone(initialState);\n\t\t\tsendToRouterService(new AddPubSubResponderMessage(topic.toString()));\n\t\t\tresponse = \"success\";\n\t\t} else {\n\t\t\terror = \"RouterClient.addPubSubResponder: Responder already locally defined for topic \" + topic;\n\t\t\tLogger.system.warn(error);\n\t\t}\n\t\tif (callback) {\n\t\t\tcallback(error, response);\n\t\t}\n\t};\n\n\t/**\n\t * Remove pubsub responder from specified topic. Only locally created responders (i.e. created in local window) can be removed.\n\t *\n\t * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder.\n\t *\n\t * @param {string} topic unique topic for responder being removed (may be RegEx, but if so much be exact regEx used previously with addPubSubResponder)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.removePubSubResponder(\"topicABC\");\n\t *\n\t */\n\tthis.removePubSubResponder = function (topic: string) {\n\t\tLogger.system.info(\"RouterClient.removePubSubResponder\", \"TOPIC\", topic);\n\t\tValidate.args(topic, \"any\");\n\t\tvar status = removeResponderCallBack(mapPubSubResponders, topic);\n\t\tif (status) {\n\t\t\tdelete mapPubSubResponderState[topic.toString()]; // remove corresponding state\n\t\t\tdelete mapPubSubResponderRegEx[topic.toString()]; // may be a RegEx\n\t\t\tsendToRouterService(new RemovePubSubResponderMessage(topic));\n\t\t} else {\n\t\t\tLogger.system.warn(\"RouterClient.removePubSubResponder failed: Could not find responder for topic \" + topic);\n\t\t}\n\t};\n\n\t/**\n\t * Subscribe to a PubSub Responder. Each responder topic can have many subscribers (local in this window or remote in other windows). Each subscriber immediately (but asynchronously) receives back current state in a notify; new notifications are receive for each publish sent to the same topic.\n\t *\n\t * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder to handle the subscribe. See [publish]{@link RouterClientConstructor#publish} for corresponding publish to notify the subscriber.\n\t *\n\t * @param {string} topic topic being subscribed to\n\t * @param {function} notifyCallback invoked for each income notify for the given topic (i.e. initial notify plus for each publish)\n\t * @returns {object} subscribe-id optionally used for unsubscribing later\n\t *\n\t * @example\n\t *\n\t * var subscribeId = RouterClient.subscribe(\"topicABC\", function(err,notify) {\n\t *\t\tif (!err) {\n\t *\t\t\tvar notificationStateData = notify.data;\n\t *\t\t\t// do something with notify data\n\t *  \t}\n\t * });\n\t *\n\t */\n\tthis.subscribe = function (topic: string, notifyCallback: Function) {\n\t\tLogger.system.info(\"RouterClient.subscribe\", \"TOPIC\", topic);\n\t\tValidate.args(topic, \"string\", notifyCallback, \"function\");\n\t\tvar subscribeID = clientID();\n\t\taddSubscriberCallBack(mapSubscribersID, subscribeID, notifyCallback, topic);\n\t\tsendToRouterService(new SubscribeMessage(subscribeID, topic));\n\t\treturn { \"subscribeID\": subscribeID, \"topic\": topic };\n\t};\n\n\t/**\n\t * Publish to a PubSub Responder, which will trigger a corresponding Notify to be sent to all subscribers (local in this window or remote in other windows). There can be multiple publishers for a topic (again, in same window or remote windows)\n\t *\n\t * See [addPubSubResponder]{@link RouterClientConstructor#addPubSubResponder} for corresponding add of a SubPub responder to handle the publish (i.e. sending notifications to all subscriber). See [Subscribe]{@link RouterClientConstructor#addPubSubResponder} for corresponding subscription to receive publish results (in the form of a notify event)\n\t *\n\t * @param {string} topic topic being published to\n\t * @param {object} event topic state to be published to all subscriber (unless the SubPub responder optionally modifies in between)\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.publish(\"topicABC\", topicState);\n\t *\n\t */\n\tthis.publish = function (topic: string, event: any) {\n\t\tLogger.system.info(\"RouterClient.publish\", \"TOPIC\", topic, \"EVENT\", event);\n\t\tValidate.args(topic, \"string\", event, \"any\");\n\t\tsendToRouterService(new PublishMessage(topic, event));\n\t};\n\n\t/**\n\t * Unsubscribe from PubSub responder so no more notifications received (but doesn't affect other subscriptions). Only works from the window the PubSub responder was created in.\n\t *\n\t * See [subscribe]{@link RouterClientConstructor#subscribe} for corresponding subscription being removed.\n\t *\n\t * @param {object} subscribeID the id return from the corresponding subscribe for the topic\n\t *\n\t * @example\n\t *\n\t * FSBL.Clients.RouterClient.unsubscribe(subscribeId);\n\t *\n\t */\n\tthis.unsubscribe = function (subscribeIDStruct: any) {\n\t\tLogger.system.info(\"RouterClient.unsubscribe\", \"SUBSCRIBE ID\", subscribeIDStruct);\n\t\tValidate.args(subscribeIDStruct, \"object\") && (Validate as any).args2(\"subscribeIDStruct.subscribeID\", subscribeIDStruct.subscribeID, \"string\");\n\t\tvar deletedSubscriber = removeSubscriberCallBack(mapSubscribersID, subscribeIDStruct.subscribeID);\n\t\tif (deletedSubscriber) {\n\t\t\tsendToRouterService(new UnsubscribeMessage(subscribeIDStruct.subscribeID, subscribeIDStruct.topic));\n\t\t} else {\n\t\t\tLogger.system.warn(\"RouterClient.unsubscribe: Could not find subscribeID for topic \" + subscribeIDStruct.topic);\n\t\t}\n\t};\n\n\t/**\n\t * Test an incoming router message to see if it originated from the same origin (e.g. a trusted source...not cross-domain). Currently same origin is known only because a sharedWorker transport is used (by definition SharedWorkers do not work cross-domain).  This means any message coming in over the Inter-application Bus will not be trusted; however, by default all same-origin components and services connect to the router using a SharedWorker transport.\n\t * @param {object} incomingMessage an incoming router message (e.g. transmit, query, notification) to test to see if trusted.\n\t *\n\t * @example\n\t * FSBL.Clients.RouterClient.trustedMessage(incomingRouterMessage);\n\t */\n\tthis.trustedMessage = function (incomingMessage: any) {\n\t\tvar isTrusted = true; // temporarily make all trusted so no problems if changing router transport\n\t\tLogger.system.debug(\"RouterClient.trustedMessage header\", incomingMessage.header);\n\t\tif (incomingMessage.header.originIncomingTransportInfo.transportID === \"SharedWorker\") {\n\t\t\tisTrusted = true;\n\t\t}\n\t\treturn isTrusted;\n\t};\n\t/*\n\t * @TODO: consider adding disconnectAllListeners(), disconnectAllResponders(), disconnectAllSubscribers()\n\t*/\n\n\t/**\n\t * Removes all listeners, responders, and subscribers for this router client -- automatically called when client is shutting down. Can be called multiple times.\n\t */\n\tthis.disconnectAll = function () {\n\t\tLogger.system.info(\"RouterClient.disconnectAll\");\n\t\tfor (var channel in mapListeners) {\n\t\t\tLogger.system.debug(\"RouterClient.disconnectAll is removing listener on \" + channel);\n\t\t\tsendToRouterService(new RemoveListenerMessage(channel));\n\t\t\tdelete mapListeners[channel];\n\t\t}\n\n\t\tfor (var responderChannel in mapResponders) {\n\t\t\tLogger.system.debug(\"RouterClient.disconnectAll is removing responder on \" + responderChannel);\n\t\t\tsendToRouterService(new RemoveResponderMessage(responderChannel));\n\t\t\tdelete mapResponders[responderChannel];\n\t\t}\n\n\t\tfor (var topic in mapPubSubResponders) {\n\t\t\tLogger.system.debug(\"RouterClient.disconnectAll is removing pubsub responder on \" + topic);\n\t\t\tsendToRouterService(new RemovePubSubResponderMessage(topic));\n\t\t\tdelete mapPubSubResponders[topic.toString()]; // could be a RegEx\n\t\t\tdelete mapPubSubResponderState[topic.toString()]; // remove corresponding state\n\t\t\tdelete mapPubSubResponderRegEx[topic.toString()]; // may be a RegEx\n\t\t}\n\n\t\tfor (var subscribeID in mapSubscribersID) {\n\t\t\tvar stopic = mapSubscribersTopic[subscribeID];\n\t\t\tLogger.system.debug(\"RouterClient.disconnectAll is removing subscriber on \" + stopic);\n\t\t\tsendToRouterService(new UnsubscribeMessage(subscribeID, stopic));\n\t\t\tdelete mapSubscribersID[subscribeID];\n\t\t\tdelete mapSubscribersTopic[subscribeID];\n\t\t}\n\t};\n\n\t//Prevent the loggerService window's routerClient from logging to itself. Instead, log locally for it. It's unlikely that we need to get the loggerService's router messages. If we do, just un-comment this.\n\tif (System.Window.getCurrent().name === \"loggerService\") {\n\t\tLogger = new LocalLogger();\n\t}\n\n\tclientName = baseClientName + \".\" + Globals.name;\n\n\t/** @TODO - Move this to factory function, something like getRouterClient. */\n\tif (clientName in Globals.FSBLData.RouterClients) { // if previously constructed then return that existing client\n\t\tLogger.system.debug(`\"RouterClient Check: reusing existing client for ${clientName}`);\n\t\tconsole.debug(`\"RouterClient Check: reusing existing client for ${clientName}`, Globals);\n\t} else {\n\t\tLogger.system.debug(`\"RouterClient Check: constructing new client for ${clientName}`);\n\t\tconsole.debug(`\"RouterClient Check: constructing new client for ${clientName}`, Globals);\n\t\tGlobals.FSBLData.RouterClients[clientName] = this;\n\t\tconstructor(clientName, transportName); // constructor new router client\n\t}\n\n\n\treturn Globals.FSBLData.RouterClients[clientName];\n};\n\n\n\n// WEBPACK FOOTER //\n// src/clients/routerClientConstructor.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n/**\n * @introduction\n * <h2>Finsemble system wide settings for use by all components and services</h2>\n *\n */\n\n/**\n * Constructor for Finsemble SystemSettings\n * @private\n * @constructor\n */\nvar SystemSettings = function () {\n\tvar currentDiagLevel = 3;\n\n\t/**\n\t * Returns diagnostic level\n\t *\n\t *@returns current diagnostic level\n\t */\n\tthis.diagLevel = function () {\n\t\treturn currentDiagLevel;\n\t};\n\n\t/**\n\t * Returns diagnostic level\n\t *\n\t *@returns current diagnostic level\n\t */\n\tthis.setDiagLevel = function (level) {\n\t\tcurrentDiagLevel = level;\n\t};\n\n\t/**\n\t * Returns true if parameter validation is enabled\n\t *\n\t *@returns true if enable\n\t */\n\tthis.validationEnabled = function () {\n\t\treturn (currentDiagLevel >= 4);\n\t};\n};\n\nexport default new SystemSettings();\n\n\n// WEBPACK FOOTER //\n// ./src/common/systemSettings.js","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/setimmediate/setImmediate.js\n// module id = 30\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/timers-browserify/main.js\n// module id = 31\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\nimport { FSBLDependencyManagerSingleton as FSBLDependencyManager } from \"../common/dependencyManager\";\nimport RouterClient from \"../clients/routerClientInstance\";\nimport Logger from \"../clients/logger\";\n\nimport {\n\tseries as asyncSeries,\n\tasyncify as asyncAsyncify,\n\teach as asyncEach,\n\ttimeout as asyncTimeout\n} from \"async\";\nimport { System } from \"../common/system\";\nimport * as Constants from \"../common/constants\";\nimport { IRouterClient } from \"../clients/IRouterClient\";\nconst { SERVICE_INITIALIZING_CHANNEL, SERVICE_READY_CHANNEL, SERVICE_CLOSING_CHANNEL, SERVICE_CLOSED_CHANNEL, SERVICE_STOP_CHANNEL } = Constants;\nconst defaultBaseServiceParams: ServiceConstructorParams = {\n\tstartupDependencies: {\n\t\tservices: [],\n\t\tclients: []\n\t},\n\tshutdownDependencies: {\n\t\tservices: []\n\t},\n\taddOFWrapper: false,\n\tname: window.name\n};\n/*\n * @introduction\n * <h2>Base Service</h2>\n * Creates an instance of the Base Service which all service must inherit. Services are spawned from your *service.json* file and managed by a helper thread - the **Service Manager**.\n * Services communicate their status and receive status of other service through the Service Manager.\n * Services have an initial handshake with the Service Manager on load, and then either go online or wait for dependant services to come online.\n * Service initialization is completely asynchronous, which allows all services to load at the same time, as long as their dependencies have been met.\n * @constructor\n*/\nexport class BaseService {\n\tcustomData: any;\n\tinitialize: Function;\n\tlisteners: {\n\t\tonShutdown?: Function[];\n\t};\n\tLogger: any;\n\tonBaseServiceReadyCB: null | Function;\n\tname: string;\n\tparentUuid: string;\n\tRouterClient: IRouterClient;\n\tsetOnConnectionCompleteCB: null | Function;\n\tshutdownDependencies: FinsembleDependencyObject;\n\tstart: Function;\n\tstarted: boolean;\n\tstartupDependencies: FinsembleDependencyObject\n\tstatus: ServiceState;\n\twaitedLongEnough: boolean;\n\n\tconstructor(params = defaultBaseServiceParams) {\n\t\tfixParams(params);\n\t\tthis.name = params.name ? params.name : window.name;\n\t\tthis.startupDependencies = params.startupDependencies;\n\t\tthis.shutdownDependencies = params.shutdownDependencies;\n\t\tthis.Logger = Logger;\n\t\tthis.RouterClient = RouterClient;\n\t\t//This will be set to true after the debugServiceDelay is met. Defaults to 0, but developers can up it if they need to jump in and add breakpoints and are on a bad computer.\n\t\tthis.waitedLongEnough = false;\n\t\t//this.parentUuid = System.Application.getCurrent().uuid;\n\t\tthis.onBaseServiceReadyCB = null;\n\t\tthis.setOnConnectionCompleteCB = null;\n\t\tthis.listeners = {};\n\t\tthis.start = this.waitForDependencies;\n\t\tthis.started = false;\n\t\t/**\n\t\t * Service status\n\t\t * @type {ServiceState}\n\t\t */\n\t\tthis.status = \"initializing\";\n\t\tthis.setOnline = this.setOnline.bind(this);\n\t\tthis.onBaseServiceReady = this.onBaseServiceReady.bind(this);\n\t\tthis.handleShutdown = this.handleShutdown.bind(this);\n\t\tthis.waitForDependencies();\n\t}\n\n\t/**\n\t* Waits for the dependencies. At the end of this function, it will trigger the child service's initialize function (or onBaseServiceReady).\n\t* @note This used to be BaseService.start\n\t* @private\n\t*/\n\twaitForDependencies() {\n\t\t//For backwards compat. note Start used to be invoked after the constructor.\n\t\t//note do this later\n\n\t\tif (this.started) return;\n\n\t\tthis.started = true;\n\t\tvar service = this;\n\t\tLogger.system.debug(`${this.name} starting`);\n\t\tfunction cacheCustomData(done) {\n\t\t\tLogger.system.debug(\"BaseService.start.setParentUUID\");\n\t\t\tSystem.Window.getCurrent().getOptions((opts) => {\n\t\t\t\tservice.customData = opts.customData;\n\t\t\t\tservice.parentUuid = opts.customData.parentUuid;\n\t\t\t\tdone();\n\t\t\t});\n\t\t}\n\n\t\tfunction onRouterReady(done) {\n\t\t\tRouterClient.onReady(function () {\n\t\t\t\tRouterClient.transmit(SERVICE_INITIALIZING_CHANNEL, { name: service.name });\n\t\t\t\twindow.addEventListener(\"beforeunload\", service.RouterClient.disconnectAll);\n\t\t\t\tLogger.system.debug(\"APPLICATION LIFECYCLE:STARTUP:SERVICE:BaseService.start.onRouterReady\");\n\t\t\t\tdone();\n\t\t\t});\n\t\t}\n\n\t\tfunction readyToGo(done) {\n\t\t\tLogger.system.debug(\"APPLICATION LIFECYCLE:STARTUP:SERVICE:BaseService.start.readyToGo\");\n\t\t\tconsole.log(performance.now(), \"ReadyToGo called\");\n\t\t\tconsole.log(\"Startup Dependencies for\", service.name, service.startupDependencies);\n\t\t\tconsole.log(\"Shutdown Dependencies for\", service.name, service.shutdownDependencies);\n\t\t\tservice.waitedLongEnough = true;\n\t\t\tFSBLDependencyManager.shutdown.waitFor(service.shutdownDependencies, service.handleShutdown);\n\t\t\tRouterClient.transmit(`${System.Window.getCurrent().name}.onSpawned`, {});\n\n\t\t\t//`done` invoked when all dependencies are up\n\t\t\tlet dependency = FSBLDependencyManager.startup.waitFor(service.startupDependencies, done);\n\t\t\tdependency.on(\"err\", (err) => {\n\t\t\t\tLogger.system.error(err);\n\t\t\t});\n\t\t}\n\t\tfunction showDeveloperTools(done) {\n\t\t\tconst myWindow = System.Window.getCurrent();\n\t\t\tmyWindow.isShowing((isShowing) => {\n\t\t\t\tif (isShowing && service.customData.showDevConsoleOnVisible !== false) {\n\t\t\t\t\tSystem.showDeveloperTools(\n\t\t\t\t\t\tmyWindow.uuid,\n\t\t\t\t\t\tmyWindow.name,\n\t\t\t\t\t\tdone\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.debug(\"APPLICATION LIFECYCLE:STARTUP:SERVICE:BaseService.start.delayStartup done\");\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tasyncSeries([\n\t\t\t\tonRouterReady,\n\t\t\t\tcacheCustomData,\n\t\t\t\tshowDeveloperTools,\n\t\t\t\treadyToGo\n\t\t\t], () => {\n\t\t\t\tresolve();\n\t\t\t\tthis.onDependenciesReady();\n\t\t\t});\n\t\t});\n\t}\n\t/**\n\t * Transmits the serviceOnline message that the rest of the dependency manager objects system are listening for.\n\t */\n\tsetOnline() {\n\t\tif (this.status !== \"ready\") {\n\t\t\tconsole.log(\"Setting service online\", this.name);\n\t\t\tLogger.system.log(\"APPLICATION LIFECYCLE:STARTUP:SERVICE ONLINE\", this.name);\n\t\t\tRouterClient.transmit(SERVICE_READY_CHANNEL, { serviceName: this.name }); // notify service manager\n\t\t\tthis.RouterClient.addListener(SERVICE_STOP_CHANNEL + \".\" + this.name, (err, response) => {\n\t\t\t\tthis;\n\t\t\t\tFSBLDependencyManager.shutdown.checkDependencies();\n\t\t\t});\n\t\t\tthis.status = \"ready\";\n\t\t}\n\t}\n\t/**\n\t * Invokes a method passed in (or on) the object that inherits from the BaseService. In other words, the service instance will have its initialize function called, unless it's using old code, in which case we will have cached the callback earlier.\n\t */\n\tonDependenciesReady() {\n\t\tLogger.system.debug(\"APPLICATION LIFECYCLE:STARTUP:BaseService onDependenciesReady\", this.name);\n\t\tthis.status = \"initializing\"; // must change from offline here; otherwise race condition waiting to call this.setOnline\n\t\tRouterClient.onReady(() => {\n\t\t\t//These first two blocks are for backward compatibility. The 3rd (initialize) is how it should be done.\n\t\t\tif (this.onBaseServiceReadyCB) {\n\t\t\t\t// if inheriting service provided a \"connection complete\" callback, then invoke before sending online\n\t\t\t\tthis.onBaseServiceReadyCB(this.setOnline);\n\t\t\t} else if (this.initialize) {\n\t\t\t\tthis.initialize(this.setOnline);\n\t\t\t} else {\n\t\t\t\t//otherwise setOnline need sto be called manually.\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (this.status !== \"ready\" && this.name !== \"routerService\") {\n\t\t\t\t\t\tconsole.error(\"No onBaseServiceReadyCB on initialize function defined on your service. Ensure that service.setOnline is called\");\n\t\t\t\t\t\tLogger.system.error(\"No onBaseServiceReadyCB on initialize function defined on your service. Ensure that service.setOnline is called\");\n\t\t\t\t\t}\n\t\t\t\t}, 3000);\n\t\t\t}\n\t\t});\n\t}\n\n\tonBaseServiceReady(func) { // used by the inheriting service to know where baseService init is complete\n\t\tif (this.status === \"initializing\") {\n\t\t\t//onBaseServiceReady is backwards-compatibility stuff.\n\t\t\tthis.onBaseServiceReadyCB = () => {\n\t\t\t\tfunc(this.setOnline);\n\t\t\t};\n\t\t} else {\n\t\t\tfunc(this.setOnline);\n\t\t}\n\t}\n\t/**\n\t * Really only for shutdown right now. Simple array that gets looped through on shutdown.\n\t * @param {string} listenerType\n\t * @param {function} callback The callback to be invoked after the method completes successfully.\n\t */\n\taddEventListener(listenerType, callback) {\n\t\tif (!this.listeners[listenerType]) {\n\t\t\tthis.listeners[listenerType] = [];\n\t\t}\n\t\tthis.listeners[listenerType].push(callback);\n\t}\n\n\t/**\n\t * When the application sends out a shutdown message, this function is invoked. It iterates through any registered cleanup methods. When all of them have finished, it sends a response to the application saying that it's completed cleanup (`shutdownComplete`, below).\n\t * @private\n\t*/\n\tonShutdown(cb) {\n\t\tthis.addEventListener(\"onShutdown\", cb);\n\n\t}\n\n\t/**\n\t * When the application sends out a shutdown message, this function is invoked. It iterates through any registered cleanup methods. When all of them have finished, it sends a response to the application saying that it's completed cleanup (`shutdownComplete`, below).\n\t * @private\n\t*/\n\thandleShutdown(err, message) {\n\t\tvar self = this;\n\t\tfunction handleShutdownAction(handler, done) {\n\t\t\tlet cleanup = asyncAsyncify(handler);\n\t\t\tcleanup(null, done);\n\t\t}\n\t\tfunction shutdownComplete(err?, data?) {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.error(err);\n\t\t\t}\n\t\t\tself.shutdownComplete();\n\t\t}\n\t\tif (this.listeners.onShutdown) {\n\t\t\tRouterClient.transmit(SERVICE_CLOSING_CHANNEL, {\n\t\t\t\twaitForMe: true,\n\t\t\t\tname: this.name\n\t\t\t});\n\t\t\tasyncEach(this.listeners.onShutdown, handleShutdownAction, shutdownComplete);\n\t\t} else {\n\t\t\tRouterClient.transmit(SERVICE_CLOSING_CHANNEL, {\n\t\t\t\twaitForMe: false,\n\t\t\t\tname: this.name\n\t\t\t});\n\t\t\tself.shutdownComplete();\n\t\t}\n\t}\n\t/**\n\t * Fired when all cleanup methods have been finished.\n\t * @private\n\t*/\n\tshutdownComplete() {\n\t\tLogger.system.info(`\"APPLICATION LIFECYCLE:SHUTDOWN:SERVICE SHUTDOWN: ${this.name}`);\n\t\tRouterClient.transmit(SERVICE_CLOSED_CHANNEL, {\n\t\t\tname: this.name,\n\t\t\tuuid: System.Application.getCurrent().uuid\n\t\t});\n\t}\n}\n\n// ensures all service errors will be caught\nwindow.addEventListener(\"error\", function (errorObject) {\n\tvar stack = errorObject.error ? errorObject.error.stack.substring(errorObject.error.stack.search(\"at \")) : \"\"; // strip off irrelevant part of stack\n\tLogger.error(errorObject.message,\n\t\t\"File: \" + errorObject.filename,\n\t\t\"Line: \" + errorObject.lineno,\n\t\t\"Column: \" + errorObject.colno,\n\t\t\"Error Stack: \\n    \" + stack\n\t);\n\treturn false;\n});\n//catch promise errors\nwindow.addEventListener(\"unhandledrejection\", function (event: any) {\n\tif (event.reason == \"Cannot Wrap Service Manager or Services\") {\n\t\tLogger.warn(\"A service tried To wrap itself. This is a side effect of using Clients in services.\")\n\t} else {\n\t\tLogger.error(\"Unhandled rejection\", \"reason\", event.reason)\n\t}\n});\n/**\n *\n * @private\n */\nfunction fixParams(params) {\n\tif (params.startupDependencies) {\n\t\tif (!params.startupDependencies.services) params.startupDependencies.services = defaultBaseServiceParams.startupDependencies.services;\n\t\tif (!params.startupDependencies.clients) params.startupDependencies.clients = defaultBaseServiceParams.startupDependencies.clients;\n\t} else {\n\t\tparams.startupDependencies = defaultBaseServiceParams.startupDependencies;\n\t}\n\tif (params.shutdownDependencies) {\n\t\tif (!params.shutdownDependencies.services) params.shutdownDependencies.services = defaultBaseServiceParams.shutdownDependencies.services;\n\t} else {\n\t\tparams.shutdownDependencies = defaultBaseServiceParams.shutdownDependencies;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/baseService.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\nimport { Dispatcher } from \"flux\";\nimport * as Utils from \"../common/util\";\nimport Validate from \"../common/validate\";\nimport BaseClient, { _BaseClient } from \"./baseClient\";\nimport StoreModel from \"./StoreModel\";\n/** I'm not sure why we previously deferred requiring StoreModel, but we did.\n  * I've tried to stay as true to the original implementation as possible. -- Daniel 12/19/18 */\nlet _StoreModel: any;\n\nimport { IGlobals } from \"../common/Globals\";\n/** The global `window` object. We cast it to a specific interface here to be\n * explicit about what Finsemble-related properties it may have. */\nconst Globals = window as IGlobals;\nvar self;\nvar localStore = {};\nfunction getGlobalStore(params, cb) {\n\tfunction returnStore(err, response) {\n\t\tif (err) { return cb(err); }\n\t\treturn cb(err, new _StoreModel(response.data, self.routerClient));\n\t}\n\n\treturn self.routerClient.query(\"storeService.getStore\", params, returnStore);\n}\nfunction removeGlobalStore(params, cb) {\n\tself.routerClient.query(\"storeService.removeStore\", params, function (err, response) {\n\t\tif (err) { return cb(err, false); }\n\t\treturn cb(err, response.data);\n\t});\n}\n\n/**\n *\n * @introduction\n * <h2>Distributed Store Client</h2>\n * The Distributed Store Client handles creating, retrieving, and destroying stores. Stores are used to save and retrieve data either locally or globally.\n * This data is not persisted. You can add listeners at multiple levels (store or field), and get the updated data as it's updated in the store.\n * Fields are stored within the store as key/value pair. For more information, see the <a href=\"tutorial-DistributedStore.html\">Distributed Store tutorial</a>.\n *\n\n * @hideconstructor\n * @constructor\n */\nclass DistributedStoreClient extends _BaseClient {\n\tls: any;\n\tconstructor(params) {\n\t\tsuper(params)\n\t\tself = this;\n\t\tthis.ls = localStore;\n\t}\n\n\n\t/**\n\t * Get a store. If no store is set, you will get the global Finsemble store. If global is not set, Finsemble will check local first then check global.\n\t * @param {String} params.store The name of the store.\n\t * @param {boolean} params.global Whether a store is accessible outside of the component it's created in.\n\t * @param {function} cb -  Will return the value if found.\n\t * @returns {StoreModel} - returns the store\n\t * @example\n\t * FSBL.Clients.DistributedStoreClient.getStore({\n\t * \tstore:'store1'\n\t * },\n\t * function(error, storeObject){});\n\t */\n\tgetStore(params: {\n\t\tstore?: string,\n\t\tglobal?: boolean\n\t}, cb) {\n\t\tif (params.global) {\n\t\t\treturn getGlobalStore(params, cb);\n\n\t\t}\n\t\tif (localStore[params.store]) {\n\t\t\treturn cb(null, localStore[params.store]);\n\t\t}\n\n\t\treturn getGlobalStore(params, cb);\n\n\t};\n\n\n\n\t/**\n\t *Creates a store.\n\t * @param {string} params.store The name of the store.\n\t * @param {any} params.values Starting values for the store.\n\t * @param {boolean} params.global Whether a store is accessible outside of the component it's created in.\n\t * @param {boolean} params.persist Whether to persist the values of the store to storage. The store must be global to use this flag.\n\t * @param {function} cb  Will return the store on success.\n\t * @returns {function} Callback will receive the store\n\t * @example\n\t * FSBL.Clients.DistributedStoreClient.createStore({\n\t * \tstore:\"store1\",\n\t * \tglobal:false,\n\t * \tvalues:{}\n\t * },\n\t * function(error, storeObject){});\n\t */\n\tcreateStore(params: {\n\t\tstore: string,\n\t\tglobal?: boolean,\n\t\tpersist?: boolean,\n\t\tvalues?: any\n\t}, cb: Function = Function.prototype): Promise<{ err: any, data: any }> {\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tif (params.global) {\n\t\t\t\treturn this.routerClient.query(\"storeService.createStore\", params, function (err, response) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t}\n\t\t\t\t\tconst data = new _StoreModel(response.data, self.routerClient);\n\t\t\t\t\tresolve({ err, data });\n\t\t\t\t\treturn cb(err, data);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (localStore[params.store]) {\n\t\t\t\tresolve({ err: null, data: localStore[params.store] });\n\t\t\t\treturn cb(null, localStore[params.store]);\n\t\t\t}\n\n\t\t\tvar ls = new _StoreModel(params, self.routerClient);\n\t\t\tlocalStore[ls.name] = ls;\n\t\t\tresolve({ err: null, data: ls });\n\t\t\treturn cb(null, ls);\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t};\n\n\t/**\n\t * Remove a store. If global is not set and a local store isn't found, Finsemble will remove the global store.\n\t * @param {String} params.store The name of the store.\n\t * @param {boolean} params.global Whether the store you're trying to remove is a global store.\n\t * @param {function} cb Callback to be invoked when the store is removed.\n\t * @example\n\t * FSBL.Clients.DistributedStoreClient.removeStore({\n\t * \tstore:\"store1\",\n\t * \tglobal:true\n\t * },\n\t * function(){});\n\t */\n\tremoveStore(params: {\n\t\tstore: string,\n\t\tglobal?: boolean,\n\t}, cb) {\n\t\tif (params.global) {\n\t\t\treturn removeGlobalStore(params, cb);\n\t\t}\n\t\tif (localStore[params.store]) {\n\t\t\tdelete localStore[params.store];\n\t\t\treturn cb(null, true);\n\t\t}\n\t\tremoveGlobalStore(params, cb);// If global flag is not set but we don't find it local, try global////Should we have this?\n\n\t};\n\n\n\t/**\n\t * @private\n\t */\n\tload = function (cb) {\n\t\tcb();\n\t};\n};\n\nvar storeClient = new DistributedStoreClient({\n\tstartupDependencies: {\n\t\tservices: [\"dataStoreService\"]\n\t},\n\tonReady: function (cb) {\n\t\t_StoreModel = StoreModel;\n\t\tstoreClient.load(cb);\n\t},\n\tname: \"distributedStoreClient\"\n});\n\n\nGlobals.distributedStoreClient = storeClient;\nexport default storeClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/distributedStoreClient.ts","/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n;(function() {\n\n  /** Used as a safe reference for `undefined` in pre-ES5 environments. */\n  var undefined;\n\n  /** Used as the semantic version number. */\n  var VERSION = '4.17.15';\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200;\n\n  /** Error message constants. */\n  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',\n      FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500;\n\n  /** Used as the internal argument placeholder. */\n  var PLACEHOLDER = '__lodash_placeholder__';\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n      CLONE_FLAT_FLAG = 2,\n      CLONE_SYMBOLS_FLAG = 4;\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n      COMPARE_UNORDERED_FLAG = 2;\n\n  /** Used to compose bitmasks for function metadata. */\n  var WRAP_BIND_FLAG = 1,\n      WRAP_BIND_KEY_FLAG = 2,\n      WRAP_CURRY_BOUND_FLAG = 4,\n      WRAP_CURRY_FLAG = 8,\n      WRAP_CURRY_RIGHT_FLAG = 16,\n      WRAP_PARTIAL_FLAG = 32,\n      WRAP_PARTIAL_RIGHT_FLAG = 64,\n      WRAP_ARY_FLAG = 128,\n      WRAP_REARG_FLAG = 256,\n      WRAP_FLIP_FLAG = 512;\n\n  /** Used as default options for `_.truncate`. */\n  var DEFAULT_TRUNC_LENGTH = 30,\n      DEFAULT_TRUNC_OMISSION = '...';\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n      HOT_SPAN = 16;\n\n  /** Used to indicate the type of lazy iteratees. */\n  var LAZY_FILTER_FLAG = 1,\n      LAZY_MAP_FLAG = 2,\n      LAZY_WHILE_FLAG = 3;\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** Used as references for the maximum length and index of an array. */\n  var MAX_ARRAY_LENGTH = 4294967295,\n      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,\n      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n  /** Used to associate wrap methods with their bit flags. */\n  var wrapFlags = [\n    ['ary', WRAP_ARY_FLAG],\n    ['bind', WRAP_BIND_FLAG],\n    ['bindKey', WRAP_BIND_KEY_FLAG],\n    ['curry', WRAP_CURRY_FLAG],\n    ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n    ['flip', WRAP_FLIP_FLAG],\n    ['partial', WRAP_PARTIAL_FLAG],\n    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n    ['rearg', WRAP_REARG_FLAG]\n  ];\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      asyncTag = '[object AsyncFunction]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      domExcTag = '[object DOMException]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      nullTag = '[object Null]',\n      objectTag = '[object Object]',\n      promiseTag = '[object Promise]',\n      proxyTag = '[object Proxy]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      symbolTag = '[object Symbol]',\n      undefinedTag = '[object Undefined]',\n      weakMapTag = '[object WeakMap]',\n      weakSetTag = '[object WeakSet]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      dataViewTag = '[object DataView]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n\n  /** Used to match empty string literals in compiled template source. */\n  var reEmptyStringLeading = /\\b__p \\+= '';/g,\n      reEmptyStringMiddle = /\\b(__p \\+=) '' \\+/g,\n      reEmptyStringTrailing = /(__e\\(.*?\\)|\\b__t\\)) \\+\\n'';/g;\n\n  /** Used to match HTML entities and HTML characters. */\n  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,\n      reUnescapedHtml = /[&<>\"']/g,\n      reHasEscapedHtml = RegExp(reEscapedHtml.source),\n      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n  /** Used to match template delimiters. */\n  var reEscape = /<%-([\\s\\S]+?)%>/g,\n      reEvaluate = /<%([\\s\\S]+?)%>/g,\n      reInterpolate = /<%=([\\s\\S]+?)%>/g;\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n      reIsPlainProp = /^\\w*$/,\n      rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g,\n      reHasRegExpChar = RegExp(reRegExpChar.source);\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g,\n      reTrimStart = /^\\s+/,\n      reTrimEnd = /\\s+$/;\n\n  /** Used to match wrap detail comments. */\n  var reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,\n      reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n      reSplitDetails = /,? & /;\n\n  /** Used to match words composed of alphanumeric characters. */\n  var reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g;\n\n  /**\n   * Used to match\n   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).\n   */\n  var reEsTemplate = /\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}/g;\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Used to match Latin Unicode letters (excluding mathematical operators). */\n  var reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n  /** Used to ensure capturing order of template delimiters. */\n  var reNoMatch = /($^)/;\n\n  /** Used to match unescaped characters in compiled string literals. */\n  var reUnescapedString = /['\\n\\r\\u2028\\u2029\\\\]/g;\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff',\n      rsComboMarksRange = '\\\\u0300-\\\\u036f',\n      reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n      rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n      rsDingbatRange = '\\\\u2700-\\\\u27bf',\n      rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n      rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n      rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n      rsPunctuationRange = '\\\\u2000-\\\\u206f',\n      rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n      rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n      rsVarRange = '\\\\ufe0e\\\\ufe0f',\n      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n  /** Used to compose unicode capture groups. */\n  var rsApos = \"['\\u2019]\",\n      rsAstral = '[' + rsAstralRange + ']',\n      rsBreak = '[' + rsBreakRange + ']',\n      rsCombo = '[' + rsComboRange + ']',\n      rsDigits = '\\\\d+',\n      rsDingbat = '[' + rsDingbatRange + ']',\n      rsLower = '[' + rsLowerRange + ']',\n      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n      rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n      rsNonAstral = '[^' + rsAstralRange + ']',\n      rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n      rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n      rsUpper = '[' + rsUpperRange + ']',\n      rsZWJ = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n      reOptMod = rsModifier + '?',\n      rsOptVar = '[' + rsVarRange + ']?',\n      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n      rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n      rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n      rsSeq = rsOptVar + reOptMod + rsOptJoin,\n      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match apostrophes. */\n  var reApos = RegExp(rsApos, 'g');\n\n  /**\n   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n   */\n  var reComboMark = RegExp(rsCombo, 'g');\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /** Used to match complex or compound words. */\n  var reUnicodeWord = RegExp([\n    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n    rsUpper + '+' + rsOptContrUpper,\n    rsOrdUpper,\n    rsOrdLower,\n    rsDigits,\n    rsEmoji\n  ].join('|'), 'g');\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n  /** Used to detect strings that need a more robust regexp to match words. */\n  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',\n    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',\n    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',\n    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',\n    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'\n  ];\n\n  /** Used to make template sourceURLs easier to identify. */\n  var templateCounter = -1;\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\n  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\n  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\n  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\n  typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =\n  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\n  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\n  typedArrayTags[errorTag] = typedArrayTags[funcTag] =\n  typedArrayTags[mapTag] = typedArrayTags[numberTag] =\n  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =\n  typedArrayTags[setTag] = typedArrayTags[stringTag] =\n  typedArrayTags[weakMapTag] = false;\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {};\n  cloneableTags[argsTag] = cloneableTags[arrayTag] =\n  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n  cloneableTags[boolTag] = cloneableTags[dateTag] =\n  cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n  cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n  cloneableTags[int32Tag] = cloneableTags[mapTag] =\n  cloneableTags[numberTag] = cloneableTags[objectTag] =\n  cloneableTags[regexpTag] = cloneableTags[setTag] =\n  cloneableTags[stringTag] = cloneableTags[symbolTag] =\n  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag] = cloneableTags[funcTag] =\n  cloneableTags[weakMapTag] = false;\n\n  /** Used to map Latin Unicode letters to basic Latin letters. */\n  var deburredLetters = {\n    // Latin-1 Supplement block.\n    '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n    '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n    '\\xc7': 'C',  '\\xe7': 'c',\n    '\\xd0': 'D',  '\\xf0': 'd',\n    '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n    '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n    '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n    '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n    '\\xd1': 'N',  '\\xf1': 'n',\n    '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n    '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n    '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n    '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n    '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n    '\\xc6': 'Ae', '\\xe6': 'ae',\n    '\\xde': 'Th', '\\xfe': 'th',\n    '\\xdf': 'ss',\n    // Latin Extended-A block.\n    '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n    '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n    '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n    '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n    '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n    '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n    '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n    '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n    '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n    '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n    '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n    '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n    '\\u0134': 'J',  '\\u0135': 'j',\n    '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n    '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n    '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n    '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n    '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n    '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n    '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n    '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n    '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n    '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n    '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n    '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n    '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n    '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n    '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n    '\\u0174': 'W',  '\\u0175': 'w',\n    '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n    '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n    '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n    '\\u0132': 'IJ', '\\u0133': 'ij',\n    '\\u0152': 'Oe', '\\u0153': 'oe',\n    '\\u0149': \"'n\", '\\u017f': 's'\n  };\n\n  /** Used to map characters to HTML entities. */\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n  };\n\n  /** Used to map HTML entities to characters. */\n  var htmlUnescapes = {\n    '&amp;': '&',\n    '&lt;': '<',\n    '&gt;': '>',\n    '&quot;': '\"',\n    '&#39;': \"'\"\n  };\n\n  /** Used to escape characters for inclusion in compiled string literals. */\n  var stringEscapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\\n': 'n',\n    '\\r': 'r',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseFloat = parseFloat,\n      freeParseInt = parseInt;\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function() {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }());\n\n  /* Node.js helper references. */\n  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,\n      nodeIsDate = nodeUtil && nodeUtil.isDate,\n      nodeIsMap = nodeUtil && nodeUtil.isMap,\n      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,\n      nodeIsSet = nodeUtil && nodeUtil.isSet,\n      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0: return func.call(thisArg);\n      case 1: return func.call(thisArg, args[0]);\n      case 2: return func.call(thisArg, args[0], args[1]);\n      case 3: return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.forEachRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEachRight(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n\n    while (length--) {\n      if (iteratee(array[length], length, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array == null ? 0 : array.length,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n        length = values.length,\n        offset = array.length;\n\n    while (++index < length) {\n      array[offset + index] = values[index];\n    }\n    return array;\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.reduceRight` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the last element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduceRight(array, iteratee, accumulator, initAccum) {\n    var length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[--length];\n    }\n    while (length--) {\n      accumulator = iteratee(accumulator, array[length], length, array);\n    }\n    return accumulator;\n  }\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n        length = array == null ? 0 : array.length;\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Gets the size of an ASCII `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  var asciiSize = baseProperty('length');\n\n  /**\n   * Converts an ASCII `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /**\n   * Splits an ASCII `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function asciiWords(string) {\n    return string.match(reAsciiWord) || [];\n  }\n\n  /**\n   * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n   * without support for iteratee shorthands, which iterates over `collection`\n   * using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the found element or its key, else `undefined`.\n   */\n  function baseFindKey(collection, predicate, eachFunc) {\n    var result;\n    eachFunc(collection, function(value, key, collection) {\n      if (predicate(value, key, collection)) {\n        result = key;\n        return false;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (fromRight ? 1 : -1);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value\n      ? strictIndexOf(array, value, fromIndex)\n      : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\n   * This function is like `baseIndexOf` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOfWith(array, value, fromIndex, comparator) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (comparator(array[index], value)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.mean` and `_.meanBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the mean.\n   */\n  function baseMean(array, iteratee) {\n    var length = array == null ? 0 : array.length;\n    return length ? (baseSum(array, iteratee) / length) : NAN;\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function(object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.propertyOf` without support for deep paths.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyOf(object) {\n    return function(key) {\n      return object == null ? undefined : object[key];\n    };\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n      accumulator = initAccum\n        ? (initAccum = false, value)\n        : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n  }\n\n  /**\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\n   * sort order of `array` and replaces criteria objects with their corresponding\n   * values.\n   *\n   * @private\n   * @param {Array} array The array to sort.\n   * @param {Function} comparer The function to define sort order.\n   * @returns {Array} Returns `array`.\n   */\n  function baseSortBy(array, comparer) {\n    var length = array.length;\n\n    array.sort(comparer);\n    while (length--) {\n      array[length] = array[length].value;\n    }\n    return array;\n  }\n\n  /**\n   * The base implementation of `_.sum` and `_.sumBy` without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {number} Returns the sum.\n   */\n  function baseSum(array, iteratee) {\n    var result,\n        index = -1,\n        length = array.length;\n\n    while (++index < length) {\n      var current = iteratee(array[index]);\n      if (current !== undefined) {\n        result = result === undefined ? current : (result + current);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n   * of key-value pairs for `object` corresponding to the property names of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the key-value pairs.\n   */\n  function baseToPairs(object, props) {\n    return arrayMap(props, function(key) {\n      return [key, object[key]];\n    });\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function(value) {\n      return func(value);\n    };\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the first unmatched string symbol.\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n        length = strSymbols.length;\n\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\n   * that is not found in the character symbols.\n   *\n   * @private\n   * @param {Array} strSymbols The string symbols to inspect.\n   * @param {Array} chrSymbols The character symbols to find.\n   * @returns {number} Returns the index of the last unmatched string symbol.\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\n   * Gets the number of `placeholder` occurrences in `array`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} placeholder The placeholder to search for.\n   * @returns {number} Returns the placeholder count.\n   */\n  function countHolders(array, placeholder) {\n    var length = array.length,\n        result = 0;\n\n    while (length--) {\n      if (array[length] === placeholder) {\n        ++result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n   * letters to basic Latin letters.\n   *\n   * @private\n   * @param {string} letter The matched letter to deburr.\n   * @returns {string} Returns the deburred letter.\n   */\n  var deburrLetter = basePropertyOf(deburredLetters);\n\n  /**\n   * Used by `_.escape` to convert characters to HTML entities.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  var escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n  /**\n   * Used by `_.template` to escape characters for inclusion in compiled string literals.\n   *\n   * @private\n   * @param {string} chr The matched character to escape.\n   * @returns {string} Returns the escaped character.\n   */\n  function escapeStringChar(chr) {\n    return '\\\\' + stringEscapes[chr];\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key];\n  }\n\n  /**\n   * Checks if `string` contains Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /**\n   * Checks if `string` contains a word composed of Unicode symbols.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {boolean} Returns `true` if a word is found, else `false`.\n   */\n  function hasUnicodeWord(string) {\n    return reHasUnicodeWord.test(string);\n  }\n\n  /**\n   * Converts `iterator` to an array.\n   *\n   * @private\n   * @param {Object} iterator The iterator to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function iteratorToArray(iterator) {\n    var data,\n        result = [];\n\n    while (!(data = iterator.next()).done) {\n      result.push(data.value);\n    }\n    return result;\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n        result = Array(map.size);\n\n    map.forEach(function(value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /**\n   * Replaces all `placeholder` elements in `array` with an internal placeholder\n   * and returns an array of their indexes.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {*} placeholder The placeholder to replace.\n   * @returns {Array} Returns the new array of placeholder indexes.\n   */\n  function replaceHolders(array, placeholder) {\n    var index = -1,\n        length = array.length,\n        resIndex = 0,\n        result = [];\n\n    while (++index < length) {\n      var value = array[index];\n      if (value === placeholder || value === PLACEHOLDER) {\n        array[index] = PLACEHOLDER;\n        result[resIndex++] = index;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n\n  /**\n   * Converts `set` to its value-value pairs.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the value-value pairs.\n   */\n  function setToPairs(set) {\n    var index = -1,\n        result = Array(set.size);\n\n    set.forEach(function(value) {\n      result[++index] = [value, value];\n    });\n    return result;\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * A specialized version of `_.lastIndexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictLastIndexOf(array, value, fromIndex) {\n    var index = fromIndex + 1;\n    while (index--) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return index;\n  }\n\n  /**\n   * Gets the number of symbols in `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the string size.\n   */\n  function stringSize(string) {\n    return hasUnicode(string)\n      ? unicodeSize(string)\n      : asciiSize(string);\n  }\n\n  /**\n   * Converts `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function stringToArray(string) {\n    return hasUnicode(string)\n      ? unicodeToArray(string)\n      : asciiToArray(string);\n  }\n\n  /**\n   * Used by `_.unescape` to convert HTML entities to characters.\n   *\n   * @private\n   * @param {string} chr The matched character to unescape.\n   * @returns {string} Returns the unescaped character.\n   */\n  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);\n\n  /**\n   * Gets the size of a Unicode `string`.\n   *\n   * @private\n   * @param {string} string The string inspect.\n   * @returns {number} Returns the string size.\n   */\n  function unicodeSize(string) {\n    var result = reUnicode.lastIndex = 0;\n    while (reUnicode.test(string)) {\n      ++result;\n    }\n    return result;\n  }\n\n  /**\n   * Converts a Unicode `string` to an array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the converted array.\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\n   * Splits a Unicode `string` into an array of its words.\n   *\n   * @private\n   * @param {string} The string to inspect.\n   * @returns {Array} Returns the words of `string`.\n   */\n  function unicodeWords(string) {\n    return string.match(reUnicodeWord) || [];\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new pristine `lodash` function using the `context` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Util\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `lodash` function.\n   * @example\n   *\n   * _.mixin({ 'foo': _.constant('foo') });\n   *\n   * var lodash = _.runInContext();\n   * lodash.mixin({ 'bar': lodash.constant('bar') });\n   *\n   * _.isFunction(_.foo);\n   * // => true\n   * _.isFunction(_.bar);\n   * // => false\n   *\n   * lodash.isFunction(lodash.foo);\n   * // => false\n   * lodash.isFunction(lodash.bar);\n   * // => true\n   *\n   * // Create a suped-up `defer` in Node.js.\n   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n   */\n  var runInContext = (function runInContext(context) {\n    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));\n\n    /** Built-in constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Error = context.Error,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String,\n        TypeError = context.TypeError;\n\n    /** Used for built-in method references. */\n    var arrayProto = Array.prototype,\n        funcProto = Function.prototype,\n        objectProto = Object.prototype;\n\n    /** Used to detect overreaching core-js shims. */\n    var coreJsData = context['__core-js_shared__'];\n\n    /** Used to resolve the decompiled source of functions. */\n    var funcToString = funcProto.toString;\n\n    /** Used to check objects for own properties. */\n    var hasOwnProperty = objectProto.hasOwnProperty;\n\n    /** Used to generate unique IDs. */\n    var idCounter = 0;\n\n    /** Used to detect methods masquerading as native. */\n    var maskSrcKey = (function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n      return uid ? ('Symbol(src)_1.' + uid) : '';\n    }());\n\n    /**\n     * Used to resolve the\n     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n     * of values.\n     */\n    var nativeObjectToString = objectProto.toString;\n\n    /** Used to infer the `Object` constructor. */\n    var objectCtorString = funcToString.call(Object);\n\n    /** Used to restore the original `_` reference in `_.noConflict`. */\n    var oldDash = root._;\n\n    /** Used to detect if a method is native. */\n    var reIsNative = RegExp('^' +\n      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n    );\n\n    /** Built-in value references. */\n    var Buffer = moduleExports ? context.Buffer : undefined,\n        Symbol = context.Symbol,\n        Uint8Array = context.Uint8Array,\n        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,\n        getPrototype = overArg(Object.getPrototypeOf, Object),\n        objectCreate = Object.create,\n        propertyIsEnumerable = objectProto.propertyIsEnumerable,\n        splice = arrayProto.splice,\n        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,\n        symIterator = Symbol ? Symbol.iterator : undefined,\n        symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n    var defineProperty = (function() {\n      try {\n        var func = getNative(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n      } catch (e) {}\n    }());\n\n    /** Mocked built-ins. */\n    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,\n        ctxNow = Date && Date.now !== root.Date.now && Date.now,\n        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;\n\n    /* Built-in method references for those with the same name as other `lodash` methods. */\n    var nativeCeil = Math.ceil,\n        nativeFloor = Math.floor,\n        nativeGetSymbols = Object.getOwnPropertySymbols,\n        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n        nativeIsFinite = context.isFinite,\n        nativeJoin = arrayProto.join,\n        nativeKeys = overArg(Object.keys, Object),\n        nativeMax = Math.max,\n        nativeMin = Math.min,\n        nativeNow = Date.now,\n        nativeParseInt = context.parseInt,\n        nativeRandom = Math.random,\n        nativeReverse = arrayProto.reverse;\n\n    /* Built-in method references that are verified to be native. */\n    var DataView = getNative(context, 'DataView'),\n        Map = getNative(context, 'Map'),\n        Promise = getNative(context, 'Promise'),\n        Set = getNative(context, 'Set'),\n        WeakMap = getNative(context, 'WeakMap'),\n        nativeCreate = getNative(Object, 'create');\n\n    /** Used to store function metadata. */\n    var metaMap = WeakMap && new WeakMap;\n\n    /** Used to lookup unminified function names. */\n    var realNames = {};\n\n    /** Used to detect maps, sets, and weakmaps. */\n    var dataViewCtorString = toSource(DataView),\n        mapCtorString = toSource(Map),\n        promiseCtorString = toSource(Promise),\n        setCtorString = toSource(Set),\n        weakMapCtorString = toSource(WeakMap);\n\n    /** Used to convert symbols to primitives and strings. */\n    var symbolProto = Symbol ? Symbol.prototype : undefined,\n        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,\n        symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` object which wraps `value` to enable implicit method\n     * chain sequences. Methods that operate on and return arrays, collections,\n     * and functions can be chained together. Methods that retrieve a single value\n     * or may return a primitive value will automatically end the chain sequence\n     * and return the unwrapped value. Otherwise, the value must be unwrapped\n     * with `_#value`.\n     *\n     * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n     * enabled using `_.chain`.\n     *\n     * The execution of chained methods is lazy, that is, it's deferred until\n     * `_#value` is implicitly or explicitly called.\n     *\n     * Lazy evaluation allows several methods to support shortcut fusion.\n     * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n     * the creation of intermediate arrays and can greatly reduce the number of\n     * iteratee executions. Sections of a chain sequence qualify for shortcut\n     * fusion if the section is applied to an array and iteratees accept only\n     * one argument. The heuristic for whether a section qualifies for shortcut\n     * fusion is subject to change.\n     *\n     * Chaining is supported in custom builds as long as the `_#value` method is\n     * directly or indirectly included in the build.\n     *\n     * In addition to lodash methods, wrappers have `Array` and `String` methods.\n     *\n     * The wrapper `Array` methods are:\n     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n     *\n     * The wrapper `String` methods are:\n     * `replace` and `split`\n     *\n     * The wrapper methods that support shortcut fusion are:\n     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n     *\n     * The chainable wrapper methods are:\n     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n     * `zipObject`, `zipObjectDeep`, and `zipWith`\n     *\n     * The wrapper methods that are **not** chainable by default are:\n     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n     * `upperFirst`, `value`, and `words`\n     *\n     * @name _\n     * @constructor\n     * @category Seq\n     * @param {*} value The value to wrap in a `lodash` instance.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2, 3]);\n     *\n     * // Returns an unwrapped value.\n     * wrapped.reduce(_.add);\n     * // => 6\n     *\n     * // Returns a wrapped value.\n     * var squares = wrapped.map(square);\n     *\n     * _.isArray(squares);\n     * // => false\n     *\n     * _.isArray(squares.value());\n     * // => true\n     */\n    function lodash(value) {\n      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n        if (value instanceof LodashWrapper) {\n          return value;\n        }\n        if (hasOwnProperty.call(value, '__wrapped__')) {\n          return wrapperClone(value);\n        }\n      }\n      return new LodashWrapper(value);\n    }\n\n    /**\n     * The base implementation of `_.create` without support for assigning\n     * properties to the created object.\n     *\n     * @private\n     * @param {Object} proto The object to inherit from.\n     * @returns {Object} Returns the new object.\n     */\n    var baseCreate = (function() {\n      function object() {}\n      return function(proto) {\n        if (!isObject(proto)) {\n          return {};\n        }\n        if (objectCreate) {\n          return objectCreate(proto);\n        }\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n      };\n    }());\n\n    /**\n     * The function whose prototype chain sequence wrappers inherit from.\n     *\n     * @private\n     */\n    function baseLodash() {\n      // No operation performed.\n    }\n\n    /**\n     * The base constructor for creating `lodash` wrapper objects.\n     *\n     * @private\n     * @param {*} value The value to wrap.\n     * @param {boolean} [chainAll] Enable explicit method chain sequences.\n     */\n    function LodashWrapper(value, chainAll) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__chain__ = !!chainAll;\n      this.__index__ = 0;\n      this.__values__ = undefined;\n    }\n\n    /**\n     * By default, the template delimiters used by lodash are like those in\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n     * following template settings to use alternative delimiters.\n     *\n     * @static\n     * @memberOf _\n     * @type {Object}\n     */\n    lodash.templateSettings = {\n\n      /**\n       * Used to detect `data` property values to be HTML-escaped.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'escape': reEscape,\n\n      /**\n       * Used to detect code to be evaluated.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'evaluate': reEvaluate,\n\n      /**\n       * Used to detect `data` property values to inject.\n       *\n       * @memberOf _.templateSettings\n       * @type {RegExp}\n       */\n      'interpolate': reInterpolate,\n\n      /**\n       * Used to reference the data object in the template text.\n       *\n       * @memberOf _.templateSettings\n       * @type {string}\n       */\n      'variable': '',\n\n      /**\n       * Used to import variables into the compiled template.\n       *\n       * @memberOf _.templateSettings\n       * @type {Object}\n       */\n      'imports': {\n\n        /**\n         * A reference to the `lodash` function.\n         *\n         * @memberOf _.templateSettings.imports\n         * @type {Function}\n         */\n        '_': lodash\n      }\n    };\n\n    // Ensure wrappers are instances of `baseLodash`.\n    lodash.prototype = baseLodash.prototype;\n    lodash.prototype.constructor = lodash;\n\n    LodashWrapper.prototype = baseCreate(baseLodash.prototype);\n    LodashWrapper.prototype.constructor = LodashWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n     *\n     * @private\n     * @constructor\n     * @param {*} value The value to wrap.\n     */\n    function LazyWrapper(value) {\n      this.__wrapped__ = value;\n      this.__actions__ = [];\n      this.__dir__ = 1;\n      this.__filtered__ = false;\n      this.__iteratees__ = [];\n      this.__takeCount__ = MAX_ARRAY_LENGTH;\n      this.__views__ = [];\n    }\n\n    /**\n     * Creates a clone of the lazy wrapper object.\n     *\n     * @private\n     * @name clone\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the cloned `LazyWrapper` object.\n     */\n    function lazyClone() {\n      var result = new LazyWrapper(this.__wrapped__);\n      result.__actions__ = copyArray(this.__actions__);\n      result.__dir__ = this.__dir__;\n      result.__filtered__ = this.__filtered__;\n      result.__iteratees__ = copyArray(this.__iteratees__);\n      result.__takeCount__ = this.__takeCount__;\n      result.__views__ = copyArray(this.__views__);\n      return result;\n    }\n\n    /**\n     * Reverses the direction of lazy iteration.\n     *\n     * @private\n     * @name reverse\n     * @memberOf LazyWrapper\n     * @returns {Object} Returns the new reversed `LazyWrapper` object.\n     */\n    function lazyReverse() {\n      if (this.__filtered__) {\n        var result = new LazyWrapper(this);\n        result.__dir__ = -1;\n        result.__filtered__ = true;\n      } else {\n        result = this.clone();\n        result.__dir__ *= -1;\n      }\n      return result;\n    }\n\n    /**\n     * Extracts the unwrapped value from its lazy wrapper.\n     *\n     * @private\n     * @name value\n     * @memberOf LazyWrapper\n     * @returns {*} Returns the unwrapped value.\n     */\n    function lazyValue() {\n      var array = this.__wrapped__.value(),\n          dir = this.__dir__,\n          isArr = isArray(array),\n          isRight = dir < 0,\n          arrLength = isArr ? array.length : 0,\n          view = getView(0, arrLength, this.__views__),\n          start = view.start,\n          end = view.end,\n          length = end - start,\n          index = isRight ? end : (start - 1),\n          iteratees = this.__iteratees__,\n          iterLength = iteratees.length,\n          resIndex = 0,\n          takeCount = nativeMin(length, this.__takeCount__);\n\n      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {\n        return baseWrapperValue(array, this.__actions__);\n      }\n      var result = [];\n\n      outer:\n      while (length-- && resIndex < takeCount) {\n        index += dir;\n\n        var iterIndex = -1,\n            value = array[index];\n\n        while (++iterIndex < iterLength) {\n          var data = iteratees[iterIndex],\n              iteratee = data.iteratee,\n              type = data.type,\n              computed = iteratee(value);\n\n          if (type == LAZY_MAP_FLAG) {\n            value = computed;\n          } else if (!computed) {\n            if (type == LAZY_FILTER_FLAG) {\n              continue outer;\n            } else {\n              break outer;\n            }\n          }\n        }\n        result[resIndex++] = value;\n      }\n      return result;\n    }\n\n    // Ensure `LazyWrapper` is an instance of `baseLodash`.\n    LazyWrapper.prototype = baseCreate(baseLodash.prototype);\n    LazyWrapper.prototype.constructor = LazyWrapper;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a hash object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Hash(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the hash.\n     *\n     * @private\n     * @name clear\n     * @memberOf Hash\n     */\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the hash.\n     *\n     * @private\n     * @name delete\n     * @memberOf Hash\n     * @param {Object} hash The hash to modify.\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function hashDelete(key) {\n      var result = this.has(key) && delete this.__data__[key];\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the hash value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Hash\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result = data[key];\n        return result === HASH_UNDEFINED ? undefined : result;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : undefined;\n    }\n\n    /**\n     * Checks if a hash value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Hash\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n    }\n\n    /**\n     * Sets the hash `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Hash\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the hash instance.\n     */\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n      return this;\n    }\n\n    // Add methods to `Hash`.\n    Hash.prototype.clear = hashClear;\n    Hash.prototype['delete'] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an list cache object.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function ListCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the list cache.\n     *\n     * @private\n     * @name clear\n     * @memberOf ListCache\n     */\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the list cache.\n     *\n     * @private\n     * @name delete\n     * @memberOf ListCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function listCacheDelete(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n\n    /**\n     * Gets the list cache value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf ListCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function listCacheGet(key) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      return index < 0 ? undefined : data[index][1];\n    }\n\n    /**\n     * Checks if a list cache value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf ListCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n\n    /**\n     * Sets the list cache `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf ListCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the list cache instance.\n     */\n    function listCacheSet(key, value) {\n      var data = this.__data__,\n          index = assocIndexOf(data, key);\n\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n\n    // Add methods to `ListCache`.\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype['delete'] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a map cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function MapCache(entries) {\n      var index = -1,\n          length = entries == null ? 0 : entries.length;\n\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n\n    /**\n     * Removes all key-value entries from the map.\n     *\n     * @private\n     * @name clear\n     * @memberOf MapCache\n     */\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        'hash': new Hash,\n        'map': new (Map || ListCache),\n        'string': new Hash\n      };\n    }\n\n    /**\n     * Removes `key` and its value from the map.\n     *\n     * @private\n     * @name delete\n     * @memberOf MapCache\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function mapCacheDelete(key) {\n      var result = getMapData(this, key)['delete'](key);\n      this.size -= result ? 1 : 0;\n      return result;\n    }\n\n    /**\n     * Gets the map value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf MapCache\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n     * Checks if a map value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf MapCache\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n\n    /**\n     * Sets the map `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf MapCache\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the map cache instance.\n     */\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key),\n          size = data.size;\n\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n\n    // Add methods to `MapCache`.\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype['delete'] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     *\n     * Creates an array cache object to store unique values.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [values] The values to cache.\n     */\n    function SetCache(values) {\n      var index = -1,\n          length = values == null ? 0 : values.length;\n\n      this.__data__ = new MapCache;\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n\n    /**\n     * Adds `value` to the array cache.\n     *\n     * @private\n     * @name add\n     * @memberOf SetCache\n     * @alias push\n     * @param {*} value The value to cache.\n     * @returns {Object} Returns the cache instance.\n     */\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n\n    /**\n     * Checks if `value` is in the array cache.\n     *\n     * @private\n     * @name has\n     * @memberOf SetCache\n     * @param {*} value The value to search for.\n     * @returns {number} Returns `true` if `value` is found, else `false`.\n     */\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n\n    // Add methods to `SetCache`.\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a stack cache object to store key-value pairs.\n     *\n     * @private\n     * @constructor\n     * @param {Array} [entries] The key-value pairs to cache.\n     */\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n\n    /**\n     * Removes all key-value entries from the stack.\n     *\n     * @private\n     * @name clear\n     * @memberOf Stack\n     */\n    function stackClear() {\n      this.__data__ = new ListCache;\n      this.size = 0;\n    }\n\n    /**\n     * Removes `key` and its value from the stack.\n     *\n     * @private\n     * @name delete\n     * @memberOf Stack\n     * @param {string} key The key of the value to remove.\n     * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n     */\n    function stackDelete(key) {\n      var data = this.__data__,\n          result = data['delete'](key);\n\n      this.size = data.size;\n      return result;\n    }\n\n    /**\n     * Gets the stack value for `key`.\n     *\n     * @private\n     * @name get\n     * @memberOf Stack\n     * @param {string} key The key of the value to get.\n     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n     * Checks if a stack value for `key` exists.\n     *\n     * @private\n     * @name has\n     * @memberOf Stack\n     * @param {string} key The key of the entry to check.\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n     */\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n\n    /**\n     * Sets the stack `key` to `value`.\n     *\n     * @private\n     * @name set\n     * @memberOf Stack\n     * @param {string} key The key of the value to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns the stack cache instance.\n     */\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n\n    // Add methods to `Stack`.\n    Stack.prototype.clear = stackClear;\n    Stack.prototype['delete'] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of the enumerable property names of the array-like `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @param {boolean} inherited Specify returning inherited property names.\n     * @returns {Array} Returns the array of property names.\n     */\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value),\n          isArg = !isArr && isArguments(value),\n          isBuff = !isArr && !isArg && isBuffer(value),\n          isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n          skipIndexes = isArr || isArg || isBuff || isType,\n          result = skipIndexes ? baseTimes(value.length, String) : [],\n          length = result.length;\n\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) &&\n            !(skipIndexes && (\n               // Safari 9 has enumerable `arguments.length` in strict mode.\n               key == 'length' ||\n               // Node.js 0.10 has enumerable non-index properties on buffers.\n               (isBuff && (key == 'offset' || key == 'parent')) ||\n               // PhantomJS 2 has enumerable non-index properties on typed arrays.\n               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n               // Skip index properties.\n               isIndex(key, length)\n            ))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `_.sample` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @returns {*} Returns the random element.\n     */\n    function arraySample(array) {\n      var length = array.length;\n      return length ? array[baseRandom(0, length - 1)] : undefined;\n    }\n\n    /**\n     * A specialized version of `_.sampleSize` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function arraySampleSize(array, n) {\n      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * A specialized version of `_.shuffle` for arrays.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function arrayShuffle(array) {\n      return shuffleSelf(copyArray(array));\n    }\n\n    /**\n     * This function is like `assignValue` except that it doesn't assign\n     * `undefined` values.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignMergeValue(object, key, value) {\n      if ((value !== undefined && !eq(object[key], value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Assigns `value` to `key` of `object` if the existing value is not equivalent\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function assignValue(object, key, value) {\n      var objValue = object[key];\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n          (value === undefined && !(key in object))) {\n        baseAssignValue(object, key, value);\n      }\n    }\n\n    /**\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {*} key The key to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     */\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * Aggregates elements of `collection` on `accumulator` with keys transformed\n     * by `iteratee` and values set by `setter`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform keys.\n     * @param {Object} accumulator The initial aggregated object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseAggregator(collection, setter, iteratee, accumulator) {\n      baseEach(collection, function(value, key, collection) {\n        setter(accumulator, value, iteratee(value), collection);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.assign` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssign(object, source) {\n      return object && copyObject(source, keys(source), object);\n    }\n\n    /**\n     * The base implementation of `_.assignIn` without support for multiple sources\n     * or `customizer` functions.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @returns {Object} Returns `object`.\n     */\n    function baseAssignIn(object, source) {\n      return object && copyObject(source, keysIn(source), object);\n    }\n\n    /**\n     * The base implementation of `assignValue` and `assignMergeValue` without\n     * value checks.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {string} key The key of the property to assign.\n     * @param {*} value The value to assign.\n     */\n    function baseAssignValue(object, key, value) {\n      if (key == '__proto__' && defineProperty) {\n        defineProperty(object, key, {\n          'configurable': true,\n          'enumerable': true,\n          'value': value,\n          'writable': true\n        });\n      } else {\n        object[key] = value;\n      }\n    }\n\n    /**\n     * The base implementation of `_.at` without support for individual paths.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Array} Returns the picked elements.\n     */\n    function baseAt(object, paths) {\n      var index = -1,\n          length = paths.length,\n          result = Array(length),\n          skip = object == null;\n\n      while (++index < length) {\n        result[index] = skip ? undefined : get(object, paths[index]);\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.clamp` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     */\n    function baseClamp(number, lower, upper) {\n      if (number === number) {\n        if (upper !== undefined) {\n          number = number <= upper ? number : upper;\n        }\n        if (lower !== undefined) {\n          number = number >= lower ? number : lower;\n        }\n      }\n      return number;\n    }\n\n    /**\n     * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n     * traversed objects.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Deep clone\n     *  2 - Flatten inherited properties\n     *  4 - Clone symbols\n     * @param {Function} [customizer] The function to customize cloning.\n     * @param {string} [key] The key of `value`.\n     * @param {Object} [object] The parent object of `value`.\n     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n     * @returns {*} Returns the cloned value.\n     */\n    function baseClone(value, bitmask, customizer, key, object, stack) {\n      var result,\n          isDeep = bitmask & CLONE_DEEP_FLAG,\n          isFlat = bitmask & CLONE_FLAT_FLAG,\n          isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n      if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n      }\n      if (result !== undefined) {\n        return result;\n      }\n      if (!isObject(value)) {\n        return value;\n      }\n      var isArr = isArray(value);\n      if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n          return copyArray(value, result);\n        }\n      } else {\n        var tag = getTag(value),\n            isFunc = tag == funcTag || tag == genTag;\n\n        if (isBuffer(value)) {\n          return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n          result = (isFlat || isFunc) ? {} : initCloneObject(value);\n          if (!isDeep) {\n            return isFlat\n              ? copySymbolsIn(value, baseAssignIn(result, value))\n              : copySymbols(value, baseAssign(result, value));\n          }\n        } else {\n          if (!cloneableTags[tag]) {\n            return object ? value : {};\n          }\n          result = initCloneByTag(value, tag, isDeep);\n        }\n      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n      stack.set(value, result);\n\n      if (isSet(value)) {\n        value.forEach(function(subValue) {\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n      } else if (isMap(value)) {\n        value.forEach(function(subValue, key) {\n          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n      }\n\n      var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n\n      var props = isArr ? undefined : keysFunc(value);\n      arrayEach(props || value, function(subValue, key) {\n        if (props) {\n          key = subValue;\n          subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.conforms` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseConforms(source) {\n      var props = keys(source);\n      return function(object) {\n        return baseConformsTo(object, source, props);\n      };\n    }\n\n    /**\n     * The base implementation of `_.conformsTo` which accepts `props` to check.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     */\n    function baseConformsTo(object, source, props) {\n      var length = props.length;\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (length--) {\n        var key = props[length],\n            predicate = source[key],\n            value = object[key];\n\n        if ((value === undefined && !(key in object)) || !predicate(value)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.delay` and `_.defer` which accepts `args`\n     * to provide to `func`.\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {Array} args The arguments to provide to `func`.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    function baseDelay(func, wait, args) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\n    }\n\n    /**\n     * The base implementation of methods like `_.difference` without support\n     * for excluding multiple arrays or iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Array} values The values to exclude.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     */\n    function baseDifference(array, values, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          isCommon = true,\n          length = array.length,\n          result = [],\n          valuesLength = values.length;\n\n      if (!length) {\n        return result;\n      }\n      if (iteratee) {\n        values = arrayMap(values, baseUnary(iteratee));\n      }\n      if (comparator) {\n        includes = arrayIncludesWith;\n        isCommon = false;\n      }\n      else if (values.length >= LARGE_ARRAY_SIZE) {\n        includes = cacheHas;\n        isCommon = false;\n        values = new SetCache(values);\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee == null ? value : iteratee(value);\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var valuesIndex = valuesLength;\n          while (valuesIndex--) {\n            if (values[valuesIndex] === computed) {\n              continue outer;\n            }\n          }\n          result.push(value);\n        }\n        else if (!includes(values, computed, comparator)) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.forEach` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEach = createBaseEach(baseForOwn);\n\n    /**\n     * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     */\n    var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n    /**\n     * The base implementation of `_.every` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`\n     */\n    function baseEvery(collection, predicate) {\n      var result = true;\n      baseEach(collection, function(value, index, collection) {\n        result = !!predicate(value, index, collection);\n        return result;\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of methods like `_.max` and `_.min` which accepts a\n     * `comparator` to determine the extremum value.\n     *\n     * @private\n     * @param {Array} array The array to iterate over.\n     * @param {Function} iteratee The iteratee invoked per iteration.\n     * @param {Function} comparator The comparator used to compare values.\n     * @returns {*} Returns the extremum value.\n     */\n    function baseExtremum(array, iteratee, comparator) {\n      var index = -1,\n          length = array.length;\n\n      while (++index < length) {\n        var value = array[index],\n            current = iteratee(value);\n\n        if (current != null && (computed === undefined\n              ? (current === current && !isSymbol(current))\n              : comparator(current, computed)\n            )) {\n          var computed = current,\n              result = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.fill` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     */\n    function baseFill(array, value, start, end) {\n      var length = array.length;\n\n      start = toInteger(start);\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = (end === undefined || end > length) ? length : toInteger(end);\n      if (end < 0) {\n        end += length;\n      }\n      end = start > end ? 0 : toLength(end);\n      while (start < end) {\n        array[start++] = value;\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.filter` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     */\n    function baseFilter(collection, predicate) {\n      var result = [];\n      baseEach(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) {\n          result.push(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.flatten` with support for restricting flattening.\n     *\n     * @private\n     * @param {Array} array The array to flatten.\n     * @param {number} depth The maximum recursion depth.\n     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n     * @param {Array} [result=[]] The initial result value.\n     * @returns {Array} Returns the new flattened array.\n     */\n    function baseFlatten(array, depth, predicate, isStrict, result) {\n      var index = -1,\n          length = array.length;\n\n      predicate || (predicate = isFlattenable);\n      result || (result = []);\n\n      while (++index < length) {\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n          if (depth > 1) {\n            // Recursively flatten arrays (susceptible to call stack limits).\n            baseFlatten(value, depth - 1, predicate, isStrict, result);\n          } else {\n            arrayPush(result, value);\n          }\n        } else if (!isStrict) {\n          result[result.length] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `baseForOwn` which iterates over `object`\n     * properties returned by `keysFunc` and invokes `iteratee` for each property.\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseFor = createBaseFor();\n\n    /**\n     * This function is like `baseFor` except that it iterates over properties\n     * in the opposite order.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @returns {Object} Returns `object`.\n     */\n    var baseForRight = createBaseFor(true);\n\n    /**\n     * The base implementation of `_.forOwn` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwn(object, iteratee) {\n      return object && baseFor(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     */\n    function baseForOwnRight(object, iteratee) {\n      return object && baseForRight(object, iteratee, keys);\n    }\n\n    /**\n     * The base implementation of `_.functions` which creates an array of\n     * `object` function property names filtered from `props`.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Array} props The property names to filter.\n     * @returns {Array} Returns the function names.\n     */\n    function baseFunctions(object, props) {\n      return arrayFilter(props, function(key) {\n        return isFunction(object[key]);\n      });\n    }\n\n    /**\n     * The base implementation of `_.get` without support for default values.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseGet(object, path) {\n      path = castPath(path, object);\n\n      var index = 0,\n          length = path.length;\n\n      while (object != null && index < length) {\n        object = object[toKey(path[index++])];\n      }\n      return (index && index == length) ? object : undefined;\n    }\n\n    /**\n     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n     * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Function} keysFunc The function to get the keys of `object`.\n     * @param {Function} symbolsFunc The function to get the symbols of `object`.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result = keysFunc(object);\n      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n    }\n\n    /**\n     * The base implementation of `getTag` without fallbacks for buggy environments.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n      }\n      return (symToStringTag && symToStringTag in Object(value))\n        ? getRawTag(value)\n        : objectToString(value);\n    }\n\n    /**\n     * The base implementation of `_.gt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     */\n    function baseGt(value, other) {\n      return value > other;\n    }\n\n    /**\n     * The base implementation of `_.has` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHas(object, key) {\n      return object != null && hasOwnProperty.call(object, key);\n    }\n\n    /**\n     * The base implementation of `_.hasIn` without support for deep paths.\n     *\n     * @private\n     * @param {Object} [object] The object to query.\n     * @param {Array|string} key The key to check.\n     * @returns {boolean} Returns `true` if `key` exists, else `false`.\n     */\n    function baseHasIn(object, key) {\n      return object != null && key in Object(object);\n    }\n\n    /**\n     * The base implementation of `_.inRange` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {number} number The number to check.\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     */\n    function baseInRange(number, start, end) {\n      return number >= nativeMin(start, end) && number < nativeMax(start, end);\n    }\n\n    /**\n     * The base implementation of methods like `_.intersection`, without support\n     * for iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of shared values.\n     */\n    function baseIntersection(arrays, iteratee, comparator) {\n      var includes = comparator ? arrayIncludesWith : arrayIncludes,\n          length = arrays[0].length,\n          othLength = arrays.length,\n          othIndex = othLength,\n          caches = Array(othLength),\n          maxLength = Infinity,\n          result = [];\n\n      while (othIndex--) {\n        var array = arrays[othIndex];\n        if (othIndex && iteratee) {\n          array = arrayMap(array, baseUnary(iteratee));\n        }\n        maxLength = nativeMin(array.length, maxLength);\n        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n          ? new SetCache(othIndex && array)\n          : undefined;\n      }\n      array = arrays[0];\n\n      var index = -1,\n          seen = caches[0];\n\n      outer:\n      while (++index < length && result.length < maxLength) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (!(seen\n              ? cacheHas(seen, computed)\n              : includes(result, computed, comparator)\n            )) {\n          othIndex = othLength;\n          while (--othIndex) {\n            var cache = caches[othIndex];\n            if (!(cache\n                  ? cacheHas(cache, computed)\n                  : includes(arrays[othIndex], computed, comparator))\n                ) {\n              continue outer;\n            }\n          }\n          if (seen) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.invert` and `_.invertBy` which inverts\n     * `object` with values transformed by `iteratee` and set by `setter`.\n     *\n     * @private\n     * @param {Object} object The object to iterate over.\n     * @param {Function} setter The function to set `accumulator` values.\n     * @param {Function} iteratee The iteratee to transform values.\n     * @param {Object} accumulator The initial inverted object.\n     * @returns {Function} Returns `accumulator`.\n     */\n    function baseInverter(object, setter, iteratee, accumulator) {\n      baseForOwn(object, function(value, key, object) {\n        setter(accumulator, iteratee(value), key, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * The base implementation of `_.invoke` without support for individual\n     * method arguments.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {Array} args The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     */\n    function baseInvoke(object, path, args) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      var func = object == null ? object : object[toKey(last(path))];\n      return func == null ? undefined : apply(func, object, args);\n    }\n\n    /**\n     * The base implementation of `_.isArguments`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     */\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n\n    /**\n     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     */\n    function baseIsArrayBuffer(value) {\n      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;\n    }\n\n    /**\n     * The base implementation of `_.isDate` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     */\n    function baseIsDate(value) {\n      return isObjectLike(value) && baseGetTag(value) == dateTag;\n    }\n\n    /**\n     * The base implementation of `_.isEqual` which supports partial comparisons\n     * and tracks traversed objects.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {boolean} bitmask The bitmask flags.\n     *  1 - Unordered comparison\n     *  2 - Partial comparison\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     */\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n\n    /**\n     * A specialized version of `baseIsEqual` for arrays and objects which performs\n     * deep comparisons and tracks traversed objects enabling objects with circular\n     * references to be compared.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object),\n          othIsArr = isArray(other),\n          objTag = objIsArr ? arrayTag : getTag(object),\n          othTag = othIsArr ? arrayTag : getTag(other);\n\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n\n      var objIsObj = objTag == objectTag,\n          othIsObj = othTag == objectTag,\n          isSameTag = objTag == othTag;\n\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack);\n        return (objIsArr || isTypedArray(object))\n          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object,\n              othUnwrapped = othIsWrapped ? other.value() : other;\n\n          stack || (stack = new Stack);\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack);\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n\n    /**\n     * The base implementation of `_.isMap` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     */\n    function baseIsMap(value) {\n      return isObjectLike(value) && getTag(value) == mapTag;\n    }\n\n    /**\n     * The base implementation of `_.isMatch` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Array} matchData The property names, values, and compare flags to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     */\n    function baseIsMatch(object, source, matchData, customizer) {\n      var index = matchData.length,\n          length = index,\n          noCustomizer = !customizer;\n\n      if (object == null) {\n        return !length;\n      }\n      object = Object(object);\n      while (index--) {\n        var data = matchData[index];\n        if ((noCustomizer && data[2])\n              ? data[1] !== object[data[0]]\n              : !(data[0] in object)\n            ) {\n          return false;\n        }\n      }\n      while (++index < length) {\n        data = matchData[index];\n        var key = data[0],\n            objValue = object[key],\n            srcValue = data[1];\n\n        if (noCustomizer && data[2]) {\n          if (objValue === undefined && !(key in object)) {\n            return false;\n          }\n        } else {\n          var stack = new Stack;\n          if (customizer) {\n            var result = customizer(objValue, srcValue, key, object, source, stack);\n          }\n          if (!(result === undefined\n                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n                : result\n              )) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n\n    /**\n     * The base implementation of `_.isNative` without bad shim checks.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     */\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n\n    /**\n     * The base implementation of `_.isRegExp` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     */\n    function baseIsRegExp(value) {\n      return isObjectLike(value) && baseGetTag(value) == regexpTag;\n    }\n\n    /**\n     * The base implementation of `_.isSet` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     */\n    function baseIsSet(value) {\n      return isObjectLike(value) && getTag(value) == setTag;\n    }\n\n    /**\n     * The base implementation of `_.isTypedArray` without Node.js optimizations.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     */\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) &&\n        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n\n    /**\n     * The base implementation of `_.iteratee`.\n     *\n     * @private\n     * @param {*} [value=_.identity] The value to convert to an iteratee.\n     * @returns {Function} Returns the iteratee.\n     */\n    function baseIteratee(value) {\n      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n      if (typeof value == 'function') {\n        return value;\n      }\n      if (value == null) {\n        return identity;\n      }\n      if (typeof value == 'object') {\n        return isArray(value)\n          ? baseMatchesProperty(value[0], value[1])\n          : baseMatches(value);\n      }\n      return property(value);\n    }\n\n    /**\n     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != 'constructor') {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function baseKeysIn(object) {\n      if (!isObject(object)) {\n        return nativeKeysIn(object);\n      }\n      var isProto = isPrototype(object),\n          result = [];\n\n      for (var key in object) {\n        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.lt` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     */\n    function baseLt(value, other) {\n      return value < other;\n    }\n\n    /**\n     * The base implementation of `_.map` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} iteratee The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     */\n    function baseMap(collection, iteratee) {\n      var index = -1,\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n      });\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.matches` which doesn't clone `source`.\n     *\n     * @private\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatches(source) {\n      var matchData = getMatchData(source);\n      if (matchData.length == 1 && matchData[0][2]) {\n        return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n      }\n      return function(object) {\n        return object === source || baseIsMatch(object, source, matchData);\n      };\n    }\n\n    /**\n     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n     *\n     * @private\n     * @param {string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function baseMatchesProperty(path, srcValue) {\n      if (isKey(path) && isStrictComparable(srcValue)) {\n        return matchesStrictComparable(toKey(path), srcValue);\n      }\n      return function(object) {\n        var objValue = get(object, path);\n        return (objValue === undefined && objValue === srcValue)\n          ? hasIn(object, path)\n          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n      };\n    }\n\n    /**\n     * The base implementation of `_.merge` without support for multiple sources.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} [customizer] The function to customize merged values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMerge(object, source, srcIndex, customizer, stack) {\n      if (object === source) {\n        return;\n      }\n      baseFor(source, function(srcValue, key) {\n        stack || (stack = new Stack);\n        if (isObject(srcValue)) {\n          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n        }\n        else {\n          var newValue = customizer\n            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n            : undefined;\n\n          if (newValue === undefined) {\n            newValue = srcValue;\n          }\n          assignMergeValue(object, key, newValue);\n        }\n      }, keysIn);\n    }\n\n    /**\n     * A specialized version of `baseMerge` for arrays and objects which performs\n     * deep merges and tracks traversed objects enabling objects with circular\n     * references to be merged.\n     *\n     * @private\n     * @param {Object} object The destination object.\n     * @param {Object} source The source object.\n     * @param {string} key The key of the value to merge.\n     * @param {number} srcIndex The index of `source`.\n     * @param {Function} mergeFunc The function to merge values.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     */\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n        return;\n      }\n      var newValue = customizer\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      var isCommon = newValue === undefined;\n\n      if (isCommon) {\n        var isArr = isArray(srcValue),\n            isBuff = !isArr && isBuffer(srcValue),\n            isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n          if (isArray(objValue)) {\n            newValue = objValue;\n          }\n          else if (isArrayLikeObject(objValue)) {\n            newValue = copyArray(objValue);\n          }\n          else if (isBuff) {\n            isCommon = false;\n            newValue = cloneBuffer(srcValue, true);\n          }\n          else if (isTyped) {\n            isCommon = false;\n            newValue = cloneTypedArray(srcValue, true);\n          }\n          else {\n            newValue = [];\n          }\n        }\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n          newValue = objValue;\n          if (isArguments(objValue)) {\n            newValue = toPlainObject(objValue);\n          }\n          else if (!isObject(objValue) || isFunction(objValue)) {\n            newValue = initCloneObject(srcValue);\n          }\n        }\n        else {\n          isCommon = false;\n        }\n      }\n      if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n      }\n      assignMergeValue(object, key, newValue);\n    }\n\n    /**\n     * The base implementation of `_.nth` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {number} n The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     */\n    function baseNth(array, n) {\n      var length = array.length;\n      if (!length) {\n        return;\n      }\n      n += n < 0 ? length : 0;\n      return isIndex(n, length) ? array[n] : undefined;\n    }\n\n    /**\n     * The base implementation of `_.orderBy` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n     * @param {string[]} orders The sort orders of `iteratees`.\n     * @returns {Array} Returns the new sorted array.\n     */\n    function baseOrderBy(collection, iteratees, orders) {\n      var index = -1;\n      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));\n\n      var result = baseMap(collection, function(value, key, collection) {\n        var criteria = arrayMap(iteratees, function(iteratee) {\n          return iteratee(value);\n        });\n        return { 'criteria': criteria, 'index': ++index, 'value': value };\n      });\n\n      return baseSortBy(result, function(object, other) {\n        return compareMultiple(object, other, orders);\n      });\n    }\n\n    /**\n     * The base implementation of `_.pick` without support for individual\n     * property identifiers.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @returns {Object} Returns the new object.\n     */\n    function basePick(object, paths) {\n      return basePickBy(object, paths, function(value, path) {\n        return hasIn(object, path);\n      });\n    }\n\n    /**\n     * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Object} object The source object.\n     * @param {string[]} paths The property paths to pick.\n     * @param {Function} predicate The function invoked per property.\n     * @returns {Object} Returns the new object.\n     */\n    function basePickBy(object, paths, predicate) {\n      var index = -1,\n          length = paths.length,\n          result = {};\n\n      while (++index < length) {\n        var path = paths[index],\n            value = baseGet(object, path);\n\n        if (predicate(value, path)) {\n          baseSet(result, castPath(path, object), value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseProperty` which supports deep paths.\n     *\n     * @private\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     */\n    function basePropertyDeep(path) {\n      return function(object) {\n        return baseGet(object, path);\n      };\n    }\n\n    /**\n     * The base implementation of `_.pullAllBy` without support for iteratee\n     * shorthands.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAll(array, values, iteratee, comparator) {\n      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,\n          index = -1,\n          length = values.length,\n          seen = array;\n\n      if (array === values) {\n        values = copyArray(values);\n      }\n      if (iteratee) {\n        seen = arrayMap(array, baseUnary(iteratee));\n      }\n      while (++index < length) {\n        var fromIndex = 0,\n            value = values[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {\n          if (seen !== array) {\n            splice.call(seen, fromIndex, 1);\n          }\n          splice.call(array, fromIndex, 1);\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.pullAt` without support for individual\n     * indexes or capturing the removed elements.\n     *\n     * @private\n     * @param {Array} array The array to modify.\n     * @param {number[]} indexes The indexes of elements to remove.\n     * @returns {Array} Returns `array`.\n     */\n    function basePullAt(array, indexes) {\n      var length = array ? indexes.length : 0,\n          lastIndex = length - 1;\n\n      while (length--) {\n        var index = indexes[length];\n        if (length == lastIndex || index !== previous) {\n          var previous = index;\n          if (isIndex(index)) {\n            splice.call(array, index, 1);\n          } else {\n            baseUnset(array, index);\n          }\n        }\n      }\n      return array;\n    }\n\n    /**\n     * The base implementation of `_.random` without support for returning\n     * floating-point numbers.\n     *\n     * @private\n     * @param {number} lower The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the random number.\n     */\n    function baseRandom(lower, upper) {\n      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n    }\n\n    /**\n     * The base implementation of `_.range` and `_.rangeRight` which doesn't\n     * coerce arguments.\n     *\n     * @private\n     * @param {number} start The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} step The value to increment or decrement by.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the range of numbers.\n     */\n    function baseRange(start, end, step, fromRight) {\n      var index = -1,\n          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n          result = Array(length);\n\n      while (length--) {\n        result[fromRight ? length : ++index] = start;\n        start += step;\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.repeat` which doesn't coerce arguments.\n     *\n     * @private\n     * @param {string} string The string to repeat.\n     * @param {number} n The number of times to repeat the string.\n     * @returns {string} Returns the repeated string.\n     */\n    function baseRepeat(string, n) {\n      var result = '';\n      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {\n        return result;\n      }\n      // Leverage the exponentiation by squaring algorithm for a faster repeat.\n      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.\n      do {\n        if (n % 2) {\n          result += string;\n        }\n        n = nativeFloor(n / 2);\n        if (n) {\n          string += string;\n        }\n      } while (n);\n\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     */\n    function baseRest(func, start) {\n      return setToString(overRest(func, start, identity), func + '');\n    }\n\n    /**\n     * The base implementation of `_.sample`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     */\n    function baseSample(collection) {\n      return arraySample(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.sampleSize` without param guards.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} n The number of elements to sample.\n     * @returns {Array} Returns the random elements.\n     */\n    function baseSampleSize(collection, n) {\n      var array = values(collection);\n      return shuffleSelf(array, baseClamp(n, 0, array.length));\n    }\n\n    /**\n     * The base implementation of `_.set`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseSet(object, path, value, customizer) {\n      if (!isObject(object)) {\n        return object;\n      }\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          lastIndex = length - 1,\n          nested = object;\n\n      while (nested != null && ++index < length) {\n        var key = toKey(path[index]),\n            newValue = value;\n\n        if (index != lastIndex) {\n          var objValue = nested[key];\n          newValue = customizer ? customizer(objValue, key, nested) : undefined;\n          if (newValue === undefined) {\n            newValue = isObject(objValue)\n              ? objValue\n              : (isIndex(path[index + 1]) ? [] : {});\n          }\n        }\n        assignValue(nested, key, newValue);\n        nested = nested[key];\n      }\n      return object;\n    }\n\n    /**\n     * The base implementation of `setData` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetData = !metaMap ? identity : function(func, data) {\n      metaMap.set(func, data);\n      return func;\n    };\n\n    /**\n     * The base implementation of `setToString` without support for hot loop shorting.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var baseSetToString = !defineProperty ? identity : function(func, string) {\n      return defineProperty(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': constant(string),\n        'writable': true\n      });\n    };\n\n    /**\n     * The base implementation of `_.shuffle`.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     */\n    function baseShuffle(collection) {\n      return shuffleSelf(values(collection));\n    }\n\n    /**\n     * The base implementation of `_.slice` without an iteratee call guard.\n     *\n     * @private\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseSlice(array, start, end) {\n      var index = -1,\n          length = array.length;\n\n      if (start < 0) {\n        start = -start > length ? 0 : (length + start);\n      }\n      end = end > length ? length : end;\n      if (end < 0) {\n        end += length;\n      }\n      length = start > end ? 0 : ((end - start) >>> 0);\n      start >>>= 0;\n\n      var result = Array(length);\n      while (++index < length) {\n        result[index] = array[index + start];\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.some` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} predicate The function invoked per iteration.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     */\n    function baseSome(collection, predicate) {\n      var result;\n\n      baseEach(collection, function(value, index, collection) {\n        result = predicate(value, index, collection);\n        return !result;\n      });\n      return !!result;\n    }\n\n    /**\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n     * performs a binary search of `array` to determine the index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndex(array, value, retHighest) {\n      var low = 0,\n          high = array == null ? low : array.length;\n\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n        while (low < high) {\n          var mid = (low + high) >>> 1,\n              computed = array[mid];\n\n          if (computed !== null && !isSymbol(computed) &&\n              (retHighest ? (computed <= value) : (computed < value))) {\n            low = mid + 1;\n          } else {\n            high = mid;\n          }\n        }\n        return high;\n      }\n      return baseSortedIndexBy(array, value, identity, retHighest);\n    }\n\n    /**\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n     * which invokes `iteratee` for `value` and each element of `array` to compute\n     * their sort ranking. The iteratee is invoked with one argument; (value).\n     *\n     * @private\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} iteratee The iteratee invoked per element.\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     */\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\n      value = iteratee(value);\n\n      var low = 0,\n          high = array == null ? 0 : array.length,\n          valIsNaN = value !== value,\n          valIsNull = value === null,\n          valIsSymbol = isSymbol(value),\n          valIsUndefined = value === undefined;\n\n      while (low < high) {\n        var mid = nativeFloor((low + high) / 2),\n            computed = iteratee(array[mid]),\n            othIsDefined = computed !== undefined,\n            othIsNull = computed === null,\n            othIsReflexive = computed === computed,\n            othIsSymbol = isSymbol(computed);\n\n        if (valIsNaN) {\n          var setLow = retHighest || othIsReflexive;\n        } else if (valIsUndefined) {\n          setLow = othIsReflexive && (retHighest || othIsDefined);\n        } else if (valIsNull) {\n          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);\n        } else if (valIsSymbol) {\n          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);\n        } else if (othIsNull || othIsSymbol) {\n          setLow = false;\n        } else {\n          setLow = retHighest ? (computed <= value) : (computed < value);\n        }\n        if (setLow) {\n          low = mid + 1;\n        } else {\n          high = mid;\n        }\n      }\n      return nativeMin(high, MAX_ARRAY_INDEX);\n    }\n\n    /**\n     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without\n     * support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseSortedUniq(array, iteratee) {\n      var index = -1,\n          length = array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        if (!index || !eq(computed, seen)) {\n          var seen = computed;\n          result[resIndex++] = value === 0 ? 0 : value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.toNumber` which doesn't ensure correct\n     * conversions of binary, hexadecimal, or octal string values.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     */\n    function baseToNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      return +value;\n    }\n\n    /**\n     * The base implementation of `_.toString` which doesn't convert nullish\n     * values to empty strings.\n     *\n     * @private\n     * @param {*} value The value to process.\n     * @returns {string} Returns the string.\n     */\n    function baseToString(value) {\n      // Exit early for strings to avoid a performance hit in some environments.\n      if (typeof value == 'string') {\n        return value;\n      }\n      if (isArray(value)) {\n        // Recursively convert values (susceptible to call stack limits).\n        return arrayMap(value, baseToString) + '';\n      }\n      if (isSymbol(value)) {\n        return symbolToString ? symbolToString.call(value) : '';\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     */\n    function baseUniq(array, iteratee, comparator) {\n      var index = -1,\n          includes = arrayIncludes,\n          length = array.length,\n          isCommon = true,\n          result = [],\n          seen = result;\n\n      if (comparator) {\n        isCommon = false;\n        includes = arrayIncludesWith;\n      }\n      else if (length >= LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : createSet(array);\n        if (set) {\n          return setToArray(set);\n        }\n        isCommon = false;\n        includes = cacheHas;\n        seen = new SetCache;\n      }\n      else {\n        seen = iteratee ? [] : result;\n      }\n      outer:\n      while (++index < length) {\n        var value = array[index],\n            computed = iteratee ? iteratee(value) : value;\n\n        value = (comparator || value !== 0) ? value : 0;\n        if (isCommon && computed === computed) {\n          var seenIndex = seen.length;\n          while (seenIndex--) {\n            if (seen[seenIndex] === computed) {\n              continue outer;\n            }\n          }\n          if (iteratee) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n        else if (!includes(seen, computed, comparator)) {\n          if (seen !== result) {\n            seen.push(computed);\n          }\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * The base implementation of `_.unset`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The property path to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     */\n    function baseUnset(object, path) {\n      path = castPath(path, object);\n      object = parent(object, path);\n      return object == null || delete object[toKey(last(path))];\n    }\n\n    /**\n     * The base implementation of `_.update`.\n     *\n     * @private\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to update.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize path creation.\n     * @returns {Object} Returns `object`.\n     */\n    function baseUpdate(object, path, updater, customizer) {\n      return baseSet(object, path, updater(baseGet(object, path)), customizer);\n    }\n\n    /**\n     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`\n     * without support for iteratee shorthands.\n     *\n     * @private\n     * @param {Array} array The array to query.\n     * @param {Function} predicate The function invoked per iteration.\n     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function baseWhile(array, predicate, isDrop, fromRight) {\n      var length = array.length,\n          index = fromRight ? length : -1;\n\n      while ((fromRight ? index-- : ++index < length) &&\n        predicate(array[index], index, array)) {}\n\n      return isDrop\n        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))\n        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));\n    }\n\n    /**\n     * The base implementation of `wrapperValue` which returns the result of\n     * performing a sequence of actions on the unwrapped `value`, where each\n     * successive action is supplied the return value of the previous.\n     *\n     * @private\n     * @param {*} value The unwrapped value.\n     * @param {Array} actions Actions to perform to resolve the unwrapped value.\n     * @returns {*} Returns the resolved value.\n     */\n    function baseWrapperValue(value, actions) {\n      var result = value;\n      if (result instanceof LazyWrapper) {\n        result = result.value();\n      }\n      return arrayReduce(actions, function(result, action) {\n        return action.func.apply(action.thisArg, arrayPush([result], action.args));\n      }, result);\n    }\n\n    /**\n     * The base implementation of methods like `_.xor`, without support for\n     * iteratee shorthands, that accepts an array of arrays to inspect.\n     *\n     * @private\n     * @param {Array} arrays The arrays to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of values.\n     */\n    function baseXor(arrays, iteratee, comparator) {\n      var length = arrays.length;\n      if (length < 2) {\n        return length ? baseUniq(arrays[0]) : [];\n      }\n      var index = -1,\n          result = Array(length);\n\n      while (++index < length) {\n        var array = arrays[index],\n            othIndex = -1;\n\n        while (++othIndex < length) {\n          if (othIndex != index) {\n            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);\n          }\n        }\n      }\n      return baseUniq(baseFlatten(result, 1), iteratee, comparator);\n    }\n\n    /**\n     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n     *\n     * @private\n     * @param {Array} props The property identifiers.\n     * @param {Array} values The property values.\n     * @param {Function} assignFunc The function to assign values.\n     * @returns {Object} Returns the new object.\n     */\n    function baseZipObject(props, values, assignFunc) {\n      var index = -1,\n          length = props.length,\n          valsLength = values.length,\n          result = {};\n\n      while (++index < length) {\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n      }\n      return result;\n    }\n\n    /**\n     * Casts `value` to an empty array if it's not an array like object.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Array|Object} Returns the cast array-like object.\n     */\n    function castArrayLikeObject(value) {\n      return isArrayLikeObject(value) ? value : [];\n    }\n\n    /**\n     * Casts `value` to `identity` if it's not a function.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {Function} Returns cast function.\n     */\n    function castFunction(value) {\n      return typeof value == 'function' ? value : identity;\n    }\n\n    /**\n     * Casts `value` to a path array if it's not one.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {Array} Returns the cast property path array.\n     */\n    function castPath(value, object) {\n      if (isArray(value)) {\n        return value;\n      }\n      return isKey(value, object) ? [value] : stringToPath(toString(value));\n    }\n\n    /**\n     * A `baseRest` alias which can be replaced with `identity` by module\n     * replacement plugins.\n     *\n     * @private\n     * @type {Function}\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    var castRest = baseRest;\n\n    /**\n     * Casts `array` to a slice if it's needed.\n     *\n     * @private\n     * @param {Array} array The array to inspect.\n     * @param {number} start The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the cast slice.\n     */\n    function castSlice(array, start, end) {\n      var length = array.length;\n      end = end === undefined ? length : end;\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\n    }\n\n    /**\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\n     *\n     * @private\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\n     */\n    var clearTimeout = ctxClearTimeout || function(id) {\n      return root.clearTimeout(id);\n    };\n\n    /**\n     * Creates a clone of  `buffer`.\n     *\n     * @private\n     * @param {Buffer} buffer The buffer to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Buffer} Returns the cloned buffer.\n     */\n    function cloneBuffer(buffer, isDeep) {\n      if (isDeep) {\n        return buffer.slice();\n      }\n      var length = buffer.length,\n          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n      buffer.copy(result);\n      return result;\n    }\n\n    /**\n     * Creates a clone of `arrayBuffer`.\n     *\n     * @private\n     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n     * @returns {ArrayBuffer} Returns the cloned array buffer.\n     */\n    function cloneArrayBuffer(arrayBuffer) {\n      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n      new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n      return result;\n    }\n\n    /**\n     * Creates a clone of `dataView`.\n     *\n     * @private\n     * @param {Object} dataView The data view to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned data view.\n     */\n    function cloneDataView(dataView, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n    }\n\n    /**\n     * Creates a clone of `regexp`.\n     *\n     * @private\n     * @param {Object} regexp The regexp to clone.\n     * @returns {Object} Returns the cloned regexp.\n     */\n    function cloneRegExp(regexp) {\n      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n      result.lastIndex = regexp.lastIndex;\n      return result;\n    }\n\n    /**\n     * Creates a clone of the `symbol` object.\n     *\n     * @private\n     * @param {Object} symbol The symbol object to clone.\n     * @returns {Object} Returns the cloned symbol object.\n     */\n    function cloneSymbol(symbol) {\n      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n    }\n\n    /**\n     * Creates a clone of `typedArray`.\n     *\n     * @private\n     * @param {Object} typedArray The typed array to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the cloned typed array.\n     */\n    function cloneTypedArray(typedArray, isDeep) {\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n    }\n\n    /**\n     * Compares values to sort them in ascending order.\n     *\n     * @private\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {number} Returns the sort order indicator for `value`.\n     */\n    function compareAscending(value, other) {\n      if (value !== other) {\n        var valIsDefined = value !== undefined,\n            valIsNull = value === null,\n            valIsReflexive = value === value,\n            valIsSymbol = isSymbol(value);\n\n        var othIsDefined = other !== undefined,\n            othIsNull = other === null,\n            othIsReflexive = other === other,\n            othIsSymbol = isSymbol(other);\n\n        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n          return 1;\n        }\n        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n          return -1;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * Used by `_.orderBy` to compare multiple properties of a value to another\n     * and stable sort them.\n     *\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n     * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n     * of corresponding values.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\n     * @returns {number} Returns the sort order indicator for `object`.\n     */\n    function compareMultiple(object, other, orders) {\n      var index = -1,\n          objCriteria = object.criteria,\n          othCriteria = other.criteria,\n          length = objCriteria.length,\n          ordersLength = orders.length;\n\n      while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n          if (index >= ordersLength) {\n            return result;\n          }\n          var order = orders[index];\n          return result * (order == 'desc' ? -1 : 1);\n        }\n      }\n      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n      // that causes it, under certain circumstances, to provide the same value for\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n      // for more details.\n      //\n      // This also ensures a stable sort in V8 and other engines.\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n      return object.index - other.index;\n    }\n\n    /**\n     * Creates an array that is the composition of partially applied arguments,\n     * placeholders, and provided arguments into a single array of arguments.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to prepend to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgs(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersLength = holders.length,\n          leftIndex = -1,\n          leftLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(leftLength + rangeLength),\n          isUncurried = !isCurried;\n\n      while (++leftIndex < leftLength) {\n        result[leftIndex] = partials[leftIndex];\n      }\n      while (++argsIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[holders[argsIndex]] = args[argsIndex];\n        }\n      }\n      while (rangeLength--) {\n        result[leftIndex++] = args[argsIndex++];\n      }\n      return result;\n    }\n\n    /**\n     * This function is like `composeArgs` except that the arguments composition\n     * is tailored for `_.partialRight`.\n     *\n     * @private\n     * @param {Array} args The provided arguments.\n     * @param {Array} partials The arguments to append to those provided.\n     * @param {Array} holders The `partials` placeholder indexes.\n     * @params {boolean} [isCurried] Specify composing for a curried function.\n     * @returns {Array} Returns the new array of composed arguments.\n     */\n    function composeArgsRight(args, partials, holders, isCurried) {\n      var argsIndex = -1,\n          argsLength = args.length,\n          holdersIndex = -1,\n          holdersLength = holders.length,\n          rightIndex = -1,\n          rightLength = partials.length,\n          rangeLength = nativeMax(argsLength - holdersLength, 0),\n          result = Array(rangeLength + rightLength),\n          isUncurried = !isCurried;\n\n      while (++argsIndex < rangeLength) {\n        result[argsIndex] = args[argsIndex];\n      }\n      var offset = argsIndex;\n      while (++rightIndex < rightLength) {\n        result[offset + rightIndex] = partials[rightIndex];\n      }\n      while (++holdersIndex < holdersLength) {\n        if (isUncurried || argsIndex < argsLength) {\n          result[offset + holders[holdersIndex]] = args[argsIndex++];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Copies the values of `source` to `array`.\n     *\n     * @private\n     * @param {Array} source The array to copy values from.\n     * @param {Array} [array=[]] The array to copy values to.\n     * @returns {Array} Returns `array`.\n     */\n    function copyArray(source, array) {\n      var index = -1,\n          length = source.length;\n\n      array || (array = Array(length));\n      while (++index < length) {\n        array[index] = source[index];\n      }\n      return array;\n    }\n\n    /**\n     * Copies properties of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy properties from.\n     * @param {Array} props The property identifiers to copy.\n     * @param {Object} [object={}] The object to copy properties to.\n     * @param {Function} [customizer] The function to customize copied values.\n     * @returns {Object} Returns `object`.\n     */\n    function copyObject(source, props, object, customizer) {\n      var isNew = !object;\n      object || (object = {});\n\n      var index = -1,\n          length = props.length;\n\n      while (++index < length) {\n        var key = props[index];\n\n        var newValue = customizer\n          ? customizer(object[key], source[key], key, object, source)\n          : undefined;\n\n        if (newValue === undefined) {\n          newValue = source[key];\n        }\n        if (isNew) {\n          baseAssignValue(object, key, newValue);\n        } else {\n          assignValue(object, key, newValue);\n        }\n      }\n      return object;\n    }\n\n    /**\n     * Copies own symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbols(source, object) {\n      return copyObject(source, getSymbols(source), object);\n    }\n\n    /**\n     * Copies own and inherited symbols of `source` to `object`.\n     *\n     * @private\n     * @param {Object} source The object to copy symbols from.\n     * @param {Object} [object={}] The object to copy symbols to.\n     * @returns {Object} Returns `object`.\n     */\n    function copySymbolsIn(source, object) {\n      return copyObject(source, getSymbolsIn(source), object);\n    }\n\n    /**\n     * Creates a function like `_.groupBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} [initializer] The accumulator object initializer.\n     * @returns {Function} Returns the new aggregator function.\n     */\n    function createAggregator(setter, initializer) {\n      return function(collection, iteratee) {\n        var func = isArray(collection) ? arrayAggregator : baseAggregator,\n            accumulator = initializer ? initializer() : {};\n\n        return func(collection, setter, getIteratee(iteratee, 2), accumulator);\n      };\n    }\n\n    /**\n     * Creates a function like `_.assign`.\n     *\n     * @private\n     * @param {Function} assigner The function to assign values.\n     * @returns {Function} Returns the new assigner function.\n     */\n    function createAssigner(assigner) {\n      return baseRest(function(object, sources) {\n        var index = -1,\n            length = sources.length,\n            customizer = length > 1 ? sources[length - 1] : undefined,\n            guard = length > 2 ? sources[2] : undefined;\n\n        customizer = (assigner.length > 3 && typeof customizer == 'function')\n          ? (length--, customizer)\n          : undefined;\n\n        if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n          customizer = length < 3 ? undefined : customizer;\n          length = 1;\n        }\n        object = Object(object);\n        while (++index < length) {\n          var source = sources[index];\n          if (source) {\n            assigner(object, source, index, customizer);\n          }\n        }\n        return object;\n      });\n    }\n\n    /**\n     * Creates a `baseEach` or `baseEachRight` function.\n     *\n     * @private\n     * @param {Function} eachFunc The function to iterate over a collection.\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseEach(eachFunc, fromRight) {\n      return function(collection, iteratee) {\n        if (collection == null) {\n          return collection;\n        }\n        if (!isArrayLike(collection)) {\n          return eachFunc(collection, iteratee);\n        }\n        var length = collection.length,\n            index = fromRight ? length : -1,\n            iterable = Object(collection);\n\n        while ((fromRight ? index-- : ++index < length)) {\n          if (iteratee(iterable[index], index, iterable) === false) {\n            break;\n          }\n        }\n        return collection;\n      };\n    }\n\n    /**\n     * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new base function.\n     */\n    function createBaseFor(fromRight) {\n      return function(object, iteratee, keysFunc) {\n        var index = -1,\n            iterable = Object(object),\n            props = keysFunc(object),\n            length = props.length;\n\n        while (length--) {\n          var key = props[fromRight ? length : ++index];\n          if (iteratee(iterable[key], key, iterable) === false) {\n            break;\n          }\n        }\n        return object;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the optional `this`\n     * binding of `thisArg`.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createBind(func, bitmask, thisArg) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return fn.apply(isBind ? thisArg : this, arguments);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.lowerFirst`.\n     *\n     * @private\n     * @param {string} methodName The name of the `String` case method to use.\n     * @returns {Function} Returns the new case function.\n     */\n    function createCaseFirst(methodName) {\n      return function(string) {\n        string = toString(string);\n\n        var strSymbols = hasUnicode(string)\n          ? stringToArray(string)\n          : undefined;\n\n        var chr = strSymbols\n          ? strSymbols[0]\n          : string.charAt(0);\n\n        var trailing = strSymbols\n          ? castSlice(strSymbols, 1).join('')\n          : string.slice(1);\n\n        return chr[methodName]() + trailing;\n      };\n    }\n\n    /**\n     * Creates a function like `_.camelCase`.\n     *\n     * @private\n     * @param {Function} callback The function to combine each word.\n     * @returns {Function} Returns the new compounder function.\n     */\n    function createCompounder(callback) {\n      return function(string) {\n        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n      };\n    }\n\n    /**\n     * Creates a function that produces an instance of `Ctor` regardless of\n     * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n     *\n     * @private\n     * @param {Function} Ctor The constructor to wrap.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCtor(Ctor) {\n      return function() {\n        // Use a `switch` statement to work with class constructors. See\n        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n        // for more details.\n        var args = arguments;\n        switch (args.length) {\n          case 0: return new Ctor;\n          case 1: return new Ctor(args[0]);\n          case 2: return new Ctor(args[0], args[1]);\n          case 3: return new Ctor(args[0], args[1], args[2]);\n          case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n        }\n        var thisBinding = baseCreate(Ctor.prototype),\n            result = Ctor.apply(thisBinding, args);\n\n        // Mimic the constructor's `return` behavior.\n        // See https://es5.github.io/#x13.2.2 for more details.\n        return isObject(result) ? result : thisBinding;\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to enable currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {number} arity The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createCurry(func, bitmask, arity) {\n      var Ctor = createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length,\n            placeholder = getHolder(wrapper);\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n          ? []\n          : replaceHolders(args, placeholder);\n\n        length -= holders.length;\n        if (length < arity) {\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, undefined,\n            args, holders, undefined, undefined, arity - length);\n        }\n        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n        return apply(fn, this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.find` or `_.findLast` function.\n     *\n     * @private\n     * @param {Function} findIndexFunc The function to find the collection index.\n     * @returns {Function} Returns the new find function.\n     */\n    function createFind(findIndexFunc) {\n      return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!isArrayLike(collection)) {\n          var iteratee = getIteratee(predicate, 3);\n          collection = keys(collection);\n          predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n      };\n    }\n\n    /**\n     * Creates a `_.flow` or `_.flowRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new flow function.\n     */\n    function createFlow(fromRight) {\n      return flatRest(function(funcs) {\n        var length = funcs.length,\n            index = length,\n            prereq = LodashWrapper.prototype.thru;\n\n        if (fromRight) {\n          funcs.reverse();\n        }\n        while (index--) {\n          var func = funcs[index];\n          if (typeof func != 'function') {\n            throw new TypeError(FUNC_ERROR_TEXT);\n          }\n          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n            var wrapper = new LodashWrapper([], true);\n          }\n        }\n        index = wrapper ? index : length;\n        while (++index < length) {\n          func = funcs[index];\n\n          var funcName = getFuncName(func),\n              data = funcName == 'wrapper' ? getData(func) : undefined;\n\n          if (data && isLaziable(data[0]) &&\n                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&\n                !data[4].length && data[9] == 1\n              ) {\n            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n          } else {\n            wrapper = (func.length == 1 && isLaziable(func))\n              ? wrapper[funcName]()\n              : wrapper.thru(func);\n          }\n        }\n        return function() {\n          var args = arguments,\n              value = args[0];\n\n          if (wrapper && args.length == 1 && isArray(value)) {\n            return wrapper.plant(value).value();\n          }\n          var index = 0,\n              result = length ? funcs[index].apply(this, args) : value;\n\n          while (++index < length) {\n            result = funcs[index].call(this, result);\n          }\n          return result;\n        };\n      });\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with optional `this`\n     * binding of `thisArg`, partial application, and currying.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [partialsRight] The arguments to append to those provided\n     *  to the new function.\n     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n      var isAry = bitmask & WRAP_ARY_FLAG,\n          isBind = bitmask & WRAP_BIND_FLAG,\n          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n          isFlip = bitmask & WRAP_FLIP_FLAG,\n          Ctor = isBindKey ? undefined : createCtor(func);\n\n      function wrapper() {\n        var length = arguments.length,\n            args = Array(length),\n            index = length;\n\n        while (index--) {\n          args[index] = arguments[index];\n        }\n        if (isCurried) {\n          var placeholder = getHolder(wrapper),\n              holdersCount = countHolders(args, placeholder);\n        }\n        if (partials) {\n          args = composeArgs(args, partials, holders, isCurried);\n        }\n        if (partialsRight) {\n          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n        }\n        length -= holdersCount;\n        if (isCurried && length < arity) {\n          var newHolders = replaceHolders(args, placeholder);\n          return createRecurry(\n            func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n            args, newHolders, argPos, ary, arity - length\n          );\n        }\n        var thisBinding = isBind ? thisArg : this,\n            fn = isBindKey ? thisBinding[func] : func;\n\n        length = args.length;\n        if (argPos) {\n          args = reorder(args, argPos);\n        } else if (isFlip && length > 1) {\n          args.reverse();\n        }\n        if (isAry && ary < length) {\n          args.length = ary;\n        }\n        if (this && this !== root && this instanceof wrapper) {\n          fn = Ctor || createCtor(fn);\n        }\n        return fn.apply(thisBinding, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a function like `_.invertBy`.\n     *\n     * @private\n     * @param {Function} setter The function to set accumulator values.\n     * @param {Function} toIteratee The function to resolve iteratees.\n     * @returns {Function} Returns the new inverter function.\n     */\n    function createInverter(setter, toIteratee) {\n      return function(object, iteratee) {\n        return baseInverter(object, setter, toIteratee(iteratee), {});\n      };\n    }\n\n    /**\n     * Creates a function that performs a mathematical operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @param {number} [defaultValue] The value used for `undefined` arguments.\n     * @returns {Function} Returns the new mathematical operation function.\n     */\n    function createMathOperation(operator, defaultValue) {\n      return function(value, other) {\n        var result;\n        if (value === undefined && other === undefined) {\n          return defaultValue;\n        }\n        if (value !== undefined) {\n          result = value;\n        }\n        if (other !== undefined) {\n          if (result === undefined) {\n            return other;\n          }\n          if (typeof value == 'string' || typeof other == 'string') {\n            value = baseToString(value);\n            other = baseToString(other);\n          } else {\n            value = baseToNumber(value);\n            other = baseToNumber(other);\n          }\n          result = operator(value, other);\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function like `_.over`.\n     *\n     * @private\n     * @param {Function} arrayFunc The function to iterate over iteratees.\n     * @returns {Function} Returns the new over function.\n     */\n    function createOver(arrayFunc) {\n      return flatRest(function(iteratees) {\n        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));\n        return baseRest(function(args) {\n          var thisArg = this;\n          return arrayFunc(iteratees, function(iteratee) {\n            return apply(iteratee, thisArg, args);\n          });\n        });\n      });\n    }\n\n    /**\n     * Creates the padding for `string` based on `length`. The `chars` string\n     * is truncated if the number of characters exceeds `length`.\n     *\n     * @private\n     * @param {number} length The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padding for `string`.\n     */\n    function createPadding(length, chars) {\n      chars = chars === undefined ? ' ' : baseToString(chars);\n\n      var charsLength = chars.length;\n      if (charsLength < 2) {\n        return charsLength ? baseRepeat(chars, length) : chars;\n      }\n      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));\n      return hasUnicode(chars)\n        ? castSlice(stringToArray(result), 0, length).join('')\n        : result.slice(0, length);\n    }\n\n    /**\n     * Creates a function that wraps `func` to invoke it with the `this` binding\n     * of `thisArg` and `partials` prepended to the arguments it receives.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {Array} partials The arguments to prepend to those provided to\n     *  the new function.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createPartial(func, bitmask, thisArg, partials) {\n      var isBind = bitmask & WRAP_BIND_FLAG,\n          Ctor = createCtor(func);\n\n      function wrapper() {\n        var argsIndex = -1,\n            argsLength = arguments.length,\n            leftIndex = -1,\n            leftLength = partials.length,\n            args = Array(leftLength + argsLength),\n            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n        while (++leftIndex < leftLength) {\n          args[leftIndex] = partials[leftIndex];\n        }\n        while (argsLength--) {\n          args[leftIndex++] = arguments[++argsIndex];\n        }\n        return apply(fn, isBind ? thisArg : this, args);\n      }\n      return wrapper;\n    }\n\n    /**\n     * Creates a `_.range` or `_.rangeRight` function.\n     *\n     * @private\n     * @param {boolean} [fromRight] Specify iterating from right to left.\n     * @returns {Function} Returns the new range function.\n     */\n    function createRange(fromRight) {\n      return function(start, end, step) {\n        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n          end = step = undefined;\n        }\n        // Ensure the sign of `-0` is preserved.\n        start = toFinite(start);\n        if (end === undefined) {\n          end = start;\n          start = 0;\n        } else {\n          end = toFinite(end);\n        }\n        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n        return baseRange(start, end, step, fromRight);\n      };\n    }\n\n    /**\n     * Creates a function that performs a relational operation on two values.\n     *\n     * @private\n     * @param {Function} operator The function to perform the operation.\n     * @returns {Function} Returns the new relational operation function.\n     */\n    function createRelationalOperation(operator) {\n      return function(value, other) {\n        if (!(typeof value == 'string' && typeof other == 'string')) {\n          value = toNumber(value);\n          other = toNumber(other);\n        }\n        return operator(value, other);\n      };\n    }\n\n    /**\n     * Creates a function that wraps `func` to continue currying.\n     *\n     * @private\n     * @param {Function} func The function to wrap.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @param {Function} wrapFunc The function to create the `func` wrapper.\n     * @param {*} placeholder The placeholder value.\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to prepend to those provided to\n     *  the new function.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n      var isCurry = bitmask & WRAP_CURRY_FLAG,\n          newHolders = isCurry ? holders : undefined,\n          newHoldersRight = isCurry ? undefined : holders,\n          newPartials = isCurry ? partials : undefined,\n          newPartialsRight = isCurry ? undefined : partials;\n\n      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n      }\n      var newData = [\n        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n        newHoldersRight, argPos, ary, arity\n      ];\n\n      var result = wrapFunc.apply(undefined, newData);\n      if (isLaziable(func)) {\n        setData(result, newData);\n      }\n      result.placeholder = placeholder;\n      return setWrapToString(result, func, bitmask);\n    }\n\n    /**\n     * Creates a function like `_.round`.\n     *\n     * @private\n     * @param {string} methodName The name of the `Math` method to use when rounding.\n     * @returns {Function} Returns the new round function.\n     */\n    function createRound(methodName) {\n      var func = Math[methodName];\n      return function(number, precision) {\n        number = toNumber(number);\n        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n        if (precision && nativeIsFinite(number)) {\n          // Shift with exponential notation to avoid floating-point issues.\n          // See [MDN](https://mdn.io/round#Examples) for more details.\n          var pair = (toString(number) + 'e').split('e'),\n              value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n          pair = (toString(value) + 'e').split('e');\n          return +(pair[0] + 'e' + (+pair[1] - precision));\n        }\n        return func(number);\n      };\n    }\n\n    /**\n     * Creates a set object of `values`.\n     *\n     * @private\n     * @param {Array} values The values to add to the set.\n     * @returns {Object} Returns the new set.\n     */\n    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n      return new Set(values);\n    };\n\n    /**\n     * Creates a `_.toPairs` or `_.toPairsIn` function.\n     *\n     * @private\n     * @param {Function} keysFunc The function to get the keys of a given object.\n     * @returns {Function} Returns the new pairs function.\n     */\n    function createToPairs(keysFunc) {\n      return function(object) {\n        var tag = getTag(object);\n        if (tag == mapTag) {\n          return mapToArray(object);\n        }\n        if (tag == setTag) {\n          return setToPairs(object);\n        }\n        return baseToPairs(object, keysFunc(object));\n      };\n    }\n\n    /**\n     * Creates a function that either curries or invokes `func` with optional\n     * `this` binding and partially applied arguments.\n     *\n     * @private\n     * @param {Function|string} func The function or method name to wrap.\n     * @param {number} bitmask The bitmask flags.\n     *    1 - `_.bind`\n     *    2 - `_.bindKey`\n     *    4 - `_.curry` or `_.curryRight` of a bound function\n     *    8 - `_.curry`\n     *   16 - `_.curryRight`\n     *   32 - `_.partial`\n     *   64 - `_.partialRight`\n     *  128 - `_.rearg`\n     *  256 - `_.ary`\n     *  512 - `_.flip`\n     * @param {*} [thisArg] The `this` binding of `func`.\n     * @param {Array} [partials] The arguments to be partially applied.\n     * @param {Array} [holders] The `partials` placeholder indexes.\n     * @param {Array} [argPos] The argument positions of the new function.\n     * @param {number} [ary] The arity cap of `func`.\n     * @param {number} [arity] The arity of `func`.\n     * @returns {Function} Returns the new wrapped function.\n     */\n    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n      if (!isBindKey && typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var length = partials ? partials.length : 0;\n      if (!length) {\n        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n        partials = holders = undefined;\n      }\n      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n      arity = arity === undefined ? arity : toInteger(arity);\n      length -= holders ? holders.length : 0;\n\n      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n        var partialsRight = partials,\n            holdersRight = holders;\n\n        partials = holders = undefined;\n      }\n      var data = isBindKey ? undefined : getData(func);\n\n      var newData = [\n        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n        argPos, ary, arity\n      ];\n\n      if (data) {\n        mergeData(newData, data);\n      }\n      func = newData[0];\n      bitmask = newData[1];\n      thisArg = newData[2];\n      partials = newData[3];\n      holders = newData[4];\n      arity = newData[9] = newData[9] === undefined\n        ? (isBindKey ? 0 : func.length)\n        : nativeMax(newData[9] - length, 0);\n\n      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n      }\n      if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n        var result = createBind(func, bitmask, thisArg);\n      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n        result = createCurry(func, bitmask, arity);\n      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n        result = createPartial(func, bitmask, thisArg, partials);\n      } else {\n        result = createHybrid.apply(undefined, newData);\n      }\n      var setter = data ? baseSetData : setData;\n      return setWrapToString(setter(result, newData), func, bitmask);\n    }\n\n    /**\n     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties\n     * of source objects to the destination object for all destination properties\n     * that resolve to `undefined`.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to assign.\n     * @param {Object} object The parent object of `objValue`.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsAssignIn(objValue, srcValue, key, object) {\n      if (objValue === undefined ||\n          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        return srcValue;\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source\n     * objects into destination objects that are passed thru.\n     *\n     * @private\n     * @param {*} objValue The destination value.\n     * @param {*} srcValue The source value.\n     * @param {string} key The key of the property to merge.\n     * @param {Object} object The parent object of `objValue`.\n     * @param {Object} source The parent object of `srcValue`.\n     * @param {Object} [stack] Tracks traversed source values and their merged\n     *  counterparts.\n     * @returns {*} Returns the value to assign.\n     */\n    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {\n      if (isObject(objValue) && isObject(srcValue)) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, objValue);\n        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);\n        stack['delete'](srcValue);\n      }\n      return objValue;\n    }\n\n    /**\n     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n     * objects.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @param {string} key The key of the property to inspect.\n     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n     */\n    function customOmitClone(value) {\n      return isPlainObject(value) ? undefined : value;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for arrays with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Array} array The array to compare.\n     * @param {Array} other The other array to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `array` and `other` objects.\n     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n     */\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          arrLength = array.length,\n          othLength = other.length;\n\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(array);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var index = -1,\n          result = true,\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n      stack.set(array, other);\n      stack.set(other, array);\n\n      // Ignore non-index properties.\n      while (++index < arrLength) {\n        var arrValue = array[index],\n            othValue = other[index];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, arrValue, index, other, array, stack)\n            : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== undefined) {\n          if (compared) {\n            continue;\n          }\n          result = false;\n          break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n          if (!arraySome(other, function(othValue, othIndex) {\n                if (!cacheHas(seen, othIndex) &&\n                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n                  return seen.push(othIndex);\n                }\n              })) {\n            result = false;\n            break;\n          }\n        } else if (!(\n              arrValue === othValue ||\n                equalFunc(arrValue, othValue, bitmask, customizer, stack)\n            )) {\n          result = false;\n          break;\n        }\n      }\n      stack['delete'](array);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for comparing objects of\n     * the same `toStringTag`.\n     *\n     * **Note:** This function only supports comparing values with tags of\n     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {string} tag The `toStringTag` of the objects to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if ((object.byteLength != other.byteLength) ||\n              (object.byteOffset != other.byteOffset)) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n\n        case arrayBufferTag:\n          if ((object.byteLength != other.byteLength) ||\n              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n            return false;\n          }\n          return true;\n\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          // Coerce booleans to `1` or `0` and dates to milliseconds.\n          // Invalid dates are coerced to `NaN`.\n          return eq(+object, +other);\n\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n\n        case regexpTag:\n        case stringTag:\n          // Coerce regexes to strings and treat strings, primitives and objects,\n          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n          // for more details.\n          return object == (other + '');\n\n        case mapTag:\n          var convert = mapToArray;\n\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n\n          // Recursively compare objects (susceptible to call stack limits).\n          stack.set(object, other);\n          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack['delete'](object);\n          return result;\n\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n\n    /**\n     * A specialized version of `baseIsEqualDeep` for objects with support for\n     * partial deep comparisons.\n     *\n     * @private\n     * @param {Object} object The object to compare.\n     * @param {Object} other The other object to compare.\n     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n     * @param {Function} customizer The function to customize comparisons.\n     * @param {Function} equalFunc The function to determine equivalents of values.\n     * @param {Object} stack Tracks traversed `object` and `other` objects.\n     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n     */\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n          objProps = getAllKeys(object),\n          objLength = objProps.length,\n          othProps = getAllKeys(other),\n          othLength = othProps.length;\n\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked && stack.get(other)) {\n        return stacked == other;\n      }\n      var result = true;\n      stack.set(object, other);\n      stack.set(other, object);\n\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key],\n            othValue = other[key];\n\n        if (customizer) {\n          var compared = isPartial\n            ? customizer(othValue, objValue, key, other, object, stack)\n            : customizer(objValue, othValue, key, object, other, stack);\n        }\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined\n              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n              : compared\n            )) {\n          result = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n      }\n      if (result && !skipCtor) {\n        var objCtor = object.constructor,\n            othCtor = other.constructor;\n\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor &&\n            ('constructor' in object && 'constructor' in other) &&\n            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n              typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n          result = false;\n        }\n      }\n      stack['delete'](object);\n      stack['delete'](other);\n      return result;\n    }\n\n    /**\n     * A specialized version of `baseRest` which flattens the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @returns {Function} Returns the new function.\n     */\n    function flatRest(func) {\n      return setToString(overRest(func, undefined, flatten), func + '');\n    }\n\n    /**\n     * Creates an array of own enumerable property names and symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n\n    /**\n     * Creates an array of own and inherited enumerable property names and\n     * symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names and symbols.\n     */\n    function getAllKeysIn(object) {\n      return baseGetAllKeys(object, keysIn, getSymbolsIn);\n    }\n\n    /**\n     * Gets metadata for `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n     * Gets the name of `func`.\n     *\n     * @private\n     * @param {Function} func The function to query.\n     * @returns {string} Returns the function name.\n     */\n    function getFuncName(func) {\n      var result = (func.name + ''),\n          array = realNames[result],\n          length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n      while (length--) {\n        var data = array[length],\n            otherFunc = data.func;\n        if (otherFunc == null || otherFunc == func) {\n          return data.name;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Gets the argument placeholder value for `func`.\n     *\n     * @private\n     * @param {Function} func The function to inspect.\n     * @returns {*} Returns the placeholder value.\n     */\n    function getHolder(func) {\n      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;\n      return object.placeholder;\n    }\n\n    /**\n     * Gets the appropriate \"iteratee\" function. If `_.iteratee` is customized,\n     * this function returns the custom method, otherwise it returns `baseIteratee`.\n     * If arguments are provided, the chosen function is invoked with them and\n     * its result is returned.\n     *\n     * @private\n     * @param {*} [value] The value to convert to an iteratee.\n     * @param {number} [arity] The arity of the created iteratee.\n     * @returns {Function} Returns the chosen function or its result.\n     */\n    function getIteratee() {\n      var result = lodash.iteratee || iteratee;\n      result = result === iteratee ? baseIteratee : result;\n      return arguments.length ? result(arguments[0], arguments[1]) : result;\n    }\n\n    /**\n     * Gets the data for `map`.\n     *\n     * @private\n     * @param {Object} map The map to query.\n     * @param {string} key The reference key.\n     * @returns {*} Returns the map data.\n     */\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key)\n        ? data[typeof key == 'string' ? 'string' : 'hash']\n        : data.map;\n    }\n\n    /**\n     * Gets the property names, values, and compare flags of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the match data of `object`.\n     */\n    function getMatchData(object) {\n      var result = keys(object),\n          length = result.length;\n\n      while (length--) {\n        var key = result[length],\n            value = object[key];\n\n        result[length] = [key, value, isStrictComparable(value)];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the native function at `key` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the method to get.\n     * @returns {*} Returns the function if it's native, else `undefined`.\n     */\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : undefined;\n    }\n\n    /**\n     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the raw `toStringTag`.\n     */\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag),\n          tag = value[symToStringTag];\n\n      try {\n        value[symToStringTag] = undefined;\n        var unmasked = true;\n      } catch (e) {}\n\n      var result = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array of the own enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n\n    /**\n     * Creates an array of the own and inherited enumerable symbols of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of symbols.\n     */\n    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n      var result = [];\n      while (object) {\n        arrayPush(result, getSymbols(object));\n        object = getPrototype(object);\n      }\n      return result;\n    };\n\n    /**\n     * Gets the `toStringTag` of `value`.\n     *\n     * @private\n     * @param {*} value The value to query.\n     * @returns {string} Returns the `toStringTag`.\n     */\n    var getTag = baseGetTag;\n\n    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n        (Map && getTag(new Map) != mapTag) ||\n        (Promise && getTag(Promise.resolve()) != promiseTag) ||\n        (Set && getTag(new Set) != setTag) ||\n        (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n      getTag = function(value) {\n        var result = baseGetTag(value),\n            Ctor = result == objectTag ? value.constructor : undefined,\n            ctorString = Ctor ? toSource(Ctor) : '';\n\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString: return dataViewTag;\n            case mapCtorString: return mapTag;\n            case promiseCtorString: return promiseTag;\n            case setCtorString: return setTag;\n            case weakMapCtorString: return weakMapTag;\n          }\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Gets the view, applying any `transforms` to the `start` and `end` positions.\n     *\n     * @private\n     * @param {number} start The start of the view.\n     * @param {number} end The end of the view.\n     * @param {Array} transforms The transformations to apply to the view.\n     * @returns {Object} Returns an object containing the `start` and `end`\n     *  positions of the view.\n     */\n    function getView(start, end, transforms) {\n      var index = -1,\n          length = transforms.length;\n\n      while (++index < length) {\n        var data = transforms[index],\n            size = data.size;\n\n        switch (data.type) {\n          case 'drop':      start += size; break;\n          case 'dropRight': end -= size; break;\n          case 'take':      end = nativeMin(end, start + size); break;\n          case 'takeRight': start = nativeMax(start, end - size); break;\n        }\n      }\n      return { 'start': start, 'end': end };\n    }\n\n    /**\n     * Extracts wrapper details from the `source` body comment.\n     *\n     * @private\n     * @param {string} source The source to inspect.\n     * @returns {Array} Returns the wrapper details.\n     */\n    function getWrapDetails(source) {\n      var match = source.match(reWrapDetails);\n      return match ? match[1].split(reSplitDetails) : [];\n    }\n\n    /**\n     * Checks if `path` exists on `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @param {Function} hasFunc The function to check properties.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     */\n    function hasPath(object, path, hasFunc) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length,\n          result = false;\n\n      while (++index < length) {\n        var key = toKey(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) {\n          break;\n        }\n        object = object[key];\n      }\n      if (result || ++index != length) {\n        return result;\n      }\n      length = object == null ? 0 : object.length;\n      return !!length && isLength(length) && isIndex(key, length) &&\n        (isArray(object) || isArguments(object));\n    }\n\n    /**\n     * Initializes an array clone.\n     *\n     * @private\n     * @param {Array} array The array to clone.\n     * @returns {Array} Returns the initialized clone.\n     */\n    function initCloneArray(array) {\n      var length = array.length,\n          result = new array.constructor(length);\n\n      // Add properties assigned by `RegExp#exec`.\n      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n      }\n      return result;\n    }\n\n    /**\n     * Initializes an object clone.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneObject(object) {\n      return (typeof object.constructor == 'function' && !isPrototype(object))\n        ? baseCreate(getPrototype(object))\n        : {};\n    }\n\n    /**\n     * Initializes an object clone based on its `toStringTag`.\n     *\n     * **Note:** This function only supports cloning values with tags of\n     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n     *\n     * @private\n     * @param {Object} object The object to clone.\n     * @param {string} tag The `toStringTag` of the object to clone.\n     * @param {boolean} [isDeep] Specify a deep clone.\n     * @returns {Object} Returns the initialized clone.\n     */\n    function initCloneByTag(object, tag, isDeep) {\n      var Ctor = object.constructor;\n      switch (tag) {\n        case arrayBufferTag:\n          return cloneArrayBuffer(object);\n\n        case boolTag:\n        case dateTag:\n          return new Ctor(+object);\n\n        case dataViewTag:\n          return cloneDataView(object, isDeep);\n\n        case float32Tag: case float64Tag:\n        case int8Tag: case int16Tag: case int32Tag:\n        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n          return cloneTypedArray(object, isDeep);\n\n        case mapTag:\n          return new Ctor;\n\n        case numberTag:\n        case stringTag:\n          return new Ctor(object);\n\n        case regexpTag:\n          return cloneRegExp(object);\n\n        case setTag:\n          return new Ctor;\n\n        case symbolTag:\n          return cloneSymbol(object);\n      }\n    }\n\n    /**\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\n     *\n     * @private\n     * @param {string} source The source to modify.\n     * @returns {Array} details The details to insert.\n     * @returns {string} Returns the modified source.\n     */\n    function insertWrapDetails(source, details) {\n      var length = details.length;\n      if (!length) {\n        return source;\n      }\n      var lastIndex = length - 1;\n      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n      details = details.join(length > 2 ? ', ' : ' ');\n      return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n    }\n\n    /**\n     * Checks if `value` is a flattenable `arguments` object or array.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n     */\n    function isFlattenable(value) {\n      return isArray(value) || isArguments(value) ||\n        !!(spreadableSymbol && value && value[spreadableSymbol]);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like index.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n     */\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n\n      return !!length &&\n        (type == 'number' ||\n          (type != 'symbol' && reIsUint.test(value))) &&\n            (value > -1 && value % 1 == 0 && value < length);\n    }\n\n    /**\n     * Checks if the given arguments are from an iteratee call.\n     *\n     * @private\n     * @param {*} value The potential iteratee value argument.\n     * @param {*} index The potential iteratee index or key argument.\n     * @param {*} object The potential iteratee object argument.\n     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n     *  else `false`.\n     */\n    function isIterateeCall(value, index, object) {\n      if (!isObject(object)) {\n        return false;\n      }\n      var type = typeof index;\n      if (type == 'number'\n            ? (isArrayLike(object) && isIndex(index, object.length))\n            : (type == 'string' && index in object)\n          ) {\n        return eq(object[index], value);\n      }\n      return false;\n    }\n\n    /**\n     * Checks if `value` is a property name and not a property path.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {Object} [object] The object to query keys on.\n     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n     */\n    function isKey(value, object) {\n      if (isArray(value)) {\n        return false;\n      }\n      var type = typeof value;\n      if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n          value == null || isSymbol(value)) {\n        return true;\n      }\n      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object));\n    }\n\n    /**\n     * Checks if `value` is suitable for use as unique object key.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n     */\n    function isKeyable(value) {\n      var type = typeof value;\n      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n        ? (value !== '__proto__')\n        : (value === null);\n    }\n\n    /**\n     * Checks if `func` has a lazy counterpart.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n     *  else `false`.\n     */\n    function isLaziable(func) {\n      var funcName = getFuncName(func),\n          other = lodash[funcName];\n\n      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n        return false;\n      }\n      if (func === other) {\n        return true;\n      }\n      var data = getData(other);\n      return !!data && func === data[0];\n    }\n\n    /**\n     * Checks if `func` has its source masked.\n     *\n     * @private\n     * @param {Function} func The function to check.\n     * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n     */\n    function isMasked(func) {\n      return !!maskSrcKey && (maskSrcKey in func);\n    }\n\n    /**\n     * Checks if `func` is capable of being masked.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.\n     */\n    var isMaskable = coreJsData ? isFunction : stubFalse;\n\n    /**\n     * Checks if `value` is likely a prototype object.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n     */\n    function isPrototype(value) {\n      var Ctor = value && value.constructor,\n          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n      return value === proto;\n    }\n\n    /**\n     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` if suitable for strict\n     *  equality comparisons, else `false`.\n     */\n    function isStrictComparable(value) {\n      return value === value && !isObject(value);\n    }\n\n    /**\n     * A specialized version of `matchesProperty` for source values suitable\n     * for strict equality comparisons, i.e. `===`.\n     *\n     * @private\n     * @param {string} key The key of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     */\n    function matchesStrictComparable(key, srcValue) {\n      return function(object) {\n        if (object == null) {\n          return false;\n        }\n        return object[key] === srcValue &&\n          (srcValue !== undefined || (key in Object(object)));\n      };\n    }\n\n    /**\n     * A specialized version of `_.memoize` which clears the memoized function's\n     * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n     *\n     * @private\n     * @param {Function} func The function to have its output memoized.\n     * @returns {Function} Returns the new memoized function.\n     */\n    function memoizeCapped(func) {\n      var result = memoize(func, function(key) {\n        if (cache.size === MAX_MEMOIZE_SIZE) {\n          cache.clear();\n        }\n        return key;\n      });\n\n      var cache = result.cache;\n      return result;\n    }\n\n    /**\n     * Merges the function metadata of `source` into `data`.\n     *\n     * Merging metadata reduces the number of wrappers used to invoke a function.\n     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n     * may be applied regardless of execution order. Methods like `_.ary` and\n     * `_.rearg` modify function arguments, making the order in which they are\n     * executed important, preventing the merging of metadata. However, we make\n     * an exception for a safe combined case where curried functions have `_.ary`\n     * and or `_.rearg` applied.\n     *\n     * @private\n     * @param {Array} data The destination metadata.\n     * @param {Array} source The source metadata.\n     * @returns {Array} Returns `data`.\n     */\n    function mergeData(data, source) {\n      var bitmask = data[1],\n          srcBitmask = source[1],\n          newBitmask = bitmask | srcBitmask,\n          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n      var isCombo =\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n      // Exit early if metadata can't be merged.\n      if (!(isCommon || isCombo)) {\n        return data;\n      }\n      // Use source `thisArg` if available.\n      if (srcBitmask & WRAP_BIND_FLAG) {\n        data[2] = source[2];\n        // Set when currying a bound function.\n        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n      }\n      // Compose partial arguments.\n      var value = source[3];\n      if (value) {\n        var partials = data[3];\n        data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n      }\n      // Compose partial right arguments.\n      value = source[5];\n      if (value) {\n        partials = data[5];\n        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n      }\n      // Use source `argPos` if available.\n      value = source[7];\n      if (value) {\n        data[7] = value;\n      }\n      // Use source `ary` if it's smaller.\n      if (srcBitmask & WRAP_ARY_FLAG) {\n        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n      }\n      // Use source `arity` if one is not provided.\n      if (data[9] == null) {\n        data[9] = source[9];\n      }\n      // Use source `func` and merge bitmasks.\n      data[0] = source[0];\n      data[1] = newBitmask;\n\n      return data;\n    }\n\n    /**\n     * This function is like\n     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * except that it includes inherited enumerable properties.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     */\n    function nativeKeysIn(object) {\n      var result = [];\n      if (object != null) {\n        for (var key in Object(object)) {\n          result.push(key);\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a string using `Object.prototype.toString`.\n     *\n     * @private\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     */\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n\n    /**\n     * A specialized version of `baseRest` which transforms the rest array.\n     *\n     * @private\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @param {Function} transform The rest array transform.\n     * @returns {Function} Returns the new function.\n     */\n    function overRest(func, start, transform) {\n      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n      return function() {\n        var args = arguments,\n            index = -1,\n            length = nativeMax(args.length - start, 0),\n            array = Array(length);\n\n        while (++index < length) {\n          array[index] = args[start + index];\n        }\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while (++index < start) {\n          otherArgs[index] = args[index];\n        }\n        otherArgs[start] = transform(array);\n        return apply(func, this, otherArgs);\n      };\n    }\n\n    /**\n     * Gets the parent value at `path` of `object`.\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {Array} path The path to get the parent value of.\n     * @returns {*} Returns the parent value.\n     */\n    function parent(object, path) {\n      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n    }\n\n    /**\n     * Reorder `array` according to the specified indexes where the element at\n     * the first index is assigned as the first element, the element at\n     * the second index is assigned as the second element, and so on.\n     *\n     * @private\n     * @param {Array} array The array to reorder.\n     * @param {Array} indexes The arranged array indexes.\n     * @returns {Array} Returns `array`.\n     */\n    function reorder(array, indexes) {\n      var arrLength = array.length,\n          length = nativeMin(indexes.length, arrLength),\n          oldArray = copyArray(array);\n\n      while (length--) {\n        var index = indexes[length];\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n      }\n      return array;\n    }\n\n    /**\n     * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n     *\n     * @private\n     * @param {Object} object The object to query.\n     * @param {string} key The key of the property to get.\n     * @returns {*} Returns the property value.\n     */\n    function safeGet(object, key) {\n      if (key === 'constructor' && typeof object[key] === 'function') {\n        return;\n      }\n\n      if (key == '__proto__') {\n        return;\n      }\n\n      return object[key];\n    }\n\n    /**\n     * Sets metadata for `func`.\n     *\n     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n     * period of time, it will trip its breaker and transition to an identity\n     * function to avoid garbage collection pauses in V8. See\n     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n     * for more details.\n     *\n     * @private\n     * @param {Function} func The function to associate metadata with.\n     * @param {*} data The metadata.\n     * @returns {Function} Returns `func`.\n     */\n    var setData = shortOut(baseSetData);\n\n    /**\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\n     *\n     * @private\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @returns {number|Object} Returns the timer id or timeout object.\n     */\n    var setTimeout = ctxSetTimeout || function(func, wait) {\n      return root.setTimeout(func, wait);\n    };\n\n    /**\n     * Sets the `toString` method of `func` to return `string`.\n     *\n     * @private\n     * @param {Function} func The function to modify.\n     * @param {Function} string The `toString` result.\n     * @returns {Function} Returns `func`.\n     */\n    var setToString = shortOut(baseSetToString);\n\n    /**\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n     * with wrapper details in a comment at the top of the source body.\n     *\n     * @private\n     * @param {Function} wrapper The function to modify.\n     * @param {Function} reference The reference function.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Function} Returns `wrapper`.\n     */\n    function setWrapToString(wrapper, reference, bitmask) {\n      var source = (reference + '');\n      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n    }\n\n    /**\n     * Creates a function that'll short out and invoke `identity` instead\n     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n     * milliseconds.\n     *\n     * @private\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new shortable function.\n     */\n    function shortOut(func) {\n      var count = 0,\n          lastCalled = 0;\n\n      return function() {\n        var stamp = nativeNow(),\n            remaining = HOT_SPAN - (stamp - lastCalled);\n\n        lastCalled = stamp;\n        if (remaining > 0) {\n          if (++count >= HOT_COUNT) {\n            return arguments[0];\n          }\n        } else {\n          count = 0;\n        }\n        return func.apply(undefined, arguments);\n      };\n    }\n\n    /**\n     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n     *\n     * @private\n     * @param {Array} array The array to shuffle.\n     * @param {number} [size=array.length] The size of `array`.\n     * @returns {Array} Returns `array`.\n     */\n    function shuffleSelf(array, size) {\n      var index = -1,\n          length = array.length,\n          lastIndex = length - 1;\n\n      size = size === undefined ? length : size;\n      while (++index < size) {\n        var rand = baseRandom(index, lastIndex),\n            value = array[rand];\n\n        array[rand] = array[index];\n        array[index] = value;\n      }\n      array.length = size;\n      return array;\n    }\n\n    /**\n     * Converts `string` to a property path array.\n     *\n     * @private\n     * @param {string} string The string to convert.\n     * @returns {Array} Returns the property path array.\n     */\n    var stringToPath = memoizeCapped(function(string) {\n      var result = [];\n      if (string.charCodeAt(0) === 46 /* . */) {\n        result.push('');\n      }\n      string.replace(rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n      });\n      return result;\n    });\n\n    /**\n     * Converts `value` to a string key if it's not a string or symbol.\n     *\n     * @private\n     * @param {*} value The value to inspect.\n     * @returns {string|symbol} Returns the key.\n     */\n    function toKey(value) {\n      if (typeof value == 'string' || isSymbol(value)) {\n        return value;\n      }\n      var result = (value + '');\n      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n    }\n\n    /**\n     * Converts `func` to its source code.\n     *\n     * @private\n     * @param {Function} func The function to convert.\n     * @returns {string} Returns the source code.\n     */\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e) {}\n        try {\n          return (func + '');\n        } catch (e) {}\n      }\n      return '';\n    }\n\n    /**\n     * Updates wrapper `details` based on `bitmask` flags.\n     *\n     * @private\n     * @returns {Array} details The details to modify.\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n     * @returns {Array} Returns `details`.\n     */\n    function updateWrapDetails(details, bitmask) {\n      arrayEach(wrapFlags, function(pair) {\n        var value = '_.' + pair[0];\n        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n          details.push(value);\n        }\n      });\n      return details.sort();\n    }\n\n    /**\n     * Creates a clone of `wrapper`.\n     *\n     * @private\n     * @param {Object} wrapper The wrapper to clone.\n     * @returns {Object} Returns the cloned wrapper.\n     */\n    function wrapperClone(wrapper) {\n      if (wrapper instanceof LazyWrapper) {\n        return wrapper.clone();\n      }\n      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n      result.__actions__ = copyArray(wrapper.__actions__);\n      result.__index__  = wrapper.__index__;\n      result.__values__ = wrapper.__values__;\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an array of elements split into groups the length of `size`.\n     * If `array` can't be split evenly, the final chunk will be the remaining\n     * elements.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to process.\n     * @param {number} [size=1] The length of each chunk\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the new array of chunks.\n     * @example\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 2);\n     * // => [['a', 'b'], ['c', 'd']]\n     *\n     * _.chunk(['a', 'b', 'c', 'd'], 3);\n     * // => [['a', 'b', 'c'], ['d']]\n     */\n    function chunk(array, size, guard) {\n      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n        size = 1;\n      } else {\n        size = nativeMax(toInteger(size), 0);\n      }\n      var length = array == null ? 0 : array.length;\n      if (!length || size < 1) {\n        return [];\n      }\n      var index = 0,\n          resIndex = 0,\n          result = Array(nativeCeil(length / size));\n\n      while (index < length) {\n        result[resIndex++] = baseSlice(array, index, (index += size));\n      }\n      return result;\n    }\n\n    /**\n     * Creates an array with all falsey values removed. The values `false`, `null`,\n     * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to compact.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.compact([0, 1, false, 2, '', 3]);\n     * // => [1, 2, 3]\n     */\n    function compact(array) {\n      var index = -1,\n          length = array == null ? 0 : array.length,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a new array concatenating `array` with any additional arrays\n     * and/or values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to concatenate.\n     * @param {...*} [values] The values to concatenate.\n     * @returns {Array} Returns the new concatenated array.\n     * @example\n     *\n     * var array = [1];\n     * var other = _.concat(array, 2, [3], [[4]]);\n     *\n     * console.log(other);\n     * // => [1, 2, 3, [4]]\n     *\n     * console.log(array);\n     * // => [1]\n     */\n    function concat() {\n      var length = arguments.length;\n      if (!length) {\n        return [];\n      }\n      var args = Array(length - 1),\n          array = arguments[0],\n          index = length;\n\n      while (index--) {\n        args[index - 1] = arguments[index];\n      }\n      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));\n    }\n\n    /**\n     * Creates an array of `array` values not included in the other given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * **Note:** Unlike `_.pullAll`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.without, _.xor\n     * @example\n     *\n     * _.difference([2, 1], [2, 3]);\n     * // => [1]\n     */\n    var difference = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `iteratee` which\n     * is invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var differenceBy = baseRest(function(array, values) {\n      var iteratee = last(values);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.difference` except that it accepts `comparator`\n     * which is invoked to compare elements of `array` to `values`. The order and\n     * references of result values are determined by the first array. The comparator\n     * is invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...Array} [values] The values to exclude.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     *\n     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }]\n     */\n    var differenceWith = baseRest(function(array, values) {\n      var comparator = last(values);\n      if (isArrayLikeObject(comparator)) {\n        comparator = undefined;\n      }\n      return isArrayLikeObject(array)\n        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.drop([1, 2, 3]);\n     * // => [2, 3]\n     *\n     * _.drop([1, 2, 3], 2);\n     * // => [3]\n     *\n     * _.drop([1, 2, 3], 5);\n     * // => []\n     *\n     * _.drop([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function drop(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements dropped from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to drop.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.dropRight([1, 2, 3]);\n     * // => [1, 2]\n     *\n     * _.dropRight([1, 2, 3], 2);\n     * // => [1]\n     *\n     * _.dropRight([1, 2, 3], 5);\n     * // => []\n     *\n     * _.dropRight([1, 2, 3], 0);\n     * // => [1, 2, 3]\n     */\n    function dropRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the end.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.dropRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropRightWhile(users, ['active', false]);\n     * // => objects for ['barney']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropRightWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` excluding elements dropped from the beginning.\n     * Elements are dropped until `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.dropWhile(users, function(o) { return !o.active; });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.dropWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.dropWhile(users, ['active', false]);\n     * // => objects for ['pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.dropWhile(users, 'active');\n     * // => objects for ['barney', 'fred', 'pebbles']\n     */\n    function dropWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), true)\n        : [];\n    }\n\n    /**\n     * Fills elements of `array` with `value` from `start` up to, but not\n     * including, `end`.\n     *\n     * **Note:** This method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Array\n     * @param {Array} array The array to fill.\n     * @param {*} value The value to fill `array` with.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.fill(array, 'a');\n     * console.log(array);\n     * // => ['a', 'a', 'a']\n     *\n     * _.fill(Array(3), 2);\n     * // => [2, 2, 2]\n     *\n     * _.fill([4, 6, 8, 10], '*', 1, 3);\n     * // => [4, '*', '*', 10]\n     */\n    function fill(array, value, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n        start = 0;\n        end = length;\n      }\n      return baseFill(array, value, start, end);\n    }\n\n    /**\n     * This method is like `_.find` except that it returns the index of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.findIndex(users, function(o) { return o.user == 'barney'; });\n     * // => 0\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findIndex(users, { 'user': 'fred', 'active': false });\n     * // => 1\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findIndex(users, ['active', false]);\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findIndex(users, 'active');\n     * // => 2\n     */\n    function findIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index);\n    }\n\n    /**\n     * This method is like `_.findIndex` except that it iterates over elements\n     * of `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the found element, else `-1`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n     * // => 2\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n     * // => 0\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastIndex(users, ['active', false]);\n     * // => 2\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastIndex(users, 'active');\n     * // => 0\n     */\n    function findLastIndex(array, predicate, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length - 1;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = fromIndex < 0\n          ? nativeMax(length + index, 0)\n          : nativeMin(index, length - 1);\n      }\n      return baseFindIndex(array, getIteratee(predicate, 3), index, true);\n    }\n\n    /**\n     * Flattens `array` a single level deep.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flatten([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, [3, [4]], 5]\n     */\n    function flatten(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, 1) : [];\n    }\n\n    /**\n     * Recursively flattens `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * _.flattenDeep([1, [2, [3, [4]], 5]]);\n     * // => [1, 2, 3, 4, 5]\n     */\n    function flattenDeep(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseFlatten(array, INFINITY) : [];\n    }\n\n    /**\n     * Recursively flatten `array` up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Array\n     * @param {Array} array The array to flatten.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * var array = [1, [2, [3, [4]], 5]];\n     *\n     * _.flattenDepth(array, 1);\n     * // => [1, 2, [3, [4]], 5]\n     *\n     * _.flattenDepth(array, 2);\n     * // => [1, 2, 3, [4], 5]\n     */\n    function flattenDepth(array, depth) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(array, depth);\n    }\n\n    /**\n     * The inverse of `_.toPairs`; this method returns an object composed\n     * from key-value `pairs`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} pairs The key-value pairs.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.fromPairs([['a', 1], ['b', 2]]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function fromPairs(pairs) {\n      var index = -1,\n          length = pairs == null ? 0 : pairs.length,\n          result = {};\n\n      while (++index < length) {\n        var pair = pairs[index];\n        result[pair[0]] = pair[1];\n      }\n      return result;\n    }\n\n    /**\n     * Gets the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias first\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the first element of `array`.\n     * @example\n     *\n     * _.head([1, 2, 3]);\n     * // => 1\n     *\n     * _.head([]);\n     * // => undefined\n     */\n    function head(array) {\n      return (array && array.length) ? array[0] : undefined;\n    }\n\n    /**\n     * Gets the index at which the first occurrence of `value` is found in `array`\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\n     * offset from the end of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.indexOf([1, 2, 1, 2], 2);\n     * // => 1\n     *\n     * // Search from the `fromIndex`.\n     * _.indexOf([1, 2, 1, 2], 2, 2);\n     * // => 3\n     */\n    function indexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = fromIndex == null ? 0 : toInteger(fromIndex);\n      if (index < 0) {\n        index = nativeMax(length + index, 0);\n      }\n      return baseIndexOf(array, value, index);\n    }\n\n    /**\n     * Gets all but the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.initial([1, 2, 3]);\n     * // => [1, 2]\n     */\n    function initial(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 0, -1) : [];\n    }\n\n    /**\n     * Creates an array of unique values that are included in all given arrays\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons. The order and references of result values are\n     * determined by the first array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersection([2, 1], [2, 3]);\n     * // => [2]\n     */\n    var intersection = baseRest(function(arrays) {\n      var mapped = arrayMap(arrays, castArrayLikeObject);\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped)\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `iteratee`\n     * which is invoked for each element of each `arrays` to generate the criterion\n     * by which they're compared. The order and references of result values are\n     * determined by the first array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [2.1]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }]\n     */\n    var intersectionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      if (iteratee === last(mapped)) {\n        iteratee = undefined;\n      } else {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, getIteratee(iteratee, 2))\n        : [];\n    });\n\n    /**\n     * This method is like `_.intersection` except that it accepts `comparator`\n     * which is invoked to compare elements of `arrays`. The order and references\n     * of result values are determined by the first array. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of intersecting values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.intersectionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }]\n     */\n    var intersectionWith = baseRest(function(arrays) {\n      var comparator = last(arrays),\n          mapped = arrayMap(arrays, castArrayLikeObject);\n\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      if (comparator) {\n        mapped.pop();\n      }\n      return (mapped.length && mapped[0] === arrays[0])\n        ? baseIntersection(mapped, undefined, comparator)\n        : [];\n    });\n\n    /**\n     * Converts all elements in `array` into a string separated by `separator`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to convert.\n     * @param {string} [separator=','] The element separator.\n     * @returns {string} Returns the joined string.\n     * @example\n     *\n     * _.join(['a', 'b', 'c'], '~');\n     * // => 'a~b~c'\n     */\n    function join(array, separator) {\n      return array == null ? '' : nativeJoin.call(array, separator);\n    }\n\n    /**\n     * Gets the last element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {*} Returns the last element of `array`.\n     * @example\n     *\n     * _.last([1, 2, 3]);\n     * // => 3\n     */\n    function last(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? array[length - 1] : undefined;\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it iterates over elements of\n     * `array` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=array.length-1] The index to search from.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.lastIndexOf([1, 2, 1, 2], 2);\n     * // => 3\n     *\n     * // Search from the `fromIndex`.\n     * _.lastIndexOf([1, 2, 1, 2], 2, 2);\n     * // => 1\n     */\n    function lastIndexOf(array, value, fromIndex) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return -1;\n      }\n      var index = length;\n      if (fromIndex !== undefined) {\n        index = toInteger(fromIndex);\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\n      }\n      return value === value\n        ? strictLastIndexOf(array, value, index)\n        : baseFindIndex(array, baseIsNaN, index, true);\n    }\n\n    /**\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\n     * element from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.11.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=0] The index of the element to return.\n     * @returns {*} Returns the nth element of `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     *\n     * _.nth(array, 1);\n     * // => 'b'\n     *\n     * _.nth(array, -2);\n     * // => 'c';\n     */\n    function nth(array, n) {\n      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;\n    }\n\n    /**\n     * Removes all given values from `array` using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`\n     * to remove elements from an array by predicate.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...*} [values] The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pull(array, 'a', 'c');\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    var pull = baseRest(pullAll);\n\n    /**\n     * This method is like `_.pull` except that it accepts an array of values to remove.\n     *\n     * **Note:** Unlike `_.difference`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];\n     *\n     * _.pullAll(array, ['a', 'c']);\n     * console.log(array);\n     * // => ['b', 'b']\n     */\n    function pullAll(array, values) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values)\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `iteratee` which is\n     * invoked for each element of `array` and `values` to generate the criterion\n     * by which they're compared. The iteratee is invoked with one argument: (value).\n     *\n     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n     *\n     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\n     * console.log(array);\n     * // => [{ 'x': 2 }]\n     */\n    function pullAllBy(array, values, iteratee) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, getIteratee(iteratee, 2))\n        : array;\n    }\n\n    /**\n     * This method is like `_.pullAll` except that it accepts `comparator` which\n     * is invoked to compare elements of `array` to `values`. The comparator is\n     * invoked with two arguments: (arrVal, othVal).\n     *\n     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Array} values The values to remove.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n     *\n     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\n     * console.log(array);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n     */\n    function pullAllWith(array, values, comparator) {\n      return (array && array.length && values && values.length)\n        ? basePullAll(array, values, undefined, comparator)\n        : array;\n    }\n\n    /**\n     * Removes elements from `array` corresponding to `indexes` and returns an\n     * array of removed elements.\n     *\n     * **Note:** Unlike `_.at`, this method mutates `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = ['a', 'b', 'c', 'd'];\n     * var pulled = _.pullAt(array, [1, 3]);\n     *\n     * console.log(array);\n     * // => ['a', 'c']\n     *\n     * console.log(pulled);\n     * // => ['b', 'd']\n     */\n    var pullAt = flatRest(function(array, indexes) {\n      var length = array == null ? 0 : array.length,\n          result = baseAt(array, indexes);\n\n      basePullAt(array, arrayMap(indexes, function(index) {\n        return isIndex(index, length) ? +index : index;\n      }).sort(compareAscending));\n\n      return result;\n    });\n\n    /**\n     * Removes all elements from `array` that `predicate` returns truthy for\n     * and returns an array of the removed elements. The predicate is invoked\n     * with three arguments: (value, index, array).\n     *\n     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n     * to pull elements from an array by value.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new array of removed elements.\n     * @example\n     *\n     * var array = [1, 2, 3, 4];\n     * var evens = _.remove(array, function(n) {\n     *   return n % 2 == 0;\n     * });\n     *\n     * console.log(array);\n     * // => [1, 3]\n     *\n     * console.log(evens);\n     * // => [2, 4]\n     */\n    function remove(array, predicate) {\n      var result = [];\n      if (!(array && array.length)) {\n        return result;\n      }\n      var index = -1,\n          indexes = [],\n          length = array.length;\n\n      predicate = getIteratee(predicate, 3);\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result.push(value);\n          indexes.push(index);\n        }\n      }\n      basePullAt(array, indexes);\n      return result;\n    }\n\n    /**\n     * Reverses `array` so that the first element becomes the last, the second\n     * element becomes the second to last, and so on.\n     *\n     * **Note:** This method mutates `array` and is based on\n     * [`Array#reverse`](https://mdn.io/Array/reverse).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to modify.\n     * @returns {Array} Returns `array`.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _.reverse(array);\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function reverse(array) {\n      return array == null ? array : nativeReverse.call(array);\n    }\n\n    /**\n     * Creates a slice of `array` from `start` up to, but not including, `end`.\n     *\n     * **Note:** This method is used instead of\n     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n     * returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to slice.\n     * @param {number} [start=0] The start position.\n     * @param {number} [end=array.length] The end position.\n     * @returns {Array} Returns the slice of `array`.\n     */\n    function slice(array, start, end) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n        start = 0;\n        end = length;\n      }\n      else {\n        start = start == null ? 0 : toInteger(start);\n        end = end === undefined ? length : toInteger(end);\n      }\n      return baseSlice(array, start, end);\n    }\n\n    /**\n     * Uses a binary search to determine the lowest index at which `value`\n     * should be inserted into `array` in order to maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedIndex([30, 50], 40);\n     * // => 1\n     */\n    function sortedIndex(array, value) {\n      return baseSortedIndex(array, value);\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 0\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 0\n     */\n    function sortedIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * This method is like `_.indexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 1\n     */\n    function sortedIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value);\n        if (index < length && eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.sortedIndex` except that it returns the highest\n     * index at which `value` should be inserted into `array` in order to\n     * maintain its sort order.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\n     * // => 4\n     */\n    function sortedLastIndex(array, value) {\n      return baseSortedIndex(array, value, true);\n    }\n\n    /**\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\n     * which is invoked for `value` and each element of `array` to compute their\n     * sort ranking. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The sorted array to inspect.\n     * @param {*} value The value to evaluate.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the index at which `value` should be inserted\n     *  into `array`.\n     * @example\n     *\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\n     *\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n     * // => 1\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n     * // => 1\n     */\n    function sortedLastIndexBy(array, value, iteratee) {\n      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);\n    }\n\n    /**\n     * This method is like `_.lastIndexOf` except that it performs a binary\n     * search on a sorted `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {*} value The value to search for.\n     * @returns {number} Returns the index of the matched value, else `-1`.\n     * @example\n     *\n     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n     * // => 3\n     */\n    function sortedLastIndexOf(array, value) {\n      var length = array == null ? 0 : array.length;\n      if (length) {\n        var index = baseSortedIndex(array, value, true) - 1;\n        if (eq(array[index], value)) {\n          return index;\n        }\n      }\n      return -1;\n    }\n\n    /**\n     * This method is like `_.uniq` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniq([1, 1, 2]);\n     * // => [1, 2]\n     */\n    function sortedUniq(array) {\n      return (array && array.length)\n        ? baseSortedUniq(array)\n        : [];\n    }\n\n    /**\n     * This method is like `_.uniqBy` except that it's designed and optimized\n     * for sorted arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n     * // => [1.1, 2.3]\n     */\n    function sortedUniqBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSortedUniq(array, getIteratee(iteratee, 2))\n        : [];\n    }\n\n    /**\n     * Gets all but the first element of `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.tail([1, 2, 3]);\n     * // => [2, 3]\n     */\n    function tail(array) {\n      var length = array == null ? 0 : array.length;\n      return length ? baseSlice(array, 1, length) : [];\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the beginning.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.take([1, 2, 3]);\n     * // => [1]\n     *\n     * _.take([1, 2, 3], 2);\n     * // => [1, 2]\n     *\n     * _.take([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.take([1, 2, 3], 0);\n     * // => []\n     */\n    function take(array, n, guard) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      return baseSlice(array, 0, n < 0 ? 0 : n);\n    }\n\n    /**\n     * Creates a slice of `array` with `n` elements taken from the end.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {number} [n=1] The number of elements to take.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * _.takeRight([1, 2, 3]);\n     * // => [3]\n     *\n     * _.takeRight([1, 2, 3], 2);\n     * // => [2, 3]\n     *\n     * _.takeRight([1, 2, 3], 5);\n     * // => [1, 2, 3]\n     *\n     * _.takeRight([1, 2, 3], 0);\n     * // => []\n     */\n    function takeRight(array, n, guard) {\n      var length = array == null ? 0 : array.length;\n      if (!length) {\n        return [];\n      }\n      n = (guard || n === undefined) ? 1 : toInteger(n);\n      n = length - n;\n      return baseSlice(array, n < 0 ? 0 : n, length);\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the end. Elements are\n     * taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': true },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': false }\n     * ];\n     *\n     * _.takeRightWhile(users, function(o) { return !o.active; });\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n     * // => objects for ['pebbles']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeRightWhile(users, ['active', false]);\n     * // => objects for ['fred', 'pebbles']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeRightWhile(users, 'active');\n     * // => []\n     */\n    function takeRightWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3), false, true)\n        : [];\n    }\n\n    /**\n     * Creates a slice of `array` with elements taken from the beginning. Elements\n     * are taken until `predicate` returns falsey. The predicate is invoked with\n     * three arguments: (value, index, array).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Array\n     * @param {Array} array The array to query.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the slice of `array`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'active': false },\n     *   { 'user': 'fred',    'active': false },\n     *   { 'user': 'pebbles', 'active': true }\n     * ];\n     *\n     * _.takeWhile(users, function(o) { return !o.active; });\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.takeWhile(users, { 'user': 'barney', 'active': false });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.takeWhile(users, ['active', false]);\n     * // => objects for ['barney', 'fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.takeWhile(users, 'active');\n     * // => []\n     */\n    function takeWhile(array, predicate) {\n      return (array && array.length)\n        ? baseWhile(array, getIteratee(predicate, 3))\n        : [];\n    }\n\n    /**\n     * Creates an array of unique values, in order, from all given arrays using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.union([2], [1, 2]);\n     * // => [2, 1]\n     */\n    var union = baseRest(function(arrays) {\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which uniqueness is computed. Result values are chosen from the first\n     * array in which the value occurs. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    var unionBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.union` except that it accepts `comparator` which\n     * is invoked to compare elements of `arrays`. Result values are chosen from\n     * the first array in which the value occurs. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of combined values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.unionWith(objects, others, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var unionWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);\n    });\n\n    /**\n     * Creates a duplicate-free version of an array, using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons, in which only the first occurrence of each element\n     * is kept. The order of result values is determined by the order they occur\n     * in the array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniq([2, 1, 2]);\n     * // => [2, 1]\n     */\n    function uniq(array) {\n      return (array && array.length) ? baseUniq(array) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * uniqueness is computed. The order of result values is determined by the\n     * order they occur in the array. The iteratee is invoked with one argument:\n     * (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n     * // => [2.1, 1.2]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 1 }, { 'x': 2 }]\n     */\n    function uniqBy(array, iteratee) {\n      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];\n    }\n\n    /**\n     * This method is like `_.uniq` except that it accepts `comparator` which\n     * is invoked to compare elements of `array`. The order of result values is\n     * determined by the order they occur in the array.The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new duplicate free array.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.uniqWith(objects, _.isEqual);\n     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n     */\n    function uniqWith(array, comparator) {\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts an array of grouped\n     * elements and creates an array regrouping the elements to their pre-zip\n     * configuration.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.2.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     *\n     * _.unzip(zipped);\n     * // => [['a', 'b'], [1, 2], [true, false]]\n     */\n    function unzip(array) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var length = 0;\n      array = arrayFilter(array, function(group) {\n        if (isArrayLikeObject(group)) {\n          length = nativeMax(group.length, length);\n          return true;\n        }\n      });\n      return baseTimes(length, function(index) {\n        return arrayMap(array, baseProperty(index));\n      });\n    }\n\n    /**\n     * This method is like `_.unzip` except that it accepts `iteratee` to specify\n     * how regrouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {Array} array The array of grouped elements to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  regrouped values.\n     * @returns {Array} Returns the new array of regrouped elements.\n     * @example\n     *\n     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);\n     * // => [[1, 10, 100], [2, 20, 200]]\n     *\n     * _.unzipWith(zipped, _.add);\n     * // => [3, 30, 300]\n     */\n    function unzipWith(array, iteratee) {\n      if (!(array && array.length)) {\n        return [];\n      }\n      var result = unzip(array);\n      if (iteratee == null) {\n        return result;\n      }\n      return arrayMap(result, function(group) {\n        return apply(iteratee, undefined, group);\n      });\n    }\n\n    /**\n     * Creates an array excluding all given values using\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * for equality comparisons.\n     *\n     * **Note:** Unlike `_.pull`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {Array} array The array to inspect.\n     * @param {...*} [values] The values to exclude.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.xor\n     * @example\n     *\n     * _.without([2, 1, 2, 3], 1, 2);\n     * // => [3]\n     */\n    var without = baseRest(function(array, values) {\n      return isArrayLikeObject(array)\n        ? baseDifference(array, values)\n        : [];\n    });\n\n    /**\n     * Creates an array of unique values that is the\n     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n     * of the given arrays. The order of result values is determined by the order\n     * they occur in the arrays.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @returns {Array} Returns the new array of filtered values.\n     * @see _.difference, _.without\n     * @example\n     *\n     * _.xor([2, 1], [2, 3]);\n     * // => [1, 3]\n     */\n    var xor = baseRest(function(arrays) {\n      return baseXor(arrayFilter(arrays, isArrayLikeObject));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `iteratee` which is\n     * invoked for each element of each `arrays` to generate the criterion by\n     * which by which they're compared. The order of result values is determined\n     * by the order they occur in the arrays. The iteratee is invoked with one\n     * argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n     * // => [1.2, 3.4]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n     * // => [{ 'x': 2 }]\n     */\n    var xorBy = baseRest(function(arrays) {\n      var iteratee = last(arrays);\n      if (isArrayLikeObject(iteratee)) {\n        iteratee = undefined;\n      }\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));\n    });\n\n    /**\n     * This method is like `_.xor` except that it accepts `comparator` which is\n     * invoked to compare elements of `arrays`. The order of result values is\n     * determined by the order they occur in the arrays. The comparator is invoked\n     * with two arguments: (arrVal, othVal).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to inspect.\n     * @param {Function} [comparator] The comparator invoked per element.\n     * @returns {Array} Returns the new array of filtered values.\n     * @example\n     *\n     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n     *\n     * _.xorWith(objects, others, _.isEqual);\n     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n     */\n    var xorWith = baseRest(function(arrays) {\n      var comparator = last(arrays);\n      comparator = typeof comparator == 'function' ? comparator : undefined;\n      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);\n    });\n\n    /**\n     * Creates an array of grouped elements, the first of which contains the\n     * first elements of the given arrays, the second of which contains the\n     * second elements of the given arrays, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zip(['a', 'b'], [1, 2], [true, false]);\n     * // => [['a', 1, true], ['b', 2, false]]\n     */\n    var zip = baseRest(unzip);\n\n    /**\n     * This method is like `_.fromPairs` except that it accepts two arrays,\n     * one of property identifiers and one of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.4.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObject(['a', 'b'], [1, 2]);\n     * // => { 'a': 1, 'b': 2 }\n     */\n    function zipObject(props, values) {\n      return baseZipObject(props || [], values || [], assignValue);\n    }\n\n    /**\n     * This method is like `_.zipObject` except that it supports property paths.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Array\n     * @param {Array} [props=[]] The property identifiers.\n     * @param {Array} [values=[]] The property values.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n     */\n    function zipObjectDeep(props, values) {\n      return baseZipObject(props || [], values || [], baseSet);\n    }\n\n    /**\n     * This method is like `_.zip` except that it accepts `iteratee` to specify\n     * how grouped values should be combined. The iteratee is invoked with the\n     * elements of each group: (...group).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Array\n     * @param {...Array} [arrays] The arrays to process.\n     * @param {Function} [iteratee=_.identity] The function to combine\n     *  grouped values.\n     * @returns {Array} Returns the new array of grouped elements.\n     * @example\n     *\n     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n     *   return a + b + c;\n     * });\n     * // => [111, 222]\n     */\n    var zipWith = baseRest(function(arrays) {\n      var length = arrays.length,\n          iteratee = length > 1 ? arrays[length - 1] : undefined;\n\n      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;\n      return unzipWith(arrays, iteratee);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates a `lodash` wrapper instance that wraps `value` with explicit method\n     * chain sequences enabled. The result of such sequences must be unwrapped\n     * with `_#value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Seq\n     * @param {*} value The value to wrap.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36 },\n     *   { 'user': 'fred',    'age': 40 },\n     *   { 'user': 'pebbles', 'age': 1 }\n     * ];\n     *\n     * var youngest = _\n     *   .chain(users)\n     *   .sortBy('age')\n     *   .map(function(o) {\n     *     return o.user + ' is ' + o.age;\n     *   })\n     *   .head()\n     *   .value();\n     * // => 'pebbles is 1'\n     */\n    function chain(value) {\n      var result = lodash(value);\n      result.__chain__ = true;\n      return result;\n    }\n\n    /**\n     * This method invokes `interceptor` and returns `value`. The interceptor\n     * is invoked with one argument; (value). The purpose of this method is to\n     * \"tap into\" a method chain sequence in order to modify intermediate results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * _([1, 2, 3])\n     *  .tap(function(array) {\n     *    // Mutate input array.\n     *    array.pop();\n     *  })\n     *  .reverse()\n     *  .value();\n     * // => [2, 1]\n     */\n    function tap(value, interceptor) {\n      interceptor(value);\n      return value;\n    }\n\n    /**\n     * This method is like `_.tap` except that it returns the result of `interceptor`.\n     * The purpose of this method is to \"pass thru\" values replacing intermediate\n     * results in a method chain sequence.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Seq\n     * @param {*} value The value to provide to `interceptor`.\n     * @param {Function} interceptor The function to invoke.\n     * @returns {*} Returns the result of `interceptor`.\n     * @example\n     *\n     * _('  abc  ')\n     *  .chain()\n     *  .trim()\n     *  .thru(function(value) {\n     *    return [value];\n     *  })\n     *  .value();\n     * // => ['abc']\n     */\n    function thru(value, interceptor) {\n      return interceptor(value);\n    }\n\n    /**\n     * This method is the wrapper version of `_.at`.\n     *\n     * @name at\n     * @memberOf _\n     * @since 1.0.0\n     * @category Seq\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _(object).at(['a[0].b.c', 'a[1]']).value();\n     * // => [3, 4]\n     */\n    var wrapperAt = flatRest(function(paths) {\n      var length = paths.length,\n          start = length ? paths[0] : 0,\n          value = this.__wrapped__,\n          interceptor = function(object) { return baseAt(object, paths); };\n\n      if (length > 1 || this.__actions__.length ||\n          !(value instanceof LazyWrapper) || !isIndex(start)) {\n        return this.thru(interceptor);\n      }\n      value = value.slice(start, +start + (length ? 1 : 0));\n      value.__actions__.push({\n        'func': thru,\n        'args': [interceptor],\n        'thisArg': undefined\n      });\n      return new LodashWrapper(value, this.__chain__).thru(function(array) {\n        if (length && !array.length) {\n          array.push(undefined);\n        }\n        return array;\n      });\n    });\n\n    /**\n     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.\n     *\n     * @name chain\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 }\n     * ];\n     *\n     * // A sequence without explicit chaining.\n     * _(users).head();\n     * // => { 'user': 'barney', 'age': 36 }\n     *\n     * // A sequence with explicit chaining.\n     * _(users)\n     *   .chain()\n     *   .head()\n     *   .pick('user')\n     *   .value();\n     * // => { 'user': 'barney' }\n     */\n    function wrapperChain() {\n      return chain(this);\n    }\n\n    /**\n     * Executes the chain sequence and returns the wrapped result.\n     *\n     * @name commit\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2];\n     * var wrapped = _(array).push(3);\n     *\n     * console.log(array);\n     * // => [1, 2]\n     *\n     * wrapped = wrapped.commit();\n     * console.log(array);\n     * // => [1, 2, 3]\n     *\n     * wrapped.last();\n     * // => 3\n     *\n     * console.log(array);\n     * // => [1, 2, 3]\n     */\n    function wrapperCommit() {\n      return new LodashWrapper(this.value(), this.__chain__);\n    }\n\n    /**\n     * Gets the next value on a wrapped object following the\n     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).\n     *\n     * @name next\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the next iterator value.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 1 }\n     *\n     * wrapped.next();\n     * // => { 'done': false, 'value': 2 }\n     *\n     * wrapped.next();\n     * // => { 'done': true, 'value': undefined }\n     */\n    function wrapperNext() {\n      if (this.__values__ === undefined) {\n        this.__values__ = toArray(this.value());\n      }\n      var done = this.__index__ >= this.__values__.length,\n          value = done ? undefined : this.__values__[this.__index__++];\n\n      return { 'done': done, 'value': value };\n    }\n\n    /**\n     * Enables the wrapper to be iterable.\n     *\n     * @name Symbol.iterator\n     * @memberOf _\n     * @since 4.0.0\n     * @category Seq\n     * @returns {Object} Returns the wrapper object.\n     * @example\n     *\n     * var wrapped = _([1, 2]);\n     *\n     * wrapped[Symbol.iterator]() === wrapped;\n     * // => true\n     *\n     * Array.from(wrapped);\n     * // => [1, 2]\n     */\n    function wrapperToIterator() {\n      return this;\n    }\n\n    /**\n     * Creates a clone of the chain sequence planting `value` as the wrapped value.\n     *\n     * @name plant\n     * @memberOf _\n     * @since 3.2.0\n     * @category Seq\n     * @param {*} value The value to plant.\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var wrapped = _([1, 2]).map(square);\n     * var other = wrapped.plant([3, 4]);\n     *\n     * other.value();\n     * // => [9, 16]\n     *\n     * wrapped.value();\n     * // => [1, 4]\n     */\n    function wrapperPlant(value) {\n      var result,\n          parent = this;\n\n      while (parent instanceof baseLodash) {\n        var clone = wrapperClone(parent);\n        clone.__index__ = 0;\n        clone.__values__ = undefined;\n        if (result) {\n          previous.__wrapped__ = clone;\n        } else {\n          result = clone;\n        }\n        var previous = clone;\n        parent = parent.__wrapped__;\n      }\n      previous.__wrapped__ = value;\n      return result;\n    }\n\n    /**\n     * This method is the wrapper version of `_.reverse`.\n     *\n     * **Note:** This method mutates the wrapped array.\n     *\n     * @name reverse\n     * @memberOf _\n     * @since 0.1.0\n     * @category Seq\n     * @returns {Object} Returns the new `lodash` wrapper instance.\n     * @example\n     *\n     * var array = [1, 2, 3];\n     *\n     * _(array).reverse().value()\n     * // => [3, 2, 1]\n     *\n     * console.log(array);\n     * // => [3, 2, 1]\n     */\n    function wrapperReverse() {\n      var value = this.__wrapped__;\n      if (value instanceof LazyWrapper) {\n        var wrapped = value;\n        if (this.__actions__.length) {\n          wrapped = new LazyWrapper(this);\n        }\n        wrapped = wrapped.reverse();\n        wrapped.__actions__.push({\n          'func': thru,\n          'args': [reverse],\n          'thisArg': undefined\n        });\n        return new LodashWrapper(wrapped, this.__chain__);\n      }\n      return this.thru(reverse);\n    }\n\n    /**\n     * Executes the chain sequence to resolve the unwrapped value.\n     *\n     * @name value\n     * @memberOf _\n     * @since 0.1.0\n     * @alias toJSON, valueOf\n     * @category Seq\n     * @returns {*} Returns the resolved unwrapped value.\n     * @example\n     *\n     * _([1, 2, 3]).value();\n     * // => [1, 2, 3]\n     */\n    function wrapperValue() {\n      return baseWrapperValue(this.__wrapped__, this.__actions__);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the number of times the key was returned by `iteratee`. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.countBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': 1, '6': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.countBy(['one', 'two', 'three'], 'length');\n     * // => { '3': 2, '5': 1 }\n     */\n    var countBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        ++result[key];\n      } else {\n        baseAssignValue(result, key, 1);\n      }\n    });\n\n    /**\n     * Checks if `predicate` returns truthy for **all** elements of `collection`.\n     * Iteration is stopped once `predicate` returns falsey. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * **Note:** This method returns `true` for\n     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n     * elements of empty collections.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if all elements pass the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.every([true, 1, null, 'yes'], Boolean);\n     * // => false\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.every(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.every(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.every(users, 'active');\n     * // => false\n     */\n    function every(collection, predicate, guard) {\n      var func = isArray(collection) ? arrayEvery : baseEvery;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning an array of all elements\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * **Note:** Unlike `_.remove`, this method returns a new array.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.reject\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * _.filter(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, { 'age': 36, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.filter(users, 'active');\n     * // => objects for ['barney']\n     */\n    function filter(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Iterates over elements of `collection`, returning the first element\n     * `predicate` returns truthy for. The predicate is invoked with three\n     * arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': true },\n     *   { 'user': 'fred',    'age': 40, 'active': false },\n     *   { 'user': 'pebbles', 'age': 1,  'active': true }\n     * ];\n     *\n     * _.find(users, function(o) { return o.age < 40; });\n     * // => object for 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.find(users, { 'age': 1, 'active': true });\n     * // => object for 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.find(users, ['active', false]);\n     * // => object for 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param {number} [fromIndex=collection.length-1] The index to search from.\n     * @returns {*} Returns the matched element, else `undefined`.\n     * @example\n     *\n     * _.findLast([1, 2, 3, 4], function(n) {\n     *   return n % 2 == 1;\n     * });\n     * // => 3\n     */\n    var findLast = createFind(findLastIndex);\n\n    /**\n     * Creates a flattened array of values by running each element in `collection`\n     * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n     * with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [n, n];\n     * }\n     *\n     * _.flatMap([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMap(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), 1);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDeep([1, 2], duplicate);\n     * // => [1, 1, 2, 2]\n     */\n    function flatMapDeep(collection, iteratee) {\n      return baseFlatten(map(collection, iteratee), INFINITY);\n    }\n\n    /**\n     * This method is like `_.flatMap` except that it recursively flattens the\n     * mapped results up to `depth` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {number} [depth=1] The maximum recursion depth.\n     * @returns {Array} Returns the new flattened array.\n     * @example\n     *\n     * function duplicate(n) {\n     *   return [[[n, n]]];\n     * }\n     *\n     * _.flatMapDepth([1, 2], duplicate, 2);\n     * // => [[1, 1], [2, 2]]\n     */\n    function flatMapDepth(collection, iteratee, depth) {\n      depth = depth === undefined ? 1 : toInteger(depth);\n      return baseFlatten(map(collection, iteratee), depth);\n    }\n\n    /**\n     * Iterates over elements of `collection` and invokes `iteratee` for each element.\n     * The iteratee is invoked with three arguments: (value, index|key, collection).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n     * property are iterated like arrays. To avoid this behavior use `_.forIn`\n     * or `_.forOwn` for object iteration.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @alias each\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEachRight\n     * @example\n     *\n     * _.forEach([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `1` then `2`.\n     *\n     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forEach(collection, iteratee) {\n      var func = isArray(collection) ? arrayEach : baseEach;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forEach` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @alias eachRight\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array|Object} Returns `collection`.\n     * @see _.forEach\n     * @example\n     *\n     * _.forEachRight([1, 2], function(value) {\n     *   console.log(value);\n     * });\n     * // => Logs `2` then `1`.\n     */\n    function forEachRight(collection, iteratee) {\n      var func = isArray(collection) ? arrayEachRight : baseEachRight;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The order of grouped values\n     * is determined by the order they occur in `collection`. The corresponding\n     * value of each key is an array of elements responsible for generating the\n     * key. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n     * // => { '4': [4.2], '6': [6.1, 6.3] }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.groupBy(['one', 'two', 'three'], 'length');\n     * // => { '3': ['one', 'two'], '5': ['three'] }\n     */\n    var groupBy = createAggregator(function(result, value, key) {\n      if (hasOwnProperty.call(result, key)) {\n        result[key].push(value);\n      } else {\n        baseAssignValue(result, key, [value]);\n      }\n    });\n\n    /**\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\n     * checked for a substring of `value`, otherwise\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\n     * the offset from the end of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @param {*} value The value to search for.\n     * @param {number} [fromIndex=0] The index to search from.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\n     * @example\n     *\n     * _.includes([1, 2, 3], 1);\n     * // => true\n     *\n     * _.includes([1, 2, 3], 1, 2);\n     * // => false\n     *\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\n     * // => true\n     *\n     * _.includes('abcd', 'bc');\n     * // => true\n     */\n    function includes(collection, value, fromIndex, guard) {\n      collection = isArrayLike(collection) ? collection : values(collection);\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n      var length = collection.length;\n      if (fromIndex < 0) {\n        fromIndex = nativeMax(length + fromIndex, 0);\n      }\n      return isString(collection)\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n    }\n\n    /**\n     * Invokes the method at `path` of each element in `collection`, returning\n     * an array of the results of each invoked method. Any additional arguments\n     * are provided to each invoked method. If `path` is a function, it's invoked\n     * for, and `this` bound to, each element in `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array|Function|string} path The path of the method to invoke or\n     *  the function invoked per iteration.\n     * @param {...*} [args] The arguments to invoke each method with.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n     * // => [[1, 5, 7], [1, 2, 3]]\n     *\n     * _.invokeMap([123, 456], String.prototype.split, '');\n     * // => [['1', '2', '3'], ['4', '5', '6']]\n     */\n    var invokeMap = baseRest(function(collection, path, args) {\n      var index = -1,\n          isFunc = typeof path == 'function',\n          result = isArrayLike(collection) ? Array(collection.length) : [];\n\n      baseEach(collection, function(value) {\n        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);\n      });\n      return result;\n    });\n\n    /**\n     * Creates an object composed of keys generated from the results of running\n     * each element of `collection` thru `iteratee`. The corresponding value of\n     * each key is the last element responsible for generating the key. The\n     * iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n     * @returns {Object} Returns the composed aggregate object.\n     * @example\n     *\n     * var array = [\n     *   { 'dir': 'left', 'code': 97 },\n     *   { 'dir': 'right', 'code': 100 }\n     * ];\n     *\n     * _.keyBy(array, function(o) {\n     *   return String.fromCharCode(o.code);\n     * });\n     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n     *\n     * _.keyBy(array, 'dir');\n     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n     */\n    var keyBy = createAggregator(function(result, value, key) {\n      baseAssignValue(result, key, value);\n    });\n\n    /**\n     * Creates an array of values by running each element in `collection` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n     *\n     * The guarded methods are:\n     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new mapped array.\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * _.map([4, 8], square);\n     * // => [16, 64]\n     *\n     * _.map({ 'a': 4, 'b': 8 }, square);\n     * // => [16, 64] (iteration order is not guaranteed)\n     *\n     * var users = [\n     *   { 'user': 'barney' },\n     *   { 'user': 'fred' }\n     * ];\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, 'user');\n     * // => ['barney', 'fred']\n     */\n    function map(collection, iteratee) {\n      var func = isArray(collection) ? arrayMap : baseMap;\n      return func(collection, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.sortBy` except that it allows specifying the sort\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\n     * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n     * descending or \"asc\" for ascending sort order of corresponding values.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @param {string[]} [orders] The sort orders of `iteratees`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 34 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 36 }\n     * ];\n     *\n     * // Sort by `user` in ascending order and by `age` in descending order.\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     */\n    function orderBy(collection, iteratees, orders, guard) {\n      if (collection == null) {\n        return [];\n      }\n      if (!isArray(iteratees)) {\n        iteratees = iteratees == null ? [] : [iteratees];\n      }\n      orders = guard ? undefined : orders;\n      if (!isArray(orders)) {\n        orders = orders == null ? [] : [orders];\n      }\n      return baseOrderBy(collection, iteratees, orders);\n    }\n\n    /**\n     * Creates an array of elements split into two groups, the first of which\n     * contains elements `predicate` returns truthy for, the second of which\n     * contains elements `predicate` returns falsey for. The predicate is\n     * invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of grouped elements.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney',  'age': 36, 'active': false },\n     *   { 'user': 'fred',    'age': 40, 'active': true },\n     *   { 'user': 'pebbles', 'age': 1,  'active': false }\n     * ];\n     *\n     * _.partition(users, function(o) { return o.active; });\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.partition(users, { 'age': 1, 'active': false });\n     * // => objects for [['pebbles'], ['barney', 'fred']]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.partition(users, ['active', false]);\n     * // => objects for [['barney', 'pebbles'], ['fred']]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.partition(users, 'active');\n     * // => objects for [['fred'], ['barney', 'pebbles']]\n     */\n    var partition = createAggregator(function(result, value, key) {\n      result[key ? 0 : 1].push(value);\n    }, function() { return [[], []]; });\n\n    /**\n     * Reduces `collection` to a value which is the accumulated result of running\n     * each element in `collection` thru `iteratee`, where each successive\n     * invocation is supplied the return value of the previous. If `accumulator`\n     * is not given, the first element of `collection` is used as the initial\n     * value. The iteratee is invoked with four arguments:\n     * (accumulator, value, index|key, collection).\n     *\n     * Many lodash methods are guarded to work as iteratees for methods like\n     * `_.reduce`, `_.reduceRight`, and `_.transform`.\n     *\n     * The guarded methods are:\n     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n     * and `sortBy`\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduceRight\n     * @example\n     *\n     * _.reduce([1, 2], function(sum, n) {\n     *   return sum + n;\n     * }, 0);\n     * // => 3\n     *\n     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     *   return result;\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n     */\n    function reduce(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduce : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n    }\n\n    /**\n     * This method is like `_.reduce` except that it iterates over elements of\n     * `collection` from right to left.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The initial value.\n     * @returns {*} Returns the accumulated value.\n     * @see _.reduce\n     * @example\n     *\n     * var array = [[0, 1], [2, 3], [4, 5]];\n     *\n     * _.reduceRight(array, function(flattened, other) {\n     *   return flattened.concat(other);\n     * }, []);\n     * // => [4, 5, 2, 3, 0, 1]\n     */\n    function reduceRight(collection, iteratee, accumulator) {\n      var func = isArray(collection) ? arrayReduceRight : baseReduce,\n          initAccum = arguments.length < 3;\n\n      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);\n    }\n\n    /**\n     * The opposite of `_.filter`; this method returns the elements of `collection`\n     * that `predicate` does **not** return truthy for.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the new filtered array.\n     * @see _.filter\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': false },\n     *   { 'user': 'fred',   'age': 40, 'active': true }\n     * ];\n     *\n     * _.reject(users, function(o) { return !o.active; });\n     * // => objects for ['fred']\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.reject(users, { 'age': 40, 'active': true });\n     * // => objects for ['barney']\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.reject(users, ['active', false]);\n     * // => objects for ['fred']\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.reject(users, 'active');\n     * // => objects for ['barney']\n     */\n    function reject(collection, predicate) {\n      var func = isArray(collection) ? arrayFilter : baseFilter;\n      return func(collection, negate(getIteratee(predicate, 3)));\n    }\n\n    /**\n     * Gets a random element from `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @returns {*} Returns the random element.\n     * @example\n     *\n     * _.sample([1, 2, 3, 4]);\n     * // => 2\n     */\n    function sample(collection) {\n      var func = isArray(collection) ? arraySample : baseSample;\n      return func(collection);\n    }\n\n    /**\n     * Gets `n` random elements at unique keys from `collection` up to the\n     * size of `collection`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to sample.\n     * @param {number} [n=1] The number of elements to sample.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the random elements.\n     * @example\n     *\n     * _.sampleSize([1, 2, 3], 2);\n     * // => [3, 1]\n     *\n     * _.sampleSize([1, 2, 3], 4);\n     * // => [2, 3, 1]\n     */\n    function sampleSize(collection, n, guard) {\n      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      var func = isArray(collection) ? arraySampleSize : baseSampleSize;\n      return func(collection, n);\n    }\n\n    /**\n     * Creates an array of shuffled values, using a version of the\n     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to shuffle.\n     * @returns {Array} Returns the new shuffled array.\n     * @example\n     *\n     * _.shuffle([1, 2, 3, 4]);\n     * // => [4, 1, 3, 2]\n     */\n    function shuffle(collection) {\n      var func = isArray(collection) ? arrayShuffle : baseShuffle;\n      return func(collection);\n    }\n\n    /**\n     * Gets the size of `collection` by returning its length for array-like\n     * values or the number of own enumerable string keyed properties for objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object|string} collection The collection to inspect.\n     * @returns {number} Returns the collection size.\n     * @example\n     *\n     * _.size([1, 2, 3]);\n     * // => 3\n     *\n     * _.size({ 'a': 1, 'b': 2 });\n     * // => 2\n     *\n     * _.size('pebbles');\n     * // => 7\n     */\n    function size(collection) {\n      if (collection == null) {\n        return 0;\n      }\n      if (isArrayLike(collection)) {\n        return isString(collection) ? stringSize(collection) : collection.length;\n      }\n      var tag = getTag(collection);\n      if (tag == mapTag || tag == setTag) {\n        return collection.size;\n      }\n      return baseKeys(collection).length;\n    }\n\n    /**\n     * Checks if `predicate` returns truthy for **any** element of `collection`.\n     * Iteration is stopped once `predicate` returns truthy. The predicate is\n     * invoked with three arguments: (value, index|key, collection).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {boolean} Returns `true` if any element passes the predicate check,\n     *  else `false`.\n     * @example\n     *\n     * _.some([null, 0, 'yes', false], Boolean);\n     * // => true\n     *\n     * var users = [\n     *   { 'user': 'barney', 'active': true },\n     *   { 'user': 'fred',   'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.some(users, { 'user': 'barney', 'active': false });\n     * // => false\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.some(users, ['active', false]);\n     * // => true\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.some(users, 'active');\n     * // => true\n     */\n    function some(collection, predicate, guard) {\n      var func = isArray(collection) ? arraySome : baseSome;\n      if (guard && isIterateeCall(collection, predicate, guard)) {\n        predicate = undefined;\n      }\n      return func(collection, getIteratee(predicate, 3));\n    }\n\n    /**\n     * Creates an array of elements, sorted in ascending order by the results of\n     * running each element in a collection thru each iteratee. This method\n     * performs a stable sort, that is, it preserves the original sort order of\n     * equal elements. The iteratees are invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Collection\n     * @param {Array|Object} collection The collection to iterate over.\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to sort by.\n     * @returns {Array} Returns the new sorted array.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'fred',   'age': 48 },\n     *   { 'user': 'barney', 'age': 36 },\n     *   { 'user': 'fred',   'age': 40 },\n     *   { 'user': 'barney', 'age': 34 }\n     * ];\n     *\n     * _.sortBy(users, [function(o) { return o.user; }]);\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n     *\n     * _.sortBy(users, ['user', 'age']);\n     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n     */\n    var sortBy = baseRest(function(collection, iteratees) {\n      if (collection == null) {\n        return [];\n      }\n      var length = iteratees.length;\n      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n        iteratees = [];\n      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n        iteratees = [iteratees[0]];\n      }\n      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Gets the timestamp of the number of milliseconds that have elapsed since\n     * the Unix epoch (1 January 1970 00:00:00 UTC).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Date\n     * @returns {number} Returns the timestamp.\n     * @example\n     *\n     * _.defer(function(stamp) {\n     *   console.log(_.now() - stamp);\n     * }, _.now());\n     * // => Logs the number of milliseconds it took for the deferred invocation.\n     */\n    var now = ctxNow || function() {\n      return root.Date.now();\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The opposite of `_.before`; this method creates a function that invokes\n     * `func` once it's called `n` or more times.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {number} n The number of calls before `func` is invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var saves = ['profile', 'settings'];\n     *\n     * var done = _.after(saves.length, function() {\n     *   console.log('done saving!');\n     * });\n     *\n     * _.forEach(saves, function(type) {\n     *   asyncSave({ 'type': type, 'complete': done });\n     * });\n     * // => Logs 'done saving!' after the two async saves have completed.\n     */\n    function after(n, func) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n < 1) {\n          return func.apply(this, arguments);\n        }\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func`, with up to `n` arguments,\n     * ignoring any additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @param {number} [n=func.length] The arity cap.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.ary(parseInt, 1));\n     * // => [6, 8, 10]\n     */\n    function ary(func, n, guard) {\n      n = guard ? undefined : n;\n      n = (func && n == null) ? func.length : n;\n      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);\n    }\n\n    /**\n     * Creates a function that invokes `func`, with the `this` binding and arguments\n     * of the created function, while it's called less than `n` times. Subsequent\n     * calls to the created function return the result of the last `func` invocation.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {number} n The number of calls at which `func` is no longer invoked.\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * jQuery(element).on('click', _.before(5, addContactToList));\n     * // => Allows adding up to 4 contacts to the list.\n     */\n    function before(n, func) {\n      var result;\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      n = toInteger(n);\n      return function() {\n        if (--n > 0) {\n          result = func.apply(this, arguments);\n        }\n        if (n <= 1) {\n          func = undefined;\n        }\n        return result;\n      };\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of `thisArg`\n     * and `partials` prepended to the arguments it receives.\n     *\n     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n     * property of bound functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to bind.\n     * @param {*} thisArg The `this` binding of `func`.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * function greet(greeting, punctuation) {\n     *   return greeting + ' ' + this.user + punctuation;\n     * }\n     *\n     * var object = { 'user': 'fred' };\n     *\n     * var bound = _.bind(greet, object, 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bind(greet, object, _, '!');\n     * bound('hi');\n     * // => 'hi fred!'\n     */\n    var bind = baseRest(function(func, thisArg, partials) {\n      var bitmask = WRAP_BIND_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bind));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(func, bitmask, thisArg, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes the method at `object[key]` with `partials`\n     * prepended to the arguments it receives.\n     *\n     * This method differs from `_.bind` by allowing bound functions to reference\n     * methods that may be redefined or don't yet exist. See\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)\n     * for more details.\n     *\n     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Function\n     * @param {Object} object The object to invoke the method on.\n     * @param {string} key The key of the method.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new bound function.\n     * @example\n     *\n     * var object = {\n     *   'user': 'fred',\n     *   'greet': function(greeting, punctuation) {\n     *     return greeting + ' ' + this.user + punctuation;\n     *   }\n     * };\n     *\n     * var bound = _.bindKey(object, 'greet', 'hi');\n     * bound('!');\n     * // => 'hi fred!'\n     *\n     * object.greet = function(greeting, punctuation) {\n     *   return greeting + 'ya ' + this.user + punctuation;\n     * };\n     *\n     * bound('!');\n     * // => 'hiya fred!'\n     *\n     * // Bound with placeholders.\n     * var bound = _.bindKey(object, 'greet', _, '!');\n     * bound('hi');\n     * // => 'hiya fred!'\n     */\n    var bindKey = baseRest(function(object, key, partials) {\n      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;\n      if (partials.length) {\n        var holders = replaceHolders(partials, getHolder(bindKey));\n        bitmask |= WRAP_PARTIAL_FLAG;\n      }\n      return createWrap(key, bitmask, object, partials, holders);\n    });\n\n    /**\n     * Creates a function that accepts arguments of `func` and either invokes\n     * `func` returning its result, if at least `arity` number of arguments have\n     * been provided, or returns a function that accepts the remaining `func`\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\n     * is not sufficient.\n     *\n     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,\n     * may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curry(abc);\n     *\n     * curried(1)(2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2)(3);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(1)(_, 3)(2);\n     * // => [1, 2, 3]\n     */\n    function curry(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curry.placeholder;\n      return result;\n    }\n\n    /**\n     * This method is like `_.curry` except that arguments are applied to `func`\n     * in the manner of `_.partialRight` instead of `_.partial`.\n     *\n     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for provided arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of curried functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to curry.\n     * @param {number} [arity=func.length] The arity of `func`.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the new curried function.\n     * @example\n     *\n     * var abc = function(a, b, c) {\n     *   return [a, b, c];\n     * };\n     *\n     * var curried = _.curryRight(abc);\n     *\n     * curried(3)(2)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(2, 3)(1);\n     * // => [1, 2, 3]\n     *\n     * curried(1, 2, 3);\n     * // => [1, 2, 3]\n     *\n     * // Curried with placeholders.\n     * curried(3)(1, _)(2);\n     * // => [1, 2, 3]\n     */\n    function curryRight(func, arity, guard) {\n      arity = guard ? undefined : arity;\n      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\n      result.placeholder = curryRight.placeholder;\n      return result;\n    }\n\n    /**\n     * Creates a debounced function that delays invoking `func` until after `wait`\n     * milliseconds have elapsed since the last time the debounced function was\n     * invoked. The debounced function comes with a `cancel` method to cancel\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\n     * Provide `options` to indicate whether `func` should be invoked on the\n     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n     * with the last arguments provided to the debounced function. Subsequent\n     * calls to the debounced function return the result of the last `func`\n     * invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the debounced function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.debounce` and `_.throttle`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to debounce.\n     * @param {number} [wait=0] The number of milliseconds to delay.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=false]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {number} [options.maxWait]\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new debounced function.\n     * @example\n     *\n     * // Avoid costly calculations while the window size is in flux.\n     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n     *\n     * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n     * jQuery(element).on('click', _.debounce(sendMail, 300, {\n     *   'leading': true,\n     *   'trailing': false\n     * }));\n     *\n     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n     * var source = new EventSource('/stream');\n     * jQuery(source).on('message', debounced);\n     *\n     * // Cancel the trailing debounced invocation.\n     * jQuery(window).on('popstate', debounced.cancel);\n     */\n    function debounce(func, wait, options) {\n      var lastArgs,\n          lastThis,\n          maxWait,\n          result,\n          timerId,\n          lastCallTime,\n          lastInvokeTime = 0,\n          leading = false,\n          maxing = false,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      wait = toNumber(wait) || 0;\n      if (isObject(options)) {\n        leading = !!options.leading;\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n\n      function invokeFunc(time) {\n        var args = lastArgs,\n            thisArg = lastThis;\n\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n      }\n\n      function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n          : timeWaiting;\n      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n      }\n\n      function trailingEdge(time) {\n        timerId = undefined;\n\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n          return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n      }\n\n      function cancel() {\n        if (timerId !== undefined) {\n          clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n      }\n\n      function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n\n        if (isInvoking) {\n          if (timerId === undefined) {\n            return leadingEdge(lastCallTime);\n          }\n          if (maxing) {\n            // Handle invocations in a tight loop.\n            clearTimeout(timerId);\n            timerId = setTimeout(timerExpired, wait);\n            return invokeFunc(lastCallTime);\n          }\n        }\n        if (timerId === undefined) {\n          timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n      }\n      debounced.cancel = cancel;\n      debounced.flush = flush;\n      return debounced;\n    }\n\n    /**\n     * Defers invoking the `func` until the current call stack has cleared. Any\n     * additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to defer.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.defer(function(text) {\n     *   console.log(text);\n     * }, 'deferred');\n     * // => Logs 'deferred' after one millisecond.\n     */\n    var defer = baseRest(function(func, args) {\n      return baseDelay(func, 1, args);\n    });\n\n    /**\n     * Invokes `func` after `wait` milliseconds. Any additional arguments are\n     * provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to delay.\n     * @param {number} wait The number of milliseconds to delay invocation.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {number} Returns the timer id.\n     * @example\n     *\n     * _.delay(function(text) {\n     *   console.log(text);\n     * }, 1000, 'later');\n     * // => Logs 'later' after one second.\n     */\n    var delay = baseRest(function(func, wait, args) {\n      return baseDelay(func, toNumber(wait) || 0, args);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments reversed.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to flip arguments for.\n     * @returns {Function} Returns the new flipped function.\n     * @example\n     *\n     * var flipped = _.flip(function() {\n     *   return _.toArray(arguments);\n     * });\n     *\n     * flipped('a', 'b', 'c', 'd');\n     * // => ['d', 'c', 'b', 'a']\n     */\n    function flip(func) {\n      return createWrap(func, WRAP_FLIP_FLAG);\n    }\n\n    /**\n     * Creates a function that memoizes the result of `func`. If `resolver` is\n     * provided, it determines the cache key for storing the result based on the\n     * arguments provided to the memoized function. By default, the first argument\n     * provided to the memoized function is used as the map cache key. The `func`\n     * is invoked with the `this` binding of the memoized function.\n     *\n     * **Note:** The cache is exposed as the `cache` property on the memoized\n     * function. Its creation may be customized by replacing the `_.memoize.Cache`\n     * constructor with one whose instances implement the\n     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n     * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to have its output memoized.\n     * @param {Function} [resolver] The function to resolve the cache key.\n     * @returns {Function} Returns the new memoized function.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     * var other = { 'c': 3, 'd': 4 };\n     *\n     * var values = _.memoize(_.values);\n     * values(object);\n     * // => [1, 2]\n     *\n     * values(other);\n     * // => [3, 4]\n     *\n     * object.a = 2;\n     * values(object);\n     * // => [1, 2]\n     *\n     * // Modify the result cache.\n     * values.cache.set(object, ['a', 'b']);\n     * values(object);\n     * // => ['a', 'b']\n     *\n     * // Replace `_.memoize.Cache`.\n     * _.memoize.Cache = WeakMap;\n     */\n    function memoize(func, resolver) {\n      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      var memoized = function() {\n        var args = arguments,\n            key = resolver ? resolver.apply(this, args) : args[0],\n            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n      };\n      memoized.cache = new (memoize.Cache || MapCache);\n      return memoized;\n    }\n\n    // Expose `MapCache`.\n    memoize.Cache = MapCache;\n\n    /**\n     * Creates a function that negates the result of the predicate `func`. The\n     * `func` predicate is invoked with the `this` binding and arguments of the\n     * created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} predicate The predicate to negate.\n     * @returns {Function} Returns the new negated function.\n     * @example\n     *\n     * function isEven(n) {\n     *   return n % 2 == 0;\n     * }\n     *\n     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n     * // => [1, 3, 5]\n     */\n    function negate(predicate) {\n      if (typeof predicate != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      return function() {\n        var args = arguments;\n        switch (args.length) {\n          case 0: return !predicate.call(this);\n          case 1: return !predicate.call(this, args[0]);\n          case 2: return !predicate.call(this, args[0], args[1]);\n          case 3: return !predicate.call(this, args[0], args[1], args[2]);\n        }\n        return !predicate.apply(this, args);\n      };\n    }\n\n    /**\n     * Creates a function that is restricted to invoking `func` once. Repeat calls\n     * to the function return the value of the first invocation. The `func` is\n     * invoked with the `this` binding and arguments of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to restrict.\n     * @returns {Function} Returns the new restricted function.\n     * @example\n     *\n     * var initialize = _.once(createApplication);\n     * initialize();\n     * initialize();\n     * // => `createApplication` is invoked once\n     */\n    function once(func) {\n      return before(2, func);\n    }\n\n    /**\n     * Creates a function that invokes `func` with its arguments transformed.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Function\n     * @param {Function} func The function to wrap.\n     * @param {...(Function|Function[])} [transforms=[_.identity]]\n     *  The argument transforms.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * function doubled(n) {\n     *   return n * 2;\n     * }\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var func = _.overArgs(function(x, y) {\n     *   return [x, y];\n     * }, [square, doubled]);\n     *\n     * func(9, 3);\n     * // => [81, 6]\n     *\n     * func(10, 5);\n     * // => [100, 10]\n     */\n    var overArgs = castRest(function(func, transforms) {\n      transforms = (transforms.length == 1 && isArray(transforms[0]))\n        ? arrayMap(transforms[0], baseUnary(getIteratee()))\n        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));\n\n      var funcsLength = transforms.length;\n      return baseRest(function(args) {\n        var index = -1,\n            length = nativeMin(args.length, funcsLength);\n\n        while (++index < length) {\n          args[index] = transforms[index].call(this, args[index]);\n        }\n        return apply(func, this, args);\n      });\n    });\n\n    /**\n     * Creates a function that invokes `func` with `partials` prepended to the\n     * arguments it receives. This method is like `_.bind` except it does **not**\n     * alter the `this` binding.\n     *\n     * The `_.partial.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.2.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var sayHelloTo = _.partial(greet, 'hello');\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     *\n     * // Partially applied with placeholders.\n     * var greetFred = _.partial(greet, _, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     */\n    var partial = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partial));\n      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * This method is like `_.partial` except that partially applied arguments\n     * are appended to the arguments it receives.\n     *\n     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic\n     * builds, may be used as a placeholder for partially applied arguments.\n     *\n     * **Note:** This method doesn't set the \"length\" property of partially\n     * applied functions.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Function\n     * @param {Function} func The function to partially apply arguments to.\n     * @param {...*} [partials] The arguments to be partially applied.\n     * @returns {Function} Returns the new partially applied function.\n     * @example\n     *\n     * function greet(greeting, name) {\n     *   return greeting + ' ' + name;\n     * }\n     *\n     * var greetFred = _.partialRight(greet, 'fred');\n     * greetFred('hi');\n     * // => 'hi fred'\n     *\n     * // Partially applied with placeholders.\n     * var sayHelloTo = _.partialRight(greet, 'hello', _);\n     * sayHelloTo('fred');\n     * // => 'hello fred'\n     */\n    var partialRight = baseRest(function(func, partials) {\n      var holders = replaceHolders(partials, getHolder(partialRight));\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\n    });\n\n    /**\n     * Creates a function that invokes `func` with arguments arranged according\n     * to the specified `indexes` where the argument value at the first index is\n     * provided as the first argument, the argument value at the second index is\n     * provided as the second argument, and so on.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Function\n     * @param {Function} func The function to rearrange arguments for.\n     * @param {...(number|number[])} indexes The arranged argument indexes.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var rearged = _.rearg(function(a, b, c) {\n     *   return [a, b, c];\n     * }, [2, 0, 1]);\n     *\n     * rearged('b', 'c', 'a')\n     * // => ['a', 'b', 'c']\n     */\n    var rearg = flatRest(function(func, indexes) {\n      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);\n    });\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * created function and arguments from `start` and beyond provided as\n     * an array.\n     *\n     * **Note:** This method is based on the\n     * [rest parameter](https://mdn.io/rest_parameters).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to apply a rest parameter to.\n     * @param {number} [start=func.length-1] The start position of the rest parameter.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.rest(function(what, names) {\n     *   return what + ' ' + _.initial(names).join(', ') +\n     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n     * });\n     *\n     * say('hello', 'fred', 'barney', 'pebbles');\n     * // => 'hello fred, barney, & pebbles'\n     */\n    function rest(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start === undefined ? start : toInteger(start);\n      return baseRest(func, start);\n    }\n\n    /**\n     * Creates a function that invokes `func` with the `this` binding of the\n     * create function and an array of arguments much like\n     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).\n     *\n     * **Note:** This method is based on the\n     * [spread operator](https://mdn.io/spread_operator).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Function\n     * @param {Function} func The function to spread arguments over.\n     * @param {number} [start=0] The start position of the spread.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var say = _.spread(function(who, what) {\n     *   return who + ' says ' + what;\n     * });\n     *\n     * say(['fred', 'hello']);\n     * // => 'fred says hello'\n     *\n     * var numbers = Promise.all([\n     *   Promise.resolve(40),\n     *   Promise.resolve(36)\n     * ]);\n     *\n     * numbers.then(_.spread(function(x, y) {\n     *   return x + y;\n     * }));\n     * // => a Promise of 76\n     */\n    function spread(func, start) {\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      start = start == null ? 0 : nativeMax(toInteger(start), 0);\n      return baseRest(function(args) {\n        var array = args[start],\n            otherArgs = castSlice(args, 0, start);\n\n        if (array) {\n          arrayPush(otherArgs, array);\n        }\n        return apply(func, this, otherArgs);\n      });\n    }\n\n    /**\n     * Creates a throttled function that only invokes `func` at most once per\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\n     * method to cancel delayed `func` invocations and a `flush` method to\n     * immediately invoke them. Provide `options` to indicate whether `func`\n     * should be invoked on the leading and/or trailing edge of the `wait`\n     * timeout. The `func` is invoked with the last arguments provided to the\n     * throttled function. Subsequent calls to the throttled function return the\n     * result of the last `func` invocation.\n     *\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\n     * invoked on the trailing edge of the timeout only if the throttled function\n     * is invoked more than once during the `wait` timeout.\n     *\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n     *\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n     * for details over the differences between `_.throttle` and `_.debounce`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {Function} func The function to throttle.\n     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.leading=true]\n     *  Specify invoking on the leading edge of the timeout.\n     * @param {boolean} [options.trailing=true]\n     *  Specify invoking on the trailing edge of the timeout.\n     * @returns {Function} Returns the new throttled function.\n     * @example\n     *\n     * // Avoid excessively updating the position while scrolling.\n     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n     *\n     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n     * jQuery(element).on('click', throttled);\n     *\n     * // Cancel the trailing throttled invocation.\n     * jQuery(window).on('popstate', throttled.cancel);\n     */\n    function throttle(func, wait, options) {\n      var leading = true,\n          trailing = true;\n\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (isObject(options)) {\n        leading = 'leading' in options ? !!options.leading : leading;\n        trailing = 'trailing' in options ? !!options.trailing : trailing;\n      }\n      return debounce(func, wait, {\n        'leading': leading,\n        'maxWait': wait,\n        'trailing': trailing\n      });\n    }\n\n    /**\n     * Creates a function that accepts up to one argument, ignoring any\n     * additional arguments.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Function\n     * @param {Function} func The function to cap arguments for.\n     * @returns {Function} Returns the new capped function.\n     * @example\n     *\n     * _.map(['6', '8', '10'], _.unary(parseInt));\n     * // => [6, 8, 10]\n     */\n    function unary(func) {\n      return ary(func, 1);\n    }\n\n    /**\n     * Creates a function that provides `value` to `wrapper` as its first\n     * argument. Any additional arguments provided to the function are appended\n     * to those provided to the `wrapper`. The wrapper is invoked with the `this`\n     * binding of the created function.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Function\n     * @param {*} value The value to wrap.\n     * @param {Function} [wrapper=identity] The wrapper function.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var p = _.wrap(_.escape, function(func, text) {\n     *   return '<p>' + func(text) + '</p>';\n     * });\n     *\n     * p('fred, barney, & pebbles');\n     * // => '<p>fred, barney, &amp; pebbles</p>'\n     */\n    function wrap(value, wrapper) {\n      return partial(castFunction(wrapper), value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Casts `value` as an array if it's not one.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.4.0\n     * @category Lang\n     * @param {*} value The value to inspect.\n     * @returns {Array} Returns the cast array.\n     * @example\n     *\n     * _.castArray(1);\n     * // => [1]\n     *\n     * _.castArray({ 'a': 1 });\n     * // => [{ 'a': 1 }]\n     *\n     * _.castArray('abc');\n     * // => ['abc']\n     *\n     * _.castArray(null);\n     * // => [null]\n     *\n     * _.castArray(undefined);\n     * // => [undefined]\n     *\n     * _.castArray();\n     * // => []\n     *\n     * var array = [1, 2, 3];\n     * console.log(_.castArray(array) === array);\n     * // => true\n     */\n    function castArray() {\n      if (!arguments.length) {\n        return [];\n      }\n      var value = arguments[0];\n      return isArray(value) ? value : [value];\n    }\n\n    /**\n     * Creates a shallow clone of `value`.\n     *\n     * **Note:** This method is loosely based on the\n     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n     * and supports cloning arrays, array buffers, booleans, date objects, maps,\n     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n     * arrays. The own enumerable properties of `arguments` objects are cloned\n     * as plain objects. An empty object is returned for uncloneable values such\n     * as error objects, functions, DOM nodes, and WeakMaps.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeep\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var shallow = _.clone(objects);\n     * console.log(shallow[0] === objects[0]);\n     * // => true\n     */\n    function clone(value) {\n      return baseClone(value, CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.clone` except that it accepts `customizer` which\n     * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n     * cloning is handled by the method instead. The `customizer` is invoked with\n     * up to four arguments; (value [, index|key, object, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the cloned value.\n     * @see _.cloneDeepWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(false);\n     *   }\n     * }\n     *\n     * var el = _.cloneWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 0\n     */\n    function cloneWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * This method is like `_.clone` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.clone\n     * @example\n     *\n     * var objects = [{ 'a': 1 }, { 'b': 2 }];\n     *\n     * var deep = _.cloneDeep(objects);\n     * console.log(deep[0] === objects[0]);\n     * // => false\n     */\n    function cloneDeep(value) {\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n    }\n\n    /**\n     * This method is like `_.cloneWith` except that it recursively clones `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to recursively clone.\n     * @param {Function} [customizer] The function to customize cloning.\n     * @returns {*} Returns the deep cloned value.\n     * @see _.cloneWith\n     * @example\n     *\n     * function customizer(value) {\n     *   if (_.isElement(value)) {\n     *     return value.cloneNode(true);\n     *   }\n     * }\n     *\n     * var el = _.cloneDeepWith(document.body, customizer);\n     *\n     * console.log(el === document.body);\n     * // => false\n     * console.log(el.nodeName);\n     * // => 'BODY'\n     * console.log(el.childNodes.length);\n     * // => 20\n     */\n    function cloneDeepWith(value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n    }\n\n    /**\n     * Checks if `object` conforms to `source` by invoking the predicate\n     * properties of `source` with the corresponding property values of `object`.\n     *\n     * **Note:** This method is equivalent to `_.conforms` when `source` is\n     * partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });\n     * // => true\n     *\n     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });\n     * // => false\n     */\n    function conformsTo(object, source) {\n      return source == null || baseConformsTo(object, source, keys(source));\n    }\n\n    /**\n     * Performs a\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n     * comparison between two values to determine if they are equivalent.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.eq(object, object);\n     * // => true\n     *\n     * _.eq(object, other);\n     * // => false\n     *\n     * _.eq('a', 'a');\n     * // => true\n     *\n     * _.eq('a', Object('a'));\n     * // => false\n     *\n     * _.eq(NaN, NaN);\n     * // => true\n     */\n    function eq(value, other) {\n      return value === other || (value !== value && other !== other);\n    }\n\n    /**\n     * Checks if `value` is greater than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than `other`,\n     *  else `false`.\n     * @see _.lt\n     * @example\n     *\n     * _.gt(3, 1);\n     * // => true\n     *\n     * _.gt(3, 3);\n     * // => false\n     *\n     * _.gt(1, 3);\n     * // => false\n     */\n    var gt = createRelationalOperation(baseGt);\n\n    /**\n     * Checks if `value` is greater than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is greater than or equal to\n     *  `other`, else `false`.\n     * @see _.lte\n     * @example\n     *\n     * _.gte(3, 1);\n     * // => true\n     *\n     * _.gte(3, 3);\n     * // => true\n     *\n     * _.gte(1, 3);\n     * // => false\n     */\n    var gte = createRelationalOperation(function(value, other) {\n      return value >= other;\n    });\n\n    /**\n     * Checks if `value` is likely an `arguments` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArguments(function() { return arguments; }());\n     * // => true\n     *\n     * _.isArguments([1, 2, 3]);\n     * // => false\n     */\n    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n        !propertyIsEnumerable.call(value, 'callee');\n    };\n\n    /**\n     * Checks if `value` is classified as an `Array` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n     * @example\n     *\n     * _.isArray([1, 2, 3]);\n     * // => true\n     *\n     * _.isArray(document.body.children);\n     * // => false\n     *\n     * _.isArray('abc');\n     * // => false\n     *\n     * _.isArray(_.noop);\n     * // => false\n     */\n    var isArray = Array.isArray;\n\n    /**\n     * Checks if `value` is classified as an `ArrayBuffer` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n     * @example\n     *\n     * _.isArrayBuffer(new ArrayBuffer(2));\n     * // => true\n     *\n     * _.isArrayBuffer(new Array(2));\n     * // => false\n     */\n    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;\n\n    /**\n     * Checks if `value` is array-like. A value is considered array-like if it's\n     * not a function and has a `value.length` that's an integer greater than or\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n     * @example\n     *\n     * _.isArrayLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLike(document.body.children);\n     * // => true\n     *\n     * _.isArrayLike('abc');\n     * // => true\n     *\n     * _.isArrayLike(_.noop);\n     * // => false\n     */\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n\n    /**\n     * This method is like `_.isArrayLike` except that it also checks if `value`\n     * is an object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an array-like object,\n     *  else `false`.\n     * @example\n     *\n     * _.isArrayLikeObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isArrayLikeObject(document.body.children);\n     * // => true\n     *\n     * _.isArrayLikeObject('abc');\n     * // => false\n     *\n     * _.isArrayLikeObject(_.noop);\n     * // => false\n     */\n    function isArrayLikeObject(value) {\n      return isObjectLike(value) && isArrayLike(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a boolean primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n     * @example\n     *\n     * _.isBoolean(false);\n     * // => true\n     *\n     * _.isBoolean(null);\n     * // => false\n     */\n    function isBoolean(value) {\n      return value === true || value === false ||\n        (isObjectLike(value) && baseGetTag(value) == boolTag);\n    }\n\n    /**\n     * Checks if `value` is a buffer.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n     * @example\n     *\n     * _.isBuffer(new Buffer(2));\n     * // => true\n     *\n     * _.isBuffer(new Uint8Array(2));\n     * // => false\n     */\n    var isBuffer = nativeIsBuffer || stubFalse;\n\n    /**\n     * Checks if `value` is classified as a `Date` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n     * @example\n     *\n     * _.isDate(new Date);\n     * // => true\n     *\n     * _.isDate('Mon April 23 2012');\n     * // => false\n     */\n    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\n    /**\n     * Checks if `value` is likely a DOM element.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n     * @example\n     *\n     * _.isElement(document.body);\n     * // => true\n     *\n     * _.isElement('<body>');\n     * // => false\n     */\n    function isElement(value) {\n      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n    }\n\n    /**\n     * Checks if `value` is an empty object, collection, map, or set.\n     *\n     * Objects are considered empty if they have no own enumerable string keyed\n     * properties.\n     *\n     * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n     * jQuery-like collections are considered empty if they have a `length` of `0`.\n     * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n     * @example\n     *\n     * _.isEmpty(null);\n     * // => true\n     *\n     * _.isEmpty(true);\n     * // => true\n     *\n     * _.isEmpty(1);\n     * // => true\n     *\n     * _.isEmpty([1, 2, 3]);\n     * // => false\n     *\n     * _.isEmpty({ 'a': 1 });\n     * // => false\n     */\n    function isEmpty(value) {\n      if (value == null) {\n        return true;\n      }\n      if (isArrayLike(value) &&\n          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n            isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n        return !value.length;\n      }\n      var tag = getTag(value);\n      if (tag == mapTag || tag == setTag) {\n        return !value.size;\n      }\n      if (isPrototype(value)) {\n        return !baseKeys(value).length;\n      }\n      for (var key in value) {\n        if (hasOwnProperty.call(value, key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Performs a deep comparison between two values to determine if they are\n     * equivalent.\n     *\n     * **Note:** This method supports comparing arrays, array buffers, booleans,\n     * date objects, error objects, maps, numbers, `Object` objects, regexes,\n     * sets, strings, symbols, and typed arrays. `Object` objects are compared\n     * by their own, not inherited, enumerable properties. Functions and DOM\n     * nodes are compared by strict equality, i.e. `===`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     * var other = { 'a': 1 };\n     *\n     * _.isEqual(object, other);\n     * // => true\n     *\n     * object === other;\n     * // => false\n     */\n    function isEqual(value, other) {\n      return baseIsEqual(value, other);\n    }\n\n    /**\n     * This method is like `_.isEqual` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with up to\n     * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, othValue) {\n     *   if (isGreeting(objValue) && isGreeting(othValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var array = ['hello', 'goodbye'];\n     * var other = ['hi', 'goodbye'];\n     *\n     * _.isEqualWith(array, other, customizer);\n     * // => true\n     */\n    function isEqualWith(value, other, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      var result = customizer ? customizer(value, other) : undefined;\n      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n    }\n\n    /**\n     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n     * `SyntaxError`, `TypeError`, or `URIError` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n     * @example\n     *\n     * _.isError(new Error);\n     * // => true\n     *\n     * _.isError(Error);\n     * // => false\n     */\n    function isError(value) {\n      if (!isObjectLike(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == errorTag || tag == domExcTag ||\n        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));\n    }\n\n    /**\n     * Checks if `value` is a finite primitive number.\n     *\n     * **Note:** This method is based on\n     * [`Number.isFinite`](https://mdn.io/Number/isFinite).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.\n     * @example\n     *\n     * _.isFinite(3);\n     * // => true\n     *\n     * _.isFinite(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isFinite(Infinity);\n     * // => false\n     *\n     * _.isFinite('3');\n     * // => false\n     */\n    function isFinite(value) {\n      return typeof value == 'number' && nativeIsFinite(value);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Function` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n     * @example\n     *\n     * _.isFunction(_);\n     * // => true\n     *\n     * _.isFunction(/abc/);\n     * // => false\n     */\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      // The use of `Object#toString` avoids issues with the `typeof` operator\n      // in Safari 9 which returns 'object' for typed arrays and other constructors.\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n\n    /**\n     * Checks if `value` is an integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n     * @example\n     *\n     * _.isInteger(3);\n     * // => true\n     *\n     * _.isInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isInteger(Infinity);\n     * // => false\n     *\n     * _.isInteger('3');\n     * // => false\n     */\n    function isInteger(value) {\n      return typeof value == 'number' && value == toInteger(value);\n    }\n\n    /**\n     * Checks if `value` is a valid array-like length.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n     * @example\n     *\n     * _.isLength(3);\n     * // => true\n     *\n     * _.isLength(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isLength(Infinity);\n     * // => false\n     *\n     * _.isLength('3');\n     * // => false\n     */\n    function isLength(value) {\n      return typeof value == 'number' &&\n        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is the\n     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n     * @example\n     *\n     * _.isObject({});\n     * // => true\n     *\n     * _.isObject([1, 2, 3]);\n     * // => true\n     *\n     * _.isObject(_.noop);\n     * // => true\n     *\n     * _.isObject(null);\n     * // => false\n     */\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == 'object' || type == 'function');\n    }\n\n    /**\n     * Checks if `value` is object-like. A value is object-like if it's not `null`\n     * and has a `typeof` result of \"object\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n     * @example\n     *\n     * _.isObjectLike({});\n     * // => true\n     *\n     * _.isObjectLike([1, 2, 3]);\n     * // => true\n     *\n     * _.isObjectLike(_.noop);\n     * // => false\n     *\n     * _.isObjectLike(null);\n     * // => false\n     */\n    function isObjectLike(value) {\n      return value != null && typeof value == 'object';\n    }\n\n    /**\n     * Checks if `value` is classified as a `Map` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n     * @example\n     *\n     * _.isMap(new Map);\n     * // => true\n     *\n     * _.isMap(new WeakMap);\n     * // => false\n     */\n    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\n    /**\n     * Performs a partial deep comparison between `object` and `source` to\n     * determine if `object` contains equivalent property values.\n     *\n     * **Note:** This method is equivalent to `_.matches` when `source` is\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2 };\n     *\n     * _.isMatch(object, { 'b': 2 });\n     * // => true\n     *\n     * _.isMatch(object, { 'b': 1 });\n     * // => false\n     */\n    function isMatch(object, source) {\n      return object === source || baseIsMatch(object, source, getMatchData(source));\n    }\n\n    /**\n     * This method is like `_.isMatch` except that it accepts `customizer` which\n     * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n     * are handled by the method instead. The `customizer` is invoked with five\n     * arguments: (objValue, srcValue, index|key, object, source).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {Object} object The object to inspect.\n     * @param {Object} source The object of property values to match.\n     * @param {Function} [customizer] The function to customize comparisons.\n     * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n     * @example\n     *\n     * function isGreeting(value) {\n     *   return /^h(?:i|ello)$/.test(value);\n     * }\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n     *     return true;\n     *   }\n     * }\n     *\n     * var object = { 'greeting': 'hello' };\n     * var source = { 'greeting': 'hi' };\n     *\n     * _.isMatchWith(object, source, customizer);\n     * // => true\n     */\n    function isMatchWith(object, source, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return baseIsMatch(object, source, getMatchData(source), customizer);\n    }\n\n    /**\n     * Checks if `value` is `NaN`.\n     *\n     * **Note:** This method is based on\n     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as\n     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for\n     * `undefined` and other non-number values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n     * @example\n     *\n     * _.isNaN(NaN);\n     * // => true\n     *\n     * _.isNaN(new Number(NaN));\n     * // => true\n     *\n     * isNaN(undefined);\n     * // => true\n     *\n     * _.isNaN(undefined);\n     * // => false\n     */\n    function isNaN(value) {\n      // An `NaN` primitive is the only value that is not equal to itself.\n      // Perform the `toStringTag` check first to avoid errors with some\n      // ActiveX objects in IE.\n      return isNumber(value) && value != +value;\n    }\n\n    /**\n     * Checks if `value` is a pristine native function.\n     *\n     * **Note:** This method can't reliably detect native functions in the presence\n     * of the core-js package because core-js circumvents this kind of detection.\n     * Despite multiple requests, the core-js maintainer has made it clear: any\n     * attempt to fix the detection will be obstructed. As a result, we're left\n     * with little choice but to throw an error. Unfortunately, this also affects\n     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),\n     * which rely on core-js.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a native function,\n     *  else `false`.\n     * @example\n     *\n     * _.isNative(Array.prototype.push);\n     * // => true\n     *\n     * _.isNative(_);\n     * // => false\n     */\n    function isNative(value) {\n      if (isMaskable(value)) {\n        throw new Error(CORE_ERROR_TEXT);\n      }\n      return baseIsNative(value);\n    }\n\n    /**\n     * Checks if `value` is `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n     * @example\n     *\n     * _.isNull(null);\n     * // => true\n     *\n     * _.isNull(void 0);\n     * // => false\n     */\n    function isNull(value) {\n      return value === null;\n    }\n\n    /**\n     * Checks if `value` is `null` or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n     * @example\n     *\n     * _.isNil(null);\n     * // => true\n     *\n     * _.isNil(void 0);\n     * // => true\n     *\n     * _.isNil(NaN);\n     * // => false\n     */\n    function isNil(value) {\n      return value == null;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Number` primitive or object.\n     *\n     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n     * classified as numbers, use the `_.isFinite` method.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n     * @example\n     *\n     * _.isNumber(3);\n     * // => true\n     *\n     * _.isNumber(Number.MIN_VALUE);\n     * // => true\n     *\n     * _.isNumber(Infinity);\n     * // => true\n     *\n     * _.isNumber('3');\n     * // => false\n     */\n    function isNumber(value) {\n      return typeof value == 'number' ||\n        (isObjectLike(value) && baseGetTag(value) == numberTag);\n    }\n\n    /**\n     * Checks if `value` is a plain object, that is, an object created by the\n     * `Object` constructor or one with a `[[Prototype]]` of `null`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.8.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * _.isPlainObject(new Foo);\n     * // => false\n     *\n     * _.isPlainObject([1, 2, 3]);\n     * // => false\n     *\n     * _.isPlainObject({ 'x': 0, 'y': 0 });\n     * // => true\n     *\n     * _.isPlainObject(Object.create(null));\n     * // => true\n     */\n    function isPlainObject(value) {\n      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n        return false;\n      }\n      var proto = getPrototype(value);\n      if (proto === null) {\n        return true;\n      }\n      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n      return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n        funcToString.call(Ctor) == objectCtorString;\n    }\n\n    /**\n     * Checks if `value` is classified as a `RegExp` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.1.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n     * @example\n     *\n     * _.isRegExp(/abc/);\n     * // => true\n     *\n     * _.isRegExp('/abc/');\n     * // => false\n     */\n    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\n    /**\n     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\n     * double precision number which isn't the result of a rounded unsafe integer.\n     *\n     * **Note:** This method is based on\n     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.\n     * @example\n     *\n     * _.isSafeInteger(3);\n     * // => true\n     *\n     * _.isSafeInteger(Number.MIN_VALUE);\n     * // => false\n     *\n     * _.isSafeInteger(Infinity);\n     * // => false\n     *\n     * _.isSafeInteger('3');\n     * // => false\n     */\n    function isSafeInteger(value) {\n      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if `value` is classified as a `Set` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n     * @example\n     *\n     * _.isSet(new Set);\n     * // => true\n     *\n     * _.isSet(new WeakSet);\n     * // => false\n     */\n    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\n    /**\n     * Checks if `value` is classified as a `String` primitive or object.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n     * @example\n     *\n     * _.isString('abc');\n     * // => true\n     *\n     * _.isString(1);\n     * // => false\n     */\n    function isString(value) {\n      return typeof value == 'string' ||\n        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a `Symbol` primitive or object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n     * @example\n     *\n     * _.isSymbol(Symbol.iterator);\n     * // => true\n     *\n     * _.isSymbol('abc');\n     * // => false\n     */\n    function isSymbol(value) {\n      return typeof value == 'symbol' ||\n        (isObjectLike(value) && baseGetTag(value) == symbolTag);\n    }\n\n    /**\n     * Checks if `value` is classified as a typed array.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n     * @example\n     *\n     * _.isTypedArray(new Uint8Array);\n     * // => true\n     *\n     * _.isTypedArray([]);\n     * // => false\n     */\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n    /**\n     * Checks if `value` is `undefined`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n     * @example\n     *\n     * _.isUndefined(void 0);\n     * // => true\n     *\n     * _.isUndefined(null);\n     * // => false\n     */\n    function isUndefined(value) {\n      return value === undefined;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakMap` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n     * @example\n     *\n     * _.isWeakMap(new WeakMap);\n     * // => true\n     *\n     * _.isWeakMap(new Map);\n     * // => false\n     */\n    function isWeakMap(value) {\n      return isObjectLike(value) && getTag(value) == weakMapTag;\n    }\n\n    /**\n     * Checks if `value` is classified as a `WeakSet` object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.3.0\n     * @category Lang\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n     * @example\n     *\n     * _.isWeakSet(new WeakSet);\n     * // => true\n     *\n     * _.isWeakSet(new Set);\n     * // => false\n     */\n    function isWeakSet(value) {\n      return isObjectLike(value) && baseGetTag(value) == weakSetTag;\n    }\n\n    /**\n     * Checks if `value` is less than `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than `other`,\n     *  else `false`.\n     * @see _.gt\n     * @example\n     *\n     * _.lt(1, 3);\n     * // => true\n     *\n     * _.lt(3, 3);\n     * // => false\n     *\n     * _.lt(3, 1);\n     * // => false\n     */\n    var lt = createRelationalOperation(baseLt);\n\n    /**\n     * Checks if `value` is less than or equal to `other`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.9.0\n     * @category Lang\n     * @param {*} value The value to compare.\n     * @param {*} other The other value to compare.\n     * @returns {boolean} Returns `true` if `value` is less than or equal to\n     *  `other`, else `false`.\n     * @see _.gte\n     * @example\n     *\n     * _.lte(1, 3);\n     * // => true\n     *\n     * _.lte(3, 3);\n     * // => true\n     *\n     * _.lte(3, 1);\n     * // => false\n     */\n    var lte = createRelationalOperation(function(value, other) {\n      return value <= other;\n    });\n\n    /**\n     * Converts `value` to an array.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the converted array.\n     * @example\n     *\n     * _.toArray({ 'a': 1, 'b': 2 });\n     * // => [1, 2]\n     *\n     * _.toArray('abc');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toArray(1);\n     * // => []\n     *\n     * _.toArray(null);\n     * // => []\n     */\n    function toArray(value) {\n      if (!value) {\n        return [];\n      }\n      if (isArrayLike(value)) {\n        return isString(value) ? stringToArray(value) : copyArray(value);\n      }\n      if (symIterator && value[symIterator]) {\n        return iteratorToArray(value[symIterator]());\n      }\n      var tag = getTag(value),\n          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);\n\n      return func(value);\n    }\n\n    /**\n     * Converts `value` to a finite number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.12.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted number.\n     * @example\n     *\n     * _.toFinite(3.2);\n     * // => 3.2\n     *\n     * _.toFinite(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toFinite(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toFinite('3.2');\n     * // => 3.2\n     */\n    function toFinite(value) {\n      if (!value) {\n        return value === 0 ? value : 0;\n      }\n      value = toNumber(value);\n      if (value === INFINITY || value === -INFINITY) {\n        var sign = (value < 0 ? -1 : 1);\n        return sign * MAX_INTEGER;\n      }\n      return value === value ? value : 0;\n    }\n\n    /**\n     * Converts `value` to an integer.\n     *\n     * **Note:** This method is loosely based on\n     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toInteger(3.2);\n     * // => 3\n     *\n     * _.toInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toInteger(Infinity);\n     * // => 1.7976931348623157e+308\n     *\n     * _.toInteger('3.2');\n     * // => 3\n     */\n    function toInteger(value) {\n      var result = toFinite(value),\n          remainder = result % 1;\n\n      return result === result ? (remainder ? result - remainder : result) : 0;\n    }\n\n    /**\n     * Converts `value` to an integer suitable for use as the length of an\n     * array-like object.\n     *\n     * **Note:** This method is based on\n     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toLength(3.2);\n     * // => 3\n     *\n     * _.toLength(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toLength(Infinity);\n     * // => 4294967295\n     *\n     * _.toLength('3.2');\n     * // => 3\n     */\n    function toLength(value) {\n      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n    }\n\n    /**\n     * Converts `value` to a number.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to process.\n     * @returns {number} Returns the number.\n     * @example\n     *\n     * _.toNumber(3.2);\n     * // => 3.2\n     *\n     * _.toNumber(Number.MIN_VALUE);\n     * // => 5e-324\n     *\n     * _.toNumber(Infinity);\n     * // => Infinity\n     *\n     * _.toNumber('3.2');\n     * // => 3.2\n     */\n    function toNumber(value) {\n      if (typeof value == 'number') {\n        return value;\n      }\n      if (isSymbol(value)) {\n        return NAN;\n      }\n      if (isObject(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = isObject(other) ? (other + '') : other;\n      }\n      if (typeof value != 'string') {\n        return value === 0 ? value : +value;\n      }\n      value = value.replace(reTrim, '');\n      var isBinary = reIsBinary.test(value);\n      return (isBinary || reIsOctal.test(value))\n        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n        : (reIsBadHex.test(value) ? NAN : +value);\n    }\n\n    /**\n     * Converts `value` to a plain object flattening inherited enumerable string\n     * keyed properties of `value` to own properties of the plain object.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {Object} Returns the converted plain object.\n     * @example\n     *\n     * function Foo() {\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.assign({ 'a': 1 }, new Foo);\n     * // => { 'a': 1, 'b': 2 }\n     *\n     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n     * // => { 'a': 1, 'b': 2, 'c': 3 }\n     */\n    function toPlainObject(value) {\n      return copyObject(value, keysIn(value));\n    }\n\n    /**\n     * Converts `value` to a safe integer. A safe integer can be compared and\n     * represented correctly.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.toSafeInteger(3.2);\n     * // => 3\n     *\n     * _.toSafeInteger(Number.MIN_VALUE);\n     * // => 0\n     *\n     * _.toSafeInteger(Infinity);\n     * // => 9007199254740991\n     *\n     * _.toSafeInteger('3.2');\n     * // => 3\n     */\n    function toSafeInteger(value) {\n      return value\n        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)\n        : (value === 0 ? value : 0);\n    }\n\n    /**\n     * Converts `value` to a string. An empty string is returned for `null`\n     * and `undefined` values. The sign of `-0` is preserved.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Lang\n     * @param {*} value The value to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.toString(null);\n     * // => ''\n     *\n     * _.toString(-0);\n     * // => '-0'\n     *\n     * _.toString([1, 2, 3]);\n     * // => '1,2,3'\n     */\n    function toString(value) {\n      return value == null ? '' : baseToString(value);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Assigns own enumerable string keyed properties of source objects to the\n     * destination object. Source objects are applied from left to right.\n     * Subsequent sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object` and is loosely based on\n     * [`Object.assign`](https://mdn.io/Object/assign).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assignIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assign({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var assign = createAssigner(function(object, source) {\n      if (isPrototype(source) || isArrayLike(source)) {\n        copyObject(source, keys(source), object);\n        return;\n      }\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          assignValue(object, key, source[key]);\n        }\n      }\n    });\n\n    /**\n     * This method is like `_.assign` except that it iterates over own and\n     * inherited source properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extend\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.assign\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     * }\n     *\n     * function Bar() {\n     *   this.c = 3;\n     * }\n     *\n     * Foo.prototype.b = 2;\n     * Bar.prototype.d = 4;\n     *\n     * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n     */\n    var assignIn = createAssigner(function(object, source) {\n      copyObject(source, keysIn(source), object);\n    });\n\n    /**\n     * This method is like `_.assignIn` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias extendWith\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignInWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keysIn(source), object, customizer);\n    });\n\n    /**\n     * This method is like `_.assign` except that it accepts `customizer`\n     * which is invoked to produce the assigned values. If `customizer` returns\n     * `undefined`, assignment is handled by the method instead. The `customizer`\n     * is invoked with five arguments: (objValue, srcValue, key, object, source).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @see _.assignInWith\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   return _.isUndefined(objValue) ? srcValue : objValue;\n     * }\n     *\n     * var defaults = _.partialRight(_.assignWith, customizer);\n     *\n     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {\n      copyObject(source, keys(source), object, customizer);\n    });\n\n    /**\n     * Creates an array of values corresponding to `paths` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Array} Returns the picked values.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n     *\n     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n     * `properties` object is given, its own enumerable string keyed properties\n     * are assigned to the created object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Object\n     * @param {Object} prototype The object to inherit from.\n     * @param {Object} [properties] The properties to assign to the object.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * function Shape() {\n     *   this.x = 0;\n     *   this.y = 0;\n     * }\n     *\n     * function Circle() {\n     *   Shape.call(this);\n     * }\n     *\n     * Circle.prototype = _.create(Shape.prototype, {\n     *   'constructor': Circle\n     * });\n     *\n     * var circle = new Circle;\n     * circle instanceof Circle;\n     * // => true\n     *\n     * circle instanceof Shape;\n     * // => true\n     */\n    function create(prototype, properties) {\n      var result = baseCreate(prototype);\n      return properties == null ? result : baseAssign(result, properties);\n    }\n\n    /**\n     * Assigns own and inherited enumerable string keyed properties of source\n     * objects to the destination object for all destination properties that\n     * resolve to `undefined`. Source objects are applied from left to right.\n     * Once a property is set, additional values of the same property are ignored.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaultsDeep\n     * @example\n     *\n     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n     * // => { 'a': 1, 'b': 2 }\n     */\n    var defaults = baseRest(function(object, sources) {\n      object = Object(object);\n\n      var index = -1;\n      var length = sources.length;\n      var guard = length > 2 ? sources[2] : undefined;\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        length = 1;\n      }\n\n      while (++index < length) {\n        var source = sources[index];\n        var props = keysIn(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n\n        while (++propsIndex < propsLength) {\n          var key = props[propsIndex];\n          var value = object[key];\n\n          if (value === undefined ||\n              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n            object[key] = source[key];\n          }\n        }\n      }\n\n      return object;\n    });\n\n    /**\n     * This method is like `_.defaults` except that it recursively assigns\n     * default properties.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @see _.defaults\n     * @example\n     *\n     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n     * // => { 'a': { 'b': 2, 'c': 3 } }\n     */\n    var defaultsDeep = baseRest(function(args) {\n      args.push(undefined, customDefaultsMerge);\n      return apply(mergeWith, undefined, args);\n    });\n\n    /**\n     * This method is like `_.find` except that it returns the key of the first\n     * element `predicate` returns truthy for instead of the element itself.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findKey(users, function(o) { return o.age < 40; });\n     * // => 'barney' (iteration order is not guaranteed)\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findKey(users, { 'age': 1, 'active': true });\n     * // => 'pebbles'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findKey(users, 'active');\n     * // => 'barney'\n     */\n    function findKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);\n    }\n\n    /**\n     * This method is like `_.findKey` except that it iterates over elements of\n     * a collection in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @param {Function} [predicate=_.identity] The function invoked per iteration.\n     * @returns {string|undefined} Returns the key of the matched element,\n     *  else `undefined`.\n     * @example\n     *\n     * var users = {\n     *   'barney':  { 'age': 36, 'active': true },\n     *   'fred':    { 'age': 40, 'active': false },\n     *   'pebbles': { 'age': 1,  'active': true }\n     * };\n     *\n     * _.findLastKey(users, function(o) { return o.age < 40; });\n     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.findLastKey(users, { 'age': 36, 'active': true });\n     * // => 'barney'\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.findLastKey(users, ['active', false]);\n     * // => 'fred'\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.findLastKey(users, 'active');\n     * // => 'pebbles'\n     */\n    function findLastKey(object, predicate) {\n      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);\n    }\n\n    /**\n     * Iterates over own and inherited enumerable string keyed properties of an\n     * object and invokes `iteratee` for each property. The iteratee is invoked\n     * with three arguments: (value, key, object). Iteratee functions may exit\n     * iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forInRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forIn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n     */\n    function forIn(object, iteratee) {\n      return object == null\n        ? object\n        : baseFor(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * This method is like `_.forIn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forInRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n     */\n    function forInRight(object, iteratee) {\n      return object == null\n        ? object\n        : baseForRight(object, getIteratee(iteratee, 3), keysIn);\n    }\n\n    /**\n     * Iterates over own enumerable string keyed properties of an object and\n     * invokes `iteratee` for each property. The iteratee is invoked with three\n     * arguments: (value, key, object). Iteratee functions may exit iteration\n     * early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwnRight\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwn(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n     */\n    function forOwn(object, iteratee) {\n      return object && baseForOwn(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * This method is like `_.forOwn` except that it iterates over properties of\n     * `object` in the opposite order.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.0.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns `object`.\n     * @see _.forOwn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.forOwnRight(new Foo, function(value, key) {\n     *   console.log(key);\n     * });\n     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n     */\n    function forOwnRight(object, iteratee) {\n      return object && baseForOwnRight(object, getIteratee(iteratee, 3));\n    }\n\n    /**\n     * Creates an array of function property names from own enumerable properties\n     * of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functionsIn\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functions(new Foo);\n     * // => ['a', 'b']\n     */\n    function functions(object) {\n      return object == null ? [] : baseFunctions(object, keys(object));\n    }\n\n    /**\n     * Creates an array of function property names from own and inherited\n     * enumerable properties of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to inspect.\n     * @returns {Array} Returns the function names.\n     * @see _.functions\n     * @example\n     *\n     * function Foo() {\n     *   this.a = _.constant('a');\n     *   this.b = _.constant('b');\n     * }\n     *\n     * Foo.prototype.c = _.constant('c');\n     *\n     * _.functionsIn(new Foo);\n     * // => ['a', 'b', 'c']\n     */\n    function functionsIn(object) {\n      return object == null ? [] : baseFunctions(object, keysIn(object));\n    }\n\n    /**\n     * Gets the value at `path` of `object`. If the resolved value is\n     * `undefined`, the `defaultValue` is returned in its place.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n      var result = object == null ? undefined : baseGet(object, path);\n      return result === undefined ? defaultValue : result;\n    }\n\n    /**\n     * Checks if `path` is a direct property of `object`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = { 'a': { 'b': 2 } };\n     * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.has(object, 'a');\n     * // => true\n     *\n     * _.has(object, 'a.b');\n     * // => true\n     *\n     * _.has(object, ['a', 'b']);\n     * // => true\n     *\n     * _.has(other, 'a');\n     * // => false\n     */\n    function has(object, path) {\n      return object != null && hasPath(object, path, baseHas);\n    }\n\n    /**\n     * Checks if `path` is a direct or inherited property of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path to check.\n     * @returns {boolean} Returns `true` if `path` exists, else `false`.\n     * @example\n     *\n     * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n     *\n     * _.hasIn(object, 'a');\n     * // => true\n     *\n     * _.hasIn(object, 'a.b');\n     * // => true\n     *\n     * _.hasIn(object, ['a', 'b']);\n     * // => true\n     *\n     * _.hasIn(object, 'b');\n     * // => false\n     */\n    function hasIn(object, path) {\n      return object != null && hasPath(object, path, baseHasIn);\n    }\n\n    /**\n     * Creates an object composed of the inverted keys and values of `object`.\n     * If `object` contains duplicate values, subsequent values overwrite\n     * property assignments of previous values.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invert(object);\n     * // => { '1': 'c', '2': 'b' }\n     */\n    var invert = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      result[value] = key;\n    }, constant(identity));\n\n    /**\n     * This method is like `_.invert` except that the inverted object is generated\n     * from the results of running each element of `object` thru `iteratee`. The\n     * corresponding inverted value of each inverted key is an array of keys\n     * responsible for generating the inverted value. The iteratee is invoked\n     * with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.1.0\n     * @category Object\n     * @param {Object} object The object to invert.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {Object} Returns the new inverted object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': 2, 'c': 1 };\n     *\n     * _.invertBy(object);\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     *\n     * _.invertBy(object, function(value) {\n     *   return 'group' + value;\n     * });\n     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n     */\n    var invertBy = createInverter(function(result, value, key) {\n      if (value != null &&\n          typeof value.toString != 'function') {\n        value = nativeObjectToString.call(value);\n      }\n\n      if (hasOwnProperty.call(result, value)) {\n        result[value].push(key);\n      } else {\n        result[value] = [key];\n      }\n    }, getIteratee);\n\n    /**\n     * Invokes the method at `path` of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {*} Returns the result of the invoked method.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n     *\n     * _.invoke(object, 'a[0].b.c.slice', 1, 3);\n     * // => [2, 3]\n     */\n    var invoke = baseRest(baseInvoke);\n\n    /**\n     * Creates an array of the own enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects. See the\n     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n     * for more details.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keys(new Foo);\n     * // => ['a', 'b'] (iteration order is not guaranteed)\n     *\n     * _.keys('hi');\n     * // => ['0', '1']\n     */\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable property names of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property names.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.keysIn(new Foo);\n     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n     */\n    function keysIn(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n    }\n\n    /**\n     * The opposite of `_.mapValues`; this method creates an object with the\n     * same values as `object` and keys generated by running each own enumerable\n     * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n     * with three arguments: (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.8.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapValues\n     * @example\n     *\n     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n     *   return key + value;\n     * });\n     * // => { 'a1': 1, 'b2': 2 }\n     */\n    function mapKeys(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, iteratee(value, key, object), value);\n      });\n      return result;\n    }\n\n    /**\n     * Creates an object with the same keys as `object` and values generated\n     * by running each own enumerable string keyed property of `object` thru\n     * `iteratee`. The iteratee is invoked with three arguments:\n     * (value, key, object).\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Object} Returns the new mapped object.\n     * @see _.mapKeys\n     * @example\n     *\n     * var users = {\n     *   'fred':    { 'user': 'fred',    'age': 40 },\n     *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n     * };\n     *\n     * _.mapValues(users, function(o) { return o.age; });\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.mapValues(users, 'age');\n     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n     */\n    function mapValues(object, iteratee) {\n      var result = {};\n      iteratee = getIteratee(iteratee, 3);\n\n      baseForOwn(object, function(value, key, object) {\n        baseAssignValue(result, key, iteratee(value, key, object));\n      });\n      return result;\n    }\n\n    /**\n     * This method is like `_.assign` except that it recursively merges own and\n     * inherited enumerable string keyed properties of source objects into the\n     * destination object. Source properties that resolve to `undefined` are\n     * skipped if a destination value exists. Array and plain object properties\n     * are merged recursively. Other objects and value types are overridden by\n     * assignment. Source objects are applied from left to right. Subsequent\n     * sources overwrite property assignments of previous sources.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.5.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} [sources] The source objects.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {\n     *   'a': [{ 'b': 2 }, { 'd': 4 }]\n     * };\n     *\n     * var other = {\n     *   'a': [{ 'c': 3 }, { 'e': 5 }]\n     * };\n     *\n     * _.merge(object, other);\n     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n     */\n    var merge = createAssigner(function(object, source, srcIndex) {\n      baseMerge(object, source, srcIndex);\n    });\n\n    /**\n     * This method is like `_.merge` except that it accepts `customizer` which\n     * is invoked to produce the merged values of the destination and source\n     * properties. If `customizer` returns `undefined`, merging is handled by the\n     * method instead. The `customizer` is invoked with six arguments:\n     * (objValue, srcValue, key, object, source, stack).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The destination object.\n     * @param {...Object} sources The source objects.\n     * @param {Function} customizer The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * function customizer(objValue, srcValue) {\n     *   if (_.isArray(objValue)) {\n     *     return objValue.concat(srcValue);\n     *   }\n     * }\n     *\n     * var object = { 'a': [1], 'b': [2] };\n     * var other = { 'a': [3], 'b': [4] };\n     *\n     * _.mergeWith(object, other, customizer);\n     * // => { 'a': [1, 3], 'b': [2, 4] }\n     */\n    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n      baseMerge(object, source, srcIndex, customizer);\n    });\n\n    /**\n     * The opposite of `_.pick`; this method creates an object composed of the\n     * own and inherited enumerable property paths of `object` that are not omitted.\n     *\n     * **Note:** This method is considerably slower than `_.pick`.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to omit.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omit(object, ['a', 'c']);\n     * // => { 'b': '2' }\n     */\n    var omit = flatRest(function(object, paths) {\n      var result = {};\n      if (object == null) {\n        return result;\n      }\n      var isDeep = false;\n      paths = arrayMap(paths, function(path) {\n        path = castPath(path, object);\n        isDeep || (isDeep = path.length > 1);\n        return path;\n      });\n      copyObject(object, getAllKeysIn(object), result);\n      if (isDeep) {\n        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n      }\n      var length = paths.length;\n      while (length--) {\n        baseUnset(result, paths[length]);\n      }\n      return result;\n    });\n\n    /**\n     * The opposite of `_.pickBy`; this method creates an object composed of\n     * the own and inherited enumerable string keyed properties of `object` that\n     * `predicate` doesn't return truthy for. The predicate is invoked with two\n     * arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.omitBy(object, _.isNumber);\n     * // => { 'b': '2' }\n     */\n    function omitBy(object, predicate) {\n      return pickBy(object, negate(getIteratee(predicate)));\n    }\n\n    /**\n     * Creates an object composed of the picked `object` properties.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {...(string|string[])} [paths] The property paths to pick.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pick(object, ['a', 'c']);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    var pick = flatRest(function(object, paths) {\n      return object == null ? {} : basePick(object, paths);\n    });\n\n    /**\n     * Creates an object composed of the `object` properties `predicate` returns\n     * truthy for. The predicate is invoked with two arguments: (value, key).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The source object.\n     * @param {Function} [predicate=_.identity] The function invoked per property.\n     * @returns {Object} Returns the new object.\n     * @example\n     *\n     * var object = { 'a': 1, 'b': '2', 'c': 3 };\n     *\n     * _.pickBy(object, _.isNumber);\n     * // => { 'a': 1, 'c': 3 }\n     */\n    function pickBy(object, predicate) {\n      if (object == null) {\n        return {};\n      }\n      var props = arrayMap(getAllKeysIn(object), function(prop) {\n        return [prop];\n      });\n      predicate = getIteratee(predicate);\n      return basePickBy(object, props, function(value, path) {\n        return predicate(value, path[0]);\n      });\n    }\n\n    /**\n     * This method is like `_.get` except that if the resolved value is a\n     * function it's invoked with the `this` binding of its parent object and\n     * its result is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @param {Array|string} path The path of the property to resolve.\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n     *\n     * _.result(object, 'a[0].b.c1');\n     * // => 3\n     *\n     * _.result(object, 'a[0].b.c2');\n     * // => 4\n     *\n     * _.result(object, 'a[0].b.c3', 'default');\n     * // => 'default'\n     *\n     * _.result(object, 'a[0].b.c3', _.constant('default'));\n     * // => 'default'\n     */\n    function result(object, path, defaultValue) {\n      path = castPath(path, object);\n\n      var index = -1,\n          length = path.length;\n\n      // Ensure the loop is entered when path is empty.\n      if (!length) {\n        length = 1;\n        object = undefined;\n      }\n      while (++index < length) {\n        var value = object == null ? undefined : object[toKey(path[index])];\n        if (value === undefined) {\n          index = length;\n          value = defaultValue;\n        }\n        object = isFunction(value) ? value.call(object) : value;\n      }\n      return object;\n    }\n\n    /**\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n     * it's created. Arrays are created for missing index properties while objects\n     * are created for all other missing properties. Use `_.setWith` to customize\n     * `path` creation.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.set(object, 'a[0].b.c', 4);\n     * console.log(object.a[0].b.c);\n     * // => 4\n     *\n     * _.set(object, ['x', '0', 'y', 'z'], 5);\n     * console.log(object.x[0].y.z);\n     * // => 5\n     */\n    function set(object, path, value) {\n      return object == null ? object : baseSet(object, path, value);\n    }\n\n    /**\n     * This method is like `_.set` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {*} value The value to set.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.setWith(object, '[0][1]', 'a', Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function setWith(object, path, value, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseSet(object, path, value, customizer);\n    }\n\n    /**\n     * Creates an array of own enumerable string keyed-value pairs for `object`\n     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its\n     * entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entries\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairs(new Foo);\n     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n     */\n    var toPairs = createToPairs(keys);\n\n    /**\n     * Creates an array of own and inherited enumerable string keyed-value pairs\n     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map\n     * or set, its entries are returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @alias entriesIn\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the key-value pairs.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.toPairsIn(new Foo);\n     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)\n     */\n    var toPairsIn = createToPairs(keysIn);\n\n    /**\n     * An alternative to `_.reduce`; this method transforms `object` to a new\n     * `accumulator` object which is the result of running each of its own\n     * enumerable string keyed properties thru `iteratee`, with each invocation\n     * potentially mutating the `accumulator` object. If `accumulator` is not\n     * provided, a new object with the same `[[Prototype]]` will be used. The\n     * iteratee is invoked with four arguments: (accumulator, value, key, object).\n     * Iteratee functions may exit iteration early by explicitly returning `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.3.0\n     * @category Object\n     * @param {Object} object The object to iterate over.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @param {*} [accumulator] The custom accumulator value.\n     * @returns {*} Returns the accumulated value.\n     * @example\n     *\n     * _.transform([2, 3, 4], function(result, n) {\n     *   result.push(n *= n);\n     *   return n % 2 == 0;\n     * }, []);\n     * // => [4, 9]\n     *\n     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n     *   (result[value] || (result[value] = [])).push(key);\n     * }, {});\n     * // => { '1': ['a', 'c'], '2': ['b'] }\n     */\n    function transform(object, iteratee, accumulator) {\n      var isArr = isArray(object),\n          isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n      iteratee = getIteratee(iteratee, 4);\n      if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n          accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n          accumulator = {};\n        }\n      }\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n      });\n      return accumulator;\n    }\n\n    /**\n     * Removes the property at `path` of `object`.\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to unset.\n     * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 7 } }] };\n     * _.unset(object, 'a[0].b.c');\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     *\n     * _.unset(object, ['a', '0', 'b', 'c']);\n     * // => true\n     *\n     * console.log(object);\n     * // => { 'a': [{ 'b': {} }] };\n     */\n    function unset(object, path) {\n      return object == null ? true : baseUnset(object, path);\n    }\n\n    /**\n     * This method is like `_.set` except that accepts `updater` to produce the\n     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`\n     * is invoked with one argument: (value).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.update(object, 'a[0].b.c', function(n) { return n * n; });\n     * console.log(object.a[0].b.c);\n     * // => 9\n     *\n     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\n     * console.log(object.x[0].y.z);\n     * // => 0\n     */\n    function update(object, path, updater) {\n      return object == null ? object : baseUpdate(object, path, castFunction(updater));\n    }\n\n    /**\n     * This method is like `_.update` except that it accepts `customizer` which is\n     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`\n     * path creation is handled by the method instead. The `customizer` is invoked\n     * with three arguments: (nsValue, key, nsObject).\n     *\n     * **Note:** This method mutates `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.6.0\n     * @category Object\n     * @param {Object} object The object to modify.\n     * @param {Array|string} path The path of the property to set.\n     * @param {Function} updater The function to produce the updated value.\n     * @param {Function} [customizer] The function to customize assigned values.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var object = {};\n     *\n     * _.updateWith(object, '[0][1]', _.constant('a'), Object);\n     * // => { '0': { '1': 'a' } }\n     */\n    function updateWith(object, path, updater, customizer) {\n      customizer = typeof customizer == 'function' ? customizer : undefined;\n      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);\n    }\n\n    /**\n     * Creates an array of the own enumerable string keyed property values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.values(new Foo);\n     * // => [1, 2] (iteration order is not guaranteed)\n     *\n     * _.values('hi');\n     * // => ['h', 'i']\n     */\n    function values(object) {\n      return object == null ? [] : baseValues(object, keys(object));\n    }\n\n    /**\n     * Creates an array of the own and inherited enumerable string keyed property\n     * values of `object`.\n     *\n     * **Note:** Non-object values are coerced to objects.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Object\n     * @param {Object} object The object to query.\n     * @returns {Array} Returns the array of property values.\n     * @example\n     *\n     * function Foo() {\n     *   this.a = 1;\n     *   this.b = 2;\n     * }\n     *\n     * Foo.prototype.c = 3;\n     *\n     * _.valuesIn(new Foo);\n     * // => [1, 2, 3] (iteration order is not guaranteed)\n     */\n    function valuesIn(object) {\n      return object == null ? [] : baseValues(object, keysIn(object));\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clamps `number` within the inclusive `lower` and `upper` bounds.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Number\n     * @param {number} number The number to clamp.\n     * @param {number} [lower] The lower bound.\n     * @param {number} upper The upper bound.\n     * @returns {number} Returns the clamped number.\n     * @example\n     *\n     * _.clamp(-10, -5, 5);\n     * // => -5\n     *\n     * _.clamp(10, -5, 5);\n     * // => 5\n     */\n    function clamp(number, lower, upper) {\n      if (upper === undefined) {\n        upper = lower;\n        lower = undefined;\n      }\n      if (upper !== undefined) {\n        upper = toNumber(upper);\n        upper = upper === upper ? upper : 0;\n      }\n      if (lower !== undefined) {\n        lower = toNumber(lower);\n        lower = lower === lower ? lower : 0;\n      }\n      return baseClamp(toNumber(number), lower, upper);\n    }\n\n    /**\n     * Checks if `n` is between `start` and up to, but not including, `end`. If\n     * `end` is not specified, it's set to `start` with `start` then set to `0`.\n     * If `start` is greater than `end` the params are swapped to support\n     * negative ranges.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.3.0\n     * @category Number\n     * @param {number} number The number to check.\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n     * @see _.range, _.rangeRight\n     * @example\n     *\n     * _.inRange(3, 2, 4);\n     * // => true\n     *\n     * _.inRange(4, 8);\n     * // => true\n     *\n     * _.inRange(4, 2);\n     * // => false\n     *\n     * _.inRange(2, 2);\n     * // => false\n     *\n     * _.inRange(1.2, 2);\n     * // => true\n     *\n     * _.inRange(5.2, 4);\n     * // => false\n     *\n     * _.inRange(-3, -2, -6);\n     * // => true\n     */\n    function inRange(number, start, end) {\n      start = toFinite(start);\n      if (end === undefined) {\n        end = start;\n        start = 0;\n      } else {\n        end = toFinite(end);\n      }\n      number = toNumber(number);\n      return baseInRange(number, start, end);\n    }\n\n    /**\n     * Produces a random number between the inclusive `lower` and `upper` bounds.\n     * If only one argument is provided a number between `0` and the given number\n     * is returned. If `floating` is `true`, or either `lower` or `upper` are\n     * floats, a floating-point number is returned instead of an integer.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @memberOf _\n     * @since 0.7.0\n     * @category Number\n     * @param {number} [lower=0] The lower bound.\n     * @param {number} [upper=1] The upper bound.\n     * @param {boolean} [floating] Specify returning a floating-point number.\n     * @returns {number} Returns the random number.\n     * @example\n     *\n     * _.random(0, 5);\n     * // => an integer between 0 and 5\n     *\n     * _.random(5);\n     * // => also an integer between 0 and 5\n     *\n     * _.random(5, true);\n     * // => a floating-point number between 0 and 5\n     *\n     * _.random(1.2, 5.2);\n     * // => a floating-point number between 1.2 and 5.2\n     */\n    function random(lower, upper, floating) {\n      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {\n        upper = floating = undefined;\n      }\n      if (floating === undefined) {\n        if (typeof upper == 'boolean') {\n          floating = upper;\n          upper = undefined;\n        }\n        else if (typeof lower == 'boolean') {\n          floating = lower;\n          lower = undefined;\n        }\n      }\n      if (lower === undefined && upper === undefined) {\n        lower = 0;\n        upper = 1;\n      }\n      else {\n        lower = toFinite(lower);\n        if (upper === undefined) {\n          upper = lower;\n          lower = 0;\n        } else {\n          upper = toFinite(upper);\n        }\n      }\n      if (lower > upper) {\n        var temp = lower;\n        lower = upper;\n        upper = temp;\n      }\n      if (floating || lower % 1 || upper % 1) {\n        var rand = nativeRandom();\n        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);\n      }\n      return baseRandom(lower, upper);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the camel cased string.\n     * @example\n     *\n     * _.camelCase('Foo Bar');\n     * // => 'fooBar'\n     *\n     * _.camelCase('--foo-bar--');\n     * // => 'fooBar'\n     *\n     * _.camelCase('__FOO_BAR__');\n     * // => 'fooBar'\n     */\n    var camelCase = createCompounder(function(result, word, index) {\n      word = word.toLowerCase();\n      return result + (index ? capitalize(word) : word);\n    });\n\n    /**\n     * Converts the first character of `string` to upper case and the remaining\n     * to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to capitalize.\n     * @returns {string} Returns the capitalized string.\n     * @example\n     *\n     * _.capitalize('FRED');\n     * // => 'Fred'\n     */\n    function capitalize(string) {\n      return upperFirst(toString(string).toLowerCase());\n    }\n\n    /**\n     * Deburrs `string` by converting\n     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n     * letters to basic Latin letters and removing\n     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to deburr.\n     * @returns {string} Returns the deburred string.\n     * @example\n     *\n     * _.deburr('déjà vu');\n     * // => 'deja vu'\n     */\n    function deburr(string) {\n      string = toString(string);\n      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n    }\n\n    /**\n     * Checks if `string` ends with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=string.length] The position to search up to.\n     * @returns {boolean} Returns `true` if `string` ends with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.endsWith('abc', 'c');\n     * // => true\n     *\n     * _.endsWith('abc', 'b');\n     * // => false\n     *\n     * _.endsWith('abc', 'b', 2);\n     * // => true\n     */\n    function endsWith(string, target, position) {\n      string = toString(string);\n      target = baseToString(target);\n\n      var length = string.length;\n      position = position === undefined\n        ? length\n        : baseClamp(toInteger(position), 0, length);\n\n      var end = position;\n      position -= target.length;\n      return position >= 0 && string.slice(position, end) == target;\n    }\n\n    /**\n     * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n     * corresponding HTML entities.\n     *\n     * **Note:** No other characters are escaped. To escape additional\n     * characters use a third-party library like [_he_](https://mths.be/he).\n     *\n     * Though the \">\" character is escaped for symmetry, characters like\n     * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n     * unless they're part of a tag or unquoted attribute value. See\n     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n     * (under \"semi-related fun fact\") for more details.\n     *\n     * When working with HTML you should always\n     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n     * XSS vectors.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escape('fred, barney, & pebbles');\n     * // => 'fred, barney, &amp; pebbles'\n     */\n    function escape(string) {\n      string = toString(string);\n      return (string && reHasUnescapedHtml.test(string))\n        ? string.replace(reUnescapedHtml, escapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n     * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to escape.\n     * @returns {string} Returns the escaped string.\n     * @example\n     *\n     * _.escapeRegExp('[lodash](https://lodash.com/)');\n     * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n     */\n    function escapeRegExp(string) {\n      string = toString(string);\n      return (string && reHasRegExpChar.test(string))\n        ? string.replace(reRegExpChar, '\\\\$&')\n        : string;\n    }\n\n    /**\n     * Converts `string` to\n     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the kebab cased string.\n     * @example\n     *\n     * _.kebabCase('Foo Bar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('fooBar');\n     * // => 'foo-bar'\n     *\n     * _.kebabCase('__FOO_BAR__');\n     * // => 'foo-bar'\n     */\n    var kebabCase = createCompounder(function(result, word, index) {\n      return result + (index ? '-' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts `string`, as space separated words, to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.lowerCase('--Foo-Bar--');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('fooBar');\n     * // => 'foo bar'\n     *\n     * _.lowerCase('__FOO_BAR__');\n     * // => 'foo bar'\n     */\n    var lowerCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Converts the first character of `string` to lower case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.lowerFirst('Fred');\n     * // => 'fred'\n     *\n     * _.lowerFirst('FRED');\n     * // => 'fRED'\n     */\n    var lowerFirst = createCaseFirst('toLowerCase');\n\n    /**\n     * Pads `string` on the left and right sides if it's shorter than `length`.\n     * Padding characters are truncated if they can't be evenly divided by `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.pad('abc', 8);\n     * // => '  abc   '\n     *\n     * _.pad('abc', 8, '_-');\n     * // => '_-abc_-_'\n     *\n     * _.pad('abc', 3);\n     * // => 'abc'\n     */\n    function pad(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      if (!length || strLength >= length) {\n        return string;\n      }\n      var mid = (length - strLength) / 2;\n      return (\n        createPadding(nativeFloor(mid), chars) +\n        string +\n        createPadding(nativeCeil(mid), chars)\n      );\n    }\n\n    /**\n     * Pads `string` on the right side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padEnd('abc', 6);\n     * // => 'abc   '\n     *\n     * _.padEnd('abc', 6, '_-');\n     * // => 'abc_-_'\n     *\n     * _.padEnd('abc', 3);\n     * // => 'abc'\n     */\n    function padEnd(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (string + createPadding(length - strLength, chars))\n        : string;\n    }\n\n    /**\n     * Pads `string` on the left side if it's shorter than `length`. Padding\n     * characters are truncated if they exceed `length`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to pad.\n     * @param {number} [length=0] The padding length.\n     * @param {string} [chars=' '] The string used as padding.\n     * @returns {string} Returns the padded string.\n     * @example\n     *\n     * _.padStart('abc', 6);\n     * // => '   abc'\n     *\n     * _.padStart('abc', 6, '_-');\n     * // => '_-_abc'\n     *\n     * _.padStart('abc', 3);\n     * // => 'abc'\n     */\n    function padStart(string, length, chars) {\n      string = toString(string);\n      length = toInteger(length);\n\n      var strLength = length ? stringSize(string) : 0;\n      return (length && strLength < length)\n        ? (createPadding(length - strLength, chars) + string)\n        : string;\n    }\n\n    /**\n     * Converts `string` to an integer of the specified radix. If `radix` is\n     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a\n     * hexadecimal, in which case a `radix` of `16` is used.\n     *\n     * **Note:** This method aligns with the\n     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n     *\n     * @static\n     * @memberOf _\n     * @since 1.1.0\n     * @category String\n     * @param {string} string The string to convert.\n     * @param {number} [radix=10] The radix to interpret `value` by.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {number} Returns the converted integer.\n     * @example\n     *\n     * _.parseInt('08');\n     * // => 8\n     *\n     * _.map(['6', '08', '10'], _.parseInt);\n     * // => [6, 8, 10]\n     */\n    function parseInt(string, radix, guard) {\n      if (guard || radix == null) {\n        radix = 0;\n      } else if (radix) {\n        radix = +radix;\n      }\n      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);\n    }\n\n    /**\n     * Repeats the given string `n` times.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to repeat.\n     * @param {number} [n=1] The number of times to repeat the string.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the repeated string.\n     * @example\n     *\n     * _.repeat('*', 3);\n     * // => '***'\n     *\n     * _.repeat('abc', 2);\n     * // => 'abcabc'\n     *\n     * _.repeat('abc', 0);\n     * // => ''\n     */\n    function repeat(string, n, guard) {\n      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {\n        n = 1;\n      } else {\n        n = toInteger(n);\n      }\n      return baseRepeat(toString(string), n);\n    }\n\n    /**\n     * Replaces matches for `pattern` in `string` with `replacement`.\n     *\n     * **Note:** This method is based on\n     * [`String#replace`](https://mdn.io/String/replace).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to modify.\n     * @param {RegExp|string} pattern The pattern to replace.\n     * @param {Function|string} replacement The match replacement.\n     * @returns {string} Returns the modified string.\n     * @example\n     *\n     * _.replace('Hi Fred', 'Fred', 'Barney');\n     * // => 'Hi Barney'\n     */\n    function replace() {\n      var args = arguments,\n          string = toString(args[0]);\n\n      return args.length < 3 ? string : string.replace(args[1], args[2]);\n    }\n\n    /**\n     * Converts `string` to\n     * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the snake cased string.\n     * @example\n     *\n     * _.snakeCase('Foo Bar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('fooBar');\n     * // => 'foo_bar'\n     *\n     * _.snakeCase('--FOO-BAR--');\n     * // => 'foo_bar'\n     */\n    var snakeCase = createCompounder(function(result, word, index) {\n      return result + (index ? '_' : '') + word.toLowerCase();\n    });\n\n    /**\n     * Splits `string` by `separator`.\n     *\n     * **Note:** This method is based on\n     * [`String#split`](https://mdn.io/String/split).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to split.\n     * @param {RegExp|string} separator The separator pattern to split by.\n     * @param {number} [limit] The length to truncate results to.\n     * @returns {Array} Returns the string segments.\n     * @example\n     *\n     * _.split('a-b-c', '-', 2);\n     * // => ['a', 'b']\n     */\n    function split(string, separator, limit) {\n      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n        separator = limit = undefined;\n      }\n      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n      if (!limit) {\n        return [];\n      }\n      string = toString(string);\n      if (string && (\n            typeof separator == 'string' ||\n            (separator != null && !isRegExp(separator))\n          )) {\n        separator = baseToString(separator);\n        if (!separator && hasUnicode(string)) {\n          return castSlice(stringToArray(string), 0, limit);\n        }\n      }\n      return string.split(separator, limit);\n    }\n\n    /**\n     * Converts `string` to\n     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n     *\n     * @static\n     * @memberOf _\n     * @since 3.1.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the start cased string.\n     * @example\n     *\n     * _.startCase('--foo-bar--');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('fooBar');\n     * // => 'Foo Bar'\n     *\n     * _.startCase('__FOO_BAR__');\n     * // => 'FOO BAR'\n     */\n    var startCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + upperFirst(word);\n    });\n\n    /**\n     * Checks if `string` starts with the given target string.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {string} [target] The string to search for.\n     * @param {number} [position=0] The position to search from.\n     * @returns {boolean} Returns `true` if `string` starts with `target`,\n     *  else `false`.\n     * @example\n     *\n     * _.startsWith('abc', 'a');\n     * // => true\n     *\n     * _.startsWith('abc', 'b');\n     * // => false\n     *\n     * _.startsWith('abc', 'b', 1);\n     * // => true\n     */\n    function startsWith(string, target, position) {\n      string = toString(string);\n      position = position == null\n        ? 0\n        : baseClamp(toInteger(position), 0, string.length);\n\n      target = baseToString(target);\n      return string.slice(position, position + target.length) == target;\n    }\n\n    /**\n     * Creates a compiled template function that can interpolate data properties\n     * in \"interpolate\" delimiters, HTML-escape interpolated data properties in\n     * \"escape\" delimiters, and execute JavaScript in \"evaluate\" delimiters. Data\n     * properties may be accessed as free variables in the template. If a setting\n     * object is given, it takes precedence over `_.templateSettings` values.\n     *\n     * **Note:** In the development build `_.template` utilizes\n     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)\n     * for easier debugging.\n     *\n     * For more information on precompiling templates see\n     * [lodash's custom builds documentation](https://lodash.com/custom-builds).\n     *\n     * For more information on Chrome extension sandboxes see\n     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category String\n     * @param {string} [string=''] The template string.\n     * @param {Object} [options={}] The options object.\n     * @param {RegExp} [options.escape=_.templateSettings.escape]\n     *  The HTML \"escape\" delimiter.\n     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]\n     *  The \"evaluate\" delimiter.\n     * @param {Object} [options.imports=_.templateSettings.imports]\n     *  An object to import into the template as free variables.\n     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]\n     *  The \"interpolate\" delimiter.\n     * @param {string} [options.sourceURL='lodash.templateSources[n]']\n     *  The sourceURL of the compiled template.\n     * @param {string} [options.variable='obj']\n     *  The data object variable name.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Function} Returns the compiled template function.\n     * @example\n     *\n     * // Use the \"interpolate\" delimiter to create a compiled template.\n     * var compiled = _.template('hello <%= user %>!');\n     * compiled({ 'user': 'fred' });\n     * // => 'hello fred!'\n     *\n     * // Use the HTML \"escape\" delimiter to escape data property values.\n     * var compiled = _.template('<b><%- value %></b>');\n     * compiled({ 'value': '<script>' });\n     * // => '<b>&lt;script&gt;</b>'\n     *\n     * // Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\n     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the internal `print` function in \"evaluate\" delimiters.\n     * var compiled = _.template('<% print(\"hello \" + user); %>!');\n     * compiled({ 'user': 'barney' });\n     * // => 'hello barney!'\n     *\n     * // Use the ES template literal delimiter as an \"interpolate\" delimiter.\n     * // Disable support by replacing the \"interpolate\" delimiter.\n     * var compiled = _.template('hello ${ user }!');\n     * compiled({ 'user': 'pebbles' });\n     * // => 'hello pebbles!'\n     *\n     * // Use backslashes to treat delimiters as plain text.\n     * var compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\n     * compiled({ 'value': 'ignored' });\n     * // => '<%- value %>'\n     *\n     * // Use the `imports` option to import `jQuery` as `jq`.\n     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\n     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });\n     * compiled({ 'users': ['fred', 'barney'] });\n     * // => '<li>fred</li><li>barney</li>'\n     *\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\n     * compiled(data);\n     * // => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n     *\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\n     * compiled.source;\n     * // => function(data) {\n     * //   var __t, __p = '';\n     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n     * //   return __p;\n     * // }\n     *\n     * // Use custom template delimiters.\n     * _.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\n     * var compiled = _.template('hello {{ user }}!');\n     * compiled({ 'user': 'mustache' });\n     * // => 'hello mustache!'\n     *\n     * // Use the `source` property to inline compiled templates for meaningful\n     * // line numbers in error messages and stack traces.\n     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n     *   var JST = {\\\n     *     \"main\": ' + _.template(mainText).source + '\\\n     *   };\\\n     * ');\n     */\n    function template(string, options, guard) {\n      // Based on John Resig's `tmpl` implementation\n      // (http://ejohn.org/blog/javascript-micro-templating/)\n      // and Laura Doktorova's doT.js (https://github.com/olado/doT).\n      var settings = lodash.templateSettings;\n\n      if (guard && isIterateeCall(string, options, guard)) {\n        options = undefined;\n      }\n      string = toString(string);\n      options = assignInWith({}, options, settings, customDefaultsAssignIn);\n\n      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),\n          importsKeys = keys(imports),\n          importsValues = baseValues(imports, importsKeys);\n\n      var isEscaping,\n          isEvaluating,\n          index = 0,\n          interpolate = options.interpolate || reNoMatch,\n          source = \"__p += '\";\n\n      // Compile the regexp to match each delimiter.\n      var reDelimiters = RegExp(\n        (options.escape || reNoMatch).source + '|' +\n        interpolate.source + '|' +\n        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +\n        (options.evaluate || reNoMatch).source + '|$'\n      , 'g');\n\n      // Use a sourceURL for easier debugging.\n      // The sourceURL gets injected into the source that's eval-ed, so be careful\n      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.\n      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.\n      var sourceURL = '//# sourceURL=' +\n        (hasOwnProperty.call(options, 'sourceURL')\n          ? (options.sourceURL + '').replace(/[\\r\\n]/g, ' ')\n          : ('lodash.templateSources[' + (++templateCounter) + ']')\n        ) + '\\n';\n\n      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {\n        interpolateValue || (interpolateValue = esTemplateValue);\n\n        // Escape characters that can't be included in string literals.\n        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);\n\n        // Replace delimiters with snippets.\n        if (escapeValue) {\n          isEscaping = true;\n          source += \"' +\\n__e(\" + escapeValue + \") +\\n'\";\n        }\n        if (evaluateValue) {\n          isEvaluating = true;\n          source += \"';\\n\" + evaluateValue + \";\\n__p += '\";\n        }\n        if (interpolateValue) {\n          source += \"' +\\n((__t = (\" + interpolateValue + \")) == null ? '' : __t) +\\n'\";\n        }\n        index = offset + match.length;\n\n        // The JS engine embedded in Adobe products needs `match` returned in\n        // order to produce the correct `offset` value.\n        return match;\n      });\n\n      source += \"';\\n\";\n\n      // If `variable` is not specified wrap a with-statement around the generated\n      // code to add the data object to the top of the scope chain.\n      // Like with sourceURL, we take care to not check the option's prototype,\n      // as this configuration is a code injection vector.\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\n      if (!variable) {\n        source = 'with (obj) {\\n' + source + '\\n}\\n';\n      }\n      // Cleanup code by stripping empty strings.\n      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)\n        .replace(reEmptyStringMiddle, '$1')\n        .replace(reEmptyStringTrailing, '$1;');\n\n      // Frame code as the function body.\n      source = 'function(' + (variable || 'obj') + ') {\\n' +\n        (variable\n          ? ''\n          : 'obj || (obj = {});\\n'\n        ) +\n        \"var __t, __p = ''\" +\n        (isEscaping\n           ? ', __e = _.escape'\n           : ''\n        ) +\n        (isEvaluating\n          ? ', __j = Array.prototype.join;\\n' +\n            \"function print() { __p += __j.call(arguments, '') }\\n\"\n          : ';\\n'\n        ) +\n        source +\n        'return __p\\n}';\n\n      var result = attempt(function() {\n        return Function(importsKeys, sourceURL + 'return ' + source)\n          .apply(undefined, importsValues);\n      });\n\n      // Provide the compiled function's source by its `toString` method or\n      // the `source` property as a convenience for inlining compiled templates.\n      result.source = source;\n      if (isError(result)) {\n        throw result;\n      }\n      return result;\n    }\n\n    /**\n     * Converts `string`, as a whole, to lower case just like\n     * [String#toLowerCase](https://mdn.io/toLowerCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the lower cased string.\n     * @example\n     *\n     * _.toLower('--Foo-Bar--');\n     * // => '--foo-bar--'\n     *\n     * _.toLower('fooBar');\n     * // => 'foobar'\n     *\n     * _.toLower('__FOO_BAR__');\n     * // => '__foo_bar__'\n     */\n    function toLower(value) {\n      return toString(value).toLowerCase();\n    }\n\n    /**\n     * Converts `string`, as a whole, to upper case just like\n     * [String#toUpperCase](https://mdn.io/toUpperCase).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.toUpper('--foo-bar--');\n     * // => '--FOO-BAR--'\n     *\n     * _.toUpper('fooBar');\n     * // => 'FOOBAR'\n     *\n     * _.toUpper('__foo_bar__');\n     * // => '__FOO_BAR__'\n     */\n    function toUpper(value) {\n      return toString(value).toUpperCase();\n    }\n\n    /**\n     * Removes leading and trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trim('  abc  ');\n     * // => 'abc'\n     *\n     * _.trim('-_-abc-_-', '_-');\n     * // => 'abc'\n     *\n     * _.map(['  foo  ', '  bar  '], _.trim);\n     * // => ['foo', 'bar']\n     */\n    function trim(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrim, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          chrSymbols = stringToArray(chars),\n          start = charsStartIndex(strSymbols, chrSymbols),\n          end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n      return castSlice(strSymbols, start, end).join('');\n    }\n\n    /**\n     * Removes trailing whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimEnd('  abc  ');\n     * // => '  abc'\n     *\n     * _.trimEnd('-_-abc-_-', '_-');\n     * // => '-_-abc'\n     */\n    function trimEnd(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimEnd, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;\n\n      return castSlice(strSymbols, 0, end).join('');\n    }\n\n    /**\n     * Removes leading whitespace or specified characters from `string`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to trim.\n     * @param {string} [chars=whitespace] The characters to trim.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {string} Returns the trimmed string.\n     * @example\n     *\n     * _.trimStart('  abc  ');\n     * // => 'abc  '\n     *\n     * _.trimStart('-_-abc-_-', '_-');\n     * // => 'abc-_-'\n     */\n    function trimStart(string, chars, guard) {\n      string = toString(string);\n      if (string && (guard || chars === undefined)) {\n        return string.replace(reTrimStart, '');\n      }\n      if (!string || !(chars = baseToString(chars))) {\n        return string;\n      }\n      var strSymbols = stringToArray(string),\n          start = charsStartIndex(strSymbols, stringToArray(chars));\n\n      return castSlice(strSymbols, start).join('');\n    }\n\n    /**\n     * Truncates `string` if it's longer than the given maximum string length.\n     * The last characters of the truncated string are replaced with the omission\n     * string which defaults to \"...\".\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to truncate.\n     * @param {Object} [options={}] The options object.\n     * @param {number} [options.length=30] The maximum string length.\n     * @param {string} [options.omission='...'] The string to indicate text is omitted.\n     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n     * @returns {string} Returns the truncated string.\n     * @example\n     *\n     * _.truncate('hi-diddly-ho there, neighborino');\n     * // => 'hi-diddly-ho there, neighbo...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': ' '\n     * });\n     * // => 'hi-diddly-ho there,...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'length': 24,\n     *   'separator': /,? +/\n     * });\n     * // => 'hi-diddly-ho there...'\n     *\n     * _.truncate('hi-diddly-ho there, neighborino', {\n     *   'omission': ' [...]'\n     * });\n     * // => 'hi-diddly-ho there, neig [...]'\n     */\n    function truncate(string, options) {\n      var length = DEFAULT_TRUNC_LENGTH,\n          omission = DEFAULT_TRUNC_OMISSION;\n\n      if (isObject(options)) {\n        var separator = 'separator' in options ? options.separator : separator;\n        length = 'length' in options ? toInteger(options.length) : length;\n        omission = 'omission' in options ? baseToString(options.omission) : omission;\n      }\n      string = toString(string);\n\n      var strLength = string.length;\n      if (hasUnicode(string)) {\n        var strSymbols = stringToArray(string);\n        strLength = strSymbols.length;\n      }\n      if (length >= strLength) {\n        return string;\n      }\n      var end = length - stringSize(omission);\n      if (end < 1) {\n        return omission;\n      }\n      var result = strSymbols\n        ? castSlice(strSymbols, 0, end).join('')\n        : string.slice(0, end);\n\n      if (separator === undefined) {\n        return result + omission;\n      }\n      if (strSymbols) {\n        end += (result.length - end);\n      }\n      if (isRegExp(separator)) {\n        if (string.slice(end).search(separator)) {\n          var match,\n              substring = result;\n\n          if (!separator.global) {\n            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');\n          }\n          separator.lastIndex = 0;\n          while ((match = separator.exec(substring))) {\n            var newEnd = match.index;\n          }\n          result = result.slice(0, newEnd === undefined ? end : newEnd);\n        }\n      } else if (string.indexOf(baseToString(separator), end) != end) {\n        var index = result.lastIndexOf(separator);\n        if (index > -1) {\n          result = result.slice(0, index);\n        }\n      }\n      return result + omission;\n    }\n\n    /**\n     * The inverse of `_.escape`; this method converts the HTML entities\n     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to\n     * their corresponding characters.\n     *\n     * **Note:** No other HTML entities are unescaped. To unescape additional\n     * HTML entities use a third-party library like [_he_](https://mths.be/he).\n     *\n     * @static\n     * @memberOf _\n     * @since 0.6.0\n     * @category String\n     * @param {string} [string=''] The string to unescape.\n     * @returns {string} Returns the unescaped string.\n     * @example\n     *\n     * _.unescape('fred, barney, &amp; pebbles');\n     * // => 'fred, barney, & pebbles'\n     */\n    function unescape(string) {\n      string = toString(string);\n      return (string && reHasEscapedHtml.test(string))\n        ? string.replace(reEscapedHtml, unescapeHtmlChar)\n        : string;\n    }\n\n    /**\n     * Converts `string`, as space separated words, to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the upper cased string.\n     * @example\n     *\n     * _.upperCase('--foo-bar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('fooBar');\n     * // => 'FOO BAR'\n     *\n     * _.upperCase('__foo_bar__');\n     * // => 'FOO BAR'\n     */\n    var upperCase = createCompounder(function(result, word, index) {\n      return result + (index ? ' ' : '') + word.toUpperCase();\n    });\n\n    /**\n     * Converts the first character of `string` to upper case.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category String\n     * @param {string} [string=''] The string to convert.\n     * @returns {string} Returns the converted string.\n     * @example\n     *\n     * _.upperFirst('fred');\n     * // => 'Fred'\n     *\n     * _.upperFirst('FRED');\n     * // => 'FRED'\n     */\n    var upperFirst = createCaseFirst('toUpperCase');\n\n    /**\n     * Splits `string` into an array of its words.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category String\n     * @param {string} [string=''] The string to inspect.\n     * @param {RegExp|string} [pattern] The pattern to match words.\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n     * @returns {Array} Returns the words of `string`.\n     * @example\n     *\n     * _.words('fred, barney, & pebbles');\n     * // => ['fred', 'barney', 'pebbles']\n     *\n     * _.words('fred, barney, & pebbles', /[^, ]+/g);\n     * // => ['fred', 'barney', '&', 'pebbles']\n     */\n    function words(string, pattern, guard) {\n      string = toString(string);\n      pattern = guard ? undefined : pattern;\n\n      if (pattern === undefined) {\n        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n      }\n      return string.match(pattern) || [];\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Attempts to invoke `func`, returning either the result or the caught error\n     * object. Any additional arguments are provided to `func` when it's invoked.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Function} func The function to attempt.\n     * @param {...*} [args] The arguments to invoke `func` with.\n     * @returns {*} Returns the `func` result or error object.\n     * @example\n     *\n     * // Avoid throwing errors for invalid selectors.\n     * var elements = _.attempt(function(selector) {\n     *   return document.querySelectorAll(selector);\n     * }, '>_>');\n     *\n     * if (_.isError(elements)) {\n     *   elements = [];\n     * }\n     */\n    var attempt = baseRest(function(func, args) {\n      try {\n        return apply(func, undefined, args);\n      } catch (e) {\n        return isError(e) ? e : new Error(e);\n      }\n    });\n\n    /**\n     * Binds methods of an object to the object itself, overwriting the existing\n     * method.\n     *\n     * **Note:** This method doesn't set the \"length\" property of bound functions.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Object} object The object to bind and assign the bound methods to.\n     * @param {...(string|string[])} methodNames The object method names to bind.\n     * @returns {Object} Returns `object`.\n     * @example\n     *\n     * var view = {\n     *   'label': 'docs',\n     *   'click': function() {\n     *     console.log('clicked ' + this.label);\n     *   }\n     * };\n     *\n     * _.bindAll(view, ['click']);\n     * jQuery(element).on('click', view.click);\n     * // => Logs 'clicked docs' when clicked.\n     */\n    var bindAll = flatRest(function(object, methodNames) {\n      arrayEach(methodNames, function(key) {\n        key = toKey(key);\n        baseAssignValue(object, key, bind(object[key], object));\n      });\n      return object;\n    });\n\n    /**\n     * Creates a function that iterates over `pairs` and invokes the corresponding\n     * function of the first predicate to return truthy. The predicate-function\n     * pairs are invoked with the `this` binding and arguments of the created\n     * function.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Array} pairs The predicate-function pairs.\n     * @returns {Function} Returns the new composite function.\n     * @example\n     *\n     * var func = _.cond([\n     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],\n     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n     *   [_.stubTrue,                      _.constant('no match')]\n     * ]);\n     *\n     * func({ 'a': 1, 'b': 2 });\n     * // => 'matches A'\n     *\n     * func({ 'a': 0, 'b': 1 });\n     * // => 'matches B'\n     *\n     * func({ 'a': '1', 'b': '2' });\n     * // => 'no match'\n     */\n    function cond(pairs) {\n      var length = pairs == null ? 0 : pairs.length,\n          toIteratee = getIteratee();\n\n      pairs = !length ? [] : arrayMap(pairs, function(pair) {\n        if (typeof pair[1] != 'function') {\n          throw new TypeError(FUNC_ERROR_TEXT);\n        }\n        return [toIteratee(pair[0]), pair[1]];\n      });\n\n      return baseRest(function(args) {\n        var index = -1;\n        while (++index < length) {\n          var pair = pairs[index];\n          if (apply(pair[0], this, args)) {\n            return apply(pair[1], this, args);\n          }\n        }\n      });\n    }\n\n    /**\n     * Creates a function that invokes the predicate properties of `source` with\n     * the corresponding property values of a given object, returning `true` if\n     * all predicates return truthy, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.conformsTo` with\n     * `source` partially applied.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {Object} source The object of property predicates to conform to.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 2, 'b': 1 },\n     *   { 'a': 1, 'b': 2 }\n     * ];\n     *\n     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n     * // => [{ 'a': 1, 'b': 2 }]\n     */\n    function conforms(source) {\n      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that returns `value`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {*} value The value to return from the new function.\n     * @returns {Function} Returns the new constant function.\n     * @example\n     *\n     * var objects = _.times(2, _.constant({ 'a': 1 }));\n     *\n     * console.log(objects);\n     * // => [{ 'a': 1 }, { 'a': 1 }]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => true\n     */\n    function constant(value) {\n      return function() {\n        return value;\n      };\n    }\n\n    /**\n     * Checks `value` to determine whether a default value should be returned in\n     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n     * or `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.14.0\n     * @category Util\n     * @param {*} value The value to check.\n     * @param {*} defaultValue The default value.\n     * @returns {*} Returns the resolved value.\n     * @example\n     *\n     * _.defaultTo(1, 10);\n     * // => 1\n     *\n     * _.defaultTo(undefined, 10);\n     * // => 10\n     */\n    function defaultTo(value, defaultValue) {\n      return (value == null || value !== value) ? defaultValue : value;\n    }\n\n    /**\n     * Creates a function that returns the result of invoking the given functions\n     * with the `this` binding of the created function, where each successive\n     * invocation is supplied the return value of the previous.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flowRight\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flow([_.add, square]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flow = createFlow();\n\n    /**\n     * This method is like `_.flow` except that it creates a function that\n     * invokes the given functions from right to left.\n     *\n     * @static\n     * @since 3.0.0\n     * @memberOf _\n     * @category Util\n     * @param {...(Function|Function[])} [funcs] The functions to invoke.\n     * @returns {Function} Returns the new composite function.\n     * @see _.flow\n     * @example\n     *\n     * function square(n) {\n     *   return n * n;\n     * }\n     *\n     * var addSquare = _.flowRight([square, _.add]);\n     * addSquare(1, 2);\n     * // => 9\n     */\n    var flowRight = createFlow(true);\n\n    /**\n     * This method returns the first argument it receives.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {*} value Any value.\n     * @returns {*} Returns `value`.\n     * @example\n     *\n     * var object = { 'a': 1 };\n     *\n     * console.log(_.identity(object) === object);\n     * // => true\n     */\n    function identity(value) {\n      return value;\n    }\n\n    /**\n     * Creates a function that invokes `func` with the arguments of the created\n     * function. If `func` is a property name, the created function returns the\n     * property value for a given element. If `func` is an array or object, the\n     * created function returns `true` for elements that contain the equivalent\n     * source properties, otherwise it returns `false`.\n     *\n     * @static\n     * @since 4.0.0\n     * @memberOf _\n     * @category Util\n     * @param {*} [func=_.identity] The value to convert to a callback.\n     * @returns {Function} Returns the callback.\n     * @example\n     *\n     * var users = [\n     *   { 'user': 'barney', 'age': 36, 'active': true },\n     *   { 'user': 'fred',   'age': 40, 'active': false }\n     * ];\n     *\n     * // The `_.matches` iteratee shorthand.\n     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]\n     *\n     * // The `_.matchesProperty` iteratee shorthand.\n     * _.filter(users, _.iteratee(['user', 'fred']));\n     * // => [{ 'user': 'fred', 'age': 40 }]\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.map(users, _.iteratee('user'));\n     * // => ['barney', 'fred']\n     *\n     * // Create custom iteratee shorthands.\n     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {\n     *     return func.test(string);\n     *   };\n     * });\n     *\n     * _.filter(['abc', 'def'], /ef/);\n     * // => ['def']\n     */\n    function iteratee(func) {\n      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between a given\n     * object and `source`, returning `true` if the given object has equivalent\n     * property values, else `false`.\n     *\n     * **Note:** The created function is equivalent to `_.isMatch` with `source`\n     * partially applied.\n     *\n     * Partial comparisons will match empty array and empty object `source`\n     * values against any array or object value, respectively. See `_.isEqual`\n     * for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} source The object of property values to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n     */\n    function matches(source) {\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that performs a partial deep comparison between the\n     * value at `path` of a given object to `srcValue`, returning `true` if the\n     * object value is equivalent, else `false`.\n     *\n     * **Note:** Partial comparisons will match empty array and empty object\n     * `srcValue` values against any array or object value, respectively. See\n     * `_.isEqual` for a list of supported value comparisons.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.2.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @param {*} srcValue The value to match.\n     * @returns {Function} Returns the new spec function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': 1, 'b': 2, 'c': 3 },\n     *   { 'a': 4, 'b': 5, 'c': 6 }\n     * ];\n     *\n     * _.find(objects, _.matchesProperty('a', 4));\n     * // => { 'a': 4, 'b': 5, 'c': 6 }\n     */\n    function matchesProperty(path, srcValue) {\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\n    }\n\n    /**\n     * Creates a function that invokes the method at `path` of a given object.\n     * Any additional arguments are provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Array|string} path The path of the method to invoke.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': _.constant(2) } },\n     *   { 'a': { 'b': _.constant(1) } }\n     * ];\n     *\n     * _.map(objects, _.method('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(objects, _.method(['a', 'b']));\n     * // => [2, 1]\n     */\n    var method = baseRest(function(path, args) {\n      return function(object) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * The opposite of `_.method`; this method creates a function that invokes\n     * the method at a given path of `object`. Any additional arguments are\n     * provided to the invoked method.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.7.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @param {...*} [args] The arguments to invoke the method with.\n     * @returns {Function} Returns the new invoker function.\n     * @example\n     *\n     * var array = _.times(3, _.constant),\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.methodOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));\n     * // => [2, 0]\n     */\n    var methodOf = baseRest(function(object, args) {\n      return function(path) {\n        return baseInvoke(object, path, args);\n      };\n    });\n\n    /**\n     * Adds all own enumerable string keyed function properties of a source\n     * object to the destination object. If `object` is a function, then methods\n     * are added to its prototype as well.\n     *\n     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to\n     * avoid conflicts caused by modifying the original.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {Function|Object} [object=lodash] The destination object.\n     * @param {Object} source The object of functions to add.\n     * @param {Object} [options={}] The options object.\n     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.\n     * @returns {Function|Object} Returns `object`.\n     * @example\n     *\n     * function vowels(string) {\n     *   return _.filter(string, function(v) {\n     *     return /[aeiou]/i.test(v);\n     *   });\n     * }\n     *\n     * _.mixin({ 'vowels': vowels });\n     * _.vowels('fred');\n     * // => ['e']\n     *\n     * _('fred').vowels().value();\n     * // => ['e']\n     *\n     * _.mixin({ 'vowels': vowels }, { 'chain': false });\n     * _('fred').vowels();\n     * // => ['e']\n     */\n    function mixin(object, source, options) {\n      var props = keys(source),\n          methodNames = baseFunctions(source, props);\n\n      if (options == null &&\n          !(isObject(source) && (methodNames.length || !props.length))) {\n        options = source;\n        source = object;\n        object = this;\n        methodNames = baseFunctions(source, keys(source));\n      }\n      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,\n          isFunc = isFunction(object);\n\n      arrayEach(methodNames, function(methodName) {\n        var func = source[methodName];\n        object[methodName] = func;\n        if (isFunc) {\n          object.prototype[methodName] = function() {\n            var chainAll = this.__chain__;\n            if (chain || chainAll) {\n              var result = object(this.__wrapped__),\n                  actions = result.__actions__ = copyArray(this.__actions__);\n\n              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });\n              result.__chain__ = chainAll;\n              return result;\n            }\n            return func.apply(object, arrayPush([this.value()], arguments));\n          };\n        }\n      });\n\n      return object;\n    }\n\n    /**\n     * Reverts the `_` variable to its previous value and returns a reference to\n     * the `lodash` function.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @returns {Function} Returns the `lodash` function.\n     * @example\n     *\n     * var lodash = _.noConflict();\n     */\n    function noConflict() {\n      if (root._ === this) {\n        root._ = oldDash;\n      }\n      return this;\n    }\n\n    /**\n     * This method returns `undefined`.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.3.0\n     * @category Util\n     * @example\n     *\n     * _.times(2, _.noop);\n     * // => [undefined, undefined]\n     */\n    function noop() {\n      // No operation performed.\n    }\n\n    /**\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\n     * the nth argument from the end is returned.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [n=0] The index of the argument to return.\n     * @returns {Function} Returns the new pass-thru function.\n     * @example\n     *\n     * var func = _.nthArg(1);\n     * func('a', 'b', 'c', 'd');\n     * // => 'b'\n     *\n     * var func = _.nthArg(-2);\n     * func('a', 'b', 'c', 'd');\n     * // => 'c'\n     */\n    function nthArg(n) {\n      n = toInteger(n);\n      return baseRest(function(args) {\n        return baseNth(args, n);\n      });\n    }\n\n    /**\n     * Creates a function that invokes `iteratees` with the arguments it receives\n     * and returns their results.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\n     *  The iteratees to invoke.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.over([Math.max, Math.min]);\n     *\n     * func(1, 2, 3, 4);\n     * // => [4, 1]\n     */\n    var over = createOver(arrayMap);\n\n    /**\n     * Creates a function that checks if **all** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overEvery([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => false\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overEvery = createOver(arrayEvery);\n\n    /**\n     * Creates a function that checks if **any** of the `predicates` return\n     * truthy when invoked with the arguments it receives.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {...(Function|Function[])} [predicates=[_.identity]]\n     *  The predicates to check.\n     * @returns {Function} Returns the new function.\n     * @example\n     *\n     * var func = _.overSome([Boolean, isFinite]);\n     *\n     * func('1');\n     * // => true\n     *\n     * func(null);\n     * // => true\n     *\n     * func(NaN);\n     * // => false\n     */\n    var overSome = createOver(arraySome);\n\n    /**\n     * Creates a function that returns the value at `path` of a given object.\n     *\n     * @static\n     * @memberOf _\n     * @since 2.4.0\n     * @category Util\n     * @param {Array|string} path The path of the property to get.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var objects = [\n     *   { 'a': { 'b': 2 } },\n     *   { 'a': { 'b': 1 } }\n     * ];\n     *\n     * _.map(objects, _.property('a.b'));\n     * // => [2, 1]\n     *\n     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n     * // => [1, 2]\n     */\n    function property(path) {\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n    }\n\n    /**\n     * The opposite of `_.property`; this method creates a function that returns\n     * the value at a given path of `object`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.0.0\n     * @category Util\n     * @param {Object} object The object to query.\n     * @returns {Function} Returns the new accessor function.\n     * @example\n     *\n     * var array = [0, 1, 2],\n     *     object = { 'a': array, 'b': array, 'c': array };\n     *\n     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));\n     * // => [2, 0]\n     *\n     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n     * // => [2, 0]\n     */\n    function propertyOf(object) {\n      return function(path) {\n        return object == null ? undefined : baseGet(object, path);\n      };\n    }\n\n    /**\n     * Creates an array of numbers (positive and/or negative) progressing from\n     * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n     * `start` is specified without an `end` or `step`. If `end` is not specified,\n     * it's set to `start` with `start` then set to `0`.\n     *\n     * **Note:** JavaScript follows the IEEE-754 standard for resolving\n     * floating-point values which can produce unexpected results.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.rangeRight\n     * @example\n     *\n     * _.range(4);\n     * // => [0, 1, 2, 3]\n     *\n     * _.range(-4);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 5);\n     * // => [1, 2, 3, 4]\n     *\n     * _.range(0, 20, 5);\n     * // => [0, 5, 10, 15]\n     *\n     * _.range(0, -4, -1);\n     * // => [0, -1, -2, -3]\n     *\n     * _.range(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.range(0);\n     * // => []\n     */\n    var range = createRange();\n\n    /**\n     * This method is like `_.range` except that it populates values in\n     * descending order.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {number} [start=0] The start of the range.\n     * @param {number} end The end of the range.\n     * @param {number} [step=1] The value to increment or decrement by.\n     * @returns {Array} Returns the range of numbers.\n     * @see _.inRange, _.range\n     * @example\n     *\n     * _.rangeRight(4);\n     * // => [3, 2, 1, 0]\n     *\n     * _.rangeRight(-4);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 5);\n     * // => [4, 3, 2, 1]\n     *\n     * _.rangeRight(0, 20, 5);\n     * // => [15, 10, 5, 0]\n     *\n     * _.rangeRight(0, -4, -1);\n     * // => [-3, -2, -1, 0]\n     *\n     * _.rangeRight(1, 4, 0);\n     * // => [1, 1, 1]\n     *\n     * _.rangeRight(0);\n     * // => []\n     */\n    var rangeRight = createRange(true);\n\n    /**\n     * This method returns a new empty array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Array} Returns the new empty array.\n     * @example\n     *\n     * var arrays = _.times(2, _.stubArray);\n     *\n     * console.log(arrays);\n     * // => [[], []]\n     *\n     * console.log(arrays[0] === arrays[1]);\n     * // => false\n     */\n    function stubArray() {\n      return [];\n    }\n\n    /**\n     * This method returns `false`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `false`.\n     * @example\n     *\n     * _.times(2, _.stubFalse);\n     * // => [false, false]\n     */\n    function stubFalse() {\n      return false;\n    }\n\n    /**\n     * This method returns a new empty object.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {Object} Returns the new empty object.\n     * @example\n     *\n     * var objects = _.times(2, _.stubObject);\n     *\n     * console.log(objects);\n     * // => [{}, {}]\n     *\n     * console.log(objects[0] === objects[1]);\n     * // => false\n     */\n    function stubObject() {\n      return {};\n    }\n\n    /**\n     * This method returns an empty string.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {string} Returns the empty string.\n     * @example\n     *\n     * _.times(2, _.stubString);\n     * // => ['', '']\n     */\n    function stubString() {\n      return '';\n    }\n\n    /**\n     * This method returns `true`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.13.0\n     * @category Util\n     * @returns {boolean} Returns `true`.\n     * @example\n     *\n     * _.times(2, _.stubTrue);\n     * // => [true, true]\n     */\n    function stubTrue() {\n      return true;\n    }\n\n    /**\n     * Invokes the iteratee `n` times, returning an array of the results of\n     * each invocation. The iteratee is invoked with one argument; (index).\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {number} n The number of times to invoke `iteratee`.\n     * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n     * @returns {Array} Returns the array of results.\n     * @example\n     *\n     * _.times(3, String);\n     * // => ['0', '1', '2']\n     *\n     *  _.times(4, _.constant(0));\n     * // => [0, 0, 0, 0]\n     */\n    function times(n, iteratee) {\n      n = toInteger(n);\n      if (n < 1 || n > MAX_SAFE_INTEGER) {\n        return [];\n      }\n      var index = MAX_ARRAY_LENGTH,\n          length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n      iteratee = getIteratee(iteratee);\n      n -= MAX_ARRAY_LENGTH;\n\n      var result = baseTimes(length, iteratee);\n      while (++index < n) {\n        iteratee(index);\n      }\n      return result;\n    }\n\n    /**\n     * Converts `value` to a property path array.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Util\n     * @param {*} value The value to convert.\n     * @returns {Array} Returns the new property path array.\n     * @example\n     *\n     * _.toPath('a.b.c');\n     * // => ['a', 'b', 'c']\n     *\n     * _.toPath('a[0].b.c');\n     * // => ['a', '0', 'b', 'c']\n     */\n    function toPath(value) {\n      if (isArray(value)) {\n        return arrayMap(value, toKey);\n      }\n      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n    }\n\n    /**\n     * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Util\n     * @param {string} [prefix=''] The value to prefix the ID with.\n     * @returns {string} Returns the unique ID.\n     * @example\n     *\n     * _.uniqueId('contact_');\n     * // => 'contact_104'\n     *\n     * _.uniqueId();\n     * // => '105'\n     */\n    function uniqueId(prefix) {\n      var id = ++idCounter;\n      return toString(prefix) + id;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Adds two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {number} augend The first number in an addition.\n     * @param {number} addend The second number in an addition.\n     * @returns {number} Returns the total.\n     * @example\n     *\n     * _.add(6, 4);\n     * // => 10\n     */\n    var add = createMathOperation(function(augend, addend) {\n      return augend + addend;\n    }, 0);\n\n    /**\n     * Computes `number` rounded up to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round up.\n     * @param {number} [precision=0] The precision to round up to.\n     * @returns {number} Returns the rounded up number.\n     * @example\n     *\n     * _.ceil(4.006);\n     * // => 5\n     *\n     * _.ceil(6.004, 2);\n     * // => 6.01\n     *\n     * _.ceil(6040, -2);\n     * // => 6100\n     */\n    var ceil = createRound('ceil');\n\n    /**\n     * Divide two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} dividend The first number in a division.\n     * @param {number} divisor The second number in a division.\n     * @returns {number} Returns the quotient.\n     * @example\n     *\n     * _.divide(6, 4);\n     * // => 1.5\n     */\n    var divide = createMathOperation(function(dividend, divisor) {\n      return dividend / divisor;\n    }, 1);\n\n    /**\n     * Computes `number` rounded down to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round down.\n     * @param {number} [precision=0] The precision to round down to.\n     * @returns {number} Returns the rounded down number.\n     * @example\n     *\n     * _.floor(4.006);\n     * // => 4\n     *\n     * _.floor(0.046, 2);\n     * // => 0.04\n     *\n     * _.floor(4060, -2);\n     * // => 4000\n     */\n    var floor = createRound('floor');\n\n    /**\n     * Computes the maximum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * _.max([4, 2, 8, 6]);\n     * // => 8\n     *\n     * _.max([]);\n     * // => undefined\n     */\n    function max(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseGt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.max` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the maximum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.maxBy(objects, function(o) { return o.n; });\n     * // => { 'n': 2 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.maxBy(objects, 'n');\n     * // => { 'n': 2 }\n     */\n    function maxBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)\n        : undefined;\n    }\n\n    /**\n     * Computes the mean of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * _.mean([4, 2, 8, 6]);\n     * // => 5\n     */\n    function mean(array) {\n      return baseMean(array, identity);\n    }\n\n    /**\n     * This method is like `_.mean` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be averaged.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the mean.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.meanBy(objects, function(o) { return o.n; });\n     * // => 5\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.meanBy(objects, 'n');\n     * // => 5\n     */\n    function meanBy(array, iteratee) {\n      return baseMean(array, getIteratee(iteratee, 2));\n    }\n\n    /**\n     * Computes the minimum value of `array`. If `array` is empty or falsey,\n     * `undefined` is returned.\n     *\n     * @static\n     * @since 0.1.0\n     * @memberOf _\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * _.min([4, 2, 8, 6]);\n     * // => 2\n     *\n     * _.min([]);\n     * // => undefined\n     */\n    function min(array) {\n      return (array && array.length)\n        ? baseExtremum(array, identity, baseLt)\n        : undefined;\n    }\n\n    /**\n     * This method is like `_.min` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the criterion by which\n     * the value is ranked. The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {*} Returns the minimum value.\n     * @example\n     *\n     * var objects = [{ 'n': 1 }, { 'n': 2 }];\n     *\n     * _.minBy(objects, function(o) { return o.n; });\n     * // => { 'n': 1 }\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.minBy(objects, 'n');\n     * // => { 'n': 1 }\n     */\n    function minBy(array, iteratee) {\n      return (array && array.length)\n        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)\n        : undefined;\n    }\n\n    /**\n     * Multiply two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.7.0\n     * @category Math\n     * @param {number} multiplier The first number in a multiplication.\n     * @param {number} multiplicand The second number in a multiplication.\n     * @returns {number} Returns the product.\n     * @example\n     *\n     * _.multiply(6, 4);\n     * // => 24\n     */\n    var multiply = createMathOperation(function(multiplier, multiplicand) {\n      return multiplier * multiplicand;\n    }, 1);\n\n    /**\n     * Computes `number` rounded to `precision`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.10.0\n     * @category Math\n     * @param {number} number The number to round.\n     * @param {number} [precision=0] The precision to round to.\n     * @returns {number} Returns the rounded number.\n     * @example\n     *\n     * _.round(4.006);\n     * // => 4\n     *\n     * _.round(4.006, 2);\n     * // => 4.01\n     *\n     * _.round(4060, -2);\n     * // => 4100\n     */\n    var round = createRound('round');\n\n    /**\n     * Subtract two numbers.\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {number} minuend The first number in a subtraction.\n     * @param {number} subtrahend The second number in a subtraction.\n     * @returns {number} Returns the difference.\n     * @example\n     *\n     * _.subtract(6, 4);\n     * // => 2\n     */\n    var subtract = createMathOperation(function(minuend, subtrahend) {\n      return minuend - subtrahend;\n    }, 0);\n\n    /**\n     * Computes the sum of the values in `array`.\n     *\n     * @static\n     * @memberOf _\n     * @since 3.4.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * _.sum([4, 2, 8, 6]);\n     * // => 20\n     */\n    function sum(array) {\n      return (array && array.length)\n        ? baseSum(array, identity)\n        : 0;\n    }\n\n    /**\n     * This method is like `_.sum` except that it accepts `iteratee` which is\n     * invoked for each element in `array` to generate the value to be summed.\n     * The iteratee is invoked with one argument: (value).\n     *\n     * @static\n     * @memberOf _\n     * @since 4.0.0\n     * @category Math\n     * @param {Array} array The array to iterate over.\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n     * @returns {number} Returns the sum.\n     * @example\n     *\n     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n     *\n     * _.sumBy(objects, function(o) { return o.n; });\n     * // => 20\n     *\n     * // The `_.property` iteratee shorthand.\n     * _.sumBy(objects, 'n');\n     * // => 20\n     */\n    function sumBy(array, iteratee) {\n      return (array && array.length)\n        ? baseSum(array, getIteratee(iteratee, 2))\n        : 0;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return wrapped values in chain sequences.\n    lodash.after = after;\n    lodash.ary = ary;\n    lodash.assign = assign;\n    lodash.assignIn = assignIn;\n    lodash.assignInWith = assignInWith;\n    lodash.assignWith = assignWith;\n    lodash.at = at;\n    lodash.before = before;\n    lodash.bind = bind;\n    lodash.bindAll = bindAll;\n    lodash.bindKey = bindKey;\n    lodash.castArray = castArray;\n    lodash.chain = chain;\n    lodash.chunk = chunk;\n    lodash.compact = compact;\n    lodash.concat = concat;\n    lodash.cond = cond;\n    lodash.conforms = conforms;\n    lodash.constant = constant;\n    lodash.countBy = countBy;\n    lodash.create = create;\n    lodash.curry = curry;\n    lodash.curryRight = curryRight;\n    lodash.debounce = debounce;\n    lodash.defaults = defaults;\n    lodash.defaultsDeep = defaultsDeep;\n    lodash.defer = defer;\n    lodash.delay = delay;\n    lodash.difference = difference;\n    lodash.differenceBy = differenceBy;\n    lodash.differenceWith = differenceWith;\n    lodash.drop = drop;\n    lodash.dropRight = dropRight;\n    lodash.dropRightWhile = dropRightWhile;\n    lodash.dropWhile = dropWhile;\n    lodash.fill = fill;\n    lodash.filter = filter;\n    lodash.flatMap = flatMap;\n    lodash.flatMapDeep = flatMapDeep;\n    lodash.flatMapDepth = flatMapDepth;\n    lodash.flatten = flatten;\n    lodash.flattenDeep = flattenDeep;\n    lodash.flattenDepth = flattenDepth;\n    lodash.flip = flip;\n    lodash.flow = flow;\n    lodash.flowRight = flowRight;\n    lodash.fromPairs = fromPairs;\n    lodash.functions = functions;\n    lodash.functionsIn = functionsIn;\n    lodash.groupBy = groupBy;\n    lodash.initial = initial;\n    lodash.intersection = intersection;\n    lodash.intersectionBy = intersectionBy;\n    lodash.intersectionWith = intersectionWith;\n    lodash.invert = invert;\n    lodash.invertBy = invertBy;\n    lodash.invokeMap = invokeMap;\n    lodash.iteratee = iteratee;\n    lodash.keyBy = keyBy;\n    lodash.keys = keys;\n    lodash.keysIn = keysIn;\n    lodash.map = map;\n    lodash.mapKeys = mapKeys;\n    lodash.mapValues = mapValues;\n    lodash.matches = matches;\n    lodash.matchesProperty = matchesProperty;\n    lodash.memoize = memoize;\n    lodash.merge = merge;\n    lodash.mergeWith = mergeWith;\n    lodash.method = method;\n    lodash.methodOf = methodOf;\n    lodash.mixin = mixin;\n    lodash.negate = negate;\n    lodash.nthArg = nthArg;\n    lodash.omit = omit;\n    lodash.omitBy = omitBy;\n    lodash.once = once;\n    lodash.orderBy = orderBy;\n    lodash.over = over;\n    lodash.overArgs = overArgs;\n    lodash.overEvery = overEvery;\n    lodash.overSome = overSome;\n    lodash.partial = partial;\n    lodash.partialRight = partialRight;\n    lodash.partition = partition;\n    lodash.pick = pick;\n    lodash.pickBy = pickBy;\n    lodash.property = property;\n    lodash.propertyOf = propertyOf;\n    lodash.pull = pull;\n    lodash.pullAll = pullAll;\n    lodash.pullAllBy = pullAllBy;\n    lodash.pullAllWith = pullAllWith;\n    lodash.pullAt = pullAt;\n    lodash.range = range;\n    lodash.rangeRight = rangeRight;\n    lodash.rearg = rearg;\n    lodash.reject = reject;\n    lodash.remove = remove;\n    lodash.rest = rest;\n    lodash.reverse = reverse;\n    lodash.sampleSize = sampleSize;\n    lodash.set = set;\n    lodash.setWith = setWith;\n    lodash.shuffle = shuffle;\n    lodash.slice = slice;\n    lodash.sortBy = sortBy;\n    lodash.sortedUniq = sortedUniq;\n    lodash.sortedUniqBy = sortedUniqBy;\n    lodash.split = split;\n    lodash.spread = spread;\n    lodash.tail = tail;\n    lodash.take = take;\n    lodash.takeRight = takeRight;\n    lodash.takeRightWhile = takeRightWhile;\n    lodash.takeWhile = takeWhile;\n    lodash.tap = tap;\n    lodash.throttle = throttle;\n    lodash.thru = thru;\n    lodash.toArray = toArray;\n    lodash.toPairs = toPairs;\n    lodash.toPairsIn = toPairsIn;\n    lodash.toPath = toPath;\n    lodash.toPlainObject = toPlainObject;\n    lodash.transform = transform;\n    lodash.unary = unary;\n    lodash.union = union;\n    lodash.unionBy = unionBy;\n    lodash.unionWith = unionWith;\n    lodash.uniq = uniq;\n    lodash.uniqBy = uniqBy;\n    lodash.uniqWith = uniqWith;\n    lodash.unset = unset;\n    lodash.unzip = unzip;\n    lodash.unzipWith = unzipWith;\n    lodash.update = update;\n    lodash.updateWith = updateWith;\n    lodash.values = values;\n    lodash.valuesIn = valuesIn;\n    lodash.without = without;\n    lodash.words = words;\n    lodash.wrap = wrap;\n    lodash.xor = xor;\n    lodash.xorBy = xorBy;\n    lodash.xorWith = xorWith;\n    lodash.zip = zip;\n    lodash.zipObject = zipObject;\n    lodash.zipObjectDeep = zipObjectDeep;\n    lodash.zipWith = zipWith;\n\n    // Add aliases.\n    lodash.entries = toPairs;\n    lodash.entriesIn = toPairsIn;\n    lodash.extend = assignIn;\n    lodash.extendWith = assignInWith;\n\n    // Add methods to `lodash.prototype`.\n    mixin(lodash, lodash);\n\n    /*------------------------------------------------------------------------*/\n\n    // Add methods that return unwrapped values in chain sequences.\n    lodash.add = add;\n    lodash.attempt = attempt;\n    lodash.camelCase = camelCase;\n    lodash.capitalize = capitalize;\n    lodash.ceil = ceil;\n    lodash.clamp = clamp;\n    lodash.clone = clone;\n    lodash.cloneDeep = cloneDeep;\n    lodash.cloneDeepWith = cloneDeepWith;\n    lodash.cloneWith = cloneWith;\n    lodash.conformsTo = conformsTo;\n    lodash.deburr = deburr;\n    lodash.defaultTo = defaultTo;\n    lodash.divide = divide;\n    lodash.endsWith = endsWith;\n    lodash.eq = eq;\n    lodash.escape = escape;\n    lodash.escapeRegExp = escapeRegExp;\n    lodash.every = every;\n    lodash.find = find;\n    lodash.findIndex = findIndex;\n    lodash.findKey = findKey;\n    lodash.findLast = findLast;\n    lodash.findLastIndex = findLastIndex;\n    lodash.findLastKey = findLastKey;\n    lodash.floor = floor;\n    lodash.forEach = forEach;\n    lodash.forEachRight = forEachRight;\n    lodash.forIn = forIn;\n    lodash.forInRight = forInRight;\n    lodash.forOwn = forOwn;\n    lodash.forOwnRight = forOwnRight;\n    lodash.get = get;\n    lodash.gt = gt;\n    lodash.gte = gte;\n    lodash.has = has;\n    lodash.hasIn = hasIn;\n    lodash.head = head;\n    lodash.identity = identity;\n    lodash.includes = includes;\n    lodash.indexOf = indexOf;\n    lodash.inRange = inRange;\n    lodash.invoke = invoke;\n    lodash.isArguments = isArguments;\n    lodash.isArray = isArray;\n    lodash.isArrayBuffer = isArrayBuffer;\n    lodash.isArrayLike = isArrayLike;\n    lodash.isArrayLikeObject = isArrayLikeObject;\n    lodash.isBoolean = isBoolean;\n    lodash.isBuffer = isBuffer;\n    lodash.isDate = isDate;\n    lodash.isElement = isElement;\n    lodash.isEmpty = isEmpty;\n    lodash.isEqual = isEqual;\n    lodash.isEqualWith = isEqualWith;\n    lodash.isError = isError;\n    lodash.isFinite = isFinite;\n    lodash.isFunction = isFunction;\n    lodash.isInteger = isInteger;\n    lodash.isLength = isLength;\n    lodash.isMap = isMap;\n    lodash.isMatch = isMatch;\n    lodash.isMatchWith = isMatchWith;\n    lodash.isNaN = isNaN;\n    lodash.isNative = isNative;\n    lodash.isNil = isNil;\n    lodash.isNull = isNull;\n    lodash.isNumber = isNumber;\n    lodash.isObject = isObject;\n    lodash.isObjectLike = isObjectLike;\n    lodash.isPlainObject = isPlainObject;\n    lodash.isRegExp = isRegExp;\n    lodash.isSafeInteger = isSafeInteger;\n    lodash.isSet = isSet;\n    lodash.isString = isString;\n    lodash.isSymbol = isSymbol;\n    lodash.isTypedArray = isTypedArray;\n    lodash.isUndefined = isUndefined;\n    lodash.isWeakMap = isWeakMap;\n    lodash.isWeakSet = isWeakSet;\n    lodash.join = join;\n    lodash.kebabCase = kebabCase;\n    lodash.last = last;\n    lodash.lastIndexOf = lastIndexOf;\n    lodash.lowerCase = lowerCase;\n    lodash.lowerFirst = lowerFirst;\n    lodash.lt = lt;\n    lodash.lte = lte;\n    lodash.max = max;\n    lodash.maxBy = maxBy;\n    lodash.mean = mean;\n    lodash.meanBy = meanBy;\n    lodash.min = min;\n    lodash.minBy = minBy;\n    lodash.stubArray = stubArray;\n    lodash.stubFalse = stubFalse;\n    lodash.stubObject = stubObject;\n    lodash.stubString = stubString;\n    lodash.stubTrue = stubTrue;\n    lodash.multiply = multiply;\n    lodash.nth = nth;\n    lodash.noConflict = noConflict;\n    lodash.noop = noop;\n    lodash.now = now;\n    lodash.pad = pad;\n    lodash.padEnd = padEnd;\n    lodash.padStart = padStart;\n    lodash.parseInt = parseInt;\n    lodash.random = random;\n    lodash.reduce = reduce;\n    lodash.reduceRight = reduceRight;\n    lodash.repeat = repeat;\n    lodash.replace = replace;\n    lodash.result = result;\n    lodash.round = round;\n    lodash.runInContext = runInContext;\n    lodash.sample = sample;\n    lodash.size = size;\n    lodash.snakeCase = snakeCase;\n    lodash.some = some;\n    lodash.sortedIndex = sortedIndex;\n    lodash.sortedIndexBy = sortedIndexBy;\n    lodash.sortedIndexOf = sortedIndexOf;\n    lodash.sortedLastIndex = sortedLastIndex;\n    lodash.sortedLastIndexBy = sortedLastIndexBy;\n    lodash.sortedLastIndexOf = sortedLastIndexOf;\n    lodash.startCase = startCase;\n    lodash.startsWith = startsWith;\n    lodash.subtract = subtract;\n    lodash.sum = sum;\n    lodash.sumBy = sumBy;\n    lodash.template = template;\n    lodash.times = times;\n    lodash.toFinite = toFinite;\n    lodash.toInteger = toInteger;\n    lodash.toLength = toLength;\n    lodash.toLower = toLower;\n    lodash.toNumber = toNumber;\n    lodash.toSafeInteger = toSafeInteger;\n    lodash.toString = toString;\n    lodash.toUpper = toUpper;\n    lodash.trim = trim;\n    lodash.trimEnd = trimEnd;\n    lodash.trimStart = trimStart;\n    lodash.truncate = truncate;\n    lodash.unescape = unescape;\n    lodash.uniqueId = uniqueId;\n    lodash.upperCase = upperCase;\n    lodash.upperFirst = upperFirst;\n\n    // Add aliases.\n    lodash.each = forEach;\n    lodash.eachRight = forEachRight;\n    lodash.first = head;\n\n    mixin(lodash, (function() {\n      var source = {};\n      baseForOwn(lodash, function(func, methodName) {\n        if (!hasOwnProperty.call(lodash.prototype, methodName)) {\n          source[methodName] = func;\n        }\n      });\n      return source;\n    }()), { 'chain': false });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The semantic version number.\n     *\n     * @static\n     * @memberOf _\n     * @type {string}\n     */\n    lodash.VERSION = VERSION;\n\n    // Assign default placeholders.\n    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {\n      lodash[methodName].placeholder = lodash;\n    });\n\n    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.\n    arrayEach(['drop', 'take'], function(methodName, index) {\n      LazyWrapper.prototype[methodName] = function(n) {\n        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);\n\n        var result = (this.__filtered__ && !index)\n          ? new LazyWrapper(this)\n          : this.clone();\n\n        if (result.__filtered__) {\n          result.__takeCount__ = nativeMin(n, result.__takeCount__);\n        } else {\n          result.__views__.push({\n            'size': nativeMin(n, MAX_ARRAY_LENGTH),\n            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')\n          });\n        }\n        return result;\n      };\n\n      LazyWrapper.prototype[methodName + 'Right'] = function(n) {\n        return this.reverse()[methodName](n).reverse();\n      };\n    });\n\n    // Add `LazyWrapper` methods that accept an `iteratee` value.\n    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {\n      var type = index + 1,\n          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;\n\n      LazyWrapper.prototype[methodName] = function(iteratee) {\n        var result = this.clone();\n        result.__iteratees__.push({\n          'iteratee': getIteratee(iteratee, 3),\n          'type': type\n        });\n        result.__filtered__ = result.__filtered__ || isFilter;\n        return result;\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.head` and `_.last`.\n    arrayEach(['head', 'last'], function(methodName, index) {\n      var takeName = 'take' + (index ? 'Right' : '');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this[takeName](1).value()[0];\n      };\n    });\n\n    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.\n    arrayEach(['initial', 'tail'], function(methodName, index) {\n      var dropName = 'drop' + (index ? '' : 'Right');\n\n      LazyWrapper.prototype[methodName] = function() {\n        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);\n      };\n    });\n\n    LazyWrapper.prototype.compact = function() {\n      return this.filter(identity);\n    };\n\n    LazyWrapper.prototype.find = function(predicate) {\n      return this.filter(predicate).head();\n    };\n\n    LazyWrapper.prototype.findLast = function(predicate) {\n      return this.reverse().find(predicate);\n    };\n\n    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {\n      if (typeof path == 'function') {\n        return new LazyWrapper(this);\n      }\n      return this.map(function(value) {\n        return baseInvoke(value, path, args);\n      });\n    });\n\n    LazyWrapper.prototype.reject = function(predicate) {\n      return this.filter(negate(getIteratee(predicate)));\n    };\n\n    LazyWrapper.prototype.slice = function(start, end) {\n      start = toInteger(start);\n\n      var result = this;\n      if (result.__filtered__ && (start > 0 || end < 0)) {\n        return new LazyWrapper(result);\n      }\n      if (start < 0) {\n        result = result.takeRight(-start);\n      } else if (start) {\n        result = result.drop(start);\n      }\n      if (end !== undefined) {\n        end = toInteger(end);\n        result = end < 0 ? result.dropRight(-end) : result.take(end - start);\n      }\n      return result;\n    };\n\n    LazyWrapper.prototype.takeRightWhile = function(predicate) {\n      return this.reverse().takeWhile(predicate).reverse();\n    };\n\n    LazyWrapper.prototype.toArray = function() {\n      return this.take(MAX_ARRAY_LENGTH);\n    };\n\n    // Add `LazyWrapper` methods to `lodash.prototype`.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),\n          isTaker = /^(?:head|last)$/.test(methodName),\n          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],\n          retUnwrapped = isTaker || /^find/.test(methodName);\n\n      if (!lodashFunc) {\n        return;\n      }\n      lodash.prototype[methodName] = function() {\n        var value = this.__wrapped__,\n            args = isTaker ? [1] : arguments,\n            isLazy = value instanceof LazyWrapper,\n            iteratee = args[0],\n            useLazy = isLazy || isArray(value);\n\n        var interceptor = function(value) {\n          var result = lodashFunc.apply(lodash, arrayPush([value], args));\n          return (isTaker && chainAll) ? result[0] : result;\n        };\n\n        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {\n          // Avoid lazy use if the iteratee has a \"length\" value other than `1`.\n          isLazy = useLazy = false;\n        }\n        var chainAll = this.__chain__,\n            isHybrid = !!this.__actions__.length,\n            isUnwrapped = retUnwrapped && !chainAll,\n            onlyLazy = isLazy && !isHybrid;\n\n        if (!retUnwrapped && useLazy) {\n          value = onlyLazy ? value : new LazyWrapper(this);\n          var result = func.apply(value, args);\n          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });\n          return new LodashWrapper(result, chainAll);\n        }\n        if (isUnwrapped && onlyLazy) {\n          return func.apply(this, args);\n        }\n        result = this.thru(interceptor);\n        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;\n      };\n    });\n\n    // Add `Array` methods to `lodash.prototype`.\n    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {\n      var func = arrayProto[methodName],\n          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',\n          retUnwrapped = /^(?:pop|shift)$/.test(methodName);\n\n      lodash.prototype[methodName] = function() {\n        var args = arguments;\n        if (retUnwrapped && !this.__chain__) {\n          var value = this.value();\n          return func.apply(isArray(value) ? value : [], args);\n        }\n        return this[chainName](function(value) {\n          return func.apply(isArray(value) ? value : [], args);\n        });\n      };\n    });\n\n    // Map minified method names to their real names.\n    baseForOwn(LazyWrapper.prototype, function(func, methodName) {\n      var lodashFunc = lodash[methodName];\n      if (lodashFunc) {\n        var key = lodashFunc.name + '';\n        if (!hasOwnProperty.call(realNames, key)) {\n          realNames[key] = [];\n        }\n        realNames[key].push({ 'name': methodName, 'func': lodashFunc });\n      }\n    });\n\n    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{\n      'name': 'wrapper',\n      'func': undefined\n    }];\n\n    // Add methods to `LazyWrapper`.\n    LazyWrapper.prototype.clone = lazyClone;\n    LazyWrapper.prototype.reverse = lazyReverse;\n    LazyWrapper.prototype.value = lazyValue;\n\n    // Add chain sequence methods to the `lodash` wrapper.\n    lodash.prototype.at = wrapperAt;\n    lodash.prototype.chain = wrapperChain;\n    lodash.prototype.commit = wrapperCommit;\n    lodash.prototype.next = wrapperNext;\n    lodash.prototype.plant = wrapperPlant;\n    lodash.prototype.reverse = wrapperReverse;\n    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;\n\n    // Add lazy aliases.\n    lodash.prototype.first = lodash.prototype.head;\n\n    if (symIterator) {\n      lodash.prototype[symIterator] = wrapperToIterator;\n    }\n    return lodash;\n  });\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export lodash.\n  var _ = runInContext();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose Lodash on the global object to prevent errors when Lodash is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    // Use `_.noConflict` to remove Lodash from the global object.\n    root._ = _;\n\n    // Define as an anonymous module so, through path mapping, it can be\n    // referenced as the \"underscore\" module.\n    define(function() {\n      return _;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds it.\n  else if (freeModule) {\n    // Export for Node.js.\n    (freeModule.exports = _)._ = _;\n    // Export for CommonJS support.\n    freeExports._ = _;\n  }\n  else {\n    // Export to the global object.\n    root._ = _;\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash/lodash.js\n// module id = 34\n// module chunks = 0 2 3 4 5 6 7 8 9 11 12","import RouterClient from \"../../clients/routerClientInstance\";\nimport Logger from \"../../clients/logger\";\nimport { EventEmitter } from \"events\";\nimport DistributedStoreClient from \"../../clients/distributedStoreClient\";\nimport StorageClient from \"../../clients/storageClient\";\nimport * as util from \"../util\";\nimport { WindowEventManager } from \"./WindowEventManager\";\nimport * as constants from \"../constants\"\nimport { FinsembleEvent } from \"./FinsembleEvent\";\n\nimport { System } from \"../../common/system\";\n/** This import syntax helps the compiler infer the types. */\nimport clone = require('lodash.cloneDeep');\n\ndeclare global {\n\tinterface Window {\n\t\t_FSBLCache: any;\n\t}\n}\n\nDistributedStoreClient.initialize();\nStorageClient.initialize();\nconst BOUNDS_SET = \"bounds-set\";\nconst BOUNDS_CHANGING = \"bounds-change-request\";\nconst BOUNDS_CHANGED = \"bounds-changed\";\nif (!window._FSBLCache) window._FSBLCache = {\n\tstoreClientReady: false,\n\twindowStore: null,\n\twindows: {},\n\tgettingWindow: [],\n\twindowAttempts: {}\n};\n\nfunction retrieveManifestPromise() {\n\treturn new Promise((resolve, reject) => {\n\t\tSystem.Application.getCurrent().getManifest(resolve, reject);\n\t});\n}\nexport class FinsembleWindow {\n\taddListener: Function;\n\tGroup: any;\n\tcomponentState: any;\n\twrapState: WrapState;\n\tname: string;\n\twindowOptions: any;\n\tbounds: object;\n\twrapStateChangeSubscription: any;\n\tWINDOWSTATE: any;\n\tparentWindow: any;\n\twindowKey: string;\n\tcomponentKey: string;\n\tTITLE_CHANGED_CHANNEL: string;\n\tTITLE_CHANGED_SUBSCRIPTION: any;\n\twindowState: number;\n\tidentifier: WindowIdentifier;\n\twindowName: string;\n\ttype: string;\n\twindowType: string;\n\tsetWindowType: string;\n\ttypes: any;\n\tremoveListener: Function;\n\tremoveListeners?: Function;\n\tparentSubscribeID: any;\n\teventManager: WindowEventManager;\n\teventlistenerHandlerMap: Partial<{ [key in WindowEventName]: {\n\t\thandler: (...args) => void,\n\t\tinternalHandler: (...args) => void,\n\t\tinterceptor: FinsembleEvent,\n\t\tguid: string,\n\t}[] }> = {};\n\tguid: string;\n\tprivate settingParent: boolean;\n\n\tconstructor(params) {\n\t\tthis.types = {};\n\t\t//todo settle on a proper name for this property.\n\t\tthis.wrapState = \"initializing\";\n\t\tthis.componentState = {};\n\t\tthis.windowState = FinsembleWindow.WINDOWSTATE.NORMAL;\n\t\tthis.type = null;\n\t\tthis.windowType = null;\n\t\tthis.bounds = {};\n\t\tthis.name;\n\t\tthis.guid = Date.now() + \"_\" + Math.random();\n\t\tthis.addListener = this.addEventListener;\n\t\tthis.removeListener = this.removeEventListener;\n\t\tthis.WINDOWSTATE = constants.WINDOWSTATE;\n\t\tthis.windowOptions = {};\n\t\t//because we were doing this[i]=params[i] in the constructor jscrambler was creating a reference to \"this\" above _super_, causing everything to break and it made me cry.\n\t\tthis.doConstruction(params);\n\t\tthis.eventManager = new WindowEventManager({ name: this.name });\n\t\tthis.TITLE_CHANGED_CHANNEL = \"Finsemble.\" + this.name + \".titleChanged\";\n\t\tthis.componentKey = util.camelCase(\"activeWorkspace\", this.name, this.name);\n\t\tthis.windowKey = util.camelCase(\"activeWorkspace\", this.name);\n\n\t\tFinsembleWindow.bindFunctions(this);\n\t\tthis.setupListeners(this.name);\n\t\tthis.listenForEvents();\n\t}\n\n\t//allows backwards compatibility.\n\tstandardizeEventName(event) {\n\t\tswitch (event) {\n\t\t\t//all of these should be deprecated in 3.5ish.\n\t\t\tcase \"bounds-set\":\n\t\t\tcase \"stoppedMoving\":\n\t\t\t\treturn \"bounds-change-end\";\n\t\t\tcase \"startedMoving\":\n\t\t\t\treturn \"bounds-change-start\";\n\t\t\tcase \"bringToFront\":\n\t\t\t\treturn \"broughtToFront\";\n\t\t\tcase \"setParent\":\n\t\t\t\treturn \"parent-set\";\n\t\t\tcase \"clearParent\":\n\t\t\t\treturn \"parent-unset\";\n\t\t}\n\t\treturn event;\n\t}\n\n\t_eventHandled(interceptor, guid, canceled: boolean = false) {\n\t\tLogger.system.debug(\"FinsembleWindow._eventHandled public\", interceptor.event, this.identifier.windowName, guid, canceled);\n\t\tif (interceptor.delayable) RouterClient.publish(constants.EVENT_INTERRUPT_CHANNEL + \".\" + guid, { canceled: canceled });\n\t}\n\n\taddEventListener(eventName: WindowEventName, handler) {\n\t\tLogger.system.info(\"EVENT TAG. Event listener added\", eventName, \"on \", this.name);\n\t\teventName = this.standardizeEventName(eventName);\n\t\t// We send this guid so that Window service can keep track of individual listeners for event interruption.\n\t\tlet guid = Date.now() + \"_\" + Math.random();\n\t\tthis.queryWindowService(\"addEventListener\", { eventName: eventName, guid: guid });\n\t\tthis.eventManager.listenForRemoteEvent(eventName, handler);\n\t\tlet delayable = constants.INTERRUPTIBLE_EVENTS.includes(eventName);\n\t\tlet cancelable = constants.INTERRUPTIBLE_EVENTS.includes(eventName);\n\n\t\tlet interceptor = new FinsembleEvent({\n\t\t\tsource: this,\n\t\t\tevent: eventName,\n\t\t\tdelayable: delayable,\n\t\t\tcancelable: cancelable\n\t\t});\n\n\t\tvar internalHandler = (data) => {\n\t\t\tLogger.system.info(\"EVENT TAG. Internal event handler\", eventName, \"on \", this.name);\n\t\t\t// TODO: need to create event list with properties:\n\t\t\tinterceptor.setData(data);\n\t\t\thandler(interceptor); // this is where a handler can delay the event\n\t\t\tif (delayable && interceptor.delayed) { // if delayed, wait for done\n\t\t\t\tRouterClient.publish(constants.EVENT_INTERRUPT_CHANNEL + \".\" + guid, { delayed: true });\n\t\t\t\tinterceptor.addListener(\"done\", (response) => {\n\t\t\t\t\tthis._eventHandled(interceptor, guid, response.canceled)\n\t\t\t\t});\n\t\t\t} else { // if not delayed, it is done.\n\t\t\t\tthis._eventHandled(interceptor, guid);\n\t\t\t}\n\t\t};\n\n\t\t//We want the final handler that's invoked is\n\t\tthis.eventManager.addListener(eventName, internalHandler);\n\n\t\tif (!this.eventlistenerHandlerMap[eventName]) {\n\t\t\tthis.eventlistenerHandlerMap[eventName] = [];\n\t\t}\n\n\t\tthis.eventlistenerHandlerMap[eventName].push({\n\t\t\thandler: handler,\n\t\t\tinternalHandler: internalHandler,\n\t\t\tinterceptor: interceptor,\n\t\t\tguid: guid\n\t\t});\n\t}\n\n\tremoveEventListener(eventName: WindowEventName, handler) {\n\t\teventName = this.standardizeEventName(eventName);\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tif (!this.eventlistenerHandlerMap[eventName]) { // trying to remove non-existent handler.\n\t\t\t\tLogger.system.debug(\"trying to remove non-existent handler\", eventName);\n\t\t\t\treturn resolve();\n\t\t\t}\n\t\t\tfor (var i = this.eventlistenerHandlerMap[eventName].length - 1; i >= 0; i--) {\n\t\t\t\tlet handlerStoredData = this.eventlistenerHandlerMap[eventName][i];\n\t\t\t\tif (handlerStoredData.handler === handler) {\n\t\t\t\t\tthis.eventManager.removeListener(eventName, handlerStoredData.internalHandler);\n\t\t\t\t\thandlerStoredData.interceptor.removeAllListeners();\n\t\t\t\t\tRouterClient.publish(constants.EVENT_INTERRUPT_CHANNEL + \".\" + handlerStoredData.guid, { delayed: false, canceled: false });\n\t\t\t\t\tawait this.queryWindowService(\"removeEventListener\", { eventName: eventName, guid: handlerStoredData.guid });\n\t\t\t\t\tthis.eventlistenerHandlerMap[eventName].splice(i, 1);\n\t\t\t\t\treturn resolve();\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve();\n\t\t}\n\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tlistenForEvents() {\n\t\tthis.wrapStateChangeSubscription = RouterClient.subscribe(\"Finsemble.Component.State.\" + this.name, this.handleWrapStateChange);\n\t}\n\n\tpublic static WINDOWSTATE: any = {\n\t\tNORMAL: 0,\n\t\tMINIMIZED: 1,\n\t\tMAXIMIZED: 2,\n\t\tHIDDEN: 3\n\t};\n\n\twindowServiceChannelName(channelTopic) { let name = this.name || this.windowName; return `WindowService-Request-${channelTopic}`; }\n\teventChannelName(channelTopic) { let name = this.name || this.windowName; return `WindowService-Event-${name}-${channelTopic}`; }\n\n\tlistenForBoundsSet() {\n\t\tthis.eventManager.listenForRemoteEvents([\"bounds-change-start\", \"bounds-changing\", \"bounds-change-end\"]);\n\t}\n\tanimate(params = {}, callback = Function.prototype) {\n\t\tthis.queryWindowService(\"animate\", params, callback);\n\t}\n\n\tgetWindowStore(cb) {\n\t\tif (window._FSBLCache.windowStore) {\n\t\t\treturn cb(window._FSBLCache.windowStore);\n\t\t}\n\t\tDistributedStoreClient.createStore({ store: \"Finsemble-Windows\", global: true }, (err, store) => {\n\t\t\twindow._FSBLCache.windowStore = store;\n\t\t\tcb(store);\n\t\t});\n\t}\n\n\tdoConstruction(params) {\n\t\t//TODO this is the same as wrap (eventually this should spawn)\n\t\tif (!params.setWindowType && !params.windowType) { //Default WindowType\n\t\t\tparams.windowType = \"OpenFinWindow\";\n\t\t}\n\t\tif (params.windowType) { //We need to make a specific kind of Window\n\t\t\tparams.setWindowType = params.windowType;\n\t\t\tdelete params.windowType; //Prevent infinite loop\n\t\t\tlet BW = FinsembleWindow as any; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the FinsembleWindow here is of type any -- basically don't worry about its type.\n\n\t\t\tvar childClassObject = new BW(params);\n\t\t\t//childClassObject.windowType = windowType;\n\t\t\treturn childClassObject;\n\t\t}  //We are a specific kind of window\n\t\tif (params) {\n\t\t\tfor (var i in params) {\n\t\t\t\tthis[i] = params[i];\n\t\t\t}\n\t\t}\n\t\tif (!this.name) this.name = params.windowName;\n\t\tthis.windowType = this.setWindowType;\n\n\t}\n\n\tstatic registerType(name, type) {\n\t\tlet BW = FinsembleWindow as any; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the FinsembleWindow here is of type any -- basically don't worry about its type.\n\n\t\tif (!BW.types) {\n\t\t\tBW.types = {};\n\t\t}\n\t\tBW.types[name] = type;\n\t}\n\n\t/**\n\t * This is used to bind all functions only in FinsembleWindow and not in the child wrappers to the wrappers. Without this binding, the value of \"this\" in the functions is wrong.\n\t * @param {} obj\n\t */\n\tstatic bindFunctions(obj) {\n\t\tobj.setParent = obj.setParent.bind(obj);\n\t\tobj.getParent = obj.getParent.bind(obj);\n\t\tobj.eventChannelName = obj.eventChannelName.bind(obj);\n\t\tobj.windowServiceChannelName = obj.windowServiceChannelName.bind(obj);\n\t\tobj.setupListeners = obj.setupListeners.bind(obj);\n\t\tobj.onTitleChanged = obj.onTitleChanged.bind(obj);\n\t\tobj.handleWrapRemoveRequest = obj.handleWrapRemoveRequest.bind(obj);\n\t\tobj.listenForBoundsSet = obj.listenForBoundsSet.bind(obj);\n\t\tobj._eventHandled = obj._eventHandled.bind(obj);\n\t}\n\n\t// set up this window's listeners\n\tsetupListeners(name) {\n\t\tLogger.system.debug(\"FinsembleWindow parent change notification setup\", name);\n\n\t\tthis.TITLE_CHANGED_SUBSCRIPTION = RouterClient.subscribe(this.TITLE_CHANGED_CHANNEL, this.onTitleChanged);\n\t}\n\n\tonTitleChanged(err, response) {\n\t\tif (!response || !response.data || typeof response.data !== \"string\") return;\n\t\t//this.windowOptions.title = response.data;\n\t\tthis.eventManager.trigger(\"title-changed\", {\n\t\t\ttitle: response.data\n\t\t});\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// The window wrappers\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t/**\n\t * Async wrap. Given a name/windowName, it will query the launcher for information required to wrap the window. Then it will return an object that can be operated on. Also this creates a cache of all wrapped windows for performance. Our clients wrap the same window often and this was causing excessive messaging to the store and degrading performance.\n\t * @param {*} params Need only name in most cases. For service and other cases where the window is not part of what the launcher considers active windows, name and uuid are required\n\t * @param {boolean} params.waitForReady If true, will async await for Finsemble to return ready before continuing to build the instance to return\n\t * @param {*} cb\n\t */\n\tstatic wrap = FinsembleWindow.getInstance;\n\tstatic getInstance(params, cb = Function.prototype): Promise<{ wrap: FinsembleWindow }> { // new async wrap\n\t\tlet myName = System.Window.getCurrent().name;\n\t\tif (params && params.windowName) {\n\t\t\tparams.name = params.windowName;\n\t\t}\n\t\tparams = clone(params); // this function modifies params so clone to be safe\n\n\t\tif (!params || !params.name) return cb(\"name is required\");\n\t\tparams.windowName = params.name;\n\n\t\tasync function promiseResolver(resolve, reject) {\n\t\t\t//Return early if we already have the wrap cached.\n\t\t\tif (window._FSBLCache.windows[params.name]) {\n\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:\", params.name, \"Window found in the cache, returning without going to the Launcher\");\n\t\t\t\tlet wrap = window._FSBLCache.windows[params.name];\n\t\t\t\t//@exit\n\t\t\t\tresolve({ wrap })\n\t\t\t\treturn cb(null, wrap);\n\t\t\t}\n\n\t\t\t//If we already have all of the information, just call createWrap.\n\t\t\tif (params.uuid && params.name) {\n\t\t\t\tif (!params.windowIdentifier) {\n\t\t\t\t\tparams.windowIdentifier = {\n\t\t\t\t\t\tuuid: params.uuid,\n\t\t\t\t\t\tname: params.name,\n\t\t\t\t\t\twindowName: params.name,\n\t\t\t\t\t\twindowType: params.windowType\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (params.waitForReady !== false) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait FinsembleWindow._windowReady(params.windowName); // wait to ensure the window is fully ready in the window service\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn cb(err, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:\", params.name, \"All information for wrap passed in, creating wrap locally\");\n\t\t\t\t//Multiple requests for the same window could've come in at once. Right before we create this wrap, we should check that it hasn't been cached while we were waiting for _windowReady to resolve.\n\t\t\t\tif (window._FSBLCache.windows[params.name]) {\n\t\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:\", params.name, \"Window found in the cache, returning without going to the Launcher\");\n\t\t\t\t\tlet wrap = window._FSBLCache.windows[params.name];\n\t\t\t\t\t//@exit\n\t\t\t\t\tresolve({ wrap })\n\t\t\t\t\treturn cb(null, wrap);\n\t\t\t\t}\n\n\t\t\t\tlet { wrap } = await FinsembleWindow._createWrap(params);\n\n\t\t\t\t//@exit\n\t\t\t\tresolve({ wrap });\n\t\t\t\treturn cb(null, wrap);\n\t\t\t}\n\n\t\t\tif (params.waitForReady !== false) {\n\t\t\t\ttry {\n\t\t\t\t\tawait FinsembleWindow._windowReady(params.windowName); // wait to ensure the window is fully ready in the window service\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn cb(err, null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//All we have is a windowName. we send a request to the launcher for more information so that we can construct the proper object. This also the place where\n\t\t\tRouterClient.query(\"WindowService-Request-getWindowIdentifier\", { windowName: params.name, requester: myName }, onWrapInformationReceived);\n\n\t\t\tasync function onWrapInformationReceived(err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.error(err);\n\t\t\t\t\t//@exit\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn cb(err, null);\n\t\t\t\t}\n\n\t\t\t\tif (window._FSBLCache.windows[params.name]) {\n\t\t\t\t\tlet wrap = window._FSBLCache.windows[params.name];\n\t\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:\", params.name, \"Information received from launcher, but wrap exists in cache. Returning cached wrap.\");\n\t\t\t\t\t//@exit\n\t\t\t\t\tresolve({ wrap })\n\t\t\t\t\treturn cb(null, wrap);\n\t\t\t\t}\n\n\t\t\t\tlet { identifier } = response.data;\n\t\t\t\tif (identifier.windowName) {\n\t\t\t\t\tidentifier.name = identifier.windowName;\n\t\t\t\t}\n\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:\", params.name, \"Information received from launcher. Creating wrap.\");\n\n\t\t\t\tparams.retrievedIdentifier = identifier;\n\t\t\t\tlet { wrap } = await FinsembleWindow._createWrap(params);\n\n\t\t\t\tif (response.data.descriptor) {\n\t\t\t\t\twrap.descriptor = response.data.descriptor;\n\t\t\t\t}\n\n\t\t\t\t//@exit\n\t\t\t\tresolve({ wrap });\n\t\t\t\tcb(null, wrap);\n\t\t\t}\n\t\t}\n\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Method for determining whether the window being wrapped is the startup app's main window (the service manager).\n\t *\n\t * @static\n\t * @memberof FinsembleWindow\n\t */\n\tstatic isStartupApplication = async function (windowName): Promise<boolean> {\n\t\tlet isStartupApplication;\n\t\t// Here, we get the application 'manifest'. This will only be returned _if the application was created via the manifest_. In other words, this will only work if we're in the startup app.\n\n\t\tconst manifest: any = await retrieveManifestPromise()\n\t\t\t.catch((e) => {\n\t\t\t\t// If the application executing FinsembleWindow was created via the API getManifest will\n\t\t\t\t// reject with an error. If that happens, we know we're not in the service manager, so we can just assign it to false and move on.\n\t\t\t\tisStartupApplication = false;\n\t\t\t});\n\t\t// If the window that I'm in is the same window as the startup app, I am the service manager.\n\t\t// We cannot wrap the service manager.\n\n\t\t// No need to do these checks if we're in a window that lives in the startup app.\n\t\tif (manifest) {\n\t\t\tswitch (fin.container) {\n\t\t\t\tcase \"Electron\":\n\t\t\t\t\tisStartupApplication = manifest && manifest.startup_app && manifest.startup_app.name === windowName;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// openfin takes the uuid of the startup app as defined in the manifest and assigns it to the name of the main window for the startup app.\n\t\t\t\t\tisStartupApplication = manifest && manifest.startup_app && manifest.startup_app.uuid === windowName;\n\t\t\t}\n\t\t}\n\t\treturn isStartupApplication;\n\t}\n\n\n\tstatic _windowReady = function (windowName) {\n\t\tLogger.system.debug(`windowServiceReady: ${windowName} starting`);\n\t\tlet subscribeId;\n\t\tconst COMPONENT_STATE_CHANGE_CHANNEL = \"Finsemble.Component.State.\" + windowName;\n\t\tconst promiseResolver = async (resolve, reject) => {\n\t\t\t// Subscribe handler for component state. Once new state is retrieved, resolve out of _windowReady\n\t\t\t// This is a closure so it easily has access to the promise resolve method.\n\t\t\tfunction onComponentStateChanged(err, response) {\n\t\t\t\tlet state: WrapState = response.data.state;\n\t\t\t\tLogger.system.debug(`windowServiceReady: ${windowName} state change: ${state}`);\n\t\t\t\tconsole.log(`windowServiceReady: ${windowName} state change: ${state}`);\n\t\t\t\tswitch (state) {\n\t\t\t\t\t// if ready state or any state beyond\n\t\t\t\t\tcase \"ready\":\n\t\t\t\t\tcase \"reloading\":\n\t\t\t\t\tcase \"closing\":\n\t\t\t\t\t\tLogger.system.debug(`windowServiceReady: ${windowName} ${state}`);\n\t\t\t\t\t\tRouterClient.unsubscribe(subscribeId);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet isStartupApplication = await FinsembleWindow.isStartupApplication(windowName);\n\n\t\t\tif (isStartupApplication || windowName.toLowerCase().endsWith(\"service\")) {\n\t\t\t\treject(\"Cannot Wrap Service Manager or Services\");\n\t\t\t} else {\n\t\t\t\t// wait only for components managed by the window service\n\t\t\t\tLogger.system.debug(`windowServiceReady: ${windowName} waiting`);\n\t\t\t\tsubscribeId = RouterClient.subscribe(COMPONENT_STATE_CHANGE_CHANNEL, onComponentStateChanged);\n\t\t\t}\n\t\t}\n\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\t/**\n\t * Creates a Finsemble WindowWrap\n\t * @param {*} params\n\t * @param {string} params.name The name of the window\n\t * @param {*} [params.retrievedIdentifier] Retrieved window identifier\n\t * @param {*} [params.windowIdentifier] The window identifier\n\t * @param {boolean} [param.setWindowType] If true, will set the window type\n\t */\n\tstatic _createWrap(params): any {\n\t\tfunction promiseResolver(resolve, reject) {\n\t\t\tlet identifier = params.retrievedIdentifier || params.windowIdentifier;\n\t\t\tlet wrap: any = null;\n\t\t\tif (typeof window._FSBLCache.windowAttempts[params.name] === \"undefined\") window._FSBLCache.windowAttempts[params.name] = 0;\n\n\t\t\t//OpenfinApplication is essentially just an openfinWindow in its own process. We can wrap it just like a window.\n\t\t\tif (!params.setWindowType && !identifier.windowType || identifier.windowType === \"OpenFinApplication\") { //Default WindowType\n\t\t\t\tidentifier.windowType = \"OpenFinWindow\";\n\t\t\t}\n\n\t\t\t//Top level keeps important info (e.g., uuid, name, windowType).\n\t\t\tlet paramsForWindow = Object.assign({}, identifier);\n\t\t\t//Also pull in anything that was passed into the constructor (e.g., windowDescriptor, etc);\n\t\t\tparamsForWindow = Object.assign(paramsForWindow, params);\n\t\t\tparamsForWindow.setWindowType = paramsForWindow.windowType;\n\t\t\tdelete paramsForWindow.windowType; //Prevent infinite loop\n\n\t\t\tLogger.system.debug(\"WRAP LIFECYCLE: Placing wrap into the local cache.\", identifier.windowName);\n\n\t\t\tlet BW = FinsembleWindow as any; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the FinsembleWindow here is of type any -- basically don't worry about its type.\n\t\t\twindow._FSBLCache.windows[identifier.windowName] = new BW(paramsForWindow);\n\t\t\twrap = window._FSBLCache.windows[identifier.windowName]\n\t\t\twrap.windowType = identifier.windowType;\n\t\t\twrap.identifier = identifier;\n\t\t\twrap.addEventListener(\"closed\", wrap.handleWrapRemoveRequest);\n\t\t\twrap.addEventListener(\"maximized\", () => {\n\t\t\t\twrap.windowState = FinsembleWindow.WINDOWSTATE.MAXIMIZED;\n\t\t\t});\n\t\t\twrap.addEventListener(\"minimized\", () => {\n\t\t\t\twrap.windowState = FinsembleWindow.WINDOWSTATE.MINIMIZED;\n\t\t\t});\n\t\t\twrap.addEventListener(\"restored\", () => {\n\t\t\t\twrap.windowState = FinsembleWindow.WINDOWSTATE.NORMAL;\n\t\t\t});\n\n\t\t\t//Subscribe to parent inside the wrap so if getInstance is called after window creation the parent window will be available.\n\t\t\twrap.parentSubscribeID = RouterClient.subscribe(`Finsemble.parentChange.${identifier.windowName}`, (err, message) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.error(\"FinsembleWindow parent change notification error\", err);\n\t\t\t\t\tresolve({ wrap });\n\t\t\t\t} else {\n\t\t\t\t\tvar parentState = message.data || {};\n\n\t\t\t\t\tif (parentState.type === \"Added\") {\n\t\t\t\t\t\tLogger.system.debug(\"FinsembleWindow Parent Notification: window.addedToStack listener\", parentState);\n\t\t\t\t\t\twrap.setParent(parentState.stackedWindowIdentifier, () => { resolve({ wrap }); });\n\t\t\t\t\t} else if (parentState.type === \"Exists\") {\n\t\t\t\t\t\tLogger.system.debug(\"FinsembleWindow Parent Notification: Parent already exists, checking if added to wrap\", parentState);\n\t\t\t\t\t\twrap.setParentOnWrap(parentState.stackedWindowIdentifier, () => { resolve({ wrap }); });\n\t\t\t\t\t} else if (parentState.type === \"Removed\") {\n\t\t\t\t\t\tLogger.system.debug(\"FinsembleWindow Parent Notification: window.removedFromStack listener\", parentState);\n\t\t\t\t\t\twrap.clearParent();\n\t\t\t\t\t\tresolve({ wrap });\n\t\t\t\t\t} else if (parentState.type) { // if defined but unknown type\n\t\t\t\t\t\tLogger.system.error(\"FinsembleWindow Parent Notification: unknown type\", parentState);\n\t\t\t\t\t\tresolve({ wrap });\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresolve({ wrap });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tstatic _getRemoveWrapChannel(name) {\n\t\treturn `${System.Window.getCurrent().name}.removeWrap.${name}`;\n\t}\n\n\t// this routine handles the close event, but also called without event from FSBL\n\tasync handleWrapRemoveRequest(event) {\n\t\tif (event) event.wait();\n\t\tLogger.system.debug(\"WRAP Destructor. Removing cached window\", this.name, \"in \", window.name);\n\t\t//wrap is the openfin or stacked window. if the removeListeners function exists, we remove all listeners we added during the lifecycle of that window wrapper.\n\t\tif (this.removeListeners) {\n\t\t\tthis.removeListeners();\n\t\t}\n\n\t\t// do not move this line of code. The order of execution is important.\n\t\tthis.cleanupRouter();\n\n\t\t//Remove all event listeners.\n\t\tfor (let eventName in this.eventlistenerHandlerMap) {\n\t\t\tconsole.log(\"Event name in for loop\", eventName);\n\t\t\tlet events = this.eventlistenerHandlerMap[eventName];\n\t\t\tfor (let i = 0; i < events.length; i++) {\n\t\t\t\tLogger.system.log(\"WRAP Destructor. removeEventListener\", eventName, this.name, \"in\", window.name);\n\t\t\t\tawait this.removeEventListener(eventName as WindowEventName, events[i].handler);\n\t\t\t\tconsole.log(\"Event name listener removed\", eventName);\n\t\t\t}\n\t\t}\n\t\tLogger.system.log(\"WRAP Destructor. removeEventListener DONE\");\n\t\tconsole.log(\"handleWrapRemoveRequest name Done!\");\n\n\t\tif (event) event.done();\n\n\t\tthis.eventManager.cleanup();\n\n\t\tif (this.name !== window.name) {\n\t\t\tdelete window._FSBLCache.windows[this.name];\n\t\t\tdelete window._FSBLCache.windowAttempts[this.name];\n\t\t}\n\t}\n\n\tcleanupRouter() {\n\t\tconst REMOVE_WRAP_CHANNEL = FinsembleWindow._getRemoveWrapChannel(this.name);\n\t\tRouterClient.removeResponder(REMOVE_WRAP_CHANNEL);\n\n\t\tif (this.TITLE_CHANGED_SUBSCRIPTION) {\n\t\t\tRouterClient.unsubscribe(this.TITLE_CHANGED_SUBSCRIPTION);\n\t\t}\n\t\tRouterClient.unsubscribe(this.parentSubscribeID);\n\t\tRouterClient.unsubscribe(this.wrapStateChangeSubscription);\n\t}\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Handlers to generate wrapper events from incoming transmits\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\thandleWrapStateChange = (err, response) => {\n\t\tlet state: WrapState = response.data.state;\n\t\tif (state !== this.wrapState) {\n\t\t\tthis.wrapState = state;\n\t\t\t// 5/1/19: JoeC. Eventmanager wasn't throwing ready event, so all ready listeners would never fire\n\t\t\tif (this.wrapState === \"ready\") {\n\t\t\t\tthis.eventManager.emit('ready');\n\t\t\t}\n\t\t\tthis.eventManager.emit(\"wrap-state-changed\", {\n\t\t\t\tstate\n\t\t\t});\n\t\t}\n\t}\n\n\tonReady(callback) {\n\t\tif (this.wrapState === \"ready\") {\n\t\t\treturn callback();\n\t\t}\n\t\tthis.eventManager.on(\"ready\", callback);\n\t}\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Common template for window-function requests to window service -- see public functions\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t/**\n\t * @param {string} methodName method name (e.g. \"minimize\", \"maximize\")\n\t * @param {object} params\n\t * @param {function=} callback\n\t * @memberof FinsembleWindow\n\t * @private\n\t */\n\tqueryWindowService(methodName, params, callback = Function.prototype) {\n\n\t\tconst promiseResolver = async (resolve) => {\n\n\t\t\tif (typeof params === \"function\") {\n\t\t\t\tcallback = params;\n\t\t\t\tparams = {};\n\t\t\t}\n\t\t\tparams = params || {};\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier\n\n\t\t\t// if Logger debug is enable, then add call stack to query parameters for debugging -- shows where public window requests originated\n\t\t\tif (Logger.setting().system.Debug) {\n\t\t\t\tparams.callstack = Logger.callStack(); // add callstack to query for debugging -- shows where public window requests originated\n\t\t\t}\n\n\t\t\tLogger.system.debug(\"FinsembleWindow.queryWindowService\", this.windowServiceChannelName(methodName), params);\n\n\t\t\tvar responseData = null;\n\n\t\t\tRouterClient.query(this.windowServiceChannelName(methodName), params, (err, queryResponseMessage) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.warn(`WindowService.${methodName}: failed`, err);\n\t\t\t\t\tconsole.debug(`WindowService.${methodName}: failed`, err);\n\t\t\t\t} else {\n\t\t\t\t\tresponseData = queryResponseMessage.data;\n\t\t\t\t\tLogger.system.debug(`${this.windowServiceChannelName(methodName)} successful`, responseData);\n\t\t\t\t\tconsole.debug(`${this.windowServiceChannelName(methodName)} successful`, responseData);\n\t\t\t\t}\n\t\t\t\tresolve();\n\t\t\t\tcallback(err, responseData);\n\t\t\t});\n\t\t}\n\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Core Window Functions: can be invoked by any service or component.  Most are sent to the WindowService to be executed.\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Core Public Window Functions: can be invoked by any service or component.  These are sent to the WindowService to be executed.\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\tminimize(params, callback) {\n\t\tthis.queryWindowService(\"minimize\", params, callback);\n\t}\n\n\tmaximize(params, callback) {\n\t\tthis.queryWindowService(\"maximize\", params, callback);\n\t}\n\n\trestore(params, callback) {\n\t\tthis.queryWindowService(\"restore\", params, callback);\n\t}\n\n\tblur(params = {}, callback = Function.prototype) {\n\t\tthis.queryWindowService(\"blur\", params, callback);\n\t}\n\n\tfocus(params = {}, callback = Function.prototype) {\n\t\tthis.queryWindowService(\"focus\", params, callback);\n\t}\n\n\tbringToFront(params?, callback?) {\n\t\tthis.queryWindowService(\"bringToFront\", params, callback);\n\t}\n\n\tisShowing(params, callback) {\n\t\tthis.queryWindowService(\"isShowing\", params, callback);\n\t}\n\n\tsetBounds(params, callback) {\n\t\tif (typeof params !== \"function\" && !params.bounds) {\n\t\t\tlet oldParams = params;\n\t\t\tparams = {};\n\t\t\tparams.bounds = oldParams;\n\t\t}\n\t\tthis.queryWindowService(\"setBounds\", params, callback);\n\t}\n\n\tgetBounds(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.queryWindowService(\"getBounds\", params, (err, bounds) => {\n\t\t\t\tresolve({ err, data: bounds });\n\t\t\t\tcallback(err, bounds);\n\t\t\t});\n\t\t};\n\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tupdateOptions(params, callback) {\n\t\tthis.queryWindowService(\"updateOptions\", params, callback);\n\t}\n\n\thide(params?, callback?) {\n\t\tthis.queryWindowService(\"hide\", params, callback);\n\t}\n\n\tshow(params, callback?) {\n\t\tthis.queryWindowService(\"show\", params, callback);\n\t}\n\n\tshowAt(params, callback) {\n\t\tthis.queryWindowService(\"showAt\", params, callback);\n\t}\n\n\tclose(params = {}, callback = Function.prototype) {\n\t\tLogger.system.debug(\"WRAP CLOSE. Public close initiated for\", this.name, params);\n\t\tthis.queryWindowService(\"close\", params, () => {\n\t\t\tLogger.system.debug(\"WRAP CLOSE. Public close initiated for\", this.name);\n\t\t\tcallback();\n\t\t});\n\t}\n\n\n\t/**\n\t *Register a window with docking. Use this if you don't want to use the full initialization function\n\t *\n\t * @param {Object} params - can be anything that is passed to docking for window registration. @todo This should be removed soon\n\t * @param {Function} cb\n\t * @memberof FSBLWindow\n\t */\n\tregisterWithDocking(params, cb) {\n\t\tRouterClient.query(\"DockingService.registerWindow\", {\n\t\t\ttype: this.type,\n\t\t\twindowType: this.windowType,\n\t\t\twindowMsg: params,\n\t\t\tname: this.windowName\n\t\t}, cb);\n\t}\n\t/**\n\t *Unregister a window with docking\n\t *\n\t * @memberof FSBLWindow\n\t */\n\tunRegisterWithDocking() {\n\t\tRouterClient.transmit(\"DockingService.deregisterWindow\", { name: this.windowName });\n\t}\n\t/**\n\t *This is if we want to handle the full register/ready state inside of the window\n\t register with docking\n\t send the message to launcher saying that component is ready\n\t *\n\t * @memberof FSBLWindow\n\t */\n\tinitializeWindow({ manageWindowMovement, identifer }, cb = Function.prototype) {\n\t\tconst publishComponentReady = () => {\n\t\t\tRouterClient.publish(\"Finsemble.\" + this.windowName + \".componentReady\", { // signal workspace and launcher service that component is ready\n\t\t\t\tname: this.windowName\n\t\t\t});\n\t\t\tcb();\n\t\t};\n\t\t/** DH 12/13/2019 - While windows can opt out of grouping, etc. by setting\n\t\t * manageWindowMovement to false, we still need to perform the right initialization\n\t\t * handshake so Finsemble is aware of the window. Otherwise, Finsemble won't perform spawn\n\t\t * callbacks and the workspace won't close correctly.\n\t\t*/\n\t\tif (manageWindowMovement) {\n\t\t\tthis.registerWithDocking(identifer, publishComponentReady);\n\t\t} else {\n\t\t\tpublishComponentReady();\n\t\t}\n\t}\n\n\twrapReady() {\n\t\tRouterClient.publish(\"Finsemble.\" + this.windowName + \".wrapReady\", { name: this.windowName, state: \"open\" });\n\t}\n\n\tsetOpacity(params, callback) {\n\t\tthis.queryWindowService(\"setOpacity\", params, callback);\n\t}\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Other BaseClass Function: These are common functions shared across derived classes\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Invoked to indicate an operation (e.g. dragging out of tab region) has started. This signals the Docking service to start tracking the mouse location and invoking tiling behavior as needed. Typically inherited (base function only).\n\t * @param {object} params for future use\n\t *\n\t * @example\n\t *\t// dragging tab example using tracking and group\n\t * \tFinsembleWindow.startTabTileMonitoring();\n\t *\t// if dragging tab is in a group, then remove it given tracking results will decide what to do with the window\n\t * \tFinsembleWindow.Group.getGroupID(this.identifier, function (err, tileGroupId) {\n\t * \t\tif (!err) { // if no error then must be in a tile group\n\t *\t\t\tself.Group.removeWindow(this.identifier);\n\t *\t\t}\n\t *\t});\n\t */\n\tstartTabTileMonitoring(params) {\n\t\tLogger.system.debug(\"FinsembleWindow.startTabTileMonitoring\", params);\n\t\tRouterClient.transmit(\"TabTile.startTabTile\", { params });\n\t}\n\n\t/**\n\t * Invoked by client originating a dragStart that it has has ended. Typically inherited (base function only).\n\t * @param {object} params for future use\n\t\t * @param {function=} callback option callback that support overriding default behavior\n\t *\n\t * \tFinsembleWindow.stopTabTileMonitoring(params, function(err, results, defaultTabTileAction) {\n\t * \t\t// . . . custom code goes here . . .\n\t *\t\tdefaultTabTileAction(results); // now take default action or call your own function instead\n\t * \t});\n\t *\n\t */\n\tstopTabTileMonitoring(params, callback) {\n\t\tLogger.system.debug(\"FinsembleWindow.stopTabTileMonitoring\", params);\n\t\tRouterClient.query(\"TabTile.stopTabTile\", { params }, function (err, queryResponseMessage) {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.warn(\"TabTile.stopTabTile: query failed\", err);\n\t\t\t} else {\n\t\t\t\tLogger.system.debug(\"TabTile.stopTabTile results\", queryResponseMessage.data);\n\t\t\t}\n\t\t\tvar stopTabTileResults = queryResponseMessage.data;\n\t\t\tif (callback) {\n\t\t\t\tcallback(err, stopTabTileResults, this.defaultStopTrackingAction);\n\t\t\t} else {\n\t\t\t\tthis.defaultTabTileAction(stopTabTileResults);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Defines default TabTile action for stopTabTileMonitoring.  May be overridden by client -- see example in stopTabTileMonitoring. Typically inherited (base function only).\n\t *\n\t * @param {any} stopTabTileResults\n\t * @memberof FinsembleWindow\n\t *\n\t * @private\n\t */\n\tdefaultTabTileAction(stopTabTileResults) {\n\t\tlet self = this;\n\t\tLogger.system.debug(\"FinsembleWindow.defaultTabTileAction\", stopTabTileResults);\n\t\tswitch (stopTabTileResults.stoppedLocation) {\n\t\t\tcase \"OutsideWindow\":\n\t\t\t\t// move window to drop location (since for now assuming only single-tabbed windows)\n\t\t\t\tbreak;\n\t\t\tcase \"TabSection\":\n\t\t\t\t// WindowStack.addWindowToStack(callback) // for when we get to tabbing\n\t\t\t\tbreak;\n\t\t\tcase \"InsideWindow\":\n\t\t\t\tif (stopTabTileResults.tileGroupId) { // if dropped in an existing tile group (which might be the same it was dragging from)\n\t\t\t\t\tself.Group.addWindow(this.identifier, stopTabTileResults.tileGroupId, stopTabTileResults.dropCoordinates);\n\t\t\t\t} else { // if dropped in a separate window outside a tile group\n\t\t\t\t\tself.Group.createGroup(function (newGroupId) {\n\t\t\t\t\t\t// add dragging window to new tile group, but specify the dropped on window as the starting window in the tile group\n\t\t\t\t\t\tself.Group.addWindow(this.identifier, newGroupId, stopTabTileResults.dropCoordinates, { startingWindowIdentifier: stopTabTileResults.droppedOnWindowIdentifier });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tLogger.system.error(\"stopTracking returned an unknown stoppedLocation result\", stopTabTileResults);\n\t\t}\n\t}\n\n\tmergeBounds(bounds) {\n\t\tbounds.right = bounds.left + bounds.width;\n\t\tlet newBounds = { left: bounds.left, right: bounds.right, width: bounds.width, top: bounds.top, bottom: bounds.top + bounds.height, height: bounds.height };\n\t\tlet defaultBounds = { defaultLeft: bounds.left, defaultWidth: bounds.width, defaultTop: bounds.top, defaultHeight: bounds.height };\n\t\tObject.assign(this.windowOptions, newBounds);\n\t\tObject.assign(this.windowOptions, defaultBounds);\n\t\tthis.windowOptions.bounds = newBounds;\n\t}\n\n\tstartMove(params) {\n\t\tLogger.system.debug(\"FinsembleWindow.startMove\", params);\n\t\tparams = params || {};\n\t\tparams.windowIdentifier = this.identifier; // add this window's identifier\n\t\tRouterClient.transmit(this.eventChannelName(\"startedMoving\"), {});\n\t}\n\n\tstopMove(params) {\n\t\tLogger.system.debug(\"FinsembleWindow.stopMove\", params);\n\t\tparams = params || {};\n\t\tparams.windowIdentifier = this.identifier; // add this window's identifier\n\t\tRouterClient.transmit(this.eventChannelName(\"stoppedMoving\"), {});\n\t}\n\n\t/**\n\t * Get Monitor for this window\n\t *\n\t * @param {function} cb Callback\n\t */\n\tgetMonitor(cb) {\n\n\t\tRouterClient.query(\"DockingService.getMonitorForWindow\",\n\t\t\t{ windowIdentifier: this.identifier }\n\t\t\t, (err, message) => message ? cb(message.data) : cb());\n\t}\n\n\t/**\n\t * Given params, will return the component state. Either the params to search for, or the entire state.\n\t *\n\t * @param {object} params\n\t * @param {string} params.field field\n\t *  @param {array} params.fields fields\n\t * @param {function} cb Callback\n\t */\n\tgetComponentState(params, cb) {\n\t\tthis.queryWindowService(\"getComponentState\", params, cb);\n\t}\n\n\t/**\n\t * Given params, will return the window state. Either the params to search for, or the entire state.\n\t *\n\t * @param {object} params\n\t * @param {string} params.field field\n\t *  @param {array} params.fields fields\n\t * @param {function} cb Callback\n\t */\n\tgetWindowState(params, cb) {\n\t\tthis.queryWindowService(\"getWindowState\", params, cb);\n\t}\n\n\t/**\n\t * Given params, will set the component state. Any fields included will be added to the state\n\t *\n\t * @param {object} params\n\t * @param {string} params.field field\n\t *  @param {array} params.fields fields\n\t * @param {function} cb Callback\n\t */\n\tsetComponentState(params, cb) {\n\t\tthis.queryWindowService(\"setComponentState\", params, cb);\n\t}\n\n\n\t/**\n\t * Removes one or more specified attributes from either component or window state in storage\n\t * for this window.\n\t *\n\t * In addition to the name of the window, params should include either a `field`\n\t * property as a string or a `fields` property as an array of strings.\n\t *\n\t * @param {object} params\n\t * @param {string} [params.field] field\n\t * @param {array} [params.fields] fields\n\t * @param {function} cb Callback\n\t */\n\tremoveComponentState(params: {\n\t\tfield?: string,\n\t\tfields?: { field: string }[],\n\t\twindowName?: string\n\t}, cb: StandardCallback = (e, r) => { }) {\n\t\tthis.queryWindowService(\"removeComponentState\", params, cb);\n\t}\n\n\t/**\n\t * Given params, will set the window state. Any fields included will be added to the state\n\t *\n\t * @param {object} params\n\t * @param {string} params.field field\n\t *  @param {array} params.fields fields\n\t * @param {function} cb Callback\n\t */\n\tsetWindowState(params, cb) {\n\t\tthis.queryWindowService(\"setWindowState\", params, cb);\n\t}\n\n\tsaveCompleteWindowState(params, cb) {\n\t\tthis.queryWindowService(\"saveCompleteWindowState\", params, cb);\n\t}\n\n\n\t/**\n\t *Cancels startTabTileMonitoring. Example use is a user \"escapes\" out of a drag operation.\n\t *\n\t * @param {object} params for future use\n\t * @memberof FinsembleWindow\n\t */\n\tcancelTabTileMonitoring(params) {\n\t\tLogger.system.debug(\"FinsembleWindow.cancelTabTileMonitoring\", params);\n\t\tRouterClient.transmit(\"TabTile.cancelTabTile\", { params });\n\t}\n\n\t/**\n\t * Return the parent window's wrapper (e.g. StackedWindow).\n\t *\n\t */\n\tgetParent(cb) {\n\t\tif (this.settingParent) {\n\t\t\tFinsembleWindow.getInstance(this.settingParent, (err, stackWrap) => {\n\t\t\t\tcb(null, stackWrap);\n\t\t\t});\n\t\t} else if (this.parentWindow) {\n\t\t\tcb(null, this.parentWindow);\n\t\t} else {\n\t\t\tcb(null, null);\n\t\t}\n\n\t}\n\n\t/**\n\t * Sets the parent window (e.g. stackedWindow) and emits \"setParent\" event to window listeners.\n\t *\n\t * @param {object} stackedWindowIdentifier identifer of window to set as parent (e.g. stackedWindowIdentifier).\n\t *\n\t */\n\tsetParent(stackedWindowIdentifier, cb = Function.prototype) {\n\t\tif (this.settingParent) return this.getParent(cb); //TODO check if the parent is different\n\t\tthis.settingParent = stackedWindowIdentifier;\n\n\t\tif (this.parentWindow && (this.parentWindow.name === stackedWindowIdentifier.windowName)) {\n\t\t\tLogger.system.debug(\"FinsembleWindow.setParent already set\", stackedWindowIdentifier);\n\t\t\tthis.settingParent = false;\n\t\t\tcb(null, this.parentWindow);\n\t\t} else {\n\t\t\tthis.queryWindowService(\"setParent\", stackedWindowIdentifier, (err, message) => {\n\t\t\t\tLogger.system.debug(\"FinsembleWindow.setParent\", stackedWindowIdentifier);\n\t\t\t\tFinsembleWindow.getInstance(stackedWindowIdentifier, (err, wrappedStackedWindow) => {\n\t\t\t\t\tif (!err) {\n\t\t\t\t\t\tLogger.system.debug(\"FinsembleWindow.setParent wrap success\", stackedWindowIdentifier);\n\t\t\t\t\t\tthis.parentWindow = wrappedStackedWindow;\n\t\t\t\t\t\tif (!this.parentWindow.windowType.includes(\"StackedWindow\")) {\n\t\t\t\t\t\t\tLogger.system.error(\"FinsembleWindow.setParent error\", this.parentWindow.name, stackedWindowIdentifier.windowName);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLogger.system.error(\"FinsembleWindow.setParent error\", err);\n\t\t\t\t\t}\n\t\t\t\t\tthis.settingParent = false;\n\t\t\t\t\tthis.eventManager.trigger(\"parent-set\", { parentName: this.parentWindow.name });\n\t\t\t\t\tcb(err, wrappedStackedWindow);\n\t\t\t\t});\n\t\t\t});\n\n\t\t}\n\t}\n\n\t/**\n\t * Sets the parent window (e.g. stackedWindow) on a window wrap.\n\t * This is for the case where a window already has a parent but it's wrap doesn't know about it.\n\t *\n\t * @param {object} stackedWindowIdentifier identifer of window to set as parent (e.g. stackedWindowIdentifier).\n\t *\n\t */\n\tsetParentOnWrap(stackedWindowIdentifier, cb = Function.prototype) {\n\t\tif (this.parentWindow && (this.parentWindow.name === stackedWindowIdentifier.windowName)) {\n\t\t\tLogger.system.debug(\"FinsembleWindow.setParentOnWrap already set\", stackedWindowIdentifier);\n\t\t\tcb(null, this.parentWindow);\n\t\t} else {\n\t\t\tthis.queryWindowService(\"setParent\", stackedWindowIdentifier, (err, message) => {\n\t\t\t\tLogger.system.debug(\"FinsembleWindow.setParentOnWrap\", stackedWindowIdentifier);\n\t\t\t\tFinsembleWindow.getInstance(stackedWindowIdentifier, (err, wrappedStackedWindow) => {\n\t\t\t\t\tif (!err) {\n\t\t\t\t\t\tLogger.system.debug(\"FinsembleWindow.setParentOnWrap success getting wrap\", stackedWindowIdentifier);\n\t\t\t\t\t\tconsole.debug(\"FinsembleWindow.setParentOnWrap success getting wrap\", this, wrappedStackedWindow);\n\t\t\t\t\t\tthis.parentWindow = wrappedStackedWindow;\n\t\t\t\t\t\tif (this.parentWindow.windowType.includes(\"StackedWindow\") === false) {\n\t\t\t\t\t\t\tLogger.system.error(\"FinsembleWindow.setParentOnWrap error\", this.parentWindow.name, stackedWindowIdentifier.windowName);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLogger.system.error(\"FinsembleWindow.setParentOnWrap error\", err);\n\t\t\t\t\t}\n\t\t\t\t\tcb(err, wrappedStackedWindow);\n\t\t\t\t});\n\t\t\t});\n\n\t\t}\n\t}\n\n\t/**\n\t * Clears the parent reference and emits \"clearParent\" event to window listeners. Used only internally.\n\t *\n\t * @private\n\t *\n\t */\n\tclearParent() {\n\t\tLogger.system.debug(\"FinsembleWindow.clearParent\", this.parentWindow);\n\t\tthis.eventManager.trigger(\"parent-unset\", {\n\t\t\tparentName: this.parentWindow.name\n\t\t});\n\t\tthis.parentWindow = null;\n\t}\n\n\tsetTitle(title) {\n\t\tLogger.system.debug(\"Title change\", title);\n\t\tRouterClient.publish(this.TITLE_CHANGED_CHANNEL, title);\n\t}\n\n\t//todo needs to be a windowService query..\n\tgetOptions(cb = Function.prototype) {\n\t\tthis.queryWindowService(\"getOptions\", {}, cb);\n\t}\n\n\t//CANDIDATES FOR REMOVAL\n\n\t//window client adds a callback here. This way, whenever close is called _anywhere_ in the system, it's passed down to the window client and cleanup can happen in the component.\n\tlistenForClose(cb) {\n\t\t// let listener = (err, response) => {\n\t\tlet listener = () => {\n\t\t\tdelete window._FSBLCache.windows[this.name];\n\t\t\tdelete window._FSBLCache.windowAttempts[this.name];\n\t\t\t//If the window that the wrap belongs to is the one calling close, just call the openfin method. Otherwise, some other window is trying to close it - so we send a message to that window, which will eventually close itself.\n\t\t\tfor (let event in this.eventlistenerHandlerMap) {\n\t\t\t\tfor (let i = 0; i < this.eventlistenerHandlerMap[event].length; i++) {\n\t\t\t\t\tthis.eventlistenerHandlerMap[event][i].interceptor.removeAllListeners();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.eventManager.cleanup();\n\t\t\tRouterClient.removeListener(`${this.identifier.windowName}.close`, listener);\n\t\t\t// cb(response.data);\n\t\t\tcb();\n\t\t};\n\t\tthis.eventManager.listenForRemoteEvent(\"closed\", listener);\n\n\t}\n\n\t//TO BE REMOVED WHEN TABBING API IS PUT IN PLACe\n\n\t/**\n\t * Handles common housekeeping checks and modifications on params at the beginning of each private window-management function\n\t *\n\t * @param {string} methodName method name (e.g. \"minimize\", \"maximize\")\n\t * @param {object} params\n\t * @memberof StackedWindow\n\t * @private\n\t */\n\t_privateManagementPreface(methodName, params, callback?: Function) {\n\t\tif (typeof params === \"function\") {\n\t\t\tLogger.system.error(\"StackedWindowWrapper.wrapPreface bad params\", params);\n\t\t}\n\t\tparams = params || {};\n\t\tparams.stackedWindowIdentifier = { windowName: this.identifier.windowName, windowType: this.identifier.windowType }; // add this window's identifier\n\t\tLogger.system.debug(`StackedWindow.${methodName}  _privateManagementPreface`, params);\n\n\t\treturn params;\n\t}\n\t/**\n\t * Returns store for stacked window.  Example usage below.\n\t *\n\t * @memberof StackedWindow\n\t *\n\t * @example\n\t * \t\t// get the state for one stacked window from the store\n\t * \t\tgetStore().getValue({ field: stackedWindowIdentifier.name, function (err, stackedWindowState) {}\n\t *\t\t\twhere stackedWindowState is an object with the following properties\n\t *\t\t\t\t{\n\t *\t\t\t\t\tstackedWindowIdentifier: the stacked window identifier\n\t *\t\t\t\t\tchildWindowIdentifiers: the window identifiers for all children in the stacked window\n\t *\t\t\t\t\tvisibleWindowIdentifier: the window identifier for the currently visible window\n\t *\t\t\t\t\tbounds: the current window bounds/coordinates for the stacked window (i.e. the current bounds of the visible window)\n\t *\t\t\t\t}\n\t */\n\tgetStore(callback = Function.prototype) {\n\t\treturn this.getWindowStore(callback);\n\t}\n\t/**\n\t * Adds window as a child to a stacked window.  Adds to the top of the stack, or if specified to a specific location in the stack;\n\t *\n\t * @param {object=} params\n\t\t * @param {object} params.stackedWindowIdentifier stacked window to operate on stacked window to operate on\n\t\t * @param {object} params.windowIdentifier window to add\n\t\t * @param {number=} params.position the location in the stack to push the window.  Location 0 is the bottom of the stack. Defaults to the top of stack.\n\t\t * @param {boolean=} params.noSave if true then don't save the store after updating it (will be saved by caller)\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\taddWindow(params, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"addWindow\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.addWindow\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.addWindow callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Removes a child window from a stacked window.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.\n\t *\n\t\t * @param {object} params\n\t.\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {object} params.windowIdentifier window to remove\n\t * @param {boolean=} params.noDocking if true then do not register removed window with docking (the workspace is unaffected)\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\tremoveWindow(params, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"removeWindow\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.removeWindow\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.removeWindow callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Removes a window from the stack then closes it.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.\n\t *\n\t\t * @param {object} params\n\t.\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {object} params.windowIdentifier window to delete\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\tdeleteWindow(params, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"deleteWindow\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.deleteWindow\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.deleteWindow callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Sets the visible window within the stack.  The previously visible window in stack will be automatically hidden.\n\t *\n\t\t * @param {object} params\n\t.\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {object} params.windowIdentifier\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\tsetVisibleWindow(params, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"setVisibleWindow\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.setVisibleWindow\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.setVisibleWindow callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Reorders the stack, but odes not affect visibility\n\t *\n\t\t * @param {object} params\n\t.\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {array} params.windowIdentifiers array of windowIdentifiers which provides the new order\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\treorder(params, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"reorder\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.reorder\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.reorder callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// src/common/window/FinsembleWindow.ts","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/v4.js\n// module id = 36\n// module chunks = 0 2 3 4 5 6 7 8 9 11 12","'use strict';\nconst pTry = require('p-try');\n\nconst pLimit = concurrency => {\n\tif (concurrency < 1) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = [];\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.length > 0) {\n\t\t\tqueue.shift()();\n\t\t}\n\t};\n\n\tconst run = (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = pTry(fn, ...args);\n\n\t\tresolve(result);\n\n\t\tresult.then(next, next);\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tif (activeCount < concurrency) {\n\t\t\trun(fn, resolve, ...args);\n\t\t} else {\n\t\t\tqueue.push(run.bind(null, fn, resolve, ...args));\n\t\t}\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.length\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\nmodule.exports.default = pLimit;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/p-limit/index.js\n// module id = 37\n// module chunks = 0 2 3 4 5 6 7 8 9 11 12","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} props The property identifiers to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, props) {\n  object = Object(object);\n  return basePickBy(object, props, function(value, key) {\n    return key in object;\n  });\n}\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} props The property identifiers to pick from.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, props, predicate) {\n  var index = -1,\n      length = props.length,\n      result = {};\n\n  while (++index < length) {\n    var key = props[index],\n        value = object[key];\n\n    if (predicate(value, key)) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [props] The property identifiers to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = baseRest(function(object, props) {\n  return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));\n});\n\nmodule.exports = pick;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.pick/index.js\n// module id = 38\n// module chunks = 0 2 3 4 5 6 7 8 9 11 12","'use strict';\n\nconst pTry = (fn, ...arguments_) => new Promise(resolve => {\n\tresolve(fn(...arguments_));\n});\n\nmodule.exports = pTry;\n// TODO: remove this in the next major version\nmodule.exports.default = pTry;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/p-try/index.js\n// module id = 39\n// module chunks = 0 2 3 4 5 6 7 8 9 11 12","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/index.js\n// module id = 40\n// module chunks = 0 2 3 4 5 6 7 8 9 11 12","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\nimport { _BaseClient as BaseClient } from \"./baseClient\";\nimport WindowClient from \"./windowClient\";\nimport * as util from \"../common/util\";\nimport Validate from \"../common/validate\"; // Finsemble args validator\nimport { System } from \"../common/system\";\nimport Logger from \"./logger\";\nimport { FinsembleWindow } from \"../common/window/FinsembleWindow\";\nimport { IGlobals } from \"../common/Globals\";\nimport { SpawnParams } from \"../services/window/Launcher/launcher\";\n/** The global `window` object. We cast it to a specific interface here to be\n * explicit about what Finsemble-related properties it may have. */\nconst Globals = window as IGlobals;\ninterface ShowWindowParams extends SpawnParams {\n\tspawnIfNotFound?: boolean,\n\tautoFocus?: boolean,\n\twindowIdentifier?: WindowIdentifier,\n\trelativeWindow?: WindowIdentifier\n}\n/**\n * An object that includes all the potential identifications for a window.\n * For instance, one can try and obtain a reference for a window if some of these values are known.\n *\n * @typedef WindowIdentifier\n * @property {string} [windowName] The name of the physical HTML window, or a reference to a native window that was launched with Assimilation service\n * @property {string} [uuid] Optional uuid of a particular OpenFin application process\n * @property {string} [componentType] The type of component\n * @property {number|string} [monitor] The number of the monitor. Potentially used to disambiguate multiple components with the same name (for searches only)\n */\n\n/**\n * Finsemble windowDescriptor.\n * The windowDescriptor includes the following values.\n *\n * @typedef WindowDescriptor\n * @property {string} [url] url to load (if HTML5 component).\n * @property {string} [native] The name of the native app (if a native component launched by Assimilation service).\n * @property {string} name The name of the window (sometimes randomly assigned).\n * @property {string} componentType The type of component (from <i>components.json</i>).\n */\n\n/**\n *\n * A convenient assembly of native JavaScript window, `OpenFin` window and windowDescriptor.\n *\n * @typedef RawWindowResult\n * @property {WindowDescriptor} windowDescriptor The window descriptor.\n * @property {fin.desktop.Window} finWindow The `OpenFin` window.\n * @property {Window} browserWindow The native JavaScript window.\n *\n */\n\n// A map of related menus that is kept by handleToggle.\nvar okayToOpenMenu = {};\n\n/**\n *\n * @introduction\n * <h2>Launcher Client</h2>\n *\n * The Launcher Client handles spawning windows of all kinds.\n * Finsemble provides the architecture to launch, resize, and reposition any component, whether native, modern, or third-party.\n *\n *\n * The Launcher API has capabilities to customize your end user's experience.\n * This includes CSS-like positioning and a fully display-aware positioning that deals with idiosyncrasies such as monitors with different scaling resolutions.\n *\n *\n * CSS provides higher level abstractions that aid in laying out an application that is composed of constituent parts.\n * Finsemble has borrowed CSS’s positioning paradigm and applied it to the task of laying out windows on the desktop.\n * This CSS-style positioning allows windows to be positioned on the `left`, `right`, `top`, or `bottom` of the end user’s screen for instance; we also developed new positions, such as `adjacent`, which allows a child window to spawn adjacent to their parent.\n * Components can be positioned and sized by percentage, relative to the monitor or to each other (nested windows).\n *\n *\n * The Launcher Client frequently uses the parameters <code>windowName</code> and <code>componentType</code>. [Learn more about them here](tutorial-ComponentTypesAndWindowNames.html).\n *\n *\n *\n * @hideconstructor\n * @constructor\n */\nclass LauncherClient extends BaseClient {\n\twindowClient;\n\tconstructInstance;\n\tmyWindowIdentifier;\n\tconstructor(params) {\n\t\tsuper(params);\n\t\tValidate.args(params, \"object=\") && params && (Validate as any).args2(\"params.onReady\", params.onReady, \"function=\");\n\t\tthis.windowClient = params.clients.windowClient;\n\t}\n\n\t/** @alias LauncherClient# */\n\n\t/**\n\t * Get a list of registered components (those that were entered into <i>components.json</i>).\n\t *\n\t * @param {Function} cb Callback returns an object map of components. Each component object\n\t * contains the default config for that component.\n\t */\n\tgetComponentList(cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"Launcher.componentList\", {}, function (err, response) {\n\t\t\t\tcb(err, response.data);\n\t\t\t\tresolve({ err, data: response.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Get the component config (from <i>components.json</i>) for a specific component.\n\t *\n\t * @param {String} componentType The type of the component.\n\t * @param {Function} cb Callback returns the default config (windowDescriptor) for the requested componentType.\n\t *\n\t */\n\tgetComponentDefaultConfig(componentType: string, cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"Launcher.componentList\", {}, function (err, response) {\n\t\t\t\tconst data = response.data[componentType];\n\t\t\t\tcb(err, data);\n\t\t\t\tresolve({ err, data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t * Gets monitor information for a given windowIdentifier or for a specific monitor.\n\t * If neither the identifier or monitor are provided then the monitorInfo for the current window is returned.\n\t *\n\t *\n\t * The information returned contains:\n\t *\n\t * **monitorRect** - The full dimensions for the monitor. <br>\n\t * **availableRect** - The dimensions for the available space on the monitor (less the Windows task bar). <br>\n\t * **unclaimedRect** - The dimensions for available monitor space less any space claimed by components (such as the Toolbar). <br>\n\t *\n\t * Each of these is supplemented with the following additional members:\n\t *\n\t * **width** - The width as calculated (right - left). <br>\n\t * **height** - The height as calculated (bottom - top). <br>\n\t * **position** - The position of the monitor, numerically from zero to X. Primary monitor is zero. <br>\n\t * **whichMonitor** - Contains the string \"primary\" if it is the primary monitor.\n\t *\n\t * @param  {WindowIdentifier} params.windowIdentifier The windowIdentifier to get the monitorInfo. If undefined, then the current window.\n\t * @param  {number|string} params.monitor If passed then a specific monitor is identified. Valid values include:\n\t *\n\t * <b>\"mine\"</b> - Place the window on the same monitor as the calling window.\n\t *\n\t * Integer value from 0-n (0 being the primary monitor).\n\t *\n\t * <b>\"primary\"</b> indicates the user's primary monitor.\n\t *\n\t * <b>\"all\"</b> - Put a copy of the component on all monitors.\n\t * @param  {Function} cb Returns a monitorInfo object containing the monitorRect, availableRect and unclaimedRect.\n\t */\n\tgetMonitorInfo(params: {\n\t\twindowIdentifier?: WindowIdentifier,\n\t\tmonitor?: string\n\t}, cb: Function = Function.prototype) {\n\t\tvar self = this;\n\t\tValidate.args(cb, \"function=\");\n\t\tLogger.system.debug(`MONITOR: launcherClient.getMonitorInfo`);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tutil.getMyWindowIdentifier(function (myWindowIdentifier) {\n\t\t\t\tif (!params.windowIdentifier) {\n\t\t\t\t\tparams.windowIdentifier = myWindowIdentifier;\n\t\t\t\t}\n\t\t\t\tself.routerClient.query(\"Launcher.getMonitorInfo\", params, function (err, response) {\n\t\t\t\t\tif (cb) {\n\t\t\t\t\t\tcb(err, response.data);\n\t\t\t\t\t}\n\t\t\t\t\tLogger.system.log(`MONITOR: launcherClient.getMonitorInfo query response data`, response.data);\n\t\t\t\t\tresolve({ err, data: response.data });\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t * Gets monitorInfo (dimensions and position) for all monitors. Returns an array of monitorInfo objects. See <a href=\"LauncherClient.html#getMonitorInfo\">LauncherClient#getMonitorInfo</a> for the format of a monitorInfo object.\n\t *\n\t *\n\t *\n\t * @param  {Function} cb Returns an array of monitorInfo objects.\n\t */\n\tgetMonitorInfoAll(cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tthis.routerClient.query(\"Launcher.getMonitorInfoAll\", {}, function (err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\treject({ err });\n\t\t\t\t\tcb(err);\n\t\t\t\t}\n\t\t\t\tresolve({ err, data: response.data });\n\t\t\t\tcb(err, response.data);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Registers a component with the Launcher Service. This method registers a given component in a component manifest, making it available to an app launcher component.\n\t *\n\t * @param {String} params.componentType The key of the component in the component's config.\n\t * @param {object} params.manifest This should be a component manifest, i.e., a component configuration file like <i>components.json</i>.\n\t * @param {Function} cb The callback to be invoked after the method completes successfully.\n\t */\n\tregisterComponent(params: {\n\t\tcomponentType: string,\n\t\tmanifest: any\n\t}, cb: Function = Function.prototype) {\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"LauncherService.registerComponent\", params, function (err, response) {\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(err, response.data);\n\t\t\t\t}\n\t\t\t\tresolve({ err, data: response.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Unregisters a component with the Launcher Service.\n\t *\n\t * @param {String} params.componentType The key of the component in the component's config.\n\t * @param  {Function} cb\n\t */\n\tunRegisterComponent(params: {\n\t\tcomponentType: string\n\t}, cb: Function = Function.prototype) {\n\t\tif (!params.componentType) return cb(\"No componentType provided\");\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"LauncherService.unRegisterComponent\", params, function (err, response) {\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(err, response.data);\n\t\t\t\t}\n\t\t\t\tresolve({ err, data: response.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\n\n\t/**\n\t * A convenience method for dealing with a common use-case, which is toggling the appearance and disappearance of a child window when a button is pressed, aka drop down menus. Simply call this method from the click handler for your element. Your child window will need to close itself on blur events.\n\t * @param {HTMLElement|selector} element The DOM element, or selector, clicked by the end user.\n\t * @param {windowIdentifier} windowIdentifier Identifies the child window\n\t * @param {object} params Parameters to be passed to {@link LauncherClient#showWindow} if the child window is allowed to open\n\t */\n\ttoggleWindowOnClick(element: HTMLElement | NodeSelector, windowIdentifier: WindowIdentifier, params: SpawnParams) {\n\t\tvar self = this;\n\t\tvar key = windowIdentifier.windowName + \":\" + windowIdentifier.uuid;\n\t\tif (!windowIdentifier.windowName) key = windowIdentifier.componentType;\n\t\t//If the element was clicked while the menu was open then return right away. The menu window will receive a blur event and close. This method is dependent on the fact that blur events are processed before click events. If this turns out to be a problem then put this call inside of a setTimeout().\n\t\tif (okayToOpenMenu[key] === false) {\n\t\t\tokayToOpenMenu[key] = true;\n\t\t\treturn;\n\t\t}\n\t\tvar onDisplayed = function (showError, showResponse) {\n\t\t\tif (!showResponse) return;\n\t\t\tlet finWindow = showResponse.finWindow;\n\t\t\tvar onBlur = function (blurResponse) {\n\t\t\t\tokayToOpenMenu[key] = true;\n\t\t\t\tself.windowClient.isMouseOverDOMElement(element, function (mouseIsOverElement) {\n\t\t\t\t\tokayToOpenMenu[key] = !mouseIsOverElement;\n\t\t\t\t});\n\t\t\t\tfinWindow.removeEventListener(\"blurred\", onBlur);\n\t\t\t};\n\t\t\tfinWindow.addEventListener(\"blurred\", onBlur);\n\t\t};\n\t\tthis.showWindow(windowIdentifier, params, onDisplayed);\n\t}\n\n\t/**\n\t * Displays a window and relocates/resizes it according to the values contained in params.\n\t *\n\t * @param {WindowIdentifier} windowIdentifier A windowIdentifier. This is an object containing windowName and componentType. If windowName is not given, Finsemble will try to find it by componentType.\n\t * @param {object} params Parameters. These are the same as {@link LauncherClient#spawn} with the following exceptions:\n\t * @param {any} [params.monitor] Same as spawn() except that null or undefined means the window should not be moved to a different monitor.\n\t * @param {number | string} [params.left] Same as spawn() except that null or undefined means the window should not be moved from current horizontal location.\n\t * @param {number | string} [params.top] Same as spawn() except that null or undefined means the window should not be moved from current vertical location.\n\t * @param {boolean} [params.spawnIfNotFound=false] If true, then spawns a new window if the requested one cannot be found.\n\t * *Note, only works if the windowIdentifier contains a componentType.*\n\t * @param {boolean} [params.autoFocus] If true, window will focus when first shown.\n\t * @param {boolean} [params.slave] Cannot be set for an existing window. Will only go into effect if the window is spawned.\n\t * (In other words, only use this in conjunction with spawnIfNotFound).\n\t * @param {Function} cb Callback to be invoked after function is completed. Callback contains an object with the following information:\n\t * <b>windowIdentifier</b> - The {@link WindowIdentifier} for the new window.\n\t * <b>windowDescriptor</b> - The {@link WindowDescriptor} of the new window.\n\t * <b>finWindow</b> - An `OpenFin` window referencing the new window.\n\t * @example\n\t * FSBL.Clients.LauncherClient.showWindow({windowName: \"Welcome Component-86-3416-Finsemble\", componentType: \"Welcome Component\"}, {spawnIfNotFound: true});\n\t */\n\tshowWindow(windowIdentifier: WindowIdentifier, params: ShowWindowParams, cb: Function = Function.prototype) {\n\t\tValidate.args(windowIdentifier, \"object\", params, \"object=\", cb, \"function=\");\n\t\tvar self = this;\n\t\tif (!params) { params = {}; }\n\t\tparams = util.clone(params);\n\t\tif (!params.staggerPixels && params.staggerPixels !== 0) {\n\t\t\tparams.staggerPixels = 100;\n\t\t}\n\t\tparams.windowIdentifier = windowIdentifier;\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tutil.getMyWindowIdentifier(function (myWindowIdentifier) {\n\t\t\t\tif (!params.relativeWindow) {\n\t\t\t\t\tparams.relativeWindow = myWindowIdentifier;\n\t\t\t\t}\n\t\t\t\tself.routerClient.query(\"Launcher.showWindow\", params, async function (err, response) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tresolve({ err });\n\t\t\t\t\t\treturn cb(err);\n\t\t\t\t\t}\n\t\t\t\t\tvar newWindowIdentifier = response.data.windowIdentifier;\n\t\t\t\t\tresponse.data.windowIdentifier.name = response.data.windowIdentifier.windowName;\n\t\t\t\t\tlet { wrap } = await FinsembleWindow.getInstance({ name: newWindowIdentifier.windowName });\n\t\t\t\t\tresponse.data.finWindow = wrap;\n\t\t\t\t\tresolve({ err, data: response.data });\n\t\t\t\t\tcb(err, response.data);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t * Asks the Launcher service to spawn a new component. Any parameter below can also be specified in <i>../config/components.json</i>, which will\n\t * then operate as the default for that value.\n\t *\n\t * The launcher parameters mimic CSS window positioning.\n\t * For instance, to set a full size window use `left=0`,`top=0`,`right=0`,`bottom=0`.\n\t * This is functionally equivalent to: left=0,top=0,width=\"100%\",height=\"100%\"\n\t *\n\t * @since 2.4.1 Added params.windowType (deprecated params.native), params.path, params.alias, params.argumentsAsQueryString - These are all for launching native apps.\n\t * @since 3.7.0 Added \"affinity\" parameter\n\t * @param {function} cb Function invoked after the window is created\n\t */\n\tspawn(component: string, params: SpawnParams, cb: Function = Function.prototype) {\n\t\tvar self = this;\n\n\t\tValidate.args(component, \"string\", params, \"object=\", cb, \"function=\");\n\t\tif (!params) { params = {}; }\n\t\tparams = util.clone(params);\n\t\tparams.component = component;\n\t\tif (!params.options) {\n\t\t\tparams.options = {};\n\t\t}\n\t\tif (!params.options.customData) {\n\t\t\tparams.options.customData = {};\n\t\t}\n\n\t\tif (!params.staggerPixels && params.staggerPixels !== 0) {\n\t\t\tparams.staggerPixels = 50;\n\t\t}\n\t\tLogger.system.debug(`Calling Spawn for componentType:${component}`);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tutil.getMyWindowIdentifier(function (windowIdentifier) {\n\t\t\t\tparams.launchingWindow = windowIdentifier;\n\t\t\t\tself.callSpawn(params, (err, response) => {\n\t\t\t\t\tresolve({ err, response });\n\t\t\t\t\tcb(err, response);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Returns an object that provides raw access to a remote window.\n\t * It returns an object that contains references to the Finsemble windowDescriptor, to\n\t * the `OpenFin` window, and to the native JavaScript (browser) window.\n\t *\n\t * *This will only work for windows that are launched using the Finsemble Launcher API.*\n\t *\n\t * As in any browser, you will not be able to manipulate a window that has been launched\n\t * cross domain or in a separate physical application (separate process). Caution\n\t * should be taken to prevent a window from being closed by the user if you plan on\n\t * referencing it directly. Due to these inherent limitations we strongly advise against a\n\t * paradigm of directly manipulating remote windows through JavaScript. Instead leverage the\n\t * RouterClient to communicate between windows and to use an event based paradigm!\n\t *\n\t * @param  {object} params Parameters\n\t * @param {string} params.windowName The name of the window to access.\n\t * @return {RawWindowResult} An object containing windowDescriptor, finWindow, and browserWindow. Or null if window isn't found.\n\t * @deprecated Finsemble now uses a splintering agent which disconnects windows from the main launcher.\n\t * It becomes impossible to access raw windows. See LauncherClient.getActiveDescriptors() and Util.getFinWindow()\n\t * @private\n\t */\n\tgetRawWindow(params: {\n\t\twindowName: string\n\t}) {\n\t\tvar launcher = window.opener;\n\t\tif (launcher.name !== \"launcherService\") {\n\t\t\tLogger.system.warn(\"LauncherClient.getNativeWindow: window not opened by Launcher Service\");\n\t\t}\n\t\treturn launcher.activeWindows.getWindow(params.windowName);\n\t}\n\n\t/**\n\t * @private\n\t */\n\tcallSpawn(params: SpawnParams, cb: Function = Function.prototype) {\n\t\tvar self = this;\n\t\tValidate.args(cb, \"function=\");\n\t\tLogger.perf.debug(\"CallSpawn\", \"start\", \"from spawn to callback\", params);\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tfunction invokeSpawnCallback(error, data) {\n\t\t\t\tcb(error, data);\n\t\t\t\tresolve({ err: error, data });\n\t\t\t}\n\t\t\tself.routerClient.query(\"Launcher.spawn\", params, async function (err, response) {\n\t\t\t\tLogger.system.debug(\"CallSpawn\", \"Initial launcher callback params\", err, response);\n\t\t\t\tLogger.perf.debug(\"CallSpawn\", \"Initial launcher callback\", response);\n\t\t\t\tif (err) {\n\t\t\t\t\tinvokeSpawnCallback(err, result);\n\t\t\t\t\treturn Logger.system.error(\"LauncherClient.callSpawn\", err);\n\t\t\t\t}\n\n\t\t\t\tresponse.data.windowIdentifier.name = response.data.windowIdentifier.windowName;\n\t\t\t\tvar result = response.data;\n\n\t\t\t\t// Add a wrapped finWindow to the response (this can only be done client side)\n\t\t\t\tif (result.windowDescriptor.native) return invokeSpawnCallback(err, result);/// This is way too slow for native windows so we just let this pass through and assume the window is ready.\n\t\t\t\tvar newWindowIdentifier = result.windowIdentifier;\n\t\t\t\tlet { wrap } = await FinsembleWindow.getInstance({ name: newWindowIdentifier.windowName }); //TODO - replace with FinsembleWindow\n\t\t\t\tresult.finWindow = wrap;\n\t\t\t\tlet componentOnlineChannel = \"Finsemble.\" + result.windowIdentifier.windowName + \".componentReady\";\n\t\t\t\tlet subscriberID = self.routerClient.subscribe(componentOnlineChannel, componentOnlineCallback);\n\n\t\t\t\tfunction componentOnlineCallback(err, response) {\n\t\t\t\t\tif (err) return Logger.system.error(err);\n\t\t\t\t\t//Ignore the initial \"uninitialized\" state message delivered by subscribe (a second message will contain the actual data)\n\t\t\t\t\tif (response && Object.keys(response.data).length === 0) return;\n\t\t\t\t\tif (params.position === \"relative\" && (params.groupOnSpawn || params.dockOnSpawn)) {\n\t\t\t\t\t\t//If 'params.relativeWindow' is supplied we need to dock to it, otherwise get the parent window (System.Window.getCurrent())\n\t\t\t\t\t\tconst windowToGroup = params.relativeWindow ? params.relativeWindow.windowName : System.Window.getCurrent().name;\n\n\t\t\t\t\t\tconst windows = [result.windowIdentifier.windowName, windowToGroup]; //TODO - replace with FinsembleWindow\n\t\t\t\t\t\tself.routerClient.query(\"DockingService.groupWindows\", {\n\t\t\t\t\t\t\twindows: windows,\n\t\t\t\t\t\t\tisMovable: true,\n\t\t\t\t\t\t}, function (error, response) {\n\t\t\t\t\t\t\tLogger.perf.debug(\"CallSpawn\", \"stop\");\n\t\t\t\t\t\t\tinvokeSpawnCallback(err, result);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLogger.perf.debug(\"CallSpawn\", \"stop\");\n\t\t\t\t\t\tinvokeSpawnCallback(err, result);\n\t\t\t\t\t}\n\t\t\t\t\tself.routerClient.unsubscribe(subscriberID);\n\t\t\t\t}\n\t\t\t});\n\n\t\t};\n\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t * Convenience function to get a monitor descriptor for a given windowIdentifier, or for the\n\t * current window.\n\t *\n\t * @param {WindowIdentifier} [windowIdentifier] The window to find the monitor for. Current window if undefined.\n\t * @param  {Function} cb Returns a monitor descriptor (optional or use returned Promise)\n\t * @returns {Promise} A promise that resolves to a monitor descriptor\n\t * @TODO this probably is unnecessary since a client can include util and a developer should be using this.getMonitorInfo which has full support for searching by component. Did Ryan need this?\n\t * @private\n\t */\n\tgetMonitor(windowIdentifier: WindowIdentifier, cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tutil.getMonitor(windowIdentifier, (monitor) => {\n\t\t\t\tcb(monitor);\n\t\t\t\tresolve(monitor);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Returns a windowIdentifier for the current window.\n\t *\n\t * @param {WindowIdentifier} cb Callback function returns windowIdentifier for this window (optional or use the returned Promise)\n\t * @returns {Promise} A promise that resolves to a windowIdentifier\n\t */\n\t// @TODO, [Terry] calls to launcherClient.myWindowIdentifier or launcherClient.getMyWindowIdentifier()\n\t// should be replaced with windowClient.getWindowIdentifier()\n\tgetMyWindowIdentifier(cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tutil.getMyWindowIdentifier((wi) => {\n\t\t\t\tcb(wi);\n\t\t\t\tresolve(wi);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t* Gets the windowDescriptor for all open windows.\n\t*\n\t* <b>Note:</b> This returns descriptors even if the window is not part of the workspace.\n\t*\n\t* @param {StandardCallback} cb Callback returns an array of windowDescriptors.\n\t*\n\t*/\n\tgetActiveDescriptors(cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"Launcher.getActiveDescriptors\", {}, function (err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn Logger.system.error(err);\n\t\t\t\t}\n\t\t\t\tif (response) {\n\t\t\t\t\tcb(err, response.data);\n\t\t\t\t\tresolve({ err, data: response.data });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t * Adds a custom component. Private for now.\n\t * @private\n\t */\n\taddUserDefinedComponent(params, cb = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"Launcher.userDefinedComponentUpdate\", {\n\t\t\t\ttype: \"add\",\n\t\t\t\tname: params.name,\n\t\t\t\turl: params.url,\n\t\t\t}, function (err, response) {\n\t\t\t\tcb(err, response.data);\n\t\t\t\tresolve({ err, data: response.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Adds a custom component. Private for now.\n\t * @private\n\t */\n\tremoveUserDefinedComponent(params, cb = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"Launcher.userDefinedComponentUpdate\", {\n\t\t\t\ttype: \"remove\",\n\t\t\t\tname: params.name,\n\t\t\t\turl: params.url,\n\t\t\t}, function (err, response) {\n\t\t\t\tcb(err, response.data);\n\t\t\t\tresolve({ err, data: response.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t * Gets components that can receive specific data types. Returns an object containing componentTypes mapped to a list of dataTypes they can receive. This is based on the \"advertiseReceivers\" property in a component's config.\n\t * @param {Array.<string>} params.dataTypes An array of data types. Looks for components that can receive those data types.\n\t * @param {Function} cb The callback to be invoked after the method completes successfully.\n\t *\n\t * @since 2.0\n\t *\n\t * @example\n\t * FSBL.Client.LauncherClient.getComponentsThatCanReceiveDataTypes({ dataTypes: ['chartiq.chart', 'salesforce.contact']}, function(err, response) {\n\t * \t//Response contains: {'chartiq.chart': ['Advanced Chart'], 'salesforce.contact': ['Salesforce Contact']}\n\t * })\n\t *\n\t */\n\tgetComponentsThatCanReceiveDataTypes(params: {\n\t\tdataTypes: string[]\n\t}, cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tif (params.dataTypes && !Array.isArray(params.dataTypes)) { params.dataTypes = [params.dataTypes]; }\n\t\tValidate.args(params.dataTypes, \"array\");\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"LauncherService.getComponentsThatCanReceiveDataTypes\", params, function (err, response) {\n\t\t\t\tcb(err, response.data);\n\t\t\t\tresolve({ err, data: response.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t * Brings a windows to front. If no windowList, groupName or componentType is specified, brings all windows to front.\n\t * @param params\n\t * @param {Array.<string | Object>} [params.windowList] Optional. An array An array of window names or window identifiers. Not to be used with componentType.\n\t * @param {string} [params.groupName] Optional. The name of a window group to bring to front.\n\t * @param {string} [params.componentType] Optional. The componentType to bring to front. Not to be used with windowList.\n\t *\n\t * @since TBD\n\t *\n\t * @example\n\t * LauncherClient.bringWindowsToFront({ windowList: ['AdvancedChart-123-123', 'Symphony-Chat-234-234']}, function(err, response) {\n\t *\n\t * })\n\t *\n\t * @private\n\t */\n\tbringWindowsToFront(params: {\n\t\twindowList?: string[] | WindowIdentifier[],\n\t\tgroupName?: string,\n\t\tcomponentType?: string\n\t} = {}, cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tif (params.windowList && !Array.isArray(params.windowList)) {\n\t\t\tparams.windowList = [params.windowList];\n\t\t}\n\t\tif (params.groupName) {\n\t\t\tValidate.args(params.groupName, \"string\");\n\t\t}\n\t\tif (params.componentType) {\n\t\t\tValidate.args(params.componentType, \"string\");\n\t\t}\n\n\t\t//Changed to query to allow for async bring to front and to do something when all windows have been brought to front\n\t\tthis.routerClient.query(\"LauncherService.bringWindowsToFront\", params, (err, response) => {\n\t\t\tcb(err, response);\n\t\t});\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Minimizes all but a specific list or group of windows. Either groupName or windowList must be specified.\n\t * @param params\n\t * @param {Array.<string | Object>} [params.windowList] Optional. An array of window names or window identifiers. Not to be used with componentType.\n\t * @param {string} [params.groupName] Optional. The name of a window group to hyperFocus.\n\t * @param {string} [params.componentType] Optional. The Component Type to hyperFocus. Not to be used with windowList.\n\t *\n\t * @since TBD\n\t * @example\n\t * LauncherClient.hyperFocus({ windowList: ['AdvancedChart-123-123', 'Symphony-Chat-234-234']}, function(err, response) {\n\t *\n\t * })\n\t *\n\t * @private\n\t */\n\thyperFocus(params: {\n\t\twindowList?: string[] | WindowIdentifier[],\n\t\tgroupName?: string,\n\t\tcomponentType?: string\n\t}, cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tif (params.windowList && !Array.isArray(params.windowList)) {\n\t\t\tparams.windowList = [params.windowList];\n\t\t}\n\t\tif (!params.windowList && !params.groupName && !params.componentType) {\n\t\t\tparams.windowList = [this.myWindowIdentifier];\n\t\t}\n\t\tif (params.groupName) {\n\t\t\tValidate.args(params.groupName, \"string\");\n\t\t}\n\t\tif (params.componentType) {\n\t\t\tValidate.args(params.componentType, \"string\");\n\t\t}\n\n\t\tthis.routerClient.transmit(\"LauncherService.hyperFocus\", params);\n\t\tcb();\n\t\treturn Promise.resolve();\n\n\t}\n\n\t/**\n\t * Minimize windows. If no windowList or groupName is specified, all windows will be minimized.\n\t * @param {*} params\n\t * @param {Array.<string | Object>} [params.windowList] Optional. An array of window names or window identifiers. Not to be used with componentType.\n\t * @param {string} [params.groupName] Optional. The name of a window group to minimize.\n\t * @param {string} [params.componentType] Optional. The component type of windows to Minimize. Not to be used with windowList.\n\t *\n\t * @since TBD\n\t * @private\n\t */\n\tminimizeWindows(params: {\n\t\twindowList?: string[] | WindowIdentifier[],\n\t\tgroupName?: string,\n\t\tcomponentType?: string\n\t}, cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tif (params.windowList && !Array.isArray(params.windowList)) {\n\t\t\tparams.windowList = [params.windowList];\n\t\t}\n\t\tif (params.groupName) {\n\t\t\tValidate.args(params.groupName, \"string\");\n\t\t}\n\t\tif (params.componentType) {\n\t\t\tValidate.args(params.componentType, \"string\");\n\t\t}\n\t\tthis.routerClient.transmit(\"LauncherService.minimizeWindows\", params);\n\t\tcb();\n\t\treturn Promise.resolve();\n\n\t}\n\n\t/**\n\t * Create Window group\n\t * @param {*} params\n\t * @param {string} [params.groupName] The name of the window group to create\n\t * @param {Array.<string | Object>} [params.windowList] An array of window names or window identifiers to add to the group. Optional.\n\t * @param {function} cb callback to be called upon group creation\n\t *\n\t * @since TBD\n\t * @private\n\t */\n\tcreateWindowGroup(params: {\n\t\twindowList?: string[] | WindowIdentifier[],\n\t\tgroupName?: string\n\t}, cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tif (params.windowList && !Array.isArray(params.windowList)) {\n\t\t\tparams.windowList = [params.windowList];\n\t\t\tdelete params.groupName;\n\t\t}\n\t\tValidate.args(params.groupName, \"string\");\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tif (!params.groupName) {\n\t\t\t\tlet err = \"Invalid Parameters\";\n\t\t\t\tresolve({ err });\n\t\t\t\tcb(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.routerClient.query(\"LauncherService.createWindowGroup\", params, function (err, response) {\n\t\t\t\tcb(err, response);\n\t\t\t\tresolve({ err, data: response });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t * Add Windows to group\n\t * @param {*} params\n\t * @param {string} [params.groupName] The name of the window group\n\t * @param {Array.<string | Object>} [params.windowList] An array of window names or window identifiers to add to the group.\n\t * @param {function} cb callback to be called upon group creation\n\t *\n\t * @since TBD\n\t * @private\n\t */\n\taddWindowsToGroup(params: {\n\t\twindowList?: string[] | WindowIdentifier[],\n\t\tgroupName?: string\n\t}, cb = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tif (!params.groupName || !params.windowList) {\n\t\t\t\tlet err = \"Invalid Parameters\";\n\t\t\t\tresolve({ err });\n\t\t\t\tcb(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (params.windowList && !Array.isArray(params.windowList)) {\n\t\t\t\tparams.windowList = [params.windowList];\n\t\t\t}\n\n\t\t\tValidate.args(params.groupName, \"string\");\n\t\t\tthis.routerClient.query(\"LauncherService.addWindowsToGroup\", params, function (err, response) {\n\t\t\t\tcb(err, response);\n\t\t\t\tresolve({ err, data: response });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Remove Windows from group\n\t * @param {*} params\n\t * @param {string} [params.groupName] The name of the window group\n\t * @param {Array.<string | Object>} [params.windowList] An array of window names or window identifiers to remove from the group.\n\t * @param {function} cb callback to be called upon group creation\n\t *\n\t * @since TBD\n\t * @private\n\t */\n\tremoveWindowsFromGroup(params: {\n\t\twindowList?: string[] | WindowIdentifier[],\n\t\tgroupName?: string\n\t}, cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tif (!params.groupName || !params.windowList) {\n\t\t\t\tlet err = \"Invalid Parameters\";\n\t\t\t\tresolve({ err });\n\t\t\t\tcb(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (params.windowList && !Array.isArray(params.windowList)) {\n\t\t\t\tparams.windowList = [params.windowList];\n\t\t\t}\n\t\t\tthis.routerClient.query(\"LauncherService.removeWindowsFromGroup\", params, function (err, response) {\n\t\t\t\tcb(err, response);\n\t\t\t\tresolve({ err, data: response });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t * Get Window Groups that a window belongs to. If no windowIdentifier is specified, gets  the groups of the current window.\n\t * @param {*} params\n\t * @param {WindowIdentifier} [params.windowIdentifier] Optional. If not specified uses current window\n\t * @param {*} cb callback with a list of groups\n\t *\n\t * @since TBD\n\t * @private\n\t */\n\tgetGroupsForWindow(params: {\n\t\twindowIdentifier: WindowIdentifier\n\t}, cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tif (!params || !params.windowIdentifier) {\n\t\t\t\tthis.windowClient.getComponentState({ field: \"finsemble:windowGroups\" }, function (err, groups) {\n\t\t\t\t\tresolve({ err, data: groups });\n\t\t\t\t\tcb(err, groups);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.routerClient.query(\"LauncherService.getGroupsForWindow\", params, function (err, response) {\n\t\t\t\tresolve({ err, data: response.data });\n\t\t\t\tcb(err, response.data);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * @private\n\t * @param {*} params\n\t * @param {WindowIdentifier} [params.windowIdentifier] Optional. Current window is assumed if not specified.\n\t * @param {Array.<string>} [params.groupNames] List of group names to add window to. Groups will be created if they do not exist.\n\t * @param {*} cb\n\t */\n\taddToGroups(params: {\n\t\twindowIdentifier?: WindowIdentifier,\n\t\tgroupNames?: string[]\n\t}, cb: Function = Function.prototype) {\n\t\tValidate.args(cb, \"function=\");\n\t\tValidate.args(params.groupNames, \"array\");\n\t\tif (!params.windowIdentifier) {\n\t\t\tparams.windowIdentifier = this.myWindowIdentifier;\n\t\t}\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.routerClient.query(\"LauncherService.addWindowToGroups\", params, (err, response) => {\n\t\t\t\tcb(err, response);\n\t\t\t\tresolve({ err, data: response });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t/**\n\t * _createWrap allows us to create a wrap without spawning a window\n\t *\n\t * @param {Object} params\n\t * @param {String} params.name\n\t * @param {Function} cb\n\t * @memberof LauncherClient\n\t * @private\n\t */\n\t_createWrap(params: {\n\t\tname: string\n\t}, cb: Function) {\n\t\tthis.routerClient.query(\"LauncherService.createWrap\", params, cb);\n\t}\n\n\t/**\n\t * @private\n\t *\n\t * @param {*} cb\n\t * @memberof LauncherClient\n\t */\n\tstart(cb) {\n\t\tvar self = this;\n\t\t// Get Group Updates (only if we are not in a service)\n\t\tif (typeof Globals.FSBL !== \"undefined\") {\n\t\t\t// Get Groups from Component State on Load\n\t\t\tfunction subscribeToGroupUpdates() {\n\t\t\t\tself.routerClient.subscribe(\"Finsemble.LauncherService.updateGroups.\" + self.windowName, function (err, response) {\n\t\t\t\t\tif (!Array.isArray(response.data)) return; //dont attempt to save the initial responder state.\n\t\t\t\t\tself.windowClient.setComponentState({ field: \"finsemble:windowGroups\", value: response.data });\n\t\t\t\t});\n\t\t\t}\n\t\t\t// cannot add a windowClient dependency here so explicitly wait for windowClient ready (ideally dependency manage could fully handle but maybe later)\n\t\t\tGlobals.FSBL.addEventListener(\"onReady\", function () {\n\t\t\t\tself.windowClient.onReady(() => {\n\t\t\t\t\tself.windowClient.getComponentState({ field: \"finsemble:windowGroups\" }, function (err, groups) {\n\t\t\t\t\t\tif (!err && groups) {\n\t\t\t\t\t\t\treturn self.addToGroups({\n\t\t\t\t\t\t\t\tgroupNames: groups,\n\t\t\t\t\t\t\t}, subscribeToGroupUpdates);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsubscribeToGroupUpdates();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tsetInterval(function () {\n\t\t\tself.routerClient.transmit(\"Finsemble.heartbeat\", { type: \"component\", windowName: self.windowName, componentType: \"finsemble\" });\n\t\t}, 1000);\n\n\t\t// @TODO, [Terry] remove in favor of calls to windowClient.getMyIdentifier()\n\t\tthis.getMyWindowIdentifier((identifier) => {\n\t\t\tself.myWindowIdentifier = identifier;\n\t\t\tif (cb) {\n\t\t\t\tcb();\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction constructInstance(params?) {\n\tparams = params ? params : {};\n\tif (!params.windowClient) params.windowClient = WindowClient;\n\treturn new LauncherClient({\n\t\tclients: params,\n\t\tstartupDependencies: {\n\t\t\tservices: [\"windowService\"],\n\t\t},\n\t\tonReady: function (cb) {\n\t\t\tLogger.system.debug(\"launcherClient ready\", window.name);\n\t\t\tLogger.perf.debug(\"LauncherClientReadyTime\", \"stop\");\n\n\t\t\tlauncherClient.start(cb);\n\t\t},\n\t\tname: \"launcherClient\",\n\t});\n}\n\nvar launcherClient = constructInstance();\nlauncherClient.constructInstance = constructInstance;\n\nexport default launcherClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/launcherClient.ts","/**\n *\n * This file handles common functionality needed in both the client and service.\n *\n */\n// Get a value from an object using a string. {abc:{123:\"value\"}} you would do byString(object,\"abc.123\")\nexport function byString(o, s) {//Object,String\n\ts = s.replace(/\\[(\\w+)\\]/g, \".$1\"); // convert indexes to properties\n\ts = s.replace(/^\\./, \"\");           // strip a leading dot\n\tvar a = s.split(\".\");\n\tfor (var i = 0, n = a.length; i < a.length; ++i) {// Loop through and find the attribute that matches the string passed in\n\t\tvar k = a[i];\n\t\tif (!o) { return null; }\n\t\tif (typeof (o) === \"string\") return null; // Reached the end of the chain\n\n\t\tif (k in o) {\n\t\t\to = o[k];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn o;\n}\n//can add values to an object from a string. Must be in `.` form abc.123\nexport const setPath = (object, path, value) => path\n\t.split(\".\")\n\t.reduce((o, p) => o[p] = path.split(\".\").pop() === p ? value : o[p] || {}, object);\n\n// This handles the initial mapping for us. It will crawl through all child objects and map those too. Parent is the current location within the object(`parent.child`). Null is top level. The mapping is all flattened\nexport function initObject(object, parent, mapping) {\n\tvar mapLocation;\n\n\tif (!parent) { parent = null; }\n\n\tif (typeof object !== \"object\") {\n\t\tmapLocation = parent ? parent + \".\" + n : n;\n\t\tmapping[mapLocation] = parent;\n\t\treturn;\n\t}\n\n\tfor (let n in object) {\n\t\tif (typeof object[n] === \"object\" && object[n] !== \"undefined\") {\n\t\t\tmapLocation = parent ? parent + \".\" + n : n;\n\t\t\tmapping[mapLocation] = parent;\n\t\t\tinitObject(object[n], mapLocation, mapping);// If we have another object, map it\n\t\t} else {\n\t\t\tmapLocation = parent ? parent + \".\" + n : n;\n\t\t\tmapping[mapLocation] = parent;\n\t\t}\n\t}\n}\n// Will map out a field in an object. So we don't have to loop through the whole thing every time we have a change.\nexport function mapField(object, s, mapping) {\n\tif (mapping[s]) { return; }// If we're already mapped move on.\n\ts = s.replace(/\\[(\\w+)\\]/g, \".$1\"); // convert indexes to properties\n\ts = s.replace(/^\\./, \"\");           // strip a leading dot\n\tvar a = s.split(\".\");\n\tvar currentLocation = s;\n\n\tif (!mapping.hasOwnProperty(currentLocation)) {\n\t\tvar newString = null;\n\t\tif (a.length > 1) {\n\t\t\ta.pop();\n\t\t\tnewString = a.join(\".\");\n\t\t}\n\n\t\tmapping[currentLocation] = newString;\n\t}\n\n\tvar newObject = byString(object, currentLocation);\n\tif (newObject === \"undefined\") { return; }// If the location doesn't exist exit.\n\tif (typeof newObject === \"object\") {\n\t\tfor (var key in newObject) {\n\t\t\tmapField(object, currentLocation + \".\" + key, mapping);// If we need to ke\n\t\t}\n\t}\n}\n// To see if we're replacing an existing field/object with an object/field that would make some of the mapping obsolete.\nexport function checkForObjectChange(object, field, mapping) {\n\tvar objectReplacing = byString(object, field);\n\tif (objectReplacing === null) { return false; }\n\tif (typeof objectReplacing === \"object\") {\n\t\t// we're replacing an object which requires use to remap at this level.\n\t\treturn removeChildMapping(mapping, field);\n\n\t}\n\tif (typeof objectReplacing !== \"object\" && typeof field === \"object\") {\n\t\t//we're replacing a non object with an object. Need to map out this new object\n\t\treturn removeChildMapping(mapping, field);\n\t}\n\treturn null;\n}\n//This will remove an item from mapping and pass back an array so that we can send out notifications\nfunction removeChildMapping(mapping, field) {\n\tvar removals = [];\n\tfor (var map in mapping) {\n\t\tvar lookField = field + \".\";\n\t\tif (map.includes(lookField)) {\n\t\t\tremovals.push(map);\n\t\t\tdelete mapping[map];\n\t\t}\n\t}\n\treturn removals;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/storeUtils.js","import { each as asyncEach, map as asyncMap } from \"async\";\nimport * as storeUtils from \"../common/storeUtils\";\nimport Logger from \"./logger\";\nimport { IGlobals } from \"../common/Globals\";\nimport { _BaseClient } from \"./baseClient\";\n/** The global `window` object. We cast it to a specific interface here to be\n * explicit about what Finsemble-related properties it may have. */\nconst Globals = window as IGlobals;\n/**\n *\n * @introduction\n * <h2>Store Model</h2>\n * The Store Model consists of store instances. It handles getters/setters of data.\n * @hideConstructor\n * @class\n */\n\n\ndeclare type setValuesParam = {\n\t/** The name of the field where data will be stored */\n\tfield: string,\n\t/** Value to be stored */\n\tvalue: any\n}\nclass StoreModel extends _BaseClient {\n\trouterClient;\n\tisGlobal: boolean;\n\tvalues = {};\n\tlisteners = [];\n\tlst;\n\tregisteredDispatchListeners = [];\n\tmapping = {};\n\tsubs;\n\tconstructor(params, routerClient) {\n\t\tsuper(params);\n\t\tthis.routerClient = routerClient;\n\t\tthis.isGlobal = params.global;\n\t\tthis.name = params.store ? params.store : \"finsemble\";\n\t\tif (params.values) this.values = params.values;\n\t\tthis.lst = this.listeners;\n\n\t\tstoreUtils.initObject(this.values, null, this.mapping);\n\n\t\t// Add listeners for global stores. Not needed for local stores as everything happens internally.\n\t\tif (this.isGlobal) {\n\t\t\tthis.routerClient.addListener(\"storeService.dispatch.\" + this.name, this.handleDispatchedMessages.bind(this));\n\t\t}\n\t}\n\n\t/** This is the Flux dispatcher. It can be used dispatch actions across stores. These action are not caught inside of the global store service. For more information, you can read the [Flux documentation](https://facebook.github.io/flux/docs/overview.html).\n\t *\n\t * Example:\n\t * ```\n\t * store.Dispatcher.register(function(action){\n\t * \tif(action.actionType === \"ACTION1\") {\n\t * \t\t// Do something with the action here.\n\t * \t}\n\t * })\n\t * ```\n\t */\n\tDispatcher = {\n\t\tregister: (fn) => {\n\t\t\tthis.registeredDispatchListeners.push(fn);\n\t\t},\n\t\tdispatch: (data) => {\n\t\t\tif (this.isGlobal) {\n\t\t\t\tthis.routerClient.transmit(\"storeService.dispatch.\" + this.name, data);\n\t\t\t} else {\n\t\t\t\tthis.handleDispatchedMessages(null, {\n\t\t\t\t\tdata: data\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @param {*} err\n\t * @param {*} message\n\t * @private\n\t */\n\thandleDispatchedMessages(err, message: { data: any }) {\n\t\tfor (var i = 0; i < this.registeredDispatchListeners.length; i++) {\n\t\t\tthis.registeredDispatchListeners[i](message.data);\n\t\t}\n\t};\n\n\t/**\n\t * Set a value in the store. Two events will be triggered with topics of: store and field.\n\t * @param {String} params.field The name of the field where data will be stored\n\t * @param {String} params.value Value to be stored\n\t * @param {function} cb callback\n\t * @returns {null}\n\t *\n\t * @example\n\t * store.setValue({ field:'field1', value:\"new value\" });\n\t */\n\tsetValue(params: { field: string, value: any }, cb: StandardCallback) {\n\t\tif (!params.field) { Logger.system.error(\"DistributedStore.setValue:no field provided\", params); }\n\t\tif (!params.hasOwnProperty(\"value\")) { Logger.system.error(\"DistributedStore.setValue:no value provided\", params); }\n\t\tif (this.isGlobal) {\n\t\t\tvar data = {\n\t\t\t\tstore: this.name,\n\t\t\t\tfield: params.field,\n\t\t\t\tvalue: params.value\n\t\t\t};\n\t\t\treturn Globals.distributedStoreClient.routerClient.query(\"storeService.setValue\", data, function (err) {\n\t\t\t\treturn cb ? cb(err) : null;\n\t\t\t});\n\t\t}\n\n\t\tconst removals = storeUtils.checkForObjectChange(this.values, params.field, this.mapping);\n\n\t\tstoreUtils.setPath(this.values, params.field, params.value);\n\n\t\tstoreUtils.mapField(this.values, params.field, this.mapping);\n\n\t\tif (removals) { this.sendRemovals(removals); }\n\n\t\tthis.triggerListeners(this.name, this);\n\t\tthis.publishObjectUpdates(params.field, this.mapping);\n\t\treturn cb ? cb(null) : null;\n\t};\n\n\t/**\n\t * Handles changes to the store. Will publish from the field that was changed and back.\n\t */\n\tprivate publishObjectUpdates(startField, mappings) {\n\t\tconst currentMapping = mappings;\n\t\twhile (startField) {\n\t\t\tthis.triggerListeners(this.name + \".\" + startField, storeUtils.byString(this.values, startField));\n\t\t\tstartField = currentMapping[startField];\n\t\t}\n\t}\n\n\t/**\n\t * Send items that are no longer mapped or had their map change. If a value is remapped we'll send out the new value.\n\t*/\n\tprivate sendRemovals(removals) {\n\t\tfor (var i = 0; i < removals.length; i++) {\n\t\t\tthis.triggerListeners(this.name + \".\" + removals[i], storeUtils.byString(this.values, removals[i]));\n\t\t}\n\t}\n\n\t/**\n\t * This will set multiple values in the store.\n\t * @param {function} cb callback\n\t * @param {Array<setValuesParam>} fields An array where each element is like the object below.\n\t * @example\n\t * store.setValues([{ field:'field1', value:\"new value\" }]);\n\t */\n\tsetValues(\n\t\tfields: setValuesParam[],\n\t\tcb?: StandardCallback,\n\t) {\n\t\tif (!fields) {\n\t\t\treturn Logger.system.error(\"DistributedStore.setValues:no params given\");\n\t\t}\n\n\t\tif (!Array.isArray(fields)) { return Logger.system.error(\"DistributedStore.setValues:params must be an array\"); }\n\n\t\tasyncEach(fields, (field, done) => {\n\t\t\tthis.setValue(field, done);\n\t\t}, (err) => {\n\t\t\treturn cb ? cb(err) : null;\n\t\t});\n\t};\n\n\t/**\n\t * Get a value from the store. If global is not set, we'll check local first then we'll check global. Returns the value of the field. If no callback is given and the value is local, this will run synchronously.\n\t * @param {String} params.field The field where the value is stored.\n\t * @param {StandardCallback} cb Will return the value if found.\n\t * @returns {any} The value of the field. If no callback is given and the value is local, this will run synchronous\n\t * @example\n\t * store.getValue({ field: 'field1' }, function(err,value){});\n\t * store.getValue('field1', function(err,value){});\n\t */\n\tgetValue(params: { field: string } | string, cb?: StandardCallback) {\n\t\tif (typeof params === \"string\") { params = { field: params }; }\n\t\tif (!params.field) {\n\t\t\tif (!cb) { return \"no field provided\"; }\n\t\t\treturn cb(\"no field provided\");\n\t\t}\n\n\t\tif (this.isGlobal) { return this.getGlobalValue(params, cb); }\n\t\tvar fieldValue = storeUtils.byString(this.values, params.field);\n\t\tif (fieldValue !== undefined) {\n\t\t\tif (!cb) { return fieldValue; }\n\t\t\treturn cb(null, fieldValue);\n\t\t}\n\t\tif (!cb) { return null; }\n\t\treturn cb(\"couldn't find a value\");\n\t};\n\n\t/**\n\t * Get multiple values from the store. Returns an object of with the fields as keys.If no callback is given and the value is local, this will run synchronously. Returns an object of with the fields as keys.If no callback is given and the value is local, this will run synchronous\n\t * @param {Array.<object>|Array.<String>} fields An Array of field objects. If there are no fields provided, all values in the store are returned.\n\t * @param {string} fields.field The field where the value is stored.\n\t * @param {Function} [cb] Will return the value if found.\n\t * @returns {Object} - returns an object of with the fields as keys.If no callback is given and the value is local, this will run synchronous\n\t * @example\n\t * store.getValues([{ field:'field1' }, { field:'field2' }], function(err,values){});\n\t * store.getValues(['field1', 'field2'], function(err,values){});\n\t */\n\tgetValues(fields: { field: string }[] | string[], cb): { [k: string]: any } | void {\n\t\tif (typeof fields === \"function\") {\n\t\t\tcb = fields;\n\t\t\tif (this.isGlobal) { return this.getGlobalValues(null, cb); }\n\n\t\t\tif (!cb) { return this.values; }\n\t\t\treturn cb(null, this.values);\n\t\t}\n\t\tif (!Array.isArray(fields)) {\n\t\t\treturn this.getValue(fields, cb);\n\t\t}\n\n\t\tif (this.isGlobal) { return this.getGlobalValues(fields, cb); }\n\t\tvar values = {};\n\n\t\tfor (var i = 0; i < fields.length; i++) {\n\t\t\tvar item = fields[i];\n\t\t\tvar field = typeof item === \"string\" ? item : item.field;\n\t\t\tvar combined = this.name + (field ? \".\" + field : \"\");\n\t\t\tvar fieldValue = storeUtils.byString(this.values, field);\n\t\t\tvalues[field] = fieldValue;\n\t\t}\n\t\tif (!cb) { return values; }\n\t\treturn cb(null, values);\n\t};\n\n\t/**\n\t * Get a single value from the global store.\n\t */\n\tprivate getGlobalValue(params, cb) {\n\t\tGlobals.distributedStoreClient.routerClient.query(\"storeService.getValue\",\n\t\t\t{\n\t\t\t\tstore: this.name,\n\t\t\t\tfield: params.field\n\t\t\t}\n\t\t\t, (err, response) => {\n\t\t\t\tif (err) { return cb(err); }\n\t\t\t\treturn cb(err, response.data);\n\t\t\t});\n\t}\n\t/**\n\t * Get values from the global store.\n\t */\n\tprivate getGlobalValues(params, cb) {\n\t\tGlobals.distributedStoreClient.routerClient.query(\"storeService.getValues\",\n\t\t\t{\n\t\t\t\tstore: this.name,\n\t\t\t\tfields: params\n\t\t\t}\n\t\t\t, (err, response) => {\n\t\t\t\tif (err) { return cb(err); }\n\t\t\t\treturn cb(err, response.data);\n\t\t\t});\n\t}\n\n\t/**\n\t * Remove a value from the store.\n\t* @param {Object | String} params - Either an object (`{ field: string }`) or string\n\t * @param {String} param.field The name of the field\n\t * @param {Function} cb returns an error if there is one\n\t * @todo this function needs some help. The first should be 'if(typeof params === \"string\");.\n\t * @example\n\t * store.removeValue({ field: 'field1' }, function(err,bool){});\n\t */\n\tremoveValue(params, cb) {\n\t\tif (!params.field) {\n\t\t\tif (params !== undefined) {\n\t\t\t\tparams = { field: params };\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn cb(\"no field provided\");\n\t\t\t}\n\t\t}\n\t\tparams.value = null;\n\t\treturn this.setValue(params, cb);\n\t};\n\n\t/**\n\t * Removes multiple values from the store.\n\t * @param {Object[] | String[]} params - An Array of field objects\n\t * @param {String} params.field - The name of the field\n\t * @param {Function} cb -  returns an error if there is one.\n\t * @example\n\t * store.removeValues([{ field: 'field1' }], function(err,bool){});\n\t */\n\tremoveValues(params: string[] | { field: string }[], cb) {\n\t\tif (!Array.isArray(params)) { return cb(\"The passed in parameter needs to be an array\"); }\n\t\tasyncMap(params, this.removeValue, (err, data) => {\n\t\t\treturn cb(err, data);\n\t\t});\n\t};\n\n\t/**\n\t * Destroys the store.\n\t * @param {Function} cb Function to be invoked after the store is destroyed.\n\t * @example\n\t * store.destroy();\n\t */\n\tdestroy(cb) {\n\t\tvar params = {\n\t\t\tstore: this.name,\n\t\t\tglobal: this.isGlobal,\n\t\t};\n\n\t\tGlobals.distributedStoreClient.removeStore(params, (err, response) => {\n\t\t\tif (err) { return cb(err); }\n\t\t\treturn cb(null, true);\n\t\t});\n\t};\n\n\t/**\n\t * NOTE: make sure we dont have duplicate router subscribers\n\t * @private\n\t */\n\tchangeSub(change) {\n\t\tif (!this.subs) this.subs = [];\n\t\tif (!this.subs[change]) {\n\t\t\tif (this.isGlobal) { Globals.distributedStoreClient.routerClient.subscribe(\"storeService\" + change, this.handleChanges); }\n\t\t\tthis.subs[change] = true;\n\t\t}\n\t};\n\n\t/**\n\t* Add a listener to the store at either the store or field level. If no field is given, the store level is used. You can also listen to nested object (e.g., field1.nestedField).\n      * @param {String} params.field The piece of data that you want to listen on. If this is empty it listens to all changes of the store.\n\t* @param {Function} fn the function to call when the data changes\n\t* @param {Function} cb callback to be invoked\n\t* @example\n\t* var myFunction = function(err,data) {\n\t* }\n\t* store.addListener({ field:'field1' }, myFunction, cb);\n\t*/\n\taddListener(params: { field?: string }, fn, cb) {\n\t\tvar field = null;\n\t\tif (typeof params === \"function\") {\n\t\t\tfn = params;\n\t\t\tparams = {};\n\t\t}\n\t\tif (params.field) { field = params.field; }\n\n\t\tvar combined = this.name + (field ? \".\" + field : \"\");\n\t\tif (this.listeners[combined]) {\n\t\t\tthis.listeners[combined].push(fn);\n\t\t}\n\t\telse {\n\t\t\tthis.listeners[combined] = [fn];\n\t\t}\n\n\t\tthis.changeSub(combined);\n\t\treturn cb ? cb() : null;\n\t};\n\n\t/**\n\t* Add an array of listeners as  objects or strings. If using strings, you must provide a function callback.\n\t* @param {String} params.field The piece of data that you want listen on. If this is empty it listen to all changes of the store.\n\t* @param {String} params.listener The function to call when the piece of data is modified. If this is empty, fn is used.\n\t* @param {function} fn The function to call when the piece of data is modified.\n\t* @param {function} cb callback to be invoked when the listeners are added.\n\t* @example\n\t* var myFunction = function(err,data){\n\t* }\n\t* store.addListeners([{\n\t* \tfield: 'field1',\n\t* \tlistener: myFunction\n\t* },\n\t* {\n\t* \tfield:'field2',\n\t* \tlistener: myFunction\n\t* }],\n\t* null, cb);\n\t* store.addListeners([{ field: 'field1' },{ field: 'field2', listener: myFunction }], myFunction, cb);\n\t* store.addListeners(['field1','field2'], myFunction, cb);\n\t*/\n\taddListeners(params: { field: string, listener?: Function } | { field: string, listener?: Function }[] | string[], fn?, cb?) {\n\t\tif (!Array.isArray(params)) {\n\t\t\treturn this.addListener(params, fn, cb);\n\t\t}\n\n\t\tfor (var i = 0; i < params.length; i++) {\n\t\t\tvar field = null;\n\t\t\tvar item = params[i];\n\t\t\tvar ls;\n\t\t\tif (typeof item === \"string\") {\n\t\t\t\tfield = item;\n\t\t\t} else if (item.field) {\n\t\t\t\tfield = item.field;\n\t\t\t\tls = (params[i] as any).listener;\n\t\t\t}\n\n\t\t\tvar combined = this.name + (field ? \".\" + field : \"\");\n\t\t\tif (!ls) {\n\t\t\t\tif (fn && typeof fn === \"function\") {\n\t\t\t\t\tls = fn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.listeners[combined]) {\n\t\t\t\tthis.listeners[combined].push(ls);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.listeners[combined] = [ls];\n\t\t\t}\n\t\t\tthis.changeSub(combined);\n\t\t}\n\t\treturn cb ? cb() : null;\n\n\t};\n\n\t/**\n\t * Remove a listener from store. If no field is given, we look for a store listener\n\t * @param {String} params.field - The data field with the listener that you want to remove.\n\t * @param {function} fn The handler passed into `addListener` or `addListeners`.\n\t * @param {function} cb returns true if it was successful in removing the listener.\n\t *\n\t * @example\n\t * var myFunction = function(err,data){}\n\t * store.removeListener({ field: 'field1' }, MyFunction, function(bool){});\n\t * store.removeListener(MyFunction, function(bool){});\n\t */\n\tremoveListener(params?: { field?: string }, fn?, cb?) {\n\t\tvar field = null;\n\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = fn;\n\t\t\tfn = params;\n\t\t\tparams = {};\n\t\t}\n\n\t\tif (params.field) { field = params.field; }\n\t\tvar combined = this.name + (field ? \".\" + field : \"\");\n\t\tif (this.listeners[combined]) {\n\t\t\tfor (var i = 0; i < this.listeners[combined].length; i++) {\n\t\t\t\tif (this.listeners[combined][i] === fn) {\n\t\t\t\t\tthis.listeners[combined].pop(i);\n\t\t\t\t\treturn cb ? cb(null, true) : null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cb ? cb(null, false) : null;\n\t};\n\n\t/**\n\t * Remove an array of listeners from the store\n\t * @param {String} params.field The data field with the listener that you want to remove.\n\t * @param {String} params.listener The handler passed into `addListener` or `addListeners`.\n\t * @param {function} fn The handler passed into `addListener` or `addListeners`.\n\t * @param {function} cb returns true if it was successful in removing the listener.\n\t *\n\t * @example\n\t * var myFunction = function(err,data){}\n\t * store.removeListeners({ field: 'field1' }, MyFunction, function(bool){});\n\t * store.removeListeners([{ field: 'field1', listener: MyFunction}], function(bool){});\n\t * store.removeListeners(['field1'], MyFunction, function(bool){});\n\t */\n\tremoveListeners(params, fn, cb?) {\n\t\tif (!Array.isArray(params)) {\n\t\t\tif (typeof params === \"function\") {\n\t\t\t\tthis.removeListener({}, params, cb);\n\t\t\t} else if (params.field) {\n\t\t\t\tthis.removeListener(params, fn, cb);\n\t\t\t}\n\t\t\treturn cb(\"missing fields\");\n\t\t}\n\t\tvar removeCount = 0;\n\t\tfor (var i = 0; i < params.length; i++) {\n\t\t\tvar field = null;\n\t\t\tvar item = params[i];\n\t\t\tvar ls;\n\t\t\tif (typeof item === \"string\") {\n\t\t\t\tfield = item;\n\t\t\t} else if (item.field) {\n\t\t\t\tfield = item.field;\n\t\t\t\tls = params[i].listener;\n\t\t\t}\n\n\t\t\tvar combined = this.name + (field ? \".\" + field : \"\");\n\t\t\tif (!ls) {\n\t\t\t\tif (fn && typeof fn === \"function\") {\n\t\t\t\t\tls = fn;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var j = 0; j < this.listeners[combined].length; j++) {\n\t\t\t\tif (this.listeners[combined][j] === ls) {\n\t\t\t\t\tthis.listeners[combined].pop(i);\n\t\t\t\t\tremoveCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (removeCount < params.length) {\n\t\t\treturn cb(\"All listeners could not be found\", false);\n\t\t}\n\t\treturn cb ? cb(null, true) : null;\n\t};\n\n\t/**\n\t * Handles all changes coming in from the service.\n\t */\n\tprivate handleChanges = (err, response) => {// we use this to format our responses\n\t\tif (err) { Logger.system.error(\"DistributedStoreClient\", err); }\n\t\tif (!response.data.store) { return; }\n\t\tif (!response.data.field) { response.data.field = null; }\n\t\tvar combined = this.name + (response.data.field ? \".\" + response.data.field : \"\");\n\t\tvar val = response.data.storeData ? response.data.storeData : response.data.value;\n\t\tthis.triggerListeners(combined, val);\n\t}\n\n\t// Trigger any function that is listening for changes\n\tprivate triggerListeners(listenerKey, data) {\n\t\tif (this.listeners[listenerKey]) {\n\t\t\tfor (var i = 0; i < this.listeners[listenerKey].length; i++) {\n\t\t\t\tif (typeof this.listeners[listenerKey][i] === \"function\") {\n\t\t\t\t\tLogger.system.debug(\"DistributedStore.triggerListeners\", listenerKey, data);\n\t\t\t\t\tthis.listeners[listenerKey][i](null, { field: listenerKey, value: data });\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.warn(\"DistributedStoreClient:triggerListeners: listener is not a function\", listenerKey, i, this.listeners[listenerKey][i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default StoreModel;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/StoreModel.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\nimport StorageClient from \"./storageClient\";\nimport WorkspaceClient from \"./workspaceClient\";\nimport HotkeyClient from \"./hotkeysClient\";\nimport * as util from \"../common/util\";\nimport { System } from \"../common/system\";\nimport { _BaseClient as BaseClient } from \"./baseClient\";\nimport Logger from \"./logger\";\nimport Validate from \"../common/validate\"; // Finsemble args validator\nimport { FinsembleWindow } from \"../common/window/FinsembleWindow\";\nimport { ConfigUtilInstance as configUtil } from \"../common/configUtil\";\nimport deepEqual = require(\"lodash.isequal\");\nimport { parallel as asyncParallel } from \"async\";\nimport RouterClient from \"./routerClientInstance\";\n\nconst lodashGet = require('lodash.get');\n\n// DH 3/6/2019 - @TODO - All uses of this should be replaced with calls to the WindowStorageManager\nimport { WORKSPACE, DELIVERY_MECHANISM } from \"../common/constants\";\nimport configClient from \"./configClient\";\n\ntype InjectHeaderParams = {\n\t/**  Component to inject. Default is \"windowTitleBar\"  */\n\tcomponent?: string,\n\tbumpElements?: {\n\t\t/** Either false, \"all\" or \"0Positioned\". If all, all fixed elements are moved. 0Positioned only moves elements that have top 0. Default is all. */\n\n\t\tfixed?: boolean | \"all\" | \"0Positioned\",\n\t\t/** Either false, \"all\" or \"0Positioned\". If all, all fixed elements are moved. 0Positioned only moves elements that have top 0. Only applies to children of the document.body. Default is all. */\n\t\tabsolute?: boolean | \"all\" | \"0Positioned\",\n\t\t/** Sets the amount to bump elements by (e.g. \"25px\"). Default is \"auto\" which will measure the height of the injected component when rendered. */\n\t\tbumpBy?: string\n\t},\n\t/**  Sets the body margin (e.g. \"25px\"). Default is \"auto\" which will measure the height of the injected component when rendered. */\n\tbodyMarginTop?: string,\n\n\t/** Sets a height on the main FSBLHeader div. Either false or a specified height (e.g. \"25px\"). */\n\tforceHeaderHeight: boolean\n};\ntype getStackedWindowParams = {\n\t/** if true and StackedWindow isn't defined, a stacked window will be created. */\n\tcreate?: boolean,\n\t/** If creating a stacked window, you can optionally specify an array of other windowIdentifiers to add to the stack on creation. The calling window will automatically be added. */\n\twindowIdentifiers?: WindowIdentifier[]\n};\n\ntype GroupData = {\n\twindowNames: string[];\n\tisMovable: boolean;\n\tisAlwaysOnTop: boolean;\n\ttopRightWindow: string;\n\tisARectangle: boolean;\n};\n\ntype GroupUpdate = {\n\tdata: {\n\t\tgroupData: { [k: string]: GroupData }\n\t}\n};\n\nvar finsembleWindow;\n/**\n *\n * Helper to see if element has a class.\n * @param {HTMLElement} el\n * @param {String} className\n * @private\n * @return {HTMLElement}\n */\nfunction hasClass(el, className) {\n\tif (el.classList) {\n\t\treturn el.classList.contains(className);\n\t}\n\treturn !!el.className.match(new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n\n}\n\n/**\n * Adds a class to an HTML element\n * @param {HTMLElement} el\n * @param {String} className\n * @private\n */\nfunction addClass(el, className) {\n\tif (el.classList) {\n\t\tel.classList.add(className);\n\t} else if (!hasClass(el, className)) {\n\t\tel.className += \" \" + className;\n\t}\n}\n\n/**\n *\n * Removes class from HTML element\n * @param {HTMLElement} el\n * @param {String} className\n * @private\n */\nfunction removeClass(el, className) {\n\tif (el.classList) {\n\t\tel.classList.remove(className);\n\t} else if (hasClass(el, className)) {\n\t\tvar reg = new RegExp(\"(\\\\s|^)\" + className + \"(\\\\s|$)\");\n\t\tel.className = el.className.replace(reg, \" \");\n\t}\n}\n\n/**\n *\n *@introduction\n  <h2>Window Client</h2>\n  ----------\n * The Window Client is primarily responsible for managing the `windowState` (the window's bounds) and `componentState` (data inside of your component).\n * The reference below is provided in case you'd like to manually trigger events.\n *\n * The Window Client also injects the window title bar control, which contains controls for minimizing, maximizing, closing, and restoring your window. For information about the window title bar, please see the [UI Component tutorial](tutorial-UIComponents.html#window-title-bar).\n *\n * @hideconstructor\n * @param {object} params\n * @constructor\n * @returns {WindowClient}\n */\nclass WindowClient extends BaseClient {\n\toptions: { customData?: any; defaultTop?: any; defaultLeft?: any; width?: any; };\n\twindowHash: string;\n\ttitle: any;\n\twindowGroups: GroupData[];\n\ttoolbarBottom: number;\n\tcontainers: any[];\n\tcomponentState: { [x: string]: any; };\n\twindowState: string;\n\thasHeader: boolean;\n\tenableWindowsAeroSnap: boolean;\n\tminimizeWithDockedWindows: (cb: any) => void;\n\tisInAService: boolean;\n\tstartedRegistrationWithDocking: boolean;\n\tderegisterPlease: boolean;\n\tcommandChannel: (arg0: any, arg1: any) => void;\n\n\n\n\tconstructor(params) {\n\t\t/** @alias WindowClient# */\n\t\tsuper(params);\n\n\t\tValidate.args(params, \"object=\") && params && (Validate as any).args2(\"params.onReady\", params.onReady, \"function=\");\n\n\t\t//We store the options that the window is created with in this property.\n\t\t/**\n\t\t* A copy of the `finWindow`'s options value. This is where we store information like monitorDimensions, initialization information, and any other data that needs to be passed from the parent application into the created window.\n\t\t* @type object\n\t\t*/\n\t\tthis.options = {};\n\t\t//The hash we use to save data with.\n\t\tthis.windowHash = \"\";\n\t\t//Window's title.\n\t\tthis.title = null;\n\t\t//This is the bottom edge of the toolbar. The window's position will be offset by this much.\n\t\t//@todo move this value to a config.\n\t\tthis.toolbarBottom = 40;\n\t\t//default value. The window assigns the containers it cares about before starting.\n\t\tthis.containers = [];\n\t\t//window state for restoration purposes.\n\t\tthis.componentState = {};\n\t\t//This can be either normal, minimized, or maximized.\n\t\tthis.windowState = \"normal\";\n\t\t// This gets set to true if the window has a header\n\t\tthis.hasHeader = false;\n\t\t//If true, will send router messages to have docking respond to windows aero snap. Otherwise, will restore from those events when they happen\n\t\tthis.enableWindowsAeroSnap = false;\n\n\t\tthis.bindFunctions();\n\n\t\t/**\n\t\t * Minimizes window along with all windows docked to it.\n\t\t * @param {function} cb to be invoked after the method completes successfully.\n\t\t * @example\n\t\t * FSBL.Clients.WindowClient.minimizeWithDockedWindows();\n\t\t * @private\n\t\t */\n\t\tthis.minimizeWithDockedWindows = this.minimize;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tbindFunctions() {\n\t\tthis.onWindowRestored = this.onWindowRestored.bind(this);\n\t\tthis.onWindowMaximized = this.onWindowMaximized.bind(this);\n\t\tthis.onWindowBlurred = this.onWindowBlurred.bind(this);\n\t\tthis.onWindowFocused = this.onWindowFocused.bind(this);\n\t\tthis.onParentSet = this.onParentSet.bind(this);\n\t\tthis.onMinimizedRestored = this.onMinimizedRestored.bind(this);\n\t\tthis.onWindowMinimized = this.onWindowMinimized.bind(this);\n\t\tthis.close = this.close.bind(this);\n\t\tthis.getInitialOptions = this.getInitialOptions.bind(this);\n\t\tthis.cacheInitialBounds = this.cacheInitialBounds.bind(this);\n\t\tthis._setHeaderHeight = this._setHeaderHeight.bind(this);\n\t}\n\n\t/**\n\t * This function is fired every time the window's bounds change. It saves the window's position.\n\t * @param {object} bounds\n\t * @private\n\t */\n\tonWindowRestored() {\n\t\tthis.updateHeaderState(\"Maximize\", { hide: false });\n\t}\n\n\t/**\n\t * @private\n\t */\n\tonWindowMaximized() {\n\t\tthis.updateHeaderState(\"Maximize\", { hide: true });\n\t}\n\n\t/**\n\t * @private\n\t */\n\tonWindowBlurred() {\n\t\tif (this.hasHeader) {\n\t\t\tthis.setActive(false);\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tonWindowFocused() {\n\t\tif (this.hasHeader) {\n\t\t\tthis.setActive(true);\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tonMinimizedRestored() {\n\t\tthis.routerClient.transmit(\"DockingService.windowRestored\", finsembleWindow.name);\n\t\tfinsembleWindow.removeEventListener(\"restored\", this.onMinimizedRestored);\n\t}\n\n\t/**\n\t * @private\n\t */\n\tonWindowMinimized() {\n\t\tthis.routerClient.query(\"DockingService.windowMinimized\", { windowName: finsembleWindow.name });\n\t\tfinsembleWindow.addEventListener(\"restored\", this.onMinimizedRestored);\n\t}\n\n\t/**\n\t * Handles the event that fires when the finsemble window's parent is set.\n\t * @private\n\t * @param evt the event itself, which is ignored.  Any time a parent is set, force a group data update.\n\t */\n\tprivate onParentSet(evt) {\n\t\tthis.requestGroupDataPublish();\n\t}\n\n\t/**\n\t * Returns a list of the groups this window is in, if any.\n\t */\n\tgetWindowGroups() {\n\t\treturn this.windowGroups;\n\t}\n\n\t/**\n\t * Handler for group updates from the window service.  Stores the groups that this window is in,\n\t * if any.\n\t * @private\n\t * @param err the error, if any\n\t * @param res the received updated group data\n\t */\n\tprivate groupUpdateHandler(err, res: GroupUpdate) {\n\t\tif (err) {\n\t\t\tFSBL.Clients.Logger.error(err);\n\t\t\treturn;\n\t\t}\n\t\tthis.windowGroups = Object.values(res.data.groupData).\n\t\t\tfilter(group => group.windowNames.includes(this.getWindowNameForDocking()));\n\t};\n\n\t/**\n\t * Requests an updated group data message.\n\t * @private\n\t */\n\tprivate requestGroupDataPublish() {\n\t\tthis.routerClient.transmit(\"DockingService.requestGroupDataPublish\");\n\t}\n\n\t/**\n\t * Closes window. Defaults are to remove the window from the workspace if the user presses the X button, but not if the window is closed via an app-level request (e.g., switching workspaces, so all windows need to close).\n\t * @param {object} params\n\t * @param {boolean} params.removeFromWorkspace Whether to remove the window from the workspace.\n\t * @param {boolean} params.closeWindow Whether to close the window. On shutdown this method is called, but the Window Service actually closes the window.\n\t * @param {boolean} params.userInitiated Whether the user clicked the X, or if the system asked the window to close.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example\n\t * //Close window and remove from workspace (e.g., user closes the window).\n\t * FSBL.Clients.WindowClient.close({ removeFromWorkspace: true, closeWindow: true });\n\t * //Close window and keep in workspace (e.g., application requests that all windows close themselves).\n\t * FSBL.Clients.WindowClient.close({ removeFromWorkspace: false, closeWindow: false });\n\t */\n\tclose(params: { removeFromWorkspace: boolean, closeWindow: boolean, ignoreParent?: boolean, userInitiated?: boolean }, cb: StandardCallback = () => { }) {\n\t\tif (!params) { params = { removeFromWorkspace: true, closeWindow: true }; }\n\t\tlet parentWindow = finsembleWindow.parentWindow;\n\t\tif (params.userInitiated && parentWindow) {\n\t\t\treturn parentWindow.close(params, cb);\n\t\t} else {\n\t\t\tfinsembleWindow.close(params, cb);\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @returns {windowHash}\n\t */\n\tgetWindowHash() {\n\t\treturn this.windowHash;\n\t}\n\n\t/**\n\t * Retrieves the window's title.\n\t * @returns {String} title\n\t * @example\n\t * var windowTitle = FSBL.Clients.WindowClient.getWindowTitle();\n\t */\n\tgetWindowTitle() {\n\t\treturn this.title;\n\t}\n\n\t/**\n\t * This function retrieves the dimensions of the monitor that the window is on. It's currently used in the {@link launcherClient}.\n\t * @param {function} callback\n\t * @private\n\t * @todo  this is bad. The monitor can change if the window is moved. Use util monitor functions instead. Instead, use the util style getMyMonitor, and keep monitor dimensions up to date statically at FSBL level with a listener on launcher (unclaimedRect).\n\t */\n\tretrieveMonitorDimensions(callback = Function.prototype) {\n\t\tutil.getMonitor(null, function (monitorInfo) {\n\t\t\tfinsembleWindow.updateOptions({ options: { monitorDimensions: monitorInfo.monitorRect } });\n\t\t\tif (callback) { callback(monitorInfo.monitorRect); }\n\t\t});\n\t}\n\n\t/**\n\t * Listens for changes in the hash and persists the change to the url property, and then saves it.\n\t * @private\n\t */\n\tlistenForHashChanges() {\n\t\t//get url on page load.\n\t\tfinsembleWindow.updateOptions({ url: window.top.location.href }, () => {\n\t\t});\n\n\t\tvar self = this;\n\n\t\t//There's no pushState event in the browser. This is a monkey patched solution that allows us to catch hash changes. onhashchange doesn't fire when a site is loaded with a hash (e.g., salesforce).\n\t\t(function (history: any) {\n\t\t\tvar pushState = history.pushState;\n\t\t\thistory.pushState = function (state) {\n\t\t\t\tif (typeof history.onpushstate === \"function\") {\n\t\t\t\t\thistory.onpushstate({ state: state });\n\t\t\t\t}\n\t\t\t\tpushState.apply(history, arguments);\n\t\t\t\tfinsembleWindow.updateOptions({ url: window.top.location.href }, () => {\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t};\n\n\t\t\tvar replaceState = history.replaceState;\n\t\t\thistory.replaceState = function (state) {\n\t\t\t\tif (typeof history.onreplacestate === \"function\") {\n\t\t\t\t\thistory.onreplacestate({ state: state });\n\t\t\t\t}\n\t\t\t\treplaceState.apply(history, arguments);\n\t\t\t\tfinsembleWindow.updateOptions({ url: window.top.location.toString() });\n\n\t\t\t\tStorageClient.save({ topic: WORKSPACE.CACHE_STORAGE_TOPIC, key: self.windowHash, value: finsembleWindow.windowOptions });\n\t\t\t\treturn;\n\t\t\t};\n\t\t})(window.history);\n\n\t\twindow.addEventListener(\"hashchange\", () => {\n\t\t\tfinsembleWindow.updateOptions({ url: window.top.location.toString() }, () => {\n\t\t\t});\n\t\t});\n\n\t};\n\n\t/**\n\t * Gets the options from the window on startup and caches them on the object.\n\t * @private\n\t * @param {function} callback\n\t */\n\tgetInitialOptions(callback) {\n\t\tif (!this.isInAService) {\n\t\t\tfinsembleWindow.getOptions((err, options) => {\n\t\t\t\t//err happens if the window doesn't exist in the windowService (e.g., it's a service that's included the windowClient). This will be revisited in the future, but for now we need to make sure that the system doesn't have errors.\n\t\t\t\tif (err) options = {};\n\t\t\t\tfinsembleWindow.windowOptions = options;\n\t\t\t\tthis.options = options;\n\t\t\t\tLogger.system.verbose(\"WindowClient:getting options\", options);\n\t\t\t\tcallback();\n\t\t\t});\n\t\t} else {\n\t\t\tthis.options = {};\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the bounds for the window on startup and saves them to the workspace.\n\t * @private\n\t * @param {function} callback\n\t */\n\tcacheInitialBounds(callback) {\n\t\tthis.cacheBounds((bounds) => {\n\t\t\ttry {\n\t\t\t\t// TODO: saveCompleteWindowState is related to addToWorkspace, not persistWindowState. This causes workspaces to fail for windows where persistWindowState is not set but addToWorkspace is.\n\t\t\t\tif (!finsembleWindow.windowOptions.customData.foreign.components[\"Window Manager\"].persistWindowState) {\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\t\t\t\tfinsembleWindow.updateOptions({ options: { url: window.top.location.toString() } });\n\t\t\t\t//finsembleWindow.saveCompleteWindowState();\n\t\t\t\t//this.saveWindowBounds(bounds, false);\n\t\t\t} catch (e) {\n\t\t\t\tLogger.system.warn(\"customData.foreign.components[\\\"Window Manager\\\" is undefined\");\n\t\t\t}\n\t\t\tcallback();\n\t\t});\n\t}\n\n\t/**\n\t * Sets initial state for the window. This data is modified on subsequent saves.\n\t * @param {function} callback\n\t * @private\n\t */\n\tsetInitialWindowBounds(callback) {\n\t\tLogger.system.warn(\"`FSBL.Clients.WindowClient.setInitialWindowBounds is deprecated and will be removed in a future version of finsemble. Use 'getInitialOptions' and 'cacheInitialBounds' instead.\");\n\t\tasyncParallel([\n\t\t\tthis.getInitialOptions,\n\t\t\tthis.cacheInitialBounds\n\t\t], callback);\n\t}\n\n\t/**\n\t * Returns windowBounds as of the last save.\n\t * @returns {object}\n\t * @private\n\t */\n\tgetWindowBounds() {\n\t\treturn {\n\t\t\ttop: finsembleWindow.windowOptions.defaultTop,\n\t\t\tleft: finsembleWindow.windowOptions.defaultLeft,\n\t\t\twidth: finsembleWindow.windowOptions.defaultWidth,\n\t\t\theight: finsembleWindow.windowOptions.defaultHeight\n\t\t};\n\t}\n\n\t/**\n\t *\n\t * Saves the window's state. Rarely called manually, as it's called every time your window moves.\n\t * @param {Object} bounds optional param.\n\t * @example <caption>The code below is the bulk of our listener for the <code>bounds-changed</code> event from the window. Every time the <code>bounds-changed</code> event is fired (when the window is resized or moved), we save the window's state. The first few lines just prevent the window from being dropped behind the toolbar.</caption>\n\t *finWindow.addEventListener('disabled-frame-bounds-changed', function (bounds) {\n\t * \tif (bounds.top < 45) {\n\t *\t\tfinWindow.moveTo(bounds.left, 45);\n\t *\t\treturn;\n\t *\t}\n\t *\tself.saveWindowBounds(bounds);\n\t * @private\n\t *});\n\t */\n\tsaveWindowBounds(bounds: WindowBounds, setActiveWorkspaceDirty: boolean) {\n\t\tLogger.system.debug(\"WINDOW LIFECYCLE:SavingBounds:\", bounds, \"setActiveWorkspaceDirty\", setActiveWorkspaceDirty);\n\t\tif (typeof setActiveWorkspaceDirty === \"undefined\") {\n\t\t\tsetActiveWorkspaceDirty = false;\n\t\t}\n\t\tValidate.args(bounds, \"object\") && (Validate as any).args2(\"bounds.top\", bounds.top, \"number\");\n\t\tif (!bounds) {\n\t\t\treturn;\n\t\t}\n\t\t// openfin looks at defaultTop, terry looks at top. for some reason, when the app started fresh, the window's position was being overwritten. We also were saving the position on `defaultTop`/`defaultLeft`, and the launcherService wasn't looking for that. We may be able to get rid of the first assignment on the left, but I want terry to fully look at this.\n\t\tfinsembleWindow.updateOptions({\n\t\t\toptions: {\n\t\t\t\ttop: Math.round(bounds.top),\n\t\t\t\tdefaultTop: Math.round(bounds.top),\n\t\t\t\tleft: Math.round(bounds.left),\n\t\t\t\tdefaultLeft: Math.round(bounds.left),\n\t\t\t\twidth: Math.round(bounds.width),\n\t\t\t\tdefaultWidth: Math.round(bounds.width),\n\t\t\t\theight: Math.round(bounds.height),\n\t\t\t\tdefaultHeight: Math.round(bounds.height)\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\tif (!finsembleWindow.windowOptions.customData.foreign.components[\"Window Manager\"].persistWindowState) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t//prop doesn't exist.\n\t\t\treturn;\n\t\t}\n\t};\n\n\t/**\n\t * Minimizes window.\n\t * @param {function} cb Optional callback to be invoked after the method completes successfully.\n\t * @example\n\t * FSBL.Clients.WindowClient.minimize();\n\t */\n\tminimize(cb: StandardCallback) {\n\t\tthis.cacheBounds(function () {\n\t\t\tfinsembleWindow.minimize(null, function (err) {\n\t\t\t\tif (!err) {\n\t\t\t\t\t//self.windowState = \"minimized\";\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.error(\"WindowClient:minimize\", err);\n\t\t\t\t}\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(err);\n\t\t\t\t}\n\n\t\t\t});\n\t\t});\n\t};\n\n\t/**\n\t * Sets whether window is always on top. By default, this is false.\n\t * @param {function} cb Optional callback to be invoked after the method completes successfully.\n\t * @example\n\t * FSBL.Clients.WindowClient.setAlwaysOnTop(true);\n\t */\n\tsetAlwaysOnTop(alwaysOnTop: boolean, cb?: Function) {\n\t\tfinsembleWindow.updateOptions({ options: { alwaysOnTop: alwaysOnTop } }, () => {\n\t\t\tif (cb) cb();\n\t\t});\n\t}\n\n\n\n\t/**\n\t * Restores window from a maximized or minimized state.\n\t * @param {function} cb Optional callback to be invoked after the method completes successfully.\n\t * @example\n\t * FSBL.Clients.WindowClient.restore();\n\t */\n\trestore(cb: StandardCallback = (e, r) => { }) {\n\t\t//finsembleWindow.getState((err, windowState) => {\n\t\tfinsembleWindow.restore(null, function (err) {\n\t\t\tif (!err) {\n\t\t\t\t//self.windowState = \"normal\";\n\t\t\t} else {\n\t\t\t\tLogger.system.error(\"WindowClient:restore\", err);\n\t\t\t}\n\t\t\tcb(err);\n\t\t});\n\t};\n\n\t/**\n\t * @private\n\t */\n\tcacheBounds(cb: Function) {\n\t\tthis.getBounds((err, bounds) => {\n\t\t\tif (err) {\n\t\t\t\tcb();\n\t\t\t\treturn console.warn(\"Get bounds error.\", err, \"Window may not be registered with the window service\");\n\t\t\t}\n\t\t\tfinsembleWindow.updateOptions({\n\t\t\t\toptions: {\n\t\t\t\t\tcachedLeft: bounds.left,\n\t\t\t\t\tdefaultLeft: bounds.left,\n\t\t\t\t\tcachedTop: bounds.top,\n\t\t\t\t\tdefaultTop: bounds.top,\n\t\t\t\t\tcachedWidth: bounds.width,\n\t\t\t\t\tdefaultWidth: bounds.width,\n\t\t\t\t\tcachedHeight: bounds.height,\n\t\t\t\t\tdefaultHeight: bounds.height\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (cb) {\n\t\t\t\tcb(bounds);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Maximizes the window taking into account any claimed space on the monitor.\n\t * @param {function} cb Optional callback to be invoked after the method completes successfully.\n\t * @example\n\t * FSBL.Clients.WindowClient.maximize();\n\t */\n\tmaximize(cb: Function) {\n\t\tthis.cacheBounds(function () {\n\t\t\tfinsembleWindow.maximize();\n\t\t\t//finsembleWindow.windowState = \"maximized\";\n\t\t\treturn cb();\n\t\t});\n\t}\n\n\t/**\n\t * FinWindow destructor (more or less). Removes all of the listeners that we added when the window was created.\n\t * @private\n\t */\n\tremoveFinWindowEventListeners() {\n\t\tfinsembleWindow.removeEventListener(\"maximized\", this.onWindowMaximized);\n\t\tfinsembleWindow.removeEventListener(\"restored\", this.onWindowRestored);\n\t\tfinsembleWindow.removeEventListener(\"blurred\", this.onWindowBlurred);\n\t\tfinsembleWindow.removeEventListener(\"focused\", this.onWindowFocused);\n\t\tfinsembleWindow.removeEventListener(\"close-requested\", this.close);\n\t\tfinsembleWindow.removeEventListener(\"minimized\", this.onWindowMinimized);\n\t\tfinsembleWindow.removeEventListener(\"parent-set\", this.onParentSet);\n\t};\n\n\n\t/**\n\t * This function injects the header bar into all frameless windows that request it. This should only be used if you've decided not to use the provided <code>WindowClient.start()</code> method.\n\t *\n\t * **NOTE:** If you are using the Finsemble winndow title bar component, you do not need to call this function.\n\t * @private\n\t */\n\tinjectDOM(headerHeight) {\n\t\t//for the aesthetics.\n\n\t\tif (document.getElementById(\"FSBLHeader\")) { return; }\n\t\t// On slow loading components, the end user might have the opportunity to scroll the page before the window title bar is injected.\n\t\t// This triggers a chromium bug related to elements with position:fixed. Chromium loses track of where that element actually is on\n\t\t// the browser page. Chromium *thinks* the title bar is lower than it actually is, by the amount of pixels scrolled by the user.\n\t\t// The fix is to force the scroll position back to zero before we inject this fixed element.\n\t\twindow.scrollTo(0, 0);\n\n\t\t// Now inject the window title bar\n\t\tvar template = document.createElement(\"div\");\n\t\ttemplate.innerHTML = \"<div id=\\\"FSBLHeader\\\"\" + (headerHeight ? \" style=height:\" + headerHeight : \"\") + \"></div>\";\n\t\tdocument.body.insertBefore(template.firstChild, document.body.firstChild);\n\t};\n\n\t/**\n\t * Injects the windowTitleBar into the window.\n\t * @param {function} cb Callback function\n\t * @return {object} Reference to a RouterClient.query\n\t * @private\n\t */\n\tinjectFSBL(params: InjectHeaderParams, cb: StandardCallback) {\n\t\t//This flag is set by the launcher service. It tells us if FSBL was injected\n\t\tthis.routerClient.query(`WindowService-Request-injectTitleBar`, { config: finsembleWindow.windowOptions, titleComponent: params.component },\n\t\t\t(err, response) => {\n\t\t\t\tif (params.bodyMarginTop === \"auto\") {\n\t\t\t\t\tthis._setHeaderHeight(params);\n\t\t\t\t} else {\n\t\t\t\t\tthis.bumpFixedElements(params.bumpElements);\n\t\t\t\t\tif (params.bodyMarginTop) {\n\t\t\t\t\t\tdocument.body.style.marginTop = params.bodyMarginTop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(err, response);\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\t/**\n\t * Given a field, this function retrieves app state. If no params are given, the full state is returned.\n\t * @param {string} params.field Field to retrieve.\n\t * @param {Array.<string>} params.fields Fields to retrieve.\n\t * @param {string} params.windowName Window whose component state you are retreiving. If null, the default is to the calling window.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example <caption>The example below shows how we retrieve data to restore the layout in our charts.</caption>\n\t * FSBL.Clients.WindowClient.getComponentState({\n\t *\t field: 'myChartLayout',\n\t * }, function (err, state) {\n\t * \timportLayout(state);\n\t * });\n\t *\n\t * FSBL.Clients.WindowClient.getComponentState({\n\t * \t\tfields: ['myChartLayout', 'chartType'],\n\t * }, function (err, state) {\n\t * \tvar chartType = state['chartType'];\n\t * \tvar myChartLayout = state['myChartLayout'];\n\t * });\n\t **/\n\tgetComponentState(params: {\n\t\tfield?: string,\n\t\tfields?: string[],\n\t\twindowName?: string\n\t}, cb: StandardCallback) {\n\n\t\tif (!params) { params = {}; }\n\t\tif (params.fields && !Array.isArray(params.fields)) { params.fields = [params.fields]; }\n\t\tValidate.args(params, \"object\", cb, \"function\");\n\t\tif (finsembleWindow) {\n\t\t\treturn finsembleWindow.getComponentState(params, cb);\n\t\t}\n\t\tLogger.system.warn(\"Attempt to use getComponentState before component is ready or in a service\");\n\t\t//if (!finWindow) { finWindow = System.Window.getCurrent(); } //TODO: why are we checking here??\n\t\tif (!params.windowName) params.windowName = window.name; // using FSBL in services causes errors because finsembleWindow does not exist\n\n\t\tvar hash = this.getContainerHash(params.windowName);\n\n\t\tStorageClient.get({ topic: WORKSPACE.CACHE_STORAGE_TOPIC, key: hash }, (err, response) => {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.error(\"Error retrieving window client's component state.\");\n\t\t\t\tcb(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar data = response;\n\t\t\tif (response && params.field) {\n\t\t\t\tthis.componentState = data || {};\n\t\t\t\tcb(err, data[params.field]);\n\t\t\t} else if (params.fields) {\n\t\t\t\tvar respObject = {};\n\t\t\t\tfor (var i = 0; i < params.fields.length; i++) {\n\t\t\t\t\tif (data[params.fields[i]]) {\n\t\t\t\t\t\trespObject[params.fields[i]] = data[params.fields[i]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn cb(null, respObject);\n\n\t\t\t} else if (response) {\n\t\t\t\treturn cb(null, data);\n\t\t\t} else {\n\t\t\t\tLogger.system.info(\"WindowClient:getComponentState:error, response, params\", err, response, params);\n\t\t\t\tcb(\"Not found\", response);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n\t * Given a field, this function sets and persists app state.\n\t * @param {object} params\n\t * @param {string} params.field field\n\t * @param {Array.<string>} params.fields fields\n\t * @param {string} params.windowName Name of the component whose state you are setting. Defaults to the calling window.\n\t * @param {any} params.value Value of the data being saved\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example <caption>The example below shows how we save our chart layout when it changes.</caption>\n\t * var s = stx.exportLayout(true);\n\t * //saving layout'\n\t * FSBL.Clients.WindowClient.setComponentState({ field: 'myChartLayout', value: s });\n\t * FSBL.Clients.WindowClient.setComponentState({ fields: [{field:'myChartLayout', value: s }, {field:'chartType', value: 'mountain'}]);\n\t **/\n\tsetComponentState(params: {\n\t\tfield?: string,\n\t\tfields?: { field: string, value: any }[],\n\t\tvalue?: any,\n\t\twindowName?: string\n\t}, cb: StandardCallback = (e, r) => { }) {\n\t\tValidate.args(params, \"object\", cb, \"function=\") && (Validate as any).args2(\"params.field\", params.field, \"string\");\n\t\tif (finsembleWindow) {\n\t\t\treturn finsembleWindow.setComponentState(params, cb);\n\t\t}\n\t\t// using FSBL in services causes errors because finsembleWindow does not exist\n\t\tif (!params.windowName) params.windowName = window.name;\n\t\tvar hash = this.getContainerHash(params.windowName);\n\t\tlet fields = params.fields;\n\n\t\tif (typeof params.field === \"undefined\") {\n\t\t\t// If the user hasn't provided field or fields, exit.\n\t\t\tif (!fields) {\n\t\t\t\treturn cb({\n\t\t\t\t\tmessage: \"setComponentState requires a field parameter or a fields parameter. Neither were provided.\",\n\t\t\t\t\tcode: \"invalid_arguments\"\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tfields = [{\n\t\t\t\tfield: params.field,\n\t\t\t\tvalue: params.value\n\t\t\t}];\n\t\t}\n\n\t\tfor (let i = 0; i < fields.length; i++) {\n\t\t\tlet field = fields[i];\n\t\t\tif (!field.field || !field.value) { continue; }\n\t\t\tthis.componentState[field.field] = field.value;\n\t\t}\n\n\t\tlet _params = {\n\t\t\tfield: params.field || \"\",\n\t\t\tvalue: params.value,\n\t\t\twindowName: params.windowName\n\t\t}\n\n\t\tStorageClient.save({ topic: WORKSPACE.CACHE_STORAGE_TOPIC, key: hash, value: this.componentState }, function (err, response) {\n\t\t\tif (cb) { cb(err, response); }\n\t\t});\n\n\t}\n\n\t/**\n\t * Given a field, this function removes it from app state.\n\t * @param {object} params\n\t * @param {string} params.field field\n\t * @param {Array.<string>} params.fields fields\n\t * @param {string} params.windowName The name of the window to remove component state from\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example <caption>The example below shows how we would remove our chart layout when it no longer needed.</caption>\n\t * // remove unused state value\n\t * FSBL.Clients.WindowClient.removeComponentState({ field: 'myChartLayout'});\n\t * FSBL.Clients.WindowClient.removeComponentState({ fields: [{field:'myChartLayout'}, {field:'chartType'}]);\n\t **/\n\tasync removeComponentState(params: {\n\t\tfield?: string,\n\t\tfields?: { field: string }[],\n\t\twindowName?: string\n\t}, cb: StandardCallback = (e, r) => { }) {\n\t\tValidate.args(params, \"object\", cb, \"function=\") &&\n\t\t\t(Validate as any).args2(\"params.field\", params.field, \"string\");\n\n\t\tconst wrap = finsembleWindow || (await FinsembleWindow.getInstance({ name: params.windowName || window.name }));\n\t\treturn wrap.removeComponentState(params, cb);\n\t}\n\n\t/**\n\t * Gets the window name of current window or the parent, if tabbed. The code that manages window movement will not see a child window if it's part of a stacked window. This function will return the window name that the Window Service cares about for window movement.\n\t */\n\tgetWindowNameForDocking() {\n\t\tlet parent = finsembleWindow.parentWindow;\n\t\treturn parent ? parent.name : finsembleWindow.name;\n\t}\n\n\t/**\n\t * Gets containerHash given a containerId.\n\t * @param {string} windowName The name of the window\n\t * @returns {string} Hash for the window\n\t * @private\n\t */\n\tgetContainerHash(windowName: string) {\n\t\treturn util.camelCase(this.windowHash, windowName);\n\t}\n\n\t/**\n\t * Forms a group with any window that is touching the border of this window.\n\t * @private\n\t */\n\tformGroup() {\n\t\tlet windowName = this.getWindowNameForDocking()\n\t\tthis.routerClient.transmit(\"DockingService.formGroup\", { windowName });\n\t}\n\n\t/**\n\t * This function is critical if you want docking and snapping to work. It transmits a message to the LauncherService, which registers it as a dockable window.\n\t *\n\t * **NOTE:** If you are using the finsemble windowTitleBar component, you do not need to call this function.\n\t * @param {object} params Parameters\n\t * @param {function} cb callback\n\t *\n\t * @example\n\t * FSBL.Clients.WindowClient.registerWithDockingManager();\n\t * @private\n\t */\n\tregisterWithDockingManager(params, cb) {\n\t\tif (finsembleWindow.parentWindow) {\n\t\t\t// TABBING TBD: need more orderly startup with state managed from just one place (StackWindowManagerService also controls register/deregister)\n\t\t\tLogger.system.debug(\"registerWithDockingManager ignore registration request if has a parent\");\n\t\t\tif (cb) cb(); // return without error because still want component to come up\n\t\t}\n\t\tvar windowName = finsembleWindow.name;\n\t\tvar uuid = finsembleWindow.uuid;\n\t\tthis.startedRegistrationWithDocking = true;\n\t\tthis.routerClient.query(\"DockingService.registerWindow\", {\n\t\t\tname: windowName,\n\t\t\tuuid: uuid,\n\t\t\toptions: params || {},\n\t\t\twindowType: \"OpenFinWindow\"\n\t\t}, () => {\n\t\t\tthis.startedRegistrationWithDocking = false;\n\t\t\tif (this.deregisterPlease) {\n\t\t\t\tthis.deregisterWithDockingManager();\n\t\t\t\tthis.deregisterPlease = false;\n\t\t\t}\n\t\t\tLogger.system.debug(\"WINDOW LIFECYCLE: Docking Registration complete.\");\n\t\t\tif (cb) {\n\t\t\t\tcb();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * This function is critical if you don't want to keep references of windows in the LauncherService after they close. It simply notifies the LauncherService that the window is no longer dockable. It's invoked when the window is closed.\n\t * **NOTE:** If you are using the finsemble windowTitleBar component, you do not need to call this function.\n\t * @param {boolean} removeFromWorkspace true to remove from workspace\n\t * @example\n\t * FSBL.Clients.WindowClient.deregisterWithDockingManager();\n\t * @private\n\t */\n\tderegisterWithDockingManager(removeFromWorkspace?: boolean) {\n\t\tif (this.startedRegistrationWithDocking) {\n\t\t\tthis.deregisterPlease = true;\n\t\t}\n\t\tvar windowName = finsembleWindow.name;\n\t\tthis.routerClient.transmit(\"DockingService.deregisterWindow\", {\n\t\t\tname: windowName,\n\t\t\tuserInitiated: removeFromWorkspace\n\t\t});\n\t};\n\n\t/**\n\t * @private\n\t */\n\tenableHotkeys() {\n\t\tthis.enableDevToolsHotkey();\n\t\tthis.enableReloadHotkey();\n\t}\n\n\t/**\n\t * Helper function to display dev-tools if you disable context-menus on your chromium windows. You must call this function if you want the hotkey to work.\n\t * @private\n\t */\n\tenableReloadHotkey() {\n\t\twindow.addEventListener(\"keydown\", function (e) {\n\t\t\tif (e.keyCode === 82 && e.altKey && e.ctrlKey) {\n\t\t\t\tSystem.clearCache({\n\t\t\t\t\tcache: true,\n\t\t\t\t\tcookies: false,\n\t\t\t\t\tlocalStorage: false,\n\t\t\t\t\tappcache: true,\n\t\t\t\t\tuserData: false\n\t\t\t\t});\n\t\t\t\twindow.location.reload();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Helper function to display dev-tools if you disable context-menus on your chromium windows. You must call this function if you want the hotkey to work.\n\t * @private\n\t */\n\tenableDevToolsHotkey() {\n\t\twindow.addEventListener(\"keydown\", function (e) {\n\t\t\tif (e.keyCode === 68 && e.altKey && e.ctrlKey) {\n\t\t\t\tvar application = System.Application.getCurrent();\n\t\t\t\tapplication.getManifest(function (manifest) {\n\t\t\t\t\tvar uuid = manifest.startup_app.uuid;\n\t\t\t\t\tvar windowName = finsembleWindow.name;\n\t\t\t\t\tSystem.showDeveloperTools(uuid, windowName);\n\t\t\t\t}, function (err) {\n\t\t\t\t\tLogger.system.error(\"dev-tools\", err);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Bumps top-level containers down below the windowTitleBar.\n\t * @private\n\t */\n\tbumpFixedElements(params) {\n\t\t// don't start pushing stuff down until page is ready. This is needed for preloaded titlebars because they can happen before the page is ready.\n\t\tif (document.readyState !== \"complete\") {\n\t\t\treturn setTimeout(() => { this.bumpFixedElements(params) }, 100);\n\t\t}\n\t\tif (!params) return;\n\t\tlet { absolute, fixed, bumpBy } = params;\n\t\tif (!(absolute || fixed)) return;\n\n\t\tconst headerNode = document.getElementById(\"FSBLHeader\");\n\t\t// If the header node hasn't rendered, wait for 100 ms and try again\n\t\tif (!headerNode || headerNode.children.length === 0 || !headerNode.children[0].clientHeight) {\n\t\t\treturn setTimeout(() => {\n\t\t\t\tthis.bumpFixedElements(params);\n\t\t\t}, 100);\n\t\t}\n\n\t\tif (bumpBy === \"auto\") {\n\t\t\t// auto is \"0px\" because there is now a margin-top of 25px in the windowTitleBar component.\n\t\t\t// If auto is anything greater than 0px, elements will be positioned 25 + titlebar height.\n\t\t\t// We don't want a double bump. So, auto is 0.\n\t\t\tbumpBy = \"0px\";\n\t\t} else if (new String(bumpBy).indexOf(\"px\") === -1) {\n\t\t\tbumpBy = bumpBy + \"px\";\n\t\t}\n\n\t\tvar elems: any = document.body.getElementsByTagName(\"*\");\n\t\tvar len = elems.length;\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tif (elems[i].id === \"FSBLHeader\" || elems[i].classList.contains(\"fsbl-header\")) { continue; }\n\t\t\tvar style = window.getComputedStyle(elems[i], null),\n\t\t\t\tpossibleZeros = [\"0\", \"0px\", 0];\n\n\t\t\tvar topStyle = style.getPropertyValue(\"top\");\n\n\t\t\t//only target top-level fixed/absolutely positioned containers.\n\t\t\tif (absolute && elems[i].parentNode === document.body && style.getPropertyValue(\"position\") == \"absolute\") {\n\t\t\t\tif (absolute == \"all\") {\n\t\t\t\t\telems[i].style.top = \"calc(\" + topStyle + \" + \" + bumpBy + \")\";\n\t\t\t\t} else if (absolute == \"0Positioned\" && possibleZeros.includes(topStyle)) {\n\t\t\t\t\telems[i].style.top = bumpBy;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fixed && style.getPropertyValue(\"position\") == \"fixed\") {\n\t\t\t\tif (fixed == \"all\") {\n\t\t\t\t\telems[i].style.top = \"calc(\" + topStyle + \" + \" + bumpBy + \")\";\n\t\t\t\t} else if (fixed == \"0Positioned\" && possibleZeros.includes(topStyle)) {\n\t\t\t\t\telems[i].style.top = bumpBy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Brings the window to the top of all other windows.\n\t * @example\n\t * FSBL.Clients.WindowClient.bringWindowToFront();\n\t */\n\tbringWindowToFront() {\n\t\tfinsembleWindow.isShowing(function (err, isShowing) {\n\t\t\tif (isShowing) {\n\t\t\t\tfinsembleWindow.bringToFront({ forceFocus: true },\n\t\t\t\t\tfunction (err) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tLogger.system.error(\"WindowClient.bringWindowToFront: failure:\" + err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tLogger.system.info(\"WindowClient.bringWindowToFront: success\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The Finsemble window title bar is injected if either FSBLHeader: true or FSBLHeader is an object with the same items as the properties of params below are in the component's config. If you want to inject the window title bar later, you can do so by calling this function.\n\t * @depcrate the union boolean type and only accept types of InjectHeaderParams.\n\t */\n\tinjectHeader(params?: InjectHeaderParams | boolean, cb: StandardCallback = () => { }) {\n\t\t//FIXME(Terry) windowService should inject directly from a config:\n\t\t// components.\"*\".component.inject|preload=\"windowTitleBar.js\" <-- set the windowTitleBar\n\t\t// components.\"welcome\".component.inject|preload=\"windowTitleBar.js\" <-- override the windowTitleBar\n\t\t// Everything from here down then goes into windowTitleBar.jsx inside FSBLReady()\n\n\t\tlet self = this;\n\t\tif (this.hasHeader) return;\n\t\tthis.hasHeader = true;\n\n\t\tvar defaultParams: InjectHeaderParams = {\n\t\t\tcomponent: \"windowTitleBar\",\n\t\t\tbumpElements: {\n\t\t\t\tfixed: \"all\",\n\t\t\t\tabsolute: \"all\",\n\t\t\t\tbumpBy: \"auto\"\n\t\t\t},\n\t\t\tbodyMarginTop: \"auto\",\n\t\t\tforceHeaderHeight: false\n\t\t};\n\n\t\t//this will catch true, false, or undefined.\n\t\tif (typeof params !== \"object\") {\n\t\t\tparams = defaultParams;\n\t\t} else {\n\t\t\tparams = Object.assign(defaultParams, params);\n\t\t}\n\n\n\t\tthis.injectDOM(params.forceHeaderHeight);\n\n\t\t// initialize but if child of a stacked window then don't register with docking\n\t\t//finsembleWindow.getParent();\n\t\tself.injectFSBL(params, cb);\n\t}\n\n\t/**\n\t * @private\n\t */\n\tinjectStylesheetOverride() {\n\t\tvar node = document.createElement(\"style\");\n\t\tnode.type = \"text/css\";\n\t\tnode.appendChild(document.createTextNode(finsembleWindow.windowOptions.customData.cssOverride));\n\t\tdocument.body.appendChild(node);\n\t}\n\n\t/**\n\t * If we spawned this openfin app from our parent application, we listen on that application for certain events that might fire _if_ our parent goes down. If the parent goes down, we want to kill its children as well.\n\t * @private\n\t */\n\tcheckIfChildApp() {\n\t\tif (finsembleWindow.windowOptions &&\n\t\t\tfinsembleWindow.windowOptions.customData &&\n\t\t\tfinsembleWindow.windowOptions.customData.parentUUID &&\n\t\t\tfinsembleWindow.windowOptions.customData.parentUUID !== System.Application.getCurrent().uuid) {\n\t\t\tlet parent = System.Application.wrap(finsembleWindow.windowOptions.customData.parentUUID);\n\t\t\tparent.addEventListener(\"crashed\", this.close.bind(null, false));\n\t\t\tparent.addEventListener(\"initialized\", this.close.bind(null, false));\n\t\t\tparent.addEventListener(\"out-of-memory\", this.close.bind(null, false));\n\t\t}\n\t}\n\t/**\n\t * Prevents the browser's default behavior of loading files/images if they're dropped anywhere in the window.\n\t * If a component has a drop area that _doesn't_ preventDefault, the image/file will still be loaded.\n\t * This only prevents bad behavior from happening when the user drops an image/file on part of the window that _isn't_ listening for drag/drop events (usually by accident).\n\t * @private\n\t */\n\tpreventUnintendedDropEvents() {\n\t\tfunction preventDefault(e) { e.preventDefault(); }\n\t\twindow.addEventListener(\"dragover\", preventDefault, false);\n\t\twindow.addEventListener(\"drop\", preventDefault, false);\n\t}\n\t/**\n\t* If the user presses windows key + left or right it causes all kinds of abhorrent behavior. This function captures the hotkeys and essentially prevents the behavior.\n\t* @private\n\t */\n\trejectWindowsKeyResizes() {\n\t\t// Responds to key events here in order to send router messages and determine whether a system-bounds-changed event should occur.\n\t\t// Essentially, this is catching actions to allow Finsemble to respond to windows aero snap functionality.\n\t\t// While true resize will be disabled which will prevent disable aerosnap from working. This flag will only be true while the windows key is down.\n\t\tlet preventResize = false;\n\t\tconst onKeyUp = async (e) => {\n\t\t\t//aero snap enabled case, windows key released\n\t\t\tif (this.enableWindowsAeroSnap) {\n\t\t\t\t//If the key being released is the windows key, send a router message to docking\n\t\t\t\tif (e.key === \"Meta\") {\n\t\t\t\t\tRouterClient.transmit(\"Finsemble.WindowService.WindowsKey\", \"up\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// When aerosnap is disabled and the windows key released, windows will be able to be resized.\n\t\t\t\t// Otherwise users would not be able to manually resize windows.\n\t\t\t\tif (e.key === 'Meta' && preventResize) {\n\t\t\t\t\tpreventResize = false;\n\t\t\t\t\tfin.desktop.Window.getCurrent().updateOptions({\n\t\t\t\t\t\tresizable: true\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconst onKeyDown = (e) => {\n\t\t\t// aero snap enabled case, windows key down\n\t\t\tif (this.enableWindowsAeroSnap) {\n\t\t\t\t//If the key being pressed is the windows key, send a message to docking\n\t\t\t\tif (e.key === \"Meta\") {\n\t\t\t\t\tRouterClient.transmit(\"Finsemble.WindowService.WindowsKey\", \"down\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// When aero snap is disabled and the windows key is down, disable resize on windows to prevent aerosnap from working.\n\t\t\t\tif (e.key === 'Meta') {\n\t\t\t\t\tpreventResize = true;\n\t\t\t\t\tfin.desktop.Window.getCurrent().updateOptions({\n\t\t\t\t\t\tresizable: false\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (FSBL) {\n\t\t\tHotkeyClient.onReady(() => {\n\t\t\t\t//The browser's keyDown isn't capable of capturing keyChords if the first key pressed is the window's key. So we'll have to create a makeshift keystroke handler.\n\t\t\t\t//On keydown, we grab that key. Keyup can fire for different keys, so that's where the work happens.\n\t\t\t\twindow.addEventListener(\"keyup\", onKeyUp);\n\t\t\t\twindow.addEventListener(\"keydown\", onKeyDown);\n\t\t\t});\n\t\t}\n\t}\n\t/**\n\t * Adds listeners to handle hash changes and finWindow listeners.\n\t * @private\n\t * @param {function} cb\n\t */\n\taddListeners(cb: Function = Function.prototype) {\n\t\tvar self = this;\n\t\tthis.listenForHashChanges();\n\t\tthis.preventUnintendedDropEvents();\n\t\tthis.rejectWindowsKeyResizes();\n\t\t//FinsembleWindow listeners\n\t\t//@todo, make the openfin window trigger an event on the finsemble window, which will emit up. we then use addListener instead of addEventListener\n\t\tfinsembleWindow.addListener(\"setParent\", () => {\n\t\t\tLogger.system.info(\"WindowClient.setParent deregisterWithDockingManager\");\n\t\t\tthis.deregisterWithDockingManager(); // stack takes care of this too but doesn't work at startup or workspace switch so do again here\n\t\t});\n\t\tfinsembleWindow.addEventListener(\"maximized\", this.onWindowMaximized);\n\t\tfinsembleWindow.addEventListener(\"minimized\", this.onWindowMinimized);\n\t\tfinsembleWindow.addEventListener(\"restored\", this.onWindowRestored);\n\t\t// On Blur remove the border from window\n\t\tfinsembleWindow.addEventListener(\"blurred\", this.onWindowBlurred);\n\t\t// On focus add a border to the window\n\t\tfinsembleWindow.addEventListener(\"focused\", this.onWindowFocused);\n\t\tfinsembleWindow.addEventListener(\"parent-set\", this.onParentSet);\n\n\t\tif (typeof FSBL !== \"undefined\") {\n\t\t\tFSBL.onShutdown(() => {\n\t\t\t\tLogger.system.info(\"WINDOW LIFECYCLE:SHUTDOWN: FSBL.onShutdown start\");\n\t\t\t\treturn new Promise((resolve) => {\n\t\t\t\t\tLogger.system.debug(\"FSBL.onShutdown\");\n\t\t\t\t\tFSBL.shutdownComplete();\n\t\t\t\t\tthis.close({\n\t\t\t\t\t\tremoveFromWorkspace: false,\n\t\t\t\t\t\tignoreParent: true, // must set otherwise might be removed from stacked window\n\t\t\t\t\t\tcloseWindow: false\n\t\t\t\t\t}, resolve);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tcb();\n\t};\n\n\t/**\n\t * Sends a command to the header. Commands affect the header state,\n\t * so that the UI reflects what is going on in the component window.\n\t * @param {string} command The state object to set\n\t * @param {object} state The new state (merged with existing)\n\t * @private\n\t */\n\tupdateHeaderState(command: string, state: any) {\n\t\tif (!this.commandChannel) {\n\t\t\treturn;\n\t\t}\n\t\tthis.commandChannel(command, state);\n\t}\n\n\t/**\n\t * Establishes a command channel with the <a href=\"tutorial-UIComponents.html#window-title-bar-aka-the-fsblheader\">Finsemble window title bar component</a>. The Window Client can\n\t * update the title bar's state via this channel.\n\t * @param {function} commandChannel A function callback that receives commands.\n\t */\n\theaderCommandChannel(commandChannel: (arg0: any, arg1: any) => void) {\n\t\tthis.commandChannel = commandChannel;\n\t}\n\n\t/**\n\t * Ejects the window from the docking group\n\t * @private\n\t */\n\tejectFromGroup() {\n\t\tlet windowName = this.getWindowNameForDocking();\n\t\tRouterClient.query(\"DockingService.leaveGroup\", {\n\t\t\tname: windowName\n\t\t}, () => { });\n\t}\n\n\t/**\n\t * This function sets the window's title in the windowTitleBar component, and in the DOM's title element.\n\t * This is useful if you like to keep the window's title in sync with a piece of data (e.g., a Symbol).\n\t * @param {String} title Window title.\n\t * @todo Allow HTML or classes to be injected into the title.\n\t * @example <caption>The code shows how you would change your window title.</caption>\n\t *  FSBL.Clients.WindowClient.setWindowTitle(\"My Component's New Title\");\n\t */\n\tsetWindowTitle(title) {\n\t\tValidate.args(title, \"string\");\n\t\tthis.title = title;\n\t\t//document.title = title;  // causes flickering in chromium 53\n\t\tthis.updateHeaderState(\"Main\", { windowTitle: title });\n\t\tfinsembleWindow.setTitle(title);\n\t}\n\n\t/**\n\t * Retrieves data that was set with <a href=\"LauncherClient.html#spawn\">LauncherClient.spawn</a>.\n\t * @return {object} The data or empty object if no data was set. *Note, this will never return null or undefined.*\n\t */\n\tgetSpawnData() {\n\t\tif (!this.options.customData) { return {}; }\n\t\tvar spawnData = this.options.customData.spawnData;\n\t\tif (typeof spawnData === \"undefined\") { return {}; }\n\t\treturn spawnData;\n\t};\n\n\t/**\n\t * Returns a reference to the current window for the component.\n\t * @returns {finWindow}\n\t */\n\tgetCurrentWindow() { //TODO - return finsembleWindow\n\t\treturn System.Window.getCurrent();\n\t};\n\n\t/**\n\t * For the DOM element that has been passed in, this function returns a bounding box that is relative\n\t * to the OpenFin virtual monitor space. That is, it returns the position of the DOM element on the desktop.\n\t * @param {HTMLElement|string} element A selector or HTMLElement\n\t * @private\n\t * @todo convert to use monitor util function and make sure current bounds are correct. For some windows (e.g., toolbars/menus that don't track their own bounds because they don't have drag regions), options.default will represent the data _on spawn_, not the bounds when the function is called.\n\t */\n\tgetDesktopBoundingBox(element: string | Element) {\n\t\tvar el = element;\n\t\tif (typeof (element) === \"string\") {\n\t\t\tel = document.querySelector(element);\n\t\t}\n\t\tlet box = (el as Element).getBoundingClientRect();\n\t\tlet boundingBox = {\n\t\t\ttop: this.options.defaultTop - box.top,\n\t\t\tleft: this.options.defaultLeft + box.left,\n\t\t\twidth: box.width,\n\t\t\theight: box.height,\n\t\t\tright: 0,\n\t\t\tbottom: 0\n\t\t};\n\n\t\tboundingBox.right = boundingBox.left + boundingBox.width;\n\t\tboundingBox.bottom = boundingBox.top + boundingBox.height;\n\n\t\treturn boundingBox;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tisPointInBox(point: {\n\t\tx: number,\n\t\ty: number\n\t}, box: {\n\t\ttop: number,\n\t\tleft: number,\n\t\tbottom?: number,\n\t\tright?: number,\n\t\twidth: number,\n\t\theight: number\n\t}) {\n\t\tif (!box.bottom) box.bottom = box.top + box.height;\n\t\tif (!box.right) box.right = box.left + box.width;\n\t\treturn (point.x > box.left && point.x < box.right && point.y < box.bottom && point.y > box.top);\n\t};\n\n\t/**\n\t * Returns (via callback) true if the mouse is currently located (hovering) over the requested element.\n\t * @param {HTMLElement|string} element The element, or a selector, to check\n\t * @param {function} cb A function that returns a boolean\n\t * @private\n\t */\n\tisMouseOverDOMElement(element: Element, cb: Function) {\n\t\tvar boundingBox = this.getDesktopBoundingBox(element);\n\t\tSystem.getMousePosition((err, position) => {\n\t\t\tcb(this.isPointInBox(position, boundingBox));\n\t\t});\n\t};\n\n\t/**\n\t * Returns the window identifier for the current component.\n\t * @returns {windowIdentifier}\n\t */\n\tgetWindowIdentifier() {\n\t\tvar componentType = null;\n\t\tif (this.options && this.options.customData && this.options.customData.component)\n\t\t\tcomponentType = this.options.customData.component.type;\n\t\treturn {\n\t\t\twindowName: finsembleWindow ? finsembleWindow.name : window.name,\n\t\t\tuuid: finsembleWindow ? finsembleWindow.uuid : null,\n\t\t\tcomponentType: componentType\n\t\t};\n\t};\n\n\t/**\n\t * Highlights the window as active by creating a border around the window.\n\t *\n\t * @param {boolean} active  Set to false to turn off activity\n\t * @private\n\t */\n\tsetActive(active: boolean) {\n\t\tif (active) {\n\t\t\taddClass(document.documentElement, \"desktop-active\");\n\t\t} else {\n\t\t\tremoveClass(document.documentElement, \"desktop-active\");\n\t\t}\n\t};\n\n\t/**\n\t * Returns the bounds for the current window.\n\t * @param {StandardCallback} cb The callback to be invoked after the method completes successfully.\n\t */\n\tgetBounds(cb: StandardCallback) {\n\t\tfinsembleWindow.getBounds(function (err, bounds) {\n\t\t\tcb(err, bounds);\n\t\t});\n\t};\n\n\t/**\n\t * This is used by the Finsemble window title bar when a tab is dragged for tiling or tabbing.\n\t * @param {*} params - <code>params.windowIdentifier</code> is required.\n\t * @param {*} cb The callback to be invoked after the method completes successfully.\n\t */\n\tstartTilingOrTabbing(params: {\n\t\twindowIdentifier: WindowIdentifier\n\t}, cb: Function = Function.prototype) {\n\t\tFSBL.Clients.RouterClient.transmit(\"DockingService.startTilingOrTabbing\", params);\n\t\tcb();\n\t};\n\n\t/**\n\t * This is used to cancel a tabbing or tiling operation.\n\t * @param {*} params - Put <code>windowIdentifier</code> in <code>params.windowIdentifier</code>. If not provided, must set <code>params.waitForIdentifier</code> true.\n\t * @param {*} cb - The callback to be invoked after the method completes successfully.\n\t */\n\tcancelTilingOrTabbing(params: {\n\t\twindowIdentifier: WindowIdentifier\n\t}, cb: Function = Function.prototype) {\n\t\tconsole.debug(\"CancelTilingOrTabbing\");\n\t\tRouterClient.transmit(\"DockingService.cancelTilingOrTabbing\", params);\n\t\tcb();\n\t};\n\n\t/**\n\t * This is used to let Finsemble know which window is being dragged. <code>params.windowIdentifier</code> must be the identifier of the tab being dragged. This is only used if the identifier is unknown when <code>startTilingOrTabbing</code> is called.\n\t * @param {*} params - The <code>windowIdentifier</code> is required.\n\t * @param {*} cb - The callback to be invoked after the method completes successfully.\n\t */\n\tsendIdentifierForTilingOrTabbing(params: {\n\t\twindowIdentifier: WindowIdentifier\n\t}, cb: Function = Function.prototype) {\n\t\tFSBL.Clients.RouterClient.transmit(\"DockingService.identifierForTilingOrTabbing\", params);\n\t\tcb();\n\t};\n\n\t/**\n\t * This function is used by the Finsemble window title bar to end tiling or tabbing.\n\t * @param {*} params\n\t * @param {object} params.mousePosition Where the pointer is on the screen\n\t * @param {number} params.mousePosition.x X position of the pointer\n\t * @param {number} params.mousePosition.y Y position of the pointer\n\t * @param {boolean} params.allowDropOnSelf Determines whether a tab can be dropped on the window where the drag originated.\n\t * @param {*} cb - The callback to be invoked after the method completes successfully.\n\t */\n\tstopTilingOrTabbing(params: {\n\t\tmousePosition?: {\n\t\t\tx: number,\n\t\t\ty: number\n\t\t},\n\t\tallowDropOnSelf?: boolean\n\t}, cb: Function = Function.prototype) {\n\t\t// We both transmit and query because no stack operation should happen until this is done and there are a lot of listeners around.\n\t\tconst transmitAndQueryStop = () => {\n\t\t\tRouterClient.query(\"DockingService.stopTilingOrTabbing\", params, () => {\n\t\t\t\tcb();\n\t\t\t});\n\t\t\tRouterClient.transmit(\"DockingService.stopTilingOrTabbing\", params);\n\t\t};\n\t\t// Get the mouse position if not passed through for transmit to the router,\n\t\t// If allowDropOnSelf is true, it came from a tab/window drop event. Run the callback.\n\t\tif (!params.mousePosition) {\n\t\t\treturn System.getMousePosition((err, position) => {\n\t\t\t\tparams.mousePosition = position;\n\t\t\t\ttransmitAndQueryStop();\n\t\t\t\tif (!params.allowDropOnSelf) return cb();\n\t\t\t});\n\t\t} else {\n\t\t\ttransmitAndQueryStop();\n\t\t\tif (!params.allowDropOnSelf) return cb();\n\t\t}\n\t};\n\n\t/**\n\t * Gets the stackedWindow (if this window is a child of a stacked window).\n\t *\n\t * If the calling window is not part of a stacked window, the stacked window identifier will be returend null -- unless params.create is true. In this case, a stacked window will be created and the calling window will be set as the first child\n\t *\n\t * (Typically used by Tabbing Presentation component to manage tabs.)\n\t *\n\t * @param {object=} params\n\t * @param {array=} params.create if true and StackedWindow isn't defined, then it will be created\n\t * @param {array=} params.windowIdentifiers if creating, then can optionally specify an array of other windowIdentifiers to add to stack on creation (in addition to this window).\n\t * @param {function} cb cb(err, stackedWindowIdentifier)\n\t *\n\t * Typically used by Tabbing Presentation component.\n\t */\n\tprivate getStackedWindow(params?: getStackedWindowParams | StandardCallback, cb?: StandardCallback) {\n\t\tLogger.system.debug(\"WindowClient.getStackedWindow\", params);\n\t\tcb = cb || (params as StandardCallback);\n\t\tparams = (params as getStackedWindowParams) || {};\n\t\tparams.windowIdentifiers = params.windowIdentifiers || [];\n\n\t\tif (!finsembleWindow.parentWindow && params.create) {\n\t\t\tlet onParentSet = (evt) => {\n\t\t\t\tlet parentName = evt.data.parentName;\n\t\t\t\tfinsembleWindow.setParent({ windowName: parentName }, (err2, windowWrapper) => {\n\t\t\t\t\tcb(err2, windowWrapper);\n\t\t\t\t});\n\t\t\t\tfinsembleWindow.removeListener(\"parent-set\", onParentSet);\n\t\t\t};\n\t\t\tfinsembleWindow.addListener(\"parent-set\", onParentSet);\n\t\t\tFSBL.Clients.LauncherClient.spawn(\"StackedWindow\", {\n\t\t\t\twindowType: \"StackedWindow\", data: { windowIdentifiers: params.windowIdentifiers }, options: { newStack: true }\n\t\t\t}, function (err, windowInfo) {\n\t\t\t\tLogger.system.debug(\"WindowClient.getStackedWindow-success\", err, windowInfo);\n\t\t\t\tif (!err) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcb(err, null);\n\t\t\t});\n\n\t\t} else {\n\t\t\tfinsembleWindow.getParent(cb);\n\t\t}\n\t}\n\n\t/**\n\t * Private copy of getMonitorInfo from LauncherClient. We have to include it here to avoid a circular reference between LauncherClient and WindowClient.\n\t * @private\n\t */\n\tgetMonitorInfo(params, cb) {\n\t\tutil.getMyWindowIdentifier((myWindowIdentifier) => {\n\t\t\tif (!params.windowIdentifier) {\n\t\t\t\tparams.windowIdentifier = myWindowIdentifier;\n\t\t\t}\n\t\t\tthis.routerClient.query(\"Launcher.getMonitorInfo\", params, function (err, response) {\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(err, response.data);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n\t/**\n\t * Moves the window so that it's centered above the user's mouse.\n\t */\n\tshowAtMousePosition = function () {\n\t\tthis.routerClient.transmit(\"DockingService.showAtMousePosition\", this.getWindowIdentifier());\n\t};\n\n\t/**\n\t * Automatically resizes the height of the window to fit the full DOM of the current window.\n\t * @param {object} params.padding\n\t * @param {number} params.padding.height How much padding around the DOM to add to the height of the window.\n\t * @param {number} params.padding.width How much padding around the DOM to add to the width of the window.\n\t * @param {number} params.maxHeight Maximum height to make the window.\n\t * @param {number} params.maxWidth Maximum width to make the window.\n\t * @param {function} cb Optional callback to be invoked after the method completes successfully.\n\t */\n\tfitToDOM(params?: {\n\t\tpadding?: {\n\t\t\theight: number,\n\t\t\twidth: number\n\t\t},\n\t\tmaxHeight?: number,\n\t\tmaxWidth?: number\n\t}, cb?: Function) {\n\t\tvar children = document.body.children;\n\t\tvar element = document.getElementsByTagName(\"body\")[0],\n\t\t\tstyle = window.getComputedStyle(element),\n\t\t\tmarginTop = style.getPropertyValue(\"margin-top\"),\n\t\t\tmarginBottom = style.getPropertyValue(\"margin-bottom\");\n\t\tvar margin = parseInt(marginTop, 10) + parseInt(marginBottom, 10);\n\t\tif (isNaN(margin)) margin = 0;\n\t\tvar newHeight = margin;\n\t\tvar newWidth = this.options.width;\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tvar child = children[i] as any;\n\t\t\tnewHeight += child.offsetHeight + margin;\n\t\t\t//elmMargin = parseInt(child.style.marginTop, 10) + parseInt(child.style.marginBottom, 10);\n\t\t}\n\n\t\tif (typeof (params) === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tif (params && params.padding) {\n\t\t\tif (params.padding.height) {\n\t\t\t\tnewHeight += params.padding.height;\n\t\t\t}\n\t\t\tif (params.padding.width) {\n\t\t\t\tnewWidth += params.padding.width;\n\t\t\t}\n\t\t}\n\n\t\tif (params && params.maxHeight && newHeight > params.maxHeight) {\n\t\t\tnewHeight = params.maxHeight;\n\t\t}\n\t\tLogger.system.debug(\"WindowClient.FitToDOM:newHeight\", newHeight, params);\n\n\t\t//@todo, do this statically\n\t\tthis.getMonitorInfo({}, (err, monitorInfo) => {\n\t\t\t//Logger.system.log(\"updates111 in here\");\n\t\t\t// if this method is called while monitors are being received from the operating system, it's\n\t\t\t// possible that there are no monitors.And monitor info is undefined.If that happens, and we\n\t\t\t// don't gate below, we can throw exceptions, and never call the callback to fitToDOM.\n\t\t\tif (monitorInfo) {\n\t\t\t\tif (newHeight >= monitorInfo.unclaimedRect.height) {\n\t\t\t\t\tnewHeight = monitorInfo.unclaimedRect.height;\n\t\t\t\t}\n\t\t\t\tif (newWidth >= monitorInfo.unclaimedRect.width) {\n\t\t\t\t\tnewWidth = monitorInfo.unclaimedRect.width;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//bounds.x and bounds.y are null on mac. Not sure if they're set on windows, but this manifested itself with an error on macs that didn't resize.\n\t\t\tLogger.system.debug(\"WindowClient.FitToDOM:fixBounds\", newHeight, newWidth);\n\t\t\tfinsembleWindow.getBounds((err, bounds) => {\n\t\t\t\tbounds.width = newWidth;\n\t\t\t\tbounds.height = newHeight;\n\t\t\t\tfinsembleWindow.setBounds({ bounds }, cb);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * This makes sure that the implementation of bumping is the same for injection vs preload.\n\t *\n\t * @private\n\t * @memberof WindowClient\n\t */\n\tprivate _setHeaderHeight(config: any) {\n\t\tlet header = document.getElementsByClassName(\"fsbl-header\")[0];\n\t\tif (!header) { //wait for header to be rendered\n\t\t\treturn setTimeout(() => { this._setHeaderHeight(config) }, 100);\n\t\t}\n\t\tlet headerHeight = window.getComputedStyle(header, null).getPropertyValue(\"height\");\n\t\tdocument.body.style.marginTop = headerHeight;\n\t\tif (config.bumpElements && config.bumpElements.bumpBy === \"auto\") {\n\t\t \tconfig.bumpElements.bumpBy = headerHeight;\n\t\t}\n\t\tthis.bumpFixedElements(config.bumpElements);\n\n\t}\n\n\n\t/**\n\t * @private\n\t */\n\tprivate _deriveInjectHeaderParams(componentConfig: any) {\n\t\tconst defaultInjectHeaderParams: InjectHeaderParams = {\n\t\t\tcomponent: \"windowTitleBar\",\n\t\t\tbumpElements: {\n\t\t\t\tfixed: \"all\",\n\t\t\t\tabsolute: \"all\",\n\t\t\t\tbumpBy: \"auto\"\n\t\t\t},\n\t\t\tbodyMarginTop: \"auto\",\n\t\t\tforceHeaderHeight: false\n\t\t};\n\n\t\tlet injectHeaderParams = componentConfig;\n\t\t// this will catch true, false, or undefined.\n\t\tif (typeof injectHeaderParams !== \"object\") {\n\t\t\tinjectHeaderParams = defaultInjectHeaderParams;\n\t\t} else {\n\t\t\tinjectHeaderParams = Object.assign(defaultInjectHeaderParams, injectHeaderParams);\n\t\t}\n\n\t\treturn injectHeaderParams;\n\t}\n\t/**\n\t * Kicks off all of the necessary methods for the app. It\n\t * 1. Injects the header bar into the window.\n\t * 2. Sets up listeners to handle close and move requests from the application.\n\t * 3. Adds a listener that saves the window's state every time it's moved or resized.\n\t * @param {function} callback\n\t * See the [windowTitleBar tutorial](tutorial-UIComponents.html#window-title-bar) for more information.\n\t * @private\n\t */\n\tasync start(callback = Function.prototype) {\n\t\tValidate.args(callback, \"function\");\n\t\tconst self = this;\n\t\tconst finsembleConfig = await configClient.getValue(\"finsemble\")\n\t\tconst deliveryMechanism = finsembleConfig.data[\"Window Manager\"].deliveryMechanism ||\n\t\t\tDELIVERY_MECHANISM.PRELOAD;\n\t\tlet customData = null,\n\t\t\tisCompoundWindow = false,\n\t\t\tshouldInjectCSS = false,\n\t\t\tcomponentSupportsHeader = false;\n\t\t//where we store componentState for the window.\n\t\tthis.componentState = {};\n\t\tlet getFinsembleWindow = (done) => {\n\t\t\tFinsembleWindow.getInstance({ name: this.finWindow.name, uuid: this.finWindow.uuid }, (err, response) => {\n\t\t\t\tLogger.system.debug(`FinsembleWindow.getInstance ${this.finWindow.name}`);\n\n\t\t\t\tif (err == \"Cannot Wrap Service Manager or Services\") {\n\t\t\t\t\tthis.isInAService = true;\n\t\t\t\t\tthis.windowHash = util.camelCase(\"activeWorkspace\", window.name);\n\t\t\t\t\treturn done();\n\t\t\t\t}\n\t\t\t\tif (err || !response) {\n\t\t\t\t\tLogger.system.error(\"wrap failure\", err);\n\t\t\t\t}\n\t\t\t\tthis.finsembleWindow = response;\n\t\t\t\tfinsembleWindow = this.finsembleWindow;\n\t\t\t\tthis.windowHash = util.camelCase(\"activeWorkspace\", finsembleWindow.name);\n\t\t\t\tthis.addListeners();\n\t\t\t\tthis.routerClient.subscribe(\"Finsemble.WorkspaceService.groupUpdate\",\n\t\t\t\t\t(err, res) => this.groupUpdateHandler(err, res));\n\t\t\t\tdone();\n\t\t\t});\n\t\t};\n\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tgetFinsembleWindow(() => {\n\t\t\tthis.retrieveMonitorDimensions();\n\t\t\tthis.getInitialOptions(() => {\n\t\t\t\t//The functions above are necessary to finish initializing the windowClient. The functions below are independent of one another.\n\n\t\t\t\t// Note the extra test on the names is to ignore services that are including the windowClient, which needs to be removed\n\t\t\t\tif (!finsembleWindow || !finsembleWindow.windowOptions) {\n\t\t\t\t\tif (!this.isInAService) {\n\t\t\t\t\t\tLogger.system.error(\"Something went wrong attempting to get the current window.\");\n\t\t\t\t\t}\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\n\t\t\t\tcustomData = finsembleWindow.windowOptions.customData;\n\n\t\t\t\tif (customData) {\n\t\t\t\t\tisCompoundWindow = lodashGet(customData, 'window.compound', false);\n\t\t\t\t\tif (customData.cssOverride) {\n\t\t\t\t\t\tLogger.system.debug(\"Window has cssOverride. See local window to inspect object\");\n\t\t\t\t\t\tshouldInjectCSS = true;\n\t\t\t\t\t}\n\t\t\t\t\tcomponentSupportsHeader = !isCompoundWindow && lodashGet(customData,\n\t\t\t\t\t\t['foreign', 'components', 'Window Manager', 'FSBLHeader'], false);\n\t\t\t\t}\n\n\t\t\t\tasyncParallel([\n\t\t\t\t\tfunction injectCSS(done) {\n\t\t\t\t\t\tif (shouldInjectCSS) {\n\t\t\t\t\t\t\tself.injectStylesheetOverride();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdone();\n\t\t\t\t\t},\n\t\t\t\t\tfunction injectHeader(done) {\n\t\t\t\t\t\tLogger.system.debug('Will attempt to inject header.');\n\t\t\t\t\t\tif (componentSupportsHeader) {\n\t\t\t\t\t\t\tconst injectHeaderConfig = self._deriveInjectHeaderParams(customData.foreign.components[\"Window Manager\"].FSBLHeader);\n\t\t\t\t\t\t\tif (deliveryMechanism === DELIVERY_MECHANISM.INJECTION) {\n\t\t\t\t\t\t\t\tself.injectHeader(injectHeaderConfig, done);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (injectHeaderConfig.bodyMarginTop === \"auto\") {\n\t\t\t\t\t\t\t\t\tself._setHeaderHeight(injectHeaderConfig);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tself.bumpFixedElements(injectHeaderConfig.bumpElements);\n\t\t\t\t\t\t\t\t\tif (injectHeaderConfig.bodyMarginTop) {\n\t\t\t\t\t\t\t\t\t\tdocument.body.style.marginTop = injectHeaderConfig.bodyMarginTop;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Window doesn't support header injection (i.e. dialogModal, toolbar, searchMenu, etc)\n\t\t\t\t\t\t\t// so we don't need to inject header and bump window content's fixed elements\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tfunction setupAeroSnap(done) {\n\t\t\t\t\t\t//Get the 'enableWindowsAeroSnap' variable from the docking config and set this windows instance\n\t\t\t\t\t\tconfigClient.getValue('finsemble', (err, config) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tLogger.system.error(\"Error reading windowService config from finsemble\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet aeroSnap = config.services.windowService.config.enableWindowsAeroSnap;\n\n\t\t\t\t\t\t\tself.enableWindowsAeroSnap = configUtil.getDefault(config, \"config.servicesConfig.docking.enableWindowsAeroSnap\", aeroSnap);\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tfunction registerWithDocking(done) {\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Checks the config for a deprecated value or new value under windowService, or dockingService if windowService doesn't exist.\n\t\t\t\t\t\t * @param {array || string} deprecatedValues The deprecated value, if its an array, its multiple values to check for\n\t\t\t\t\t\t * @param {string} newValue The new value to check for if the deprecated value doesn't exist\n\t\t\t\t\t\t * @param {boolean} defaultVal The default value if the prop is not found under both windowService and dockingService\n\t\t\t\t\t\t */\n\t\t\t\t\t\tconst checkDeprecatedAndCompare = (params) => {\n\t\t\t\t\t\t\t//Ex. params.baseString = \"customData.foreign.services\";\n\t\t\t\t\t\t\t//Ex. params.newPath = \"windowService\"\n\t\t\t\t\t\t\t//Ex. searchString = \"customData.foreign.services.windowService\"\n\t\t\t\t\t\t\tlet searchString = params.baseString + \".\" + params.newPath;\n\n\t\t\t\t\t\t\t//Checks for new path - new properties\n\t\t\t\t\t\t\tlet value = configUtil.getDefault(customData, searchString + \".\" + params.newValue, null);\n\t\t\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\t\t\tsearchString = params.baseString + \".\" + params.oldPath;\n\t\t\t\t\t\t\t\t//Checks for old path - new properties\n\t\t\t\t\t\t\t\tvalue = configUtil.getDefault(customData, searchString + \".\" + params.newValue, null);\n\t\t\t\t\t\t\t\t// console.log('checked for ', searchString, '.', params.newValue, ' and result is: ', value);\n\n\t\t\t\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\t\t\t\tif (Array.isArray(params.oldValue)) {\n\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < params.oldValue.length; i++) {\n\t\t\t\t\t\t\t\t\t\t\tlet depVal = params.oldValue[i];\n\n\t\t\t\t\t\t\t\t\t\t\tsearchString = params.baseString + \".\" + params.oldPath;\n\t\t\t\t\t\t\t\t\t\t\tvalue = configUtil.getDefault(customData, searchString + \".\" + depVal, null);\n\t\t\t\t\t\t\t\t\t\t\t// console.log('checked for ', searchString + \".\" + depVal, ' and result is: ', value);\n\n\t\t\t\t\t\t\t\t\t\t\tif (value !== null) {\n\t\t\t\t\t\t\t\t\t\t\t\tLogger.system.warn(`${params.baseString}.${params.oldPath}.${depVal} has been deprecated in favor of ${params.baseString}.${params.newPath}.${params.newValue}`);\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsearchString = params.baseString + \".\" + params.oldPath;\n\t\t\t\t\t\t\t\t\t\t//Checks for old path - old properties\n\t\t\t\t\t\t\t\t\t\tvalue = configUtil.getDefault(customData, searchString + \".\" + params.oldValue, params.default);\n\t\t\t\t\t\t\t\t\t\t// console.log('checked for ', searchString, '.', params.oldValue, ' and result is: ', value);\n\n\t\t\t\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\t\t\t\tLogger.system.warn(`${params.baseString}.${params.oldPath}.${params.oldValue} has been deprecated in favor of ${params.baseString}.${params.newPath}.${params.newValue}`);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tLogger.system.warn(`${params.baseString}.${params.oldPath}.${params.newValue} has been deprecated in favor of ${params.baseString}.${params.newPath}.${params.newValue}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Additional function to register any dockable components with docking.\n\t\t\t\t\t\t// This will make docking aware of those dockable windows\n\t\t\t\t\t\t// and allow control over docking to window edges/moving windows out of claimed space\n\t\t\t\t\t\tif (customData && customData.component && customData.component.type !== \"service\") {\n\n\t\t\t\t\t\t\tlet manageMovement = configUtil.getDefault(customData, \"customData.foreign.services.windowService.manageWindowMovement\", false);\n\t\t\t\t\t\t\tif (!manageMovement) {\n\t\t\t\t\t\t\t\tmanageMovement = configUtil.getDefault(customData, \"customData.foreign.services.dockingService.manageWindowMovement\", false);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet FSBLHeader = configUtil.getDefault(customData, \"customData.foreign.components.Window Manager.FSBLHeader\", false);\n\n\t\t\t\t\t\t\tlet isDockable = configUtil.getDefault(customData, \"customData.window.dockable\", false);\n\n\t\t\t\t\t\t\t//If 'manageWindowMovement' wasn't found, we still want to register with docking (and manage window movement) if the component isDockable or has an FSBLHeader\n\t\t\t\t\t\t\tmanageMovement = manageMovement || FSBLHeader || isDockable;\n\n\t\t\t\t\t\t\t//Checks the config for deprecated props 'isArrangable' and 'isArrangeable'. If neither of these is found, will search 'allowAutoArrange'\n\t\t\t\t\t\t\tlet autoArrange = checkDeprecatedAndCompare({\n\t\t\t\t\t\t\t\tbaseString: \"customData.foreign.services\",\n\t\t\t\t\t\t\t\tnewPath: \"windowService\",\n\t\t\t\t\t\t\t\toldPath: \"dockingService\",\n\t\t\t\t\t\t\t\toldValue: [\"isArrangable\", \"isArrangeable\"],\n\t\t\t\t\t\t\t\tnewValue: \"allowAutoArrange\",\n\t\t\t\t\t\t\t\tdefault: manageMovement\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t//If the component wants its movement managed (or to be auto-arrangeable) it should register with docking\n\t\t\t\t\t\t\tlet shouldRegister = manageMovement || autoArrange;\n\n\t\t\t\t\t\t\tif (!shouldRegister) return done();\n\n\t\t\t\t\t\t\t//Consolidated auto arrange properties and add to window as 'allowAutoArrange'\n\t\t\t\t\t\t\tcustomData.window.allowAutoArrange = autoArrange;\n\n\t\t\t\t\t\t\t//Checks the config for deprecated prop 'ignoreSnappingRequests'. If not found, will search 'allowSnapping'.\n\t\t\t\t\t\t\tcustomData.window.snapping = checkDeprecatedAndCompare({\n\t\t\t\t\t\t\t\tbaseString: \"customData.foreign.services\",\n\t\t\t\t\t\t\t\tnewPath: \"windowService\",\n\t\t\t\t\t\t\t\toldPath: \"dockingService\",\n\t\t\t\t\t\t\t\toldValue: \"ignoreSnappingRequests\",\n\t\t\t\t\t\t\t\tnewValue: \"allowSnapping\",\n\t\t\t\t\t\t\t\tdefault: manageMovement\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t//Since 'allowSnapping' is essentially 'if true enable' and 'ignoreSnappingRequests' is essentially 'if true disable' we need to toggle this value depending on what prop was found. The core code still uses 'ignoreSnappingRequests'.\n\t\t\t\t\t\t\tif (customData && customData.foreign && customData.foreign.services) {\n\t\t\t\t\t\t\t\tlet service = customData.foreign.services.windowService !== undefined ? \"windowService\" : \"dockingService\";\n\n\t\t\t\t\t\t\t\tif (customData.foreign.services[service].ignoreSnappingRequests !== undefined) {\n\t\t\t\t\t\t\t\t\tcustomData.window.snapping = !customData.foreign.services[service].ignoreSnappingRequests;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Checks for an ephemeral component. Ephemeral components don't snap\n\t\t\t\t\t\t\tconst ephemeral = configUtil.getDefault(customData, \"customData.window.ephemeral\", false);\n\t\t\t\t\t\t\tif (ephemeral && !customData.window.snapping) {\n\t\t\t\t\t\t\t\tcustomData.window.snapping = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Checks the config for the deprecated prop 'ignoreTilingAndTabbingRequests'. If not found, will search 'allowTiling'.\n\t\t\t\t\t\t\tcustomData.window.tiling = checkDeprecatedAndCompare({\n\t\t\t\t\t\t\t\tbaseString: \"customData.foreign.services\",\n\t\t\t\t\t\t\t\tnewPath: \"windowService\",\n\t\t\t\t\t\t\t\toldPath: \"dockingService\",\n\t\t\t\t\t\t\t\toldValue: \"ignoreTilingAndTabbingRequests\",\n\t\t\t\t\t\t\t\tnewValue: \"allowTiling\",\n\t\t\t\t\t\t\t\tdefault: manageMovement\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t//Checks the config for deprecated prop 'ignoreTilingAndTabbingRequests'. If not found, will search 'allowTabbing'.\n\t\t\t\t\t\t\tcustomData.window.tabbing = checkDeprecatedAndCompare({\n\t\t\t\t\t\t\t\tbaseString: \"customData.foreign.services\",\n\t\t\t\t\t\t\t\tnewPath: \"windowService\",\n\t\t\t\t\t\t\t\toldPath: \"dockingService\",\n\t\t\t\t\t\t\t\toldValue: \"ignoreTilingAndTabbingRequests\",\n\t\t\t\t\t\t\t\tnewValue: \"allowTabbing\",\n\t\t\t\t\t\t\t\tdefault: manageMovement\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t//Since 'allowTiling'/'allowTabbing' is essentially 'if true enable' and 'ignoreTilingAndTabbingRequests' is essentially 'if true disable' we need to toggle this value depending on what prop was found.\n\t\t\t\t\t\t\tif (customData && customData.foreign && customData.foreign.services) {\n\t\t\t\t\t\t\t\tlet service = customData.foreign.services.windowService !== undefined ? \"windowService\" : \"dockingService\";\n\n\t\t\t\t\t\t\t\tif (customData.foreign.services[service].ignoreTilingAndTabbingRequests !== undefined) {\n\t\t\t\t\t\t\t\t\tcustomData.window.tiling = !customData.window.tiling;\n\t\t\t\t\t\t\t\t\tcustomData.window.tabbing = !customData.window.tabbing;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Checks the deprecated config prop 'canGroup'. If not found, will search 'allowGrouping'.\n\t\t\t\t\t\t\tcustomData.window.canGroup = checkDeprecatedAndCompare({\n\t\t\t\t\t\t\t\tbaseString: \"customData.foreign.services\",\n\t\t\t\t\t\t\t\tnewPath: \"windowService\",\n\t\t\t\t\t\t\t\toldPath: \"dockingService\",\n\t\t\t\t\t\t\t\toldValue: \"canGroup\",\n\t\t\t\t\t\t\t\tnewValue: \"allowGrouping\",\n\t\t\t\t\t\t\t\tdefault: manageMovement\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t//Checks the config for deprecated prop 'canMinimize'. If not found, will search 'allowMinimize'\n\t\t\t\t\t\t\tcustomData.window.canMinimize = checkDeprecatedAndCompare({\n\t\t\t\t\t\t\t\tbaseString: \"customData.foreign.services\",\n\t\t\t\t\t\t\t\tnewPath: \"windowService\",\n\t\t\t\t\t\t\t\toldPath: \"dockingService\",\n\t\t\t\t\t\t\t\toldValue: \"canMinimize\",\n\t\t\t\t\t\t\t\tnewValue: \"allowMinimize\",\n\t\t\t\t\t\t\t\tdefault: undefined\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t/** The canMinimize and canMaximize config could be one\n\t\t\t\t\t\t\t * of two locations. In a future (4.0) version, we should\n\t\t\t\t\t\t\t * consolidate this to one location.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tif (customData.window.canMinimize === undefined) {\n\t\t\t\t\t\t\t\tcustomData.window.canMinimize = customData.component.canMinimize;\n\t\t\t\t\t\t\t\tif (customData.window.canMinimize === undefined) {\n\t\t\t\t\t\t\t\t\tcustomData.window.canMinimize = manageMovement;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (customData.window.canMaximize === undefined) {\n\t\t\t\t\t\t\t\tcustomData.window.canMaximize = customData.component.canMaximize;\n\t\t\t\t\t\t\t\tif (customData.window.canMaximize === undefined) {\n\t\t\t\t\t\t\t\t\tcustomData.window.canMaximize = manageMovement;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t//Determines whether a dockable component should retrieve its state from memory, or start with default (config defined) options every time\n\t\t\t\t\t\t\tcustomData.window.overwriteStartDocked = configUtil.getDefault(customData, \"customData.foreign.services.workspaceService.global\", false);\n\n\t\t\t\t\t\t\tself.registerWithDockingManager(customData.window, () => {\n\t\t\t\t\t\t\t\tself.cacheInitialBounds(done);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn done();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t], (err, results) => callback(err, results));\n\t\t\t});\n\t\t});\n\t};\n}\n\nvar windowClient = new WindowClient({\n\tstartupDependencies: {\n\t\tservices: [\"storageService\", \"windowService\"]\n\t},\n\tonReady: function (cb) {\n\t\twindowClient.start(cb);\n\t},\n\tname: \"windowClient\"\n});\n\nexport default windowClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/windowClient.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\n/*\nOverview of how this works:\n-hotkeys are added/removed via methods, passing an array of strings representing keys pressed, a handler method, and (optionally) a callback\n\n-When adding a hotkey, a node js event emitter is created on the client side to trigger the hotkey handler, and a router message is sent to the service to register the key combination with the window name on the client side. Multiple hotkeys may be created for the same key combination, so long as they have different handler functions.\n\n-When the service detects that all of the keys in the hotkey combination are pressed, it sends a message on the \"HotkeyTriggered\" channel (the method for this is \"ListenForHotkeys\") which contains the list of all windows registered with that hotkey combination. The client then reads the list of windows, and checks if it's one of those windows. If it is, it fires off the node js event emitter that was registered for that hotkey.\n\n-Removing a hotkey clears the corresponding event emitter, and also sends a router message to the service to remove its window id from the array of windows registered for the hotkey combination - if the window is registered with that hotkey combination multiple times, it will only remove one, allowing other hotkeys on the same window with the same key combination to still be registered.\n\n*/\nimport { _BaseClient as BaseClient } from \"./baseClient\";\nimport RouterClient from \"./routerClientInstance\";\nimport Logger from \"./logger\";\n\nconst keyMap = require(\"../common/keyMaps.json\").dictionary;\n\nimport { IGlobals } from \"../common/Globals\";\n/** The global `window` object. We cast it to a specific interface here to be\n * explicit about what Finsemble-related properties it may have. */\nconst Globals = window as IGlobals\n\nimport { EventEmitter } from \"events\";\nvar eventEmitter = new EventEmitter();\n/**\n * Translates an array representing a key combination, each element of which represents a key, using keyDict, an object containing key-value pairs where the untranslated key representations are the keys, and the translated versions ready to be used by the service are the values.\n *\n * If you'd like to create a keymap for translation, look at the values of the keymaps included in the common folder.\n * @private\n * @param {object} params\n * @param {object} params.keys array representing untranslated key representations\n * @param {object} keyDict\n */\nfunction translateKeys(params, keyDict = keyMap) {\n\tvar translatedKeys = [];\n\tparams.keys.forEach((key) => {\n\t\tif (!(typeof key === \"string\")) {\n\t\t\treturn Logger.system.error(\"FSBL.Clients.HotkeyClient - one of the keys passed into a function was not a string: \", key);\n\t\t}\n\t\tkey = key.toLowerCase();\n\t\tlet mappedKey = keyDict[key];\n\t\tif (mappedKey) {\n\t\t\ttranslatedKeys.push(mappedKey);\n\t\t} else {\n\t\t\treturn Logger.system.error(`FSBL.Clients.HotkeyClient - At least one of the key codes does not map to a supported key - registering hotkey unsuccessful. Unsupported keys: ${key}`);\n\t\t}\n\t});\n\treturn translatedKeys;\n}\n\n// Keystroke capture class taken from ChartIQ charting library\n\nconst Keystroke = function (cb) {\n\tthis.cb = cb;\n\tthis.shift = false;\n\tthis.ctrl = false;\n\tthis.cmd = false;\n\tthis.capsLock = false;\n\tthis.initialize();\n};\n\nKeystroke.prototype.keyup = function (e) {\n\n\tswitch (e.key) {\n\t\tcase \"Shift\":\n\t\t\tthis.shift = false;\n\t\t\tthis.cb({ key: e.key, e: e, keystroke: this });\n\t\t\treturn;\n\t\tcase \"Control\":\n\t\tcase \"Alt\":\n\t\t\tthis.ctrl = false;\n\t\t\tthis.cb({ key: e.key, e: e, keystroke: this });\n\t\t\treturn;\n\t\tcase \"Meta\":\n\t\tcase \"Win\":\n\t\t\tthis.cmd = false;\n\t\t\tthis.cb({ key: e.key, e: e, keystroke: this });\n\t\t\treturn;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t// This is where we handle the keystroke, regardless of whether we captured the key with a down or press event\n\t// The exception to this is the arrow keys, which are processed in keydown\n\tif (this.key) this.cb({ key: this.key, e: e, keystroke: this });\n};\n\nKeystroke.prototype.keydown = function (e) {\n\tif (this.noKeyCapture) return;\n\n\tthis.key = e.key;\n\tswitch (e.key) {\n\t\tcase \"Meta\":\n\t\tcase \"Win\":\n\t\t\tthis.cmd = true;\n\t\t\tbreak;\n\t\tcase \"Shift\":\n\t\t\tthis.shift = true;\n\t\t\tbreak;\n\t\tcase \"Control\":\n\t\tcase \"Alt\":\n\t\t\tthis.ctrl = true;\n\t\t\tbreak;\n\t\tcase \"CapsLock\":\n\t\t\tthis.capsLock = !this.capsLock;\n\t\t\tbreak;\n\t\tcase \"ArrowUp\":\n\t\tcase \"ArrowDown\":\n\t\tcase \"ArrowLeft\":\n\t\tcase \"ArrowRight\":\n\t\tcase \"Up\":\n\t\tcase \"Down\":\n\t\tcase \"Left\":\n\t\tcase \"Right\":\n\t\t\t// If you hold a key down, then keydown will repeat. These are the keys\n\t\t\t// that we want to capture repeat action.\n\t\t\tthis.key = null;\n\t\t\tthis.cb({ key: e.key, e: e, keystroke: this });\n\t\t\tbreak;\n\t}\n};\n\nKeystroke.prototype.keypress = function (e) {\n\tif (this.noKeyCapture) return;\n\tvar keyCode = e.which;\n\tif (keyCode < 32 || keyCode > 222) return; // handled by keydown\n\tthis.key = e.key;\n};\n\n/**\n * initializes member functions\n * @memberof CIQ.UI.Keystroke\n */\nKeystroke.prototype.initialize = function () {\n\tvar self = this;\n\tdocument.addEventListener(\"keyup\", function (e) {\n\t\tself.keyup(e);\n\t});\n\tdocument.addEventListener(\"keydown\", function (e) {\n\t\tself.downValue = e.key;\n\t\tself.keydown(e);\n\t});\n\tdocument.addEventListener(\"keypress\", function (e) {\n\t\tself.keypress(e);\n\t});\n\twindow.addEventListener(\"blur\", function (e) { // otherwise ctrl-t to switch tabs causes ctrl to get stuck\n\t\tself.ctrl = false;\n\t\tself.cb({ key: \"Control\", e: e, keystroke: self });\n\t});\n};\n\n// Used to keep track of which browser key combinations are registered locally\nvar registeredBrowserKeys = [];\n\nclass HotkeyClient extends BaseClient {\n\t/**\n\t* @introduction\n\t*\n\t* <h2>Hotkey Client</h2>\n\t*\n\t* This module contains the Hotkey Client, used for registering hotkey combinations and their respective handler functions with Finsemble.\n\t*\n\t* The client can handle two types of hotkeys: **local hotkeys**, for which the handlers will only fire when the window which defined the hotkey is in focus, and **global hotkeys**, which will fire regardless of what window is in focus.\n\t*\n\t* For more information, see the [Hotkey tutorial](tutorial-Hotkeys.html).\n\t*\n\t*\n\t*\n\t* @constructor\n\t* @hideconstructor\n\t* @publishedName HotkeyClient\n\t* @param {*} params\n\t*/\n\tkeyMap;\n\tlocalListeners;\n\tKeyStroke;\n\tconstructor(params) {\n\t\tsuper(params);\n\t\tthis.keyMap = keyMap;\n\n\t\tthis.listenForHotkeys = this.listenForHotkeys.bind(this);\n\t\tthis.routerClient = RouterClient;\n\t\tthis.routerClient.onReady(this.listenForHotkeys);\n\t\t//Local hotkeys need to only fire if the window is focused. The object below is a map of handlers passed in by the user.\n\t\t//The keys are the handler, and the value is the wrapped method that checks for focus.\n\t\tthis.localListeners = {};\n\t}\n\n\t/**\n\t *Adds a local hotkey which fires only when the window calling the method is in focus. If you execute this function more than once for the same key combination, both hotkeys will coexist, and would need to be removed separately.\n\t * @param {Array.<string>} keyArr Array of strings representing hotkey key combination.\n\t * @param {function} handler Function to be executed when the hotkey combination is pressed. It is recommended that you define a variable to represent the handler function, as the same function must be passed in order to remove the hotkey.\n\t * @param {StandardCallback} cb Callback to be called after local hotkey is added.\n\t * @example\n\t * var myFunction = function () {...}\n\t * FSBL.Clients.HotkeyClient.addLocalHotkey([\"ctrl\", \"shift\", \"s\"], myFunction, cb)\n\t */\n\taddLocalHotkey(keyArr: string[], handler: Function | any, cb: StandardCallback = (err, response): void => { }) {\n\t\tLogger.system.info(\"HotkeyClient.addLocalHotkey\");\n\t\tLogger.system.debug(\"HotkeyClient.addLocalHotkey, keyArr: \", keyArr);\n\t\tlet keyString = translateKeys({ keys: keyArr }).sort().toString();\n\t\t//We create a new function that checks focus before invoking the method.\n\t\t//If assimilation wasn't on, we'd want to use window.addEventListener('keydown');\n\t\tlet wrap = () => {\n\t\t\tif (document.hasFocus()) {\n\t\t\t\thandler();\n\t\t\t}\n\t\t};\n\t\t//Keep a reference to the handler so when the dev wants to remove it, we can.\n\t\tif (!this.localListeners[keyString]) {\n\t\t\tthis.localListeners[keyString] = {};\n\t\t}\n\t\tthis.localListeners[keyString][handler] = wrap;\n\t\teventEmitter.addListener(keyString, wrap);\n\t\tthis.routerClient.query(\"hotkeysService.registerGlobalHotkey\", { \"keys\": keyString, windowName: this.windowName }, cb);\n\t}\n\n\t/**\n\t *Adds a local hotkey, firing only when the window calling the method is in focus. If you execute this function more than once for the same key combination, both hotkeys will coexist, and would need to be remove separately.\n\t * This function uses browser key capture, so it will work when assimilation is not running\n\t * @param {Array} [keyArr] Array of strings representing hotkey key combination.\n\t * @param {function} [handler] Function to be executed when the hotkey combination is pressed. It is recommended that you define a variable to represent the handler function, as the same function must be passed in order to remove the hotkey.\n\t * @param {function} cb Callback to be called after local hotkey is added.\n\t * @todo Have addLocalHotkey automatically use this when assimilation is not running. Will eventually replace addLocalHotkey.\n\t * @private\n\t * @example\n\t * var myFunction = function () {...}\n\t * FSBL.Clients.HotkeyClient.addBrowserHotkey([\"ctrl\",\"shift\",\"s\"],myFunction,cb)\n\t */\n\taddBrowserHotkey(keyArr: string[], handler: Function) {\n\t\t// Lazily create a keystroke handler for this web page if one doesn't already exist\n\t\tif (!this.KeyStroke) {\n\t\t\tthis.KeyStroke = new Keystroke(function (params) {\n\t\t\t\tlet { key, keystroke } = params;\n\t\t\t\tvar myKeyArray = [key];\n\t\t\t\tif (keystroke.ctrl) myKeyArray.push(\"control\");\n\t\t\t\tif (keystroke.shift) myKeyArray.push(\"shift\");\n\t\t\t\tif (keystroke.alt) myKeyArray.push(\"alt\");\n\t\t\t\tlet myKeyString = myKeyArray.sort().toString();\n\n\t\t\t\tregisteredBrowserKeys.forEach(function (obj) {\n\t\t\t\t\tif (obj.keyString === myKeyString) obj.handler();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tlet keyString = translateKeys({ keys: keyArr }).sort().toString();\n\t\tregisteredBrowserKeys.push({ keyString: keyString, handler: handler });\n\t}\n\n\t/**\n\t *Removes a local hotkey.\n\t * @param {Array.<string>} keyArr Array of strings representing hotkey key combination.\n\t * @param {function} handler Handler registered for the hotkey to be removed.\n\t * @param {StandardCallback} cb Callback to be called after local hotkey is removed.\n\t * @example\n\t *\n\t * FSBL.Clients.HotkeyClient.removeLocalHotkey([\"ctrl\", \"shift\", \"s\"], myFunction, cb)\n\t */\n\tremoveLocalHotkey(keyArr: string[], handler: Function | any, cb: StandardCallback = (err, response): void => { }) {\n\t\tLogger.system.info(\"HotkeyClient.removeLocalHotkey\");\n\t\tLogger.system.debug(\"HotkeyClient.removeLocalHotkey, keyArr: \", keyArr);\n\t\tlet keyString = translateKeys({ keys: keyArr }).sort().toString();\n\t\tlet wrap = this.localListeners[keyString][handler];\n\t\teventEmitter.removeListener(keyString, wrap);\n\t\tthis.routerClient.query(\"hotkeysService.unregisterGlobalHotkey\", { \"keys\": keyString, windowName: this.windowName }, cb); //TODO: query\n\t}\n\n\t/**\n\t *Adds a global hotkey which fires regardless of what window is in focus. If you execute this function more than once for the same key combination, both hotkeys will coexist, and would need to be removed separately.\n\t * @param {Array.<string>} keyArr Array of strings representing a hotkey key combination.\n\t * @param {function} handler Function to be executed when the hotkey combination is pressed. It is recommended that you define a variable to represent the handler function, as the same function must be passed in order to remove the hotkey.\n\t * @param {StandardCallback} cb Callback to be called after local hotkey is added.\n\t * @example\n\t * var myFunction = function () {...}\n\t * FSBL.Clients.HotkeyClient.addGlobalHotkey([\"ctrl\", \"shift\", \"s\"], myFunction, cb)\n\t */\n\taddGlobalHotkey(keyArr: string[], handler: Function | any, cb: StandardCallback = (err, response): void => { }) {\n\t\tLogger.system.info(\"HotkeyClient.addGlobalHotkey\");\n\t\tLogger.system.debug(\"HotkeyClient.addGlobalHotkey, keyArr: \", keyArr);\n\t\tlet keyString = translateKeys({ keys: keyArr }).sort().toString();\n\t\teventEmitter.addListener(keyString, handler);\n\t\tthis.routerClient.query(\"hotkeysService.registerGlobalHotkey\", { \"keys\": keyString, windowName: this.windowName }, cb);\n\t}\n\n\t/**\n\t *Removes a global hotkey.\n\t * @param {Array.<string>} keyArr Array of strings representing hotkey key combination.\n\t * @param {function} handler Handler registered for the hotkey to be removed.\n\t * @param {StandardCallback} cb Callback to be called after local hotkey is removed.\n\t * @example\n\t *\n\t * FSBL.Clients.HotkeyClient.removeGlobalHotkey([\"ctrl\", \"shift\", \"s\"], myFunction, cb)\n\t */\n\tremoveGlobalHotkey(keyArr: string[], handler: Function | any, cb: StandardCallback = (err, response): void => { }) {\n\t\tLogger.system.info(\"HotkeyClient.removeGlobalHotkey\");\n\t\tLogger.system.debug(\"HotkeyClient.removeGlobalHotkey, keyArr: \", keyArr);\n\t\tlet keyString = translateKeys({ keys: keyArr }).sort().toString();\n\t\teventEmitter.removeListener(keyString, handler);\n\t\tthis.routerClient.query(\"hotkeysService.unregisterGlobalHotkey\", { \"keys\": keyString, windowName: this.windowName }, cb); //TODO: query\n\t}\n\n\t/**\n\t * Not yet implemented - will return an object that contains all registered Hotkeys\n\t */\n\t/* getHotkeys() { //TODO: MAKE WORK\n\t\tLogger.system.info(\"HotkeyClient.getHotkeys\");\n\t\tthis.routerClient.transmit(\"hotkeysService.getRegisteredHotkeys\", { request: true });\n\t} */\n\n\t/**\n\t * Handler for \"hotkey triggered\" messages from the service, called upon client initialization.\n\t * @private\n\t */\n\tlistenForHotkeys() { //TODO: make private\n\t\tvar self = this;\n\t\tthis.routerClient.addListener(\"HotkeyTriggered\", function (error, response) {\n\t\t\tif (error) {\n\t\t\t\tconsole.error(\"Hotkey Channel Error: \" + JSON.stringify(error));\n\t\t\t} else {\n\t\t\t\tif (response.data.windows.includes(self.windowName)) { //if this is one of the windows that the service means to trigger here\n\t\t\t\t\teventEmitter.emit(response.data.keys);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Unregister all hotkeys, both locally and service-side.\n\t * @param {StandardCallback} cb Optional callback function\n\t *\n\t */\n\tremoveAllHotkeys(cb: StandardCallback) {\n\t\teventEmitter.removeAllListeners();\n\t\tthis.routerClient.query(\"hotkeysService.removeAllHotkeysForWindow\", { windowName: this.windowName }, cb);\n\t}\n\n\t/**\n\t * Automatically unregister all hotkeys when the window containing the client closes\n\t * @param {function} cb\n\t * @private\n\t */\n\tonClose = (cb) => {\n\t\tthis.removeAllHotkeys(cb);\n\t}\n}\n\nvar hotkeyClient = new HotkeyClient({\n\tstartupDependencies: {\n\t\tservices: [\"hotkeysService\"]\n\t},\n\tonReady: function (cb) {\n\t\tif (cb) {\n\t\t\tcb();\n\t\t}\n\t},\n\tname: \"hotkeyClient\"\n});\n\n// @TODO - use proper exports instead of global scope.\nGlobals.Keystroke = Keystroke;\n\nexport default hotkeyClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/hotkeysClient.ts","module.exports = {\"dictionary\":{\"0\":\"0\",\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"4\",\"5\":\"5\",\"6\":\"6\",\"7\":\"7\",\"8\":\"8\",\"9\":\"9\",\"backspace\":\"backspace\",\"bs\":\"backspace\",\"bksp\":\"backspace\",\"tab\":\"tab\",\"escape\":\"escape\",\"esc\":\"escape\",\"clear\":\"clear\",\"enter\":\"enter\",\"return\":\"enter\",\"shift\":\"shift\",\"shft\":\"shift\",\"lshift\":\"shift\",\"lshft\":\"shift\",\"left shift\":\"shift\",\"leftshift\":\"shift\",\"rshift\":\"shift\",\"rshft\":\"shift\",\"right shift\":\"shift\",\"rightshift\":\"shift\",\"control\":\"control\",\"ctrl\":\"control\",\"alt\":\"alt\",\"alternate\":\"alt\",\"pause\":\"pause\",\"caps lock\":\"caps lock\",\"capslock\":\"caps lock\",\"spacebar\":\"spacebar\",\"space\":\"spacebar\",\"space bar\":\"space\",\"page up\":\"page up\",\"pgup\":\"page up\",\"pg up\":\"page up\",\"page down\":\"page down\",\"pgdn\":\"page down\",\"pg dn\":\"page down\",\"end\":\"end\",\"home\":\"home\",\"left arrow\":\"left arrow\",\"left\":\"left arrow\",\"up arrow\":\"up arrow\",\"up\":\"up arrow\",\"right arrow\":\"right arrow\",\"right\":\"right arrow\",\"down arrow\":\"down arrow\",\"down\":\"down arrow\",\"select\":\"select\",\"slct\":\"select\",\"print\":\"print\",\"prnt\":\"print\",\"execute\":\"execute\",\"print screen\":\"print screen\",\"printscreen\":\"print screen\",\"print scrn\":\"print screen\",\"printscrn\":\"print screen\",\"prnt scrn\":\"print screen\",\"prntscrn\":\"print screen\",\"prt scrn\":\"print screen\",\"prtscrn\":\"print screen\",\"prt scn\":\"print screen\",\"prtscn\":\"print screen\",\"prt scr\":\"print screen\",\"prtscr\":\"print screen\",\"prt sc\":\"print screen\",\"prtsc\":\"print screen\",\"pr sc\":\"print screen\",\"prsc\":\"print screen\",\"insert\":\"insert\",\"ins\":\"insert\",\"delete\":\"delete\",\"del\":\"delete\",\"help\":\"help\",\"a\":\"a\",\"b\":\"b\",\"c\":\"c\",\"d\":\"d\",\"e\":\"e\",\"f\":\"f\",\"g\":\"g\",\"h\":\"h\",\"i\":\"i\",\"j\":\"j\",\"k\":\"k\",\"l\":\"l\",\"m\":\"m\",\"n\":\"n\",\"o\":\"o\",\"p\":\"p\",\"q\":\"q\",\"r\":\"r\",\"s\":\"s\",\"t\":\"t\",\"u\":\"u\",\"v\":\"v\",\"w\":\"w\",\"x\":\"x\",\"y\":\"y\",\"z\":\"z\",\"windows\":\"windows\",\"left windows\":\"windows\",\"right windows\":\"windows\",\"applications\":\"applications\",\"computer sleep\":\"computer sleep\",\"sleep\":\"computer sleep\",\"numpad 0\":\"0\",\"numpad 1\":\"1\",\"numpad 2\":\"2\",\"numpad 3\":\"3\",\"numpad 4\":\"4\",\"numpad 5\":\"5\",\"numpad 6\":\"6\",\"numpad 7\":\"7\",\"numpad 8\":\"8\",\"numpad 9\":\"9\",\"f1\":\"f1\",\"fn1\":\"f1\",\"function 1\":\"f1\",\"f2\":\"f2\",\"fn2\":\"f2\",\"function 2\":\"f2\",\"f3\":\"f3\",\"fn3\":\"f3\",\"function 3\":\"f3\",\"f4\":\"f4\",\"fn4\":\"f4\",\"function 4\":\"f4\",\"f5\":\"f5\",\"fn5\":\"f5\",\"function 5\":\"f5\",\"f6\":\"f6\",\"fn6\":\"f6\",\"function 6\":\"f6\",\"f7\":\"f7\",\"fn7\":\"f7\",\"function 7\":\"f7\",\"f8\":\"f8\",\"fn8\":\"f8\",\"function 8\":\"f8\",\"f9\":\"f9\",\"fn9\":\"f9\",\"function 9\":\"f9\",\"f10\":\"f10\",\"fn10\":\"f10\",\"function 10\":\"f10\",\"f11\":\"f11\",\"fn11\":\"f11\",\"function 11\":\"f11\",\"f12\":\"f12\",\"fn12\":\"f12\",\"function 12\":\"f12\",\"f13\":\"f13\",\"fn\":\"f13\",\"function 13\":\"f13\",\"f14\":\"f14\",\"fn14\":\"f14\",\"function 14\":\"f14\",\"f15\":\"f15\",\"fn15\":\"f15\",\"function 15\":\"f15\",\"f16\":\"f16\",\"fn16\":\"f16\",\"function 16\":\"f16\",\"num lock\":\"num lock\",\"numlock\":\"num lock\",\"number lock\":\"num lock\",\"numeric lock\":\"num lock\",\"scroll lock\":\"scroll lock\",\"sclk\":\"scroll lock\",\"scrlk\":\"scroll lock\",\"slk\":\"scroll lock\",\"menu\":\"menu\",\"*\":\"*\",\"+\":\"+\",\"-\":\"-\",\"/\":\"/\",\";\":\";\",\"=\":\"=\",\",\":\",\",\"_\":\"-\",\".\":\".\",\"`\":\"`\",\"[\":\"[\",\"]\":\"]\",\"'\":\"'\"},\"assimilationMap\":{\"1\":\"lmb\",\"2\":\"rmb\",\"4\":\"mmb\",\"8\":\"backspace\",\"9\":\"tab\",\"13\":\"enter\",\"16\":\"shift\",\"17\":\"control\",\"18\":\"alt\",\"19\":\"pause\",\"20\":\"caps lock\",\"27\":\"escape\",\"32\":\"spacebar\",\"33\":\"page up\",\"34\":\"page down\",\"35\":\"end\",\"36\":\"home\",\"37\":\"left arrow\",\"38\":\"up arrow\",\"39\":\"right arrow\",\"40\":\"down arrow\",\"41\":\"select\",\"42\":\"print\",\"43\":\"execute\",\"44\":\"print screen\",\"45\":\"insert\",\"46\":\"delete\",\"47\":\"help\",\"48\":\"0\",\"49\":\"1\",\"50\":\"2\",\"51\":\"3\",\"52\":\"4\",\"53\":\"5\",\"54\":\"6\",\"55\":\"7\",\"56\":\"8\",\"57\":\"9\",\"65\":\"a\",\"66\":\"b\",\"67\":\"c\",\"68\":\"d\",\"69\":\"e\",\"70\":\"f\",\"71\":\"g\",\"72\":\"h\",\"73\":\"i\",\"74\":\"j\",\"75\":\"k\",\"76\":\"l\",\"77\":\"m\",\"78\":\"n\",\"79\":\"o\",\"80\":\"p\",\"81\":\"q\",\"82\":\"r\",\"83\":\"s\",\"84\":\"t\",\"85\":\"u\",\"86\":\"v\",\"87\":\"w\",\"88\":\"x\",\"89\":\"y\",\"90\":\"z\",\"91\":\"windows\",\"92\":\"windows\",\"93\":\"applications\",\"95\":\"computer sleep\",\"96\":\"0\",\"97\":\"1\",\"98\":\"2\",\"99\":\"3\",\"100\":\"4\",\"101\":\"5\",\"102\":\"6\",\"103\":\"7\",\"104\":\"8\",\"105\":\"9\",\"106\":\"*\",\"107\":\"+\",\"109\":\"-\",\"111\":\"/\",\"112\":\"f1\",\"113\":\"f2\",\"114\":\"f3\",\"115\":\"f4\",\"116\":\"f5\",\"117\":\"f6\",\"118\":\"f7\",\"119\":\"f8\",\"120\":\"f9\",\"121\":\"f10\",\"122\":\"f11\",\"123\":\"f12\",\"124\":\"f13\",\"125\":\"f14\",\"126\":\"f15\",\"127\":\"f16\",\"144\":\"num lock\",\"145\":\"scroll lock\",\"160\":\"shift\",\"161\":\"shift\",\"162\":\"control\",\"163\":\"control\",\"164\":\"alt\",\"165\":\"alt\",\"186\":\";\",\"187\":\"=\",\"188\":\",\",\"189\":\"-\",\"190\":\".\",\"191\":\"/\",\"192\":\"`\",\"219\":\"[\",\"220\":\"\\\\\",\"221\":\"]\",\"222\":\"\\\\\",\"223\":\"'\",\"//note, backtick and apostrophe\":\"are reversed on uk and us keyboards\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/keyMaps.json\n// module id = 46\n// module chunks = 0 2 3 4 6 7 14","import RouterClient from \"../../clients/routerClientInstance\";\r\nimport { EventEmitter } from \"events\";\r\n\r\n/**\r\n * Notes:\r\n * Client calls finsembleWindow.addEventListener(\"event\", handler)\r\n *\r\n * hander gets called with handler(FinsembleEvent)\r\n *\r\n * in the handler:\r\n function handler(e) {\r\n\tif (e.delayable) {\r\n\t\te.wait();\r\n\t\tfunction myStuff() {\r\n\t\t\t//my stuff here\r\n\t\t\tif (cancel && e.cancelable) {\r\n\t\t\t\te.cancel();\r\n\t\t\t} else {\r\n\t\t\t\te.done();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n *\r\n *\r\n *\r\n */\r\n\r\n /**\r\n  * This object is passed to event handlers so they can interrupt events. This is used in conjunction with the implementation of add/remove event listeners in BaseWindow and FinsembleWindow\r\n  */\r\nclass FinsembleEvent extends EventEmitter {\r\n\tcancelable: boolean = false\r\n\tdelayable: boolean = false\r\n\tdelayed: boolean = false\r\n\tevent: WindowEvent\r\n\tsource: any\r\n\tdata: any\r\n\r\n\tconstructor(params) {\r\n\t\tsuper();\r\n\t\tif (params.event) this.event = params.event;\r\n\t\tif (params.cancelable) this.cancelable = true;\r\n\t\tif (params.data) this.data = params.data;\r\n\t\tif (params.delayable) this.delayable = true;\r\n\r\n\t}\r\n\r\n\twait() {\r\n\t\tif (this.delayable) this.delayed = true;\r\n\t}\r\n\r\n\tcancel() {\r\n\t\tif (this.cancelable) {\r\n\t\t\tthis.emit(\"done\", {\r\n\t\t\t\tcanceled: true\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tdone() {\r\n\t\tthis.emit(\"done\", {\r\n\t\t\tcanceled: false\r\n\t\t})\r\n\t}\r\n\r\n\tsetData(data) {\r\n\t\tthis.data = data;\r\n\t}\r\n}\r\n\r\nexport { FinsembleEvent };\r\n\n\n\n// WEBPACK FOOTER //\n// src/common/window/FinsembleEvent.ts","import RouterClient from \"../../clients/routerClientInstance\";\nimport Logger from \"../../clients/logger\";\nimport { EventEmitter } from \"events\";\n\n/**\n * DIAGRAM: https://realtimeboard.com/app/board/o9J_kzFZvJ0=/?moveToWidget=3074457346159922380\n * The reason I want this to exist is so that the windows don't have to worry about subscribing to and unsubscribing from events. This object will handle all event subscription/emission for the pubic and private window implementations.\n *\n * It will be capable of listening for remote events and triggering local events to match. It will handle router cleanup, and should narrow down the places that we have to look when an event isn't firing properly.\n *\n * Outside of the windowService, events can be listened for by simply calling:\n * finsembleWindow.addListener(event, handler);\n *\n * finsembleWindow.addListener will call finsembleWindow.WindowEventManager.listenForRemoteEvent();\n *\n * The private window implementations will use the proxyEventsForWindow method in order to distribute events to remote wraps.\n *\n * @interface WindowEventManager\n * @extends {EventEmitter}\n */\n\nexport declare interface WindowEventManager extends EventEmitter {\n\t//event list for the event emitter.\n\tlisteningFor: any[];\n\t/**\n\t * Array of events that we're subscribed to remotely. When receiving a remote event, the event manager will emit a local event.\n\t * @type {any}\n\t * @memberof WindowEventManager\n\t */\n\tremoteEventSubscriptions: any;\n\t//Window whose events are being managed\n\twindowName: string;\n\n\t/**\n\t * Disconnects all router listeners. Removes all listeners added to the event emitter.\n\t * @memberof WindowEventManager\n\t */\n\tcleanup(): void;\n\t/**\n\n\t* Returns router channel name for a given window event + window name combination.\n\t *\n\t * @param {WindowEventName} eventName\n\t * @returns {string}\n\t * @memberof WindowEventManager\n\t */\n\tgetChannelName(eventName: WindowEventName): string;\n\n\t/**\n\t * Single point of entry to the eventEmitter's `emit` method. This will be called when the router listener is fired in response to an event happening somewhere else in the system. Could also be triggered by an event fired from the underlying wrapper.\n\t *\n\t * @private\n\t * @param {WindowEventName} eventName\n\t * @param {WindowEvent | BoundsChangeEvent} data\n\t * @memberof WindowEventManager\n\t */\n\temitLocalEvent(eventName: WindowEventName, data: WindowEvent | BoundsChangeEvent): void;\n\n\t/**\n\t * Adds a router listener for remote events if we are not already listening for that event. If the optional handler is passed in, will add a local event listener to be triggered the next time the event fires.\n\t *\n\t * @param {WindowEventName} eventName\n\t * @param {Function} [handler]\n\t * @memberof WindowEventManager\n\t */\n\tlistenForRemoteEvent(eventName: WindowEventName, handler?: Function): void;\n\n\t/**\n\t * Convenience function to allow wrap to receive multiple remote events. Dev would then need to add a handler for each event that they care about. May not be useful.\n\t *\n\t * @param {WindowEventName[]} eventList\n\t * @memberof WindowEventManager\n\t */\n\tlistenForRemoteEvents(eventList: WindowEventName[]): void;\n\n\t/**\n\t * Currently we cannot have a special routerClient for every object. So this method will keep track of channel/listener combinations so we can cleanup when the wrap calls cleanup.\n\t *\n\t * @param {*} eventName\n\t * @param {*} handler\n\t * @memberof WindowEventManager\n\t */\n\trememberRouterChannelForLaterRemoval(eventName: WindowEventName, handler?: Function): void;\n\n\t/**\n\t * Broadcasts an event to any event manager listening for this event.\n\t *\n\t * @param {WindowEventName} eventName\n\t * @param {WindowEvent | BoundsChangeEvent} data\n\t * @memberof WindowEventManager\n\t */\n\ttransmitRemoteEvent(eventName: WindowEventName, data: WindowEvent | BoundsChangeEvent): void;\n\n\t/**\n\t * Used by the window implementations in the window service. This method will emit an event up to the local process, and transmit an event out to the rest of the system.\n\t * @private\n\t * @param {WindowEventName[]} eventName\n\t * @param {WindowEvent | BoundsChangeEvent} data\n\t * @memberof WindowEventManager\n\t */\n\ttrigger(eventName: WindowEventName, data?: WindowEvent | BoundsChangeEvent): void;\n}\n\ndeclare type EventManagerConstructorParams = {\n\t//window name\n\tname: string;\n}\n\nexport class WindowEventManager extends EventEmitter implements WindowEventManager {\n\t/**\n\t* Array of events that we're subscribed to remotely. When receiving a remote event, the event manager will emit a local event.\n\t* @type {WindowEventName[]}\n\t* @memberof WindowEventManager\n\t*/\n\tconstructor(params: EventManagerConstructorParams) {\n\t\tsuper();\n\t\tthis.windowName = params.name;\n\t\tthis.remoteEventSubscriptions = {};\n\t\t//array of events we're listening for. to prevent multiple router listeners for the same event.\n\t\tthis.listeningFor = [];\n\t\tthis.setMaxListeners(25);\n\t}\n\t_addListener(event: string | symbol, listener: (...args: any[]) => void) {\n\t\tsuper.addListener(event, listener);\n\t}\n\t/**\n\t * Disconnects all router listeners. Removes all listeners added to the event emitter.\n\t * @memberof WindowEventManager\n\t */\n\tcleanup(): void {\n\t\tLogger.system.info(\"WindowEventManager.cleanup\", this.windowName);\n\t\t//removes listeners added to the event emitter.\n\t\tthis.removeAllListeners();\n\n\t\t//removes listeners added to the RouterClient.\n\t\tlet eventSubscriptions: Array<string> = Object.keys(this.remoteEventSubscriptions);\n\n\t\tLogger.system.info(\"WRAP CLOSE. WindowEventManager.cleanup. Removing router subscriptions\", this.windowName, eventSubscriptions);\n\n\t\teventSubscriptions.forEach(channelName => {\n\t\t\tlet handlers: Array<StandardCallback> = this.remoteEventSubscriptions[channelName];\n\t\t\thandlers.forEach(handler => {\n\t\t\t\tRouterClient.removeListener(channelName, handler);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Single point of entry to the eventEmitter's `emit` method. This will be called when the router listener is fired in response to an event happening somewhere else in the system. Could also be triggered by an event fired from the underlying wrapper.\n\t *\n\t * @private\n\t * @param {WindowEventName} eventName\n\t * @param {WindowEvent | BoundsChangeEvent} data\n\t * @memberof WindowEventManager\n\t */\n\temitLocalEvent(eventName: WindowEventName, data: WindowEvent | BoundsChangeEvent): void {\n\t\tLogger.system.info(\"WindowEventManager.emitLocalEvent. Emitting Event\", this.windowName, eventName, data);\n\t\tthis.emit(eventName, data);\n\t}\n\n\t/**\n\t * Returns router channel name for a given window event + window name combination.\n\t *\n\t * @param {WindowEventName} eventName\n\t * @returns {string}\n\t * @memberof WindowEventManager\n\t */\n\tgetChannelName(eventName: WindowEventName) {\n\t\treturn `WindowService-Event-${this.windowName}-${eventName}`;\n\t}\n\n\t/**\n\t * Adds a router listener for remote events if we are not already listening for that event. If the optional handler is passed in, will add a local event listener to be triggered the next time the event fires.\n\t *\n\t * @param {WindowEventName} eventName\n\t * @param {Function} [handler]\n\t * @memberof WindowEventManager\n\t */\n\tlistenForRemoteEvent(eventName: WindowEventName, handler?: Function): void {\n\t\tLogger.system.debug(\"WindowEventManager.listenForRemoteEvent\", this.windowName, eventName);\n\n\t\tlet channelName: string = this.getChannelName(eventName);\n\t\tconst remoteEventHandler = (err, response): void => {\n\t\t\tLogger.system.debug(\"WindowEventManager. Received remote event\", this.windowName, eventName);\n\t\t\tif (err) {\n\t\t\t\tthrow new Error(err);\n\t\t\t}\n\n\t\t\t//todo need to accommodate wrap-state-changed events in here...maybe?\n\t\t\tlet data: WindowEvent | BoundsChangeEvent = { eventName, name: this.windowName };\n\n\t\t\tif (eventName.includes(\"bounds\") || eventName.includes(\"parent\")) {\n\t\t\t\t//bounds events need to push out more data than just name/eventName. ...response.data will destructure the object and copy them into this new object.\n\t\t\t\tdata = {\n\t\t\t\t\teventName,\n\t\t\t\t\t...response.data\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!response.originatedHere()) {\n\t\t\t\tLogger.system.debug(\"WindowEventManager. Received remote event emitted\", this.windowName, eventName, data);\n\t\t\t\tthis.emitLocalEvent(eventName, data)\n\t\t\t}\n\t\t}\n\n\t\t//We only want one router listener per event. Otherwise, we'll emit the same event multiple times.\n\t\tif (!this.listeningFor.includes(eventName)) {\n\t\t\tthis.listeningFor.push(eventName);\n\t\t\tLogger.system.debug(\"WindowEventManager.listenForRemoteEvent. Adding listener to the router\", this.windowName, eventName);\n\t\t\t//When the remote event is triggered, emit an event locally.\n\t\t\tRouterClient.addListener(channelName, remoteEventHandler);\n\t\t\t//If a handler is passed in, listen locally for the event to be thrown.\n\t\t\tLogger.system.debug(\"WindowEventManager.listenForRemoteEvent. Handler included, adding listener to local event emitter\", this.windowName, eventName);\n\t\t\tthis.rememberRouterChannelForLaterRemoval(channelName, remoteEventHandler);\n\t\t}\n\t}\n\n\t/**\n\t * Convenience function to allow wrap to receive multiple remote events. Dev would then need to add a handler for each event that they care about. May not be useful.\n\t *\n\t * @param {WindowEventName[]} eventList\n\t * @memberof WindowEventManager\n\t */\n\tlistenForRemoteEvents(eventList: WindowEventName[]): void {\n\t\t//verbose because each event will be logged in listenForRemoteEvent.\n\t\tLogger.system.verbose(\"WindowEventManager.listenForRemoteEvents. Listen for remote events\", this.windowName, eventList);\n\t\teventList.forEach(eventName => {\n\t\t\tthis.listenForRemoteEvent(eventName);\n\t\t});\n\t}\n\n\t/**\n\t * Broadcasts an event to any event manager listening for this event.\n\t *\n\t * @param {WindowEventName} eventName\n\t * @param {WindowEvent | BoundsChangeEvent} data\n\t * @memberof WindowEventManager\n\t */\n\ttransmitRemoteEvent(eventName: WindowEventName, data: WindowEvent | BoundsChangeEvent): void {\n\t\tLogger.system.debug(\"WindowEventManager.transmitRemoteEvent. Transmitting event to public wrappers\", eventName, data);\n\t\tlet channelName: string = this.getChannelName(eventName);\n\t\tRouterClient.transmit(channelName, data, { suppressWarnings: true });\n\t}\n\n\t/**\n * Used by the window implementations in the window service. This method will emit an event up to the local process, and transmit an event out to the rest of the system.\n * @private\n * @param {WindowEventName[]} eventName\n * @param {WindowEvent | BoundsChangeEvent} data\n * @memberof WindowEventManager\n */\n\ttrigger(eventName: WindowEventName, data?: any): void {\n\t\tLogger.system.info(\"WindowEventManager.trigger. Event triggered. Event will be emitted locally and transmitted to public wrappers. Window Name\", this.windowName, \"Event name\", eventName, \"Event data\", data);\n\t\t//If we have data, annotate it. Otherwise, create a generic window event.\n\t\tif (data) {\n\t\t\tdata.name = this.windowName;\n\t\t\tdata.eventName = eventName;\n\t\t} else {\n\t\t\tdata = {\n\t\t\t\tname: this.windowName,\n\t\t\t\teventName: eventName\n\t\t\t}\n\t\t}\n\n\t\tthis.emitLocalEvent(eventName, data);\n\t\tthis.transmitRemoteEvent(eventName, data);\n\t};\n\n\t/**\n * Currently we cannot have a special routerClient for every object. So this method will keep track of channel/listener combinations so we can cleanup when the wrap calls cleanup.\n *\n * @param {*} eventName\n * @param {*} handler\n * @memberof WindowEventManager\n */\n\trememberRouterChannelForLaterRemoval(channelName: string, handler: Function): void {\n\t\tLogger.system.debug(\"WindowEventManager.rememberRouterChannelForLaterRemoval.\", channelName)\n\t\tif (!this.remoteEventSubscriptions[channelName]) {\n\t\t\tthis.remoteEventSubscriptions[channelName] = [];\n\t\t}\n\t\tthis.remoteEventSubscriptions[channelName].push(handler);\n\t};\n\n}\n\n\n\n// WEBPACK FOOTER //\n// src/common/window/WindowEventManager.ts","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.cloneDeep/index.js\n// module id = 49\n// module chunks = 0 2 3 4 6 7","import Logger from \"../../../clients/logger\";\n\nclass BoxMath {\n\tstatic isPointOnSegment(point, segment) {\n\t\t//y = mx + b;\n\t\t//Equation above transforms into this:\n\t\t//(y - y1)\t x - x1\n\t\t//-------- = --------\n\t\t//y2 - y1 \t x2 - x1\n\n\t\t//which is this:\n\t\t//(y - y1) * (x2 - x1) = (x - x1) * ( y2 - y1)\n\t\tvar x = point.x, y = point.y,\n\t\t\tx1 = segment.min.x, x2 = segment.max.x,\n\t\t\ty1 = segment.min.y, y2 = segment.max.y;\n\n\t\tvar isInBounds = (x >= x1 && x <= x2 && y >= y1 && y <= y2);\n\t\t//The equation above will tell us whether the point is on the line, assuming it has no start and end. This checks to see if the point is within the beginning and end of the segment. If not, it can't be on our segment.\n\t\tif (!isInBounds) {\n\t\t\treturn false;\n\t\t}\n\t\tvar isOnLine = (y - y1) * (x1 - x2) === (x - x1) * (y1 - y2);\n\t\treturn isOnLine;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} req {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getVertices(req) {\n\t\treturn [\n\t\t\t//top left\n\t\t\t{\n\t\t\t\tx: req.left,\n\t\t\t\ty: req.top,\n\t\t\t\tlabel: \"topLeft\",\n\t\t\t},\n\t\t\t//top right\n\t\t\t{\n\t\t\t\tx: req.right,\n\t\t\t\ty: req.top,\n\t\t\t\tlabel: \"topRight\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tx: req.right,\n\t\t\t\ty: req.bottom,\n\t\t\t\tlabel: \"bottomRight\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tx: req.left,\n\t\t\t\ty: req.bottom,\n\t\t\t\tlabel: \"bottomLeft\"\n\t\t\t}\n\t\t];\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} segment {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getVertexOnSegment(segment) {\n\t\tfor (let vertex in this.vertices) {\n\t\t\tif (BoxMath.isPointOnSegment(this.vertices[vertex], segment)) {\n\t\t\t\treturn vertex;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds     {description}\n\t* @param  {type} bufferSize {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getSnappingRegions(bounds, bufferSize = 0) {\n\t\tlet { left, top, right, bottom } = bounds;\n\t\tlet leftMinusBuffer = left - bufferSize,\n\t\t\tleftPlusBuffer = left + bufferSize,\n\t\t\ttopMinusBuffer = top - bufferSize,\n\t\t\ttopPlusBuffer = top + bufferSize,\n\t\t\trightMinusBuffer = right - bufferSize,\n\t\t\trightPlusBuffer = right + bufferSize,\n\t\t\tbottomPlusBuffer = bottom + bufferSize,\n\t\t\tbottomMinusBuffer = bottom - bufferSize;\n\t\treturn {\n\t\t\ttopLeft: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: topMinusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: leftPlusBuffer,\n\t\t\t\t\ty: top\n\t\t\t\t}\n\t\t\t},\n\t\t\ttopRight: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: rightMinusBuffer,\n\t\t\t\t\ty: topMinusBuffer\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: top\n\t\t\t\t}\n\t\t\t},\n\t\t\trightTop: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: right,\n\t\t\t\t\ty: top,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: topPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\trightBottom: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: right,\n\t\t\t\t\ty: bottomMinusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: bottom\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tbottomLeft: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: bottom\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: leftPlusBuffer,\n\t\t\t\t\ty: bottomPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\tbottomRight: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: rightMinusBuffer,\n\t\t\t\t\ty: bottom,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: bottomPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\tleftTop: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: top,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: left,\n\t\t\t\t\ty: topPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\tleftBottom: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: bottomMinusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: left,\n\t\t\t\t\ty: bottom\n\t\t\t\t}\n\t\t\t},\n\t\t\tleft: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: topMinusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: leftPlusBuffer,\n\t\t\t\t\ty: bottomPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\tbottom: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: leftMinusBuffer,\n\t\t\t\t\ty: bottom\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: bottomPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\tright: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: rightMinusBuffer,\n\t\t\t\t\ty: topPlusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: rightPlusBuffer,\n\t\t\t\t\ty: bottomPlusBuffer\n\t\t\t\t}\n\t\t\t},\n\t\t\ttop: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: left,\n\t\t\t\t\ty: topMinusBuffer,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: right,\n\t\t\t\t\ty: top\n\t\t\t\t}\n\t\t\t},\n\t\t\tinner: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: left,\n\t\t\t\t\ty: top,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: right,\n\t\t\t\t\ty: bottom\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getWindowBoundingBox(bounds) {\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: bounds.left,\n\t\t\t\ty: bounds.top\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: bounds.right,\n\t\t\t\ty: bounds.bottom\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic between(params) {\n\t\tvar min = params.min,\n\t\t\tmax = params.max,\n\t\t\tnum = params.num,\n\t\t\tinclusive = params.inclusive;\n\t\tif (inclusive) {\n\t\t\treturn num >= min && num <= max;\n\t\t}\n\t\treturn num > min && num < max;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} window1 {description}\n\t* @param  {type} window2 {description}\n\t* @return {type} {description}\n\t*/\n\tstatic intersectBoundingBoxes(window1, window2) {\n\t\tif (window1.max.x < window2.min.x) { return false; } // 1 is left of 2\n\t\tif (window1.min.x > window2.max.x) { return false; } // 1 is right of 2\n\t\tif (window1.max.y < window2.min.y) { return false; } // 1 is above 2\n\t\tif (window1.min.y > window2.max.y) { return false; } // 1 is below 2\n\t\treturn true; // boxes overlap\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} num {description}\n\t* @param  {type} pct {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getPct(num, pct) {\n\t\treturn pct * num;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} num {description}\n\t* @param  {type} pct {description}\n\t* @return {type} {description}\n\t*/\n\tstatic scaleProportionately(num, pct) {\n\t\treturn Math.floor(num + this.getPct(num, pct));\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} num1 {description}\n\t* @param  {type} num2 {description}\n\t* @return {type} {description}\n\t*/\n\tstatic getPercentChange(num1, num2) {\n\t\tvar pctChange = Math.abs(((num1 - num2) / (num1)));\n\t\tif (num2 < num1) {\n\t\t\tpctChange = - pctChange;\n\t\t}\n\t\treturn pctChange;\n\t}\n\n\t/**\n\t * Gets the area of the overlap between two rectangles.\n\t * @param {*} rect1\n\t * @param {*} rect2\n\t */\n\tstatic getOverlap(rect1, rect2) {\n\t\tlet x_overlap = Math.max(0, Math.min(rect1.right, rect2.right) - Math.max(rect1.left, rect2.left));\n\t\tlet y_overlap = Math.max(0, Math.min(rect1.bottom, rect2.bottom) - Math.max(rect1.top, rect2.top));\n\t\treturn x_overlap * y_overlap;\n\t}\n\n\t/**\n\t * Checks if point is in box (inclusive)\n\t * @param {*} point\n\t * @param {*} box\n\t */\n\tstatic isPointInBox(point, box) {\n\t\tif (point.left) point.x = point.left;\n\t\tif (point.top) point.y = point.top;\n\t\tif (!box.right) box.right = box.left + box.width;\n\t\tif (!box.bottom) box.bottom = box.top + box.height;\n\t\tif (point.x >= box.left && point.x <= box.right && point.y >= box.top && point.y <= box.bottom) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Clip A with B. return where the boxes don't intersect.\n\t * @param {DockableBox} rectA\n\t * @param {DockableBox} rectB\n\t *\n\t * @memberof BoxMath\n\t */\n\tstatic clipRect(rectA, rectB, edge) {\n\t\tlet clip = rectA;\n\t\tlet corners = this.getVertices(rectB);\n\t\t//This array will hold the corners of the clipping rectangle that are within the clipped rectangle's boundaries.\n\t\tlet cornersInBox = [];\n\t\tfor (let i = 0; i < corners.length; i++) {\n\t\t\tlet corner = corners[i];\n\t\t\tcorner.label = corner.label.toLowerCase();\n\t\t\t//The goal here is to detect which edges of the clipping box exists within the clipped box's boundaries - EXCLUDING the edges of the clipped box.\n\n\t\t\t/**\n\t\t\t * The A = B + C. In other words, it's our hole. B is the window that we're using to fill the hole.\n\t\t\t *\n\t\t\t\t\tIn this case, A and B share their top right and top left corners. ALl we care about here is the bottom left and bottom right of B.\n\t\t\t\t\tThe result of this function is C.\n\t\t\t \t\t+-------------------+\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|         B         |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t+-------------------+\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|         C         |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t|                   |\n\t\t\t\t\t+-------------------+\n\t\t\t * */\n\n\t\t\t//The block of code below kicks out any points on B that are corners on A.\n\t\t\tif (this.isPointInBox(corner, rectA)) {\n\t\t\t\tif (corner.label === \"bottomright\" && corner.y === rectA.bottom && corner.x === rectA.right) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (corner.label === \"bottomleft\" && corner.y === rectA.bottom && corner.x === rectA.left) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (corner.label === \"topleft\" && corner.x === rectA.left && corner.y === rectA.top) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (corner.label === \"topright\" && corner.x === rectA.right && corner.y === rectA.top) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcornersInBox.push(corner.label);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Going back to our example earlier. Remember, A is the larger box that encompasses B and C. In this case, only two corners are within A. (bottom left, bottom right).\n\t\t\t\t+-------------------+\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|         B         |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t+-------------------+\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|         C         |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t|                   |\n\t\t\t\t+-------------------+\n\t\t\t* */\n\t\tif (cornersInBox.length === 2) {\n\t\t\t//left edge is in box.\n\t\t\tif (cornersInBox.includes(\"topleft\") && cornersInBox.includes(\"bottomleft\")) {\n\t\t\t\tclip.right = rectB.left;\n\t\t\t} else if (cornersInBox.includes(\"topright\") && cornersInBox.includes(\"bottomright\")) {\n\t\t\t\tclip.left = rectB.right;\n\t\t\t} else {\n\t\t\t\tif (cornersInBox.includes(\"topleft\") && cornersInBox.includes(\"topright\")) {\n\t\t\t\t\tclip.bottom = rectB.top;\n\t\t\t\t} else if (cornersInBox.includes(\"bottomleft\") && cornersInBox.includes(\"bottomright\")) {\n\t\t\t\t\tclip.top = rectB.bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t/****\n\t\t\t* In this case, A is the wide horizontal box. B is the tall vertical box. Their bottom left corners align at point X.\n\t\t\t*  In this case, only one corner (bottom left of B) is within the bounds of A.\n\n\t\t\t\t\t\t    B\n\t\t\t        +------------------+\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t|                  |\n\t\t\t\t\t+---------------------------------------------------------------------+\n\t\t\t\t\t|                  |                                                  |\n\t\t\t\t\t|                  |                                                  |\n\t\t\t\t\t|                  |                                                  |\n\t\t\t\t\t|                  |                  CLIP                            |  A\n\t\t\t\t\t|                  |                                                  |\n\t\t\t\t\t|                  |                                                  |\n\t\t\t\t\t+------------------+--------------------------------------------------+\n\t\t\t\t   X\n\t\t\t */\n\n\t\t\tconst ISLEFTORRIGHT = edge === \"left\" || edge === \"right\";\n\t\t\tconst ISTOPORBOTTOM = edge === \"top\" || edge === \"bottom\";\n\t\t\tif (cornersInBox.includes(\"topleft\")) {\n\n\t\t\t\tif (ISTOPORBOTTOM) {\n\t\t\t\t\tclip.right = rectB.left;\n\t\t\t\t\tif (rectB.top > rectA.bottom) {\n\t\t\t\t\t\tclip.bottom = rectB.top;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclip.left = rectB.left;\n\t\t\t\t\tif (rectB.top < rectA.bottom) {\n\t\t\t\t\t\tclip.bottom = rectB.top;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (cornersInBox.includes(\"topright\")) {\n\t\t\t\tif (ISTOPORBOTTOM) {\n\t\t\t\t\tclip.left = rectB.right;\n\t\t\t\t\tif (rectB.top > rectA.bottom) {\n\t\t\t\t\t\tclip.bottom = rectB.top;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclip.right = rectB.right;\n\t\t\t\t\tif (rectB.top < rectA.bottom) {\n\t\t\t\t\t\tclip.bottom = rectB.top;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else if (cornersInBox.includes(\"bottomleft\")) {\n\n\n\t\t\t\tif (ISLEFTORRIGHT) {\n\t\t\t\t\tif (rectB.bottom > rectA.top) {\n\t\t\t\t\t\tclip.top = rectB.bottom;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclip.right = rectB.left;\n\t\t\t\t\tif (rectB.bottom < rectA.top) {\n\t\t\t\t\t\tclip.top = rectB.bottom;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (ISLEFTORRIGHT) {\n\t\t\t\t\tif (rectB.bottom > rectA.top) {\n\t\t\t\t\t\tclip.top = rectB.bottom;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclip.left = rectB.right;\n\t\t\t\t\tif (rectB.bottom < rectA.top) {\n\t\t\t\t\t\tclip.top = rectB.bottom;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tclip.width = clip.right - clip.left;\n\t\tclip.height = clip.bottom - clip.top;\n\t\treturn clip;\n\t}\n\n}\nexport default BoxMath;\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/boxMath.js","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n\nimport { _BaseClient } from \"./baseClient\";\nimport * as Util from \"../common/util\";\nimport Validate from \"../common/validate\";\nimport Logger from \"./logger\";\nimport { WORKSPACE } from \"../common/constants\";\nimport { Workspace } from \"../common/workspace\";\nimport { ActiveWorkspace } from \"../common/workspace\";\nimport { FinsembleWindowData } from \"../common/FinsembleWindowData\";\nimport { RouterResponse } from \"./IRouterClient\";\nimport { StateType, CompleteWindowState } from \"../common/windowStorageManager\";\n\n/**\n * @introduction\n * <h2>Workspace Client</h2>\n * ----------\n * The Workspace Client manages all calls to load, save, rename, and delete workspaces.\n *\n *\n * The Workspace Client uses the <code>windowIdentifier</code> parameter. <a href=\"tutorial-ComponentTypesAndWindowNames.html\">Learn more about them here</a>.\n *\n *\n * See the <a href=tutorial-Workspaces.html>Workspace tutorial</a> for an overview of using the Workspace Client.\n *\n * @hideConstructor true\n * @constructor\n * @summary You don't need to ever invoke the constructor. This is done for you when WindowClient is added to the FSBL object.\n */\nclass WorkspaceClient extends _BaseClient {\n\t/**\n\t\t* List of all workspaces within the application.\n\t\t* @type {Array.<Object>}\n\t\t*/\n\tworkspaces: Workspace[] = [];\n\t/**\n\t\t* Reference to the activeWorkspace object\n\t\t* @type {object}\n\t\t*/\n\tactiveWorkspace: ActiveWorkspace;\n\tworkspaceIsDirty: boolean;\n\n\tconstructor(params) {\n\t\tsuper(params);\n\t\tValidate.args(params, \"object=\") && params && (Validate.args2 as any)(\"params.onReady\", params.onReady, \"function=\");\n\t}\n\n\t// Helper function to handle response from service\n\tprivate _serviceResponseHandler(err, response, resolve, reject, cb = Function.prototype) {\n\t\tif (err) {\n\t\t\treject(new Error(err));\n\t\t\treturn cb(err);\n\t\t}\n\t\tif (!response) response = { data: null };\n\t\tresolve(response.data);\n\t\tcb(null, response.data);\n\t}\n\n\t/// CORE SAVE API - Currently Private. Eventually these will handle all saves. Workspace will just be a data provider.\n\t/**\n\t * Saves Data Globally to the Active Workspace (e.g. ComponentState, WindowList etc.)\n\t * @param {object} params\n\t * @param {string} params.field\n\t * @param {object} params.value\n\t * @param {FinsembleCallbackFunction} cb\n\t */\n\tprivate saveGlobalData(params, cb) {\n\t\tLogger.system.debug(\"WorkspaceClient.saveGlobalData\", params);\n\t\tconst saveGlobalDataPromiseResolver = (resolve, reject) => {\n\t\t\tthis.routerClient.query(WORKSPACE.API_CHANNELS.SAVE_GLOBAL_DATA, params, (err, response) => {\n\t\t\t\tthis._serviceResponseHandler(err, response, resolve, reject, cb);\n\t\t\t});\n\t\t}\n\t\treturn new Promise(saveGlobalDataPromiseResolver);\n\t}\n\n\t/**\n\t * Saves View Specific Data (e.g. ComponentState, WindowList etc.) to the Currently Active Workspace View or all Views\n\t * When a window state changes, on\n\t * @param {object} params\n\t * @param {string} params.field\n\t * @param {object} params.value\n\t * @param {boolean} params.saveToAllViews\n\t * @param {FinsembleCallbackFunction} cb\n\t */\n\tprivate saveViewData(params, cb) {\n\t\tLogger.system.debug(\"WorkspaceClient.saveViewData\", params);\n\t\tconst saveViewDataPromiseResolver = (resolve, reject) => {\n\t\t\tthis.routerClient.query(WORKSPACE.API_CHANNELS.SAVE_VIEW_DATA, params, (err, response) => {\n\t\t\t\tthis._serviceResponseHandler(err, response, resolve, reject, cb);\n\t\t\t});\n\t\t}\n\t\treturn new Promise(saveViewDataPromiseResolver);\n\t}\n\n\t// This is unnecessary. Window Service should call SaveGlobalData, saveViewData\n\t/**\n\t * Adds window to active workspace.\n\t * @private\n\t * @param {object} params\n\t * @param {string} params.name Window name\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t */\n\taddWindow(params: FinsembleWindowData, cb = Function.prototype) {\n\t\tValidate.args(params, \"object\", cb, \"function=\") && params && (Validate.args2 as any)(\"params.name\", params.name, \"string\");\n\t\tthis.routerClient.query(\"WorkspaceService.addWindow\", params, (err, response) => {\n\t\t\tLogger.system.log(`WORKSPACE LIFECYCLE: Window added:WorkspaceClient.addWindow: Name (${params.name})`);\n\t\t\tcb(err, response);\n\t\t});\n\t}\n\n\t/**\n\t * Removes window from active workspace.\n\t * @private\n\t * @param {object} params\n\t * @param {string} params.name Window name\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example <caption>This method removes a window from a workspace. It is rarely called by the developer. It is called when a window that is using the window manager is closed. That way, the next time the app is loaded, that window is not spawned.</caption>\n\t * FSBL.Clients.WorkspaceClient.removeWindow({ name:windowName }, function(err, response) {\n\t * \t//do something after removing the window.\n\t * });\n\t */\n\tremoveWindow(params: {\n\t\tname: string\n\t}, cb = Function.prototype) {\n\t\tValidate.args(params, \"object\", cb, \"function=\") && (Validate.args2 as any)(\"params.name\", params.name, \"string\");\n\t\tthis.routerClient.query(\"WorkspaceService.removeWindow\", params,\n\t\t\t(err, response) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn Logger.system.error(err);\n\t\t\t\t}\n\t\t\t\tLogger.system.log(`WORKSPACE LIFECYCLE:WorkspaceClient.removeWindow:Window removed: Name (${params.name})`);\n\t\t\t\tif (response) {\n\t\t\t\t\tcb(err, response.data);\n\t\t\t\t} else {\n\t\t\t\t\tcb(err, null);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t// Window Related Workspace Functions. Eventually these need to move to the Window Service\n\t/**\n\t * Auto arranges all windows on the user's screen.\n\t * @param {object} params Parameters\n\t * });\n\t * @param {string} params.monitor Same options as <a href=\"LauncherClient.html#showWindow\">LauncherClient.showWindow</a>. Default is monitor of calling window.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example\n\t * FSBL.Clients.WorkspaceClient.autoArrange(function(err, response) {\n\t * \t\t//do something after the auto-arrange, maybe make all of the windows flash or notify the user that their monitor is now tidy.\n\t * });\n\t */\n\tautoArrange(params: {\n\t\tmonitor?: string,\n\t\tmonitorDimensions?: any\n\t}, cb = Function.prototype) {\n\t\tValidate.args(params, \"object\", cb, \"function=\");\n\t\tparams = params ? params : {};\n\t\tUtil.getMyWindowIdentifier((myWindowIdentifier) => {\n\t\t\tFSBL.Clients.LauncherClient.getMonitorInfo({\n\t\t\t\twindowIdentifier: myWindowIdentifier\n\t\t\t}, (err, dimensions) => {\n\t\t\t\tparams.monitorDimensions = dimensions.unclaimedRect;\n\t\t\t\tparams.monitorDimensions.name = dimensions.name;\n\t\t\t\tthis.routerClient.query(\"DockingService.autoArrange\", params, cb);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Minimizes all windows.\n\t * @param {object} params\n\t * @param {string} \t[params.monitor=\"all\"] Same options as <a href=\"LauncherClient.html#showWindow\">LauncherClient.showWindow</a> except that \"all\" will work for all monitors. Defaults to all.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example\n\t * FSBL.Clients.WorkspaceClient.bringWindowsToFront();\n\t */\n\tminimizeAll(params?: {\n\t\tmonitor: string,\n\t\twindowIdentifier?: any\n\t}, cb = Function.prototype) {\n\t\tValidate.args(params, \"object\", cb, \"function=\");\n\t\tparams = params ? params : { monitor: \"all\" };\n\t\tUtil.getMyWindowIdentifier((myWindowIdentifier) => {\n\t\t\tif (!params.windowIdentifier) {\n\t\t\t\tparams.windowIdentifier = myWindowIdentifier;\n\t\t\t}\n\t\t\tthis.routerClient.query(\"WorkspaceService.minimizeAll\", params, cb);\n\t\t});\n\t}\n\n\t/**\n\t * Brings all windows to the front.\n\t * @param {object} params\n\t * @param {string} \tparams.monitor Same options as <a href=\"LauncherClient.html#showWindow\">LauncherClient.showWindow</a> except that \"all\" will work for all monitors. Defaults to the monitor for the current window.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example\n\t * FSBL.Clients.WorkspaceClient.bringWindowsToFront();\n\t */\n\tbringWindowsToFront(params?: {\n\t\tmonitor: string,\n\t\twindowIdentifier?: any\n\t}, cb = Function.prototype) {\n\t\tValidate.args(params, \"object\", cb, \"function=\");\n\t\tparams = params ? params : { monitor: \"all\" };\n\t\tUtil.getMyWindowIdentifier((myWindowIdentifier) => {\n\t\t\tif (!params.windowIdentifier) {\n\t\t\t\tparams.windowIdentifier = myWindowIdentifier;\n\t\t\t}\n\t\t\tthis.routerClient.query(\"WorkspaceService.bringWindowsToFront\", params, cb);\n\t\t});\n\t}\n\n\t/**\n\t * Gets the currently active workspace.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example <caption>This function is useful for setting the initial state of a menu or dialog. It is used in the toolbar component to set the initial state.</caption>\n\t *\n\t * FSBL.Clients.WorkspaceClient.getActiveWorkspace((err, response) => {\n\t * \t// do something with the response.\n\t * });\n\t */\n\tasync getActiveWorkspace(cb?: StandardCallback): Promise<{ data: Workspace }> {\n\t\tLogger.system.debug(\"WorkspaceClient.getActiveWorkspace\");\n\t\tconst result = (await this.routerClient.query(WORKSPACE.API_CHANNELS.GET_ACTIVE_WORKSPACE, {})).response;\n\t\tthis.activeWorkspace = result.data;\n\t\tif (result.data.err) {\n\t\t\tif (cb) cb(result.data.err);\n\t\t\tthrow new Error(result.data.err);\n\t\t}\n\n\t\tif (cb) cb(null, result);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns the list of saved workspaces.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example <caption>This function is useful for setting the initial state of a menu or dialog.</caption>\n\t *\n\t * FSBL.Clients.WorkspaceClient.getActiveWorkspace((err, response) => {\n\t * \t//setState is a React component method.\n\t * \tself.setState({\n\t * \t\tworkspaces: response\n\t * \t});\n\t * });\n\t */\n\tgetWorkspaces(cb?) {\n\t\tValidate.args(cb, \"function=\");\n\t\tLogger.system.debug(\"WorkspaceClient.getWorkspaces\");\n\t\tconst getWorkspacesPromiseResolver = (resolve, reject) => {\n\t\t\tthis.routerClient.query(WORKSPACE.API_CHANNELS.GET_WORKSPACES, {}, (err, response) => {\n\t\t\t\tthis._serviceResponseHandler(err, response, resolve, reject, cb);\n\t\t\t});\n\t\t}\n\t\treturn new Promise(getWorkspacesPromiseResolver);\n\t}\n\n\t/**\n\t * @private\n\t *\n\t * @param {*} params\n\t * @param {*} cb\n\t * @returns\n\t * @memberof WorkspaceClient\n\t */\n\tsetWorkspaceOrder(params, cb) {\n\t\tlet { workspaces } = params;\n\t\tValidate.args(cb, \"function\");\n\t\tLogger.system.debug(\"WorkspaceClient.setWorkspaceOrder\", params);\n\t\tconst setWorkspaceOrderPromiseResolver = (resolve, reject) => {\n\t\t\tthis.routerClient.query(WORKSPACE.API_CHANNELS.SET_WORKSPACE_ORDER, params.workspaces || params, (err, response) => {\n\t\t\t\tthis._serviceResponseHandler(err, response, resolve, reject, cb);\n\t\t\t});\n\t\t}\n\t\treturn new Promise(setWorkspaceOrderPromiseResolver);\n\t}\n\t//Backward Compatibility\n\tsetWorkspaces = this.setWorkspaceOrder;\n\n\t/**\n\t * Removes a workspace. Either the workspace object or its name must be provided.\n\t * @param {object} params\n\t * @param {Object} \tparams.workspace Workspace\n\t * @param {string} \tparams.workspace.name Workspace Name\n\t * @param {string} \tparams.name Workspace Name\n\t * @param {function} cb Callback to fire after 'Finsemble.WorkspaceService.update' is transmitted.\n\t * @example <caption>This function removes 'My Workspace' from the main menu and the default storage tied to the application.</caption>\n\t * FSBL.Clients.WorkspaceClient.remove({\n\t * \tname: 'My Workspace'\n\t * }, function(err, response) {\n\t * \t//You typically won't do anything here. If you'd like to do something when a workspace change happens, we suggest listening on the `Finsemble.WorkspaceService.update` channel.\n\t * });\n\t */\n\tremove(params: {\n\t\tworkspace?: { name: string },\n\t\tname?: string\n\t}, cb = Function.prototype) {\n\t\tValidate.args(params, \"object\", cb, \"function=\") && !(params.name || params.workspace) && (Validate.args2 as any)(\"params.name\", params.name, \"string\");\n\t\tLogger.system.debug(\"WorkspaceClient.remove\", params);\n\t\tconst removePromiseResolver = (resolve, reject) => {\n\t\t\tif (!params.name) {\n\t\t\t\tparams.name = params.workspace.name;\n\t\t\t\t// we dont need to send workspace objects over the router if not needed.\n\t\t\t\tdelete params.workspace;\n\t\t\t}\n\t\t\t// Cannot remove active workspace.\n\t\t\tif (params.name === this.activeWorkspace.name) {\n\t\t\t\tLogger.system.error(\"APPLICATION LIFECYCLE:  Cannot remove active workspace: WorkspaceClient.remove:attempt to remove active workspace name:\" + this.activeWorkspace.name);\n\t\t\t\tlet err = \"Cannot remove active workspace\";\n\t\t\t\treturn this._serviceResponseHandler(err, null, resolve, reject, cb);\n\t\t\t}\n\t\t\tthis.routerClient.query(WORKSPACE.API_CHANNELS.REMOVE, params, (err, response) => {\n\t\t\t\tthis._serviceResponseHandler(err, response, resolve, reject, cb);\n\t\t\t});\n\t\t}\n\t\treturn new Promise(removePromiseResolver);\n\t}\n\n\t/**\n\t * Renames the workspace with the provided name. Also removes all references in storage to the old workspace's name.\n\t * @param {object} params\n\t * @param {string} params.oldName Name of workspace to rename.\n\t * @param {string} params.newName What to rename the workspace to.\n\t * @param {boolean} params.removeOldWorkspace Whether to remove references to old workspace after renaming.\n\t * @param {boolean} params.overwriteExisting Whether to overwrite an existing workspace.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example <caption>This method is used to rename workspaces. It is used in the main Menu component.</caption>\n\t * FSBL.Clients.WorkspaceClient.rename({\n\t * \toldName: 'My Workspace',\n\t * \tnewName: 'The best workspace',\n\t * \tremoveOldWorkspace: true,\n\t * }, function(err, response) {\n\t * \t//Do something.\n\t * });\n\t */\n\trename(params: {\n\t\toldName: string,\n\t\tnewName: string,\n\t\tremoveOldWorkspace?: boolean,\n\t\toverwriteExisting?: boolean\n\t}, cb = Function.prototype) {\n\t\tValidate.args(params, \"object\", cb, \"function=\") && (Validate.args2 as any)(\"params.oldName\", params.oldName, \"string\", \"params.newName\", params.newName, \"string\");\n\t\tLogger.system.debug(\"WorkspaceClient.rename\", params);\n\t\tconst renamePromiseResolver = (resolve, reject) => {\n\t\t\tif (!params.overwriteExisting && this.workspaceExists(params.newName)) {\n\t\t\t\tlet err = \"Workspace Already Exists\";\n\t\t\t\treturn this._serviceResponseHandler(err, null, resolve, reject, cb);\n\t\t\t}\n\n\t\t\tthis.routerClient.query(WORKSPACE.API_CHANNELS.RENAME, params, (err, response) => {\n\t\t\t\tthis._serviceResponseHandler(err, response, resolve, reject, cb);\n\t\t\t});\n\t\t}\n\t\treturn new Promise(renamePromiseResolver);\n\t}\n\n\t/**\n\t * Makes a clone (i.e. copy) of the workspace.  The active workspace is not affected.\n\t * @private\n\t * @param {object} params\n\t * @param {string} params.name Name of workspace to clone.\n\t * @param {string} params.newName Name of workspace to clone.\n\t * @param {function} cb cb(err,response) with response set to the name of the cloned workspace if no error\n\t * @example <caption>This method is used to clone workspaces. </caption>\n\t * FSBL.Clients.WorkspaceClient.clone({\n\t * \tname: 'The best workspace'\n\t * }, function(err, response) {\n\t * \t//Do something.\n\t * });\n\t */\n\t// Keeping for backward compatibility\n\tclone(params: {\n\t\tname: string,\n\t\tnewName: string,\n\t\tremoveOldWorkspace?: boolean\n\t}, cb: Function = Function.prototype) {\n\t\tValidate.args(params, \"object\", cb, \"function=\") && (Validate.args2 as any)(\"params.name\", params.name, \"string\");\n\t\tdelete params.name;\n\t\tif (!params.newName) { params.newName = params.name + \"_clone\"; }\n\t\tparams.removeOldWorkspace = false;\n\t\treturn this.rename({\n\t\t\tremoveOldWorkspace: false,\n\t\t\tnewName: params.newName,\n\t\t\toldName: params.name\n\t\t}, cb);\n\t};\n\n\t/**\n\t * Saves the currently saved workspace. Changes to the <code>activeWorkspace</code> are made on every change automatically.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example <caption>This function persists the currently active workspace.</caption>\n\t * FSBL.Clients.WorkspaceClient.save(function(err, response) {\n\t * \t//Do something.\n\t * });\n\t */\n\tsave(cb = Function.prototype) {\n\t\tLogger.system.debug(\"WorkspaceClient.save\");\n\t\tconst savePromiseResolver = (resolve, reject) => {\n\t\t\tthis.routerClient.query(WORKSPACE.API_CHANNELS.SAVE, {}, (err, response) => {\n\t\t\t\tthis._serviceResponseHandler(err, response, resolve, reject, cb);\n\t\t\t});\n\t\t}\n\t\treturn new Promise(savePromiseResolver);\n\t}\n\n\t/**\n\t * Helper that tells us whether a workspace with this name exists.\n\t * @private\n\t */\n\tworkspaceExists(workspaceName) {\n\t\tValidate.args(workspaceName, \"string\");\n\t\tfor (var i = 0; i < this.workspaces.length; i++) {\n\t\t\tif (workspaceName === this.workspaces[i].name) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t *\n\t * Saves the currently active workspace with the provided name.\n\t * @param {object} params\n\t * @param {string} params.name The new name you want to save the workspace under.\n\t * @param {string} params.force Whether to overwrite a workspace already saved with the provided name.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example <caption>This function persists the currently active workspace with the provided name.</caption>\n\t * FSBL.Clients.WorkspaceClient.saveAs({\n\t * \tname: 'My Workspace',\n\t * }, function(err, response) {\n\t * \t//Do something.\n\t * });\n\t */\n\tsaveAs(params: {\n\t\tname?: string,\n\t\tforce: boolean\n\t}, cb = Function.prototype) {\n\t\tValidate.args(params, \"object\", cb, \"function=\") && (Validate.args2 as any)(\"params.name\", params.name, \"string\");\n\t\tLogger.system.debug(\"WorkspaceClient.saveAs\", params);\n\t\tconst saveAsPromiseResolver = (resolve, reject) => {\n\t\t\tif (!params.force && this.workspaceExists(params.name)) {\n\t\t\t\treturn this._serviceResponseHandler(\"Workspace Already Exists\", null, resolve, reject, cb);\n\t\t\t}\n\t\t\tthis.routerClient.query(WORKSPACE.API_CHANNELS.SAVE_AS, params, (err, response) => {\n\t\t\t\tthis._serviceResponseHandler(err, response, resolve, reject, cb);\n\t\t\t});\n\t\t}\n\t\treturn new Promise(saveAsPromiseResolver);\n\t}\n\n\t/**\n\t * Switches to a workspace.\n\t * @param {object} params\n\t * @param {string} \tparams.name The name of the workspace you want to switch to.\n\t * @param {function} cb The callback to be invoked after the method completes successfully.\n\t * @example <caption>This function loads the workspace 'My Workspace' from the storage tied to the application.</caption>\n\t * FSBL.Clients.WorkspaceClient.switchTo({\n\t * \tname: 'My Workspace',\n\t * }, function(err, response) {\n\t * \t//Do something.\n\t * });\n\t */\n\tasync switchTo(params: {\n\t\tname: string,\n\t}, cb = Function.prototype): Promise<{ data: Workspace }> {\n\t\tValidate.args(params, \"object\", cb, \"function\") && (Validate.args2 as any)(\"params.name\", params.name, \"string\");\n\t\tLogger.system.debug(\"WorkspaceClient.switchTo\", params);\n\t\tconst result = await this.routerClient.query(WORKSPACE.API_CHANNELS.SWITCH_TO, params);\n\t\tif (result.err) {\n\t\t\tcb(result.err, null);\n\t\t\tthrow new Error(result.err);\n\t\t}\n\t\tcb(result);\n\t\treturn result;\n\t}\n\n\t/**\n\t * @private\n\t * ALPHA - Subject to breaking change in coming minor releases.\n\t * Sets the stored state of a given window in the active workspace. `state` may include\n\t * keys for `windowData`, `componentState`, or both; the state of each key will be completely\n\t * overwritten by the provided state. If the update results in dirtying change, the active\n\t * workspace will be marked dirty (or, if autosave is on, persisted directly to storage).\n\t */\n\tasync _setWindowState(params: { windowName: string, state: Partial<CompleteWindowState> }): Promise<RouterResponse<boolean>> {\n\t\tLogger.system.debug(\"WorkspaceClient.setWindowData\", params);\n\t\treturn this.routerClient.query(WORKSPACE.API_CHANNELS.SET_WINDOW_STATE, params);\n\t}\n\n\t/**\n\t * @private\n\t * ALPHA - Subject to breaking change in coming minor releases.\n\t * Retrieves the given window from storage, retrieving the requested state variables\n\t * (`\"componentState\"` and/or `\"windowData\"`).\n\t */\n\tasync _getWindowState(params: { windowName: string, stateVars: StateType[] }): Promise<RouterResponse<Partial<CompleteWindowState>>> {\n\t\tLogger.system.debug(\"WorkspaceClient.getWindowData\", params);\n\t\treturn this.routerClient.query(WORKSPACE.API_CHANNELS.GET_WINDOW_STATE, params);\n\t}\n\n\t/**\n\t * Checks to see if the workspace is dirty, i.e., if its state has been changed since the last save. If it's already dirty, the window doesn't need to compare its state to the saved state.\n\t *\n\t * @param {Function} cb <code>cb(err,response)</code> with response set to true if dirty and false otherwise (when no error).\n\t *\n\t * @example <caption>This function will let you know if the <code>activeWorkspace</code> is dirty.</caption>\n\t * FSBL.Clients.WorkspaceClient.isWorkspaceDirty(function(err, response) {\n\t * \t\t//Do something like prompt the user if they'd like to save the currently loaded workspace before switching.\n\t * });\n\t */\n\tisWorkspaceDirty(cb) {\n\t\tValidate.args(cb, \"function\");\n\t\tLogger.system.debug(\"WorkspaceClient.isWorkspaceDirty\");\n\t\tconst isWorkspaceDirtyPromiseResolver = (resolve, reject) => {\n\t\t\tthis._serviceResponseHandler(null, { data: this.activeWorkspace.isDirty }, resolve, reject, cb);\n\t\t}\n\t\treturn new Promise(isWorkspaceDirtyPromiseResolver);\n\t}\n\n\t/**\n\t * Creates a new workspace, returning a promise for the final name of\n\t * the new workspace as a string. After creation, if \"switchAfterCreation\" is true,\n\t * the new workspace becomes the active workspace.\n\t *\n\t * If the requested name already exists, a new workspace will be created\n\t * with the form \"[name] (1)\" (or \"[name] (2)\", etc.)\n\t *\n\t * @param {String} workspaceName Name for new workspace.\n\t * @param {Object} params Optional params\n\t * @param {boolean} params.switchAfterCreation Whether to switch to the new workspace after creating it.\n\t * @param {Function} cb <code>cb(err,response)</code> With response, set to new workspace object if no error.\n\t * @example <caption>This function creates the workspace 'My Workspace'.</caption>\n\t * FSBL.Clients.WorkspaceClient.createWorkspace(function(err, response) {\n\t *\t\tif (!err) {}\n\t *\t\t\t//Do something like notify the user that the workspace has been created.\n\t *\t\t}\n\t * });\n\t */\n\tasync createWorkspace(workspaceName, params: {\n\t\tswitchAfterCreation?: boolean\n\t}, cb = (err, result: { workspaceName: string }) => { }): Promise<{ workspaceName: string }> {\n\t\tLogger.system.log(`WorkspaceClient: Creating Workspace Request for name \"${workspaceName}\"`)\n\t\tconst finalName: string = (await this.routerClient.query(\n\t\t\tWORKSPACE.API_CHANNELS.NEW_WORKSPACE,\n\t\t\t{ workspaceName })).response.data;\n\n\t\tif (params.switchAfterCreation !== false) {\n\t\t\tawait this.switchTo({ name: finalName });\n\t\t}\n\t\tconst result = { workspaceName: finalName }\n\t\tcb(null, result);\n\t\treturn result;\n\t}\n\t/**\n\t * @private\n\t */\n\tcreateNewWorkspace = this.createWorkspace; //Backward Compatibility\n\n\t/**\n\t * Gets a workspace definition in JSON form.\n\t *\n\t * @param {object} params\n\t * @param {string} params.workspaceName The name of the workspace you want to export.\n\t * @param {function} cb <code>callback(error, workspaceDefinition)</code>\n\t * @example <caption>FSBL.Clients.WorkspaceClient.export({'workspaceName:': 'linker'}, function(err, worskpaceDefinition) {\n\t *\n\t * //do something with the workspace definition\n\t * })'; </caption>\n\t */\n\texport(params: {\n\t\tworkspaceName: string\n\t}, cb) {\n\t\tValidate.args(params, \"object\", cb, \"function\") && (Validate.args2 as any)(\"params.workspaceName\", params.workspaceName, \"string\");\n\t\tLogger.system.debug(\"WorkspaceClient.export\", params);\n\t\tconst exportPromiseResolver = (resolve, reject) => {\n\t\t\tthis.routerClient.query(WORKSPACE.API_CHANNELS.EXPORT, params, (err, response) => {\n\t\t\t\tlet workspaceExport = {};\n\t\t\t\tworkspaceExport[params.workspaceName] = response.data;\n\t\t\t\tthis._serviceResponseHandler(err, { data: workspaceExport }, resolve, reject, cb);\n\t\t\t});\n\t\t}\n\t\treturn new Promise(exportPromiseResolver);\n\t}\n\tgetWorkspaceDefinition = this.export; //Backward Compatibility\n\n\t/**\n\t * Adds a workspace definition to the list of available workspaces.\n\t *\n\t * @param {object} params\n\t * @param {object} params.workspaceJSONDefinition JSON for workspace definition\n\t * @param {boolean} params.force Whether to overwrite any workspace of the same name that already exists\n\t * @param {function=} cb <code>cb(err)</code> where the operation was successful if !err; otherwise, err carries diagnostics\n\t *\n\t */\n\tasync import(params: {\n\t\tworkspaceJSONDefinition: Record<string, Workspace | string>,\n\t\tforce: boolean,\n\t}, cb?): Promise<Record<string, string>> {\n\t\tValidate.args(params, \"object\", cb, \"function=\") && (Validate.args2 as any)(\"params.workspaceJSONDefinition\", params.workspaceJSONDefinition, \"object\");\n\t\tLogger.system.debug(\"WorkspaceClient.import\", params);\n\t\tconst result: Record<string, string> = (await this.routerClient.query(WORKSPACE.API_CHANNELS.IMPORT, params)).response.data;\n\t\tif (result && result.err) {\n\t\t\tcb(result.err);\n\t\t\tthrow new Error(result.err)\n\t\t}\n\t\tif (cb) cb(null, result)\n\t\treturn result;\n\t}\n\taddWorkspaceDefinition = this.import; //Backward Compatibility\n\n\t/**\n\t * Saves one mor more template defintions in a selected file. Note the\n\t * end user is prompted to identify file location during this save\n\t * operation. The file can optionally be imported during config\n\t * initialization (see importConfig) although this requires administration\n\t * support on the configuration/server side. The file can also be read\n\t * using readWorkspaceTemplateFromConfigFile();\n\t *\n\t * @param {object} params\n\t * @param {object} params.workspaceTemplateDefinition legal template definition returned by either\n\t * getWorkspaceTemplateDefinition() or convertWorkspaceDefinitionToTemplate()\n\t * @private\n\t */\n\texportToFile(params: {\n\t\tworkspaceTemplateDefinition: any\n\t}) {\n\t\t// TODO: Make it possible to export both workspaces and templates.\n\t\tLogger.system.info(\"workspaceClient.saveWorkspaceTemplateToConfigFile\", params);\n\t\tValidate.args(params, \"object\") && (Validate.args2 as any)(\"params.workspaceTemplateDefinition\", params.workspaceTemplateDefinition, \"object\");\n\t\tvar workspaceTemplateDefinition = params.workspaceTemplateDefinition;\n\t\tif (typeof workspaceTemplateDefinition === \"object\") {\n\t\t\tvar templateName = Object.keys(workspaceTemplateDefinition)[0];\n\t\t\tif (templateName && workspaceTemplateDefinition[templateName].templateDefinitionFlag) { // confirm the object is a template definition\n\t\t\t\tvar exportConfig = { workspaceTemplates: workspaceTemplateDefinition };\n\t\t\t\tFSBL.ConfigUtils.promptAndSaveJSONToLocalFile(\"workspaceConfig-\" + templateName, exportConfig);\n\t\t\t} else {\n\t\t\t\tLogger.system.error(\"workspaceClient.saveWorkspaceTemplateToConfigFile. Input is not a legal template\");\n\t\t\t}\n\t\t} else {\n\t\t\tLogger.system.error(\"workspaceClient.saveWorkspaceTemplateToConfigFile: Input is not a legal object\");\n\t\t}\n\t}\n\tsaveWorkspaceTemplateToConfigFile = this.exportToFile;\n\n\t/**\n\t * Initializes listeners and sets default data on the WorkspaceClient object.\n\t * @private\n\t */\n\tasync start(cb) {\n\t\t/**\n\t\t * Initializes the workspace's state.\n\t\t */\n\n\t\tthis.routerClient.subscribe(\"Finsemble.WorkspaceService.update\", (err, response) => {\n\t\t\tLogger.system.debug(\"workspaceClient init subscribe response\", err, response);\n\t\t\tif (err) {\n\t\t\t\tLogger.system.error(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.activeWorkspace = response.data.activeWorkspace;\n\t\t\tthis.workspaces = response.data.workspaces;\n\t\t\tif (cb) {\n\t\t\t\tcb();\n\t\t\t}\n\t\t});\n\t}\n}\n\nvar workspaceClient = new WorkspaceClient({\n\tstartupDependencies: {\n\t\tservices: [\"workspaceService\"],\n\t\tclients: []\n\t},\n\tonReady: (cb) => {\n\t\tworkspaceClient.start(cb);\n\t},\n\tname: \"workspaceClient\"\n});\n\nexport default workspaceClient;\n\n\n\n// WEBPACK FOOTER //\n// src/clients/workspaceClient.ts","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.deepmerge = factory();\n    }\n}(this, function () {\n\nfunction isMergeableObject(val) {\n    var nonNullObject = val && typeof val === 'object'\n\n    return nonNullObject\n        && Object.prototype.toString.call(val) !== '[object RegExp]'\n        && Object.prototype.toString.call(val) !== '[object Date]'\n}\n\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {}\n}\n\nfunction cloneIfNecessary(value, optionsArgument) {\n    var clone = optionsArgument && optionsArgument.clone === true\n    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value\n}\n\nfunction defaultArrayMerge(target, source, optionsArgument) {\n    var destination = target.slice()\n    source.forEach(function(e, i) {\n        if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument)\n        } else if (isMergeableObject(e)) {\n            destination[i] = deepmerge(target[i], e, optionsArgument)\n        } else if (target.indexOf(e) === -1) {\n            destination.push(cloneIfNecessary(e, optionsArgument))\n        }\n    })\n    return destination\n}\n\nfunction mergeObject(target, source, optionsArgument) {\n    var destination = {}\n    if (isMergeableObject(target)) {\n        Object.keys(target).forEach(function (key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument)\n        })\n    }\n    Object.keys(source).forEach(function (key) {\n        if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument)\n        } else {\n            destination[key] = deepmerge(target[key], source[key], optionsArgument)\n        }\n    })\n    return destination\n}\n\nfunction deepmerge(target, source, optionsArgument) {\n    var array = Array.isArray(source);\n    var options = optionsArgument || { arrayMerge: defaultArrayMerge }\n    var arrayMerge = options.arrayMerge || defaultArrayMerge\n\n    if (array) {\n        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)\n    } else {\n        return mergeObject(target, source, optionsArgument)\n    }\n}\n\ndeepmerge.all = function deepmergeAll(array, optionsArgument) {\n    if (!Array.isArray(array) || array.length < 2) {\n        throw new Error('first argument should be an array with at least two elements')\n    }\n\n    // we are sure there are at least 2 values, so it is safe to have no initial value\n    return array.reduce(function(prev, next) {\n        return deepmerge(prev, next, optionsArgument)\n    })\n}\n\nreturn deepmerge\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/deepmerge/index.js\n// module id = 52\n// module chunks = 0 4 6 11","// GENERAL NOTES RELATED TO WRAPPER CLEANUP\n// \tTODO: only send events when there are listeners\n// \tToDO: fix name versus windowName\n// \tTODO: should not be any checks for window methods: e.g. if (this.win._updateOptions) -- should have everything in base class\n//\tTODO: LauncherService should not be looking at workspace service bounds to determine monitor to use (need an architecture solution here)\n// \tTODO: discuss BaseWindow.bindFunctions(this) (side note: I removed the extra bindings from the wrap)\n\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\nimport { EventEmitter } from \"events\";\nimport * as util from \"../../../common/util\";\nimport { isEqual as deepEqual } from \"lodash\";\nimport * as merge from \"deepmerge\";\nimport { WindowEventManager } from \"../../../common/window/WindowEventManager\";\nimport * as constants from \"../../../common/constants\"\nimport { FinsembleEvent } from \"../../../common/window/FinsembleEvent\";\nimport { System } from \"../../../common/system\";\nimport { WORKSPACE } from \"../../../common/constants\";\nimport { clone } from \"../../../common/disentangledUtils\";\ndeclare global {\n\tinterface Window {\n\t\t_FSBLCache: any;\n\t}\n}\n\n//This is bad. I don't like it. But without this, the typescript compiler complains. Our clients are just functions that 'inherit' via BaseClient.call. Typescript isn't smart enough to infer the BaseClient's methods, so if you call StorageClient.initialize, it complains.\n//This will go away as we move those things into proper classes.\nimport DistributedStoreClient from \"../../../clients/distributedStoreClient\";\nimport StorageClient from \"../../../clients/storageClient\";\nimport WorkspaceClient from \"../../../clients/workspaceClient\";\nDistributedStoreClient.initialize();\nStorageClient.initialize();\nconst BOUNDS_SET = \"bounds-set\";\nconst BOUNDS_CHANGING = \"bounds-change-request\";\nconst BOUNDS_CHANGED = \"disabled-frame-bounds-changed\";\nif (!window._FSBLCache) window._FSBLCache = {\n\tstoreClientReady: false,\n\twindowStore: null,\n\twindows: {},\n\tgettingWindow: [],\n\twindowAttempts: {}\n};\nexport type componentMutateParams = {\n\t/** Field to save. */\n\tfield?: string,\n\t/** Fields to save. */\n\tfields?: { field: string }[],\n\t/** Key to store the data under. */\n\tkey?: string,\n\t/** Whether the data is componentState or windowState. */\n\tstateVar?: \"componentState\" | \"windowState\",\n\t/** Topic that the data is stored under. */\n\ttopic?: string,\n\t/** Value to save. */\n\tvalue?: any\n};\nexport class BaseWindow extends EventEmitter {\n\tGroup: any;\n\tcomponentState: any;\n\twrapState: WrapState;\n\tname: string;\n\twindowOptions: any;\n\tbounds: object;\n\twrapStateChangeSubscription: any;\n\tWINDOWSTATE: any;\n\tparentWindow: any;\n\twindowKey: string;\n\tcomponentKey: string;\n\tTITLE_CHANGED_CHANNEL: string;\n\tTITLE_CHANGED_SUBSCRIPTION: any;\n\twindowState: number;\n\tidentifier: WindowIdentifier;\n\twindowName: string;\n\ttype: string;\n\twindowType: string;\n\tsetWindowType: string;\n\ttypes: any;\n\tremoveListeners?: Function;\n\tparentSubscribeID: any;\n\teventManager: WindowEventManager;\n\teventlistenerHandlerMap: object = {}\n\tguid: \"string\";\n\tdockedPosition: number;\n\tenableWindowsAeroSnap: boolean;\n\tfinishedMove: boolean;\n\tisMaximizing: boolean;\n\n\tconstructor(params) {\n\t\tsuper();\n\t\tthis.types = {};\n\t\tthis.guid = util.guuid();\n\t\t//todo settle on a proper name for this property.\n\t\tthis.wrapState = \"initializing\";\n\t\tthis.componentState = {};\n\t\tthis.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\tthis.type = null;\n\t\tthis.windowType = null;\n\t\tthis.windowOptions = {};\n\t\tthis.bounds = {};\n\t\tthis.name;\n\t\tthis.windowOptions = {};\n\t\tthis.enableWindowsAeroSnap = false;\n\t\t//because we were doing this[i]=params[i] in the constructor jscrambler was creating a reference to \"this\" above _super_, causing everything to break and it made me cry.\n\t\tthis.doConstruction(params);\n\t\tthis.TITLE_CHANGED_CHANNEL = \"Finsemble.\" + this.name + \".titleChanged\";\n\t\tthis.componentKey = util.camelCase(\"activeWorkspace\", this.name, this.name);\n\t\tthis.windowKey = util.camelCase(\"activeWorkspace\", this.name);\n\n\t\tBaseWindow.bindFunctions(this);\n\t\tthis.wrapStateChangeSubscription = RouterClient.subscribe(\"Finsemble.Component.State.\" + this.name, this.handleWrapStateChange);\n\t\tthis.eventManager = new WindowEventManager({ name: this.name });\n\t\tthis.finishedMove = true;\n\t\t// Prevents duplicate calls to maximize from corrupting the window state for OpenfinWindow and stackedWindow implementations\n\t\tthis.isMaximizing = false;\n\t}\n\n\tpublic static WINDOWSTATE = constants.WINDOWSTATE;\n\twindowServiceChannelName(channelTopic) { let name = this.name || this.windowName; return `WindowService-Request-${channelTopic}`; }\n\teventChannelName(channelTopic) { let name = this.name || this.windowName; return `WindowService-Event-${name}-${channelTopic}`; }\n\n\tlistenForBoundsSet() {\n\t\tthis.eventManager.addListener(\"bounds-change-start\", this.handleBoundsSet);\n\t\tthis.eventManager.addListener(\"bounds-changing\", this.handleBoundsSet);\n\t\tthis.eventManager.addListener(\"bounds-change-end\", this.handleBoundsSet);\n\t}\n\n\tlistenForBoundsChanging() {\n\t\t//todo, need to switch from bounds-change-request into bounds-changing.\n\t\tRouterClient.addListener(this.eventChannelName(BOUNDS_CHANGING), this.handleBoundsChanging);\n\t}\n\n\tgetWindowStore(cb) {\n\t\tif (window._FSBLCache.windowStore) {\n\t\t\treturn cb(window._FSBLCache.windowStore);\n\t\t}\n\t\tDistributedStoreClient.createStore({ store: \"Finsemble-Windows\", global: true }, (err, store) => {\n\t\t\twindow._FSBLCache.windowStore = store;\n\t\t\tcb(store);\n\t\t});\n\t}\n\n\t_startMove() {\n\t\twindow[\"aeroMode\"] = false;\n\t\tthis.finishedMove = false;\n\t}\n\n\t_stopMove(markDirty = true) {\n\t\tthis.finishedMove = true;\n\t}\n\n\tdoConstruction(params) {\n\t\t//TODO this is the same as wrap (eventually this should spawn)\n\t\tif (!params.setWindowType && !params.windowType) { //Default WindowType\n\t\t\tparams.windowType = \"OpenFinWindow\";\n\t\t}\n\t\tif (params.windowType) { //We need to make a specific kind of Window\n\t\t\tparams.setWindowType = params.windowType;\n\t\t\tdelete params.windowType; //Prevent infinite loop\n\t\t\tlet BW = BaseWindow as any; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the BaseWindow here is of type any -- basically don't worry about its type.\n\n\t\t\tconst childClassObject = new BW.types[params.setWindowType](params);\n\t\t\t//childClassObject.windowType = windowType;\n\t\t\treturn childClassObject;\n\t\t}  //We are a specific kind of window\n\t\tif (params) {\n\t\t\tfor (let i in params) {\n\t\t\t\tthis[i] = params[i];\n\t\t\t}\n\t\t}\n\t\tif (!this.name) this.name = params.windowName;\n\t\tthis.windowType = this.setWindowType;\n\n\t}\n\n\tstatic registerType(name, type) {\n\t\tlet BW = BaseWindow as any; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the BaseWindow here is of type any -- basically don't worry about its type.\n\n\t\tif (!BW.types) {\n\t\t\tBW.types = {};\n\t\t}\n\t\tBW.types[name] = type;\n\t}\n\n\t/**\n\t * This is used to bind all functions only in BaseWindow and not in the child wrappers to the wrappers. Without this binding, the value of \"this\" in the functions is wrong.\n\t * @param {} obj\n\t */\n\tstatic bindFunctions(obj) {\n\t\tobj.setParent = obj.setParent.bind(obj);\n\t\tobj.getParent = obj.getParent.bind(obj);\n\t\tobj.eventChannelName = obj.eventChannelName.bind(obj);\n\t\tobj.windowServiceChannelName = obj.windowServiceChannelName.bind(obj);\n\t\tobj.handleBoundsSet = obj.handleBoundsSet.bind(obj);\n\t\tobj.handleBoundsChanging = obj.handleBoundsChanging.bind(obj);\n\t\tobj.handleWindowHidden = obj.handleWindowHidden.bind(obj);\n\t\tobj.handleWindowShown = obj.handleWindowShown.bind(obj);\n\t\tobj.handleWindowMax = obj.handleWindowMax.bind(obj);\n\t\tobj.handleWindowMin = obj.handleWindowMin.bind(obj);\n\t\tobj.handleWindowRestore = obj.handleWindowRestore.bind(obj);\n\t\tobj.setupListeners = obj.setupListeners.bind(obj);\n\t\tobj.handleWindowBTF = obj.handleWindowBTF.bind(obj);\n\t\tobj.handleWindowStartMove = obj.handleWindowStartMove.bind(obj);\n\t\tobj.handleWindowStopMove = obj.handleWindowStopMove.bind(obj);\n\t\tobj.handleWindowDisabledFrameBoundsChanged = obj.handleWindowDisabledFrameBoundsChanged.bind(obj);\n\t\tobj.handleWindowStateChange = obj.handleWindowStateChange.bind(obj);\n\t\tobj.onTitleChanged = obj.onTitleChanged.bind(obj);\n\t\tobj.handleWrapRemoveRequest = obj.handleWrapRemoveRequest.bind(obj);\n\t\tobj.listenForBoundsChanging = obj.listenForBoundsChanging.bind(obj);\n\t\tobj._eventHandled = obj._eventHandled.bind(obj);\n\t}\n\n\t// set up this window's listeners\n\tsetupListeners(name) {\n\t\tLogger.system.debug(\"BaseWindow parent change notification setup\", name);\n\n\t\tthis.parentSubscribeID = RouterClient.subscribe(`Finsemble.parentChange.${name}`, (err, message) => {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.error(\"BaseWindow parent change notification error\", err);\n\t\t\t} else {\n\t\t\t\tconst parentState = message.data || {};\n\n\t\t\t\tif (parentState.type == \"Added\") {\n\t\t\t\t\tLogger.system.debug(\"BaseWindow Parent Notification: window.addedToStack listener\", parentState);\n\t\t\t\t\tthis.setParent(parentState.stackedWindowIdentifier);\n\t\t\t\t} else if (parentState.type == \"Removed\") {\n\t\t\t\t\tLogger.system.debug(\"BaseWindow Parent Notification: window.removedFromStack listener\", parentState);\n\t\t\t\t\tthis.clearParent();\n\t\t\t\t} else if (parentState.type === \"Exists\") { // Do nothing\n\t\t\t\t} else if (parentState.type) { // if defined but unknown type\n\t\t\t\t\tLogger.system.error(\"BaseWindow Parent Notification: unknown type\", parentState);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.TITLE_CHANGED_SUBSCRIPTION = RouterClient.subscribe(this.TITLE_CHANGED_CHANNEL, this.onTitleChanged);\n\t}\n\n\tonTitleChanged(err, response) {\n\t\tif (!response || !response.data || typeof response.data !== \"string\") return;\n\t\tthis.windowOptions.title = response.data;\n\t\tthis.emit(\"title-changed\", {\n\t\t\tname: this.name,\n\t\t\ttitle: response.data\n\t\t});\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// The window wrappers\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t/**\n\t * Async wrap. Given a name/windowName, it will query the launcher for information required to wrap the window. Then it will return an object that can be operated on. Also this creates a cache of all wrapped windows for performance. Our clients wrap the same window often and this was causing excessive messaging to the store and degrading performance.\n\t * @param {*} params Need only name in most cases. For service and other cases where the window is not part of what the launcher considers active windows, name and uuid are required\n\t * @param {*} cb\n\t */\n\tstatic wrap = BaseWindow.getInstance;\n\tstatic getInstance(params, cb = Function.prototype) { // new async wrap\n\t\tlet myName = System.Window.getCurrent().name;\n\n\t\tif (params && params.windowName) {\n\t\t\tparams.name = params.windowName;\n\t\t}\n\n\t\tif (!params || !params.name) {\n\t\t\treturn cb(\"name is required\");\n\t\t}\n\n\t\tparams.windowName = params.name;\n\n\t\tasync function promiseResolver(resolve, reject) {\n\t\t\tif (params.waitForReady !== false) {\n\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:WAIT FOR READY\", params.name);\n\t\t\t\tawait BaseWindow._windowReady(params.windowName); // wait to insure the window is fully ready in the window service\n\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:WAIT DONE -- READY\", params.name);\n\t\t\t}\n\n\t\t\t//Return early if we already have the wrap cached.\n\t\t\tif (window._FSBLCache.windows[params.name]) {\n\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:\", params.name, \"Window found in the cache, returning without going to the Launcher\");\n\t\t\t\tlet wrap = window._FSBLCache.windows[params.name];\n\t\t\t\tresolve({ wrap })\n\t\t\t\treturn cb(null, wrap);\n\t\t\t}\n\n\t\t\t//If we already have all of the information, just call createWrap. (Temporary code to cover services including FSBL.windowClient.)\n\t\t\tif ((params.name.toLowerCase().includes(\"finsemble\") || params.name.toLowerCase().includes(\"service\")) && params.uuid && params.name) {\n\t\t\t\tif (!params.windowIdentifier) {\n\t\t\t\t\tparams.windowIdentifier = {\n\t\t\t\t\t\tuuid: params.uuid,\n\t\t\t\t\t\tname: params.name,\n\t\t\t\t\t\twindowName: params.name,\n\t\t\t\t\t\twindowType: params.windowType\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:\", params.name, \"All information for wrap passed in, creating wrap locally\");\n\t\t\t\tlet { wrap } = await BaseWindow._createWrap(params);\n\n\t\t\t\t//@exit\n\t\t\t\tresolve({ wrap });\n\t\t\t\treturn cb(null, wrap);\n\t\t\t}\n\n\n\t\t\t//All we have is a windowName. we send a request to the launcher for more information so that we can construct the proper object. This also the place where\n\t\t\tRouterClient.query(`WindowService-Request-getWindowIdentifier`, { windowName: params.name, requester: myName }, onWrapInformationReceived);\n\n\t\t\tasync function onWrapInformationReceived(err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.error(err);\n\t\t\t\t\t//@exit\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn cb(err, null);\n\t\t\t\t}\n\n\t\t\t\tif (window._FSBLCache.windows[params.name]) {\n\t\t\t\t\tlet wrap = window._FSBLCache.windows[params.name];\n\t\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:\", params.name, \"Information received from launcher, but wrap exists in cache. Returning cached wrap.\");\n\t\t\t\t\t//@exit\n\t\t\t\t\tresolve({ wrap })\n\t\t\t\t\treturn cb(null, wrap);\n\t\t\t\t}\n\n\t\t\t\tlet { identifier } = response.data;\n\t\t\t\tif (identifier.windowName) {\n\t\t\t\t\tidentifier.name = identifier.windowName;\n\t\t\t\t}\n\t\t\t\tLogger.system.debug(\"WRAP LIFECYCLE:\", params.name, \"Information received from launcher. Creating wrap.\");\n\n\t\t\t\tparams.retrievedIdentifier = identifier;\n\t\t\t\tlet { wrap } = await BaseWindow._createWrap(params);\n\n\t\t\t\t//@exit\n\t\t\t\tresolve({ wrap });\n\t\t\t\tcb(null, wrap);\n\t\t\t}\n\t\t}\n\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tstatic _createWrap(params): any {\n\t\tfunction promiseResolver(resolve, reject) {\n\t\t\tlet identifier = params.retrievedIdentifier || params.windowIdentifier;\n\t\t\tlet wrap: any = null;\n\t\t\tif (typeof window._FSBLCache.windowAttempts[params.name] === \"undefined\") window._FSBLCache.windowAttempts[params.name] = 0;\n\n\t\t\t//OpenfinApplication is essentially just an openfinWindow in its own process. We can wrap it just like a window.\n\t\t\tif (!params.setWindowType && !identifier.windowType || identifier.windowType === \"OpenFinApplication\") { //Default WindowType\n\t\t\t\tidentifier.windowType = \"OpenFinWindow\";\n\t\t\t}\n\n\t\t\t//Top level keeps important info (e.g., uuid, name, windowType).\n\t\t\tlet paramsForWindow = Object.assign({}, identifier);\n\t\t\t//Also pull in anything that was passed into the constructor (e.g., windowDescriptor, etc);\n\t\t\tparamsForWindow = Object.assign(paramsForWindow, params);\n\t\t\tparamsForWindow = Object.assign(paramsForWindow, identifier);\n\t\t\tparamsForWindow.setWindowType = paramsForWindow.windowType;\n\t\t\tdelete paramsForWindow.windowType; //Prevent infinite loop\n\n\t\t\tLogger.system.debug(\"WRAP LIFECYCLE: Placing wrap into the local cache.\", identifier.windowName);\n\t\t\tlet BW = BaseWindow as any; //have to do this because we're mutating the class using static functions and all kinds of bad stuff. This tells the typescript compiler that the BaseWindow here is of type any -- basically don't worry about its type.\n\t\t\tif (window._FSBLCache.windows.hasOwnProperty(identifier.windowName)) {\n\t\t\t\tLogger.system.error(\"DUPLICATE WRAPPER for\", identifier.windowName);\n\t\t\t} else {\n\t\t\t\twindow._FSBLCache.windows[identifier.windowName] = new BW.types[paramsForWindow.setWindowType](paramsForWindow);\n\t\t\t}\n\t\t\twrap = window._FSBLCache.windows[identifier.windowName]\n\t\t\twrap.windowType = identifier.windowType;\n\t\t\twrap.identifier = identifier;\n\t\t\t//BaseWindow.bindFunctions(win); // not needed -- handled in constructor\n\t\t\twrap.setupListeners(identifier.windowName);\n\t\t\tresolve({ wrap });\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tstatic _windowReady = function (windowName) {\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tif (windowName.toLowerCase().includes(\"finsemble\") || windowName.toLowerCase().includes(\"service\")) {\n\t\t\t\tresolve();\n\t\t\t} else { // wait only for components managed by the window service\n\t\t\t\tLogger.system.debug(`windowServiceReady: ${windowName} waiting`);\n\t\t\t\tlet subscribeId = RouterClient.subscribe(\"Finsemble.Component.State.\" + windowName, (err, response) => {\n\t\t\t\t\tlet state: WrapState = response.data.state;\n\t\t\t\t\tLogger.system.debug(`windowServiceReady: ${windowName} state change: ${state}`);\n\t\t\t\t\tswitch (state) {\n\t\t\t\t\t\tcase \"ready\": case \"reloading\": case \"closing\": // if ready state or any state beyond\n\t\t\t\t\t\t\tLogger.system.debug(`windowServiceReady: ${windowName} ${state}`);\n\t\t\t\t\t\t\tRouterClient.unsubscribe(subscribeId);\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tLogger.system.debug(`windowServiceReady default: ${windowName} ${state}`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t};\n\n\tstatic _getRemoveWrapChannel(name) {\n\t\treturn `${System.Window.getCurrent().name}.removeWrap.${name}`;\n\t}\n\n\thandleWrapRemoveRequest() {\n\t\t//wrap is the openfin or stacked window. if the removeListeners function exists, we remove all listeners we added during the lifecycle of that window wrapper.\n\t\tif (this.removeListeners) {\n\t\t\tthis.removeListeners();\n\t\t}\n\t\tif (this.removeAllListeners) { //removeAllListeners is built into event emitter.\n\t\t\tthis.removeAllListeners();\n\t\t}\n\n\t\tfor (let event in this.eventlistenerHandlerMap) {\n\t\t\tfor (let i = 0; i < this.eventlistenerHandlerMap[event].length; i++) {\n\t\t\t\tthis.eventlistenerHandlerMap[event][i].interceptor.removeAllListeners();\n\t\t\t}\n\t\t}\n\t\tthis.eventManager.cleanup();\n\t\tLogger.system.debug(\"WRAP CLOSE. Deleting cached wrap.\");\n\t\tdelete window._FSBLCache.windows[this.name];\n\t\tdelete window._FSBLCache.windowAttempts[this.name];\n\t\tthis.cleanupRouter();\n\t}\n\n\tcleanupRouter() {\n\t\tconst REMOVE_WRAP_CHANNEL = BaseWindow._getRemoveWrapChannel(this.name);\n\t\tRouterClient.removeResponder(REMOVE_WRAP_CHANNEL);\n\n\t\tif (this.TITLE_CHANGED_SUBSCRIPTION) {\n\t\t\tRouterClient.unsubscribe(this.TITLE_CHANGED_SUBSCRIPTION);\n\t\t}\n\t\tRouterClient.unsubscribe(this.wrapStateChangeSubscription);\n\t}\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Handlers to generate wrapper events from incoming transmits\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\thandleWrapStateChange = (err, response) => {\n\t\tlet state: WrapState = response.data.state;\n\t\t//closed gets emitted from the window. we don't want to emit a window closed event because the wrap state changed to closed.\n\t\tif (state && state !== this.wrapState && state !== \"closed\") {\n\t\t\tthis.wrapState = state;\n\t\t\tthis.eventManager.trigger(state as WindowEventName);\n\t\t\tthis.eventManager.trigger(\"wrap-state-changed\", { state });\n\t\t}\n\t}\n\n\tonReady(callback) {\n\t\tif (this.wrapState === \"ready\") {\n\t\t\treturn callback();\n\t\t}\n\t\tthis.eventManager.on(\"ready\", callback);\n\t}\n\n\thandleBoundsSet(err, response) {\n\t\tif (response.data && response.data.bounds) {\n\t\t\tthis.mergeBounds(response.data.bounds);\n\t\t}\n\t\tLogger.system.debug(`BaseWindow emitting bounds set for ${this.name}`, response.data);\n\t\tthis.emit(BOUNDS_SET, response.data);\n\t}\n\n\thandleBoundsChanging(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting bounds changing for ${this.name}`, response.data);\n\t\tthis.emit(BOUNDS_CHANGING, response.data);\n\t}\n\n\thandleWindowHidden(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting hidden for ${this.name}`, response.data);\n\t\tthis.emit(\"hidden\", this.windowName);\n\t}\n\n\thandleWindowShown(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting shown for ${this.name}`, response.data);\n\t\tthis.emit(\"shown\", this.windowName);\n\t}\n\n\thandleWindowBTF(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting BTF for ${this.name}`, response.data);\n\t\tthis.emit(\"bringToFront\", { name: this.name });\n\t}\n\n\thandleWindowMax(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting maximize for ${this.name}`, response.data);\n\t\tthis.windowState = this.WINDOWSTATE.MAXIMIZED;\n\t\tthis.emit(\"maximized\", { name: this.name });\n\t}\n\n\thandleWindowMin(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting min for ${this.name}`, response.data);\n\t\tthis.windowState = this.WINDOWSTATE.MINIMIZED;\n\t\tthis.emit(\"minimized\", { name: this.name });\n\t}\n\n\thandleWindowRestore(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting restore for ${this.name}`, response.data);\n\t\tthis.windowState = this.WINDOWSTATE.NORMAL;\n\t\tthis.emit(\"restored\", { name: this.name });\n\t}\n\n\thandleWindowStartMove(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting startmove for ${this.name}`, response.data);\n\t\tthis.emit(\"startedMoving\", { name: this.name });\n\t}\n\n\thandleWindowStopMove(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting stop move for ${this.name}`, response.data);\n\t\tthis.emit(\"stoppedMoving\", { name: this.name });\n\t}\n\n\thandleWindowDisabledFrameBoundsChanged(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting disabled-frame-bounds-changed for ${this.name}`, response.data);\n\t\tthis.emit(\"disabled-frame-bounds-changed\", { name: this.name });\n\t}\n\n\thandleWindowStateChange(err, response) {\n\t\tLogger.system.debug(`BaseWindow emitting window state change for ${this.name}`, response.data);\n\t\tthis.windowState = response.data;\n\t\tswitch (response.data) {\n\t\t\tcase this.WINDOWSTATE.MAXIMIZED:\n\t\t\t\tthis.emit(\"maximized\", { name: this.name });\n\t\t\t\tbreak;\n\t\t\tcase this.WINDOWSTATE.NORMAL:\n\t\t\t\tthis.emit(\"restored\", { name: this.name });\n\t\t\t\tbreak;\n\t\t\tcase this.WINDOWSTATE.MINIMIZED:\n\t\t\t\tthis.emit(\"minimized\", { name: this.name });\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Common template for window-function requests to window service -- see public functions\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t/**\n\t * @param {string} methodName method name (e.g. \"minimize\", \"maximize\")\n\t * @param {object} params\n\t * @param {function=} callback\n\t * @memberof FinsembleWindow\n\t * @private\n\t */\n\tqueryWindowService(methodName, params, callback = Function.prototype) {\n\t\tif (typeof params === \"function\") {\n\t\t\tcallback = params;\n\t\t\tparams = {};\n\t\t}\n\t\tparams = params || {};\n\t\tparams.windowIdentifier = this.identifier; // add this window's identifier\n\n\t\tLogger.system.debug(\"FinsembleWindow.queryWindowService\", this.windowServiceChannelName(methodName), params);\n\t\tconsole.debug(\"FinsembleWindow.queryWindowService\", this, this.windowServiceChannelName(methodName), params);\n\n\t\tlet responseData = null;\n\t\tRouterClient.query(this.windowServiceChannelName(methodName), params, (err, queryResponseMessage) => {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.warn(`WindowService.${methodName}: failed`, err);\n\t\t\t\tconsole.debug(`WindowService.${methodName}: failed`, err);\n\t\t\t} else {\n\t\t\t\tresponseData = queryResponseMessage.data;\n\t\t\t\tLogger.system.debug(`${this.windowServiceChannelName(methodName)} successful`, responseData);\n\t\t\t\tconsole.debug(`${this.windowServiceChannelName(methodName)} successful`, responseData);\n\t\t\t}\n\t\t\tif (callback) callback(err, responseData);\n\t\t});\n\t}\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Core Window Functions: can be invoked by any service or component.  Most are sent to the WindowService to be executed.\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t_eventHandled(interceptor, guid, canceled: boolean = false) {\n\t\tLogger.system.debug(\"FinsembleWindow._eventHandled private\", interceptor.event, this.identifier.windowName, guid, canceled);\n\t\tif (interceptor.delayable) RouterClient.publish(constants.EVENT_INTERRUPT_CHANNEL + \".\" + guid, { canceled: canceled });\n\t}\n\n\taddEventListener(eventName, handler) {\n\t\t// We send this guid so that Window service can keep track of individual listeners for event interruption.\n\t\tlet guid = Date.now() + \"_\" + Math.random();\n\t\t// Please do not comment this code out: This is how we create Interruptible events in the private wrappers.\n\t\tif (constants.INTERRUPTIBLE_EVENTS.includes(eventName)) {\n\t\t\tthis.queryWindowService(\"registerInterruptibleEvent\", { eventName: eventName, guid: guid });\n\t\t}\n\t\tlet delayable = constants.INTERRUPTIBLE_EVENTS.includes(eventName);\n\t\tlet cancelable = constants.INTERRUPTIBLE_EVENTS.includes(eventName);\n\t\tlet interceptor = new FinsembleEvent({\n\t\t\tsource: this,\n\t\t\tevent: eventName,\n\t\t\tdelayable: delayable,\n\t\t\tcancelable: cancelable\n\t\t});\n\n\t\tconst internalHandler = (data) => {\n\t\t\t// TODO: need to create event list with properties:\n\t\t\tinterceptor.setData(data);\n\t\t\thandler(interceptor); // this is where a handler can delay the event\n\t\t\tif (delayable && interceptor.delayed) { // if delayed, wait for done\n\t\t\t\tRouterClient.publish(constants.EVENT_INTERRUPT_CHANNEL + \".\" + guid, { delayed: true });\n\t\t\t\tinterceptor.addListener(\"done\", (response) => {\n\t\t\t\t\tthis._eventHandled(interceptor, guid, response.canceled)\n\t\t\t\t});\n\t\t\t} else { // if not delayed, it is done.\n\t\t\t\tthis._eventHandled(interceptor, guid);\n\t\t\t}\n\t\t};\n\t\tthis.eventManager.listenForRemoteEvent(eventName, handler);\n\t\tthis.eventManager.addListener(eventName, internalHandler);\n\n\t\tif (!this.eventlistenerHandlerMap[eventName]) {\n\t\t\tthis.eventlistenerHandlerMap[eventName] = [];\n\t\t}\n\n\t\tthis.eventlistenerHandlerMap[eventName].push({\n\t\t\thandler: handler,\n\t\t\tinternalHandler: internalHandler,\n\t\t\tinterceptor: interceptor,\n\t\t\tguid: guid\n\t\t});\n\n\t}\n\n\tremoveEventListener(eventName, handler) {\n\t\tif (!this.eventlistenerHandlerMap[eventName]) { // trying to remove non-existent handler.\n\t\t\tLogger.system.error(\"trying to remove non-existent handler\", eventName);\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = this.eventlistenerHandlerMap[eventName].length - 1; i >= 0; i--) {\n\t\t\tlet handlerStoredData = this.eventlistenerHandlerMap[eventName][i];\n\t\t\tif (handlerStoredData.handler === handler) {\n\t\t\t\tthis.eventManager.removeListener(eventName, handlerStoredData.internalHandler);\n\t\t\t\thandlerStoredData.interceptor.removeAllListeners();\n\t\t\t\tRouterClient.publish(constants.EVENT_INTERRUPT_CHANNEL + \".\" + this.name, { eventName: eventName, guid: handlerStoredData.guid, delayed: false, canceled: false });\n\t\t\t\tthis.eventlistenerHandlerMap[eventName].splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *Register a window with docking. Use this if you don't want to use the full initialization function\n\t *\n\t * @param {Object} params - can be anything that is passed to docking for window registration. @todo This should be removed soon\n\t * @param {Function} cb\n\t * @memberof FSBLWindow\n\t */\n\tregisterWithDocking(params, cb) {\n\t\tRouterClient.query(\"DockingService.registerWindow\", {\n\t\t\ttype: this.type,\n\t\t\twindowType: this.windowType,\n\t\t\twindowMsg: params,\n\t\t\tname: this.windowName\n\t\t}, cb);\n\t}\n\t/**\n\t *Unregister a window with docking\n\t *\n\t * @memberof FSBLWindow\n\t */\n\tunRegisterWithDocking() {\n\t\tRouterClient.transmit(\"DockingService.deregisterWindow\", { name: this.windowName });\n\t}\n\t/**\n\t *This is if we want to handle the full register/ready state inside of the window\n\t register with docking\n\t send the message to launcher saying that component is ready\n\t *\n\t * @memberof FSBLWindow\n\t */\n\tinitializeWindow(params, cb) {\n\t\tthis.registerWithDocking(params, () => {\n\t\t\tRouterClient.publish(\"Finsemble.\" + this.windowName + \".componentReady\", { // signal workspace and launcher service that component is ready\n\t\t\t\tname: this.windowName\n\t\t\t});\n\t\t});\n\t}\n\n\twrapReady() {\n\t\tRouterClient.publish(\"Finsemble.\" + this.windowName + \".wrapReady\", { name: this.windowName, state: \"open\" });\n\t}\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Core Private Window Functions: generally should only be directly invoked by the WindowService (an exception is _close)\n\t// Note: These private window functions can also optionally be invoked from the derived class definition.  See openfinWindowWrapper _minimize for example.\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow).  All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_minimize(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._minimize\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._minimize(params, (err, result) => {\n\t\t\t\tLogger.system.debug(\"BaseWindow._minimize parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_maximize(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._maximize\", params);\n\t\tparams = params || {};\n\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._maximize(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._maximize parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_restore(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._restore\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._restore(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._restore parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t_blur(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._blur\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._blur(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._blur parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_focus(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._focus\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._focus(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._focus parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_bringToFront(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._bringToFront\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._bringToFront(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._bringToFront parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_isShowing(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._isShowing\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._isShowing(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._isShowing parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_setBounds(params, cb = Function.prototype) {\n\t\tLogger.system.verbose(\"BaseWindow._setBounds\", params);\n\t\tparams = params || {};\n\t\tlet bounds = params.bounds;\n\t\t//Get the bounds that we have stored locally. If we have them, we compare later. If the bounds have changed, we emit the bounds-set method. Otherwise, we don't emit that event.\n\t\tlet cachedBounds = {};\n\t\tif (this.windowOptions && this.windowOptions.bounds) {\n\t\t\tcachedBounds = this.windowOptions.bounds;\n\t\t}\n\n\t\tthis.mergeBounds(bounds);//This happens twice...remove this\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._setBounds(params, function (err, result) {\n\t\t\t\tLogger.system.verbose(\"BaseWindow._setBounds parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_getBounds(params, cb) {\n\t\tLogger.system.verbose(\"BaseWindow._getBounds\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._getBounds(params, function (err, bounds) {\n\t\t\t\tLogger.system.verbose(\"BaseWindow._getBounds parent\", bounds);\n\t\t\t\tcb(err, bounds);  // shouldContinue not defined in return value, but implicitly false\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true }); // if should continue, bounds will be calculated by derived class\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_getBoundsFromSystem(params, cb) {\n\t\tLogger.system.debug(\"BaseWindow._getBoundsFromSystem\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._getBoundsFromSystem(params, function (err, bounds) {\n\t\t\t\tLogger.system.verbose(\"BaseWindow._getBoundsFromSystem parent\", bounds);\n\t\t\t\tcb(err, bounds);  // shouldContinue not defined in return value, but implicitly false\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true }); // if should continue, bounds will be calculated by derived class\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_updateOptions(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._updateOptions\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._updateOptions(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._updateOptions parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_hide(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._hide\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._hide(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._hide parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_show(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._show\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._show(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._show parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t//@todo fully document this function\n\t/**\n\t * Close\n\t * @param params\n\t * @param params.fromSystem Bool. If true, event bubbled up because of an alt+f4, task manager, etc. Something closed the window that wasn't Finsemble.\n\t * @param cb\n\t */\n\t_close(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"WRAP CLOSE. BaseWindow._close\", this.name, params);\n\t\tparams = params || {};\n\t\tconst parentWindow = this.parentWindow;\n\t\tif (params.fromSystem) {\n\t\t\t// If the close is initiated from a system close (i.e. close from the taskbar or using the hotkey) and we're closing a stacked window, close the entire stacked window.\n\t\t\t// Except for when a native window is part of that stack and the system close is initiated on the native window, in which case we only close the native window instead of the whole stack.\n\t\t\t// fromSystem is only set by the openfinWindowWrapper in _systemClosed. It is not set by other kinds of windows.\n\t\t\tif (parentWindow && parentWindow.componentType.toLowerCase() === \"stackedwindow\") {\n\t\t\t\tparams = {};\n\t\t\t\tparams.removeFromWorkspace = true;\n\t\t\t\tparams.fromSystem = true;\n\t\t\t\tparams.stackedWindowIdentifier = parentWindow.identifier;\n\t\t\t\tparentWindow.close(params, function (err, result) {\n\t\t\t\t\tLogger.system.debug(\"BaseWindow.close stacked window\", result);\n\t\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcb(null, { shouldContinue: true });\n\t\t\t}\n\t\t}\n\t\telse if (!params.invokedByParent && !params.ignoreParent && parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tparams.noDocking = true; // when removing from stacked window don't register child with docking\n\t\t\tparentWindow._removeWindow(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._close parent\", result);\n\t\t\t\tcb(err, { shouldContinue: true });\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_alwaysOnTop(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._alwaysOnTop\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._alwaysOnTop(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._alwaysOnTop parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_setOpacity(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._setOpacity\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._setOpacity(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._setOpacity parent\", result);\n\t\t\t\tcb(err, { shouldContinue: false });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\n\t// Private base window function optionally invoked by derived class (e.g. openFinWindowWrapper, FinsembleNativeWindow). All base function follow same template.\n\t// If parent defined then let parent decide appropriate functionality, including passing result back to caller specifying what to do next.\n\t_saveWindowOptions(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"BaseWindow._saveWindowOptions\", params);\n\t\tparams = params || {};\n\t\tif (!params.invokedByParent && this.parentWindow) {\n\t\t\t// if parent defined and not circular loop, invoke parent functionality.  Parent result passed back to caller\n\t\t\tparams.windowIdentifier = this.identifier; // add this window's identifier for parent invocation\n\t\t\tthis.parentWindow._saveWindowOptions(params, function (err, result) {\n\t\t\t\tLogger.system.debug(\"BaseWindow._saveWindowOptions parent\", result);\n\t\t\t\tcb(err, { shouldContinue: true });\n\t\t\t});\n\t\t} else {\n\t\t\tcb(null, { shouldContinue: true });\n\t\t}\n\t}\n\t_getOptions(params = null, cb = Function.prototype) {\n\t\t//todo get config or something.\n\t\treturn cb(null, {});\n\t}\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Other Baseclass Function: These are common functions shared across derived classes\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Invoked to indicate an operation (e.g. dragging out of tab region) has started. This signals the Docking service to start tracking the mouse location and invoking tiling behavior as needed. Typically inherited (base function only).\n\t * @param {object} params for future use\n\t *\n\t * @example\n\t *\t// dragging tab example using tracking and group\n\t * \tBaseWindow.startTabTileMonitoring();\n\t *\t// if dragging tab is in a group, then remove it given tracking results will decide what to do with the window\n\t * \tBaseWindow.Group.getGroupID(this.identifier, function (err, tileGroupId) {\n\t * \t\tif (!err) { // if no error then must be in a tile group\n\t *\t\t\tself.Group.removeWindow(this.identifier);\n\t *\t\t}\n\t *\t});\n\t */\n\tstartTabTileMonitoring(params) {\n\t\tLogger.system.debug(\"BaseWindow.startTabTileMonitoring\", params);\n\t\tRouterClient.transmit(\"TabTile.startTabTile\", { params });\n\t}\n\n\t/**\n\t * Invoked by client originating a dragStart that it has has ended. Typically inherited (base function only).\n\t * @param {object} params for future use\n\t\t * @param {function=} callback option callback that support overriding default behavior\n\t *\n\t * \tBaseWindow.stopTabTileMonitoring(params, function(err, results, defaultTabTileAction) {\n\t * \t\t// . . . custom code goes here . . .\n\t *\t\tdefaultTabTileAction(results); // now take default action or call your own function instead\n\t * \t});\n\t *\n\t */\n\tstopTabTileMonitoring(params, callback) {\n\t\tLogger.system.debug(\"BaseWindow.stopTabTileMonitoring\", params);\n\t\tRouterClient.query(\"TabTile.stopTabTile\", { params }, function (err, queryResponseMessage) {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.warn(\"TabTile.stopTabTile: query failed\", err);\n\t\t\t} else {\n\t\t\t\tLogger.system.debug(\"TabTile.stopTabTile results\", queryResponseMessage.data);\n\t\t\t}\n\t\t\tconst stopTabTileResults = queryResponseMessage.data;\n\t\t\tif (callback) {\n\t\t\t\tcallback(err, stopTabTileResults, this.defaultStopTrackingAction);\n\t\t\t} else {\n\t\t\t\tthis.defaultTabTileAction(stopTabTileResults);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Defines default TabTile action for stopTabTileMonitoring.  May be overwritten by client -- see example in stopTabTileMonitoring. Typically inherited (base function only).\n\t *\n\t * @param {any} stopTabTileResults\n\t * @memberof BaseWindow\n\t *\n\t * @private\n\t */\n\tdefaultTabTileAction(stopTabTileResults) {\n\t\tlet self = this;\n\t\tLogger.system.debug(\"BaseWindow.defaultTabTileAction\", stopTabTileResults);\n\t\tswitch (stopTabTileResults.stoppedLocation) {\n\t\t\tcase \"OutsideWindow\":\n\t\t\t\t// move window to drop location (since for now assuming only single-tabbed windows)\n\t\t\t\tbreak;\n\t\t\tcase \"TabSection\":\n\t\t\t\t// WindowStack.addWindowToStack(callback) // for when we get to tabbing\n\t\t\t\tbreak;\n\t\t\tcase \"InsideWindow\":\n\t\t\t\tif (stopTabTileResults.tileGroupId) { // if dropped in an existing tile group (which might be the same it was dragging from)\n\t\t\t\t\tself.Group.addWindow(this.identifier, stopTabTileResults.tileGroupId, stopTabTileResults.dropCoordinates);\n\t\t\t\t} else { // if dropped in a separate window outside a tile group\n\t\t\t\t\tself.Group.createGroup(function (newGroupId) {\n\t\t\t\t\t\t// add dragging window to new tile group, but specify the dropped on window as the starting window in the tile group\n\t\t\t\t\t\tself.Group.addWindow(this.identifier, newGroupId, stopTabTileResults.dropCoordinates, { startingWindowIdentifier: stopTabTileResults.droppedOnWindowIdentifier });\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tLogger.system.error(\"stopTracking returned an unknown stoppedLocation result\", stopTabTileResults);\n\t\t}\n\t}\n\n\tmergeBounds(bounds) {\n\t\tif (!bounds || !Number.isInteger(bounds.top)) {\n\t\t\tconsole.error(\"Invalid bounds\", bounds);\n\t\t\tLogger.system.warn(\"BaseWindow.mergeBounds Invalid bounds\", \"bounds=\", bounds);\n\t\t\treturn; //TODO: figure out how this is even possible\n\t\t}\n\n\t\t//Without rounding, openfin becomes sad at fractional pixels (caused issues with autoarrange).\n\t\tlet newBounds: WindowBounds = {\n\t\t\ttop: Math.round(bounds.top),\n\t\t\tleft: Math.round(bounds.left),\n\t\t\twidth: Math.round(bounds.width),\n\t\t\theight: Math.round(bounds.height)\n\t\t};\n\n\t\tnewBounds.bottom = newBounds.top + newBounds.height;\n\t\tnewBounds.right = newBounds.left + newBounds.width;\n\n\t\t//Old problem. Openfin uses these, we use the others. SAD!\n\t\tlet defaultBounds = {\n\t\t\tdefaultLeft: newBounds.left,\n\t\t\tdefaultWidth: newBounds.width,\n\t\t\tdefaultTop: newBounds.top,\n\t\t\tdefaultHeight: newBounds.height\n\t\t};\n\n\t\tObject.assign(this.windowOptions, newBounds);\n\t\tObject.assign(this.windowOptions, defaultBounds);\n\t\tthis.windowOptions.bounds = newBounds;\n\t}\n\n\tstartMove(params) {\n\t\tLogger.system.debug(\"BaseWindow.startMove\", params);\n\t\tparams = params || {};\n\t\tparams.windowIdentifier = this.identifier; // add this window's identifier\n\t\tthis.eventManager.trigger(\"bounds-change-start\", {\n\t\t\t...this.windowOptions.bounds\n\t\t});\n\t}\n\n\tstopMove(params) {\n\t\tLogger.system.debug(\"BaseWindow.stopMove\", params);\n\t\tparams = params || {};\n\t\tparams.windowIdentifier = this.identifier; // add this window's identifier\n\t\tthis.eventManager.trigger(\"bounds-change-end\", {\n\t\t\tname: this.name,\n\t\t\teventName: \"bounds-change-end\",\n\t\t\tdockedPosition: this.dockedPosition,\n\t\t\t...this.windowOptions.bounds\n\t\t});\n\t}\n\n\t/**\n\t * Given a field, this function retrieves component or window state. If no params are given you get the full state\n\t * @param {object} params\n\t * @param {string} params.stateVar A string containing \"componentState\" or \"windowState\"\n\t * @param {string} params.field field\n\t * @param {array} params.fields fields\n\t * @param {string} params.key The storage key for the window.\n\t * @param {function} cb Callback\n\t * @private\n\t **/\n\tasync getFSBLState(params: {\n\t\tstateVar: \"componentState\" | \"windowState\",\n\t\tfield?: string,\n\t\tfields?: string[],\n\t\tkey: string,\n\t}, cb: StandardCallback) {\n\t\tLogger.system.debug(\"BaseWindow.getState\", params);\n\n\t\tStorageClient.get({ topic: WORKSPACE.CACHE_STORAGE_TOPIC, key: params.key }, (err, response) => {\n\t\t\tif (params.stateVar === \"componentState\") {\n\t\t\t\tthis.componentState = response;\n\t\t\t} else if (params.stateVar === \"windowState\") {\n\t\t\t\tthis.windowState = response;\n\t\t\t}\n\n\t\t\tconst { field, fields } = params;\n\n\t\t\tif (response) {\n\t\t\t\tif (field) {\n\t\t\t\t\tcb(err, response[field]);\n\t\t\t\t} else if (fields) {\n\t\t\t\t\tconst respObject = {};\n\t\t\t\t\tfor (let i = 0; i < fields.length; i++) {\n\t\t\t\t\t\tif (response[fields[i]]) {\n\t\t\t\t\t\t\trespObject[fields[i]] = response[fields[i]];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn cb(null, respObject);\n\n\t\t\t\t} else {\n\t\t\t\t\treturn cb(null, response);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLogger.system.info(\"WindowClient:getComponentState:error, response, params\", err, response, params);\n\t\t\t\tcb(\"Not found\", response);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Given params, will return the component state. Either the params to search for, or the entire state.\n\t *\n\t * @param {object} params\n\t * @param {string} params.field field\n\t * @param {array} params.fields fields\n\t * @param {function} cb Callback\n\t */\n\tgetComponentState(params, cb) {\n\t\tif (!params) params = {};\n\t\tif (params.fields && !Array.isArray(params.fields)) { params.fields = [params.fields]; }\n\n\t\treturn this.getFSBLState({ ...params, key: this.componentKey, stateVar: \"componentState\" }, cb);\n\t}\n\n\t/**\n\t * Given params, will return the window state. Either the params to search for, or the entire state.\n\t *\n\t * @param {object} params\n\t * @param {string} params.field field\n\t *  @param {array} params.fields fields\n\t * @param {function} cb Callback\n\t */\n\tgetWindowState(params, cb) {\n\t\tif (!params) params = {};\n\t\tif (params.fields && !Array.isArray(params.fields)) { params.fields = [params.fields]; }\n\n\t\tparams.key = this.windowKey;\n\t\tparams.stateVar = \"windowState\";\n\n\t\treturn this.getFSBLState(params, cb);\n\t}\n\n\t/**\n\t * Given params, will set the component state. Any fields included will be added to the state\n\t *\n\t * @param {object} params\n\t * @param {string} params.field field\n\t *  @param {array} params.fields fields\n\t * @param {function} cb Callback\n\t */\n\tsetComponentState(params, cb = Function.prototype) {\n\t\tif (!params) params = {};\n\t\tif (params.fields && !Array.isArray(params.fields)) { params.fields = [params.fields]; }\n\n\t\treturn this.setFSBLState({ ...params, key: this.componentKey, stateVar: \"componentState\" }, cb);\n\t}\n\n\t/**\n\t * Removes one or more specified attributes from a component state in storage\n\t * for this window.\n\t *\n\t * In addition to the name of the window, params should include either a `field`\n\t * property as a string or a `fields` property as an array of strings.\n\t *\n\t * @param {object} params\n\t * @param {string} [params.field] field\n\t * @param {array} [params.fields] fields\n\t * @param {function} cb Callback\n\t */\n\tremoveComponentState(params?: componentMutateParams, cb: StandardCallback = (e, r) => { }) {\n\t\tif (!params) params = {};\n\t\tif (params.fields && !Array.isArray(params.fields)) { params.fields = [params.fields]; }\n\n\t\treturn this.removeFSBLState({ ...params, key: this.componentKey, stateVar: \"componentState\" }, cb);\n\t}\n\n\t/**\n\t * Given params, will set the window state. Any fields included will be added to the state\n\t *\n\t * @param {object} params\n\t * @param {string} params.field field\n\t *  @param {array} params.fields fields\n\t * @param {function} cb Callback\n\t */\n\tsetWindowState(params, cb) {\n\t\tif (!params) params = {};\n\t\tif (params.fields && !Array.isArray(params.fields)) { params.fields = [params.fields]; }\n\n\t\treturn this.setFSBLState({ ...params, key: this.windowKey, stateVar: \"windowState\" }, cb);\n\t}\n\n\tsaveWindowState(state) {\n\t\tthis.windowState = state;\n\t}\n\n\tsaveCompleteWindowState(state, cb?) {\n\t\tLogger.system.debug(\"COMPONENT LIFECYCLE:SAVING STATE:\", state.name);\n\t\tif (!state) return cb(\"No State Provided\");\n\t\tif (state.customData && state.customData.manifest) {\n\t\t\tdelete state.customData.manifest;\n\t\t}\n\n\t\tdelete state.callstack;\n\t\tdelete state.x;\n\t\tdelete state.y;\n\t\tdelete state.blurred;\n\t\tdelete state.permissions;\n\t\tdelete state.invokedByParent;\n\t\tdelete state.monitorDimensions;\n\t\tif (state.windowIdentifier) delete state.windowIdentifier.title;\n\n\n\t\tWorkspaceClient._setWindowState({\n\t\t\twindowName: this.windowName,\n\t\t\tstate: { windowData: state }\n\t\t}).then(() => {\n\t\t\tif (cb) cb();\n\t\t});\n\t}\n\n\tdeleteCompleteWindowState(cb) {\n\t\tLogger.system.debug(\"COMPONENT LIFECYCLE:REMOVING STATE:\", this.windowKey);\n\t\tlet params = {\n\t\t\ttopic: WORKSPACE.CACHE_STORAGE_TOPIC,\n\t\t\tkey: this.windowKey\n\t\t};\n\t\tStorageClient.delete(params, cb);\n\t}\n\n\t/**\n\t * Given a field, this function sets and persists app state.\n\t * @param {object} params\n\t * @param {string} [params.field] field\n\t * @param {array} [params.fields] fields\n\t * @param {function=} cb Callback\n\t **/\n\tsetFSBLState(params, cb) {\n\t\tconst getParams = {\n\t\t\tkey: params.key,\n\t\t\tstateVar: params.stateVar\n\t\t};\n\t\tif (!getParams.key) {\n\t\t\tif (getParams.stateVar === \"componentState\") {\n\t\t\t\tgetParams.key = this.componentKey;\n\t\t\t} else if (getParams.stateVar === \"windowState\") {\n\t\t\t\tgetParams.key = this.windowKey;\n\t\t\t}\n\t\t}\n\n\t\tthis.getFSBLState(getParams, () => {\n\t\t\t/* Sidd Notes: We are always comparing the entire saved state to see if things have changed instead of just the new fields - that is expensive. */\n\t\t\tLogger.system.debug(\"BaseWindow.getState\", params);\n\t\t\tparams.topic = WORKSPACE.CACHE_STORAGE_TOPIC;\n\t\t\tlet localComponentState = merge(this[params.stateVar], {});\n\t\t\tlet fields = params.fields;\n\n\t\t\tif (params.field) {\n\t\t\t\tfields = [{\n\t\t\t\t\tfield: params.field,\n\t\t\t\t\tvalue: params.value\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < fields.length; i++) {\n\t\t\t\tlet field = fields[i];\n\t\t\t\tif (!field.field || typeof field.value == \"undefined\") { continue; }\n\t\t\t\tlocalComponentState[field.field] = field.value;\n\t\t\t}\n\n\t\t\tparams.value = localComponentState;\n\t\t\tLogger.system.debug(\"COMPONENT LIFECYCLE: SAVING \" + params.stateVar + \":\", localComponentState);\n\n\t\t\tWorkspaceClient._setWindowState({\n\t\t\t\twindowName: this.windowName,\n\t\t\t\tstate: { [params.stateVar]: localComponentState }\n\t\t\t}).then(() => {\n\t\t\t\tthis[params.stateVar] = localComponentState;\n\t\t\t\tif (cb) cb();\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Removes one or more specified attributes from either component or window state in storage.\n\t *\n\t * In addition to the name of the window, params should include either a `field`\n\t * property as a string or a `fields` property as an array of strings.\n\t *\n\t * @param {object} params\n\t * @param {string} [params.field] field\n\t * @param {array} [params.fields] fields\n\t * @param {function=} cb Callback\n\t **/\n\tremoveFSBLState(params: componentMutateParams, cb: StandardCallback = (e, r) => { }) {\n\t\tconst getParams = {\n\t\t\tkey: params.key,\n\t\t\tstateVar: params.stateVar\n\t\t};\n\t\tif (!getParams.key) {\n\t\t\tif (getParams.stateVar === \"componentState\") {\n\t\t\t\tgetParams.key = this.componentKey;\n\t\t\t} else if (getParams.stateVar === \"windowState\") {\n\t\t\t\tgetParams.key = this.windowKey;\n\t\t\t}\n\t\t}\n\n\t\tthis.getFSBLState(getParams, () => {\n\t\t\t/* Sidd Notes: We are always comparing the entire saved state to see if things have changed instead of just the new fields - that is expensive. */\n\t\t\tLogger.system.debug(\"BaseWindow.getState\", params);\n\t\t\tparams.topic = WORKSPACE.CACHE_STORAGE_TOPIC;\n\t\t\t// deepmerge treats undefined as empty object\n\t\t\tlet localComponentState = merge(this[params.stateVar], {});\n\t\t\tlet fields = params.fields;\n\n\t\t\tif (params.field) {\n\t\t\t\tfields = [{\n\t\t\t\t\tfield: params.field\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < fields.length; i++) {\n\t\t\t\tlet field = fields[i];\n\t\t\t\tif (!field.field) { continue; }\n\t\t\t\tdelete localComponentState[field.field];\n\t\t\t}\n\n\t\t\tparams.value = localComponentState;\n\t\t\tLogger.system.debug(\"COMPONENT LIFECYCLE: SAVING \" + params.stateVar + \":\", localComponentState);\n\n\t\t\tStorageClient.save(params, (err, response) => {\n\t\t\t\tif (err) return cb(err);\n\t\t\t\tthis[params.stateVar] = localComponentState;\n\t\t\t\tif (cb) { cb(err, response); }\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t *Cancels startTabTileMonitoring. Example use is a user \"excapes\" out of a drag operation.\n\t *\n\t * @param {object} params for future use\n\t * @memberof BaseWindow\n\t */\n\tcancelTabTileMonitoring(params) {\n\t\tLogger.system.debug(\"BaseWindow.cancelTabTileMonitoring\", params);\n\t\tRouterClient.transmit(\"TabTile.cancelTabTile\", { params });\n\t}\n\n\t/**\n\t * Return the parent window's wrapper (e.g. StackedWindow).\n\t *\n\t */\n\tgetParent() {\n\t\treturn this.parentWindow;\n\t}\n\n\t/**\n\t * Sets the parent window (e.g. stackedWindow) and emits \"setParent\" event to window listeners.\n\t *\n\t * @param {object} stackedWindowIdentifier identifer of window to set as parent (e.g. stackedWindowIdentifier).\n\t *\n\t */\n\tsetParent(windowIdentifier, cb = Function.prototype) {\n\t\tif (this.parentWindow && (this.parentWindow.name === windowIdentifier.windowName)) {\n\t\t\tLogger.system.debug(\"BaseWindow.setParent already set\", windowIdentifier);\n\t\t\tcb(null, windowIdentifier);\n\t\t} else {\n\t\t\tLogger.system.debug(\"BaseWindow.setParent\", windowIdentifier);\n\t\t\t// set up store listener to change if\n\t\t\tBaseWindow.getInstance(windowIdentifier, (err, wrappedStackedWindow) => {\n\t\t\t\tif (!err) {\n\t\t\t\t\tLogger.system.debug(\"BaseWindow.setParent wrap success\", windowIdentifier);\n\t\t\t\t\tconsole.debug(\"BaseWindow.setParent wrap success\", this, wrappedStackedWindow);\n\t\t\t\t\tthis.parentWindow = wrappedStackedWindow;\n\t\t\t\t\tthis.eventManager.trigger(\"parent-set\", { parentName: this.parentWindow.name });\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.error(\"BaseWindow.setParent error\", err);\n\t\t\t\t}\n\t\t\t\tcb(err, windowIdentifier);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Clears the parent reference and emits \"clearParent\" event to window listeners. Used only internally.\n\t *\n\t * @private\n\t *\n\t */\n\tclearParent() {\n\t\tLogger.system.debug(\"BaseWindow.clearParent\");\n\t\tthis.parentWindow = null;\n\t\tthis.emit(\"clearParent\", this.parentWindow);\n\t}\n\n\tsetTitle(title) {\n\t\tLogger.system.debug(\"Title change\", title);\n\t\tRouterClient.publish(this.TITLE_CHANGED_CHANNEL, title);\n\t}\n\n\t//public Window functions - needed to handle events properly e.g. for close.\n\tclose(params = {}, callback) {\n\t\tthis.queryWindowService(\"close\", params, callback);\n\t}\n\n\t_animate(params, cb) {\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tcb(\"Method not implemented for window\", { shouldContinue: true });\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/WindowAbstractions/BaseWindow.ts","import BoxMath from \"./boxMath\";\nclass DockableBox {\n\tconstructor(bounds) {\n\t\tif (bounds) {\n\t\t\tthis.left = bounds.left;\n\t\t\tthis.top = bounds.top;\n\t\t\tthis.right = bounds.right;\n\t\t\tthis.bottom = bounds.bottom;\n\t\t\tthis.width = bounds.right - bounds.left;\n\t\t\tthis.height = bounds.bottom - bounds.top;\n\t\t\tthis.windowBoundingBox = BoxMath.getWindowBoundingBox(this.getBounds());\n\t\t\tthis.setSnappingRegions();\n\t\t}\n\t\tthis.getVertices = BoxMath.getVertices;\n\t\treturn this;\n\t}\n\t/**\n\t* @function {function name}\n\t* @param  {type} format         {description}\n\t* @param  {type} includeCorners {description}\n\t* @return {type} {description}\n\t*/\n\tgetEdges(format, includeCorners) {\n\t\tif (includeCorners === undefined || includeCorners === true) {\n\t\t\tincludeCorners = 0;\n\t\t} else {\n\t\t\tincludeCorners = 1;\n\t\t}\n\n\t\tvar top = {\n\t\t\tmin: {\n\t\t\t\tx: this.left + includeCorners,\n\t\t\t\ty: this.top\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right - includeCorners,\n\t\t\t\ty: this.top\n\t\t\t}\n\t\t};\n\t\tvar left = {\n\t\t\tmin: {\n\t\t\t\tx: this.left,\n\t\t\t\ty: this.top + includeCorners\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.left,\n\t\t\t\ty: this.bottom - includeCorners\n\t\t\t}\n\t\t};\n\t\tvar right = {\n\t\t\tmin: {\n\t\t\t\tx: this.right,\n\t\t\t\ty: this.top + includeCorners\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right,\n\t\t\t\ty: this.bottom - includeCorners\n\t\t\t}\n\t\t};\n\t\tvar bottom = {\n\t\t\tmin: {\n\t\t\t\tx: this.left + includeCorners,\n\t\t\t\ty: this.bottom\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right - includeCorners,\n\t\t\t\ty: this.bottom\n\t\t\t}\n\t\t};\n\n\t\tif (format === \"obj\") {\n\t\t\treturn {\n\t\t\t\ttop: top,\n\t\t\t\tright: right,\n\t\t\t\tbottom: bottom,\n\t\t\t\tleft: left\n\t\t\t};\n\t\t}\n\t\treturn [top, right, bottom, left];\n\t}\n\n\tgetCorners() {\n\t\treturn this.getCornerObject(this.getBounds());\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} point          {description}\n\t* @param  {type} includeCorners {description}\n\t* @return {type} {description}\n\t*/\n\tpointIsOnBoundingBox(point, includeCorners) {\n\t\t//If it's on the top or bottom edge.\n\t\tvar edges = this.getEdges(\"arr\", includeCorners);\n\n\t\tfor (var i = 0; i < edges.length; i++) {\n\t\t\tvar segment = edges[i];\n\t\t\tif (BoxMath.isPointOnSegment(point, segment)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} corner {description}\n\t* @return {type} {description}\n\t*/\n\tgetPointByVertex(corner) {\n\n\t\tcorner = corner.toLowerCase();\n\t\tvar point = {\n\t\t\tx: this.left,\n\t\t\ty: this.top\n\t\t};\n\t\tif (corner.includes(\"bottom\")) {\n\t\t\tpoint.y = this.bottom;\n\t\t}\n\t\tif (corner.includes(\"right\")) {\n\t\t\tpoint.x = this.right;\n\t\t}\n\t\treturn point;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} point     {description}\n\t* @param  {type} tolerance {description}\n\t* @return {type} {description}\n\t*/\n\tgetEdgeByPoint(point, tolerance) {\n\t\tvar edges = this.getEdges(\"obj\");\n\n\t\tfor (var edge in edges) {\n\t\t\tif (BoxMath.isPointOnSegment(point, edges[edge])) {\n\t\t\t\treturn edge;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} point     {description}\n\t* @param  {type} tolerance {description}\n\t* @return {type} {description}\n\t*/\n\tgetVertexByPoint(point, tolerance) {\n\t\tif (tolerance === undefined) {\n\t\t\ttolerance = 0;\n\t\t}\n\t\tvar corner = null, justAnEdge = true;\n\t\tif (point.y <= this.windowBoundingBox.max.y + tolerance && point.y >= this.windowBoundingBox.max.y - tolerance) {\n\t\t\tcorner = \"bottom\";\n\t\t}\n\t\tif (point.y <= this.windowBoundingBox.min.y + tolerance && point.y >= this.windowBoundingBox.min.y - tolerance) {\n\t\t\tcorner = \"top\";\n\t\t}\n\n\t\tif (!corner) {\n\t\t\treturn corner;\n\t\t}\n\n\t\tif (point.x <= this.windowBoundingBox.min.x + tolerance && point.x >= this.windowBoundingBox.min.x - tolerance) {\n\t\t\tjustAnEdge = false;\n\t\t\tcorner += \"Left\";\n\t\t}\n\n\t\tif (point.x <= this.windowBoundingBox.max.x + tolerance && point.x >= this.windowBoundingBox.max.x - tolerance) {\n\t\t\tjustAnEdge = false;\n\t\t\tcorner += \"Right\";\n\t\t}\n\t\tif (justAnEdge) {\n\t\t\treturn null;\n\t\t}\n\t\treturn corner;\n\t}\n\n\t/**\n\t* @function getSharedEdges Determines if another window has edges to which our window may snap/dock\n\t* @param  {type} win2 {description}\t\t* @param  {Window} win2 Window proxy (movement object) of other window to which our window may snap/dock\n\t* @return {type} {description}\t\t* @param  {number} tolerance Buffer region around edges to determine region for snap / dock\n\t* @return {object} Object describing shared edges, with boolean top, bottom, left, and right properties\n\t*/\n\tgetSharedEdges(win2, tolerance) {\n\t\tif (!tolerance) {\n\t\t\ttolerance = 0;\n\t\t}\n\t\t//from perspective of stationary window;\n\t\tvar sharedEdges = {\n\t\t\ttop: false,\n\t\t\tleft: false,\n\t\t\tright: false,\n\t\t\tbottom: false\n\t\t};\n\t\t// +--------------------------------+\n\t\t// |    Monitor2                    |\n\t\t// |                                |\n\t\t// |           +---------+          |\n\t\t// |           |         |          |\n\t\t// |           |  Win2   |          |\n\t\t// |           |         |          |\n\t\t// +--------------------------------+\n\t\t// |           |         |          |\n\t\t// |           | MyWindow|          |\n\t\t// |           |         |          |\n\t\t// |           +---------+          |\n\t\t// |    Monitor1                    |\n\t\t// |                                |\n\t\t// +--------------------------------+\n\t\t// Return all false if we aren't intersecting at all or snapping exactly across the monitor boundary,\n\t\t// e.g. (see above) if top of my window is snapped to bottom of the other window and the top of my other window is the top\n\t\t// of the monitor, return shared edges.\n\t\tconst intersection = BoxMath.intersectBoundingBoxes(this.buffer, win2.windowBoundingBox);\n\t\tif (\n\t\t\t!intersection || this.monitor && (\n\t\t\t\t(this.top === win2.bottom && this.top === this.monitor.top) ||\n\t\t\t\t(this.left === win2.right && this.left === this.monitor.left) ||\n\t\t\t\t(this.bottom === win2.top && this.bottom === this.monitor.bottom) ||\n\t\t\t\t(this.right === win2.left && this.right === this.monitor.right)\n\t\t\t)\n\t\t) {\n\t\t\treturn sharedEdges;\n\t\t}\n\t\tvar inRightTolerance = BoxMath.between({\n\t\t\tnum: win2.right,\n\t\t\tmin: this.left - tolerance,\n\t\t\tmax: this.left + tolerance,\n\t\t\tinclusive: true\n\t\t});\n\t\tvar inLeftTolerance = BoxMath.between({\n\t\t\tnum: win2.left,\n\t\t\tmin: this.right - tolerance,\n\t\t\tmax: this.right + tolerance,\n\t\t\tinclusive: true\n\t\t});\n\t\tvar inTopTolerance = BoxMath.between({\n\t\t\tnum: win2.top,\n\t\t\tmin: this.bottom - tolerance,\n\t\t\tmax: this.bottom + tolerance,\n\t\t\tinclusive: true\n\t\t});\n\t\tvar inBottomTolerance = BoxMath.between({\n\t\t\tnum: win2.bottom,\n\t\t\tmin: this.top - tolerance,\n\t\t\tmax: this.top + tolerance,\n\t\t\tinclusive: true\n\t\t});\n\n\t\tif (inRightTolerance) {\n\t\t\tif (win2.bottom > this.top - tolerance && win2.top < this.bottom + tolerance) {\n\t\t\t\tsharedEdges.left = true;\n\t\t\t}\n\t\t}\n\t\tif (inLeftTolerance) {\n\t\t\t//if(600 > 0 && 300 < 300)\n\t\t\tif (win2.bottom > this.top - tolerance && win2.top < this.bottom + tolerance) {\n\t\t\t\tsharedEdges.right = true;\n\t\t\t}\n\t\t}\n\n\t\tif (inBottomTolerance) {\n\t\t\tif (win2.left < this.right + tolerance && win2.right > this.left - tolerance) {\n\t\t\t\tsharedEdges.top = true;\n\n\t\t\t}\n\t\t}\n\n\t\tif (inTopTolerance) {\n\t\t\tif (win2.left < this.right + tolerance && win2.right > this.left - tolerance) {\n\t\t\t\tsharedEdges.bottom = true;\n\t\t\t}\n\t\t}\n\n\t\treturn sharedEdges;\n\t}\n\n\t/**\n\t* @function getSharedCorners Determines if another window has corners to which our window may snap/dock\n\t* @param  {type} win2 {description}\t\t* @param  {Window} win2 Window proxy (movement object) of other window to which our window may snap/dock\n\t* @return {type} {description}\t\t* @return {object} Object describing shared corners, including original vertices (topLeft, topRight, bottomRight, bottomLeft),\n\t*\t\t\t\t\tand amended vertices (rightTop, rightBottom, leftTop, leftBottom) to indicate shared tops or bottoms on\n\t*\t\t\t\t\ton the left or right.\n\t*/\n\tgetSharedCorners(win2) {\n\t\tvar sharedCorners = {\n\t\t\ttopLeft: false,\n\t\t\ttopRight: false,\n\t\t\tbottomLeft: false,\n\t\t\tbottomRight: false,\n\n\t\t\t//distinction is in the placement. a window placed to the side and top aligned would share the rightTop corner, but not the topRight\n\t\t\trightTop: false,\n\t\t\trightBottom: false,\n\t\t\tleftTop: false,\n\t\t\tleftBottom: false\n\t\t};\n\n\n\t\t// +--------------------------------+\n\t\t// |    Monitor2                    |\n\t\t// |                                |\n\t\t// |           +---------+          |\n\t\t// |           |         |          |\n\t\t// |           |  Win2   |          |\n\t\t// |           |         |          |\n\t\t// +--------------------------------+\n\t\t// |           |         |          |\n\t\t// |           | MyWindow|          |\n\t\t// |           |         |          |\n\t\t// |           +---------+          |\n\t\t// |    Monitor1                    |\n\t\t// |                                |\n\t\t// +--------------------------------+\n\t\t// Return all false if we aren't intersecting at all or snapping exactly across the monitor boundary,\n\t\t// e.g. (see above) if top of my window is snapped to bottom of the other window and the top of my other window is the top\n\t\t// of the monitor, return shared edges.\n\t\tconst intersection = (!BoxMath.intersectBoundingBoxes(this.innerBuffer, win2.windowBoundingBox) && BoxMath.intersectBoundingBoxes(this.buffer, win2.windowBoundingBox));\n\t\tif (\n\t\t\t!intersection || this.monitor && (\n\t\t\t\t(this.top === win2.bottom && this.top === this.monitor.top) ||\n\t\t\t\t(this.left === win2.right && this.left === this.monitor.left) ||\n\t\t\t\t(this.bottom === win2.top && this.bottom === this.monitor.bottom) ||\n\t\t\t\t(this.right === win2.left && this.right === this.monitor.right)\n\t\t\t)\n\t\t) {\n\t\t\treturn sharedCorners;\n\t\t}\n\t\tlet myCorners = BoxMath.getVertices(this.getBounds());\n\t\tlet theirCorners = BoxMath.getVertices(win2);\n\t\tmyCorners.forEach(corner => {\n\t\t\tfor (var i = 0; i < theirCorners.length; i++) {\n\t\t\t\tvar theirCorner = theirCorners[i];\n\t\t\t\tif (corner.x === theirCorner.x && corner.y === theirCorner.y) {\n\t\t\t\t\tsharedCorners[corner.label] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tvar sharedEdges = {\n\t\t\tbottom: this.bottom === win2.bottom || this.bottom === win2.top,\n\t\t\ttop: this.top === win2.top || this.top === win2.bottom,\n\t\t\tright: this.right === win2.left || this.right === win2.right,\n\t\t\tleft: this.left === win2.right || this.left === win2.left\n\t\t};\n\t\tvar sideTop = false, sideBottom = false;\n\t\tif (this.top === win2.top) {\n\t\t\tsideTop = true;\n\t\t}\n\t\tif (this.bottom === win2.bottom) {\n\t\t\tsideBottom = true;\n\t\t}\n\t\tif (sharedEdges.right) {\n\t\t\tif (sideTop) {\n\t\t\t\tsharedCorners.rightTop = true;\n\t\t\t}\n\t\t\tif (sideBottom) {\n\t\t\t\tsharedCorners.rightBottom = true;\n\t\t\t}\n\t\t}\n\n\t\tif (sharedEdges.left) {\n\t\t\tif (sideBottom) {\n\t\t\t\tsharedCorners.leftBottom = true;\n\t\t\t}\n\t\t\tif (sideTop) {\n\t\t\t\tsharedCorners.leftTop = true;\n\t\t\t}\n\t\t}\n\n\t\treturn sharedCorners;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tgetBounds() {\n\t\treturn {\n\t\t\tleft: this.left,\n\t\t\tright: this.right,\n\t\t\ttop: this.top,\n\t\t\tbottom: this.bottom,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t};\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} req {description}\n\t* @return {type} {description}\n\t*/\n\tgetCornerObject(req) {\n\t\tlet corners = {};\n\t\tlet vertices = BoxMath.getVertices(req);\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tlet corner = vertices[i];\n\t\t\tcorners[corner.label] = corner;\n\t\t}\n\t\treturn corners;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} mouse {description}\n\t* @return {type} {description}\n\t*/\n\tgetGrabbedEdge(mouse) {\n\t\t//window.methodCalls[\"getGrabbedEdge\"]++;\n\t\tvar tolerance = 15;\n\t\tvar mouseBox = {\n\t\t\tmin: {\n\t\t\t\tx: mouse.x - tolerance,\n\t\t\t\ty: mouse.y - tolerance\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: mouse.x + tolerance,\n\t\t\t\ty: mouse.y + tolerance\n\t\t\t}\n\t\t};\n\t\tvar edges = [\"top\", \"bottom\", \"left\", \"right\"];\n\t\tfor (var i = 0; i < edges.length; i++) {\n\t\t\tvar edge = edges[i];\n\t\t\tif (BoxMath.intersectBoundingBoxes(mouseBox, this.snappingRegions[edge])) {\n\t\t\t\treturn edge;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} request {description}\n\t* @return {type} {description}\n\t*/\n\tgetResizeHandle(request) {\n\t\tif (this.resizeHandle) {\n\t\t\treturn this.resizeHandle;\n\t\t}\n\t\tvar resizeHandle;\n\t\tif (request.mousePosition) {\n\t\t\tresizeHandle = this.getVertexByPoint(request.mousePosition, 15);\n\t\t\tif (!resizeHandle) {\n\t\t\t\tresizeHandle = this.getGrabbedEdge(request.mousePosition);\n\t\t\t}\n\t\t}\n\n\t\tif (!resizeHandle) {\n\t\t\tif (request.top !== this.top) {\n\t\t\t\tresizeHandle = \"top\";\n\t\t\t\tif (request.right !== this.right) {\n\t\t\t\t\tresizeHandle = \"topRight\";\n\t\t\t\t} else if (request.left !== this.left) {\n\t\t\t\t\tresizeHandle = \"topLeft\";\n\t\t\t\t}\n\n\t\t\t} else if (request.right !== this.right) {\n\t\t\t\tresizeHandle = \"right\";\n\t\t\t\tif (request.bottom !== this.bottom) {\n\t\t\t\t\tresizeHandle = \"bottomRight\";\n\t\t\t\t} else if (request.top !== this.top) {\n\t\t\t\t\tresizeHandle = \"topRight\";\n\t\t\t\t}\n\t\t\t} else if (request.bottom !== this.bottom) {\n\t\t\t\tresizeHandle = \"bottom\";\n\n\t\t\t\tif (request.left !== this.left) {\n\t\t\t\t\tresizeHandle = \"bottomLeft\";\n\t\t\t\t} else if (request.right !== this.right) {\n\t\t\t\t\tresizeHandle = \"bottomRight\";\n\t\t\t\t}\n\t\t\t} else if (request.left !== this.left) {\n\t\t\t\tresizeHandle = \"left\";\n\t\t\t\tif (request.top !== this.top) {\n\t\t\t\t\tresizeHandle = \"topLeft\";\n\t\t\t\t} else if (request.bottom !== this.bottom) {\n\t\t\t\t\tresizeHandle = \"bottomLeft\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (resizeHandle && request.changeType !== 0) {\n\t\t\t//if we didn't find a resizeHandle, then no edges moved. Send last handle.\n\t\t\tthis.resizeHandle = resizeHandle;\n\t\t} else if (!resizeHandle && request.changeType === 0) {\n\t\t\tresizeHandle = \"top\";\n\t\t}\n\t\treturn resizeHandle;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bufferSize {description}\n\t* @return {type} {description}\n\t*/\n\tsetBuffer(bufferSize) {\n\t\tif (bufferSize === undefined && this.bufferSize === null) {\n\t\t\treturn;\n\t\t} else if (bufferSize !== undefined) {\n\t\t\tthis.bufferSize = bufferSize;\n\t\t} else {\n\t\t\tbufferSize = this.bufferSize;\n\t\t}\n\t\tthis.buffer = {\n\t\t\tmin: {\n\t\t\t\tx: this.left - bufferSize,\n\t\t\t\ty: this.top - bufferSize\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right + bufferSize,\n\t\t\t\ty: this.bottom + bufferSize\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tsetSnappingRegions() {\n\t\tthis.snappingRegions = BoxMath.getSnappingRegions(this, this.bufferSize);\n\t}\n\n\tsharesACornerWith(win) {\n\t\tvar sharedCorners = this.getSharedCorners(win);\n\t\tvar corners = [\"topLeft\", \"topRight\", \"rightTop\", \"leftTop\", \"bottomRight\", \"bottomLeft\", \"rightBottom\", \"leftBottom\"];\n\t\tfor (var i = 0; i < corners.length; i++) {\n\t\t\tvar corner = corners[i];\n\t\t\tif (sharedCorners[corner]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} win {description}\n\t* @return {type} {description}\n\t*/\n\tsharesAnEdgeWith(win) {\n\t\tvar sharedEdges = this.getSharedEdges(win);\n\n\t\tvar edges = [\"top\", \"right\", \"left\", \"bottom\"];\n\t\tfor (var i = 0; i < edges.length; i++) {\n\t\t\tvar edge = edges[i];\n\t\t\tif (sharedEdges[edge]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} request {description}\n\t* @return {type} {description}\n\t*/\n\tcanSnapToWindow(request) {\n\t\tif (this.sharesAnEdgeWith(request)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn BoxMath.intersectBoundingBoxes(this.buffer, request.windowBoundingBox) && !BoxMath.intersectBoundingBoxes(this.innerBuffer, request.windowBoundingBox);\n\n\t}\n}\nexport default DockableBox;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockableBox.js","import { ObjectPool } from \"./ObjectPool\";\nimport { WindowPool } from \"./WindowPool\";\n\nimport Logger from \"../../../../clients/logger\";\n\nconst dependencies = {\n\tLogger\n}\nconst GroupPoolSingleton = new ObjectPool(\"GroupPoolSingleton\", dependencies);\nconst MonitorPoolSingleton = new ObjectPool(\"MonitorPoolSingleton\", dependencies);\n//Generic list of all windows that the windowService knows about. Contains finsemble windows\nconst WindowPoolSingleton = new ObjectPool(\"WindowPoolSingleton\", dependencies);\n\n//Specific pool of dockable windows.\nconst DockingPoolSingleton = new WindowPool(\"DockingPoolSingleton\", dependencies);\nexport {\n\tGroupPoolSingleton,\n\tWindowPoolSingleton,\n\tMonitorPoolSingleton,\n\tDockingPoolSingleton\n}\n\n\n// WEBPACK FOOTER //\n// src/services/window/Common/Pools/PoolSingletons.ts","\n\nexport const EDGES = [\"top\", \"left\", \"bottom\", \"right\"];\nexport const CORNERS = [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"];\nexport const MINIMUM_HEIGHT = 32;\nexport const MINIMUM_WIDTH = 98;\nexport const OPPOSITE_EDGE_MAP = {\n\tleft: \"right\",\n\tright: \"left\",\n\ttop: \"bottom\",\n\tbottom: \"top\",\n\ttopLeft: \"bottomRight\",\n\ttopRight: \"bottomLeft\",\n\tbottomLeft: \"topRight\",\n\tbottomRight: \"topLeft\"\n};\nexport const SPLIT_HANDLE_MAP = {\n\tbottomLeft: [\"bottom\", \"left\"],\n\tbottomRight: [\"bottom\", \"right\"],\n\tleftBottom: [\"left\", \"bottom\"],\n\trightBottom: [\"right\", \"bottom\"],\n\ttopRight: [\"top\", \"right\"],\n\ttopLeft: [\"top\", \"left\"],\n\trightTop: [\"right\", \"top\"],\n\tleftTop: [\"left\", \"top\"],\n\tleft: [\"left\"],\n\tright: [\"right\"],\n\ttop: [\"top\"],\n\tbottom: [\"bottom\"]\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/constants.js","/** Singleton of the Logger class shared among all instances of ObjectPool\n * @TODO Refactor to instance member of class.\n */\nlet Logger;\nexport class ObjectPool {\n\tobjects: any;\n\tpoolName: string;\n\tconstructor(name: string, dependencies: { Logger: any }) {\n\t\tif (dependencies) {\n\t\t\tLogger = dependencies.Logger;\n\t\t} else {\n\t\t\tthrow new Error(\"ObjectPool class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.\");\n\t\t}\n\t\tthis.objects = {};\n\t\tthis.poolName = name;\n\t}\n\n\tget(name, throwError = true) {\n\t\tvar result;\n\t\tif (!this.objects.hasOwnProperty(name)) {\n\t\t\tif (throwError && name && !(name.toLowerCase().includes(\"finsemble\") || name.toLowerCase().includes(\"service\"))) {\n\t\t\t\tLogger.system.warn(`${this.poolName} pool.get failed for ${name}`);\n\t\t\t}\n\t\t} else {\n\t\t\tresult = this.objects[name];\n\t\t}\n\t\treturn result;\n\t}\n\n\tremove(name) {\n\t\tLogger.system.debug(`${this.poolName} pool.remove for ${name}`);\n\t\tif (!this.objects.hasOwnProperty(name)) {\n\t\t\tLogger.system.warn(`${this.poolName} pool.remove operating on non-existent value for ${name}`);\n\t\t}\n\n\t\tdelete this.objects[name];\n\t}\n\n\tadd(name, obj) {\n\t\tLogger.system.debug(`${this.poolName} pool.add for ${name}`);\n\t\tif (this.objects.hasOwnProperty(name)) {\n\t\t\tLogger.system.warn(`${this.poolName} pool.add overwriting existing value for ${name}`);\n\t\t}\n\n\t\tthis.objects[name] = obj;\n\t}\n\n\t*iterator() {\n\t\tfor (let name in this.objects) {\n\t\t\tlet obj = this.get(name);\n\t\t\tyield obj;\n\t\t}\n\t}\n\tgetAll() {\n\t\treturn this.objects;\n\t}\n}\n\n\n// WEBPACK FOOTER //\n// src/services/window/Common/Pools/ObjectPool.ts","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.debounce/index.js\n// module id = 59\n// module chunks = 0 1 5","import { each as asyncEach, forEach as asyncForEach } from \"async\";\nimport * as CONSTANTS from \"../constants\";\n/** Singleton of the Logger class shared among all instances of ObjectPool\n * @TODO Refactor to instance member of class.\n */\nlet Logger;\nconst groupStates = {\n\tNORMAL: 0,\n\tMINIMIZING: 1,\n\tMINIMIZED: 2,\n\tRESTORING: 3\n};\nexport class WindowGroup {\n\t/**\n\t *\n\t * @param {object} params Params\n\t * @param {string} params.name name of the group\n\t * @param {object} params.windows array of windows in the group\n\t * @param {object} dependencies Dependency object that provides a Logger.\n\t * @param {Logger} dependencies.Logger\n\t */\n\tconstructor(params, dependencies) {\n\t\tLogger = dependencies.Logger;\n\t\tthis.name = params.name;\n\t\tthis.groupState = groupStates.NORMAL;\n\t\tthis.GROUPSTATES = groupStates;\n\t\tthis.isAlwaysOnTop = false;\n\t\tif (params.windows) {\n\t\t\tthis.windows = params.windows;\n\t\t} else {\n\t\t\tthis.windows = {};\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tdelete this.windows;\n\t\tdelete this.name;\n\t}\n\n\tsetWindows(windows) {\n\t\tthis.windows = windows;\n\t}\n\n\tgetWindows() {\n\t\treturn this.windows;\n\t}\n\n\taddWindow(win) {\n\t\tLogger.system.debug(\"windowGroup.addWindow\", win.name);\n\t\tthis.windows[win.name] = win;\n\t\tif (this.isMovable) win.alwaysOnTop(this.isAlwaysOnTop);\n\t}\n\n\t/**\n\t *\n\t * @param {*} arr either a window name or window identifier or a list of window names or identifiers\n\t */\n\tremoveWindows(arr, cb = Function.prototype) {\n\t\tvar windowName;\n\t\tif (!Array.isArray(arr)) {\n\t\t\tarr = [arr];\n\t\t}\n\t\tvar self = this;\n\t\tarr.forEach(function (win) {\n\t\t\tif (typeof win === \"string\" || win instanceof String) {\n\t\t\t\twindowName = win;\n\t\t\t} else {\n\t\t\t\twindowName = win.windowName || win.name;\n\t\t\t}\n\t\t\tLogger.system.debug(\"windowGroup.removeWindows\", windowName);\n\n\t\t\tif (this.windows[windowName]) {\n\t\t\t\tdelete self.windows[windowName];\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}, this);\n\t\tcb();\n\t}\n\n\t/**\n\t *\n\t * @param {*} win either a window name or window identifier\n\t */\n\tgetWindow(win) {\n\t\tif (typeof win === \"string\" || win instanceof String) { //we have a window name\n\t\t\treturn this.windows[win];\n\t\t}  // we have an identifier\n\t\tif (win && (win.windowName || win.name)) {\n\t\t\treturn this.windows[win.windowName || win.name];\n\t\t}\n\t\treturn null;\n\n\n\t}\n\n\tgetWindowNames() {\n\t\tlet names = [];\n\t\tfor (let name in this.windows) {\n\t\t\tnames.push(name);\n\t\t}\n\t\treturn names;\n\t}\n\n\taddWindows(arr) {\n\t\tif (!Array.isArray(arr)) {\n\t\t\tarr = [arr];\n\t\t}\n\t\tvar self = this;\n\t\tarr.forEach(function (win) {\n\t\t\tLogger.system.debug(\"windowGroup.addWindows\", win.name);\n\n\t\t\tself.windows[win.name] = win;\n\t\t\tif (this.isMovable) win.alwaysOnTop(this.isAlwaysOnTop);\n\n\t\t}, this);\n\t}\n\n\tgetWindowArray() {\n\t\tlet arr = [];\n\t\tfor (let windowName in this.windows) {\n\t\t\tarr.push(this.windows[windowName]);\n\t\t}\n\t\treturn arr;\n\t}\n\n\tminimizeAll() {\n\t\tif (this.groupState == groupStates.RESTORING) {\n\t\t\tthis.interruptRestore = true;\n\t\t\tthis.groupState = groupStates.NORMAL;\n\t\t}\n\t\tif (this.groupState !== groupStates.NORMAL) return;\n\t\tthis.groupState = groupStates.MINIMIZING;\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet win = this.windows[windowName];\n\t\t\tif (win.windowState != CONSTANTS.WINDOWSTATE.MINIMIZED) win.minimize();\n\t\t}\n\t\tthis.groupState = groupStates.MINIMIZED;\n\t\tthis.interruptRestore = false;\n\t}\n\n\tminimize(params) {\n\t\tif (!params) { return this.minimizeAll(); }\n\t\tlet { windowList, componentType } = params;\n\t\tif (componentType) windowList = this.findAllByComponentType(componentType);\n\n\t\tfor (let w of windowList) {\n\t\t\tlet win;\n\t\t\tif (!(typeof w === \"string\" || w instanceof String)) {\n\t\t\t\twin = this.getWindow(w.windowName || w.name);\n\t\t\t} else {\n\t\t\t\twin = this.getWindow(w);\n\t\t\t}\n\t\t\tif (win && win.windowState != CONSTANTS.WINDOWSTATE.MINIMIZED) {\n\t\t\t\twin.minimize();\n\t\t\t}\n\t\t}\n\t}\n\n\trestoreAll(cb = Function.prototype) {\n\t\tif (this.groupState !== groupStates.MINIMIZED) return cb();\n\t\tvar self = this;\n\t\tthis.groupState = groupStates.RESTORING;\n\t\tfunction restoreWindow(windowName, done) {\n\t\t\tif (self.interruptRestore) return done(\"restore interrupted\");\n\t\t\tlet win = self.windows[windowName];\n\t\t\tif (win.restore) {\n\t\t\t\t// if win.win exists, we're in a dockableGroup of dockalbeWindows\n\t\t\t\tlet windowState = win.win ? win.win.windowState : win.windowState;\n\t\t\t\tif (windowState != CONSTANTS.WINDOWSTATE.NORMAL) {\n\t\t\t\t\t// The dockableWindow only takes a single parameter...a callback.\n\t\t\t\t\tif (win.win) {\n\t\t\t\t\t\twin.restore(done);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// All other window wraps accept 2 params for restore.\n\t\t\t\t\t\twin.restore({}, done);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLogger.system.error(windowName + \" does not implement restore\");\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\t\tasyncForEach(Object.keys(this.windows), restoreWindow, function (err, data) {\n\t\t\tself.interruptRestore = false;\n\t\t\tif (!err) {\n\t\t\t\tself.groupState = groupStates.NORMAL;\n\t\t\t}\n\t\t\tcb(err, data);\n\t\t});\n\t}\n\t//takes an array of window names.\n\trestore(params, cb) {\n\t\tlet { windowList } = params;\n\t\tvar self = this;\n\t\tfunction restoreWindow(windowName, done) {\n\t\t\tlet win = self.windows[windowName];\n\t\t\tif (win.restore) {\n\t\t\t\tself.windows[windowName].restore({}, done);\n\t\t\t} else {\n\t\t\t\tLogger.system.error(windowName + \" does not implement restore\");\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\t\tasyncForEach(windowList, restoreWindow, cb);\n\t}\n\n\t// Bring all windows to top. Also sets the state of the group to always on top and new windows added to the group inherit the state of thw window\n\tallAlwaysOnTop(alwaysOnTop) {\n\t\tthis.isAlwaysOnTop = alwaysOnTop;\n\t\tthis.alwaysOnTop({ windowList: Object.keys(this.windows), restoreWindows: true, alwaysOnTop: alwaysOnTop });\n\t}\n\n\t// Set specific windows to top. Generally should call allAlwaysOnTop\n\talwaysOnTop(params) {\n\t\tif (!params || (params && Object.keys(params).length === 0)) {\n\t\t\tparams = { windowList: Object.keys(this.windows), restoreWindows: true };\n\t\t}\n\t\tlet { windowList, componentType } = params;\n\t\tif (windowList && typeof windowList[0] !== \"string\") {\n\t\t\twindowList = windowList.map(win => win.windowName);\n\t\t}\n\t\tif (componentType) windowList = this.findAllByComponentType(componentType);\n\t\tvar self = this;\n\t\tif (!windowList) windowList = Object.keys(this.windows);\n\t\tfor (let w in windowList) {\n\t\t\tlet win;\n\t\t\tif (Array.isArray(windowList)) w = windowList[w];\n\n\t\t\tif (!(typeof w === \"string\" || w instanceof String)) {\n\t\t\t\twin = self.getWindow(w.windowName || w.name);\n\t\t\t} else {\n\t\t\t\twin = self.getWindow(w);\n\t\t\t}\n\t\t\tif (win) {\n\t\t\t\twin.alwaysOnTop(params.alwaysOnTop);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Brings a group of windows to the front (BTF). In other words, puts those windows on top of any other windows so that they can be seen\n\t * @param {object} params\n\t * @param {bool=true} params.restoreWindows If true then windows will attempt to be restored (un-minimized) before being brought to front\n\t * @param {array} params.windowList The list of windows to BTF. Defaults to the windows that are in this window group. This can be a list of window names, or a list of actual window instances.\n\t * @param {string} params.componentType Optionally provide a componentType to BTF only those windows of that type in the list of windows.\n\t */\n\tbringToFront(params, cb = Function.prototype) {\n\t\tvar self = this;\n\t\tif (!params) params = {};\n\t\tif (typeof (params.restoreWindows) == \"undefined\") params.restoreWindows = true;\n\n\t\t// TODO, [terry] this \"windowList\" logic is copy and pasted many times in windowGroup.js. It should be in a helper function.\n\t\tlet { windowList, componentType } = params;\n\t\t// Determine if the windowList is a list of window names, or a list of actual windows (in which case we extract the name)\n\t\tif (windowList && typeof windowList[0] !== \"string\") {\n\t\t\twindowList = windowList.map(win => win.windowName);\n\t\t}\n\n\t\t// Get all windows *in this group* of this component type, then convert them into an array of strings to be passed into the other group functions.\n\t\tif (componentType) {\n\t\t\twindowList = [];\n\t\t\tlet windows = this.findAllByComponentType(componentType);\n\t\t\twindows.forEach(win => {\n\t\t\t\tif (win && win.name) {\n\t\t\t\t\twindowList.push(win.name);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Default to the windows in this group, actually the most common case\n\t\tif (!windowList) windowList = Object.keys(this.windows);\n\n\t\tfunction doBTF() {\n\t\t\t// TODO, [terry] this chunk of code is repeated three times in windowGroup.js. It should be abstracted away\n\t\t\t// TODO, [Sidd] this code now uses async, previously was not using using the callback properly. Make all group functions do this\n\n\t\t\tasyncEach(windowList, (w, callback) => {\n\t\t\t\tlet win;\n\t\t\t\t//if (Array.isArray(windowList)) w = windowList[w];\n\n\t\t\t\tif (!(typeof w === \"string\" || w instanceof String)) {\n\t\t\t\t\twin = self.getWindow(w.windowName || w.name);\n\t\t\t\t} else {\n\t\t\t\t\twin = self.getWindow(w);\n\t\t\t\t}\n\t\t\t\tif (win) {\n\t\t\t\t\twin.bringToFront(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}, () => { cb(); });\n\t\t}\n\n\t\tif (params.restoreWindows) {\n\t\t\tif (typeof windowList[0] !== \"string\") {\n\t\t\t\twindowList = Object.keys(windowList);\n\t\t\t}\n\t\t\tthis.restore({ windowList }, doBTF);\n\t\t} else {\n\t\t\tdoBTF();\n\t\t}\n\n\n\t}\n\n\thyperFocus(params) {\n\t\tlet windowList = params.windowList;\n\t\t// If we got a list of identifiers, convert to names\n\t\tfor (let w in windowList) {\n\t\t\tlet win = windowList[w];\n\t\t\tif (!(typeof win === \"string\" || win instanceof String)) {\n\t\t\t\twindowList[w] = win.windowName || win.name;\n\t\t\t}\n\t\t}\n\n\t\t// If we are trying to hyper focus a stack make sure to also include the children\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\tlet parent = win.getParent();\n\t\t\t// If window is in a stack and the stack is in the windowList but this window is not, add it.\n\t\t\tif (parent && windowList.includes(parent.name) && !windowList.includes(windowName)) {\n\t\t\t\twindowList.push(windowName);\n\t\t\t}\n\t\t}\n\n\t\tfor (let windowName in this.windows) {\n\t\t\tif (!windowList.includes(windowName)) {\n\t\t\t\tthis.windows[windowName].minimize();\n\t\t\t} else {\n\t\t\t\tthis.windows[windowName].restore(() => {\n\t\t\t\t\tthis.windows[windowName].bringToFront();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tfindAllByComponentType(componentType) {\n\t\tvar windowList = [];\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet theWindow = this.windows[windowName];\n\t\t\tlet descriptor = theWindow.windowDescriptor;\n\t\t\tif (componentType === (descriptor.component ? descriptor.component.type : descriptor.customData.component.type)) { //TODO - figure out why this is different in some cases\n\t\t\t\twindowList.push(this.windows[windowName]);\n\t\t\t}\n\t\t}\n\t\treturn windowList;\n\t}\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common/window/windowGroup.js","import StorageClient from \"../clients/storageClient\";\nimport { identity } from \"./disentangledUtils\";\nimport { camelCase } from \"./util\";\nimport { WORKSPACE } from \"./constants\";\nimport { FinsembleWindowData } from \"./FinsembleWindowData\";\nimport { Logger } from \"../clients/logger\";\n\nconst { ACTIVE_WORKSPACE, CACHE_STORAGE_TOPIC, STORAGE_TOPIC } = WORKSPACE;\n\nexport const GET_WINDOW_STATE_ERROR = (win: string, ws: string = ACTIVE_WORKSPACE) =>\n\t`No Window State found for window \"${win}\" in workspace \"${ws}\"`;\n\nexport type StateType = \"windowData\" | \"componentState\";\n\n/**\n * Represents both `windowData` (the window's size, position, url, etc.),\n * and `componentState` (logical data representing linking, custom\n * integerations, etc.)\n */\nexport type CompleteWindowState = {\n\twindowData: FinsembleWindowData;\n\tcomponentState: Record<string, any>;\n}\n\n/**\n * Static, ORM-like layer into the storage of all `windowData`\n * and `componentState` data, mediating interface with storage\n * while enforcing consistency and business rules.\n */\nexport class WindowStorageManager {\n\t/**\n\t * This static member is necessary for testing purposes\n\t * only. Ideally, we would just use the StorageClient\n\t * instance directly; however, this causes inconsistencies\n\t * with our mocks that failed our testing efforts.\n\t */\n\tstatic _SC = StorageClient;\n\n\tstatic getWindowID = (win: FinsembleWindowData) => camelCase(win.name);\n\n\t/**\n\t * Given a type, window, and workspace name, returns the correct storage topic and key\n\t * for the `windowData` or `componentState`.\n\t * Omit the workspace name to target the active workspace.\n\t */\n\tstatic getTopicAndKey(type: StateType, windowName: string, workspaceName: string = ACTIVE_WORKSPACE) {\n\t\t/** The `windowData` is stored under the key with the format \"workspacenameWindowname\",\n\t\t * while the `componentState` is stored under \"workspacenameWindownameWindowname\" */\n\t\tconst keyArgs = type === \"windowData\"\n\t\t\t? [workspaceName, windowName]\n\t\t\t: [workspaceName, windowName, windowName]\n\n\t\treturn {\n\t\t\ttopic: workspaceName === ACTIVE_WORKSPACE ? CACHE_STORAGE_TOPIC : STORAGE_TOPIC,\n\t\t\tkey: camelCase.apply(null, keyArgs),\n\t\t};\n\t}\n\n\t/**\n\t * Retrieves a window or component state belonging to the given workspace from storage.\n\t * Omit the workspace name to target the active workspace.\n\t * \n\t * @param type Either `componentState` or `windowData`.\n\t */\n\tstatic async getState(type: StateType, windowName: string, workspaceName?: string): Promise<FinsembleWindowData | Record<string, any>> {\n\t\tconst topicAndKey = WindowStorageManager.getTopicAndKey(type, windowName, workspaceName)\n\t\treturn (await WindowStorageManager._SC.get1(topicAndKey) as FinsembleWindowData)\n\t\t\t|| null;\n\t}\n\n\t/**\n\t * Same as `getState` but retrieves both `componentState` and `windowData`.\n\t * NOTE: either or both of windowData may be null or emtpy objects (i.e, when\n\t * the requested data doesn't exist).\n\t */\n\tstatic async getCompleteState(windowName: string, workspaceName?: string): Promise<CompleteWindowState> {\n\t\treturn {\n\t\t\tcomponentState: (await WindowStorageManager\n\t\t\t\t.getState(\"componentState\", windowName, workspaceName)\n\t\t\t\t// Windows may not necessarily have component state, so we must catch that occurance here.\n\t\t\t\t.catch(() => ({}))) as Record<string, any>,\n\t\t\twindowData: (await WindowStorageManager\n\t\t\t\t.getState(\"windowData\", windowName, workspaceName)) as FinsembleWindowData,\n\t\t};\n\t}\n\n\t/**\n\t * Retrieves multiple states (`componentState` or `windowData`) belonging to the given workspace from storage.\n\t * Omit the workspace name to target the active workspace.\n\t * \n\t * It's possible to request a window state before it's been saved to storage particularly.\n\t * if the window was added to a workspace by name (not by data). Therefore, unlike `getState`,\n\t * this method doesn't throw errors if unable to fulfill the request; rather, it logs a warning instead.\n\t * \n\t * @param type Either `componentState` or `windowData`.\n\t */\n\tstatic async getManyStates(type: StateType, windowNames: string[], workspaceName?: string): Promise<FinsembleWindowData[]> {\n\t\treturn Promise.all(windowNames.map(x => WindowStorageManager.getState(type, x, workspaceName)\n\t\t\t.catch(err => Logger.system.warn(err)))).then(x => x.filter(identity));\n\t}\n\n\t/**\n\t * Same as `getManyStates` but retrieves both `componentState` and `windowData`.\n\t */\n\tstatic async getManyCompleteStates(windowNames: string[], workspaceName?: string): Promise<CompleteWindowState[]> {\n\t\treturn Promise.all(windowNames.map(x => WindowStorageManager.getCompleteState(x, workspaceName)\n\t\t\t.catch(err => Logger.system.warn(err)))).then(x => x.filter(identity));\n\t}\n\n\t/**\n\t * Persists a state to storage under the given workspace name.\n\t * Omit the workspace name to target the active workspace.\n\t * \n\t * @param type Either `componentState` or `windowData`.\n\t */\n\tstatic async setState(type: StateType, windowName: string, data: FinsembleWindowData | Record<string, any>, workspaceName?: string): Promise<void> {\n\t\tawait WindowStorageManager._SC.save1({\n\t\t\t...WindowStorageManager.getTopicAndKey(type, windowName, workspaceName),\n\t\t\tvalue: data,\n\t\t});\n\t}\n\n\t/**\n\t * Same as `setState`, but sets both `componentState` and `windowData`.\n\t */\n\tstatic async setCompleteState(state: CompleteWindowState, workspaceName?: string): Promise<void> {\n\t\tawait WindowStorageManager.setState(\"windowData\", state.windowData.name, state.windowData, workspaceName);\n\t\tawait WindowStorageManager.setState(\"componentState\", state.windowData.name, state.componentState, workspaceName);\n\t}\n\n\t/**\n\t * Given an array of states, persists their states to storage.\n\t * Omit the workspace name to target the active workspace.\n\t * \n\t * @param type Either `componentState` or `windowData`.\n\t */\n\tstatic async setManyStates(type: StateType, windows: FinsembleWindowData[], workspaceName?: string): Promise<void[]> {\n\t\treturn Promise.all(windows.map(x => WindowStorageManager.setState(type, x.name, x, workspaceName)));\n\t}\n\n\t/**\n\t * Same as `setManyStates`, but sets both `componentState` and `windowData`.\n\t */\n\tstatic async setManyCompleteStates(windows: CompleteWindowState[], workspaceName?: string): Promise<void[]> {\n\t\treturn Promise.all(windows.map(x => WindowStorageManager.setCompleteState(x, workspaceName)));\n\t}\n\n\t/**\n\t * Given a window name and an update function, retrieves the state\n\t * under that name from storage, applies the update function to it, then sets\n\t * the storage with the result.\n\t * Omit the workspace name to target the active workspace.\n\t * \n\t * @param type Either `componentState` or `windowData`.\n\t */\n\tstatic async updateState(type: StateType, updateFn: (window: FinsembleWindowData) => FinsembleWindowData, windowName: string, workspaceName?): Promise<void> {\n\t\tawait WindowStorageManager._SC.updateStorage1({\n\t\t\t...WindowStorageManager.getTopicAndKey(type, windowName, workspaceName),\n\t\t\tupdateFn,\n\t\t});\n\t}\n\n\t/**\n\t * Removes a window's state (both `componentState` and `windowData`) from storage under the\n\t * given workspace name. Omit the workspace name to target the active workspace.\n\t * \n\t * Logs a warning if unable to fulfill the request (doesn't throw).\n\t */\n\tstatic async removeCompleteState(windowName: string, workspaceName?: string): Promise<void> {\n\t\ttry {\n\t\t\tawait WindowStorageManager._SC.remove1(WindowStorageManager.getTopicAndKey(\"windowData\", windowName, workspaceName));\n\t\t\tawait WindowStorageManager._SC.remove1(WindowStorageManager.getTopicAndKey(\"componentState\", windowName, workspaceName));\n\t\t} catch (error) {\n\t\t\tLogger.system.warn(error);\n\t\t}\n\t}\n\n\t/**\n\t * Removes multiple states (both `componentState` and `windowData`) belonging to the given workspace from storage.\n\t * Omit the workspace name to target the active workspace.\n\t */\n\tstatic async removeManyCompleteStates(windowNames: string[], workspaceName?: string): Promise<void[]> {\n\t\treturn Promise.all(windowNames.map(x => WindowStorageManager.removeCompleteState(x, workspaceName)));\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// src/common/windowStorageManager.ts","import { BaseWindow } from \"./BaseWindow\";\nimport OpenFinWindow from \"./openfinWindowWrapper\";\nimport NativeWindow from \"./externalWindowWrapper\";\nimport StackedWindow from \"./stackedWindowWrapper\";\n\nBaseWindow.registerType(\"OpenFinWindow\", OpenFinWindow);\nBaseWindow.registerType(\"NativeWindow\", NativeWindow);\nBaseWindow.registerType(\"StackedWindow\", StackedWindow);\n\nexport const FinsembleWindowInternal = BaseWindow;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/WindowAbstractions/FinsembleWindowInternal.js","var manifest;\n\n/**\n * This file receives SpawnRequests from a master `SplinterAgent`.\n */\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\n\nLogger.start();\nLogger.system.debug(\"SplinterAgentSlave loaded.\");\nimport { System } from \"../../../common/system\";\n\nfunction onSetTitle(err, message) {\n\tdocument.title = message.data.title;\n}\nfunction onRouterReady() {\n\t//Listen for close, unregister from the logger.\n\tfinWindow.addEventListener(\"close-requested\", () => {\n\t\tLogger.unregisterClient({ deleteFromPersistence: true });\n\t\tfinWindow.close(true);\n\t});\n\tLogger.system.debug(\"SplinterAgentSlave ready.\");\n\tRouterClient.addListener(`${thisApp.uuid}.spawn`, onSpawnRequest);\n\tRouterClient.addListener(`${thisApp.uuid}.setTitle`, onSetTitle);\n\tfinWindow.getOptions((opts) => {\n\t\tmanifest = opts.customData.manifest;\n\t\tRouterClient.transmit(`${thisApp.window.name}.onSpawned`, {});\n\t});\n\tsetInterval(function () {\n\t\tRouterClient.transmit(\"Finsemble.heartbeat\", { type: \"agent\", windowName: System.Window.getCurrent().name });\n\t}, 5000);\n}\n\nconst thisApp = System.Application.getCurrent();\nconst finWindow = System.Window.getCurrent();\n\n/**\n * Spawns a new window by interfacing with the underlying container (OpenFin or Electron).\n *\n * @param err\n * @param message Object containing the windowDescriptor in its data property.\n * @param manifestToUse Leave undefined in OpenFin environments (i.e, when splintering\n * is turned on). When splintering is short-circuited (i.e in Electron), you must pass in the correct manifest.\n */\nexport function onSpawnRequest(err, message: { data: { windowDescriptor: any } }, manifestToUse = manifest) {\n\tLogger.system.debug(\"SplinterAgentSlave.onSpawnRequest.\", message.data.windowDescriptor);\n\tlet descriptor = message.data.windowDescriptor;\n\n\tif (!descriptor) {\n\t\tLogger.system.error(\"SplinterAgentSlave.onSpawnRequest ERROR: No windowDescriptor\", message);\n\t\treturn;\n\t}\n\tif (descriptor.customData) {\n\t\tmanifestToUse.finsemble.FinsembleUUID = descriptor.customData.manifest.finsemble.FinsembleUUID; // copy FinsembleUUID from incoming descriptor to manifest\n\t\tdescriptor.customData.manifest = manifestToUse;\n\t} else {\n\t\tdescriptor.customData = { manifest: manifestToUse };\n\t}\n\t// Anything created via `spawn` will have this property. Services created in the Service Manager will not.\n\tif (!descriptor.execJSWhitelist) descriptor.execJSWhitelist = [];\n\t// This window is the 'parent' of the window being created. It should be able to add itself to the execJSWhitelist.\n\tdescriptor.execJSWhitelist.push(finWindow.name);\n\n\tnew System.Window(descriptor, function () {\n\t\tLogger.system.debug(`SplinterAgentSlave.onSpawnRequest: Window successfully spawned. WindowName: ${descriptor.name}`, descriptor);\n\t}, function (err) {\n\t\tLogger.system.error(\"SplinterAgentSlave.onSpawnRequest ERROR\", err);\n\t});\n}\n\n/*\n\tThis file is imported into windowService createSplinterAndInject. Without this shielding, we get spurious onspawned transmits from onRouterReady.\n\tThose cause errors to show up in the Central Logger from the listener in the SplinterAgentPool.\n\tWe should only transmit anything here in the actual SplinterAgentSlave window.\n*/\nif (finWindow.name === thisApp.window.name) RouterClient.onReady(onRouterReady);\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/Splintering/SplinterAgentSlave.ts","import { ObjectPool } from \"./ObjectPool\";\n\nclass WindowPool extends ObjectPool {\n\t*iterator() {\n\t\tfor (let windowName in this.objects) {\n\t\t\tlet win = this.get(windowName);\n\t\t\tif (!win.isMinimized && !win.isHidden) {\n\t\t\t\tyield win;\n\t\t\t}\n\t\t}\n\t}\n}\nexport { WindowPool }\n\n\n// WEBPACK FOOTER //\n// src/services/window/Common/Pools/WindowPool.ts","import { WindowGroup } from \"../../../common/window/windowGroup\";\nimport DockableBox from \"./dockableBox\";\nimport { CORNERS, EDGES, OPPOSITE_EDGE_MAP } from \"./constants\";\nimport BoxMath from \"./boxMath\";\nimport debounce from \"lodash.debounce\";\n/** Singleton of the Logger class shared among all instances of DockableGroup\n * @TODO Refactor to instance member of class.\n */\nlet Logger;\nconst debounceTime = 300;\nconst clone = function (obj) {\n\t//This has been tested a good amount. Previous to this commit we were using a mix of deepmerge and JSON.parse(JSON.stringify()).\n\t//Trying lodash.deepclone made my tests take 2-3s.\n\t//JSON.parse everywhere made them take ~ 1s.\n\t//Using JSON.parse on arrays and deep merge on objects makes them take 7-900ms.\n\tif (Array.isArray(obj)) {\n\t\treturn obj.slice();\n\t}\n\ttry {\n\t\treturn JSON.parse(JSON.stringify(obj));\n\t} catch (e) {\n\t\tLogger.system.error(\"clone error\", e);\n\t\treturn e;\n\t}\n\n};\n\nclass DockableGroup extends WindowGroup {\n\t/**\n\t *\n\t * @param {*} config Config for the group. See WindowGroup for more.\n\t * @param {*} dependencies Dependency object that provides a Logger.\n\t */\n\tconstructor(config, dependencies) {\n\t\tsuper(config, dependencies);\n\t\tif (dependencies) {\n\t\t\tLogger = dependencies.Logger;\n\t\t} else {\n\t\t\tthrow new Error(\"DockableGroup class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.\");\n\t\t}\n\t\tthis.setMinimums(config);\n\t\tthis.name = config.name;\n\t\tthis.isMovable = typeof config.isMovable !== \"undefined\" ? config.isMovable : false;\n\t\tthis.windowBoundingBox = {\n\t\t\tmin: {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0\n\t\t\t}\n\t\t};\n\n\t\t//Number of time's we've tried to fill a particular time. It's limited to 20 attempts to prevent infinite loops. Logs are emitted if we get into that state. Better to throw a warning than an infinite loop.\n\t\tthis.fillAttempts = 0;\n\t\t// Add all dockableBox methods to this\n\t\tthis.dockableBox = new DockableBox();\n\t\tthis.inheritDockableBox();\n\t\tthis.removeWindow = this.removeWindow.bind(this);\n\n\t\t// Will wait 300 ms after every request before moving the group. This gives time for events to arrive from the other windows in the group\n\t\t// The function will only be called after this amount of time has passed with no requests.\n\t \t// Since the OS doesn't care if a group stays together, we need to move the group after the OS is finished moving all windows\n\t\tthis.performDeferredSystemMove = debounce(this.performDeferredSystemMove.bind(this), debounceTime);\n\t\tthis.deferredWindowMoves = [];  \n\n\t}\n\n\t/**\n\t * Responds to system events when the OS has moved a group. Every time a window in this group triggers this function a shared array will\n\t * be updated with that window and it's bounds. After each update, request the group move. \n\t * If this function is triggered again within a certain time, the group move will continue to be delayed until enough time passes without\n\t * any windows events. Ideally the group will only move when all windows in the group with changes have responded to events. \n\t * @param {*} windowObject - Contains the window name and it's updated bounds\n\t * @param {*} calculator - an instance of docking calculator \n\t */\n\tdeferSystemMove(windowObject, calculator) {\n\t\tthis.deferredWindowMoves.push(windowObject);\n\t\tthis.performDeferredSystemMove(calculator, this.deferredWindowMoves);\n\t}\n\t\n\t\t\n\t/**\n\t * Requests the group move. Uses an array of windows in the group and their bounds to choose which window's bounds to use for the group move.\n\t * Intended to move a group after the monitor configuration has changed as the OS may not keep the group intact when it is moved.\n\t * \n\t * @param {*} calculator \n\t * @param {*} deferredWindowMoves array of windowobjects to be used for the move.\n\t */\n\tperformDeferredSystemMove(calculator, deferredWindowMoves) {\n\t\tLogger.system.verbose(\"dockableGroup.performDeferredSystemMove: Windows in group with bounds updates\", deferredWindowMoves);\n\t\tlet bounds;\n\t\tconst anchors = [\n\t\t\tthis.getMoveAnchor(\"BottomRight\"),\n\t\t\tthis.getMoveAnchor(\"BottomLeft\"),\n\t\t\tthis.getMoveAnchor(\"TopRight\"),\n\t\t\tthis.getMoveAnchor(\"TopLeft\")\n\t\t];\n\t\t\n\t\t// Choose one window to be the move anchor. To make sure the group stays intact the updated bounds of only one window\n\t\t// is used when moving the group, the rest of the group will be moved to relative to this \"move anchor\".\n\t\t// That window needs to be in one of the corner positions of the group.\n\t\tfor (let i = 0; i < anchors.length; i++) {\n\t\t\tconst windowObject = deferredWindowMoves.find((win)=> {return win.name === anchors[i].name;});\n\t\t\tif (windowObject) {\n\t\t\t\tbounds = windowObject.bounds;\n\t\t\t\tbounds.anchor = anchors[i];\n\t\t\t\tbounds.systemMoved = true;\n\t\t\t\tbreak;\n\t\t\t}\t \n\t\t}\n\t\t// Reset the shared array of window moves for this group.\n\t\t// This function will either be passed this object or another locally constructed object.\n\t\t// Either way we want to empty this array so window bounds are only for the current event.\n\t\tthis.deferredWindowMoves = [];\n\n\t\tif (!bounds) {\n\t\t\tLogger.system.debug(\"dockableGroup.performDeferredSystemMove: no window was found that matched a move anchor, returning without moving a group\");\n\t\t\treturn;\n\t\t}\n\t\t// When a group straddles a monitor the OS will move the overlapping windows fully onto one monitor.\n\t\t// This causes the group to break because we don't allow grouping on monitor edge.\n\t\t// In some cases, the move anchor will be unchanged, even though other windows in the group have moved. \n\t\t// This just means the old bounds of the move anchor are still valid.\n\t\t// By shifting the bounds by one pixel, we insure that the move request is processed, and the group will \n\t\t// be fully attached.\n\t\tObject.keys(bounds).forEach(key=> { if ([\"right\", \"left\", \"top\", \"bottom\"].includes(key)) bounds[key]++; });\n\t\tthis.moveTo(bounds);\n\t\tcalculator.eliminateGaps();\n\t}\n\n\n\tinheritDockableBox() {\n\t\tvar self = this;\n\t\tvar dockableBoxMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(this.dockableBox)).filter(function (p) {\n\t\t\tif (p != \"constructor\") {\n\t\t\t\treturn typeof self.dockableBox[p] === \"function\";\n\t\t\t}\n\t\t\treturn false;\n\n\t\t});\n\t\tfor (let i = 0; i < dockableBoxMethods.length; i++) {\n\t\t\tlet methodName = dockableBoxMethods[i];\n\t\t\tif (!this[methodName]) {\n\t\t\t\tthis[methodName] = function () {\n\t\t\t\t\treturn self.dockableBox[methodName].call(self, ...arguments);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\taddWindow(win) {\n\t\tif (Object.keys(this.windows).length === 0) {\n\t\t\tthis.windowBoundingBox = clone(win.windowBoundingBox);\n\t\t}\n\t\tif (this.isMovable) win.win._updateOptions({\n\t\t\toptions: {\n\t\t\t\t\"taskbarIconGroup\": this.name\n\t\t\t}\n\t\t});\n\t\tsuper.addWindows(win);\n\t\tthis.updateBounds();\n\t\tif (this.isMovable) this.bringToFront({ restoreWindows: false });\n\t}\n\n\tupdateBounds() {\n\t\tlet groupBounds = this.calculateOuterBounds();\n\t\tif (!groupBounds) {\n\t\t\treturn;\n\t\t}\n\t\tthis.windowBoundingBox = groupBounds;\n\t\tthis.setBuffer();\n\t\tthis.setBounds({\n\t\t\tleft: groupBounds.min.x,\n\t\t\ttop: groupBounds.min.y,\n\t\t\tright: groupBounds.max.x,\n\t\t\tbottom: groupBounds.max.y\n\t\t});\n\t}\n\n\tsaveIndividualWindowStates() {\n\t\tlet windowList = this.getWindows();\n\t\tfor (let windowName in windowList) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\twin.win.saveCompleteWindowState();\n\t\t}\n\t}\n\n\tstartMove() {\n\t\tlet windowList = this.getWindows();\n\t\tfor (let windowName in windowList) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\twin.win.startMove();\n\t\t}\n\t}\n\tstopMove() {\n\t\tlet windowList = this.getWindows();\n\t\tfor (let windowName in windowList) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\twin.win.stopMove();\n\t\t}\n\t}\n\tgetWindowsOnEdges() {\n\t\tlet windowsOnSegment = {};\n\t\tlet windowList = this.getWindows();\n\t\tfor (let windowName in windowList) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\tfor (let i = 0; i < EDGES.length; i++) {\n\t\t\t\tlet edge = EDGES[i];\n\t\t\t\tif (win[edge] === this[edge]) {\n\t\t\t\t\twindowsOnSegment[win.name] = win;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn windowsOnSegment;\n\t}\n\n\tisARectangle() {\n\t\tthis.updateBounds();\n\t\tlet windows = this.getWindows();\n\t\tlet groupArea = this.width * this.height;\n\t\tlet windowArea = 0;\n\t\tfor (let windowName in windows) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\twindowArea += (win.width * win.height);\n\t\t}\n\t\treturn groupArea === windowArea;\n\t}\n\n\t/**\n\t * When you move a group of windows left to right, the anchor algorithm finds the left-most window, and then sorts all of the windows on how close they are to that window. This function just finds the appropriate anchor for that move.\n\t * @param {*} movingDirection\n\t */\n\tgetMoveAnchor(movingDirection) {\n\n\t\tconst DIMENSIONAL_MAP = {\n\t\t\tLeftTop: {\n\t\t\t\tprimaryDimension: \"bottom\",\n\t\t\t\tsecondaryDimension: \"right\",\n\t\t\t},\n\t\t\tLeftBottom: {\n\t\t\t\tprimaryDimension: \"top\",\n\t\t\t\tsecondaryDimension: \"right\",\n\t\t\t},\n\t\t\tTopLeft: {\n\t\t\t\tprimaryDimension: \"right\",\n\t\t\t\tsecondaryDimension: \"bottom\"\n\t\t\t},\n\t\t\tBottomLeft: {\n\t\t\t\tprimaryDimension: \"right\",\n\t\t\t\tsecondaryDimension: \"top\"\n\t\t\t},\n\t\t\tRightTop: {\n\t\t\t\tprimaryDimension: \"bottom\",\n\t\t\t\tsecondaryDimension: \"left\",\n\t\t\t},\n\t\t\tRightBottom: {\n\t\t\t\tprimaryDimension: \"top\",\n\t\t\t\tsecondaryDimension: \"left\"\n\t\t\t},\n\t\t\tTopRight: {\n\t\t\t\tprimaryDimension: \"left\",\n\t\t\t\tsecondaryDimension: \"bottom\"\n\t\t\t},\n\t\t\tBottomRight: {\n\t\t\t\tprimaryDimension: \"left\",\n\t\t\t\tsecondaryDimension: \"top\"\n\t\t\t},\n\t\t\tRight: {\n\t\t\t\tprimaryDimension: \"left\",\n\t\t\t\tsecondaryDimension: \"top\"\n\t\t\t},\n\t\t\tLeft: {\n\t\t\t\tprimaryDimension: \"right\",\n\t\t\t\tsecondaryDimension: \"top\"\n\t\t\t},\n\t\t\tTop: {\n\t\t\t\tprimaryDimension: \"top\",\n\t\t\t\tsecondaryDimension: \"left\"\n\t\t\t},\n\t\t\tBottom: {\n\t\t\t\tprimaryDimension: \"bottom\",\n\t\t\t\tsecondaryDimension: \"left\"\n\t\t\t}\n\t\t};\n\t\t//Had this happen but not reliably. Possible that it fires when the window isn't moving at all and the direction isn't set. Stopgap.\n\t\tif (!DIMENSIONAL_MAP[movingDirection]) {\n\t\t\tconsole.debug(`\"${movingDirection}\" is not a valid argument. Valid options are ${Object.keys(DIMENSIONAL_MAP).join(\", \")}.`);\n\t\t\treturn \"NotMoving\";\n\t\t}\n\n\t\tlet { primaryDimension, secondaryDimension } = DIMENSIONAL_MAP[movingDirection];\n\t\tlet windowArray = this.getWindowArray();\n\t\t//Sorts on the primary dimension; if they're tied, it sorts on the secondary dimension.\n\t\treturn windowArray.sort((a, b) => {\n\t\t\tlet aDim = a[primaryDimension], bDim = b[primaryDimension], comparingDimension = primaryDimension;\n\t\t\tif (aDim === bDim) {\n\t\t\t\taDim = a[secondaryDimension];\n\t\t\t\tbDim = b[secondaryDimension];\n\t\t\t\tcomparingDimension = secondaryDimension;\n\t\t\t}\n\n\t\t\tif (comparingDimension === \"top\" || comparingDimension === \"left\") {\n\t\t\t\t//Will order the array in ascending order.\n\t\t\t\t//In OpenFin's virtual screen, the top-left is the 0,0 point (though it could be (-2000, 2000), or whatever). The higher the top or left, the further to the right the window is. The higher the top number, the closer to the bottom of the screen the window is.\n\t\t\t\treturn aDim - bDim;\n\t\t\t}\n\t\t\t//sort the array in descending order.\n\t\t\t//The higher the right value, the closer the window is to the right of the screen. The higher the bottom number, the closer it is to the toolbar/top of the monitor.\n\t\t\treturn bDim - aDim;\n\n\t\t})[0];\n\n\t}\n\n\t/**\n\t * Used for resize. Grabs the windows on the opposite side of the resize handle.\n\t* @function {function name}\n\t* @param  {type} handle {description}\n\t* @return {type} {description}\n\t*/\n\tgetAnchors(handle) {\n\t\tlet edges = {\n\t\t\ttop: \"bottom\",\n\t\t\tright: \"left\",\n\t\t\tbottom: \"top\",\n\t\t\tleft: \"right\"\n\t\t};\n\n\t\tlet edgeArray = handle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\n\t\tlet anchorNames = [];\n\t\tlet self = this;\n\n\t\tfor (let windowName in this.windows) {\n\t\t\tif (anchorNames.includes(windowName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet win = this.windows[windowName];\n\t\t\tlet isAnchor = true;\n\t\t\tedgeArray.forEach((requestedEdge) => {\n\t\t\t\tlet edge = edges[requestedEdge];\n\t\t\t\tif (win[edge] !== self[edge]) {\n\t\t\t\t\tisAnchor = false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (isAnchor) {\n\t\t\t\tanchorNames.push(windowName);\n\t\t\t}\n\t\t}\n\n\t\treturn anchorNames;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tcalculateOuterBounds() {\n\t\tlet groupBounds = null;\n\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet win = this.windows[windowName];\n\t\t\t// sometimes we get into a state where right and bottom are not set so groups break regtangularity.\n\t\t\tif (!win.right) win.right = win.left + win.width;\n\t\t\tif (!win.bottom) win.bottom = win.top + win.height;\n\t\t\tif (!groupBounds) {\n\t\t\t\tgroupBounds = {\n\t\t\t\t\tmin: {\n\t\t\t\t\t\tx: win.left,\n\t\t\t\t\t\ty: win.top\n\t\t\t\t\t},\n\t\t\t\t\tmax: {\n\t\t\t\t\t\tx: win.right,\n\t\t\t\t\t\ty: win.bottom\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//Did some testing and this is much faster than ternary operators.\n\t\t\tif (win.left < groupBounds.min.x) {\n\t\t\t\tgroupBounds.min.x = win.left;\n\t\t\t}\n\n\t\t\tif (win.top < groupBounds.min.y) {\n\t\t\t\tgroupBounds.min.y = win.top;\n\t\t\t}\n\n\t\t\tif (win.bottom > groupBounds.max.y) {\n\t\t\t\tgroupBounds.max.y = win.bottom;\n\t\t\t}\n\n\t\t\tif (win.right > groupBounds.max.x) {\n\t\t\t\tgroupBounds.max.x = win.right;\n\t\t\t}\n\t\t}\n\t\treturn groupBounds;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} name {description}\n\t* @return {type} {description}\n\t*/\n\tremoveWindow(name) {\n\t\tlet win = this.getWindow(name);\n\t\tif (this.isMovable) win.win._updateOptions({\n\t\t\toptions: {\n\t\t\t\t\"taskbarIconGroup\": win.win.uuid\n\t\t\t}\n\t\t});\n\t\tsuper.removeWindows(name);\n\t\tthis.updateBounds();\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds {description}\n\t* @return {type} {description}\n\t*/\n\tgetDelta(bounds) {\n\t\treturn {\n\t\t\tleft: bounds.left - this.left,\n\t\t\tright: bounds.right - this.right,\n\t\t\theight: bounds.height - this.height,\n\t\t\twidth: bounds.width - this.width\n\t\t};\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds {description}\n\t* @return {type} {description}\n\t*/\n\tsetBounds(bounds) {\n\t\tthis.left = bounds.left;\n\t\tthis.right = bounds.right;\n\t\tthis.bottom = bounds.bottom;\n\t\tthis.top = bounds.top;\n\t\tthis.width = bounds.right - bounds.left;\n\t\tthis.height = bounds.bottom - bounds.top;\n\t\tthis.vertices = this.getCornerObject(bounds);\n\t}\n\t//Leaving here in case we discover bugs in the new scale.\n\tdeprecatedScale(newBounds, anchor, calculator, cb) {\n\t\tif (typeof newBounds.right === \"undefined\") {\n\t\t\tnewBounds.right = newBounds.left + newBounds.width;\n\t\t\tnewBounds.bottom = newBounds.top + newBounds.height;\n\t\t}\n\t\tvar splitHandle = anchor.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\n\t\tlet groupIter = calculator.groupWindowIterator(this, splitHandle[0]);\n\t\tvar movements = {};\n\t\tfor (let win of groupIter) {\n\t\t\twin.onGroupEdge = {};\n\t\t\twin.resizeHandle = splitHandle[0];\n\t\t\t[\"top\", \"right\", \"left\", \"bottom\"].forEach((handle) => {\n\t\t\t\tif (win[handle] === this[handle]) {\n\t\t\t\t\twin.onGroupEdge[handle] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar newHeight = Math.round(newBounds.height * (win.height / this.height));\n\t\t\tvar newWidth = Math.round(newBounds.width * (win.width / this.width));\n\t\t\tvar request = win.getBounds();\n\t\t\trequest.width = newWidth;\n\t\t\trequest.height = newHeight;\n\t\t\trequest.right = request.left + request.width;\n\t\t\trequest.bottom = request.top + request.height;\n\t\t\trequest.name = win.name;\n\n\t\t\tmovements[request.name] = calculator.checkShortCircuits(request);\n\t\t}\n\t\tsplitHandle.forEach((handle) => {\n\t\t\tgroupIter = calculator.groupWindowIterator(this);\n\t\t\t//cleans up the edges of the group in case rounding error messed us up.\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[handle];\n\t\t\tfor (var win of groupIter) {\n\t\t\t\tvar moveRequest = movements[win.name];\n\t\t\t\tif (win.onGroupEdge && win.onGroupEdge[oppEdge] && moveRequest[oppEdge] !== newBounds[oppEdge]) {\n\t\t\t\t\tmoveRequest.name = win.name;\n\t\t\t\t\tmoveRequest[oppEdge] = newBounds[oppEdge];\n\t\t\t\t\tif (oppEdge === \"bottom\") {\n\t\t\t\t\t\tmoveRequest.top = moveRequest.bottom - moveRequest.height;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"top\") {\n\t\t\t\t\t\tmoveRequest.bottom = moveRequest.top + moveRequest.height;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"left\") {\n\t\t\t\t\t\tmoveRequest.right = moveRequest.left + moveRequest.width;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"right\") {\n\t\t\t\t\t\tmoveRequest.left = moveRequest.right - moveRequest.width;\n\t\t\t\t\t}\n\t\t\t\t\tmoveRequest.width = moveRequest.right - moveRequest.left;\n\t\t\t\t\tmoveRequest.height = moveRequest.bottom - moveRequest.top;\n\t\t\t\t\tmovements[win.name] = calculator.checkShortCircuits(moveRequest, win);\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\n\t\tfor (var windowName in movements) { //TODO: make the actual move only happen once. Looks like it happens here and in group.UpdateBounds\n\t\t\tcalculator.moveWindow(movements[windowName]);\n\t\t}\n\n\t\tvar alreadyDanced = [];\n\t\tsplitHandle.forEach((handle) => {\n\t\t\tvar groupIter = calculator.groupWindowIterator(this);\n\t\t\talreadyDanced = [];\n\t\t\tfor (let anchor of groupIter) {\n\t\t\t\tif (!alreadyDanced.includes(anchor.name)) {\n\t\t\t\t\tvar b = doTheConga(anchor, handle); b;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// group.updateBounds();\n\t\t\tgroupIter = calculator.groupWindowIterator(this);\n\t\t\t//cleans up the edges of the group in case rounding error messed us up.\n\t\t\tfor (var win of groupIter) {\n\t\t\t\tif (win.onGroupEdge && win.onGroupEdge[handle] && win[handle] !== newBounds[handle]) {\n\t\t\t\t\tvar moveRequest = win.getBounds();\n\t\t\t\t\tmoveRequest.name = win.name;\n\t\t\t\t\tmoveRequest[handle] = newBounds[handle];\n\n\t\t\t\t\tmoveRequest.width = moveRequest.right - moveRequest.left;\n\t\t\t\t\tmoveRequest.height = moveRequest.bottom - moveRequest.top;\n\n\t\t\t\t\tcalculator.moveWindow(calculator.checkShortCircuits(moveRequest, win));\n\t\t\t\t\tvar b = doTheConga(win, handle); b;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tthis.updateBounds();\n\t\t});\n\n\t\tif (cb) cb();\n\n\t\tfunction doTheConga(win, handle) {\n\t\t\tif (!win) {\n\t\t\t\tLogger.system.warn(\"INVESTIGATE: No win passed to doTheConga\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[handle];\n\n\t\t\tfor (var i = 0, len = win.snappedWindows.length; i < len; i++) {\n\t\t\t\tvar snappedWindowObj = win.snappedWindows[i];\n\t\t\t\tvar snappedWin = calculator.getWindow(snappedWindowObj.name);\n\t\t\t\tif (!snappedWin) {\n\t\t\t\t\tLogger.system.warn(`INVESTIGATE: No Dockable Window found for ${snappedWindowObj.name}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet groupIntersection = snappedWin.groupNames.some(name => win.groupNames.includes(name));\n\t\t\t\tif (!snappedWindowObj.edges[handle] || !groupIntersection) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar req = snappedWin.getBounds();\n\t\t\t\treq.name = snappedWin.name;\n\n\t\t\t\tsnappedWin[oppEdge] = win[handle];\n\t\t\t\tvar top = snappedWin.top, left = snappedWin.left;\n\t\t\t\tif (handle === \"top\") {\n\t\t\t\t\ttop = win.top - snappedWin.height;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"bottom\") {\n\t\t\t\t\ttop = win.bottom;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"right\") {\n\t\t\t\t\tleft = win.right;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"left\") {\n\t\t\t\t\tleft = win.left - snappedWin.width;\n\t\t\t\t}\n\n\t\t\t\tsnappedWin.moveTo(left, top);\n\t\t\t\tvar b = doTheConga(snappedWin, handle); b;\n\t\t\t\talreadyDanced.push(snappedWin.name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {bounds} newBounds Bounds to scale the group to\n\t * @param {string} anchor\n\t * @param {DockingCalculator} calculator\n\t * @param {function} cb\n\t */\n\tscale(newBounds, anchor, calculator, cb) {\n\t\t//If you go bananas and try to make the group have negative height or width, many problems arise. Check to make sure the bounds aren't negative or too tiny.\n\t\tnewBounds = calculator.checkShortCircuits(newBounds, this);\n\t\tlet windowList = this.getWindowArray().map(win => {\n\t\t\treturn {\n\t\t\t\t...win.getBounds(),\n\t\t\t\tname: win.name\n\t\t\t};\n\t\t});\n\t\tlet scaleDescriptor = DockableGroup.getScaleDescriptor(this.getBounds(), newBounds);\n\t\t///eventually Fix this. Right now it'll just go to the top left.\n\t\tlet corners = JSON.parse(JSON.stringify(this.vertices));\n\t\tfor (let corner in corners) {\n\t\t\tcorners[corner.toLowerCase()] = corners[corner];\n\t\t}\n\n\t\tlet anchorPoint = {};\n\t\t//The \"Anchor\" Is where the group is offset by. It's a point. Top/left is a misnomer. After scaling, each window will be shifted by deltaX and deltaY, where the delta is the distance between that window's top left and the anchor's point.\n\t\tif (EDGES.includes(anchor)) {\n\t\t\tanchorPoint.top = newBounds.top;\n\t\t\tanchorPoint.left = newBounds.left;\n\t\t\tswitch (anchor) {\n\t\t\t\tcase \"left\":\n\t\t\t\t\t//When resizing from the left, we want to make sure the right edge of the group doesn't move.\n\t\t\t\t\tanchorPoint.left = newBounds.right;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"top\":\n\t\t\t\t\t//When resizing from the top, we want to make sure the bottom edge of the group doesn't move.\n\t\t\t\t\tanchorPoint.top = newBounds.bottom;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (CORNERS.includes(anchor)) {\n\t\t\t//Get the opposite corner; that's the anchor.\n\t\t\t//e.g., when resizing from the top right, the bottom left shouldn't move at all.\n\t\t\tlet corner = corners[OPPOSITE_EDGE_MAP[anchor]];\n\t\t\tanchorPoint = {\n\t\t\t\ttop: corner.y,\n\t\t\t\tleft: corner.x\n\t\t\t};\n\t\t}\n\t\t//Pass in the list of windows and how we much we want to scale it. This returns a list of mutated window bounds objects.\n\t\tlet scaledWindowList = DockableGroup.getScaledWindowList({\n\t\t\twindowList,\n\t\t\tscaleDescriptor,\n\t\t\tanchor: anchorPoint,\n\t\t\tMINIMUM_HEIGHT: this.MINIMUM_WINDOW_HEIGHT,\n\t\t\tMINIMUM_WIDTH: this.MINIMUM_WINDOW_WIDTH\n\t\t});\n\n\t\t//Actually move the windows.\n\t\tscaledWindowList.forEach(scaledBounds => {\n\t\t\tcalculator.moveWindow(scaledBounds);\n\t\t});\n\t\tvar windowBounds = {};\n\n\t\tthis.getWindowArray()\n\t\t\t.forEach(win => windowBounds[win.name] = win.getBounds());\n\n\t\t/**\n\t\t * 8/13/19 JC: Added true to the end to set 'triggerByAutoArrange', this will tell the calculator to move the group and to save the bounds\n\t\t */\n\t\tcalculator.cleanupSharedEdges(this, windowBounds, true);\n\n\t\tthis.updateBounds();\n\t}\n\n\t/**\n\t * Sets the minimum height and width for windows. This is used when scaling windows. It prevents us from creating very tiny windows when scaling an entire group.\n\t * @param {object} cfg\n\t * @param {number} cfg.MINIMUM_HEIGHT Minimum height a window can scale to.\n\t * @param {number} cfg.MINIMUM_WIDTH Minimum width a window can scale to.\n\t */\n\tsetMinimums(cfg) {\n\t\tif (cfg) {\n\t\t\tthis.MINIMUM_WINDOW_HEIGHT = cfg.MINIMUM_HEIGHT;\n\t\t\tthis.MINIMUM_WINDOW_WIDTH = cfg.MINIMUM_WIDTH;\n\t\t}\n\t}\n\n\t/**\n\t * Returns an array of windows that have an edge on a given line segment.\n\t * @param {object} segment\n\t * @param {object} segment.min minimum point for the line segment.\n\t * @param {number} segment.min.x X coordinate for the minimum point for the line segment.\n\t * @param {number} segment.min.y y coordinate for the minimum point for the line segment.\n\t * @param {object} segment.min maximum point for the line segment.\n\t * @param {number} segment.max.x X coordinate for the maximum point for the line segment.\n\t * @param {number} segment.max.y y coordinate for the maximum point for the line segment.\n\t * @returns {array} windowsOnSegment Array of dockable windows that have an edge on the line segment.\n\t */\n\tgetWindowsOnSegment(segment) {\n\t\tvar windowsOnSegment = [];\n\t\tvar winPool = this.getWindowNames();\n\t\tvar points = [segment.min, segment.max];\n\n\t\tfor (var i = 0; i < winPool.length; i++) {\n\t\t\tlet win = this.getWindow(winPool[i]);\n\t\t\tfor (var p = 0, len = points.length; p < len; p++) {\n\t\t\t\tvar point = points[p];\n\t\t\t\tif (win.pointIsOnBoundingBox(point)) {\n\t\t\t\t\tlet snapObj = {\n\t\t\t\t\t\tname: win.name,\n\t\t\t\t\t\tedge: win.getEdgeByPoint(point)\n\t\t\t\t\t};\n\t\t\t\t\tsnapObj.segment = win.getEdges(\"obj\")[snapObj.edge];\n\t\t\t\t\twindowsOnSegment.push(snapObj);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn windowsOnSegment;\n\t}\n\n\t/**\n\t* Not sure why this function doesn't use the one above. Similar functionality, but you can pass in a string instead of a line segment.\n\t* @todo, make it use the function above.\n\t* @param  {dockableWindow} win\n\t* @param  {string} edge E.g., 'left', 'right', etc.\n\t* @return {array}\n\t*/\n\tgetWindowsOnEdge(win, edge, includeCorners) {\n\t\tif (includeCorners === undefined) {\n\t\t\tincludeCorners = false;\n\t\t}\n\t\tvar windowsOnEdge = [];\n\t\tif (!edge) {\n\n\t\t\t//@todo, what went wrong to cause this.................\n\t\t\treturn [];\n\t\t}\n\n\t\tvar oppEdge = OPPOSITE_EDGE_MAP[edge];\n\t\tvar windowSegment = win.getEdges(\"obj\", includeCorners)[edge];\n\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet possibleSnapper = this.windows[windowName];\n\t\t\tif (possibleSnapper.name === win.name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet segment = possibleSnapper.getEdges(\"obj\", includeCorners)[oppEdge];\n\t\t\tvar shouldPush = false;\n\t\t\tlet points = [{\n\t\t\t\tname: possibleSnapper.name,\n\t\t\t\tval: segment.min\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: possibleSnapper.name,\n\t\t\t\tval: segment.max\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: win.name,\n\t\t\t\tval: windowSegment.min\n\t\t\t}, {\n\t\t\t\tname: win.name,\n\t\t\t\tval: windowSegment.max\n\t\t\t}];\n\t\t\tif ([\"top\", \"bottom\"].includes(edge)) {\n\t\t\t\tif (segment.min.y !== windowSegment.min.y) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpoints = points.sort((a, b) => {\n\t\t\t\t\treturn a.val.x > b.val.x;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif ([\"left\", \"right\"].includes(edge)) {\n\t\t\t\tif (segment.min.x !== windowSegment.min.x) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tpoints = points.sort((a, b) => {\n\t\t\t\t\treturn a.val.y > b.val.y;\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (points[0].name !== points[1].name) {\n\t\t\t\tshouldPush = true;\n\t\t\t}\n\t\t\tif (shouldPush) {\n\t\t\t\tlet snapObj = {\n\t\t\t\t\tname: possibleSnapper.name,\n\t\t\t\t\tedge: oppEdge\n\t\t\t\t};\n\t\t\t\twindowsOnEdge.push(snapObj);\n\t\t\t}\n\t\t}\n\n\t\treturn windowsOnEdge;\n\t}\n\n\t/**\n\t * Given a hole, this function recursively fills the hole, expanding 1 window at a time - until the hole is filled.\n\t * @param {object} hole\n\t * @param {*} cb\n\t */\n\tfillHole(hole, cb = Function.prototype) {\n\t\tthis.fillAttempts++;\n\n\t\tlet myHole = new DockableBox(hole);\n\n\t\t//First, we need to see which windows in this group border our hole.\n\n\t\t//Get the edges in array format, don't include corners in the calculations.\n\t\tlet edges = myHole.getEdges(\"arr\", false);\n\t\tlet candidates = edges.map((edge) => this.getWindowsOnSegment(edge));\n\n\t\t//flatten the array.\n\t\tcandidates = [].concat.apply([], candidates);\n\t\t//If we have no windows bordering the hole, there's nothing we can do.\n\t\tif (!candidates.length) return;\n\n\t\t//We need some of the methods on the docking calculator. This isn't an ideal way to do things. Would be nice if there was some kind of bridge that could allow move requests without needing the calculator.\n\t\t//Chalk that up to a @todo\n\t\tconst calculator = this.getWindow(candidates[0].name).calculator;\n\n\t\t//Bounding box is needed for `sharesAnEdgeWith`.\n\t\tmyHole.windowBoundingBox = BoxMath.getWindowBoundingBox(myHole);\n\n\n\t\t//If the hole takes up the whole width or whole height of the group, we should scale the remaining windows to fill the hole.\n\t\tif ((myHole.width === this.width || myHole.height === this.height) && this.sharesAnEdgeWith(myHole)) {\n\t\t\tlet bounds = {};\n\t\t\t//calculates the bounds of the group prior to the hole being created.\n\t\t\tbounds.left = Math.min(myHole.left, this.left);\n\t\t\tbounds.right = Math.max(myHole.right, this.right);\n\t\t\tbounds.top = Math.min(myHole.top, this.top);\n\t\t\tbounds.bottom = Math.max(myHole.bottom, this.bottom);\n\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\tlet edge = null;\n\n\t\t\t//These are opposite. When the window leaves the group, the bounds are updated. So here, we compare the edge of the window that left to the group. If it was on the left side of the group - the right side of that window will be butted up against the left side of the group after it leaves.\n\t\t\tif (myHole.width === this.width) {\n\t\t\t\tif (myHole.top === this.bottom) edge = \"bottom\";\n\t\t\t\tif (myHole.bottom === this.top) edge = \"top\";\n\t\t\t}\n\t\t\tif (myHole.height === this.height) {\n\t\t\t\tif (myHole.left === this.right) edge = \"right\";\n\t\t\t\tif (myHole.right === this.left) edge = \"left\";\n\t\t\t}\n\t\t\tif (!edge) {\n\t\t\t\treturn new Error(\"No edge found in fillHoles\");\n\t\t\t}\n\t\t\treturn this.scale(bounds, edge, calculator);\n\t\t}\n\n\n\t\t//Once we know that we aren't going to have to scale all of the windows, we get here.\n\t\t//The goal is to do the least amount of damage possible. So if there are 4 windows that border the hole, we will choose the one that will cascade into the fewest windows. If they all impact no other windows, we just choose the first.\n\t\tlet potentialImpact = [];\n\t\tfor (let i = 0; i < candidates.length; i++) {\n\t\t\tlet candidate = candidates[i];\n\t\t\tlet win = this.getWindow(candidate.name);\n\t\t\tlet edge = candidate.edge;\n\n\t\t\t//These are the windows that would be affected if we resized the candidate window.\n\t\t\tlet impactedWindows = this.getWindowsOnEdge(win, edge, false);\n\t\t\tcandidate.impactedWindows = impactedWindows.length;\n\t\t\tcandidate.win = win;\n\t\t\tpotentialImpact.push(candidate);\n\t\t}\n\n\t\t//Goes through and gets the window whose resize would trigger a resize on the fewest windows possible.\n\t\tlet leastImpactfulChange = potentialImpact.reduce(function (p, v) {\n\t\t\treturn (p.impactedWindows < v.impactedWindows ? p : v);\n\t\t});\n\n\t\t//Which edge we're resizing.\n\t\tlet impactedEdge = leastImpactfulChange.edge;\n\t\t//Clone so we don't impact the original windows. Calculate the bounds for our window. We'll use this window if none of the other candidates are better matches.\n\t\tlet newBounds = JSON.parse(JSON.stringify(leastImpactfulChange.win.getBounds()));\n\t\tnewBounds[impactedEdge] = myHole[impactedEdge];\n\t\tnewBounds.height = newBounds.bottom - newBounds.top;\n\t\tnewBounds.width = newBounds.right - newBounds.left;\n\n\n\t\t//We'll use this later.\n\t\tlet holeArea = hole.width * hole.height;\n\t\tlet leastImpactfulArea = newBounds.width * newBounds.height;\n\t\tfor (let i = 0; i < candidates.length; i++) {\n\t\t\tlet candidate = candidates[i];\n\t\t\tlet proposedBounds = JSON.parse(JSON.stringify(candidate.win.getBounds()));\n\t\t\tlet proposedImpactedEdge = candidate.edge;\n\t\t\tproposedBounds[proposedImpactedEdge] = myHole[proposedImpactedEdge];\n\t\t\tproposedBounds.height = proposedBounds.bottom - proposedBounds.top;\n\t\t\tproposedBounds.width = proposedBounds.right - proposedBounds.left;\n\t\t\tlet candidateArea = proposedBounds.height * proposedBounds.width;\n\n\t\t\t//If the candidateArea is less than the holeArea, if the candidateArea is larger than the currently chosen window, and resizing it would cause no more damage than the currently chosen window, it becomes the window to resize.\n\t\t\tif (candidateArea - holeArea > 0 && candidateArea > leastImpactfulArea && candidate.impactedWindows <= leastImpactfulChange.impactedWindows) {\n\t\t\t\tleastImpactfulChange = candidate;\n\t\t\t\tleastImpactfulArea = candidateArea;\n\t\t\t\timpactedEdge = proposedImpactedEdge;\n\t\t\t\tnewBounds = proposedBounds;\n\t\t\t}\n\t\t}\n\t\t//Once we have the window that will cause the least amount of damage, we create a moveRequest to pass to docking. This will be a resize, and it will cascade onto other affected windows.\n\t\tnewBounds.changeType = 1;\n\t\tnewBounds.name = leastImpactfulChange.win.name;\n\t\tnewBounds.resizeHandle = impactedEdge;\n\t\tnewBounds.forceResizeHandle = true;\n\t\tcalculator.requestMove(newBounds, () => {\n\t\t\tthis.updateBounds();\n\n\t\t\t//If we only partially filled the hole, calculate the remaining hole, and call recursively.\n\t\t\tif (!this.isARectangle()) {\n\t\t\t\tif (this.fillAttempts === 20) {\n\t\t\t\t\tlet windowBounds = JSON.stringify(this.getWindowArray().map((win) => win.getBounds()));\n\t\t\t\t\tLogger.system.warn(\"forceObjectsToLogger\", \"FillHoles failed after 20 attempts. Use first string for test case. Second string is hole\", windowBounds, JSON.stringify(myHole.getBounds()));\n\t\t\t\t\tthis.fillAttempts = 0;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet leftovers = BoxMath.clipRect(myHole, new DockableBox(newBounds), impactedEdge);\n\t\t\t\tthis.fillHole(leftovers);\n\t\t\t} else {\n\t\t\t\tcalculator.onMouseUp();\n\t\t\t\tthis.fillAttempts = 0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\n\t}\n\n\tmoveTo(bounds, cb = Function.prototype) {\n\t\t//System moves should already have an anchor window defined. For other moves set choose the top-left window. \n\t\tif (!bounds.anchor) {\n\t\t\tLogger.system.verbose(\"dockableGroup.moveTo: No bounds anchor predefined, defaulting to bottomRight move anchor\");\n\t\t\tbounds.anchor = this.getMoveAnchor(\"BottomRight\");\n\t\t}\n\n\t\t//The group move needs to be handled differently if the move was initiated by the system or auto-arrange.. If a user moved the group neither of these values will be set.\n\t\tconst params = {systemMoved: bounds.systemMoved, triggeredByAutoArrange: bounds.triggeredByAutoArrange};\n\t\tconst calculator = bounds.anchor.calculator;\n\t\tbounds.name = bounds.anchor.name;\n\t\tbounds.changeType = 0;\n\n\t\tcalculator.requestMove(bounds, () => {\n\t\t\tthis.updateBounds();\n\t\t\tcalculator.onMouseUp(params);\n\t\t\tcb();\n\t\t});\n\t}\n\t/**\n\t * In certain configurations, whether a group is a rectangle is _NOT_ the deciding factor in scaling it. Instead, that decision is made based on whether the user is dragging a corner or an edge. If it's a corner, it must not be on another window's edge. If those conditions are met, we scale the group. This function returns the list of x,y points that will trigger this behavior.\n\t */\n\tgetCornersThatCauseScaling() {\n\t\tlet { corners, edges } = this.getCornersAndEdgesOfAllWindows();\n\t\tlet uniqueCorners = corners.filter((value, index, self) => {\n\t\t\tlet firstOccurence = self.findIndex((val) => {\n\t\t\t\treturn val.x === value.x && val.y === value.y;\n\t\t\t});\n\t\t\treturn firstOccurence === index;\n\t\t});\n\t\tlet cornersNotOnEdges = uniqueCorners.filter(corner => {\n\t\t\tlet otherEdges = edges.filter(edge => edge.window !== corner.window);\n\t\t\treturn !otherEdges.some(edge => BoxMath.isPointOnSegment(corner, edge));\n\t\t});\n\t\treturn cornersNotOnEdges;\n\t}\n\n\t/**\n\t * @typedef cornerLabel\n\t * @param {\"topLeft\"|\"topRight\"|\"bottomLeft\"|\"bottomRight\"} Label for the corner.\n\t */\n\n\t/**\n\t * @typedef cornerObject\n\t * @param {string?} window Name of the window the corner belongs to\n\t * @param {number} x X coordinate of the corner\n\t * @param {number} y Y coordinate of the corner\n\t * @param {cornerLabel} label for the corner.\n\t */\n\t/**\n\t * @typedef edgeObject\n\t * @param {string?} window Name of the window the edge belongs to\n\t * @param {object} min Minimum point for line segment\n\t * @param {number} min.x X coordinate of the minimum point for the edge's line segment.\n\t * @param {number} min.y Y coordinate of the minimum point for the edge's line segment.\n\t * @param {object} max maximum point for line segment\n\t * @param {number} max.x X coordinate of the maximum point for the edge's line segment\n\t * @param {number} max.y Y coordinate of the maximum point for the edge's line segment\n\t */\n\t/**\n\t * @typedef {object} cornersAndEdges\n\t * @param {Array<cornerObject>} corners\n\t * @param {Array<edgeObject>} edges\n\t */\n\t/**\n\t * Helper function that will return all corners and all edges for each window in the group.\n\t * @returns {cornersAndEdges} cornersAndEdges Corners and edges.\n\n\t */\n\tgetCornersAndEdgesOfAllWindows() {\n\t\tlet edges = [];\n\n\t\tlet corners = this.getWindowArray().map(win => {\n\t\t\tlet crn = win.getVertices(win.getBounds());\n\t\t\tcrn = crn.map(c => {\n\t\t\t\tc.window = win.name;\n\t\t\t\treturn c;\n\t\t\t});\n\t\t\treturn crn;\n\t\t});\n\n\t\tcorners = corners.reduce((acc, val) => acc.concat(val));\n\n\t\tedges = this.getWindowArray().map(win => {\n\t\t\tlet edg = win.getEdges(\"arr\", true);\n\t\t\tedg = edg.map(e => {\n\t\t\t\te.window = win.name;\n\t\t\t\treturn e;\n\t\t\t});\n\t\t\treturn edg;\n\t\t});\n\t\tedges = edges.reduce((acc, val) => acc.concat(val));\n\t\treturn { corners, edges };\n\t}\n\t/**\n\t * Returns the scale of bounds 1 relative to bounds 2.\n\t * If bounds1 is 1, and bounds2 is 2, the scale will come out as 2.\n\t * If bounds1 is 10 and bounds2 is 5, the scale will come out as 0.5. This is done for both x and y\n\t * @param {bounds} bounds1\n\t * @param {bounds} bounds2\n\t */\n\tstatic getScaleDescriptor(bounds1, bounds2) {\n\t\tconst xScale = bounds2.width / bounds1.width;\n\t\tconst yScale = bounds2.height / bounds1.height;\n\t\treturn {\n\t\t\tx: xScale,\n\t\t\ty: yScale\n\t\t};\n\t}\n\n\t/**\n\t * Essentially moves the window's top-left to the x/y coordinates passed in.\n\t * @param {object} params\n\t * @param {num} params.x x coordinate of a cartesian coordinate pair.\n\t * @param {num} params.y y coordinate of a cartesian coordinate pair.\n\t * @param {bounds} params.bounds bounds object that is being offset\n\t */\n\tstatic getCoordinatesByOffset(params) {\n\t\tconst { x, y, bounds } = params;\n\t\tlet offsetX = bounds.left - x;\n\t\tlet offsetY = bounds.top - y;\n\t\tlet newBounds = {\n\t\t\ttop: bounds.top - offsetY,\n\t\t\tleft: bounds.left - offsetX\n\t\t};\n\t\tnewBounds.height = bounds.height;\n\t\tnewBounds.width = bounds.width;\n\t\tnewBounds.right = newBounds.left + bounds.width;\n\t\tnewBounds.bottom = newBounds.top + bounds.height;\n\t\treturn newBounds;\n\t};\n\t/**\n\t * Given bounds and a scaleDescriptor, returns a scaled bounds object.\n\t * @param {*} params\n\t * @param {object} params.bounds Bounds.\n\t * @param {object} params.scaleDescriptor Tells us how much to scale in the X and Y directions.\n\t * @param {num} params.scaleDescriptor.x 0-Infinity; how much to scale the window in the x direction\n\t * @param {num} params.scaleDescriptor.y 0-Infinity; how much to scale the window in the y direction\n\t * @returns {object} bounds\n\t */\n\tstatic scaleWindow(params) {\n\t\tlet { bounds, scaleDescriptor } = params;\n\n\t\t//\"move\" the window to 0,0 -- makes scaling calculations correct.\n\t\tconst scaledBounds = {\n\t\t\tleft: Math.round(bounds.left * scaleDescriptor.x),\n\t\t\ttop: Math.round(bounds.top * scaleDescriptor.y),\n\t\t\theight: Math.round(bounds.height * scaleDescriptor.y),\n\t\t\twidth: Math.round(bounds.width * scaleDescriptor.x)\n\t\t};\n\t\tscaledBounds.right = scaledBounds.left + scaledBounds.width;\n\t\tscaledBounds.bottom = scaledBounds.top + scaledBounds.height;\n\n\t\treturn scaledBounds;\n\t}\n\n\t/**\n\t * Called after performing scale operations on the group. Depending on where the user scaled the group from, we re-anchor the group so that the move makes sense. Internally, resizes are calculated as if the group was at 0,0. After we do those calculations, we need to re-anchor the group so that the move makes intuitive sense.\n\t * @param {object} params\n\t * @param {array} params.windowList Array of bounds objects. Or windows. Haven't decided.ANGLE_instanced_arrays\n\t * @param {object} params.offset object describing by how much the top and left of a window's bounds should be offset.\n\t * @param {num} params.offset.left how much to offset the left edge of each window in the group.\n\t * @param {num} params.offset.top how much to offset the left edge of each window in the group.\n\t */\n\tstatic offsetGroup(params) {\n\t\tlet { windowList, offset } = params;\n\t\treturn windowList.map(bounds => {\n\t\t\tbounds.left -= offset.left;\n\t\t\tbounds.top -= offset.top;\n\t\t\tbounds.right = bounds.left + bounds.width;\n\t\t\tbounds.bottom = bounds.top + bounds.height;\n\t\t\treturn bounds;\n\t\t});\n\t}\n\n\t/**\n\t * The workhorse of scaling operations. Given a list of windows, how we want to scale them, where to put them after scaling, and a minimum height and width, it will do everything.\n\t * 1. Moves the group to 0,0.\n\t * 2. Calculates the size of each window in the array.\n\t * 3. Actually scales each window.\n\t * 4. Makes sure no windows got too narrow or too short (check minimum height/width).\n\t * 5. Fixes any windows that were too small/too narrow.\n\t * 6. Re-anchors the group so that the move \"feels\" right. See DockableGroup.'offsetGroup' for a better explanation of what \"feels right\" means.\n\t * @param {params} params\n\t * @param {Array<bounds>} params.windowList\n\t * @param {scaleDescriptor} params.scaleDescriptor how much to scale in the x and y dimensions.\n\t * @param {num} param.scaleDescriptor.x How much to scale in the x direction\n\t * @param {num} param.scaleDescriptor.y How much to scale in the y direction\n\t * @param {object} param.anchor top/left coordinates of the 'anchor' for the list of windows. After scaling the windows, we need to make sure every window is reset to this anchor. If one resizes from the bottom right of a group, the top left of the group shouldn't change. If you resize from the top left, the bottom right shouldn't move after scaling.\n\t */\n\tstatic getScaledWindowList(params) {\n\t\tlet { windowList, scaleDescriptor, anchor, MINIMUM_HEIGHT, MINIMUM_WIDTH } = params;\n\t\t///MOVE IT TO 0,0\n\t\twindowList = this.offsetGroup({\n\t\t\twindowList,\n\t\t\toffset: {\n\t\t\t\tleft: anchor.left,\n\t\t\t\ttop: anchor.top\n\t\t\t}\n\t\t});\n\n\t\t///SCALE EVERY WINDOW\n\t\twindowList = windowList.map((bounds) => {\n\t\t\tlet scaledBounds = this.scaleWindow({\n\t\t\t\tbounds,\n\t\t\t\tscaleDescriptor\n\t\t\t});\n\n\t\t\tscaledBounds.name = bounds.name;\n\t\t\treturn scaledBounds;\n\t\t});\n\n\n\t\t//find smallest window. If it's beneath the minimum width/height, scale back out.\n\t\tlet narrowestWindow = windowList.reduce((previousWindow, currentWindow, currentIndex) => {\n\t\t\treturn previousWindow.width < currentWindow.width ? previousWindow : currentWindow;\n\t\t});\n\n\t\tlet shortestWindow = windowList.reduce((previousWindow, currentWindow, currentIndex) => {\n\t\t\treturn previousWindow.height < currentWindow.height ? previousWindow : currentWindow;\n\t\t});\n\n\t\tconst scaleWidthOut = narrowestWindow.width < MINIMUM_WIDTH;\n\t\tconst scaleHeightOut = shortestWindow.height < MINIMUM_HEIGHT;\n\n\t\t//Our narrowest window is _too_ narrow. We need to scale the group back out to make sure windows aren't too narrow.\n\t\tif (scaleWidthOut) {\n\t\t\tlet correctedBounds = JSON.parse(JSON.stringify(narrowestWindow));\n\t\t\tcorrectedBounds.width = MINIMUM_WIDTH;\n\t\t\tcorrectedBounds.right = correctedBounds.left + MINIMUM_WIDTH;\n\n\t\t\tlet newScaleDescriptor = this.getScaleDescriptor(narrowestWindow, correctedBounds);\n\t\t\twindowList = windowList.map((bounds) => {\n\t\t\t\tlet scaledBounds = this.scaleWindow({\n\t\t\t\t\tbounds,\n\t\t\t\t\tscaleDescriptor: newScaleDescriptor\n\t\t\t\t});\n\n\t\t\t\tscaledBounds.name = bounds.name;\n\t\t\t\treturn scaledBounds;\n\t\t\t});\n\t\t}\n\n\t\tif (scaleHeightOut) {\n\t\t\tlet correctedBounds = JSON.parse(JSON.stringify(shortestWindow));\n\t\t\tcorrectedBounds.height = MINIMUM_HEIGHT;\n\t\t\tcorrectedBounds.bottom = correctedBounds.top + MINIMUM_HEIGHT;\n\n\t\t\tlet newScaleDescriptor = this.getScaleDescriptor(shortestWindow, correctedBounds);\n\t\t\twindowList = windowList.map((bounds) => {\n\t\t\t\tlet scaledBounds = this.scaleWindow({\n\t\t\t\t\tbounds,\n\t\t\t\t\tscaleDescriptor: newScaleDescriptor\n\t\t\t\t});\n\t\t\t\tscaledBounds.name = bounds.name;\n\t\t\t\treturn scaledBounds;\n\t\t\t});\n\t\t}\n\t\t///MOVE IT BACK TO WHERE THE ANCHOR IS\n\t\twindowList = this.offsetGroup({\n\t\t\twindowList,\n\t\t\toffset: {\n\t\t\t\tleft: -anchor.left,\n\t\t\t\ttop: -anchor.top\n\t\t\t}\n\t\t});\n\t\treturn windowList;\n\t}\n}\n\n//DockableGroup.prototype = DockableBox;\nexport default DockableGroup;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockableGroup.js","import BoxMath from \"./boxMath\";\nimport Logger from \"../../../clients/logger\";\n\nfunction DockableMonitor(params) {\n\tlet bounds;\n\n\t//Pre-dockable components this function only took bounds. For backwards compatibility if the incoming params do now have a 'bounds' prop, we assume params = bounds\n\tif (!params.hasOwnProperty(\"bounds\")) {\n\t\tbounds = params;\n\t} else {\n\t\tbounds = params.bounds;\n\t}\n\n\tthis.left = bounds.left;\n\tthis.top = bounds.top;\n\tthis.right = bounds.right;\n\tthis.bottom = bounds.bottom;\n\tthis.rawMonitor = params.monitor instanceof DockableMonitor ? params.monitor.rawMonitor : params.monitor; //Need this later in order to do docking related tasks\n\n\t//When docking makes a change to monitor space (claim or unclaim) docking's monitor representation is updated. The rawMonitor (which comes from launcher and is a dumbed-down functionless representation) is not updated at all. We should remove the DockableMonitor reference to rawMonitor, and instead write a function that gets called when a DockableMonitor is updated to update the rawMonitor for launcher's use.\n\tthis.unclaimedRect = params.monitor.unclaimedRect;\n\tthis.availableRect = params.monitor.availableRect;\n\n\tthis.bufferSize = 15;\n\t/**\n\t* @function {function name}\n\t* @param  {type} bufferSize {description}\n\t* @return {type} {description}\n\t*/\n\tthis.setBufferSize = function (bufferSize) {\n\t\tthis.bufferSize = bufferSize;\n\t\tthis.bounds = this.getWindowBoundingBox();\n\t\tthis.calculateSnappingRegions();\n\t};\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tthis.getWindowBoundingBox = function () {\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: this.left,\n\t\t\t\ty: this.top\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right,\n\t\t\t\ty: this.bottom\n\t\t\t}\n\t\t};\n\t};\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds {description}\n\t* @param  {type} edge   {description}\n\t* @return {type} {description}\n\t*/\n\tthis.getSnappingRegion = function (bounds, edge) {\n\t\tlet map = {\n\t\t\tleft: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: bounds.left - this.bufferSize,\n\t\t\t\t\ty: bounds.top\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: bounds.left + this.bufferSize,\n\t\t\t\t\ty: bounds.bottom\n\t\t\t\t}\n\t\t\t},\n\t\t\tright: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: bounds.right - this.bufferSize,\n\t\t\t\t\ty: bounds.top\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: bounds.right + this.bufferSize,\n\t\t\t\t\ty: bounds.bottom\n\t\t\t\t}\n\t\t\t},\n\t\t\tbottom: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: bounds.left,\n\t\t\t\t\ty: bounds.bottom - this.bufferSize,\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: bounds.right,\n\t\t\t\t\ty: bounds.bottom + this.bufferSize\n\t\t\t\t}\n\t\t\t},\n\t\t\ttop: {\n\t\t\t\tmin: {\n\t\t\t\t\tx: bounds.left,\n\t\t\t\t\ty: bounds.top - this.bufferSize\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: bounds.right,\n\t\t\t\t\ty: bounds.top + this.bufferSize\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn map[edge];\n\t};\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tthis.calculateSnappingRegions = function () {\n\t\tthis.snappingRegions = {\n\t\t\ttop: this.getSnappingRegion(bounds, \"top\"),\n\t\t\tright: this.getSnappingRegion(bounds, \"right\"),\n\t\t\tbottom: this.getSnappingRegion(bounds, \"bottom\"),\n\t\t\tleft: this.getSnappingRegion(bounds, \"left\"),\n\t\t};\n\t};\n\t/**\n\t* @function {function name}\n\t* @param  {type} region  {description}\n\t* @param  {type} request {description}\n\t* @return {type} {description}\n\t*/\n\tthis.canSnapToRegion = function (region, request) {\n\t\tvar innerAdjustment = 0 - this.bufferSize;\n\t\treturn BoxMath.intersectBoundingBoxes(this.snappingRegions[region],\n\t\t\t{\n\t\t\t\tmin: {\n\t\t\t\t\tx: request.snappingRegions[region].min.x - innerAdjustment,\n\t\t\t\t\ty: request.snappingRegions[region].min.y - innerAdjustment\n\t\t\t\t},\n\t\t\t\tmax: {\n\t\t\t\t\tx: request.snappingRegions[region].max.x + innerAdjustment,\n\t\t\t\t\ty: request.snappingRegions[region].max.y + innerAdjustment\n\t\t\t\t}\n\t\t\t});\n\t};\n\t/**\n\t* @function {function name}\n\t* @param  {type} request {description}\n\t* @return {type} {description}\n\t*/\n\tthis.canSnapToWindow = function (request) {\n\t\tfor (var region in this.snappingRegions) {\n\t\t\tif (this.canSnapToRegion(region, request)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\t/**\n\t * Determines if supplied window (or request) is near a given edge of the monitor\n\t *\n\t * @param {object} request The move request\n\t * @return {string} A string containing any edges of the monitor the given request is near\n\t */\n\tthis.getSnappedEdge = function (request) {\n\t\tlet snappedEdge = \"\";\n\t\tif (request.top === this.bounds.min.y) {\n\t\t\tsnappedEdge += \"top\";\n\t\t} else if (request.bottom === this.bounds.max.y) {\n\t\t\tsnappedEdge += \"bottom\";\n\t\t}\n\t\treturn snappedEdge;\n\t};\n\t/**\n\t* @function {function name}\n\t* @param  {type} request {description}\n\t* @return {type} {description}\n\t*/\n\tthis.snapWindow = function (request) {\n\t\tvar regionsToSnap = [];\n\t\tfor (var region in this.snappingRegions) {\n\t\t\tif (this.canSnapToRegion(region, request)) {\n\t\t\t\tregionsToSnap.push(region);\n\t\t\t}\n\t\t}\n\t\t//let originalRequest = Object.assign({}, request);\n\t\tregionsToSnap = regionsToSnap.join(\"\");\n\t\tif (regionsToSnap) {\n\t\t\tif (regionsToSnap.includes(\"left\")) {\n\t\t\t\t//if req is to the right of the monitor's left edge.\n\t\t\t\tif (request.left >= this.snappingRegions.left.min.x) {\n\t\t\t\t\trequest.left = this.bounds.min.x;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (regionsToSnap.includes(\"top\")) {\n\t\t\t\t//Top edge of request must be below the top edge of the monitor..\n\t\t\t\tif (request.top >= this.snappingRegions.top.min.y) {\n\t\t\t\t\trequest.top = this.bounds.min.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (regionsToSnap.includes(\"right\")) {\n\t\t\t\t//right edge of request must be to the left of the right edge of the monitor.\n\t\t\t\tif (request.right <= this.snappingRegions.right.max.x) {\n\t\t\t\t\t//move\n\t\t\t\t\tif (request.changeType === 0) {\n\t\t\t\t\t\trequest.left = this.bounds.max.x - request.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequest.right = this.bounds.max.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (regionsToSnap.includes(\"bottom\")) {\n\t\t\t\tif (request.bottom <= this.snappingRegions.bottom.max.y) {\n\t\t\t\t\tif (request.changeType === 0) {\n\t\t\t\t\t\trequest.top = this.bounds.max.y - request.height;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequest.bottom = this.bounds.max.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (request.changeType === 0) {\n\t\t\t\trequest.right = request.left + request.width;\n\t\t\t\trequest.bottom = request.top + request.height;\n\t\t\t} else {\n\t\t\t\trequest.width = request.right - request.left;\n\t\t\t\trequest.height = request.bottom - request.top;\n\t\t\t}\n\t\t\treturn request;\n\t\t}\n\n\t\treturn false;\n\t};\n\t/**\n\t * Takes any snapped edges and a given request (window) and sets the appropriate bounds of the window (when docking, the windows width is expanded to take full screen)\n\t * @param {string} edge A string containing any edges the window could snap to\n\t * @param {object} request The window to dock\n\t * @return {object} The modified request object\n\t */\n\tthis.getDockedPosition = function (edge, request) {\n\t\tif (edge === \"\") return false;\n\t\tif (edge.includes(\"top\")) {\n\t\t\t//Top edge of request must be below the top edge of the monitor..\n\t\t\tif (request.top >= this.snappingRegions.top.min.y) {\n\t\t\t\trequest.top = this.bounds.min.y;\n\t\t\t\trequest.width = this.bounds.max.x - this.bounds.min.x;\n\t\t\t\trequest.left = this.bounds.min.x;\n\t\t\t\trequest.right = this.bounds.max.x;\n\t\t\t\trequest.bottom = request.top + request.height;\n\t\t\t}\n\t\t}\n\n\t\tif (edge.includes(\"bottom\")) {\n\t\t\tif (request.bottom <= this.snappingRegions.bottom.max.y) {\n\t\t\t\trequest.top = this.bounds.max.y - request.height;\n\t\t\t\trequest.width = this.bounds.max.x - this.bounds.min.x;\n\t\t\t\trequest.left = this.bounds.min.x;\n\t\t\t\trequest.right = this.bounds.max.x;\n\t\t\t\trequest.bottom = this.bounds.max.y;\n\t\t\t}\n\t\t}\n\t\treturn request;\n\t};\n\t/**\n\t * Docks a window to an edge if it needs to be. Calls to update dockableMonitor/dockableWindow properties\n\t * @param {object} request The move request\n\t */\n\tthis.dockWindowToMonitor = function (request, width, height) {\n\t\tlet oldBounds = {\n\t\t\twidth: width ? width : request.width,\n\t\t\theight: height ? height : request.height\n\t\t};\n\n\t\tLogger.system.debug(\"dockable.monitor.dockWindowToMonitor\", width, height);\n\t\trequest.height = request.dockedHeight;\n\t\tdelete request.dockedHeight;\n\n\t\tlet snappedEdge = request.hasOwnProperty(\"snappedEdge\") ? request.snappedEdge.toLowerCase() : this.getSnappedEdge(request);\n\t\tdelete request.snappedEdge;\n\t\tlet dockedPos = this.getDockedPosition(snappedEdge, request);\n\n\t\tif (snappedEdge) {\n\t\t\tthis.onClaimedSpaceChanged({ win: dockedPos, oldBounds: oldBounds, location: snappedEdge });\n\t\t\treturn request;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * JSON override method\n\t */\n\tthis.toJSON = function () {\n\t\treturn {\n\t\t\tbounds: this.bounds,\n\t\t\tavailableRect: this.availableRect,\n\t\t\tmonitorRect: this.monitorRect,\n\t\t\tunclaimedRect: this.unclaimedRect,\n\t\t\tname: this.name,\n\t\t\ttop: this.top,\n\t\t\tright: this.right,\n\t\t\tbottom: this.bottom,\n\t\t\tleft: this.left\n\t\t};\n\t};\n\n\t/**\n\t * Undocks a window\n\t * @param {object} request The move request\n\t */\n\tthis.undockWindowFromMonitor = function (request) {\n\t\tLogger.system.debug(\"dockable.monitor.undockWindowFromMonitor\");\n\n\t\t//Old bounds is used by DockableWindow to determine its width and height when its undocked. In this scenario, since we're undocking and will use the oldBounds already stored in DockableWindow, we want to pass in an empty object since oldBounds will be empty when the component is undocked\n\t\tthis.onClaimedSpaceChanged({ win: request, oldBounds: {}, location: \"NONE\" });\n\t\treturn request;\n\t};\n\t \n\t/** \n\t* Removes existing claim space for a window (if any)\n\t* Docks window to new position on that same monitor\n\t* Currently only used for monitor-change events. The window is expected to only move monitors if a monitor is removed,\n\t* so there should be no need to release claimed space on a different monitor than it's updated location.\n\t* @param {object} request move request\n\t* @param width width of the window\n\t* @param height height of the window \n\t*/\n\tthis.redockWindowToMonitor = function (request, width, height) {\n\t\tLogger.system.debug(\"monitors-changed dockable.monitor.undockWindowFromMonitor\");\n\t\tconst oldBounds = {\n\t\t\twidth,\n\t\t\theight\n\t\t};\n\t\trequest.height = request.dockedHeight;\n\t\tconst snappedEdge = request.snappedEdge;\t\n\t\tconst dockedPos = this.getDockedPosition(snappedEdge, request);\n\t\n\t\tif (snappedEdge) {\n\t\t\tthis.onClaimedSpaceChanged({ win: dockedPos, oldBounds: oldBounds, location: snappedEdge, action: \"redock\" });\n\t\t}\n\t};\n\n\tthis.bounds = this.getWindowBoundingBox();\n\tthis.calculateSnappingRegions();\n\tthis.name = bounds.name;\n\n\treturn this;\n}\n\n\n\nexport default DockableMonitor;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockableMonitor.js","/* global RouterClient */\n\nimport BoxMath from \"./boxMath\";\nimport DockableBox from \"./dockableBox\";\nimport { guuid, checkIfBoundsAreEqual } from \"../../../common/disentangledUtils\";\nimport _get from \"lodash.get\";\nimport StorageClient from \"../../../clients/storageClient\";\nimport * as util from \"../../../common/util\";\nimport { MOVE_REASON } from \"../../../common/constants\";\n\n/** Singleton of the Logger class shared among all instances of DockableWindow\n * @TODO Refactor to instance member of class.\n */\nlet Logger;\n/** Singleton of the System class shared among all instances of DockableWindow\n * @TODO Refactor to instance member of class.\n */\nlet System;\n/** Singleton of the Calculator class shared among all instances of DockableWindow\n * @TODO Refactor to instance member of class.\n */\nlet calculator;\n//Need config service in order to see if a particular window is dockable presentationalComponents -> components.Toolbar.component.dockable = true?\nconst _throttle = require(\"lodash.throttle\");\n\n//defaults for the openfin version.\n/*var OF_VERSION = {\n\tmajor: 7,\n\tpatch: 0\n};*/\nvar OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT = true;\nconst BOUNDS_CHANGING = \"bounds-change-request\";\nconst BOUNDS_CHANGED = \"bounds-changed\";\nconst SYSTEM_BOUNDS_CHANGED = \"system-bounds-changed\";\n\nvar warningsSent = {\n\tdisableFrame: false,\n\tsetOpacity: false,\n\taddEventListener: false,\n\tremoveEventListener: false\n};\n\n\nclass DockableWindow extends DockableBox {\n\t/**\n\t *\n\t * @param {*} win Window object; OpenfinWindow, ExternalWindow, etc.\n\t * @param {bounds} bounds initial bounds for the window.\n\t * @param {object} dependencies Dependency object that provides the calculator, System, and Logger.\n\t * @param {DockingCalculator} dependencies.calculator\n\t * @param {System} dependencies.System\n\t * @param {Logger} dependencies.Logger\n\t */\n\tconstructor(win, bounds, dependencies) {\n\t\tsuper(bounds);\n\t\tif (dependencies) {\n\t\t\tcalculator = dependencies.calculator;\n\t\t\tSystem = dependencies.System;\n\t\t\tLogger = dependencies.Logger;\n\t\t} else {\n\t\t\tthrow new Error(\"DockableWindow class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.\");\n\t\t}\n\n\t\t/**@todo Document these vars */\n\t\tthis.win = win;\n\t\tthis.bufferSize = 15;\n\n\t\t// The default is to allow grouping. But if it is disabled using any of the various methods, disable it.\n\t\t// @todo this is unsustainable. Needs some kind of cleanup. Should we differentiate docking/snapping?\n\t\tif (typeof win.canGroup === \"boolean\") {\n\t\t\tthis.canGroup = win.canGroup;\n\t\t} else {\n\t\t\tconst canGroup1 = _get(win, \"windowDescriptor.customData.window.canGroup\", true);\n\t\t\tconst canGroup2 = _get(win, \"windowDescriptor.customData.foreign.services.dockingService.canGroup\", true);\n\t\t\tconst canGroup3 = _get(win, \"windowDescriptor.customData.foreign.services.windowService.allowGrouping\", true);\n\t\t\tthis.canGroup = canGroup1 && canGroup2 && canGroup3;\n\t\t}\n\n\t\tthis.name = this.win.name;\n\t\tthis.uuid = this.win.uuid;\n\t\tthis.guid = guuid();\n\t\tthis.disableFrame();\n\t\tthis.top = bounds.top;\n\t\tthis.left = bounds.left;\n\t\tthis.right = bounds.right;\n\t\tthis.bottom = bounds.bottom;\n\t\tthis.width = bounds.width;\n\t\tthis.height = bounds.height;\n\t\tthis.opacity = 1;\n\t\tthis.events = {};\n\t\tthis.groupNames = [];\n\t\tthis.snappedWindows = [];\n\t\tthis.systemBounds = {};\n\t\tthis.type = win.type;\n\t\tthis.calculator = calculator;\n\t\tthis.logger = Logger;\n\t\tthis.retrievedDockedWindowState = this.retrievedDockedWindowState.bind(this);\n\t\tthis.finishInitialize = this.finishInitialize.bind(this);\n\t\tthis.buildDefaultDockingOptions = this.buildDefaultDockingOptions.bind(this);\n\t\tthis.onBoundsChanged = this.onBoundsChanged.bind(this);\n\t\tthis.onBoundsChanging = this.onBoundsChanging.bind(this);\n\t\tthis.addEventListener = this.addEventListener.bind(this);\n\t\tthis.removeEventListener = this.removeEventListener.bind(this);\n\t\tthis.requestBoundsChange = this.requestBoundsChange.bind(this);\n\t\tthis.getDockedStringFromLocation = this.getDockedStringFromLocation.bind(this);\n\t\tthis.hiddenUnclaimSpace = this.hiddenUnclaimSpace.bind(this);\n\t\tthis.unhiddenClaimSpace = this.unhiddenClaimSpace.bind(this);\n\t\tthis.onSystemMovedWindow = this.onSystemMovedWindow.bind(this);\n\t\tthis.dock = this.dock.bind(this);\n\t\tthis.undock = this.undock.bind(this);\n\t\tthis.resizeThrottlePeriod = 5;\n\n\t\tLogger.system.debug(\"dockableWindow constructing\", this.name);\n\n\t\t//This is triggered on a window move which is done by the user dragging a held down mouse over a window. In other words, this is only !finishedMove when a user is moving the window\n\t\t// DH 3/6/2019 Setting the \"markDirty\" param to false ensures instantiating\n\t\t// the DockableWindow doesn't mistakenly mark the workspace dirty.\n\t\tthis.win._stopMove(false);\n\t\tconst startTime = Date.now();\n\t\tthis.lastBoundsAdjustment = startTime;\n\t\tthis.resizeHandle = null;\n\t\tthis.animate = this.animatePositionAndHeight;\n\n\t\t//Needed for dockable components that don't have a static grabber on the side of the component (mostly for when there are dockable windows). When a user undocks the component, they can undock it from anywhere in the components header bar, this will center the window on the undock, so that when the window shrinks back to its old size, the mouse will be in the center\n\t\tthis.shouldOffsetByMouse = false;\n\n\t\t//A DockableWindow can refuse tabbing or tiling requests with the right config props\n\t\tthis.allowTiling = typeof win.tiling == \"boolean\" ? win.tiling : true;\n\t\tthis.allowTabbing = win.tabbing;\n\t\tthis.ignoreTilingAndTabbingRequests = !this.allowTiling && !this.allowTabbing;\n\t\tthis.canMinimize = win.minimize;\n\n\t\t// If the windowOptions say to show the taskbar icon, respect that. Default to true.\n\t\t// This value is checked inside of showTaskbarIcon()\n\t\tthis.shouldShowTaskbarIcon = win.windowOptions && typeof win.windowOptions.showTaskbarIcon !== \"undefined\" ? win.windowOptions.showTaskbarIcon : true;\n\t\tthis.setBoundingBoxes();\n\t\tthis.addListeners();\n\t\t//Disable the frame so that users cannot move the window. Only we move the window after we verify that their intended movement shouldn't result in a snap.\n\t\tthis.setOpacity = _throttle(this.setOpacity, 100, { trailing: true });\n\n\t\tlet options = win.hasOwnProperty(\"dockingOptions\") ? win.dockingOptions : null;\n\t\tlet dockingDefaults = options !== null ? this.buildDefaultDockingOptions(options) : { isDockable: false };\n\n\t\t// flag indicating if this a monitor-docked window (e.g. a toolbar)\n\t\tthis.isDockableComponent = dockingDefaults.isDockable;\n\n\t\tthis.monitorDockablePositions = {};\n\t\tif (dockingDefaults.isDockable) {\n\t\t\tif (Array.isArray(options.dockable)) {\n\t\t\t\toptions.dockable.map((option, i) => {\n\t\t\t\t\t//make upper case\n\t\t\t\t\toption = option.toUpperCase();\n\n\t\t\t\t\tif (option === \"TOP\") this.monitorDockablePositions.TOP = 0;\n\t\t\t\t\tif (option === \"LEFT\") this.monitorDockablePositions.LEFT = 1;\n\t\t\t\t\tif (option === \"RIGHT\") this.monitorDockablePositions.RIGHT = 2;\n\t\t\t\t\tif (option === \"BOTTOM\") this.monitorDockablePositions.BOTTOM = 3;\n\t\t\t\t});\n\t\t\t\tthis.monitorDockablePositions.NONE = 4;\n\t\t\t} else {\n\t\t\t\t//If options.dockable is not supplied, or it is just 'true' that means this window can dock everywhere\n\t\t\t\tthis.monitorDockablePositions = {\n\t\t\t\t\tTOP: 0,\n\t\t\t\t\tLEFT: 1,\n\t\t\t\t\tRIGHT: 2,\n\t\t\t\t\tBOTTOM: 3,\n\t\t\t\t\tNONE: 4\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t//pass through from the windowWrap. This property is added during the registration. Options include, min/max height/width, whether the window is dockable, whether it starts docked, etc.\n\t\tthis.dockingOptions = win.dockingOptions;\n\t\tthis.dockedPosition = this.monitorDockablePositions.NONE;\n\t\tthis.ignoreSnappingRequests = options && options.ignoreSnappingRequests || options && options.ephemeral; // OR if isEphemeral is true\n\t\tthis.dockedDimensions = {\n\t\t\twidth: dockingDefaults.dockedWidth,\n\t\t\theight: dockingDefaults.dockedHeight\n\t\t};\n\n\t\t//If overwriteDockedOptions is true we should expect there to be some information regarding this component in memory. That saved information will provide bounds for where the window should spawn\n\t\tlet startsDocked = options !== null && typeof options.startsDocked === \"string\" ? options.startsDocked : \"none\";\n\n\t\tif (this.isDockableComponent && options && options.overwriteDockedOptions) {\n\n\t\t\t// first look in component state for cached toolbar location -- this is only for backwards compatability with vertions before 3.9\n\t\t\tthis.win.getComponentState({}, async (err, result) => {\n\t\t\t\tLogger.system.debug(\"MONITOR: getComponentState\", err, result);\n\t\t\t\tlet monitorChanged, isToolbarVisible;\n\n\t\t\t\t// for backwards compatability check if bounds data in component state, if not then check in storage\n\t\t\t\tif (!result || !result.hasOwnProperty(\"window-bounds\") || result[\"window-bounds\"] == null) {\n\t\t\t\t\tLogger.system.debug(\"MONITOR: read monitor-docked data from storage\", err, result);\n\n\t\t\t\t\t// get data from storage -- this is the normal path\n\t\t\t\t\tresult = await StorageClient.get({ topic: win.name, key: win.name });\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.debug(\"MONITOR: using monitor-docked data from component state\", err, result);\n\t\t\t\t\t// since the bounds data is in component state only for backwords compatability, use it this time then remove it so that going forward the lastest values will be picked up from storage.\n\t\t\t\t\tthis.win.setComponentState({\n\t\t\t\t\t\tfield: \"window-bounds\",\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tLogger.system.debug(\"MONITOR: DockableWindow get results\", err, result);\n\n\t\t\t\tlet visible = (result && result.hasOwnProperty(\"visible\") && typeof result.visible === \"boolean\") ? result.visible : true;\n\t\t\t\tlet windowBounds = result && result.hasOwnProperty(\"window-bounds\") && result[\"window-bounds\"] !== null ? result[\"window-bounds\"] : null;\n\t\t\t\tlet savedMonitorData = result ? result.monitorData : null;\n\n\t\t\t\t// if all the saved data is available, then check if monitor changed since last restart;\n\t\t\t\t// Note: currently monitorChanged is only used for diagnostics, but later will be used to affect window placement\n\t\t\t\tif (windowBounds && savedMonitorData) {\n\t\t\t\t\tmonitorChanged = await this.monitorChanged(savedMonitorData);\n\n\t\t\t\t\t// else since all the data isn't available, assume the monitors did not change since last restart;\n\t\t\t\t} else {\n\t\t\t\t\tmonitorChanged = false;\n\t\t\t\t}\n\n\t\t\t\t// if could not find bounds data either in window state or in storage, then use default settings.\n\t\t\t\tif (!windowBounds) {\n\t\t\t\t\tLogger.system.debug(\"MONITOR: DockableWindow using defaults.\", err);\n\n\t\t\t\t\tthis.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];\n\t\t\t\t\tthis.undockedPosition = {\n\t\t\t\t\t\twidth: dockingDefaults.undockedWidth,\n\t\t\t\t\t\theight: dockingDefaults.undockedHeight\n\t\t\t\t\t};\n\n\t\t\t\t\twin._show();\n\t\t\t\t} else {\n\t\t\t\t\t// since have window Bounds, check if in visible space.  If not in visible space then will adjust bounds to be visible\n\t\t\t\t\tlet boundsToCheck = util.clone(windowBounds);\n\t\t\t\t\tboundsToCheck.isDocked = (windowBounds.dockedPosition !== this.monitorDockablePositions.NONE) ? true : false;\n\t\t\t\t\twindowBounds = util.adjustWindowIfInTaskbarSpace(boundsToCheck);\n\t\t\t\t\tLogger.system.debug(\"MONITOR: DockableWindow status\", result, monitorChanged, isToolbarVisible, boundsToCheck, windowBounds);\n\n\t\t\t\t\tthis.top = windowBounds.top;\n\t\t\t\t\tthis.bottom = windowBounds.bottom;\n\t\t\t\t\tthis.left = windowBounds.left;\n\t\t\t\t\tthis.right = windowBounds.right;\n\t\t\t\t\tthis.width = windowBounds.width;\n\t\t\t\t\tthis.height = windowBounds.height;\n\t\t\t\t\tthis.dockedPosition = windowBounds.dockedPosition;\n\n\t\t\t\t\t// move undocked toolbar to its previously saved location\n\t\t\t\t\tthis.setBounds(windowBounds, (err) => {\n\t\t\t\t\t\t// NOTE: there is a bug related to the \"hidden\" event that prevents visible state from being saved, so initial visiblity will alway be true until bug fixed\n\t\t\t\t\t\tif (visible) {\n\t\t\t\t\t\t\twin._show();\n\t\t\t\t\t\t\t// observed problem with toolbar not being on top, so bring to front to\n\t\t\t\t\t\t\twin._bringToFront();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.undockedPosition = {\n\t\t\t\t\twidth: dockingDefaults.undockedWidth,\n\t\t\t\t\theight: dockingDefaults.undockedHeight\n\t\t\t\t};\n\n\t\t\t\tthis.dockedParams = {\n\t\t\t\t\twidth: dockingDefaults.dockedWidth,\n\t\t\t\t\theight: dockingDefaults.dockedHeight\n\t\t\t\t};\n\n\t\t\t\t//@todo here we should check to see if the window's bounds match monitor bounds. If so, dock it. For now, we have a hack to not save the toolbar's location on dock.\n\t\t\t\tthis.finishInitialize(options);\n\n\t\t\t});\n\n\t\t} else if (dockingDefaults.isDocked && this.monitorDockablePositions.hasOwnProperty(startsDocked.toUpperCase())) {\n\t\t\tthis.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];\n\t\t\tthis.undockedPosition = {\n\t\t\t\twidth: dockingDefaults.undockedWidth,\n\t\t\t\theight: dockingDefaults.undockedHeight\n\t\t\t};\n\t\t\tthis.finishInitialize(options);\n\t\t}\n\t}\n\t// For diagnostics.\n\t// \tthis.wipeMethodCalls = this.wipeMethodCalls.bind(this);\n\t// \tthis.wipeMethodCalls();\n\t// \twindow.wipeMethodCalls = this.wipeMethodCalls;\n\t// }\n\t// wipeMethodCalls() {\n\t// \tfor (let m in this) {\n\t// \t\tif (typeof this[m] === \"function\") {\n\t// \t\t\tconsole.log(\"FUNCTION\", m);\n\t// \t\t\t//window.methodCalls[m] = 0;\n\t// \t\t} else {\n\t// \t\t\tconsole.log(\"NON FUNCTION\", m);\n\t// \t\t}\n\t// \t}\n\t// \t//window.methodCalls['setBounds'] = 0;\n\t// }\n\n\t/**\n\t * Returns turn if the current monitor dimensions are different from the previous monitor dimensions\n\t * @param {array} previousMonitorData the previous monitor info (an array of monitors)\n\t */\n\tmonitorChanged(previousMonitorData) {\n\t\tconst monitorChangedPromiseResolver = (resolve) => {\n\t\t\tSystem.getMonitorInfo((monitorInfo) => {\n\t\t\t\tlet monitorData = [monitorInfo.primaryMonitor, ...monitorInfo.nonPrimaryMonitors];\n\t\t\t\tlet changed = false;\n\t\t\t\tif (monitorData && previousMonitorData && (monitorData.length == previousMonitorData.length)) {\n\t\t\t\t\tfor (let i = 0; i < monitorData.length; i++) {\n\t\t\t\t\t\t// since claimed space may change monitor dimensions, must compare against availableRect (which is independent of claimed space)\n\t\t\t\t\t\tif (monitorData[i].availableRect.top != previousMonitorData[i].availableRect.top) changed = true;\n\t\t\t\t\t\tif (monitorData[i].availableRect.bottom != previousMonitorData[i].availableRect.bottom) changed = true;\n\t\t\t\t\t\tif (monitorData[i].availableRect.left != previousMonitorData[i].availableRect.left) changed = true;\n\t\t\t\t\t\tif (monitorData[i].availableRect.right != previousMonitorData[i].availableRect.right) changed = true;\n\t\t\t\t\t\tif (changed) break;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\tthis.logger.system.debug(\"MONITOR: DockableWindow.monitorChanged\", \"monitorData\", monitorData, \"previousMonitorData\", previousMonitorData, changed ? \"changed\" : \"not changed\");\n\t\t\t\tresolve(changed);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(monitorChangedPromiseResolver);\n\t}\n\n\t/**\n\t * Returns turn if the toolber handle (i.e. what the user can grab to move toolbar) is visible on one of the current monitors (based on the toolbars current bounds\n\t * @param {array} currentBounds the toolbars current bounds\n\t */\n\tisToolbarVisible(currentBounds) {\n\t\tconst isToolbarVisiblePromiseResolver = (resolve) => {\n\t\t\tSystem.getMonitorInfo((monitorInfo) => {\n\t\t\t\tlet monitorData = [monitorInfo.primaryMonitor, ...monitorInfo.nonPrimaryMonitors];\n\t\t\t\tlet isVisible = false;\n\n\t\t\t\t// calculate the approximate bounds of the toolbar \"handle\", based on the current toolbar bounds;\n\t\t\t\t// if these four points are within a single monitor then visible;\n\t\t\t\t// this function is not exact since toolbar might span monitors but close enough until we rearchitect -- at worst will just move toolbar to default position;\n\t\t\t\t// note the rightReference is calculated in relation to the left bounds\n\t\t\t\tlet topReference = currentBounds.top + 5;\n\t\t\t\tlet bottomReference = currentBounds.bottom - 5;\n\t\t\t\tlet leftReference = currentBounds.left + 5;\n\t\t\t\tlet rightReference = currentBounds.left + 20;\n\n\t\t\t\tfor (let i = 0; i < monitorData.length; i++) {\n\t\t\t\t\tlet topOK = false;\n\t\t\t\t\tlet bottomOK = false;\n\t\t\t\t\tlet leftOK = false;\n\t\t\t\t\tlet rightOK = false;\n\n\t\t\t\t\t// since claimed space may change monitor dimensions, must compare against availableRect (which is independent of claimed space)\n\t\t\t\t\tif (topReference >= monitorData[i].monitor.scaledRect.top) topOK = true;\n\t\t\t\t\tif (bottomReference <= monitorData[i].monitor.scaledRect.bottom) bottomOK = true;\n\t\t\t\t\tif (leftReference >= monitorData[i].monitor.scaledRect.left) leftOK = true;\n\t\t\t\t\tif (rightReference <= monitorData[i].monitor.scaledRect.right) rightOK = true;\n\n\t\t\t\t\tisVisible = topOK && bottomOK && leftOK && rightOK;\n\n\t\t\t\t\tif (isVisible) break;\n\t\t\t\t}\n\t\t\t\tthis.logger.system.debug(\"MONITOR: DockableWindow.isToolbarVisible\", \"monitorData\", monitorData, \"currentBounds\", currentBounds, isVisible ? \"isVisible\" : \"not visible\");\n\t\t\t\tthis.logger.system.debug(\"MONITOR: DockableWindow.isToolbarVisible T-B-L-R=\", topReference.toString(), bottomReference.toString(), leftReference.toString(), rightReference.toString());\n\t\t\t\tresolve(isVisible);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(isToolbarVisiblePromiseResolver);\n\t}\n\n\t/**\n\t * Returns a string representation of the docked location\n\t * @param {number} dockedPosition The integer value of the docked position\n\t */\n\tgetDockedStringFromLocation(dockedPosition) {\n\t\tlet locValue = null;\n\t\tfor (let i = 0; i < Object.keys(this.monitorDockablePositions).length; i++) {\n\t\t\tlet key = Object.keys(this.monitorDockablePositions)[i];\n\t\t\tif (this.monitorDockablePositions[key] === this.dockedPosition) {\n\t\t\t\tlocValue = key.toUpperCase();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn locValue;\n\t}\n\n\t/**\n\t * Uses the state retrieved from storage and config to determine where to dock and dockable windows\n\t * @param {object} params\n\t * @param {Error} err The error, if any, returned from retrieving storage data\n\t * @param {object} result The resulting data from storage\n\t * @param {object} dockingDefaults The defaults to apply to dockable components\n\t * @param {object} options The options retrieved from the config\n\t * @param {boolean} startsDocked If true, the toolbar should dock\n\t */\n\tretrievedDockedWindowState(params) {\n\n\t\tconst { err, result, dockingDefaults, options, startsDocked } = params;\n\n\t\tif (err && err !== \"Not found\") {\n\t\t\tLogger.system.error(\"Error retrieving component state. Using defaults.\");\n\t\t\tthis.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];\n\t\t\tthis.undockedPosition = {\n\t\t\t\twidth: dockingDefaults.undockedWidth,\n\t\t\t\theight: dockingDefaults.undockedHeight\n\t\t\t};\n\t\t\tthis.finishInitialize(options);\n\t\t\treturn;\n\t\t}\n\n\t\tlet windowBounds = result && result.hasOwnProperty(\"window-bounds\") && result[\"window-bounds\"] !== null ? result[\"window-bounds\"] : null;\n\n\t\tif (!windowBounds) {\n\t\t\tthis.dockedPosition = this.monitorDockablePositions[startsDocked.toUpperCase()];\n\t\t} else {\n\t\t\tthis.top = windowBounds.top;\n\t\t\tthis.bottom = windowBounds.bottom;\n\t\t\tthis.left = windowBounds.left;\n\t\t\tthis.right = windowBounds.right;\n\t\t\tthis.width = windowBounds.width;\n\t\t\tthis.height = windowBounds.height;\n\t\t\tthis.dockedPosition = windowBounds.dockedPosition;\n\t\t}\n\n\t\tthis.undockedPosition = {\n\t\t\twidth: dockingDefaults.undockedWidth,\n\t\t\theight: dockingDefaults.undockedHeight\n\t\t};\n\n\t\tthis.dockedParams = {\n\t\t\twidth: dockingDefaults.dockedWidth,\n\t\t\theight: dockingDefaults.dockedHeight\n\t\t};\n\t\t//@todo here we should check to see if the window's bounds match monitor bounds. If so, dock it. For now, we have a hack to not save the toolbar's location on dock.\n\t\tthis.finishInitialize(options);\n\t}\n\n\t/**\n\t * Finishes the initialization of this dockable window\n\t * @param {object} dockingDefaults Defaults that have been determined by incoming config\n\t * @param {object} options\n\t */\n\tasync finishInitialize(options) {\n\t\t//This allows the config to specify whether a dockable component should show on the taskbar\n\t\tthis.shouldShowTaskbarIcon = options !== null && options.hasOwnProperty(\"showTaskbarIcon\") ? options.showTaskbarIcon : true;\n\t\tthis.isDocked = (this.dockedPosition !== this.monitorDockablePositions.NONE) ? true : false;\n\n\t\t//If the registering window is dockable, and wants to 'start docked' we need to determine which of the dockable positions it requests to start docked in. If the position is found, we call to dock it which will set the appropriate variables and move any launched windows out of its space.\n\t\tif (this.isDocked) {\n\t\t\t//We only dock the window if it's visible. If it's hidden, we don't want to claim space.\n\t\t\tlet locValue = this.getDockedStringFromLocation(this.dockedPosition);\n\t\t\tif (locValue !== null) {\n\t\t\t\tlet monitor = this.calculator.getMonitorForWindow(this);\n\t\t\t\tlet windowBounds = {\n\t\t\t\t\ttop: this.top,\n\t\t\t\t\tbottom: this.bottom,\n\t\t\t\t\tleft: this.left,\n\t\t\t\t\tright: this.right,\n\t\t\t\t\twidth: this.width,\n\t\t\t\t\theight: this.height\n\t\t\t\t};\n\n\t\t\t\t//Handles dimensions that need window specific calculations\n\t\t\t\tswitch (locValue) {\n\t\t\t\t\tcase \"TOP\":\n\t\t\t\t\t\twindowBounds.height = this.dockedParams.height;\n\t\t\t\t\t\twindowBounds.top = monitor.top;\n\t\t\t\t\t\twindowBounds.bottom = monitor.top + windowBounds.height;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"BOTTOM\":\n\t\t\t\t\t\twindowBounds.height = this.dockedParams.height;\n\t\t\t\t\t\twindowBounds.top = monitor.bottom - windowBounds.height;\n\t\t\t\t\t\twindowBounds.bottom = monitor.bottom;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t//Handles dimensions that need monitor specific calculations\n\t\t\t\tswitch (locValue) {\n\t\t\t\t\tcase \"TOP\":\n\t\t\t\t\tcase \"BOTTOM\":\n\t\t\t\t\t\twindowBounds.left = monitor.left;\n\t\t\t\t\t\twindowBounds.right = monitor.right;\n\t\t\t\t\t\twindowBounds.width = monitor.unclaimedRect.width;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"LEFT\":\n\t\t\t\t\tcase \"RIGHT\":\n\t\t\t\t\t\twindowBounds.top = monitor.top;\n\t\t\t\t\t\twindowBounds.bottom = monitor.bottom;\n\t\t\t\t\t\twindowBounds.height = monitor.unclaimedRect.height;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tthis.setBounds(windowBounds, (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tLogger.system.error(\"Error moving dockable component to default docked position\");\n\t\t\t\t\t}\n\t\t\t\t\tthis.dockedHeight = this.dockedParams.height;\n\t\t\t\t\tmonitor.dockWindowToMonitor(this, this.undockedPosition.width, this.undockedPosition.height);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// now that window is up, make sure the monitor data is save (also saved when bounds change or monitors change)\n\t\tthis.saveDockableData();\n\t}\n\n\t/**\n\t * Function to respond to finWindow bounds-changed events. Currently we only respond to this event in some cases.\n\t * Aero_key: Sets bounds after an aero snap action is initiated (windows key + arrow key). Only triggers if Aero is enabled.\n\t * System_restored: Triggered when a window is restored from minimized outside of Finsemble. This code block should only be hit if the\n\t\t\tmonitor configuration has changed after a window is minimized and the window's old restore position would be partially off-monitor.\n\t\t\tThe OS does not change the bounds of minimized windows, so they only action we can take\tis to force it on monitor.\n\t * @param {object} e The event\n\t */\n\tonSystemMovedWindow(e) {\n\t\tlet incomingBounds = util.clone(e.data);\n\t\tlet bounds;\n\t\tswitch(e.data.action) {\n\t\t\tcase MOVE_REASON.AERO_KEY:\n\t\t\t\t//If the user is moving the window (and not the OS) these movements will be handled elsewhere\n\t\t\t\tif (!this.win.finishedMove) return;\n\t\t\t\tLogger.system.log(\"aero_key: aero key action occurred\", e.data.action);\n\t\t\t\tif (this.calculator.enableWindowsAeroSnap) {\n\t\t\t\t\tbounds = incomingBounds;\n\t\t\t\t} else {\n\t\t\t\t\tbounds = this.getBounds();\n\t\t\t\t}\n\t\t\t\tLogger.system.verbose(`aero_key: aero key action occurred. Action: ${e.data.action}, bounds: ${bounds}`);\n\t\t\t\t// Docking listens for a restoreFromMaximized message on the router.\n\t\t\t\t// That doesn't happen when aero-snap triggers a restore after the window is maximized.\n\t\t\t\t// Here we manually reset the isMaximized flag.\n\t\t\t\tthis.isMaximized = false;\n\t\t\t\t//Update the Finsemble bounds after aero snap\n\t\t\t\t//For groups, break the group and and only aero snap the selected window.\n\t\t\t\tthis.setBounds(bounds, () => {\n\t\t\t\t\tthis.calculator.removeWindowFromAllGroups(this, true);\n\t\t\t\t\tthis.calculator.buildSnapRelationships(this);\n\t\t\t\t\tthis.calculator.updateGroupData();\n\t\t\t\t\t// Move out of claimed space was happening too soon. The method was firing before the OS had moved the windows,\n\t\t\t\t\t// so at that point the window wasn't in claimed space. The timeout fixes that even with zero delay,\n\t\t\t\t\t// cause there is still the delay of going through the timeout\n\t\t\t\t\tsetTimeout(() => this.calculator.moveWindowOutOfClaimedSpaceByName(this.name), 0);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\t// Triggered when a window is restored outside of finsemble (such as from the taskbar), and the previous window position would now be off-monitor\n\t\t\t// The OS does not move minimized windows when a monitor changes so we have to move the window on monitor when it is restored.\n\t\t\tcase MOVE_REASON.SYSTEM_RESTORED:\n\t\t\tdefault:\n\t\t\t\tbounds = incomingBounds;\n\t\t\t\tlet adjustedBounds;\n\n\t\t\t\t// Because we don't get an updated window position when a window is restored off monitor, we must force the window onto a monitor so it isn't lost\n\t\t\t\t// Prioritize the current monitor if it exists so windows restore on the same monitor they were minimized from.\n\t\t\t\tconst updatedMonitor = this.calculator.getUpdatedWindowMonitorIfItExists(this.monitor);\n\t\t\t\tif (updatedMonitor) {\n\t\t\t\t\tlet response = util.getNewBoundsWhenMovedToMonitor(updatedMonitor, bounds);\n\t\t\t\t\tadjustedBounds = response.newBounds;\n\t\t\t\t} else {\n\t\t\t\t\t// If the current monitor no longer exists, choose the monitor to restore to based on distance to the passed in bounds\n\t\t\t\t\tadjustedBounds = util.adjustBoundsToBeOnMonitor(bounds);\n\t\t\t\t}\n\t\t\t\t// If the bounds haven't changed, the window wasn't restored after a monitor change and doesn't need to be forced on monitor\n\t\t\t\t// One exception is assimilated windows, which do get moved on monitor when restored. If these windows has been moved after a monitor change, we need to update the bounds\n\t\t\t\t// so Finsemble knows where they are.\n\t\t\t\tif (!checkIfBoundsAreEqual(bounds, adjustedBounds) || bounds.force) {\n\t\t\t\t\tconst group = this.calculator.getMovableGroup(this.name);\n\n\t\t\t\t//If the window is in a group, wait until all the events come in before trying to move the event\n\t\t\t\t\tif (group) {\n\t\t\t\t\t\tLogger.system.verbose(`dockableWindow.onSystemMovedWindow system_restored: Window ${this.name} is in a group, updated bounds for restore ${JSON.stringify(adjustedBounds)}`);\n\t\t\t\t\t\tgroup.deferSystemMove({name: this.name, bounds: adjustedBounds}, this.calculator);\n\t\t\t\t//Otherwise update the bounds to the values passed in.\n\t\t\t\t\t} else {\t\t\t\t\t\n\t\t\t\t\t\tLogger.system.verbose(`dockableWindow.onSystemMovedWindow system_restored: Window ${this.name} is restoring to new position: ${JSON.stringify(adjustedBounds)}`);\n\t\t\t\t\t\tthis.setBounds(adjustedBounds);\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t}\t\t\n\t}\n\n\t/**\n\t * Builds default docking options for dockable windows\n\t * @param {object} options Taken from the incoming config\n\t * @return {object} The docking defaults\n\t */\n\tbuildDefaultDockingOptions(options) {\n\t\t//Building a default options object based on the incoming config props. Since windows can have different dockable areas and different starting docked positions, we must build starting props based on those options.\n\t\tlet hasUndockedParams = this.win.hasOwnProperty(\"dockingOptions\") && this.win.dockingOptions.hasOwnProperty(\"undockedParams\");\n\t\tlet hasDockedParams = this.win.hasOwnProperty(\"dockingOptions\") && this.win.dockingOptions.hasOwnProperty(\"dockedParams\");\n\t\tlet dockingDefaults = {\n\t\t\tisDockable: options !== null && (options.dockable === true || Array.isArray(options.dockable)) ? true : false,\n\t\t\tundockedWidth: hasUndockedParams ? this.win.dockingOptions.undockedParams.width : 300,\n\t\t\tundockedHeight: hasUndockedParams ? this.win.dockingOptions.undockedParams.height : 30,\n\t\t\tisDocked: options !== null && options.hasOwnProperty(\"startsDocked\") ? true : false,\n\t\t\tdockedWidth: hasDockedParams ? this.win.dockingOptions.dockedParams.width : 300,\n\t\t\tdockedHeight: hasDockedParams ? this.win.dockingOptions.dockedParams.height : 39\n\t\t};\n\t\treturn dockingDefaults;\n\t}\n\n\t/**\n\t * Function to handle chain of events when a dockable component type is docked\n\t *\n\t * @param {object} monitor Information about the monitor the component was docked to\n\t * @param {string} location A string containing the location to dock to: \"TOP\", \"LEFT\", \"BOTTOM\", and \"RIGHT\" are the acceptable values\n\t */\n\tdock(monitor, oldBounds, location) {\n\t\tif (this.isDockableComponent) {\n\t\t\tlet dockPos = -1;\n\t\t\tthis.undockedPosition = {\n\t\t\t\twidth: oldBounds.width,\n\t\t\t\theight: oldBounds.height\n\t\t\t};\n\t\t\tthis.logger.system.debug(\"MONITOR: DockableWindow.dock\", \"undockedPosition\", this.undockedPosition);\n\n\t\t\t//Assuming the re-assignment of positions/size doesn't need to take place\n\t\t\t//we don't need a switch here\n\t\t\tswitch (location) {\n\t\t\t\tcase this.monitorDockablePositions.TOP:\n\t\t\t\t\tdockPos = this.monitorDockablePositions.TOP;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.monitorDockablePositions.LEFT:\n\t\t\t\t\tdockPos = this.monitorDockablePositions.LEFT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.monitorDockablePositions.RIGHT:\n\t\t\t\t\tdockPos = this.monitorDockablePositions.RIGHT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase this.monitorDockablePositions.BOTTOM:\n\t\t\t\t\tdockPos = this.monitorDockablePositions.BOTTOM;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.dockedPosition = dockPos;\n\t\t\tthis.isDocked = true;\n\t\t}\n\t}\n\n\t/**\n\t * Function to handle chain of events when a dockable component type is undocked\n\t */\n\tundock() {\n\t\tif (this.isDockableComponent) {\n\t\t\tthis.isDocked = false;\n\t\t\tthis.dockedPosition = this.monitorDockablePositions.NONE;\n\t\t}\n\t}\n\n\thiddenUnclaimSpace() {\n\t\tif (this.isDocked) {\n\t\t\tlet locValue = this.getDockedStringFromLocation(this.dockedPosition);\n\t\t\tthis.monitor.onClaimedSpaceChanged({\n\t\t\t\twin: this,\n\t\t\t\toldBounds: this.undockedPosition,\n\t\t\t\tlocation: locValue,\n\t\t\t\tunchangedDockState: true,\n\t\t\t\taction: \"undock\"\n\t\t\t});\n\t\t}\n\t}\n\n\tunhiddenClaimSpace() {\n\t\tif (this.isDocked) {\n\t\t\tlet locValue = this.getDockedStringFromLocation(this.dockedPosition);\n\t\t\tthis.monitor.onClaimedSpaceChanged({\n\t\t\t\twin: this,\n\t\t\t\toldBounds: {},\n\t\t\t\tlocation: locValue,\n\t\t\t\tunchangedDockState: true,\n\t\t\t\taction: \"dock\"\n\t\t\t});\n\t\t}\n\t}\n\n\tsaveDockableData() {\n\t\tlet thisWindow = this;\n\t\tlet bounds = {\n\t\t\ttop: thisWindow.top,\n\t\t\tbottom: thisWindow.bottom,\n\t\t\tleft: thisWindow.left,\n\t\t\tright: thisWindow.right,\n\t\t\twidth: thisWindow.width,\n\t\t\theight: thisWindow.height,\n\t\t\tisDockable: this.isDocked,\n\t\t\tdockedPosition: thisWindow.dockedPosition\n\t\t};\n\n\t\t// must save the monitor date since if monitors changed since last restart then toolbar will use default settings (otherwise might have problems with visibility)\n\t\tSystem.getMonitorInfo((monitorInfo) => {\n\t\t\tlet monitorData = [monitorInfo.primaryMonitor, ...monitorInfo.nonPrimaryMonitors];\n\t\t\tthis.logger.system.debug(\"MONITOR: DockableWindow saveDockableData\", monitorData, !this.isHidden, bounds);\n\t\t\tStorageClient.save({\n\t\t\t\ttopic: this.name, key: this.name, value: {\n\t\t\t\t\tvisible: !this.isHidden,\n\t\t\t\t\t\"window-bounds\": bounds,\n\t\t\t\t\tmonitorData\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t}\n\n\t/**\n\t * If toolbar is not visible then move it to a visible position\n\t */\n\tasync makeSureMonitorDockableIsVisible() {\n\t\tthis.logger.system.debug(\"DockableWindow.makeSureMonitorDockableIsVisible\");\n\t\tlet currentBounds = {\n\t\t\ttop: this.top,\n\t\t\tbottom: this.bottom,\n\t\t\tleft: this.left,\n\t\t\tright: this.right,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t};\n\n\t\t// Could optionally put in user notication here.  I tested but commented out since not specified and it might be overkill.\n\t\t// UserNotification.alert(\"system\", \"ALWAYS\", \"toolbar\", \"Toolbar moved out of visible space. Adjusted to a visible position.\", { duration: 1000 * 3});\n\n\t\tlet newBounds = util.adjustBoundsToBeOnMonitor(currentBounds);\n\t\tthis.logger.system.debug(\"DockableWindow.makeSureMonitorDockableIsVisible requestMove\", \"currentBounds\", currentBounds, \"newBounds\", newBounds);\n\n\t\t// have to clone since the call below to calculator.requestMove modifies the bounds that were passed in (causing setBounds to be incorrect)\n\t\tlet newCopy = util.clone(newBounds);\n\n\t\t// since the toolbar is not visible, set to new adjusted position;\n\t\t// before moving, call request move to insure internal docking state is correctly maintained.\n\t\tthis.calculator.requestMove(newBounds, (bounds) => {\n\t\t\tthis.logger.system.debug(\"DockableWindow.makeSureMonitorDockableIsVisible setBounds\", \"newBounds\", newBounds);\n\t\t\tthis.setBounds(newCopy, (err) => {\n\t\t\t\tif (!this.hidden) {\n\t\t\t\t\tthis.win._show();\n\t\t\t\t\t// when remote connection is made using RDP, the monitor changes will redisplay window and potentially leave toolbar on bottom;\n\t\t\t\t\t// using a timer is dirty, but until we implement multi-monitor architecture there is not a signal to key on to indicate all monitor changes are done\n\t\t\t\t\t// (i.e. the time to invoke bringToFront since all the other windows have already been moved); note this bringToFront fixes an observed problen when RDP\n\t\t\t\t\t// caused the monitor change and the toolbar was left on the bottom of many other windows\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.logger.system.debug(\"DockableWindow.makeSureMonitorDockableIsVisible bringToFront\");\n\t\t\t\t\t\tthis.win._bringToFront();\n\t\t\t\t\t}, 3000);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tonBoundsChanged() {\n\t\tthis.logger.system.debug(\"MONITOR: onBoundsChanged\", this.isDockableComponent);\n\t\t//window.methodCalls[\"onBoundsChanged\"]++;\n\t\t//this represents the dockableWindow's context\n\t\tthis.setOpacity({ opacity: 1 });\n\t\tthis.resizeHandle = null;\n\t\tlet timestamp = Date.now();\n\t\t//This would be true if the window was maximized when the move request that triggered mouseDown was requested.\n\t\t//It should only be changed if, on mouse down the window is maximized.\n\t\tthis.shouldOffsetByMouse = false;\n\t\tthis.onboundschanged = timestamp;\n\t\tthis.lastBoundsAdjustment = timestamp;\n\t\tthis.monitor = this.calculator.getMonitorForWindow(this);\n\t\tthis.calculator.onMouseUp();\n\t\tthis.win._stopMove();\n\n\t\tif (this.isDockableComponent) {\n\t\t\tthis.logger.system.debug(\"MONITOR: onBoundsChanged saveDockableData\");\n\t\t\tthis.saveDockableData();\n\t\t\tthis.makeSureMonitorDockableIsVisible();\n\t\t}\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} request  {description}\n\t* @param  {type} callback {description}\n\t* @return {type} {description}\n\t*/\n\tonBoundsChanging(event, callback) {\n\t\t//this makes me cri\n\t\tlet request = event.data || event;\n\t\t//window.methodCalls[\"onBoundsChanging\"]++;\n\t\tthis.win._startMove();\n\t\ttry {\n\t\t\trequest.timestamp = Date.now();\n\t\t} catch (e) {\n\t\t\treturn;\n\t\t}\n\t\tvar self = this;\n\t\tSystem.getMousePosition(function (err, position) {\n\t\t\tfunction finishMove() {\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t\tself.lastBoundsAdjustment = Date.now();\n\t\t\t\tself.win.eventManager.addListener(BOUNDS_CHANGING, self.onBoundsChanging);\n\t\t\t}\n\t\t\tvar invalidateRequest = false;\n\t\t\tvar shouldThrottle = request.timestamp < self.lastBoundsAdjustment + self.resizeThrottlePeriod;\n\n\n\t\t\t//@note this conditional here is for testing. Node is faster than JS or something. In openfin, we need to also exclude requests that came in at the same time as the request we last processed. I think they sometimes send multiple events and in my testing, that never happens. Truthfully though I don't know why this bit has to be different in the different environments. But I do remember losing a day when I ported this stuff from test-world to openfin. Don't delete it. --Brad\n\t\t\tif (typeof fin === \"undefined\") {\n\t\t\t\tinvalidateRequest = shouldThrottle || request.timestamp < self.lastBoundsAdjustment;\n\t\t\t} else {\n\t\t\t\tinvalidateRequest = shouldThrottle || request.timestamp <= self.lastBoundsAdjustment;\n\t\t\t}\n\n\t\t\tif (invalidateRequest) {\n\t\t\t\tLogger.system.debug(\"DOCKING: Invalid request\", \"TIMESTAMPS:\", JSON.stringify(request.timestamp), JSON.stringify(self.lastBoundsAdjustment));\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (self.isMaximized) {\n\t\t\t\t/**\n\t\t\t\t * This is a way to lock out any processing until we finish processing the first move request\n\t\t\t\t * that comes in when a window is maximized.\n\t\t\t\t *\n\t\t\t\t * Events more or less get 'queued' by the underlying container. As quickly as they can, our container (openfin or electron)\n\t\t\t\t * will consume OS-level events and bubble them up to this layer. We have code in this file\n\t\t\t\t * here that says \"Hey, this request came in prior to the last time I made a change. I'm going to drop\n\t\t\t\t * this request . You're invalid. Goodbye.\" The thing we trigger off of is `lastBoundsAdjustment`.\n\t\t\t\t * This value is set _after_ we process the current move request.\n\t\t\t\t *\n\t\t\t\t * Maximize is special though. As soon as our first request comes in, we want to ensure that no additional requests are even considered.\n\t\t\t\t * To do that, we just say \"The last time we changed this window was super far into the future.\" Now,\n\t\t\t\t * every incoming request will be dropped until we have time to restore the window, do any group adjustments, and recalibrate.\n\t\t\t\t *\n\t\t\t\t * It sounds clunky, and it is somewhat. But I can't think of a better way to do this.\n\t\t\t\t */\n\t\t\t\tself.lastBoundsAdjustment = Date.now() + 1000000000;\n\n\t\t\t\t/**\n\t\t\t\t * This tells the `setMoveRequest` function to offset the incoming request in such a way\n\t\t\t\t * that the window is centered on the mouse pointer. If you call setBounds on a window that is maximized, subsequent move\n\t\t\t\t * requests will come in as though the window's left edge never moved, until mouseUp happens. This boolean helps us get\n\t\t\t\t * around this openfin bug.\n\t\t\t\t */\n\t\t\t\tself.shouldOffsetByMouse = true;\n\n\t\t\t}\n\t\t\t//For some reason their bounds are wrong for `move` changeTypes. How can a changeType be 0 and the width and height change? c'mon openfin. Gimme that logical consistency.\n\t\t\tif (OF_BUGFIX_REPLACE_WIDTH_AND_HEIGHT) {\n\t\t\t\trequest.width = self.width && request.changeType === 0 ? self.width : request.width;\n\t\t\t\trequest.height = self.height && request.changeType === 0 ? self.height : request.height;\n\t\t\t}\n\n\t\t\t//This comparison used to check right and bottom...props that don't exist on the request.\n\t\t\t//If all of the bounds haven't changed, don't waste time processing it.\n\t\t\t//On monitor resolution change, bounds will not change, but we still need to move\n\t\t\t//If the changeSource is \"system\", we might need to move even if the bounds haven't changed.\n\t\t\tif (request.changeSource !== \"system\") {\n\t\t\t\tif (request.left === self.left && request.top === self.top && request.width === self.width && request.height === self.height) {\n\t\t\t\t\tconsole.debug(\"No change being requested. Dropping.\");\n\t\t\t\t\tif (callback) callback();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tself.win.eventManager.removeListener(BOUNDS_CHANGING, self.onBoundsChanging);\n\n\n\t\t\trequest.right = request.left + request.width;\n\t\t\trequest.bottom = request.top + request.height;\n\t\t\trequest.groupNames = self.groupNames;\n\t\t\trequest.mousePosition = request.mousePosition || position;\n\n\t\t\tself.calculator.requestMove(request, function (bounds) {\n\n\t\t\t\tif (!bounds) {\n\t\t\t\t\tfinishMove();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tself.setBounds(bounds, function () {\n\t\t\t\t\tfinishMove();\n\t\t\t\t}, function (err) {\n\t\t\t\t\tLogger.system.error(\"ERROR IN SET BOUNDS\", err);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tsetResizeThrottlePeriod(throttlePeriod) {\n\t\t//window.methodCalls[\"setResizeThrottlePeriod\"]++;\n\t\tthis.resizeThrottlePeriod = throttlePeriod;\n\t}\n\n\t/**\n\t * This removes event listeners. I can't be entirely certain, but from my testing, it _appears_ that openfin isn't actually deleting these objects. if you close the window, then load the window with the same name, old listeners are still registered with your new window. So if you reload a workspace, and then try to move a window, you get weird scenarios where onBoundsChanging is called twice with different values (presumably for old eventlisteners). Removing the eventListeners on close seems to handle this.\n\t */\n\tremoveEventListeners() {\n\t\t//window.methodCalls[\"removeEventListeners\"]++;\n\t\tthis.removeEventListener(BOUNDS_CHANGING, this.onBoundsChanging);\n\t\tthis.removeEventListener(BOUNDS_CHANGED, this.onBoundsChanged);\n\t\t//This reason this is necessary is hard to explain.\n\t\t//When the dockableWindow is created we call win.addEventListener(BOUNDS_CHANGING, blah blah).\n\t\t//This forces the openfin window to bubble bounds events up to us. This function also goes out to the router and is pretty heavy for rapid addition/removal. Inside of onBoundsChanging, we add and remove handlers _on the event manager_. So when removeEventListeners is called, the two handlers above are removed. However, there's still that lingering listener that we added to the event manager inside of finishMove. If we don't remove that listener, we could get events thrown from other older incarnations of the same dockable window.\n\t\tthis.win.eventManager.removeListener(BOUNDS_CHANGING, this.onBoundsChanging);\n\t\tthis.win.removeEventListener(SYSTEM_BOUNDS_CHANGED, this.onSystemMovedWindow);\n\t}\n\n\t/********************************************\n\t *\t\t\t\t\t\t\t\t\t\t\t*\n\t *\t\t\tWindow Moving Methods\t\t\t*\n\t *\t\t\t\t\t\t\t\t\t\t\t*\n\t ********************************************/\n\n\t/**\n\t * Hides taskbar icon for openfin windows. This prevents them from being clobbered by aeroshake.\n\t */\n\thideTaskbarIcon() {\n\t\t//window.methodCalls[\"hideTaskbarIcon\"]++;\n\t\t//Check to see if the method exists. It wouldn't on an external window wrapper.\n\t\tif (this.win._updateOptions) {\n\t\t\tthis.win._updateOptions({ showTaskbarIcon: false });\n\t\t}\n\t}\n\n\t/**\n\t * This shows the taskbar icon for a given window.\n\t */\n\tshowTaskbarIcon() {\n\t\t//window.methodCalls[\"showTaskbarIcon\"]++;\n\n\t\tif (this.win._updateOptions && this.shouldShowTaskbarIcon) {\n\t\t\tthis.win._updateOptions({ showTaskbarIcon: true });\n\t\t}\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} event {description}\n\t* @param  {type} cb    {description}\n\t* @return {type} {description}\n\t*/\n\taddEventListener(event, cb) {\n\t\t//window.methodCalls[\"addEventListener\"]++;\n\t\tvar self = this;\n\t\tif (self.win.addEventListener) {\n\t\t\tself.win.addEventListener(event, cb);\n\t\t\tif (!this.events[event]) {\n\t\t\t\tthis.events[event] = [];\n\t\t\t}\n\t\t\tthis.events[event].push(cb);\n\t\t} else if (!warningsSent.addEventListener) {\n\t\t\twarningsSent.addEventListener = true;\n\t\t\tLogger.system.warn(\"Window wrapper does not have an addEventListener Method.\");\n\t\t}\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} event {description}\n\t* @param  {type} cb    {description}\n\t* @return {type} {description}\n\t*/\n\tremoveEventListener(event, cb) {\n\t\t//window.methodCalls[\"removeEventListener\"]++;\n\t\tvar self = this;\n\t\tif (self.win.removeEventListener) {\n\t\t\tself.win.removeEventListener(event, cb);\n\t\t\tthis.events[event].splice(this.events[event].indexOf(cb), 1);\n\t\t} else if (!warningsSent.removeEventListener) {\n\t\t\twarningsSent.removeEventListener = true;\n\t\t\tLogger.system.warn(\"Window wrapper does not have an removeEventListener Method.\");\n\t\t}\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tdisableFrame() {\n\t\t//window.methodCalls[\"disableFrame\"]++;\n\t\tif (this.win.disableFrame) {\n\t\t\tthis.win.disableFrame();\n\t\t} else if (!warningsSent.disableFrame) {\n\t\t\twarningsSent.disableFrame = true;\n\t\t\tLogger.system.warn(\"Window wrapper does not have a disableFrame Method\");\n\t\t}\n\t}\n\n\tsetOpacity(params = { opacity: 1, persist: false }) {\n\t\t//window.methodCalls[\"setOpacity\"]++;\n\t\t// if (opacity === this.opacity) return;\n\t\tthis.opacity = params.opacity;\n\t\tif (this.win._setOpacity) {\n\t\t\tthis.win._setOpacity(params);\n\t\t} else if (!warningsSent.setOpacity) {\n\t\t\twarningsSent.setOpacity = true;\n\t\t\tLogger.system.warn(\"Window wrapper does not have a setOpacity Method\");\n\t\t}\n\t}\n\n\t/**\n\t * Sets bounds for internal calculations.\n\t */\n\tsetInternalBounds(bounds) {\n\t\t//window.methodCalls[\"setInternalBounds\"]++;\n\t\t//Bunch of if statements was quicker than ternary operators when inside of loops.\n\t\tthis.left = typeof bounds.left === \"undefined\" ? this.left : bounds.left;\n\t\tthis.top = typeof bounds.top === \"undefined\" ? this.top : bounds.top;\n\t\tthis.width = typeof bounds.width === \"undefined\" ? this.width : bounds.width;\n\t\tthis.height = typeof bounds.height === \"undefined\" ? this.height : bounds.height;\n\t\tthis.right = typeof bounds.right === \"undefined\" ? this.left + this.width : bounds.right;\n\t\tthis.bottom = typeof bounds.bottom === \"undefined\" ? this.top + this.height : bounds.bottom;\n\t\tthis.setBoundingBoxes();\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bounds    {description}\n\t* @param  {type} successCB {description}\n\t* @param  {type} errCB     {description}\n\t* @return {type} {description}\n\t*/\n\tsetBounds(bounds, successCB, errCB) {\n\t\tthis.setInternalBounds(bounds);\n\t\tbounds = {\n\t\t\tleft: bounds.left,\n\t\t\twidth: bounds.width,\n\t\t\theight: bounds.height,\n\t\t\ttop: bounds.top,\n\t\t\tright: bounds.right,\n\t\t\tbottom: bounds.bottom,\n\t\t\tpersistBounds: bounds.persistBounds\n\t\t};\n\t\t//Old way was to update the monitor on the window when onMouseUp occurred, but now the OS (as well as user) can move a window and the monitor for that window should be updated every time\n\t\tthis.monitor = this.calculator.getMonitorForWindow(this);\n\t\t//window.methodCalls[\"setBounds\"]++;\n\t\tthis.win._setBounds({ bounds }, () => {\n\t\t\tif (successCB) {\n\t\t\t\tsuccessCB();\n\t\t\t}\n\t\t}, errCB);\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} left {description}\n\t* @param  {type} top  {description}\n\t* @return {type} {description}\n\t*/\n\tmoveTo(left, top) {\n\t\t//window.methodCalls[\"moveTo\"]++;\n\t\tthis.setBounds({\n\t\t\tleft: left,\n\t\t\ttop: top,\n\t\t\tright: left + this.width,\n\t\t\tbottom: top + this.height,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t});\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tgetGroupNames() {\n\t\treturn this.groupNames;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} request  {description}\n\t* @param  {type} callback {description}\n\t* @return {type} {description}\n\t*/\n\trequestBoundsChange(request, callback) {\n\t\t//window.methodCalls[\"requestBoundsChange\"]++;\n\t\t//for testing purposes only - TODO: this is probably broken\n\t\tvar self = this;\n\t\tif (!callback) {\n\t\t\tcallback = self.onBoundsChanged;\n\t\t}\n\t\tSystem.getMousePosition((err, position) => {\n\t\t\tself.onBoundsChanging({\n\t\t\t\tdata: {\n\t\t\t\t\tcorners: this.getCornerObject(request),\n\t\t\t\t\tleft: request.left,\n\t\t\t\t\ttop: request.top,\n\t\t\t\t\twidth: request.width,\n\t\t\t\t\theight: request.height,\n\t\t\t\t\tchangeType: request.changeType,\n\t\t\t\t\tname: this.name,\n\t\t\t\t\tuuid: this.uuid,\n\t\t\t\t\tmousePosition: request.mousePosition || position\n\t\t\t\t}\n\t\t\t}, () => {\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n\n\n\t/********************************************\n\t *\t\t\t\t\t\t\t\t\t\t\t*\n\t *\t\t\tHelper Functions\t\t\t\t*\n\t *\t\t\t\t\t\t\t\t\t\t\t*\n\t ********************************************/\n\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tcalculateInnerBoundingBox() {\n\t\t//window.methodCalls[\"calculateInnerBoundingBox\"]++;\n\t\tvar adjustment = this.bufferSize * 2;\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: this.left + adjustment,\n\t\t\t\ty: this.top + adjustment\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: this.right - adjustment,\n\t\t\t\ty: this.bottom - adjustment\n\t\t\t}\n\t\t};\n\t}\n\n\tgetInnerBoundingBox() {\n\t\treturn this.innerBuffer;\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @param  {type} bufferSize {description}\n\t* @return {type} {description}\n\t*/\n\tsetBufferSize(bufferSize) {\n\t\tthis.bufferSize = bufferSize;\n\t\tthis.setBoundingBoxes();\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tsetBoundingBoxes() {\n\t\tlet myBounds = this.getBounds();\n\t\tthis.setBuffer();\n\t\tthis.innerBuffer = this.calculateInnerBoundingBox();\n\t\tthis.windowBoundingBox = BoxMath.getWindowBoundingBox(myBounds);\n\t\tthis.setSnappingRegions();\n\t\tthis.vertices = this.getCornerObject(myBounds);\n\t}\n\n\n\tgetSnappingRegions() {\n\t\treturn this.snappingRegions;\n\t}\n\n\tupdateState() {\n\t\tthis.win._getBounds(null, (err, bounds) => {\n\t\t\tthis.setBounds(bounds);\n\t\t});\n\t}\n\n\t/**\n * @function setHidden\n * @param  {function=} callback when done\n *\n\t * Sets the internal state to hidden.  Only needed if window is hidden outside of this class.\n */\n\tsetHidden(cb = Function.prototype) {\n\t\tthis.logger.system.debug(\"MONITOR: DockableWindow hide state\");\n\t\tthis.isHidden = true;\n\t}\n\n\t/**\n * @function setHidden\n * @param  {function=} callback when done\n *\n\t * Sets the internal state to shown (i.e. not hidden). Only needed if window is hidden outside of this class.\n */\n\tsetShown(cb = Function.prototype) {\n\t\tthis.logger.system.debug(\"MONITOR: DockableWindow.show state\");\n\t\tthis.isHidden = false;\n\t}\n\n\thide(cb = Function.prototype) {\n\t\tthis.win._hide(cb);\n\t\tthis.isHidden = true;\n\t}\n\n\tshow(cb = Function.prototype) {\n\t\tthis.win._show(cb);\n\t\tthis.isHidden = false;\n\t}\n\n\tminimize(cb = Function.prototype) {\n\t\tthis.isMinimized = true;\n\t\tthis.win._minimize(cb);\n\t}\n\n\trestore(cb) {\n\t\tthis.isMinimized = false;\n\t\tthis.win._restore(cb);\n\t}\n\n\talwaysOnTop(isAlwaysOnTop) {\n\t\ttry {\n\t\t\tthis.win._alwaysOnTop({ alwaysOnTop: isAlwaysOnTop });\n\t\t} catch (e) {\n\t\t\tLogger.system.debug(\"Implement alwaysOnTop\");\n\t\t}\n\t}\n\n\tbringToFront() {\n\t\t//window.methodCalls[\"bringToFront\"]++;\n\t\ttry {\n\t\t\tthis.win._bringToFront();\n\t\t} catch (e) {\n\t\t\tLogger.system.error(\"Implement bringToFront\");\n\t\t}\n\t}\n\n\n\tnotifyWindowTitleBarOfGroupMembership() {\n\t\tif (typeof (RouterClient) !== \"undefined\") {\n\t\t\tRouterClient.transmit(this.name + \".groupMembershipChange\", {\n\t\t\t\ttype: \"joined\"\n\t\t\t});\n\t\t}\n\t}\n\n\tnotifyWindowTitleBarOfGroupEjection() {\n\t\tif (typeof (RouterClient) !== \"undefined\") {\n\t\t\tRouterClient.transmit(this.name + \".groupMembershipChange\", {\n\t\t\t\ttype: \"ejected\"\n\t\t\t});\n\t\t}\n\t}\n\n\taddSnappedWindow(snapObj) {\n\t\tif (!this.snappedWindows) {\n\t\t\tthis.snappedWindows = [];\n\t\t}\n\t\tvar shouldAdd = true;\n\t\tfor (var i = 0; i < this.snappedWindows.length; i++) {\n\t\t\tvar snappedWin = this.snappedWindows[i];\n\t\t\tif (snappedWin.name === snapObj.name) {\n\t\t\t\tshouldAdd = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (shouldAdd) {\n\t\t\tthis.snappedWindows.push(snapObj);\n\t\t}\n\t}\n\n\tremoveSnappedWindow(name) {\n\t\tif (this.snappedWindows) {\n\t\t\tfor (var i = 0; i < this.snappedWindows.length; i++) {\n\t\t\t\tvar snappedWin = this.snappedWindows[i];\n\t\t\t\tif (name === snappedWin.name) {\n\t\t\t\t\t// Logger.system.log(\"Removing\", name, \"from\", this.name);\n\t\t\t\t\tthis.snappedWindows.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tanimatePositionAndHeight(params, cb) {\n\t\tthis.setInternalBounds(params);\n\t\tif (false && this.win.animate) { //temporarily disable animations - look for this function in autoarrange.js\n\t\t\tthis.win.animate({\n\t\t\t\ttransitions: {\n\t\t\t\t\tposition: {\n\t\t\t\t\t\ttop: params.top || 0,\n\t\t\t\t\t\tleft: params.left || 0,\n\t\t\t\t\t\tduration: params.duration || 175\n\t\t\t\t\t},\n\t\t\t\t\tsize: {\n\t\t\t\t\t\theight: params.height || 100,\n\t\t\t\t\t\twidth: params.width || 100,\n\t\t\t\t\t\tduration: params.duration || 175\n\t\t\t\t\t}\n\t\t\t\t}, options: null\n\t\t\t}, {\n\t\t\t\tpersistBounds: true\n\t\t\t}, cb);\n\t\t} else if (this.win._setBounds) {\n\t\t\tparams.persistBounds = true;\n\t\t\tthis.win._setBounds({ bounds: params }, cb);\n\t\t}\n\t}\n\n\tisGrouped() {\n\t\treturn this.groups.length;\n\t}\n\n\t/**\n\t * Adds eventListeners so that when the finWIndow moves, we can do things with that data.\n\t */\n\taddListeners() {\n\t\tthis.addEventListener(BOUNDS_CHANGED, this.onBoundsChanged);\n\t\tthis.addEventListener(BOUNDS_CHANGING, this.onBoundsChanging);\n\t\tthis.win.addEventListener(BOUNDS_CHANGED, this.onBoundsChanged);\n\t\tthis.win.addEventListener(\"hidden\", this.hiddenUnclaimSpace);\n\t\tthis.win.addEventListener(\"shown\", this.unhiddenClaimSpace);\n\t\tthis.win.addEventListener(SYSTEM_BOUNDS_CHANGED, this.onSystemMovedWindow);\n\n\t}\n}\nexport default DockableWindow;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockableWindow.js","import DockableMonitor from \"./dockableMonitor\";\nimport DockableGroup from \"./dockableGroup\";\nimport DockableBox from \"./dockableBox\";\nimport BoxMath from \"./boxMath\";\nimport maskBoundsCalculator from \"./maskBoundsCalculator\";\nimport { queue, eachSeries as asyncEachSeries, forEach as asyncForEach } from \"async\";\nimport { MonitorPoolSingleton, GroupPoolSingleton, DockingPoolSingleton } from \"../Common/Pools/PoolSingletons\";\nimport { clone } from \"../../../common/disentangledUtils\";\n/** Singleton of the Logger class shared among all instances of DockingCalculator\n * @TODO Refactor to instance member of class.\n */\nlet Logger;\n/** Singleton of the System class shared among all instances of DockingCalculator\n * @TODO Refactor to instance member of class.\n */\nlet System;\nvar RouterClient = null;\nif (typeof (window) !== \"undefined\") {\n\tif (window.RouterClient) {\n\t\t//docking service\n\t\tRouterClient = window.RouterClient;\n\n\t}\n}\nif (typeof FSBL !== \"undefined\") {\n\tif (FSBL && FSBL.Clients.RouterClient) {\n\t\t//test runner\n\t\tRouterClient = FSBL.Clients.RouterClient;\n\t}\n}\n\nvar MINIMUM_HEIGHT, MINIMUM_WIDTH, ALLOW_GROUPS_TO_SNAP;\nimport { CORNERS, EDGES, OPPOSITE_EDGE_MAP } from \"./constants\";\nvar SNAPPING_OPACITY = 0.8;\nvar debug = false;\nvar restrictedAreas = [];\n\nfunction uuidv4() {\n\treturn \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n\t\tvar r = Math.random() * 16 | 0, v = c === \"x\" ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\n/**\n * The pools are just the collection of windows that the DockingCalculator is concerned with\n */\n\nvar groupPool = GroupPoolSingleton,\n\t//@todo, investigate why I made this a global.\n\tsnappableWindows,\n\t//Amount of wiggle room to give when trying to figure out whether the user was clicking a corner or not. Since windows can have different resize regions, there's no guarantee that the user will click directly on the corner of a window.\n\tcornerTolerance = 15,\n\t//Stationary and moving window are cached onMouseDown and cleared onMouseUp.\n\tstationaryWindow = null,\n\t//Windows to ignore for grouping functions (e.g., toolbar - it can snap, but shouldn't group)\n\tgroupBlacklist = [],\n\t//@todo, investigate why I made this global. I suspect it was a mistake, or an early pass. This is used when resizing interior windows of a group.\n\tjoinedWindowNames = [],\n\tjoinedWindows = [],\n\t//This allows us to defer adding windows/removing windows from a group until onMouseDown. It's modified onMouseMove. @todo, just calculate it onMouseDown, ya dummy.\n\tgroupAction = {\n\t\tname: null,\n\t\twindows: []\n\t},\n\tshortCircuit = false,\n\tmonitorPool = MonitorPoolSingleton;\n\nfunction setBoundsErrorCB(err) {\n\tLogger.system.error(err);\n}\n\n/**\n *\n *\n * @returns\n */\nclass DockingCalculator {\n\t/**\n\t * @param {object} params Config for the Calculator\n\t * @param {object} dependencies Dependency object that provides the System, and Logger.\n\t * @param {System} dependencies.System\n\t * @param {Logger} dependencies.Logger\n\t */\n\tconstructor(params, dependencies) {\n\t\tif (dependencies) {\n\t\t\tLogger = dependencies.Logger;\n\t\t\tSystem = dependencies.System;\n\t\t} else {\n\t\t\tthrow new Error(\"DockingCalculator class requires dependency injection. Ensure that dependencies are being passed in as the 2nd parameter.\");\n\t\t}\n\n\t\t//object that's created onMouseDown. Used to cache potentially expensive operations and common information needed across functions.\n\t\tthis.resizeObject = {};\n\t\tthis.groupMode = {\n\t\t\tenabled: true,\n\t\t};\n\t\tthis.groupMask = null;\n\t\t//Placeholder for the moveRequest. @todo, see if this is necessary. Pretty sure I just pass the reference around everywhere.\n\t\tthis.moveRequest = null;\n\t\tthis.dockingPool = DockingPoolSingleton;\n\t\t//See comment above.\n\t\tthis.stationaryWindow = null;\n\t\tthis.movingWindow = null;\n\t\t//Default bufferSize. Can be overwritten by `setBufferSize`.\n\t\tthis.bufferSize = 15;\n\t\tthis.resizeEventThrottlePeriod = 0;\n\t\tthis.moveCount = 0;\n\t\tthis.intersection = null;\n\t\t//The group mask operations are asynchronous and take a variable amount of time. Generally speaking, show takes longer to complete than hide. So if you call show, and 4ms later call hide, you can finish hiding the group mask before the show has completed. This boolean tells the calculator whether the mask should be hidden or shown. Before calling .show or .hide, we check to see if the last function called matches. So if we expect the mask to be hidden, but we're about to call .show, we exit early.\n\t\tthis.groupMaskExpectedState = \"hidden\";\n\t\tthis.groupMaskQueue = queue(function (task, callback) {\n\t\t\ttask(callback);\n\t\t});\n\t}\n\n\t/****************************************\n * Core Loop\n * Docking works like this:\n * A dockableWindow receives a `bounds-change-request` event from the window object that it wraps (e.g., an openfin window). Then the docking calculator gets to work.\n * 1. `this.requestMove`.\n * 2. `this.onMouseDown`.\n * 3. `this.onMouseMove`.\n *\n * As the user moves her mouse around, steps 1 and 3 are executed.When she releases her mouse, the dockableWindow throws a `bounds-changed` event, which in turn calls `this.onMouseUp`.\n * The general idea is that the user says \"Hey, I'd like to move my window 10px to the right of this window. The calculator spins through, notices that the window that the user is moving is within a snapping buffer around the other window. So it responds, \"You're too close to that window, sorry, but we're snapping you.\". If the movingWindow isn't within the stationaryWindow's buffer, we give the window the all clear to proceed.\n ****************************************/\n\t/**\n\t* This is the core controller of the program. It routes the window's moveRequest to the appropriate place, and it receives the modified bounds afterwards. It communicates the modified bounds to the window via the CB.\n\t* @param  {moveRequest} Request from the `dockableWindow`.\n\t* @param  {function} cb What to do after the window's new bounds have been calculated.\n\t*/\n\trequestMove(userRequest, cb) {\n\t\t// console.log(\"REQUEST MOVE\", userRequest.changeType);\n\t\tif (!userRequest) {\n\t\t\tLogger.system.warn(\"INVESTIGATE: userRequest null or undefined in requestMove.\");\n\t\t\tcb(null);\n\t\t\treturn;\n\t\t}\n\t\tlet win = this.getWindow(userRequest.name);\n\n\t\tif (!win) {\n\t\t\tcb(null);\n\t\t\treturn Logger.system.warn(\"Got Move Request From Window Not Registered With Docking\", userRequest.name);\n\t\t}\n\n\n\t\t//Occasionally openfin bubbles up an incorrect change type. A resize from the top right would start with a changeType of 0. The next move will have the proper change type. If we detect that scenario, we need to reset the resizeObject.\n\t\tif (this.moveRequest && this.moveRequest === 0 && userRequest.changeType !== 0) {\n\t\t\tthis.resizeObject = this.constructResizeObject(moveRequest);\n\t\t}\n\t\t// Force minimum height and width even if not in group.\n\t\tif (userRequest.changeType !== 0) userRequest = this.checkShortCircuits(userRequest);\n\n\t\tif (this.shiftKey && userRequest.changeType === 0 && userRequest.groupNames.length) {//Remove from group and move\n\t\t\tlet groupNames = clone(userRequest.groupNames, Logger.system.error);\n\t\t\tgroupNames.forEach(groupName => {\n\t\t\t\tthis.removeWindowFromGroup(userRequest.name, groupName);\n\t\t\t\tthis.wipeSnapRelationships(userRequest.name);\n\t\t\t});\n\n\t\t\tif (this.updateGroupData) {\n\t\t\t\tthis.updateGroupData();\n\t\t\t}\n\t\t\tuserRequest.groupName = null;\n\t\t}\n\t\tfunction afterMove(bounds) {\n\t\t\tself.onMouseMove(bounds, cb);\n\t\t}\n\t\tgroupAction = {\n\t\t\tname: null,\n\t\t\twindows: []\n\t\t};\n\n\t\t/***\n\t\t * The check below is to see whether we should call onMouseDown, which resets a lot of cached information for docking. There are a couple of cases where we want to call onMouseDown.\n\t\t\t1. We don't have a cached movingWindow reference. This can mean that onMouseDown hasn't been called, _or_ the moving window was removed from docking before onMouseUp was called. This can be triggered by tiling operations.\n\t\t\t2. We don't have a cached moveRequest.\n\t\t\t3. We have a moverequest, but the incoming request has a different change type. The only time we've seen that is in the case of aero-snap. if you aero-snap a window to the side or top of a monitor, then move it, it sends in a changeType of 2 - change in position in size. In any normal world, this is a resize. But it comes in as though a user moved the window. That confuses docking.\n\t\t */\n\t\tif (!this.movingWindow || !this.moveRequest || (this.moveRequest && this.moveRequest.changeType !== userRequest.changeType)) {\n\t\t\tthis.onMouseDown(userRequest);\n\t\t}\n\n\t\tvar moveRequest = this.setMoveRequest(userRequest),\n\t\t\tself = this;\n\n\t\tif (moveRequest.changeType === undefined) {\n\t\t\tmoveRequest.changeType = 0;\n\t\t}\n\n\t\tmoveRequest.groupNames = this.movingWindow.groupNames;\n\t\tmoveRequest.movingRegion = this.resizeObject.correctedHandle;\n\t\tmoveRequest.resizeHandle = moveRequest.forceResizeHandle ? moveRequest.resizeHandle : this.resizeObject.correctedHandle;\n\n\t\t/**\n\t\t * 5/20/19 Joe: Previously handleMoveRequestForMaximizedWindow was being called\n\t\t * without setting movingGroup. In the event that the maximize request comes\n\t\t * into a window that is a group, this will throw an error.\n\t\t */\n\t\tthis.movingGroup = this.getMovingGroup(moveRequest);\n\n\t\t/**\n\t\t * 6/5/19 Joe: If the moving window is in a group (movingGroup is defined)\n\t\t * and any windows in the group that aren't the moving window are maximized\n\t\t * then restore them\n\t\t */\n\t\tif (this.movingGroup) {\n\t\t\tObject.keys(this.movingGroup.windows).map(windowName => {\n\t\t\t\tconst win = this.movingGroup.windows[windowName];\n\t\t\t\tif (win.isMaximized && win.name !== this.movingWindow.name) {\n\t\t\t\t\twin.restore();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (this.movingWindow.isMaximized) {\n\t\t\treturn this.handleMoveRequestForMaximizedWindow(userRequest, cb);\n\t\t}\n\n\t\tif (this.groupMode.enabled && moveRequest.groupNames.length) {///Do something if in a group.\n\t\t\tthis.handleGroup(moveRequest, afterMove);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.checkBuffers(moveRequest, afterMove);\n\t}\n\n\t/**\n\t * Move requests from windows that were maximized were previously ignored because solving the problem is hard.\n\t *\n\t * There are a couple of difficult things we have to contend with.\n\t * 1. Let's ay the window is maximized, and its left edge is 100. So we go ahead and restore the window, and\n\t * continue processing moves. Sadly, openfin (maybe electron too??) bubbles up events as though the left\n\t * edge never changed. To combat this we add a `shouldOffsetByMousePosition` property on the dockableWindow.\n\t * This forces the window to center itself on the user's mouse.\n\t *\n\t * That solves the single window scenario perfectly. Now what if the window is in a group? :scream_emoji:.\n\t *\n\t * Now we need to offset _every window in the group_ by the mouse offset. This is bananas, but it's what we have to do so that the user gets\n\t * the experience that she deserves.\n\t *\n\t * @param req moveRequest.\n\t * @param cb function to call when finished.\n\t */\n\thandleMoveRequestForMaximizedWindow(req, cb) {\n\t\tif (!req.mousePosition) {\n\t\t\tLogger.system.error(\"Assertion Failed! A move request was received for a maximized window, but the request\"\n\t\t\t\t+ \"is missing a mouse position. If moving the window programmatically, did you forget to add a mouse position ? \");\n\t\t\treturn cb(null);\n\t\t}\n\n\t\tlet win = this.getWindow(req.name);\n\n\t\tlet newBounds = req;\n\t\t//If we have cached bounds, its the size that the window was before it was maximized. Otherwise...well...we shouldn't be getting in here.\n\t\t//This is just for safety's sake.\n\t\tnewBounds = Object.assign(newBounds, win.cachedBounds || {\n\t\t\tleft: win.left,\n\t\t\ttop: win.top,\n\t\t\twidth: win.width,\n\t\t\theight: win.height\n\t\t});\n\n\t\t//The difference between where the window _is_ and where the window _will be_.\n\t\t//This value will be used to offset other windows in the group, if the window is part of the group.\n\t\tconst offsetTop = newBounds.top - win.top;\n\t\tconst offsetLeft = newBounds.left - win.left;\n\n\t\t//Center the window on the user's pointer.\n\t\tnewBounds.left = req.mousePosition.x + Math.round(newBounds.width / 2);\n\t\tnewBounds.top = req.mousePosition.y;\n\t\tnewBounds.right = newBounds.left + newBounds.width;\n\t\tnewBounds.bottom = newBounds.top + newBounds.height;\n\n\t\t//Restore our window to where it was before it was maximized. Afterwards, move it.\n\t\t//If it's part of a group, drag everyone along for the ride.\n\t\twin.restore(() => {\n\t\t\tif (this.groupMode.enabled && win.groupNames.length) {///Do something if in a group.\n\t\t\t\tconst windowsInGroup = this.groupWindowIterator(this.movingGroup);\n\n\t\t\t\t//Next, we'll move each window by the offset that the mouse position will create. Essentially we are teleporting every window in the group so that they're relative to the window that's moving.\n\t\t\t\tconst moveWindowByOffset = (win, done) => {\n\t\t\t\t\tconst newSpot = win.getBounds();\n\t\t\t\t\tnewSpot.left = win.left + offsetLeft;\n\t\t\t\t\tnewSpot.top = win.top + offsetTop;\n\t\t\t\t\tnewSpot.name = win.name;\n\t\t\t\t\tthis.moveWindow(newSpot, done);\n\t\t\t\t};\n\n\t\t\t\tconst updateGroupAndExit = () => {\n\t\t\t\t\t//This ensures that the group knows where its boundaries are.\n\t\t\t\t\tthis.movingGroup.updateBounds();\n\t\t\t\t\tcb(null);\n\t\t\t\t};\n\n\t\t\t\tasyncForEach(windowsInGroup, moveWindowByOffset, updateGroupAndExit);\n\t\t\t} else {\n\t\t\t\tthis.moveWindow(newBounds, () => {\n\t\t\t\t\tcb(null);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// If the window has been restored, we want to reset this.movingWindow.isMaximized\n\t\t\t// otherwise every subsequent move of this window will enter this function\n\t\t\tthis.movingWindow.isMaximized = false;\n\t\t});\n\t}\n\t/**\n\t * Makes sure that the requested move is occurring in space that is unclaimed by toolbars or other components. This should prevent a window from resizing/moving on top of a toolbar until it passes a threshold.\n\t * @param {object} moveRequest moverequest.\n\t */\n\tmakeSureMoveIsInUnclaimedSpace(moveRequest) {\n\t\tvar unclaimedSpaceOverlaps = this.getUnclaimedSpaceOverlaps(moveRequest);\n\t\tvar win = this.getWindow(moveRequest.name);\n\t\tfor (var i = 0, len = unclaimedSpaceOverlaps.length; i < len; i++) {\n\t\t\tvar overlap = unclaimedSpaceOverlaps[i];\n\t\t\tfor (var e = 0, edgeLen = EDGES.length; e < edgeLen; e++) {\n\t\t\t\tvar edge = EDGES[e];\n\t\t\t\tif (BoxMath.intersectBoundingBoxes(moveRequest.snappingRegions[edge], overlap)) {\n\t\t\t\t\tif (overlap.position === \"top\") {\n\t\t\t\t\t\tmoveRequest.top = overlap.max.y;\n\t\t\t\t\t\tif (moveRequest.changeType === 0 && moveRequest.top === win.top) {\n\t\t\t\t\t\t\tmoveRequest.bottom = moveRequest.top + win.height;\n\t\t\t\t\t\t\tmoveRequest.height = win.height;\n\t\t\t\t\t\t}//do stuff;\n\n\t\t\t\t\t}\n\t\t\t\t\tif (overlap.position === \"bottom\") {\n\t\t\t\t\t\tmoveRequest.bottom = overlap.min.y;\n\t\t\t\t\t\tif (moveRequest.changeType === 0 && moveRequest.bottom === win.bottom) {\n\t\t\t\t\t\t\tmoveRequest.top = moveRequest.bottom - win.height;\n\t\t\t\t\t\t\tmoveRequest.height = win.height;\n\t\t\t\t\t\t}//do stuff;\n\n\t\t\t\t\t}\n\t\t\t\t\tif (overlap.position === \"right\") {\n\t\t\t\t\t\tmoveRequest.right = overlap.min.x;\n\t\t\t\t\t\tif (moveRequest.changeType === 0 && moveRequest.left === win.left) {\n\t\t\t\t\t\t\tmoveRequest.left = moveRequest.right - win.width;\n\t\t\t\t\t\t\tmoveRequest.width = win.width;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tif (overlap.position === \"left\") {\n\t\t\t\t\t\tmoveRequest.left = overlap.max.x;\n\t\t\t\t\t\tif (moveRequest.changeType === 0 && moveRequest.right === win.right) {\n\t\t\t\t\t\t\tmoveRequest.right = moveRequest.left + win.width;\n\t\t\t\t\t\t\tmoveRequest.width = win.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (moveRequest.changeType !== 0) {\n\t\t\tmoveRequest.height = moveRequest.bottom - moveRequest.top;\n\t\t\tmoveRequest.width = moveRequest.right - moveRequest.left;\n\t\t}\n\n\n\t\treturn moveRequest;\n\t}\n\n\t/**\n\t * This function goes through the restricted areas, or claimedSpaces as they're called in the launcherService. If the moveRequest would cause the window to overlap with the claimed space, we return True - this is an invalid request. requestMove then just drops the request on the floor.\n\t */\n\tgetUnclaimedSpaceOverlaps(moveRequest) {\n\t\tvar innerBoundary = {\n\t\t\tmin: {\n\t\t\t\tx: moveRequest.left + (moveRequest.width * .25),\n\t\t\t\ty: moveRequest.top + (moveRequest.height * .25)\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: moveRequest.right - (moveRequest.width * .25),\n\t\t\t\ty: moveRequest.bottom - (moveRequest.bottom * .25)\n\t\t\t}\n\t\t};\n\t\tif (restrictedAreas.length) {\n\t\t\tvar overlaps = [];\n\t\t\tfor (var i = 0, len = restrictedAreas.length; i < len; i++) {\n\t\t\t\tvar boundingBox = restrictedAreas[i];\n\t\t\t\tif (BoxMath.intersectBoundingBoxes(innerBoundary, boundingBox)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (BoxMath.intersectBoundingBoxes(BoxMath.getWindowBoundingBox(moveRequest), boundingBox)) {\n\t\t\t\t\toverlaps.push(boundingBox);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\treturn overlaps;\n\t\t}\n\t\treturn false;\n\n\t}\n\n\t/**\n\t * Windows can be part of two groups - one that can move, and one that allows shared border resizing/group resizing. When N windows are snapped together but not explicitly grouped together, they form an \"immobileGroup\". A movable group is one that the user has explicitly formed. This function returns the appropriate group, given a moveRequest.\n\t * @param {object} moveRequest moverequest.\n\t */\n\tgetMovingGroup(moveRequest) {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"getMovingGroup\", moveRequest.name);\n\t\t}\n\n\t\t//If snapped windows can't resize, we always want to return the movable group first.\n\t\tif (this.groupMode.allowSnappedWindowsToResize && moveRequest.changeType !== 0) {\n\t\t\treturn this.getImmobileGroup(moveRequest.name) || this.getMovableGroup(moveRequest.name);\n\t\t}\n\n\t\treturn this.getMovableGroup(moveRequest.name) || this.getImmobileGroup(moveRequest.name);\n\t}\n\n\t/**\n\t * Loops through all DockableGroups and reconstitutes gaps. This is to clean up an issue where\n\t * grouped windows containing a single pixel gap would break on mouse down as the system would\n\t * no longer consider them snapped, and therefore would break and remove the group\n\t */\n\tfixAllGroupGaps() {\n\t\tObject.values(this.getGroups()).forEach(group => {\n\t\t\tthis.cleanupGroupGaps(group);\n\t\t});\n\t}\n\n\t/**\n\t * Given a group, will clean up the gaps and reconstitute the groups\n\t * @param {object} group An object containing groups, with groupName as key\n\t */\n\tcleanupGroupGaps(group) {\n\t\tlet windowBounds = this.getBoundsOfGroupWindows(group);\n\t\t//windowBounds = this.cleanupSharedEdges(group, windowBounds, 0);\n\t\twindowBounds = this.cleanupGaps(group, windowBounds);\n\t\tthis.setBoundsOfGroupWindows(group, windowBounds);\n\t}\n\n\t/**\n\t * This function caches information in the resizeObject so that it doesn't need to be calculated onMouseMove.\n\t */\n\tonMouseDown(moveRequest) {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"onMouseDown\", moveRequest.name);\n\t\t}\n\t\tif (RouterClient) RouterClient.transmit(\"Assimilation.taskbar\", { visible: false });\n\n\t\tif (this.moveCount === 0) {\n\t\t\t/*\n\t\t\t * JC 7/26/19 - Cleanup group gaps on first move to solve an issue where grouped\n\t\t\t * windows with a single pixel gap would break when the group was moved\n\t\t\t */\n\t\t\tthis.fixAllGroupGaps();\n\t\t\tthis.recalculateSnaps();\n\t\t}\n\t\tthis.moveCount++;\n\t\tthis.movingWindow = this.getWindow(moveRequest.name);\n\t\tthis.movingWindow.resizeHandle = null;\n\t\tif (!this.movingWindow) {\n\t\t\tthrow new Error(\"Window not found\");\n\t\t}\n\n        //When we mouse down on a dockable component, we need to store the monitor its on immediately. \n        //Sometimes, in a multi-monitor configuration, when the window undocks it will momentarily \n        //jump to another monitor (since the grabber when docked is always near a monitor edge). \n        //To prevent the moveAllWindowsOutOfClaimedSpace calculation from using the\n        //wrong monitor, we store it on the window to remove it later.\n\t\tif (this.movingWindow.isDockableComponent && this.movingWindow.isDocked) {\n\t\t\tthis.movingWindow.dockedMonitor = this.getMonitorForWindow(this.movingWindow); // Not sure why this.movingWindow.monitor is wrong on restart (is always display1)\n\t\t}\n\t\tthis.movingGroup = this.getMovingGroup(moveRequest);\n\t\tif (this.movingGroup) {\n\t\t\tfor (const windowName in this.movingGroup.windows) {\n\t\t\t\tthis.getWindow(windowName).bringToFront();\n\t\t\t}\n\t\t\tthis.movingGroup.startMove();\n\t\t} else {\n\t\t\tthis.movingWindow.win.startMove();\n\t\t}\n\t\tif (this.groupMode.behavior === \"explicit\") {\n\t\t\t//If there's no moving group, then we're moving an individual window. if it's part of a resizableGroup, it needs to be removed from that group.\n\t\t\tif (moveRequest.changeType === 0 && this.movingGroup && !this.movingGroup.isMovable) {\n\t\t\t\tthis.removeWindowFromGroup(moveRequest.name, this.movingGroup.name);\n\t\t\t\tthis.wipeSnapRelationships(moveRequest.name);\n\t\t\t}\n\n\t\t}\n\t\tthis.resizeObject = this.constructResizeObject(moveRequest);\n\n\t\tlet dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (let win of dockingPoolIterator) {\n\t\t\tif (win.name !== moveRequest.name) {\n\t\t\t\twin.hideTaskbarIcon();\n\t\t\t}\n\t\t}\n\n\t\tif (this.resizeObject.scalingGroup) {\n\t\t\tlet groupIter = this.groupWindowIterator(this.movingGroup);\n\t\t\tfor (let win of groupIter) {\n\t\t\t\twin.hide();\n\t\t\t}\n\t\t\tmaskBoundsCalculator.mouseDown(\n\t\t\t\tthis.movingGroup.getBounds(),\n\t\t\t\tmoveRequest.mousePosition,\n\t\t\t\tthis.resizeObject\n\t\t\t);\n\t\t\tthis.showGroupMask({ bounds: this.movingGroup.getBounds(), opacity: 0.5 }, () => { });\n\t\t}\n\t}\n\n\thideGroupMask(cb = Function.prototype) {\n\t\tthis.groupMaskExpectedState = \"hidden\";\n\t\tthis.groupMaskQueue.push((done) => {\n\t\t\tif (this.groupMaskExpectedState === \"shown\") {\n\t\t\t\tcb();\n\t\t\t\treturn done();\n\t\t\t}\n\t\t\tthis.groupMask.win._hide({}, () => {\n\t\t\t\tthis.groupMaskIsVisible = false;\n\t\t\t\tcb();\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Transparency breaks often with group mask. So use this to show it.\n\t *\n\t * @param {any} bounds\n\t * @param {number} [opacity=0.5]\n\t * @param {any} [cb=Function.prototype]\n\t * @memberof DockingCalculator\n\t */\n\tshowGroupMask(params, cb = Function.prototype) {\n\t\tthis.groupMaskExpectedState = \"shown\";\n\t\t//console.log(\"in show group mask\", this.groupMaskIsVisible);\n\t\tlet bounds = params.bounds;\n\t\tlet groupMaskBounds = this.groupMask.getBounds();\n\t\tif (this.groupMaskIsVisible\n\t\t\t&& groupMaskBounds.top == bounds.top\n\t\t\t&& groupMaskBounds.left == bounds.left\n\t\t\t&& groupMaskBounds.height == bounds.height\n\t\t\t&& groupMaskBounds.width == bounds.width) {\n\t\t\treturn cb();\n\t\t}\n\n\t\tthis.groupMask.setBounds(params.bounds, () => {\n\t\t\tthis.groupMask.win._updateOptions({ opacity: params.opacity }, () => {\n\t\t\t\tthis.groupMaskQueue.push((done) => {\n\t\t\t\t\tif (this.groupMaskExpectedState === \"hidden\") {\n\t\t\t\t\t\tcb();\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthis.groupMask.win._show({}, () => {\n\t\t\t\t\t\tthis.groupMask.win._bringToFront({}, () => {\n\t\t\t\t\t\t\tthis.groupMaskIsVisible = true;\n\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\n\t/**\n\t * Show the modal scrim\n\t *\n\t * @memberof DockingCalculator\n\t */\n\tshowModalScrim(params, cb = Function.prototype) {\n\t\tSystem.getMonitorInfo((info) => {\n\t\t\tlet bounds = info.virtualScreen;\n\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\tthis.modalScrim.setBounds(bounds, () => {\n\t\t\t\tthis.modalScrim.win._updateOptions({ opacity: 0.01 }, () => {\n\t\t\t\t\tthis.modalScrim.show(() => {\n\t\t\t\t\t\tthis.modalScrim._bringToFront(() => {\n\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\thideModalScrim() {\n\t\tthis.modalScrim.win._updateOptions({ opacity: 0 }, () => {\n\t\t\tthis.modalScrim.setBounds({ top: -40, left: -40, height: 40, width: 40 }, () => {\n\t\t\t\tthis.modalScrim.hide();\n\t\t\t}, () => {\n\t\t\t\tthis.modalScrim.hide();\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * This function happens _after_ the calculations have been made. The request comes in, `this.requestMove` routes the request to the appropriate place, and modified bounds are passed into this function. It's a choke point for all docking-sanctioned window movement.\n\t */\n\tonMouseMove(bounds, cb) {\n\t\tthis.fixWindowOpacity({\n\t\t\tcheckForSnappability: true\n\t\t});\n\t\tif (this.resizeObject.scalingGroup) {\n\t\t\tthis.moveGroupMask();\n\t\t}\n\t\tif (bounds.finished) {\n\t\t\tif (typeof (bounds.top) !== \"undefined\") {\n\t\t\t\tthis.moveWindow(bounds);\n\t\t\t}\n\t\t\tcb(null);\n\t\t}\n\t}\n\n\t/**\n\t* When the user lifts her mouse, this is fired. It cleans up opacity, shows windows if we were moving a group, and cleans up global variables.\n\t*\n\t* @param {} params - Optional. Possible parameters: \n\t*\t\t\t\t\t\t\t\t\tsystemMoved: If true, indicates the OS initiated the group move\n\t*\t\t\t\t\t\t\t\t\ttriggeredByAutoArrange: If true, indicate the move was initiated by auto-arrange\n\t*/\n\tonMouseUp(params) {\n\t\tparams = params || {};\n\n\t\tif (!this.movingWindow) return;\n\t\tif (this.movingWindow && this.movingWindow.isMaximized) {\n\t\t\treturn;\n\t\t}\n\t\tif (RouterClient) RouterClient.transmit(\"Assimilation.taskbar\", { visible: true });\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"onMouseUp\", \"movingAGroupOfWindows\", this.movingAGroupOfWindows, \"groupMode\", this.groupMode, \"resizeObject\", this.resizeObject);\n\t\t}\n\n\t\tif (this.movingAGroupOfWindows) {\n\t\t\t//@todo refactor. correct sounds dumb.\n\t\t\tthis.resizeObject = this.correctResizeObject(this.movingWindow, this.resizeObject);\n\t\t\tthis.movingGroup.scale(this.groupMask.getBounds(), this.resizeObject.handle, this);\n\t\t\tthis.hideGroupMask();\n\t\t\tvar groupIter = this.groupWindowIterator(this.movingGroup);\n\t\t\tfor (let win of groupIter) {\n\t\t\t\twin.show();\n\t\t\t}\n\t\t\tthis.movingAGroupOfWindows = false;\n\t\t}\n\n\t\tlet dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (let win of dockingPoolIterator) {\n\t\t\t//Only break and remake the groups if a user initiated the move action. If the OS moved the group, there is no reason to break it\n\t\t\tif (!params.systemMoved) {\n\t\t\t\tthis.buildSnapRelationships(win);\n\t\t\t\tif (win.snappedWindows.length === 0 && win.groupNames.length) {\n\t\t\t\t\tthis.removeWindowFromAllGroups(win);\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t\t// If this window is in a movable group, get the window in the\n\t\t\t// top right and show only its taskbar icon.\n\t\t\tconst movableGroup = this.getMovableGroup(win.name);\n\t\t\tif (movableGroup) {\n\t\t\t\tlet groupAnchor = movableGroup.getMoveAnchor(\"BottomLeft\");\n\t\t\t\tif (groupAnchor.name === win.name) {\n\t\t\t\t\twin.showTaskbarIcon();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twin.showTaskbarIcon();\n\t\t\t}\n\t\t}\n\n\t\tlet movedWin = {\n\t\t\tname: this.movingWindow.name,\n\t\t\tmonitor: this.getMonitorForWindow(this.movingWindow)\n\t\t};\n\n\t\tstationaryWindow = null;\n\t\tdockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (let win of dockingPoolIterator) {\n\t\t\twin.resizeHandle = null;\n\t\t\tif (win.groupNames.length) {\n\t\t\t\twin.groupNames.forEach(groupName => {\n\t\t\t\t\tlet group = this.getGroup(groupName);\n\t\t\t\t\tgroup.updateBounds();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tjoinedWindows = [];\n\t\tjoinedWindowNames = [];\n\t\t//If we did a group operation, call stopMove, which triggers a bounds save.\n\t\tif (this.movingGroup) {\n\t\t\t// When we have finished acting on the group, update each individual window's 'finished' property. Then call the function to complete the move.\n\t\t\tfor (let windowName in this.movingGroup.windows) {\n\t\t\t\tlet win = this.getWindow(windowName);\n\t\t\t\twin.finished = true;\n\t\t\t}\n\t\t\tthis.movingGroup.stopMove();\n\t\t\t// When we have finished acting on the group, update each individual window's 'finishedMove' property. Then call the function to complete the move.\n\t\t\tfor (let windowName in this.movingGroup.windows) {\n\t\t\t\tlet win = this.getWindow(windowName);\n\t\t\t\twin.win._stopMove();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.movingWindow.win.stopMove();\n\t\t}\n\n\t\t//If we mouse up on a dockable component we need to check if it should be docked. If it should, we have to call to move the window since we also want to expand one side or another. Since a docked window expands to take the width (or height) of the monitor.\n\t\tlet monitor = movedWin.monitor;\n\t\tlet modifiedRequest = this.moveRequest;\n\t\tif (modifiedRequest) {\n\t\t\tif (this.movingWindow.isDockableComponent && !this.movingWindow.isDocked && this.movingWindow.snappedMonitor) {\n\t\t\t\tmodifiedRequest.dockedHeight = this.movingWindow.dockedParams.height;//TODO: This will only work when docking top/bottom (which is all that's allowed for now)\n\t\t\t\tmodifiedRequest = monitor.dockWindowToMonitor(this.moveRequest);\n\t\t\t\tif (modifiedRequest) {\n\t\t\t\t\tthis.moveWindow(modifiedRequest, Function.prototype);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.hideGroupMask();\n\n\t\tthis.movingGroup = null;\n\t\tthis.movingWindow = null;\n\t\tthis.resizeObject = {};\n\t\t//moveRequest is null on group mask resizes..sometimes.\n\t\t//@todo, investigate.\n\t\tif (this.moveRequest && this.groupMode.enabled && groupAction.name) {\n\t\t\t// let group = this.getGroup(groupAction.name);\n\t\t\t// for (let windowName in groupAction.windows) {\n\t\t\t// \tif (groupBlacklist.includes(windowName)) {\n\t\t\t// \t\tdelete groupAction.windows[windowName];\n\t\t\t// \t}\n\t\t\t// }\n\n\t\t\t// if (group || (Object.keys(groupAction.windows).length > 1)) {\n\t\t\t// \tfor (let windowName in groupAction.windows) {\n\t\t\t// \t\tLogger.system.verbose(windowName);\n\t\t\t// \t\tthis.addWindowToGroup({\n\t\t\t// \t\t\tgroupName: groupAction.name,\n\t\t\t// \t\t\twin: this.getWindow(windowName)\n\t\t\t// \t\t});\n\t\t\t// \t}\n\t\t\t// }\n\t\t\tthis.formGroup(this.moveRequest.name, { isMovable: false });\n\t\t}\n\t\tthis.moveRequest = null;\n\t\tthis.fixWindowOpacity({\n\t\t\tcheckForSnappability: false,\n\t\t\tpersist: true\n\t\t});\n\n\t\tshortCircuit = false;\n\n\t\t//function below defined by the service. Tell it which monitor the window was on when it moved.\n\t\tif (this.onMoveComplete) {\n\t\t\tthis.onMoveComplete(movedWin, params.triggeredByAutoArrange);\n\t\t}\n\t}\n\n\tstatic get NO_CHANGE() { return -1; }\n\n\t/**\n\t* Moves one window into claimed space, if outside of said space.\n\t*\n\t* @param {object} windowThatCanClaimSpace The window that might have claimed space.\n\t*  Its height/width will be used to determine where to move other windows to\n\t* @param {array} monitors An array of monitors. Will be used to determine what windows are where, and what needs to move\n\t* @param {object} windowName the window to move\n\t* @param {boolean} initializing indicates whether this window is still initializing.  If it is, we move the window by resizing it\n\t*   \"manually\" instead of moving it as part of a group\n\t* @param {function} done callback on completion\n\t*/\n\tmoveWindowOutOfClaimedSpace(windowThatCanClaimSpace, monitors, windowName, initializing = false, done = Function.prototype) {\n\t\tvar self = this;\n\n\t\tlet win = self.getWindow(windowName);\n\t\t// Don't move a minimized window out of claimed space, that move needs to be handled on restore. The OS doesn't update a window's position while minimized\n\t\t// so updating the bounds here, won't affect window positon on restore\n\t\tif (!win || win.name === windowThatCanClaimSpace.name || win.isMinimized) return done();\n\t\t//gets set once we find the monitor for the window.\n\t\tlet isDone = false;\n\t\tfor (let i = 0; i < monitors.length; i++) {\n\t\t\tlet mon = monitors[i];\n\t\t\t//Only need to move windows if the current monitor is the one we docked to and if the current window is on said monitor\n\t\t\tif (windowThatCanClaimSpace.monitor.name === mon.name && win.monitor.name === mon.name) {\n\t\t\t\t//If the window is initializing, we calculate a resize instead of a move.  See below.\n\t\t\t\tlet newBounds = DockingCalculator.calculateNewBoundsOutsideClaimedSpace(windowThatCanClaimSpace, win, initializing);\n\t\t\t\t\n\t\t\t\tconst boundsChanged = newBounds.changeType != DockingCalculator.NO_CHANGE;\n\t\t\t\tif (boundsChanged) {\n\t\t\t\t\tisDone = true;\n\t\t\t\t\tif (initializing)\n\t\t\t\t\t{\n\t\t\t\t\t\t//If the window is initializing, we don't yet have all of the group information necessary to move windows as groups by calling\n\t\t\t\t\t\t//self.requestMove(), so instead we just resize it out of the way of the claimed space.\n\t\t\t\t\t\twin.setBounds(newBounds, (res) => {\n\t\t\t\t\t\t\tself.onMouseUp(false);\n\t\t\t\t\t\t\t//Update the monitor attached to the window on each bounds change (as it may have moved monitors)\n\t\t\t\t\t\t\t//If the operation causes any windows to move monitors we need to be sure the monitor attached to that window is updated\n\t\t\t\t\t\t\twin.monitor = this.getMonitorForWindow(win);\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tself.requestMove(newBounds, (res) => {\n\t\t\t\t\t\t\tself.onMouseUp(false);\n\t\t\t\t\t\t\t//Update the monitor attached to the window on each bounds change (as it may have moved monitors)\n\t\t\t\t\t\t\t//If the operation causes any windows to move monitors we need to be sure the monitor attached to that window is updated\n\t\t\t\t\t\t\twin.monitor = this.getMonitorForWindow(win);\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!isDone) {\n\t\t\tdone();\n\t\t}\n\t}\n\n\t/**\n\t * Calculates new bounds outside of a window that can claim space if and only if the window has claimed space and\n\t * the `win` window intersects it on the vertical axis.  (As of 8/29/19, the only window that can claim space is the toolbar.)\n\t * @param {object} windowThatCanClaimSpace the window that can claim space (which may or may not have claimd space)\n\t * @param {object} win the window that might need new bounds\n\t * @param {boolean} resize indicates to resize the window out of the way instead of moving it\n\t * @return {object} the new bounds for the window.  changeType is DockingCalculator.NO_CHANGE if no new bounds are needed.\n\t */\n\tstatic calculateNewBoundsOutsideClaimedSpace(windowThatCanClaimSpace, win, resize) {\n\t\tlet newBounds = {\n\t\t\tleft: win.left,\n\t\t\tright: win.right,\n\t\t\ttop: win.top,\n\t\t\tbottom: win.bottom,\n\t\t\theight: win.height,\n\t\t\twidth: win.width,\n\t\t\tname: win.name,\n\t\t\tprocessSnaps: false,\n\t\t\t//NO_CHANGE indicates an invalid change type; i.e., no change.  if changed, it will be set to one of BoundsChangeType\n\t\t\tchangeType : DockingCalculator.NO_CHANGE\n\t\t};\n\n\t\tconst spaceHasBeenClaimedOnTop = windowThatCanClaimSpace.monitorDockablePositions.TOP === windowThatCanClaimSpace.dockedPosition;\n\t\tconst spaceHasBeenClaimedOnBottom = windowThatCanClaimSpace.monitorDockablePositions.BOTTOM === windowThatCanClaimSpace.dockedPosition;\n\t\tif (spaceHasBeenClaimedOnTop) {\n\t\t\tconst windowIntersectsClaimedSpace = win.top < windowThatCanClaimSpace.bottom;\n\t\t\tif (windowIntersectsClaimedSpace) {\n\t\t\t\t// Set the top of the window to the bottom of the window that has claimed space\n\t\t\t\tnewBounds.top = windowThatCanClaimSpace.bottom;\n\t\t\t\tif (resize) // if we are resizing, all we do after we set the top is recalculate the height\n\t\t\t\t{\n\t\t\t\t\tnewBounds.height = newBounds.bottom - newBounds.top;\n\t\t\t\t\tnewBounds.changeType = 2;\n\t\t\t\t}\n\t\t\t\telse // otherwise, we recalculate the bottom (and the height stays the same)\n\t\t\t\t{\n\t\t\t\t\tnewBounds.bottom = newBounds.top + newBounds.height;\n\t\t\t\t\tnewBounds.changeType = 0;\n\t\t\t\t}\n\t\t\t\tnewBounds.mousePosition = {\n\t\t\t\t\tx: win.left + (win.width / 2),\n\t\t\t\t\ty: newBounds.top\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\telse if (spaceHasBeenClaimedOnBottom) {\n\t\t\tconst windowIntersectsClaimedSpace = win.bottom > windowThatCanClaimSpace.top;\n\t\t\tif (windowIntersectsClaimedSpace) {\n\t\t\t\t// Set the bottom of the window to the top of the window that has claimed space\n\t\t\t\tnewBounds.bottom = windowThatCanClaimSpace.top;\n\t\t\t\tif (resize) // if we are resizing, all we do after we set the new bottom is recalculate the height\n\t\t\t\t{\n\t\t\t\t\tnewBounds.height = newBounds.bottom - newBounds.top;\n\t\t\t\t\tnewBounds.changeType = 1;\n\t\t\t\t}\n\t\t\t\telse // otherwise, we recalculate the top (and the height stays the same)\n\t\t\t\t{\n\t\t\t\t\tnewBounds.top = newBounds.bottom - newBounds.height;\n\t\t\t\t\tnewBounds.changeType = 0;\n\t\t\t\t}\n\t\t\t\tnewBounds.mousePosition = {\n\t\t\t\t\tx: win.left + (win.width / 2),\n\t\t\t\t\ty: newBounds.bottom\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn newBounds;\n\t}\n\n\t/**\n\t * Loops through monitors/windows and moves any windows that are in the space of `windowThatCanClaimSpace` outside of said space.\n\t *\n\t * @param {object} windowThatCanClaimSpace The window that has claimed space. Its position will be used to determine where to move other windows to\n\t * @param {array} monitors An array of monitors. Will be used to determine what windows are where, and what needs to move\n\t */\n\tmoveAllWindowsOutOfClaimedSpace(windowThatCanClaimSpace, monitors) {\n\t\tthis.movingWindow = null;\n\t\tlet windowNames = this.getWindowNames();\n\n\t\tvar moveOne = (windowName, done) => {\n\t\t\tthis.moveWindowOutOfClaimedSpace(windowThatCanClaimSpace, monitors, windowName, false, done);\n\t\t};\n\n\t\tasyncEachSeries(windowNames, moveOne, Function.prototype);\n\t}\n\n\t/**\n\t * Adjusts the claimed/available space of a monitor based on the docked window supplied to it\n\t *\n\t * @param {object} params\n\t * @param {string} params.action \"dock\" or \"undock\". The action determines whether space is claimed or released.\n\t * @param {object} params.win The window being docked\n\t * @param {object} params.monitor The monitor the window is docking to\n\t * @param {integer} params.location An enum from DockableWindow. A number that ties back to a docking location\n\t */\n\tadjustClaimedSpace(params) {\n\t\tif (params.action === undefined || params.dockableWin === undefined || params.dockableMonitor === undefined || params.location === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tlet { action, dockableWin: win, dockableMonitor: monitor, location } = params;\n\t\tLogger.system.warn(\"Adjust claimed space\", action, location);\n\n\t\tlet adjustedMonitor = monitor;\n\t\tswitch (action) {\n\t\t\tcase \"dock\":\n\t\t\t\t// ToDo: this manipulation here of claimed space state within a window is lacking abstraction; ideally encapsulate the functionality within the DockableWindow;\n\t\t\t\t// or minimally provide functions (win.enableClaimedSpace() and win.disableClaimedSpace())\n\t\t\t\tif (!win.isClaimingSpace) {\n\t\t\t\t\tadjustedMonitor = this.claimSpace(win, monitor, location);\n\t\t\t\t\twin.isClaimingSpace = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"undock\":\n\t\t\t\tif (win.isClaimingSpace) {\n\t\t\t\t\tadjustedMonitor = this.releaseClaimedSpace(win, monitor);\n\t\t\t\t\twin.isClaimingSpace = false;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"redock\":\n\t\t\t\t// Release the claimed space for the current monitor. Use that updated monitor to claim space at the new location\n\t\t\t\t// Currently only claimed space on the same monitor is released. For the current use case we don't expect the window\n\t\t\t\t// to be claiming space on a monitor that still exists.\n\t\t\t\tadjustedMonitor = this.releaseClaimedSpace(win, monitor);\n\t\t\t\tadjustedMonitor = this.claimSpace(win, adjustedMonitor, location);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn adjustedMonitor;\n\t}\n\n\t/**\n\t * Releases claimed space for an undocked window.\n\t *\n\t * @param {object} win The window being undocked\n\t * @param {object} monitor The monitor the window is undocking from\n\t * @return {object} The modified monitor with new unclaimedRect (released space)\n\t */\n\treleaseClaimedSpace(win, monitor) {\n\t\tlet availableRect = clone(monitor.availableRect, Logger.system.error);\n\n\t\tLogger.debug(\"RELEASING CLAIMED SPACE, unclaimedRect is being set to availableRect\");\n\t\tmonitor.unclaimedRect = availableRect;\n\t\t[\"left\", \"top\", \"right\", \"bottom\", \"height\", \"width\"].forEach((dimension) => {\n\t\t\tmonitor[dimension] = availableRect[dimension];\n\t\t});\n\t\tmonitor.calculateSnappingRegions();\n\t\treturn monitor;\n\t}\n\n\t/**\n\t * Called when a window is docked in order to claim that space and not allow other windows inside of it\n\t *\n\t * @param {object} win The window being docked\n\t * @param {object} monitor The monitor the window is being docked to\n\t * @param {integer} location An enum from DockableWindow. A number that ties back to a docking location\n\t * @return {object} The modified monitor with new unclaimedRect (claimed space)\n\t */\n\tclaimSpace(win, monitor, location) {\n\t\tlet unclaimedRect = clone(monitor.unclaimedRect, Logger.system.error);\n\n\t\t//TODO: Handle LEFT and RIGHT cases.\n\t\tswitch (location) {\n\t\t\tcase win.monitorDockablePositions.TOP:\n\t\t\t\tunclaimedRect.top = unclaimedRect.top + win.dockedParams.height;\n\t\t\t\tLogger.debug(\"CLAIMING SPACE, unclaimed.top now: \", unclaimedRect.top);\n\t\t\t\tbreak;\n\t\t\tcase win.monitorDockablePositions.BOTTOM:\n\t\t\t\tunclaimedRect.bottom = unclaimedRect.bottom - win.dockedParams.height;\n\t\t\t\tLogger.debug(\"CLAIMING SPACE, unclaimed.bottom now: \", unclaimedRect.bottom);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t//!NOTE: This may need to be moved inside of the TOP and BOTTOM blocks as it won't be applicable when docking left or right\n\t\tunclaimedRect.height = unclaimedRect.bottom - unclaimedRect.top;\n\t\t[\"left\", \"top\", \"right\", \"bottom\", \"height\", \"width\"].forEach((dimension) => {\n\t\t\tmonitor[dimension] = unclaimedRect[dimension];\n\t\t});\n\t\tmonitor.unclaimedRect = unclaimedRect;\n\t\treturn monitor;\n\t}\n\n\t/**\n\t * Updates local references of monitor information. Happens when a user removes/adds a monitor.\n\t */\n\tupdateMonitorInfo(monitorUpdate) {\n\t\tLogger.system.debug(\"MONITOR: dockingCalculator.updateMonitorInfo\", monitorUpdate);\n\n\t\trestrictedAreas = [];\n\t\t//@todo, pick up zones that are off limits from terry's update.\n\t\tmonitorUpdate.forEach((monitor) => {\n\t\t\t//Push updated bounds to the pool.\n\t\t\tif (monitor.availableRect.top !== monitor.unclaimedRect.top) {\n\t\t\t\trestrictedAreas.push({\n\t\t\t\t\tmin: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.left,\n\t\t\t\t\t\ty: monitor.availableRect.top\n\t\t\t\t\t},\n\t\t\t\t\tmax: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.right,\n\t\t\t\t\t\ty: monitor.unclaimedRect.top\n\t\t\t\t\t},\n\t\t\t\t\tposition: \"top\"\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (monitor.availableRect.left !== monitor.unclaimedRect.left) {\n\t\t\t\trestrictedAreas.push({\n\t\t\t\t\tmin: {\n\t\t\t\t\t\tx: monitor.availableRect.left,\n\t\t\t\t\t\ty: monitor.unclaimedRect.top\n\t\t\t\t\t},\n\t\t\t\t\tmax: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.right,\n\t\t\t\t\t\ty: monitor.unclaimedRect.bottom\n\t\t\t\t\t},\n\t\t\t\t\tposition: \"left\"\n\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (monitor.availableRect.right !== monitor.unclaimedRect.right) {\n\t\t\t\trestrictedAreas.push({\n\t\t\t\t\tmin: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.right,\n\t\t\t\t\t\ty: monitor.unclaimedRect.top\n\t\t\t\t\t},\n\t\t\t\t\tmax: {\n\t\t\t\t\t\tx: monitor.availableRect.right,\n\t\t\t\t\t\ty: monitor.unclaimedRect.bottom\n\t\t\t\t\t},\n\t\t\t\t\tposition: \"right\"\n\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (monitor.availableRect.bottom !== monitor.unclaimedRect.bottom) {\n\t\t\t\trestrictedAreas.push({\n\t\t\t\t\tmin: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.left,\n\t\t\t\t\t\ty: monitor.unclaimedRect.bottom\n\t\t\t\t\t},\n\t\t\t\t\tmax: {\n\t\t\t\t\t\tx: monitor.unclaimedRect.right,\n\t\t\t\t\t\ty: monitor.availableRect.bottom\n\t\t\t\t\t},\n\t\t\t\t\tposition: \"bottom\"\n\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\n\t/****************************************\n\t *\t  Calculators - Window Collections \t*\n\t ****************************************/\n\tformGroup(name, params) {\n\t\tlet { isMovable, whitelist, isAlwaysOnTop } = params;\n\t\tvar self = this;\n\t\tif (!whitelist) {\n\t\t\twhitelist = this.getWindowNames();\n\t\t}\n\t\tlet win = this.getWindow(name);\n\t\tlet windows = win.snappedWindows.map(snapObj => snapObj.name).filter(name => {\n\t\t\treturn whitelist.includes(name);\n\t\t});\n\n\t\tlet processed = [win.name];\n\t\tfunction getSnappedWindows(windo) {\n\t\t\tprocessed.push(windo.name);\n\t\t\tlet snappedWindows = windo.snappedWindows.map(snapObj => snapObj.name).filter(name => {\n\t\t\t\treturn whitelist.includes(name);\n\t\t\t});\n\t\t\twindo.snappedWindows.forEach((snapObj) => {\n\t\t\t\tif (!processed.includes(snapObj.name) && whitelist.includes(snapObj.name)) {\n\t\t\t\t\tlet snapWin = self.getWindow(snapObj.name);\n\t\t\t\t\tlet grandSnaps = getSnappedWindows(snapWin);\n\t\t\t\t\tsnappedWindows = snappedWindows.concat(grandSnaps);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn snappedWindows;\n\t\t}\n\n\t\twin.snappedWindows.forEach((snapObj) => {\n\t\t\tif (whitelist.includes(snapObj.name)) {\n\t\t\t\tlet snapWin = self.getWindow(snapObj.name);\n\t\t\t\tlet snappedWindows = getSnappedWindows(snapWin);\n\t\t\t\twindows = windows.concat(snappedWindows);\n\t\t\t}\n\t\t});\n\t\t//dedupe.\n\t\twindows = windows.filter(function (el, i, arr) {\n\t\t\treturn arr.indexOf(el) === i;\n\t\t});\n\t\tif (windows.length) {\n\t\t\tthis.groupWindows({ windows, isMovable: isMovable, isAlwaysOnTop: isAlwaysOnTop });\n\t\t}\n\t\treturn windows;\n\t}\n\n\t/**\n\t* Spins through all of the windows that can group and creates groups based on window position.\n\t*/\n\tconstituteGroups() {\n\t\tfor (var groupName in this.getGroups()) {\n\t\t\tthis.removeGroup(groupName);\n\t\t}\n\t\tthis.eliminateGaps();\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tif (groupBlacklist.includes(win.name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar groupList = this.getGroupNames();\n\t\t\tif (!Object.keys(groupList).length) {\n\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\tgroupName: uuidv4(),\n\t\t\t\t\twin: win\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.buildSnapRelationships(win);\n\t\t\tvar snappedWindows = win.snappedWindows;\n\t\t\tfor (var i = 0, len = snappedWindows.length; i < len; i++) {\n\t\t\t\tvar snapObj = snappedWindows[i];\n\t\t\t\tvar snappedWindow = this.getWindow(snapObj.name);\n\t\t\t\tif (win.groupNames.length) {\n\t\t\t\t\twin.groupNames.forEach(groupName => {\n\t\t\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\t\t\tgroupName: groupName,\n\t\t\t\t\t\t\twin: snappedWindow\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else if (snappedWindow && snappedWindow.groupNames.length) {\n\t\t\t\t\tsnappedWindow.groupNames.forEach(groupName => {\n\t\t\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\t\t\tgroupName: groupName,\n\t\t\t\t\t\t\twin: win\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tlet groupParams = {\n\t\t\t\t\t\tname: uuidv4(),\n\t\t\t\t\t\tMINIMUM_HEIGHT: this.MINIMUM_HEIGHT,\n\t\t\t\t\t\tMINIMUM_WIDTH: this.MINIMUM_WIDTH\n\t\t\t\t\t};\n\t\t\t\t\tvar newGroup = new DockableGroup(groupParams, {\n\t\t\t\t\t\tLogger\n\t\t\t\t\t});\n\t\t\t\t\tthis.addGroup(newGroup);\n\t\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\t\tgroupName: newGroup.name,\n\t\t\t\t\t\twin: win\n\t\t\t\t\t});\n\t\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\t\tgroupName: newGroup.name,\n\t\t\t\t\t\twin: snappedWindow\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Given a moveRequest, it returns an array of windowNames. The check essentially boils down to \"is this window within my snapping buffer?\"\n\t* @param  {moveRequest} moveRequest\n\t*/\n\tgetSnappableWindows(moveRequest) {\n\t\tvar snappableWindows = [];\n\t\tvar windowIter = this.dockingPool.iterator();\n\t\tfor (let win of windowIter) {\n\t\t\t//if moveRequest puts the window inside of the stationary window's buffer, snap.\n\t\t\tif (moveRequest.name === win.name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!win.ignoreSnappingRequests && win.canSnapToWindow(moveRequest) && !moveRequest.ignoreSnappingRequests) {\n\t\t\t\tsnappableWindows.push(win.name);\n\t\t\t}\n\t\t}\n\n\t\treturn snappableWindows;\n\t}\n\n\t/**\n\t* Checks to see if the window is within the snapping region of any monitor.\n\t* @todo, make setBufferSize trickles down to monitors.\n\t*/\n\tgetSnappableMonitors(moveRequest) {\n\t\tvar monitorNames = Object.keys(monitorPool.getAll()),\n\t\t\tsnappableMonitors = [];\n\t\tfor (var i = 0, len = monitorNames.length; i < len; i++) {\n\t\t\tvar monitorName = monitorNames[i];\n\t\t\tvar monitor = monitorPool.get(monitorName);\n\n\t\t\tif (monitor.canSnapToWindow(moveRequest)) {\n\t\t\t\tsnappableMonitors.push(monitorName);\n\t\t\t}\n\n\t\t}\n\n\t\treturn snappableMonitors;\n\t}\n\n\t/**\n\t * Returns an object that describes the edges and corners that are shared between two windows.\n\t */\n\tgetSnapObj(win1, win2) {\n\t\treturn {\n\t\t\tcanGroup: !groupBlacklist.includes(win2.name),\n\t\t\tname: win2.name,\n\t\t\tedges: win1.getSharedEdges(win2),\n\t\t\tcorners: win1.getSharedCorners(win2)\n\t\t};\n\t}\n\n\t/**\n\t * Snaps two windows..\n\t */\n\tsnapTwoWindows(win1, win2) {\n\t\tif (groupBlacklist.includes(win1.name) || groupBlacklist.includes(win2.name)) {\n\t\t\treturn;\n\t\t}\n\t\twin1.addSnappedWindow(this.getSnapObj(win1, win2));\n\t\twin2.addSnappedWindow(this.getSnapObj(win2, win1));\n\t}\n\n\t/**\n\t * Wipes all relationships between windows and recalculates them.\n\t */\n\trecalculateSnaps() {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"RECALCULATING SNAP RELATIONSHIPS\");\n\t\t}\n\t\tvar windowIter = this.dockingPool.iterator();\n\t\tfor (let win of windowIter) {\n\t\t\tthis.buildSnapRelationships(win);\n\t\t\tif (win.groupNames.length) {\n\t\t\t\twin.groupNames.forEach(groupName => {\n\t\t\t\t\tlet group = this.getGroup(groupName);\n\t\t\t\t\tgroup.updateBounds();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Returns an array of `snapObject`s. Just name, shared edges, shared corners, and whether the window canGroup.\n\t* @param  {dockableWindow} win\n\t*/\n\tbuildSnapRelationships(win) {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ws buildSnapRelationships\", win.name);\n\t\t}\n\t\tif (win.snappedWindows.length) {\n\t\t\tthis.wipeSnapRelationships(win.name);\n\t\t}\n\t\tvar snappedWindows = [];\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\n\t\tfor (var snappedWindow of dockingPoolIterator) {\n\t\t\tif (debug) {\n\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ws dockingPoolIterator\", snappedWindow.name);\n\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ws win.sharesAnEdgeWith(snappedWindow)\", win.sharesAnEdgeWith(snappedWindow));\n\t\t\t}\n\t\t\tif (snappedWindow.name === win.name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (win.sharesAnEdgeWith(snappedWindow) || win.sharesACornerWith(snappedWindow)) {\n\t\t\t\tthis.snapTwoWindows(win, snappedWindow);\n\t\t\t}\n\t\t}\n\t\treturn snappedWindows;\n\t}\n\n\t/**\n\t* Returns any window with a vertex on a segment.\n\t* @param  {segment} segment A line segment. An array with 2 points in it (start and end).\n\t* @return {type}\n\t*/\n\tgetWindowsOnSegment(segment) {\n\t\tvar windowsOnSegment = [];\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tvar points = [segment.min, segment.max];\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tfor (var p = 0, len = points.length; p < len; p++) {\n\t\t\t\tvar point = points[p];\n\t\t\t\tif (win.pointIsOnBoundingBox(point)) {\n\t\t\t\t\tlet snapObj = {\n\t\t\t\t\t\tname: win.name,\n\t\t\t\t\t\tedge: win.getEdgeByPoint(point)\n\t\t\t\t\t};\n\t\t\t\t\tsnapObj.segment = win.getEdges(\"obj\")[snapObj.edge];\n\t\t\t\t\twindowsOnSegment.push(snapObj);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn windowsOnSegment;\n\t}\n\n\t/**\n\t* Not sure why this function doesn't use the one above. Similar functionality, but you can pass in a string instead of a line segment.\n\t* @todo, make it use the function above.\n\t* @param  {dockableWindow} win\n\t* @param  {string} edge E.g., 'left', 'right', etc.\n\t* @return {array}\n\t*/\n\tgetWindowsOnEdge(win, edge, includeCorners) {\n\t\tif (includeCorners === undefined) {\n\t\t\tincludeCorners = false;\n\t\t}\n\t\tvar windowsOnEdge = [];\n\t\tif (!edge) {\n\n\t\t\t//@todo, what went wrong to cause this.................\n\t\t\treturn [];\n\t\t}\n\t\tvar splitEdge = edge.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\t\tif (splitEdge.length > 1) {\n\t\t\tlet cornerPoint = win.getPointByVertex(edge);\n\t\t\tvar windowsAtCorner = this.getWindowsAtPoint(cornerPoint);\n\n\t\t\tfor (let i = 0, len = windowsAtCorner.length; i < len; i++) {\n\t\t\t\tlet possibleSnapper = this.getWindow(windowsAtCorner[i]);\n\n\t\t\t\twindowsOnEdge.push({\n\t\t\t\t\tname: possibleSnapper.name,\n\t\t\t\t\tedge: possibleSnapper.getVertexByPoint(cornerPoint)\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t} else {\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[edge];\n\t\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\t\tvar windowSegment = win.getEdges(\"obj\", includeCorners)[edge];\n\n\t\t\tfor (let possibleSnapper of dockingPoolIterator) {\n\t\t\t\tif (possibleSnapper.name === win.name) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet segment = possibleSnapper.getEdges(\"obj\", includeCorners)[oppEdge];\n\t\t\t\tvar shouldPush = false;\n\t\t\t\tlet points = [{\n\t\t\t\t\tname: possibleSnapper.name,\n\t\t\t\t\tval: segment.min\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: possibleSnapper.name,\n\t\t\t\t\tval: segment.max\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: win.name,\n\t\t\t\t\tval: windowSegment.min\n\t\t\t\t}, {\n\t\t\t\t\tname: win.name,\n\t\t\t\t\tval: windowSegment.max\n\t\t\t\t}];\n\t\t\t\tif ([\"top\", \"bottom\"].includes(edge)) {\n\t\t\t\t\tif (segment.min.y !== windowSegment.min.y) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tpoints = points.sort((a, b) => {\n\t\t\t\t\t\treturn a.val.x > b.val.x;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif ([\"left\", \"right\"].includes(edge)) {\n\t\t\t\t\tif (segment.min.x !== windowSegment.min.x) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tpoints = points.sort((a, b) => {\n\t\t\t\t\t\treturn a.val.y > b.val.y;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (points[0].name !== points[1].name) {\n\t\t\t\t\tshouldPush = true;\n\t\t\t\t}\n\t\t\t\tif (shouldPush) {\n\t\t\t\t\tif (debug) {\n\t\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", windowSegment, segment, win.name, possibleSnapper.name, edge);\n\t\t\t\t\t}\n\t\t\t\t\tlet snapObj = {\n\t\t\t\t\t\tname: possibleSnapper.name,\n\t\t\t\t\t\tedge: oppEdge\n\t\t\t\t\t};\n\t\t\t\t\twindowsOnEdge.push(snapObj);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn windowsOnEdge;\n\t}\n\n\t/**\n\t* Returns a list of windows that straddle a given edge.\n\t*\t+-----------+------------+\n\t*\t|           |            |\n\t*\t|           |            |\n\t*\t|    A      |     B      |\n\t*\t|           |            |\n\t*\t+-----------+--+---------+\n\t*\t|              |         |\n\t*\t|    C         |   D     |\n\t*\t|              |         |\n\t*\t+--------------+---------+\n\t*\n\t* In the drawing above, B straddles the left edge of D and the right Edge of C.\n\t* @param  {dockableWindow} win\n\t* @param  {string} edge E.g., 'left', 'right', etc.\n\t*/\n\tgetStraddlers(win, edge) {\n\t\tvar straddlers = [];\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var straddler of dockingPoolIterator) {\n\n\t\t\tif (straddler.name === win.name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar corners = straddler.vertices;\n\t\t\tfor (var corner in corners) {\n\t\t\t\tif (win.pointIsOnBoundingBox(corners[corner], false)) {\n\t\t\t\t\tstraddlers.push({\n\t\t\t\t\t\tname: straddler.name,\n\t\t\t\t\t\tedge: win.getEdgeByPoint(corners[corner])\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn straddlers;\n\t}\n\n\t/**\n\t* Given an X, Y point, it returns a list of windows with that point on their boundingBox.\n\t* @param  {object} point\n\t* @return {array}\n\t*/\n\tgetWindowsAtPoint(point) {\n\t\tvar windows = [];\n\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tif (groupBlacklist.includes(win.name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (win.pointIsOnBoundingBox(point)) {\n\t\t\t\twindows.push(win.name);\n\t\t\t}\n\t\t}\n\t\treturn windows;\n\t}\n\n\t/**\n\t* Just a helper to say whether a window has an edge on the edge of the group.\n\t* @todo refactor to just compare win[edge] to group[edge].\n\t* @param  {dockableWindow} win\n\t* @param  {dockableGroup} group\n\t*/\n\twindowIsOnExteriorEdgeOfGroup(win, group) {\n\t\tvar winBounds = win.windowBoundingBox;\n\t\tvar groupBounds = group.bounds;\n\t\t//left\n\t\tif (winBounds.min.x === groupBounds.min.x) {\n\t\t\treturn true;\n\t\t}\n\t\t//bottom\n\t\tif (winBounds.max.y === groupBounds.max.y) {\n\t\t\treturn true;\n\t\t}\n\t\t//right\n\t\tif (winBounds.max.x === groupBounds.max.x) {\n\t\t\treturn true;\n\t\t}\n\t\t//top\n\t\tif (winBounds.min.y === groupBounds.min.y) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Lets the program know that shift is being held down. This is used when moving a window that's explicitly grouped (if assimilation is turned on). In that case, the window moves out of the group.\n\t */\n\tsetShift(bool) {\n\t\tthis.shiftKey = bool;\n\t}\n\n\t/**\n\t* Returns an ordered Object. Sorts by Top, then Left.\n\t* @return {Object} Object where the keys are names of the window.\n\t*/\n\torderWindows(windowList, anchor) { //TODO: move this into group (see groupWindowIterator, scaleGroup, group.scale)\n\t\t//sort windows by top so that when we constitute groups it won't randomly compare windows in the bottom to ones in the top of the monitor.\n\t\tvar sortableArray = [];\n\t\tif (windowList === undefined) {\n\t\t\twindowList = this.dockingPool.getAll();\n\t\t}\n\t\tfor (var windowName in windowList) {\n\t\t\tvar win = this.getWindow(windowName);\n\t\t\tsortableArray.push(win);\n\t\t}\n\t\tsortableArray.sort(function (a, b) {\n\t\t\tvar aTop = a.top;\n\t\t\tvar aLeft = a.left;\n\n\t\t\tvar bTop = b.top;\n\t\t\tvar bLeft = b.left;\n\t\t\t//if the window's top is above the anchor's top, compare its bottom to the anchor's top. In a 3x3 grid, this will ensure that windows in row 2 end up after windows in row 3. Looking at the grid below, if we just compared the window's top to the anchor's top, window D would appear in the array before D, even though D is closer to G. By comparing the bottoms of windows above the anchor, we force the algorithm to look at the left instead of the top. That all may be a crock of shit, too. I Basically, if I resize from the top-right of this group I want it to go: G, H, I, D, E, F, A, B, C. The algorithm below does that.\n\t\t\t/**\n\t\t\t * +-----------+--------------+-------------+\n\t\t\t * |           |              |             |\n\t\t\t * |           |              |             |\n\t\t\t * |    A      |      B       |     C       |\n\t\t\t * |           |              |             |\n\t\t\t * |           |              |             |\n\t\t\t * +-----------+              +-------------+\n\t\t\t * |           +--------------+             |\n\t\t\t * |           |              |             |\n\t\t\t * |    D      |      E       |      F      |\n\t\t\t * |           |              |             |\n\t\t\t * +----------------------------------------+\n\t\t\t * |           |              |             |\n\t\t\t * |           |              |             |\n\t\t\t * |   G       |       H      |      I      |\n\t\t\t * |           |              |             |\n\t\t\t * |           |              |             |\n\t\t\t * +-----------+--------------+-------------+\n\t\t\t */\n\t\t\tif (anchor) {\n\t\t\t\tlet aDelta = {\n\t\t\t\t\tleft: Math.abs(anchor.left - a.left),\n\t\t\t\t\ttop: a.bottom === anchor.top ? Math.abs(anchor.top - a.bottom) : Math.abs(anchor.top - a.top)\n\t\t\t\t};\n\t\t\t\tlet bDelta = {\n\t\t\t\t\tleft: Math.abs(anchor.left - b.left),\n\t\t\t\t\ttop: b.bottom === anchor.top ? Math.abs(anchor.top - b.bottom) : Math.abs(anchor.top - b.top)\n\t\t\t\t};\n\n\t\t\t\tif (aDelta.left === bDelta.left) {\n\t\t\t\t\treturn aDelta.top > bDelta.top;\n\t\t\t\t}\n\t\t\t\treturn aDelta.left > bDelta.left;\n\t\t\t}\n\t\t\t//orders windows ascending by their Top values.\n\t\t\tif (aTop === bTop) {\n\t\t\t\treturn aLeft - bLeft;\n\t\t\t}\n\t\t\treturn aTop - bTop;\n\n\t\t});\n\n\t\treturn sortableArray;\n\t}\n\n\t/****************************************\n\t *\t\t\tGetters/Setters\t\t\t\t*\n\t ****************************************/\n\t/**\n\t* Registers the window with the calculator\n\t* @param  {string} name\n\t* @param  {dockableWindow} val\n\t*/\n\taddWindow(name, val) {\n\t\tval.setBufferSize(this.bufferSize);\n\t\tval.setResizeThrottlePeriod(this.resizeEventThrottlePeriod);\n\t\tthis.dockingPool.add(name, val);\n\t\tval.limits = {\n\t\t\tminHeight: val.dockingOptions.minHeight,\n\t\t\tminWidth: val.dockingOptions.minWidth,\n\t\t\tmaxHeight: val.dockingOptions.maxHeight,\n\t\t\tmaxWidth: val.dockingOptions.maxWidth\n\t\t};\n\t\tval.monitor = this.getMonitorForWindow(val);\n\t\tif (val.groupName) {\n\t\t\tlet group = this.getGroup(val.groupName);\n\t\t\tgroup.addWindow(val);\n\t\t}\n\t\tthis.buildSnapRelationships(val);\n\t}\n\n\t/**\n\t * Virtually unsnaps a window from all other windows. This doesn't affect physical positioning. Only the relationships that Docking is a aware of.\n\t */\n\twipeSnapRelationships(name) {\n\t\tlet win = this.getWindow(name);\n\t\tif (win && win.snappedWindows) {\n\t\t\tlet snappedWindows = clone(win.snappedWindows, Logger.system.error);\n\t\t\tfor (var i = 0, len = snappedWindows.length; i < len; i++) {\n\t\t\t\tvar snapObj = snappedWindows[i];\n\t\t\t\tvar snappedWindow = this.getWindow(snapObj.name);\n\t\t\t\twin.removeSnappedWindow(snappedWindow.name);\n\t\t\t\tif (snappedWindow) {\n\t\t\t\t\tsnappedWindow.removeSnappedWindow(win.name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes a window from all groups.\n\t */\n\tremoveWindowFromAllGroups(win, deleteGroupsWithOneWindow = true) {\n\t\tif (!win) {\n\t\t\tLogger.system.warn(\"INVESTIGATE: No win passed to removeWindowFromAllGroups.\");\n\t\t\treturn;\n\t\t}\n\t\tlet groupNames = clone(win.groupNames, Logger.system.error);\n\t\tfor (var i = 0, len = groupNames.length; i < len; i++) {\n\t\t\tvar groupName = groupNames[i];\n\t\t\tthis.removeWindowFromGroup(win.name, groupName, deleteGroupsWithOneWindow);\n\t\t}\n\t}\n\n\t/**\n\t* Unregisters the window.\n\t* @param  {string} name\n\t*/\n\tremoveWindow(name, removeListeners = true) {\n\n\t\tlet win = this.getWindow(name);\n\t\tif (!win) {\n\t\t\tLogger.system.warn(\"window was not found:\", name);\n\t\t\treturn;\n\t\t}\n\t\t//Removes event listeners from the window.\n\t\tif (removeListeners) {\n\t\t\twin.removeEventListeners();\n\t\t}\n\t\tif (!win) {\n\t\t\tLogger.system.warn(`INVESTIGATE: No win found for ${name} in removeWindow.`);\n\t\t}\n\t\tif (win && win.groupNames.length) {\n\t\t\t//If we aren't removing listeners, we're removing the window for tiling purposes (so it doesn't mess up other windows resizing). In that case, we don't want to remove groups with a single window, which is what the 2nd param here does.\n\t\t\tthis.removeWindowFromAllGroups(win, !removeListeners);\n\t\t}\n\t\t//If we're removing the window that was last cached on mouseDown, wipe the reference. This way, onMouseUp, the window's bounds-changed event will not trigger, and it will not break everything.\n\t\tif (this.movingWindow && this.movingWindow.name === win.name) {\n\t\t\tthis.movingWindow = null;\n\t\t}\n\t\tthis.wipeSnapRelationships(win.name);\n\t\tthis.dockingPool.remove(name);\n\t}\n\n\t/**\n\t * Returns an array of window names.\n\t */\n\tgetWindowNames() {\n\t\treturn Object.keys(this.dockingPool.getAll());\n\t}\n\n\t/**\n\t* @return {dockingPool}\n\t*/\n\tgetWindows() {\n\t\treturn this.dockingPool.getAll();\n\t}\n\tgetUnignoredWindows() {\n\t\tlet windowIter = this.dockingPool.iterator();\n\t\tlet ret = [];\n\t\tfor (let win of windowIter) {\n\t\t\tret.push(win);\n\t\t}\n\t\treturn ret;\n\t}\n\t/**\n\t * Gets a window object by name.\n\t* @param  {type} name\n\t* @param  {type} throwError Usually we want to throw the error, but sometimes we use this function to filter (e.g., autoarrange).\n\t* @return {type}\n\t*/\n\tgetWindow(name, throwError) {\n\t\tlet win = this.dockingPool.get(name, throwError);\n\t\tif (!win && (typeof throwError === \"undefined\" || throwError)) {\n\t\t\tLogger.system.debug(`No win found for ${name}.`);\n\t\t}\n\t\treturn win;\n\t}\n\n\t/**\n\t * Given a list of monitors, returns the one that overlaps the most with the window.\n\t * @param {string} win\n\t * @param {array} monitors\n\t */\n\tgetMonitorByMajority(win, monitors) {\n\t\tlet overlaps = [];\n\t\t//Sometimes bad objects get passed into this function. They shouldn't, but they do. if we can't retrieve bounds, it's not a window. Try to get a window. If there's no window, return the first monitor.\n\t\tif (!win.getBounds && win.name) win = this.getWindow(win.name);\n\t\tif (!win.getBounds) return monitors[0];\n\t\tlet boundingBox = win.getBounds();\n\t\tmonitors.forEach(monitor => {\n\t\t\toverlaps.push({\n\t\t\t\tmonitor: monitor,\n\t\t\t\toverlap: BoxMath.getOverlap(boundingBox, monitor.availableRect || monitor.monitorRect)\n\t\t\t});\n\t\t});\n\t\t//Gets the monitor with the greatest overlap. The reduce function pulls the proper object with the greats overlap value. We return the monitor property of that object.\n\t\treturn overlaps.reduce((prev, current) => prev.overlap > current.overlap ? prev : current).monitor;\n\t}\n\n\t/**\n\t * returns the monitor that the window is on. If the left edge of the window is on two or more monitors, we calculate the monitor that houses the majority of the window.\n\t * @param {string} windowName\n\t */\n\tgetMonitorForWindow(win) {\n\t\t//monitors is an array of monitors that the window's top-left edge is on. This can be 1, 2 (e.g., snapped to the edge of two monitors), or none(top-left is off in virtual space). If it's none or more than 1, we call getMonitorByMajority.\n\t\tlet monitors = [], allMonitors = [];\n\t\tlet iterator = monitorPool.iterator();\n\t\tfor (let monitor of iterator) {\n\t\t\tlet rect = monitor.availableRect || monitor.monitorRect;\n\t\t\tif (win.left >= rect.left && win.left <= rect.right && win.top <= rect.bottom && win.top >= rect.top) {\n\t\t\t\tmonitors.push(monitor);\n\t\t\t}\n\t\t\tallMonitors.push(monitor);\n\t\t}\n\t\tif (monitors.length === 1) {\n\t\t\treturn monitors[0];\n\t\t}\n\t\treturn this.getMonitorByMajority(win, allMonitors);\n\n\t}\n\t/**\n\t * Returns a monitor object.\n\t * @param {string} name name of monitor.\n\t */\n\tgetMonitor(name) {\n\t\treturn monitorPool.get(name);\n\t}\n\t/**\n\t * Registers a monitor with the calculator.\n\t* @param  {type} bounds\n\t*/\n\taddMonitor(bounds, onChange) {\n\t\tvar monitor = new DockableMonitor({ bounds: bounds, monitor: bounds._monitor });\n\t\tmonitor.onClaimedSpaceChanged = onChange;\n\t\tmonitor.setBufferSize(this.bufferSize);\n\t\tmonitorPool.add(monitor.name, monitor);\n\t}\n\t/**\n\t* Unregisters a monitor with the calculator.\n\t* @param  {type} name\n\t* @return {type}\n\t*/\n\tremoveMonitor(name) {\n\t\tmonitorPool.remove(name);\n\t}\n\n\t/**\n\t* @return {monitorPool}\n\t*/\n\tgetMonitors() {\n\t\treturn monitorPool.getAll();\n\t}\n\n\t/**\n\t * Returns a list of 'rawMonitors' from openfin. These are only available when they are actually passed into the DockableMonitor when its instantiated.\n\t */\n\tgetRawMonitors() {\n\t\tlet rawMonitors = [];\n\t\tlet iterator = monitorPool.iterator();\n\t\tfor (var monitor of iterator) {\n\t\t\trawMonitors.push(monitor.rawMonitor);\n\t\t}\n\t\treturn rawMonitors;\n\t}\n\n\t/**\n\t * Returns the monitors in an array\n\t */\n\tgetMonitorArray() {\n\t\tlet monitors = [];\n\t\tlet iterator = monitorPool.iterator();\n\t\tfor (var monitor of iterator) {\n\t\t\tmonitors.push(monitor);\n\t\t}\n\t\treturn monitors;\n\t}\n\n\t/**\n\t *\n\t */\n\tremoveAllMonitors() {\n\t\tlet iterator = monitorPool.iterator();\n\t\tfor (var monitor of iterator) {\n\t\t\tthis.removeMonitor(monitor.name);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the resize throttle period. This allows the system to drop events that occur too quickly.\n\t */\n\tsetResizeThrottlePeriod(throttlePeriod) {\n\t\tLogger.system.log(\"DockingService.SetThrottle\", JSON.stringify(throttlePeriod));\n\t\tthis.resizeEventThrottlePeriod = throttlePeriod;\n\t\tlet windowIter = this.dockingPool.iterator();\n\t\tfor (let win of windowIter) {\n\t\t\twin.setResizeThrottlePeriod(throttlePeriod);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the opacity that windows take when entering another window's snapping region.\n\t */\n\tsetSnappingOpacity(opacity) {\n\t\tSNAPPING_OPACITY = opacity;\n\t}\n\n\t/**\n\t * At one point we weren't sure if we were going to allow groups to snap because of bugs. This is vestigial and should be removed at some point.\n\t */\n\tsetAllowGroupsToSnap(bool) {\n\t\tALLOW_GROUPS_TO_SNAP = bool;\n\t}\n\n\t/**\n\t * whether to push debug to the logger.\n\t * @param {boolean} bool\n\t */\n\tsetDebug(bool) {\n\t\tdebug = bool;\n\t}\n\n\t/**\n\t * Sets the size of the region around windows that will trigger a snap.\n\t */\n\tsetBufferSize(buffer) {\n\t\tLogger.system.info(\"Setting buffer size\", `${buffer}`);\n\t\tthis.bufferSize = buffer;\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\twin.setBufferSize(buffer);\n\t\t}\n\t\tlet monitorIterator = monitorPool.iterator();\n\t\tfor (const monitor in monitorIterator) {\n\t\t\tmonitor.setBufferSize(buffer);\n\t\t}\n\t}\n\n\t/**\n\t * Will prevent a window from being added to groups.\n\t */\n\taddToGroupBlacklist(windowName) {\n\t\tgroupBlacklist.push(windowName);\n\t}\n\n\t/**\n\t * Will allow a window previously blacklisted to be included in group operations.\n\t */\n\tremoveFromGroupBlacklist(windowName) {\n\t\tif (groupBlacklist.includes(windowName)) {\n\t\t\tgroupBlacklist.splice(groupBlacklist.indexOf(windowName), 1);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a group to the calculator.\n\t* @param  {type} group\n\t*/\n\taddGroup(group) {\n\t\tgroupPool.add(group.name, group);\n\t}\n\t/**\n\t* Removes a group from the calculator.\n\t* @param  {type} groupName\n\t*/\n\tremoveGroup(groupName) {\n\t\tlet group = this.getGroup(groupName);\n\t\tlet groupIter = this.groupWindowIterator(group);\n\t\tif (group) {\n\t\t\tif (group.getWindowNames().length) {\n\t\t\t\tfor (var win of groupIter) {\n\t\t\t\t\tif (debug) {\n\t\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"removing group\", win.name);\n\t\t\t\t\t}\n\t\t\t\t\tthis.removeWindowFromGroup(win.name, groupName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgroupPool.remove(groupName);\n\t\t} else {\n\t\t\tconsole.warn(`Tried removing a group that was already removed. ${groupName}.`);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a list of groups that are capable of moving together.\n\t */\n\tgetMovableGroups() {\n\t\tlet groupNames = this.getGroupNames();\n\t\tlet groups = {};\n\n\t\tfor (let i = 0, len = groupNames.length; i < len; i++) {\n\t\t\tlet groupName = groupNames[i];\n\t\t\tlet group = this.getGroup(groupName);\n\t\t\tif (group.isMovable) {\n\t\t\t\tgroups[groupName] = group;\n\t\t\t}\n\t\t}\n\t\treturn groups;\n\t}\n\n\t/**\n\t* Returns the group Pool\n\t* @return {type}\n\t*/\n\tgetGroups() {\n\t\treturn groupPool.getAll();\n\t}\n\n\t/**\n\t* Gets a group by name.\n\t* @param  {type} name\n\t* @return {type}\n\t*/\n\tgetGroup(name) {\n\t\treturn groupPool.get(name, false);\n\t}\n\n\t/**\n\t* Gets an array of group names.\n\t* @return {type}\n\t*/\n\tgetGroupNames() {\n\t\tvar names = [];\n\t\tlet iter = groupPool.iterator();\n\t\tfor (let group of iter) {\n\t\t\tnames.push(group.name);\n\t\t}\n\t\treturn names;\n\t}\n\n\t/**\n\t * Imagine 3 windows snapped horizontally. All are grouped ([A][B][C]). You ungroup B. This function will remove A and C. It iterates through all of the windows in the group and makes sure it's still attached to the group.\n\t */\n\tcheckGroupMembership(win) {\n\t\tif (!win) {\n\t\t\tLogger.system.warn(\"INVESTIGATE: No win passed in to checkGroupMembership.\");\n\t\t\treturn;\n\t\t}\n\n\t\tlet groupNames = clone(win.groupNames, Logger.system.error);\n\t\tlet snappedWindowGroupNames = win.snappedWindows.map((snapObj) => {\n\t\t\tlet snapWin = this.getWindow(snapObj.name);\n\t\t\tif (snapWin) {\n\t\t\t\treturn snapWin.groupNames;\n\t\t\t}\n\t\t\tLogger.system.warn(`INVESTIGATE: SnapWin does not exist. ${JSON.stringify(snapObj)}.`);\n\t\t\treturn [];\n\n\t\t});\n\t\tgroupNames.forEach((groupName) => {\n\t\t\tlet hasSnappedWindowAttachedToGroup = snappedWindowGroupNames.some((arr) => {\n\t\t\t\treturn arr.includes(groupName);\n\t\t\t});\n\t\t\tif (!hasSnappedWindowAttachedToGroup) {\n\t\t\t\tthis.removeWindowFromGroup(win.name, groupName);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Removes a window from a group. When tiling, we do not delete groups with only one window. We could be doing an operation on a group with two windows, and we want to retain group membership so that hole-filling works appropriately.\n\t */\n\tremoveWindowFromGroup(windowName, groupName, deleteGroupsWithOneWindow = true) {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"removing window from group\", windowName, groupName);\n\t\t}\n\t\tlet win = this.getWindow(windowName);\n\t\tif (!win || !groupName || !win.groupNames.includes(groupName)) {\n\t\t\treturn;\n\t\t}\n\t\twin.groupNames.splice(win.groupNames.indexOf(groupName), 1);\n\t\tlet group = this.getGroup(groupName);\n\t\tif (!group) { return; }\n\n\n\t\tgroup.removeWindow(win.name);\n\t\tif (deleteGroupsWithOneWindow && group.getWindowNames().length === 1) {\n\t\t\tthis.removeWindowFromGroup(group.getWindowNames()[0], group.name);\n\t\t\tthis.removeGroup(group.name);\n\t\t}\n\t}\n\n\t/**\n\t * Groups n-Windows.\n\t *\n\t * @param {any} params\n\t * @param {any} cb\n\t */\n\tgroupWindows(params, cb) {\n\t\tvar groupName = params.groupName || uuidv4();\n\t\tfor (var i = 0, len = params.windows.length; i < len; i++) {\n\t\t\tvar windowName = params.windows[i];\n\t\t\tlet win = this.getWindow(windowName);\n\n\t\t\t// Only group windows if they are allowed to. e.g. prevent docking of toolbar.\n\t\t\tif (win.canGroup) {\n\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\twin: win,\n\t\t\t\t\tgroupName: groupName,\n\t\t\t\t\tisMovable: typeof params.isMovable !== \"undefined\" ? params.isMovable : false\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (cb) {\n\t\t\tcb(null);\n\t\t}\n\t}\n\n\t/**\n\t* @param  {type} groupName\n\t* @param  {dockableWindow} win\n\t*/\n\taddWindowToGroup(params, cb) {\n\t\tlet { groupName, win } = params;\n\t\tif (!win) {\n\t\t\tLogger.system.warn(\"INVESTIGATE: No win passed in to addWindowToGroup.\");\n\t\t\treturn;\n\t\t}\n\t\t//in the explicit paradigm, groups default to not being immobile, but resizable.\n\t\tlet isMovable = typeof params.isMovable !== \"undefined\" ? params.isMovable : false;\n\t\tlet isAlwaysOnTop = typeof params.isAlwaysOnTop !== \"undefined\" ? params.isAlwaysOnTop : false;\n\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"add to group\", win.name, isMovable, groupName);\n\t\t}\n\t\tif (groupBlacklist.includes(win.name)) {\n\t\t\treturn;\n\t\t}\n\t\tif (win.groupNames.includes(groupName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet groupParams = {\n\t\t\tname: groupName,\n\t\t\tisMovable: isMovable,\n\t\t\tisAlwaysOnTop: isAlwaysOnTop\n\t\t};\n\n\t\tvar group = this.getGroup(groupName);\n\n\t\tif (!group) {\n\t\t\tif (!groupName) {\n\t\t\t\tgroupName = uuidv4();\n\t\t\t}\n\t\t\tgroupParams.name = groupName;\n\t\t\tgroupParams.MINIMUM_HEIGHT = this.MINIMUM_HEIGHT;\n\t\t\tgroupParams.MINIMUM_WIDTH = this.MINIMUM_WIDTH;\n\t\t\tgroup = new DockableGroup(groupParams, {\n\t\t\t\tLogger\n\t\t\t});\n\t\t\tthis.addGroup(group);\n\t\t}\n\t\t//You can only be in two groups at a time. a movable one, and a resizable one.\n\t\tif (group.isMovable) {\n\t\t\tlet movableGroup = this.getMovableGroup(win.name);\n\t\t\tif (movableGroup) {\n\t\t\t\tthis.removeWindowFromGroup(win.name, movableGroup.name);\n\t\t\t}\n\t\t} else {\n\t\t\tlet immobileGroup = this.getImmobileGroup(win.name);\n\t\t\tif (immobileGroup) {\n\t\t\t\tthis.removeWindowFromGroup(win.name, immobileGroup.name);\n\t\t\t}\n\t\t}\n\n\t\twin.groupNames.push(groupName);\n\t\tgroup.addWindow(win);\n\t\tif (group.isMovable) {\n\t\t\tgroup.bringToFront();\n\t\t}\n\t\tif (cb) {\n\t\t\tcb(group);\n\t\t}\n\t\treturn group;\n\t}\n\n\t/**\n\t * Vestigial function; used to pop a window out of a group. Can likely be removed in the future.\n\t */\n\tejectWindow(name) {\n\t\tvar win = this.getWindow(name);\n\t\tvar newBounds = win;\n\t\tnewBounds.left += 40;\n\t\tnewBounds.top -= 40;\n\t\tnewBounds.name = win.name;\n\t\tthis.moveWindow(newBounds);\n\t}\n\n\t/**\n\t* @return {boolean}\n\t*/\n\tgetGroupMode() {\n\t\treturn this.groupMode;\n\t}\n\n\t/**\n\t* @todo refactor the way config is set. This is so bad.\n\t* @param  {object} groupMade\n\t* @param  {boolean} groupMade.enabled Whether group mode is enabled.\n\t* @param  {number} groupMode.headerHeight How large the header is in windows. This shouldn't be in this config. So bad.\n\t* @param  {number} groupMode.groupTileBuffer How large the buffer is on the edge of a group to trigger a group-tile operation.\n\t* @param  {boolean} groupMode.allowSnappedWindowsToResize Whether snapped windows will resize as a group.\n\t* @param  {boolean} groupMode.fillHolesOnUndock Whether leaving a group triggers a hole-filling operation\n\t* @param  {boolean} groupMode.undockDisbandsEntireGroup Whether clicking the undock button on one window will disband the entire group.\n\t* @param  {boolean} groupMode.requireRectangularityForGroupResize Whether a group must be a rectangle to scale the individual windows as a unit.\n\t*/\n\tsetGroupMode(groupMode) {\n\t\tlet bool = groupMode.enabled;\n\t\tif (!bool) {\n\t\t\tshortCircuit = false;\n\t\t\tthis.getGroupNames().forEach((groupName) => {\n\t\t\t\tthis.removeGroup(groupName);\n\t\t\t});\n\t\t} else if (bool) {\n\t\t\tthis.constituteGroups();\n\t\t\tthis.groupTileBuffer = groupMode.groupTileBuffer;\n\t\t\tthis.headerHeight = groupMode.headerHeight;\n\t\t}\n\n\t\tif (typeof groupMode.allowSnappedWindowsToResize === \"undefined\") groupMode.allowSnappedWindowsToResize = true;\n\t\tif (typeof groupMode.fillHolesOnUndock === \"undefined\") groupMode.fillHolesOnUndock = true;\n\t\tif (typeof groupMode.undockDisbandsEntireGroup === \"undefined\") groupMode.undockDisbandsEntireGroup = false;\n\t\tif (typeof groupMode.requireRectangularityForGroupResize === \"undefined\") groupMode.requireRectangularityForGroupResize = true;\n\n\t\tthis.groupMode = groupMode;\n\t}\n\n\t/**\n\t* Adds useful properties to a raw request.\n\t* @param  {moveRequest} req\n\t* @return {moveRequest}\n\t*/\n\tsetMoveRequest(req, win) {\n\t\tif (!win) {\n\t\t\twin = this.getWindow(req.name);\n\t\t}\n\t\t/**\n\t\t * If you call setBounds on a window that is maximized, subsequent move requests will come in as though the window's\n\t\t * left edge never moved, until mouseUp happens. This boolean helps us get around this openfin bug.\n\t\t */\n\t\tif (win.shouldOffsetByMouse) {\n\t\t\treq.left = req.mousePosition.left - (req.width / 2);\n\t\t\treq.right = req.left + req.width;\n\t\t}\n\n\t\treq.windowBoundingBox = BoxMath.getWindowBoundingBox(req);\n\t\treq.innerBuffer = this.getInnerBoundingBox(req);\n\t\treq.snappingRegions = BoxMath.getSnappingRegions(req, this.bufferSize);\n\t\treq = this.makeSureMoveIsInUnclaimedSpace(req);\n\n\t\tthis.moveRequest = req;\n\t\treturn req;\n\t}\n\n\t/**\n\t* @param  {dockableWindow} win\n\t*/\n\tsetStationaryWindow(win) {\n\t\tstationaryWindow = win;\n\t}\n\n\t/**\n\t* @param  {dockableWindow} win\n\t*/\n\tsetMovingWindow(win) {\n\t\tthis.movingWindow = win;\n\t}\n\n\t/**\n\t* Convenience function I used for like 2 minutes.\n\t* @todo, remove this function.\n\t* @param  {dockableWindow} stationary\n\t* @param  {dockableWindow} moving\n\t*/\n\tsetWindows(stationary, moving) {\n\t\tstationaryWindow = stationary;\n\t\tthis.movingWindow = moving;\n\t}\n\n\t/****************************************************\n\t *\t\t\t\t\t\t\t\t\t\t\t\t\t*\n\t *\t\tCalculators - Multiple Positions/Sizes\t\t*\n\t *\t\t\t\t\t\t\t\t\t\t\t\t\t*\n\t ****************************************************/\n\n\t/**\n\t * when a non-docking movement is made, we don't grab the bounds changing events.\n\t * So this updates everything. Example: auto-arrange.\n\t */\n\tupdateWindowPositions() {\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\twin.updateState();\n\t\t}\n\t}\n\n\t/**\n\t * Returns the movableGroup for a window.\n\t */\n\tgetMovableGroup(windowName) {\n\t\tlet win = this.getWindow(windowName);\n\t\tif (!win) {\n\t\t\tLogger.system.debug(`INVESTIGATE: getMovableGroup failure. No win found for ${windowName}`);\n\t\t\treturn null;\n\t\t}\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"Getting movable group\", windowName, win.groupNames);\n\t\t}\n\t\tfor (var i = 0, len = win.groupNames.length; i < len; i++) {\n\t\t\tvar groupName = win.groupNames[i];\n\t\t\tlet group = this.getGroup(groupName);\n\t\t\tif (group.isMovable) {\n\t\t\t\tif (debug) {\n\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"Found movableGroup\", groupName);\n\t\t\t\t}\n\t\t\t\treturn group;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the immobile group for a window. This is one where it is snapped to other windows, but not explicitly grouped by the user.\n\t */\n\tgetImmobileGroup(windowName) {\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"Getting immobileGroup\", windowName);\n\t\t}\n\t\tlet win = this.getWindow(windowName);\n\t\tif (!win) {\n\t\t\tLogger.system.warn(\"INVESTIGATE: getImmobileGroup failure. No win found for ${windowName}\");\n\t\t\treturn null;\n\t\t}\n\t\tfor (var i = 0, len = win.groupNames.length; i < len; i++) {\n\t\t\tvar groupName = win.groupNames[i];\n\t\t\tlet group = this.getGroup(groupName);\n\t\t\tif (group.isMovable) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn group;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t* Basically just code flow controller. Figures out whether the move will affect just a couple, a single window, or all windows in the group.\n\t* @param  {moveRequest} moveRequest\n\t* @param  {function} cb\n\t*/\n\thandleGroup(moveRequest, cb) {\n\t\tthis.setMoveRequest(moveRequest);\n\t\tmoveRequest = this.moveRequest;\n\t\t//Before beginning a group's move function set each individual window's 'finishedMove' property\n\t\t//This is necessary because the logic which determines whether to set a window's internal bounds after a window aero movement will check to make sure the _user_ is not physically moving the window. As long as the mouse is not causing the movement, and instead the system, we mark all the windows as finished = true. This is just the opposite of that, the group is beginning a movement, so we set finishedMove = false.\n\t\tfor (let windowName in this.movingGroup.windows) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\twin.win._startMove();\n\t\t}\n\t\tif (this.movingGroup.isMovable && moveRequest.changeType === 0) {\n\t\t\t//Before beginning a group's move function set each individual window's 'finished' property\n\t\t\t//This is necessary because the logic which determines whether to set a window's internal bounds after a window aero movement will check to make sure the _user_ is not physically moving the window. As long as the mouse is not causing the movement, and instead the system, we mark all the windows as finished = true. This is just the opposite of that, the group is beginning a movement, so we set finished = false.\n\t\t\tfor (let windowName in this.movingGroup.windows) {\n\t\t\t\tlet win = this.getWindow(windowName);\n\t\t\t\twin.finished = false;\n\t\t\t}\n\t\t\tthis.handleGroupMove(moveRequest, cb);//Move a group\n\t\t} else {\n\t\t\tif (this.resizeObject.scalingGroup) {\n\t\t\t\tthis.movingAGroupOfWindows = true;\n\t\t\t} else {\n\t\t\t\tthis.resizeInteriorWindow(moveRequest);\n\t\t\t}\n\t\t\tcb({ finished: true });\n\t\t}\n\t}\n\n\t/**\n\t * I wrote this to kill any gap that may have happened after scaling a group proportionately. It seems to work.\n\t * @todo, make sure this is necessary. Consider a better way to do it.\n\t */\n\teliminateGaps() {\n\t\tvar self = this;\n\t\tvar dimensionsToChange = {\n\t\t\tleft: \"width\",\n\t\t\tright: \"width\",\n\t\t\tbottom: \"height\",\n\t\t\ttop: \"height\"\n\t\t};\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tvar snappableWindows = this.getSnappableWindows(win);\n\t\t\tvar bounds = win.getBounds();\n\t\t\tsnappableWindows.forEach((windowName) => {\n\t\t\t\tvar snappedWin = self.getWindow(windowName);\n\t\t\t\tvar sharedEdges = win.getSharedEdges(snappedWin, self.bufferSize);\n\t\t\t\tfor (var edge in sharedEdges) {\n\t\t\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[edge];\n\t\t\t\t\tif (sharedEdges[edge] && win[edge] !== snappedWin[oppEdge]) {\n\t\t\t\t\t\tbounds[edge] = snappedWin[oppEdge];\n\t\t\t\t\t\tif (edge === \"left\") {\n\t\t\t\t\t\t\tbounds.right = bounds.left + bounds.width;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (edge === \"right\") {\n\t\t\t\t\t\t\tbounds.left = bounds.right - bounds.width;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (edge === \"top\") {\n\t\t\t\t\t\t\tbounds.bottom = bounds.top + bounds.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (edge === \"bottom\") {\n\t\t\t\t\t\t\tbounds.top = bounds.bottom - bounds.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbounds.name = win.name;\n\t\t\t\tself.moveWindow(bounds);\n\t\t\t});\n\t\t}\n\t}\n\n\t/****************************************************\n\t *\t\t\t\t\t\t\t\t\t\t\t\t\t*\n\t *\tCalculators - Individual Window Position/Size\t*\n\t *\t\t\t\t\t\t\t\t\t\t\t\t\t*\n\t ****************************************************/\n\t/**\n\t* Returns a modified moveRequest. If the code gets here, its' because the moving window was inside of the stationary window's buffer, and a snap needed to occur.\n\t* @param  {moveRequest} request\n\t* @return {moveRequest}\n\t*/\n\tsnapWindow(request) {\n\t\tvar intersection = null;\n\t\t//order matters here. corners should take precedence, as they'll also handle the vanilla bottom/top/left/right order. The algorithm stops with the first intersection.\n\t\tvar regions = [\n\t\t\t\"bottomLeft\",\n\t\t\t\"bottomRight\",\n\t\t\t\"topLeft\",\n\t\t\t\"topRight\",\n\t\t\t\"leftTop\",\n\t\t\t\"leftBottom\",\n\t\t\t\"rightTop\",\n\t\t\t\"rightBottom\",\n\t\t\t\"top\",\n\t\t\t\"left\",\n\t\t\t\"right\",\n\t\t\t\"bottom\"];\n\n\t\tvar stationaryBoundingBoxes = stationaryWindow.snappingRegions;\n\t\tvar movingBoundingBoxes = request.snappingRegions;\n\t\tvar intersectionFound = false;\n\t\tfor (var i = 0, len = regions.length; i < len; i++) {\n\t\t\tvar region = regions[i];\n\t\t\tif (intersectionFound && request.changeType !== 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tintersection = null;\n\t\t\t//Two checks:\n\t\t\t//1) Is it inside of the stationary window? If so, exit.\n\t\t\t//2) Is it within one of the region bounding boxes.\n\n\t\t\tif (BoxMath.intersectBoundingBoxes(stationaryBoundingBoxes[region], request.windowBoundingBox)) {\n\t\t\t\tif (request.changeType === 0) {\n\t\t\t\t\trequest.movingRegion = this.getIntersections(request, stationaryWindow, region)[0];\n\t\t\t\t}\n\t\t\t\tvar movingRegion = request.movingRegion;\n\n\t\t\t\tif (movingRegion && BoxMath.intersectBoundingBoxes(stationaryBoundingBoxes[region], movingBoundingBoxes[movingRegion])) {\n\t\t\t\t\tintersection = {\n\t\t\t\t\t\tstationaryRegion: region,\n\t\t\t\t\t\tmovingRegion: movingRegion\n\t\t\t\t\t};\n\t\t\t\t\tintersectionFound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (intersection) {\n\t\t\t\tthis.intersection = intersection;\n\t\t\t\trequest = this.getNewCoordinates({\n\t\t\t\t\teventType: request.changeType === 0 ? \"move\" : \"resize\",\n\t\t\t\t\tintersection: intersection,\n\t\t\t\t\tstationaryWindow: stationaryWindow,\n\t\t\t\t\trequest: request\n\t\t\t\t});\n\t\t\t\tthis.movingWindow.removedBoundsChanging = true;\n\n\t\t\t\t//if moving window isn't in a group, see if stationary window is. if so, add moving to the stationary group. if not, create a new group with them.\n\t\t\t\t//GroupAction is just a placeholder. We only modify groups on mouseDown defers this\n\t\t\t\tlet sharedEdges = stationaryWindow.getSharedEdges(request);\n\t\t\t\tlet sharedEdgesArr = Object.keys(sharedEdges).map(edge => {\n\t\t\t\t\treturn { edge: sharedEdges[edge] };\n\t\t\t\t});\n\t\t\t\tif (!sharedEdgesArr.some(obj => obj.edge)) {\n\t\t\t\t\tlet sharedCorners = stationaryWindow.getSharedCorners(request);\n\t\t\t\t\tlet sharedCornersArr = Object.keys(sharedCorners).map(corner => {\n\t\t\t\t\t\treturn { corner: sharedCorners[corner] };\n\t\t\t\t\t});\n\t\t\t\t\tif (!sharedCornersArr.some(obj => obj.corner)) {\n\t\t\t\t\t\treturn request;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!groupBlacklist.includes(stationaryWindow.name)) {\n\t\t\t\t\tgroupAction = this.getDeferredGroupAction(stationaryWindow, this.movingWindow);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.intersection = {\n\t\t\t\t\tstationaryRegion: null,\n\t\t\t\t\tmovingRegion: null\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthis.requestMade = request;\n\t\treturn request;\n\t}\n\n\t/**\n\t * When moving a window, we don't want to add it to a group until all the calculations are complete. If two windows snap, this function is called. It figures out which group that the windows should form. Note: It always forms an immobile group (one that allows shared-border resizing). This is because a snap is not an explicit group.\n\t */\n\tgetDeferredGroupAction(stationaryWin, movingWin) {\n\t\tlet action = groupAction;\n\t\tlet stationaryGroup = this.getImmobileGroup(stationaryWin.name);\n\t\tlet movingWindowGroup = this.getImmobileGroup(movingWin.name);\n\t\tif (stationaryGroup && !movingWindowGroup) {\n\t\t\taction.name = stationaryGroup.name;\n\t\t\taction.windows[movingWin.name] = true;\n\t\t} else if (movingWindowGroup && !stationaryGroup) {\n\t\t\taction.name = movingWindowGroup.name;\n\t\t\taction.windows[stationaryWin.name] = true;\n\t\t} else if (!movingWindowGroup && !stationaryGroup) {\n\t\t\taction.name = uuidv4();\n\t\t\taction.windows[stationaryWin.name] = true;\n\t\t\taction.windows[movingWin.name] = true;\n\t\t} else {\n\t\t\taction.name = stationaryGroup.name;\n\t\t\taction.windows[stationaryWin.name] = true;\n\t\t\taction.windows[movingWin.name] = true;\n\t\t}\n\t\treturn action;\n\t}\n\n\t/**\n\t* Calculates resize bounds.\n\t* @param  {object} params\n\t* @return {moveRequest}\n\t*/\n\tadjustSize(params) {\n\t\tvar request = params.request,\n\t\t\tstationaryWindow = params.stationaryWindow,\n\t\t\tstationaryRegion = params.intersection.stationaryRegion;\n\t\tvar intersections = this.getIntersections(request, stationaryWindow, stationaryRegion).toString().toLowerCase();\n\t\tif (!intersections) {\n\t\t\treturn request;\n\t\t}\n\n\t\tswitch (stationaryRegion) {\n\t\t\tcase \"leftBottom\":\n\t\t\tcase \"bottomLeft\":\n\t\t\t\tif (intersections.includes(\"top\") || intersections.includes(\"topleft\") || intersections.includes(\"topright\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"topright\") || intersections.includes(\"right\")) {\n\t\t\t\t\trequest.right = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"topleft\") || intersections.includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottom\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"rightBottom\":\n\t\t\tcase \"bottomRight\":\n\t\t\t\tif (intersections.includes(\"top\") || intersections.includes(\"topleft\") || intersections.includes(\"topright\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"topleft\") || intersections.includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\n\t\t\t\tif (intersections.includes(\"topright\") || intersections.includes(\"right\")) {\n\t\t\t\t\trequest.right = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottom\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.bottom;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase \"topLeft\":\n\t\t\tcase \"leftTop\":\n\t\t\t\tif (intersections.includes(\"bottom\") || intersections.includes(\"bottomleft\") || intersections.includes(\"bottomright\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottomleft\") || intersections.includes(\"left\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.top;\n\t\t\t\t\trequest.left = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottomright\") || intersections.includes(\"right\")) {\n\t\t\t\t\trequest.right = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase \"rightTop\":\n\t\t\tcase \"topRight\":\n\t\t\t\tif (intersections.includes(\"bottom\") || intersections.includes(\"bottomleft\") || intersections.includes(\"bottomright\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottomleft\") || intersections.includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"bottomright\") || intersections.includes(\"right\")) {\n\t\t\t\t\trequest.right = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (intersections.includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"top\":\n\t\t\t\tif (intersections.includes(\"bottom\")) {\n\t\t\t\t\trequest.bottom = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"right\":\n\t\t\t\tif (intersections.includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"bottom\":\n\t\t\t\tif (intersections.includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"left\":\n\t\t\t\tif (intersections.includes(\"right\")) {\n\t\t\t\t\trequest.right = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\trequest.width = request.right - request.left;\n\t\trequest.height = request.bottom - request.top;\n\n\t\trequest = this.checkShortCircuits(request);\n\t\treturn request;\n\t}\n\n\t/**\n\t * Checks to see if a window has gotten too narrow, or too short.\n\t */\n\tcheckShortCircuitsWithEdge(request, edge) {\n\t\tlet win = this.getWindow(request.name);\n\t\t//The code for resizing groups goes through here. It just passes bounds, not a window. Here, use the global minimums and no maximums (until a global max is allowed...).\n\t\tif (!win) {\n\t\t\twin = {\n\t\t\t\tlimits: {\n\t\t\t\t\tminHeight: MINIMUM_HEIGHT,\n\t\t\t\t\tminWidth: MINIMUM_WIDTH,\n\t\t\t\t\tmaxHeight: Infinity,\n\t\t\t\t\tmaxWidth: Infinity\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t//Checks to see if the height/widths are below the window's minimum height/width. If so, it sets them to the minimum values.\n\t\tswitch (edge) {\n\t\t\tcase \"top\":\n\t\t\t\tif (request.height <= win.limits.minHeight) {\n\t\t\t\t\trequest.height = win.limits.minHeight;\n\t\t\t\t\trequest.bottom = request.top + win.limits.minHeight;\n\t\t\t\t} else if (request.height >= win.limits.maxHeight) {\n\t\t\t\t\trequest.height = win.limits.maxHeight;\n\t\t\t\t\trequest.bottom = request.top + win.limits.maxHeight;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"bottom\":\n\t\t\t\tif (request.height <= win.limits.minHeight) {\n\t\t\t\t\trequest.height = win.limits.minHeight;\n\t\t\t\t\trequest.top = request.bottom - win.limits.minHeight;\n\t\t\t\t} else if (request.height >= win.limits.maxHeight) {\n\t\t\t\t\trequest.height = win.limits.maxHeight;\n\t\t\t\t\trequest.top = request.bottom - win.limits.maxHeight;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"left\":\n\t\t\t\tif (request.width < win.limits.minWidth) {\n\t\t\t\t\trequest.width = win.limits.minWidth;\n\t\t\t\t\trequest.right = request.left + win.limits.minWidth;\n\t\t\t\t} else if (request.width > win.limits.maxWidth) {\n\t\t\t\t\trequest.width = win.limits.maxWidth;\n\t\t\t\t\trequest.right = request.left + win.limits.maxWidth;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"right\":\n\t\t\t\tif (request.width < win.limits.minWidth) {\n\t\t\t\t\trequest.width = win.limits.minWidth;\n\t\t\t\t\trequest.left = request.right - win.limits.minWidth;\n\t\t\t\t} else if (request.width > win.limits.maxWidth) {\n\t\t\t\t\trequest.width = win.limits.maxWidth;\n\t\t\t\t\trequest.left = request.right - win.limits.maxWidth;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\treturn request;\n\n\t}\n\n\t/**\n\t * Checks to see if a request is allowed. Are you trying to make my window -20px? or 10px? Get out of here.\n\t * @todo, rename. 'shortcircuitRequest' or something.\n\t */\n\tcheckShortCircuits(request, win) {\n\t\tvar currentBounds;\n\n\t\tconst defaultLimits = {\n\t\t\tminHeight: MINIMUM_HEIGHT,\n\t\t\tminWidth: MINIMUM_WIDTH,\n\t\t\tmaxHeight: Infinity,\n\t\t\tmaxWidth: Infinity\n\t\t};\n\n\t\tif (typeof win === \"undefined\") {\n\t\t\twin = this.getWindow(request.name);\n\t\t}\n\t\t//@note from Daniel, PR Review on 12/4. Address this at some point.\n\t\t//Looking at the code isolated from it's calling context, it's not obvious to me that this won't throw a null reference error. You're checking to see if request.name is truthy, which to me implies it's optional, but you're accessing it before this check, which looks really dangerous.We should switch the order, and only access request.name when we've confirmed it's really there.\n\t\tif (request.name) {\n\t\t\tcurrentBounds = win.getBounds();\n\t\t} else {\n\t\t\tcurrentBounds = request;\n\t\t\t//The code for resizing groups goes through here. It just passes bounds, not a window. Here, use the global minimums and no maximums (until a global max is allowed...).\n\t\t\twin = {};\n\t\t}\n\n\t\twin.limits = Object.assign(defaultLimits, win.limits || {});\n\n\t\t//@todo consider consolidation. The code for adjusting the bounds are the same. The only difference is the inputs (e.g, we change the height or width, and the anchor);\n\n\t\t//CASE: WINDOW IS TOO NARROW\n\t\t//handles shortCircuits for the moving window.\n\t\tif (request.width <= win.limits.minWidth) {\n\t\t\trequest.width = win.limits.minWidth;\n\n\t\t\t//If we're dragging the left edge around, anchor the right edge.\n\t\t\tif (request.left !== currentBounds.left) {\n\t\t\t\trequest.right = currentBounds.right;\n\t\t\t\trequest.left = request.right - request.width;\n\t\t\t} else if (request.right !== currentBounds.right) {\n\t\t\t\t//If we're dragging the right edge around, anchor the left edge.\n\t\t\t\trequest.left = currentBounds.left;\n\t\t\t\trequest.right = request.left + request.width;\n\t\t\t}\n\t\t} else if (request.width >= win.limits.maxWidth) {\n\t\t\t//CASE: WINDOW IS TOO WIDE\n\t\t\trequest.width = win.limits.maxWidth;\n\n\t\t\t//If we're dragging the left edge around, anchor the right edge.\n\t\t\tif (request.left !== currentBounds.left) {\n\t\t\t\trequest.right = currentBounds.right;\n\t\t\t\trequest.left = request.right - request.width;\n\t\t\t} else if (request.right !== currentBounds.right) {\n\t\t\t\t//If we're dragging the right edge around, anchor the left edge.\n\t\t\t\trequest.left = currentBounds.left;\n\t\t\t\trequest.right = request.left + request.width;\n\t\t\t}\n\t\t}\n\t\t//CASE: WINDOW IS TOO SHORT\n\t\tif (request.height <= win.limits.minHeight) {\n\t\t\trequest.height = win.limits.minHeight;\n\n\t\t\t//If we're dragging the top edge around, anchor on the bottom.\n\t\t\tif (request.top !== currentBounds.top) {\n\t\t\t\trequest.bottom = currentBounds.bottom;\n\t\t\t\trequest.top = request.bottom - request.height;\n\t\t\t} else if (request.bottom !== currentBounds.bottom) {\n\t\t\t\t//If we're dragging the bottom edge around, anchor on the top.\n\t\t\t\trequest.top = currentBounds.top;\n\t\t\t\trequest.bottom = request.top + request.height;\n\t\t\t}\n\t\t} else if (request.height >= win.limits.maxHeight) {\n\t\t\t//CASE: WINDOW IS TOO TALL\n\t\t\trequest.height = win.limits.maxHeight;\n\n\t\t\t//If we're dragging the top edge around, anchor on the bottom.\n\t\t\tif (request.top !== currentBounds.top) {\n\t\t\t\trequest.bottom = currentBounds.bottom;\n\t\t\t\trequest.top = request.bottom - request.height;\n\t\t\t} else if (request.bottom !== currentBounds.bottom) {\n\t\t\t\t//If we're dragging the bottom edge around, anchor on the top.\n\t\t\t\trequest.top = currentBounds.top;\n\t\t\t\trequest.bottom = request.top + request.height;\n\t\t\t}\n\t\t}\n\t\treturn request;\n\t}\n\n\t/**\n\t* Use when a window is moving and needs to be snapped. Width/Height aren't modified like in `this.adjustSize`.\n\t* @param  {type} params\n\t* @return {type}\n\t*/\n\tgetNewCoordinates(params) {\n\t\tvar request = params.request,\n\t\t\tstationaryWindow = params.stationaryWindow,\n\t\t\tmovingRegion = params.intersection.movingRegion,\n\t\t\tstationaryRegion = params.intersection.stationaryRegion;\n\n\t\tif (params.eventType === \"resize\") {\n\t\t\treturn this.adjustSize(params);\n\t\t}\n\n\t\tswitch (stationaryRegion) {\n\t\t\tcase \"bottomLeft\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom - request.height;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"bottomRight\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom - request.height;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"topLeft\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top - request.height;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left;\n\t\t\t\t}\n\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"topRight\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top - request.height;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"leftTop\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top - request.height;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"leftBottom\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left - request.width;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom - request.height;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"rightTop\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top - request.height;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"rightBottom\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom - request.height;\n\t\t\t\t}\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"top\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"bottom\")) {\n\t\t\t\t\trequest.top = stationaryWindow.top - request.height;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"right\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"left\")) {\n\t\t\t\t\trequest.left = stationaryWindow.right;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"bottom\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"top\")) {\n\t\t\t\t\trequest.top = stationaryWindow.bottom;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"left\":\n\t\t\t\tif (movingRegion.toLowerCase().includes(\"right\")) {\n\t\t\t\t\trequest.left = stationaryWindow.left - request.width;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\trequest.right = request.left + request.width;\n\t\trequest.bottom = request.top + request.height;\n\t\treturn request;\n\t}\n\n\t/**\n\t* Helper function for figuring out why snapping isn't working.\n\t* @todo, consider deleting.\n\t* @return {type}\n\t*/\n\tgetDiagnostics() {\n\t\treturn {\n\t\t\trequestMade: this.moveRequest,\n\t\t\tstationaryWindow: stationaryWindow,\n\t\t\tmovingWindow: this.movingWindow,\n\t\t\tstationaryBoundingBoxes: stationaryWindow.snappingRegions,\n\t\t\tmovingBoundingBoxes: this.moveRequest.snappingRegions,\n\t\t\tintersection: this.intersection\n\t\t};\n\t}\n\n\t/**\n\t * Helper to return an object that says which edges are moving.\n\t * @todo, why not just use splitHandle and a regex? This seems unnecessary.\n\t* @function this.getMovingEdgesFromResizeHandle\n\t* @param  {type} handle\n\t* @return {type}\n\t*/\n\tgetMovingEdgesFromResizeHandle(handle) {\n\t\tvar edges = {\n\t\t\ttop: false,\n\t\t\tright: false,\n\t\t\tleft: false,\n\t\t\tbottom: false\n\t\t};\n\t\tif (!handle) {\n\t\t\treturn edges;\n\t\t}\n\t\thandle = handle.toLowerCase();\n\t\tfor (var edge in edges) {\n\t\t\tif (handle.includes(edge)) {\n\t\t\t\tedges[edge] = true;\n\t\t\t}\n\t\t}\n\t\treturn edges;\n\t}\n\n\t/**\n\t * NOT CALLED RIGHT NOW.\n\t * Will basically be like `this.onMouseUp`, but for groups...once I can get that stuff working.\n\t */\n\tonGroupMaskMoved(cb) {\n\n\t\tvar initialWindowBounds = this.movingWindow.initialBounds || this.movingWindow.getBounds();\n\t\tvar groupName = this.movingGroup.name;\n\t\tvar boundsDelta = this.getBoundsDelta(this.movingWindow, initialWindowBounds);\n\t\tif (debug) {\n\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"ongroupmaskmoved\", boundsDelta);\n\t\t}\n\t\tif (boundsDelta.height === 0 && boundsDelta.width === 0) {\n\t\t\t//move group.\n\t\t\tthis.handleGroupMove(groupName, boundsDelta.left, boundsDelta.top);\n\t\t} else {\n\t\t\tthis.handleGroupResize(boundsDelta);\n\t\t}\n\n\t\tvar groupIter = this.groupWindowIterator(this.movingGroup);\n\t\tfor (var win of groupIter) {\n\t\t\twin.show();\n\t\t}\n\t\t// this.resizeObject = {};\n\t\tthis.movingWindow.initialBounds = null;\n\t\tthis.fixWindowOpacity({\n\t\t\tcheckForSnappability: false\n\t\t});\n\t}\n\n\t/**\n\t * This is being used\n\t * bounds are calculated in maskBoundsCalculator.js\n\t */\n\tmoveGroupMask() {\n\t\tthis.groupMask.setBounds(\n\t\t\tmaskBoundsCalculator.mousePosToBounds(this.moveRequest.mousePosition)\n\t\t);\n\t}\n\t/**\n\t * NOT CURRENTLY USED.\n\t * Will be like `onMouseMove`, but for groups. Goal is to only move all grouped windows `onMouseUp`. In the interim, just move the mask around. Right now I move every window on every resizeEvent\n\t */\n\t_moveGroupMaskOld() {\n\t\tlet moveRequest = clone(this.moveRequest, Logger.system.error);\n\t\tlet bounds = this.groupMask.getBounds();\n\t\tif (moveRequest.changeType !== 0) {\n\t\t\tlet resizeHandle = this.resizeObject.correctedHandle;\n\t\t\t//@todo figure out why the handle wouldn't be set. sometimes, under strange circumstances (e.g., resizing a group of windows), this is undefined.\n\t\t\tif (resizeHandle) {\n\t\t\t\tlet splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\t\t\treturn s.toLowerCase();\n\t\t\t\t});\n\n\t\t\t\tsplitHandle.forEach((handle) => {\n\t\t\t\t\tif (handle === \"top\" || handle === \"bottom\") {\n\t\t\t\t\t\tbounds[handle] = moveRequest.mousePosition.y || moveRequest.mousePosition.top;\n\t\t\t\t\t}\n\t\t\t\t\tif (handle === \"right\" || handle === \"left\") {\n\t\t\t\t\t\tbounds[handle] = moveRequest.mousePosition.x || moveRequest.mousePosition.left;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tbounds.width = bounds.right - bounds.left;\n\t\tbounds.height = (bounds.bottom - bounds.top);\n\t\tbounds.name = \"groupMask\";\n\t\tthis.groupMask.setBounds(bounds);\n\t}\n\t/**\n\t * Scales a group of windows proportionately.\n\t * @param {moveRequest} moveRequest\n\t */\n\tscaleGroup(moveRequest) { //TODO: see group.scale and convert this to use that\n\t\tvar self = this;\n\t\tvar group = this.getMovingGroup(moveRequest);\n\t\tvar groupIter;\n\t\tvar resizeHandle = this.resizeObject.correctedHandle;\n\t\tvar newGroupDimensions = {\n\t\t\theight: self.groupMask.height,\n\t\t\twidth: self.groupMask.width\n\t\t};\n\t\tvar splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\n\t\tvar anchors = group.getAnchors(resizeHandle);\n\n\t\tgroupIter = this.groupWindowIterator(group, anchors[0]);\n\t\tvar movements = {};\n\t\tfor (let win of groupIter) {\n\t\t\twin.onGroupEdge = {};\n\t\t\twin.resizeHandle = this.resizeObject.correctedHandle;\n\t\t\t[\"top\", \"right\", \"left\", \"bottom\"].forEach((handle) => {\n\t\t\t\tif (win[handle] === group[handle]) {\n\t\t\t\t\twin.onGroupEdge[handle] = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tvar newHeight = Math.round(newGroupDimensions.height * (win.height / group.height));\n\t\t\tvar newWidth = Math.round(newGroupDimensions.width * (win.width / group.width));\n\t\t\tvar request = win.getBounds();\n\t\t\trequest.width = newWidth;\n\t\t\trequest.height = newHeight;\n\t\t\trequest.right = request.left + request.width;\n\t\t\trequest.bottom = request.top + request.height;\n\t\t\trequest.name = win.name;\n\n\t\t\tmovements[request.name] = this.checkShortCircuits(request);\n\t\t}\n\t\tsplitHandle.forEach((handle) => {\n\t\t\tgroupIter = this.groupWindowIterator(group);\n\t\t\t//cleans up the edges of the group in case rounding error messed us up.\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[handle];\n\t\t\tfor (var win of groupIter) {\n\t\t\t\tvar moveRequest = movements[win.name];\n\t\t\t\tif (win.onGroupEdge && win.onGroupEdge[oppEdge] && moveRequest[oppEdge] !== self.groupMask[oppEdge]) {\n\t\t\t\t\tmoveRequest.name = win.name;\n\t\t\t\t\tmoveRequest[oppEdge] = self.groupMask[oppEdge];\n\t\t\t\t\tif (oppEdge === \"bottom\") {\n\t\t\t\t\t\tmoveRequest.top = moveRequest.bottom - moveRequest.height;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"top\") {\n\t\t\t\t\t\tmoveRequest.bottom = moveRequest.top + moveRequest.height;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"left\") {\n\t\t\t\t\t\tmoveRequest.right = moveRequest.left + moveRequest.width;\n\t\t\t\t\t}\n\t\t\t\t\tif (oppEdge === \"right\") {\n\t\t\t\t\t\tmoveRequest.left = moveRequest.right - moveRequest.width;\n\t\t\t\t\t}\n\t\t\t\t\tmoveRequest.width = moveRequest.right - moveRequest.left;\n\t\t\t\t\tmoveRequest.height = moveRequest.bottom - moveRequest.top;\n\t\t\t\t\tmovements[win.name] = self.checkShortCircuits(moveRequest, win);\n\t\t\t\t}\n\n\t\t\t}\n\t\t});\n\t\tfor (var windowName in movements) {\n\t\t\tself.moveWindow(movements[windowName]);\n\t\t}\n\n\t}\n\n\t/**\n\t* This basically will re-snap all windows after the movingWindow moves.\n\t* @todo, document inline.\n\t* @param  {type} group\n\t* @param  {function} cb\n\t*/\n\tcleanupGroupResize(group, cb) { // TODO: see group.scale (replace scaleGroup and this with group.scale)\n\t\tvar resizeHandle = group.resizeHandle || this.resizeObject.correctedHandle;\n\t\tvar splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\n\t\tvar self = this;\n\t\tvar alreadyDanced = [];\n\t\tsplitHandle.forEach((handle) => {\n\t\t\tvar groupIter = this.groupWindowIterator(group);\n\t\t\talreadyDanced = [];\n\t\t\tfor (var anchor of groupIter) {\n\t\t\t\tif (!alreadyDanced.includes(anchor.name)) {\n\t\t\t\t\tvar b = doTheConga(anchor, handle); b;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// group.updateBounds();\n\t\t\tgroupIter = this.groupWindowIterator(group);\n\t\t\t//cleans up the edges of the group in case rounding error messed us up.\n\t\t\tfor (var win of groupIter) {\n\t\t\t\tif (win.onGroupEdge && win.onGroupEdge[handle] && win[handle] !== self.groupMask[handle]) {\n\t\t\t\t\tvar moveRequest = win.getBounds();\n\t\t\t\t\tmoveRequest.name = win.name;\n\t\t\t\t\tmoveRequest[handle] = self.groupMask[handle];\n\n\t\t\t\t\tmoveRequest.width = moveRequest.right - moveRequest.left;\n\t\t\t\t\tmoveRequest.height = moveRequest.bottom - moveRequest.top;\n\n\t\t\t\t\tself.moveWindow(self.checkShortCircuits(moveRequest, win));\n\t\t\t\t\tvar b = doTheConga(win, handle); b;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tgroup.updateBounds();\n\t\t});\n\n\t\tfunction doTheConga(win, handle) {\n\t\t\tif (!win) {\n\t\t\t\tLogger.system.warn(\"INVESTIGATE: No win passed to doTheConga\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[handle];\n\n\t\t\tfor (var i = 0, len = win.snappedWindows.length; i < len; i++) {\n\t\t\t\tvar snappedWindowObj = win.snappedWindows[i];\n\t\t\t\tvar snappedWin = self.getWindow(snappedWindowObj.name);\n\t\t\t\tif (!snappedWin) {\n\t\t\t\t\tLogger.system.warn(`INVESTIGATE: No Dockable Window found for ${snappedWindowObj.name}`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet groupIntersection = snappedWin.groupNames.some(name => win.groupNames.includes(name));\n\t\t\t\tif (!snappedWindowObj.edges[handle] || !groupIntersection) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar req = snappedWin.getBounds();\n\t\t\t\treq.name = snappedWin.name;\n\n\t\t\t\tsnappedWin[oppEdge] = win[handle];\n\t\t\t\tvar top = snappedWin.top, left = snappedWin.left;\n\t\t\t\tif (handle === \"top\") {\n\t\t\t\t\ttop = win.top - snappedWin.height;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"bottom\") {\n\t\t\t\t\ttop = win.bottom;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"right\") {\n\t\t\t\t\tleft = win.right;\n\t\t\t\t}\n\n\t\t\t\tif (handle === \"left\") {\n\t\t\t\t\tleft = win.left - snappedWin.width;\n\t\t\t\t}\n\n\t\t\t\tsnappedWin.moveTo(left, top);\n\t\t\t\tvar b = doTheConga(snappedWin, handle); b;\n\t\t\t\talreadyDanced.push(snappedWin.name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This returns an object with all of the bounds of all of the windows in a given group. This should be moved in to the dockableGroup.\n\t */\n\tgetBoundsOfGroupWindows(group) {\n\t\tvar groupIter = this.groupWindowIterator(group);\n\t\tvar bounds = {};\n\t\tfor (var win of groupIter) {\n\t\t\tbounds[win.name] = win.getBounds();\n\t\t\t//bounds[win.name].name = win.name;\n\t\t}\n\t\treturn bounds;\n\t}\n\n\t/**\n\t * For a group, it will iterate through its windows and set bounds on each of them.\n\t */\n\tsetBoundsOfGroupWindows(group, windowBounds, stopMove = false) {\n\t\tvar groupIter = this.groupWindowIterator(group);\n\t\tfor (var win of groupIter) {\n\t\t\twindowBounds[win.name].name = win.name;\n\t\t\tthis.moveWindow(windowBounds[win.name]);\n\t\t\tif (stopMove) {\n\t\t\t\twin.win.stopMove();\n\n\t\t\t\t//TODO: Calling stop move should take care of saving the window options, but didn't seem to work in for certain windows in groups\n\t\t\t\twin.win._saveWindowOptions();\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Exports an array of bounds for the windows that are currently being managed by docking. This makes it easy to generate oddball test cases.\n\t */\n\texport() {\n\t\tlet windowList = this.getWindowNames().map((name, i) => {\n\t\t\tlet win = this.getWindow(name);\n\t\t\tlet bounds = win.getBounds();\n\t\t\tbounds.name = `window${i}`;\n\t\t\treturn bounds;\n\t\t});\n\t\tif (windowList) {\n\t\t\treturn JSON.stringify(windowList);\n\n\t\t}\n\t\treturn \"\";\n\n\t}\n\n\t/**\n\t * Cleans up shared edges of windows in a group\n\t * @param {*} group The group to operate on\n\t * @param {*} windowBounds An object containing bounds key'ed by window name\n\t * @param {*} triggeredByAutoArrange Wether or not this cleanup was trigger by auto arrange (if true will fire stopMove())\n\t */\n\tcleanupSharedEdges(group, windowBounds, triggeredByAutoArrange = false) {\n\t\tlet groupIter = this.groupWindowIterator(group);\n\t\tfor (let win of groupIter) {\n\t\t\tlet edges = {\n\t\t\t\t\"right\": 0,\n\t\t\t\t\"left\": 0,\n\t\t\t\t\"top\": 0,\n\t\t\t\t\"bottom\": 0\n\t\t\t};\n\t\t\t// How many things is this window snapped to on each edge??\n\t\t\tfor (let sWin of win.snappedWindows) {\n\t\t\t\tfor (let i in sWin.edges) {\n\t\t\t\t\tif (sWin.edges[i]) edges[i]++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are only snapped to one thing and are disconnected, reconnect:\n\t\t\tfor (let sWin of win.snappedWindows) {\n\t\t\t\tfor (let edge in sWin.edges) {\n\t\t\t\t\tif (sWin.edges[edge] && edges[edge] === 1) {\n\t\t\t\t\t\tlet snappedWin = windowBounds[sWin.name];\n\t\t\t\t\t\t;\n\n\t\t\t\t\t\t//if a window is snapped to a window (but not grouped with it), that window won't be in the movable group's window bounds. So make sure it exists first.\n\t\t\t\t\t\tif (snappedWin) {\n\t\t\t\t\t\t\tif (win[edge] !== snappedWin[OPPOSITE_EDGE_MAP[edge]]) {\n\t\t\t\t\t\t\t\twindowBounds[win.name][edge] = snappedWin[OPPOSITE_EDGE_MAP[edge]];\n\t\t\t\t\t\t\t\tif ([\"right\", \"left\"].includes(edge)) {\n\t\t\t\t\t\t\t\t\twindowBounds[win.name].width = windowBounds[win.name].right - windowBounds[win.name].left;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\twindowBounds[win.name].height = windowBounds[win.name].bottom - windowBounds[win.name].top;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.setBoundsOfGroupWindows(group, windowBounds, triggeredByAutoArrange);\n\t\treturn windowBounds;\n\n\t}\n\n\t/**\n\t * A resize-helper that needs better documentation. I'm pretty sure this re-snaps windows during group resizes.\n\t *\n\t * @todo @deprecate at 4.0\n\t */\n\tcleanupSharedEdges_old(group, windowBounds) {\n\t\tvar groupIter = this.groupWindowIterator(group);\n\n\t\t// find everything attached to right and bottom of group mask\n\t\tlet alignRight = [],\n\t\t\talignBottom = [];\n\n\t\tfor (var win of groupIter) {\n\t\t\tvar bounds = windowBounds[win.name];\n\t\t\tif (bounds.right == this.groupMask.right) {\n\t\t\t\talignRight.push(win);\n\t\t\t}\n\t\t\tif (bounds.bottom == this.groupMask.bottom) {\n\t\t\t\talignBottom.push(win);\n\t\t\t}\n\t\t\tbounds = this.checkShortCircuitsWithEdge(bounds, \"left\");\n\t\t\tbounds = this.checkShortCircuitsWithEdge(bounds, \"top\");\n\t\t}\n\n\t\tthis.setBoundsOfGroupWindows(group, windowBounds);\n\t\tlet anchor = this.movingWindow;\n\t\tif (this.resizeObject) {\n\t\t\tanchor = group.getMoveAnchor(this.resizeObject.handle);\n\t\t}\n\t\tgroupIter = this.groupWindowIterator(group, anchor);\n\t\t// move stuff right / down\n\t\tfor (let win of groupIter) {\n\t\t\twin.snappedWindows.forEach((val) => {\n\t\t\t\tlet sWin = this.getWindow(val.name);\n\t\t\t\tvar bounds = windowBounds[win.name];\n\t\t\t\tvar snappedWindowBounds = windowBounds[sWin.name];\n\t\t\t\t//windows can be snapped but in different groups.\n\t\t\t\tif (snappedWindowBounds) {\n\t\t\t\t\tvar sharedEdges = val.edges;\n\t\t\t\t\tif (sharedEdges.right) {\n\t\t\t\t\t\tif (bounds.right !== snappedWindowBounds.left) {\n\t\t\t\t\t\t\tsnappedWindowBounds.left = bounds.right;\n\t\t\t\t\t\t\tsnappedWindowBounds.width = snappedWindowBounds.right - snappedWindowBounds.left;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sharedEdges.bottom) {\n\t\t\t\t\t\tif (bounds.bottom !== snappedWindowBounds.top) {\n\t\t\t\t\t\t\tsnappedWindowBounds.top = bounds.bottom;\n\t\t\t\t\t\t\tsnappedWindowBounds.bottom = snappedWindowBounds.height + snappedWindowBounds.top;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (sharedEdges.left) {\n\t\t\t\t\t\tif (bounds.left !== snappedWindowBounds.right) {\n\t\t\t\t\t\t\tsnappedWindowBounds.right = bounds.left;\n\t\t\t\t\t\t\tsnappedWindowBounds.width = snappedWindowBounds.right - snappedWindowBounds.left;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.setBoundsOfGroupWindows(group, windowBounds);\n\n\t\tgroupIter = this.groupWindowIterator(group, anchor);\n\t\t// resize to fit\n\t\tfor (let win of groupIter) {\n\t\t\twin.snappedWindows.forEach((val) => {\n\t\t\t\tlet sWin = this.getWindow(val.name);\n\t\t\t\tvar bounds = windowBounds[win.name];\n\t\t\t\tvar snappedWindowBounds = windowBounds[sWin.name];\n\t\t\t\tif (snappedWindowBounds) {\n\t\t\t\t\tvar sharedEdges = val.edges;\n\t\t\t\t\tif (sharedEdges.right) {\n\t\t\t\t\t\tif (snappedWindowBounds.left > bounds.right) {\n\t\t\t\t\t\t\tbounds.right = snappedWindowBounds.left;\n\t\t\t\t\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (sharedEdges.bottom) {\n\t\t\t\t\t\tif (snappedWindowBounds.top > bounds.bottom) {\n\t\t\t\t\t\t\tbounds.bottom = snappedWindowBounds.top;\n\t\t\t\t\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (sharedEdges.left) {\n\t\t\t\t\t\tif (bounds.left !== snappedWindowBounds.right) {\n\t\t\t\t\t\t\tsnappedWindowBounds.right = bounds.left;\n\t\t\t\t\t\t\tsnappedWindowBounds.width = snappedWindowBounds.right - snappedWindowBounds.left;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tgroupIter = this.groupWindowIterator(group);\n\n\t\tvar maxRight = false;\n\t\tvar maxBottom = false;\n\t\tvar minLeft = false;\n\t\tvar minTop = false;\n\n\t\tfor (let win of groupIter) {\n\t\t\tlet bounds = windowBounds[win.name];\n\t\t\tif (maxRight === false || bounds.right > maxRight) {\n\t\t\t\tmaxRight = bounds.right;\n\t\t\t}\n\t\t\tif (maxBottom === false || bounds.bottom > maxBottom) {\n\t\t\t\tmaxBottom = bounds.bottom;\n\t\t\t}\n\t\t\tif (minLeft === false || bounds.left < minLeft) {\n\t\t\t\tminLeft = bounds.left;\n\t\t\t}\n\t\t\tif (minTop === false || bounds.top < minTop) {\n\t\t\t\tminTop = bounds.top;\n\t\t\t}\n\n\t\t}\n\n\t\tgroupIter = this.groupWindowIterator(group);\n\n\t\tfor (let win of groupIter) {\n\t\t\tlet bounds = windowBounds[win.name];\n\t\t\tif (win.onGroupEdge && win.onGroupEdge.right && maxRight > bounds.right) {\n\t\t\t\tbounds.right = maxRight;\n\t\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\t}\n\n\t\t\tif (win.onGroupEdge && win.onGroupEdge.bottom && maxBottom > bounds.bottom) {\n\t\t\t\tbounds.bottom = maxBottom;\n\t\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\t}\n\n\t\t\tif (win.onGroupEdge && win.onGroupEdge.left && minLeft < bounds.left) {\n\t\t\t\tbounds.left = minLeft;\n\t\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\t}\n\n\t\t\tif (win.onGroupEdge && win.onGroupEdge.top && minTop < bounds.top) {\n\t\t\t\tbounds.top = minTop;\n\t\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\t}\n\t\t}\n\t\treturn windowBounds;\n\t}\n\n\t/**\n\t * Run after everything, it removes any gaps that might have occurred (e.g., from fractional pixels, rounding, etc). It needs better inline documentation.\n\t */\n\tcleanupGaps(group, windowBounds) {\n\t\tvar groupIter = this.groupWindowIterator(group);\n\n\t\tvar xs = [];\n\t\tvar ys = [];\n\t\tfor (var win of groupIter) {\n\t\t\tvar bounds = windowBounds[win.name];\n\t\t\t//if (!xs.length) xs.push(bounds.left);\n\t\t\tlet found = false;\n\t\t\tfor (let i = 0, len = xs.length; i < len; i++) {\n\t\t\t\tvar x = xs[i];\n\t\t\t\tif (Math.abs(bounds.left - x) < 5) {\n\t\t\t\t\tbounds.left = x;\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) { xs.push(bounds.left); }\n\n\t\t\tfound = false;\n\t\t\tfor (let i = 0, len = xs.length; i < len; i++) {\n\t\t\t\tvar x = xs[i];\n\t\t\t\tif (Math.abs(bounds.right - x) < 5) {\n\t\t\t\t\tbounds.right = x;\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) { xs.push(bounds.right); }\n\n\t\t\tbounds.width = bounds.right - bounds.left;\n\n\t\t\t//if (!ys.length) ys.push(bounds.top);\n\t\t\tfound = false;\n\t\t\tfor (let i = 0, len = ys.length; i < len; i++) {\n\t\t\t\tvar y = ys[i];\n\t\t\t\tif (Math.abs(bounds.top - y) < 5) {\n\t\t\t\t\tbounds.top = y;\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) { ys.push(bounds.top); }\n\n\t\t\tfound = false;\n\t\t\tfor (let i = 0, len = ys.length; i < len; i++) {\n\t\t\t\tvar y = ys[i];\n\t\t\t\tif (Math.abs(bounds.bottom - y) < 5) {\n\t\t\t\t\tbounds.bottom = y;\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found) { ys.push(bounds.bottom); }\n\n\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\t//win.setBounds(bounds)\n\t\t}\n\n\t\treturn windowBounds;\n\t}\n\n\tshouldShortCircuit(request) {\n\t\tlet shouldShortCircuit = {\n\t\t\twidth: false,\n\t\t\theight: false\n\t\t};\n\t\tlet win = this.getWindow(request.name);\n\t\tif (win) {\n\t\t\tif (request.width <= win.limits.minWidth || request.width >= win.limits.maxWidth) {\n\t\t\t\tshouldShortCircuit.width = true;\n\t\t\t}\n\t\t\tif (request.height <= win.limits.minHeight || request.height >= win.limits.maxHeight) {\n\t\t\t\tshouldShortCircuit.height = true;\n\t\t\t\tif (debug) {\n\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"short circuiting height because of\", request.name, request.height);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn shouldShortCircuit;\n\t}\n\t/**\n\t * Resizes a window or group of windows on the interior of a group\n\t * @param {moveRequest} moveRequest\n\t */\n\tresizeInteriorWindow(moveRequest) {\n\t\tvar shortCircuits = this.shouldShortCircuit(moveRequest);\n\t\tvar resizeHandle = this.resizeObject.correctedHandle;\n\t\t//Hole filling algorithm for tiling calls this method. It passes in the resize handle. It'll never be a corner. No need for the resizeObject here.\n\t\tif (moveRequest.forceResizeHandle) {\n\t\t\tresizeHandle = moveRequest.resizeHandle;\n\t\t}\n\n\t\tvar self = this;\n\t\tif (!resizeHandle) { return; }\n\n\t\tvar movements = {};\n\t\tvar snappableWindows = this.getSnappableWindows(moveRequest);\n\t\tvar modifiedRequest = clone(moveRequest, Logger.system.error);\n\t\tvar splitHandle = resizeHandle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\treturn s.toLowerCase();\n\t\t});\n\n\t\tvar snappedWindowNames = [];\n\t\tfor (let i = 0, len = this.movingWindow.snappedWindows.length; i < len; i++) {\n\t\t\tlet snapObj = this.movingWindow.snappedWindows[i];\n\t\t\tfor (var h = 0, handleLen = splitHandle.length; h < handleLen; h++) {\n\t\t\t\tlet handle = splitHandle[h];\n\t\t\t\tif (snapObj.edges[handle] || snapObj.corners[resizeHandle]) {\n\t\t\t\t\tsnappedWindowNames.push(snapObj.name);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//will snap the window to other windows before going and modifying the rest of it\n\t\tfor (let i = 0, len = snappableWindows.length; i < len; i++) {\n\n\t\t\tif (snappedWindowNames.includes(snappableWindows[i]) || snappableWindows[i] === this.movingWindow.name) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (groupBlacklist.includes(snappableWindows[i])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet win = this.getWindow(snappableWindows[i]);\n\n\t\t\tthis.setStationaryWindow(win);\n\t\t\tmodifiedRequest.movingRegion = resizeHandle;\n\t\t\tvar shouldContinue = false;\n\t\t\tfor (let h = 0, handleLen = splitHandle.length; h < handleLen; h++) {\n\t\t\t\tvar handle = splitHandle[h];\n\t\t\t\tif (modifiedRequest[handle] === moveRequest[handle]) {\n\t\t\t\t\tshouldContinue = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmodifiedRequest = this.snapWindow(modifiedRequest);\n\n\t\t\tif (shouldContinue) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tmodifiedRequest.snappingRegions = BoxMath.getSnappingRegions(modifiedRequest, this.bufferSize);\n\n\t\t\tmodifiedRequest.windowBoundingBox = BoxMath.getWindowBoundingBox(modifiedRequest);\n\t\t\tbreak;\n\t\t}\n\t\tmoveRequest = modifiedRequest;\n\t\tmovements[moveRequest.name] = moveRequest;\n\n\t\tvar movingWindowSnappedWindows = [];\n\t\tvar terds = [];\n\n\t\tfunction recurse(snappedWindows, handle, originalHandle) {\n\t\t\tvar oppEdge = OPPOSITE_EDGE_MAP[handle];\n\t\t\tfor (let i = 0, len = snappedWindows.length; i < len; i++) {\n\t\t\t\tlet snapObj = snappedWindows[i];\n\n\t\t\t\tlet snappedWindow = self.getWindow(snapObj.name);\n\t\t\t\tif (!terds.includes(snapObj.name + oppEdge)) {\n\t\t\t\t\tterds.push(snapObj.name + oppEdge);\n\t\t\t\t\tmovingWindowSnappedWindows.push({\n\t\t\t\t\t\tname: snapObj.name,\n\t\t\t\t\t\tedge: oppEdge,\n\t\t\t\t\t\thandle: originalHandle\n\t\t\t\t\t});\n\t\t\t\t\tvar a = recurse(self.getWindowsOnEdge(snappedWindow, oppEdge), oppEdge, originalHandle);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tfunction recurseCorner(cornerWindows, handle, originalHandle) {\n\n\t\t\tfor (let i = 0, len = cornerWindows.length; i < len; i++) {\n\n\t\t\t\tlet snapObj = cornerWindows[i];\n\n\t\t\t\tlet snappedWindow = self.getWindow(snapObj.name);\n\t\t\t\tif (snapObj.corner && !terds.includes(snapObj.name + snapObj.corner)) {\n\t\t\t\t\tvar splitHandle = snapObj.corner.split(/(?=[A-Z])/).map(function (s) {\n\t\t\t\t\t\treturn s.toLowerCase();\n\t\t\t\t\t});\n\t\t\t\t\tsplitHandle.forEach((handle) => {\n\t\t\t\t\t\t//if splitHandle == bottomLeft and the originalHandle is bottom, we don't want to do anything with the Left edge. The algorithm will run through this function twice.\n\t\t\t\t\t\tvar doStuff = handle === originalHandle || handle === OPPOSITE_EDGE_MAP[originalHandle];\n\t\t\t\t\t\tif (doStuff && !terds.includes(snapObj.name + handle)) {\n\t\t\t\t\t\t\tmovingWindowSnappedWindows.push({\n\t\t\t\t\t\t\t\tname: snapObj.name,\n\t\t\t\t\t\t\t\tedge: handle,\n\t\t\t\t\t\t\t\thandle: originalHandle\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tvar a = recurse(self.getWindowsOnEdge(snappedWindow, handle), handle, originalHandle);\n\t\t\t\t\t\t\tterds.push(snapObj.name + handle);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\t// recurseCorner(snappedWindow, snapObj.corner);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tvar movingCorner = CORNERS.includes(resizeHandle);\n\t\tif (movingCorner) {\n\t\t\tvar cornerPoint = self.movingWindow.getPointByVertex(resizeHandle);\n\t\t\tvar cornerWindows = self.getWindowsAtPoint(cornerPoint).map((val, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: val,\n\t\t\t\t\tcorner: self.getWindow(val).getVertexByPoint(cornerPoint),\n\t\t\t\t\tedge: self.getWindow(val).getEdgeByPoint(cornerPoint)\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tsplitHandle.forEach((handle) => {\n\t\t\t\tvar b = recurseCorner(cornerWindows, resizeHandle, handle);\n\t\t\t});\n\t\t} else {\n\t\t\tvar clonedSnaps = self.getWindowsOnEdge(self.movingWindow, resizeHandle);\n\t\t\tvar b = recurse(clonedSnaps, resizeHandle, resizeHandle);\n\t\t}\n\n\t\tfor (let i = 0, len = movingWindowSnappedWindows.length; i < len; i++) {\n\t\t\tlet snapObj = movingWindowSnappedWindows[i];\n\n\t\t\tvar snappedWindow = self.getWindow(snapObj.name);\n\t\t\tlet newBounds = movements[snapObj.name] ? movements[snapObj.name] : snappedWindow.getBounds();\n\t\t\tnewBounds.name = snapObj.name;\n\t\t\tnewBounds[snapObj.edge] = moveRequest[snapObj.handle];\n\n\t\t\tnewBounds.width = newBounds.right - newBounds.left;\n\t\t\tnewBounds.height = newBounds.bottom - newBounds.top;\n\n\t\t\tif (newBounds.width <= snappedWindow.limits.minWidth || newBounds.width >= snappedWindow.limits.maxWidth) {\n\t\t\t\tshortCircuits.width = true;\n\t\t\t}\n\n\t\t\tif (newBounds.height <= snappedWindow.limits.minHeight || newBounds.width >= snappedWindow.limits.maxHeight) {\n\t\t\t\tshortCircuits.height = true;\n\t\t\t\tif (debug) {\n\t\t\t\t\tLogger.system.debug(\"forceObjectsToLogger\", \"short circuiting height because of\", newBounds.name, newBounds.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnewBounds = self.checkShortCircuits(newBounds, snappedWindow);\n\t\t\tmovements[newBounds.name] = newBounds;\n\n\t\t}\n\t\tfor (var windowName in movements) {\n\t\t\tif (groupBlacklist.includes(windowName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar movement = movements[windowName];\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\tif (shortCircuits.width) {\n\t\t\t\tmovement.width = win.width;\n\t\t\t\tmovement.left = win.left;\n\t\t\t\tmovement.right = win.right;\n\t\t\t}\n\t\t\tif (shortCircuits.height) {\n\n\t\t\t\tmovement.height = win.height;\n\t\t\t\tmovement.top = win.top;\n\t\t\t\tmovement.bottom = win.bottom;\n\t\t\t}\n\n\t\t\tthis.moveWindow(movement);\n\t\t}\n\n\t}\n\n\t/**\n\t * function for debugging a 3x3 grid.\n\t*/\n\tlogger() {\n\t\tvar boundingBoxes = {};\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tboundingBoxes[windowName] = JSON.stringify(win.windowBoundingBox);\n\t\t}\n\t\tvar box = \"\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|   \" + boundingBoxes[\"A\"] + \"          |    \" + boundingBoxes[\"B\"] + \"         |   \" + boundingBoxes[\"C\"] + \"         |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|   \" + boundingBoxes[\"D\"] + \"          |    \" + boundingBoxes[\"E\"] + \"         |   \" + boundingBoxes[\"F\"] + \"         |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|   \" + boundingBoxes[\"G\"] + \"          |    \" + boundingBoxes[\"H\"] + \"         |   \" + boundingBoxes[\"I\"] + \"         |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tglobal.Logger.system.verbose(box);\n\t}\n\n\t/**\n\t\t* Helper to determine whether a moveRequest will affect a window, the group, or just a local collection of windows that are snapped to the movingWindow.\n\t\t*/\n\tshouldScaleGroup(moveRequest) {\n\t\tif (this.groupMode.requireRectangularityForGroupResize) {\n\t\t\treturn this.shouldMoveAffectGroup(moveRequest);\n\t\t}\n\n\t\tif (!this.groupMode.enabled) {\n\t\t\treturn false;\n\t\t}\n\t\tvar win = this.getWindow(moveRequest.name);\n\n\t\tif (!win || !win.groupNames.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar group = this.getMovingGroup(moveRequest);\n\t\tlet req = new DockableBox(moveRequest);\n\n\t\t//if the handle that's being dragged is on an exterior edge of a group resizing all.\n\t\t//This used to be derived from the window because it was only calculated on mouseDown. Now that it can be calculated at any time, we need to derive the handle from the request that's coming in. On group resizes, window bounds are only modified on mouse up.\n\t\tlet resizeHandle = req.getResizeHandle(moveRequest);\n\n\t\tif (moveRequest.changeType !== 0 && CORNERS.includes(resizeHandle)) {\n\t\t\tvar cornerPoint = win.getPointByVertex(resizeHandle);\n\t\t\tlet cornersThatCauseScaling = group.getCornersThatCauseScaling();\n\t\t\tlet shouldScale = cornersThatCauseScaling.some((corner) => {\n\t\t\t\treturn corner.x === cornerPoint.x && corner.y === cornerPoint.y;\n\t\t\t});\n\t\t\treturn shouldScale;\n\t\t}\n\t\treturn false;\n\n\t}\n\t/**\n\t * Helper to determine whether a moveRequest will affect a window, the group, or just a local collection of windows that are snapped to the movingWindow.\n\t */\n\tshouldMoveAffectGroup(moveRequest) {\n\t\tif (!this.groupMode.enabled) {\n\t\t\treturn false;\n\t\t}\n\t\tvar win = this.getWindow(moveRequest.name);\n\n\t\tif (!win || !win.groupNames.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar group = this.getMovingGroup(moveRequest);\n\t\tif (!group.isARectangle()) {\n\t\t\treturn false;\n\t\t}\n\n\t\t//if the handle that's being dragged is on an exterior edge of a group resizing all.\n\t\tvar resizeHandle = this.resizeObject.correctedHandle || win.getResizeHandle(moveRequest);\n\n\t\tvar edges = [\"top\", \"left\", \"right\", \"bottom\"];\n\t\tif (moveRequest.changeType !== 0 && CORNERS.includes(resizeHandle)) {\n\t\t\tvar cornerPoint = win.getPointByVertex(resizeHandle);\n\t\t\treturn group.pointIsOnBoundingBox(cornerPoint);\n\t\t}\n\n\t\tif (moveRequest.changeType !== 0) {\n\t\t\treturn win[resizeHandle] === group[resizeHandle];\n\t\t}\n\t\t//never used, but could be used if you wanted to only allow exterior windows the ability to move the group.\n\t\tfor (var i = 0, len = edges.length; i < len; i++) {\n\t\t\tvar edge = edges[i];\n\t\t\tif (win[edge] === group[edge]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\n\t/**\n\t * Should use this. Computes the difference between two boundsObjects.\n\t * @param {moveRequest} newBounds\n\t * @param {moveRequest} old\n\t */\n\tgetBoundsDelta(newBounds, old) {\n\t\tvar boundsDelta = {};\n\t\tvar widthDelta = newBounds.width - old.width;\n\n\t\tvar heightDelta = newBounds.height - old.height;\n\n\t\tboundsDelta.width = widthDelta;\n\t\tboundsDelta.height = heightDelta;\n\t\tboundsDelta.top = Math.abs(newBounds.top - old.top);\n\t\tboundsDelta.left = Math.abs(newBounds.left - old.left);\n\t\tif (newBounds.top < old.top) {\n\t\t\tboundsDelta.top = -boundsDelta.top;\n\t\t}\n\t\tif (newBounds.left < old.left) {\n\t\t\tboundsDelta.left = -boundsDelta.left;\n\t\t}\n\n\t\treturn boundsDelta;\n\t}\n\n\t/**\n\t* Will move a group of windows.\n\t* @param  {moveRequest} moveRequest\n\t* @param  {function} cb\n\t*/\n\thandleGroupMove(moveRequest, cb) {\n\t\tconst invokeCallback = function () {\n\t\t\tcb({ finished: true });\n\t\t};\n\n\t\tlet self = this;\n\t\tlet group = this.getMovableGroup(moveRequest.name);\n\t\tif (typeof moveRequest.anchor === \"undefined\") {\n\t\t\tlet movingDirection = this.getMovingDirection(moveRequest, this.movingWindow);\n\t\t\tmoveRequest.anchor = group.getMoveAnchor(movingDirection);\n\t\t\tif (moveRequest.anchor === \"NotMoving\") {\n\t\t\t\treturn invokeCallback();\n\t\t\t}\n\t\t}\n\t\tlet updateGroupWindowsByDelta = function (delta, moveWindows, cb) {\n\t\t\t// console.log(\"updateGroupWindowsByDelta\", delta);\n\t\t\tvar groupIter = self.groupWindowIterator(group, moveRequest.anchor);\n\t\t\t//don't need to add anything if the delta is 0.\n\t\t\tvar modifyBounds = delta.x || delta.y;\n\t\t\tfor (let win of groupIter) {\n\t\t\t\tlet bounds = win.getBounds();\n\t\t\t\tif (modifyBounds) {\n\t\t\t\t\tvar newLeft = win.left + delta.x;\n\t\t\t\t\tvar newTop = win.top + delta.y;\n\t\t\t\t\tbounds.left = newLeft;\n\t\t\t\t\tbounds.top = newTop;\n\t\t\t\t\tbounds.bottom = newTop + bounds.height;\n\t\t\t\t\tbounds.right = newLeft + bounds.width;\n\t\t\t\t\tbounds.name = win.name;\n\t\t\t\t}\n\t\t\t\t//don't want wrappers saving here..\n\t\t\t\tbounds.persistBounds = false;\n\t\t\t\tif (moveWindows) {\n\t\t\t\t\t//I'm breaking my own rule by calling setBounds directly. Sadly, isJiggling was being triggered (I think...didn't really investigate), and the window wasn't moving with small adjustments. Set bounds fixes that.\n\t\t\t\t\tif (debug) {\n\t\t\t\t\t\tLogger.system.verbose(\"Docking: setBounds\", win.name);\n\t\t\t\t\t}\n\t\t\t\t\twin.setBounds(bounds);\n\t\t\t\t} else {\n\t\t\t\t\twin.setInternalBounds(bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t\tgroup.updateBounds();\n\t\t\tif (cb) {\n\t\t\t\tcb();\n\t\t\t}\n\t\t};\n\n\t\tlet delta = self.getMoveDelta(moveRequest);\n\t\t//processSnaps was added for moving groups out of claimed space. When you snapped a window to a movable group, the movable group would snap to the top of the other window rather than being dumped below the claimed space. Basically the first request would shift it down 40px, but then it'd snap to the top of the other window. When we move windows out of claimed space, processSnaps is false.\n\t\tif (ALLOW_GROUPS_TO_SNAP) {\n\t\t\t//make the group get its new bounds, but don't move the windows until the snap calculation is finished.\n\t\t\tupdateGroupWindowsByDelta(delta, false);\n\t\t\tlet preSnapBounds = group.getBounds();\n\t\t\tlet mr = group.getBounds();\n\t\t\tmr.name = moveRequest.name;\n\t\t\tmr.mousePosition = moveRequest.mousePosition;\n\t\t\tlet groupMoveRequest = this.setMoveRequest(mr);\n\t\t\tgroupMoveRequest.changeType = 0;\n\t\t\tthis.checkBuffers(groupMoveRequest, function (modifiedRequest) {\n\t\t\t\tif (modifiedRequest.finished) {\n\t\t\t\t\tvar delta = self.getMoveDelta(modifiedRequest, preSnapBounds);\n\t\t\t\t\tupdateGroupWindowsByDelta(delta, true, invokeCallback);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tupdateGroupWindowsByDelta(delta, true, invokeCallback);\n\t\t}\n\t}\n\n\t/**\n\t* Calculates the % change that a moveRequest inflicts on a group of windows.\n\t* @param  {moveRequest} moveRequest\n\t* @return {type}\n\t*/\n\tgetGroupDelta(groupName, moveRequest) {\n\t\tvar group = this.getGroup(groupName);\n\t\tvar win = this.getWindow(moveRequest.name);\n\t\tvar widthDelta = moveRequest.width - win.width;\n\t\tvar heightDelta = moveRequest.height - win.height;\n\n\t\tvar delta = {\n\t\t\theight: BoxMath.getPercentChange(group.height, group.height + heightDelta),\n\t\t\twidth: BoxMath.getPercentChange(group.width, group.width + widthDelta)\n\t\t};\n\t\treturn delta;\n\t}\n\n\t/**\n\t * Creates the resizeObject. Put anything here that should be cached onMouseDown. Will be cleared onMouseUp.\n\t * @param {moveRequest} moveRequest\n\t * @return {resizeObject}\n\t */\n\tconstructResizeObject(moveRequest) {\n\t\tvar win = this.getWindow(moveRequest.name);\n\t\tlet req = new DockableBox(moveRequest);\n\n\t\t//if the handle that's being dragged is on an exterior edge of a group resizing all.\n\t\tvar resizeObject = {\n\t\t\t//This used to be derived from the window because it was only calculated on mouseDown. Now that it can be calculated at any time, we need to derive the handle from the request that's coming in. On group resizes, window bounds are only modified on mouse up.\n\t\t\thandle: req.getResizeHandle(moveRequest),\n\t\t\ttype: \"edge\",\n\t\t\tscalingGroup: moveRequest.changeType !== 0 ? this.shouldScaleGroup(moveRequest) : false\n\t\t};\n\n\t\tresizeObject.correctedHandle = resizeObject.handle;\n\t\tif (CORNERS.includes(resizeObject.handle)) {\n\t\t\tresizeObject.type = \"corner\";\n\t\t\tif (resizeObject.scalingGroup) {\n\t\t\t\tresizeObject = this.correctResizeObject(win, resizeObject);\n\t\t\t}\n\t\t}\n\n\t\tresizeObject.movingEdges = this.getMovingEdgesFromResizeHandle(resizeObject.correctedHandle);\n\t\twin.resizeHandle = resizeObject.correctedHandle;\n\n\t\treturn resizeObject;\n\t}\n\n\t/**\n\t * If a corner of a window is on the edge of the group, but it's not an actual corner, we need to treat that as an edge resize. See inline documentation for more. This is basically correcting errant resize-handles.\n\t * @note this behavior is locked behind `requireRectangularityForGroupResize`. Without that flag turned on, there's no need to change the resize handle.\n\t */\n\tcorrectResizeObject(win, resizeObject, force) {\n\t\t//If we don't require rectangularity, we don't need to  change the resize handle.\n\t\tif (this.groupMode.requireRectangularityForGroupResize && CORNERS.includes(resizeObject.handle)) {\n\t\t\tlet group = this.movingGroup;\n\t\t\tlet cornerPoint = win.getPointByVertex(resizeObject.handle);\n\t\t\tlet groupEdge = group.getEdgeByPoint(cornerPoint);\n\t\t\tif (group.pointIsOnBoundingBox(cornerPoint, false)) {\n\t\t\t\tlet splitHandle = resizeObject.handle.split(/(?=[A-Z])/).map(function (s) {\n\t\t\t\t\treturn s.toLowerCase();\n\t\t\t\t});\n\n\t\t\t\tif (this.moveRequest) {\n\t\t\t\t\t//E.g., 'bottomRight'. Takes and resets the bottom to whatever it was before the user started moving. So even if I grab the bottom right corner and drag it down, the window's bottom edge will not shift.\n\t\t\t\t\tthis.moveRequest[splitHandle[0]] = this.movingWindow[splitHandle[0]];\n\t\t\t\t\tthis.moveRequest.height = this.moveRequest.bottom - this.moveRequest.top;\n\t\t\t\t\tthis.moveRequest.width = this.moveRequest.right - this.moveRequest.left;\n\t\t\t\t}\n\t\t\t\tresizeObject.type = \"edge\";\n\t\t\t\t//e.g., bottomRight; this will just choose 'right'. This happens when you grab the corner of a window that's also on the edge of the window...but isn't the corner of the group.\n\n\t\t\t\tresizeObject.correctedHandle = groupEdge;\n\t\t\t}\n\t\t}\n\n\t\treturn resizeObject;\n\t}\n\n\t/**\n\t* Resizes a window based on some delta.\n\t* @param  {dockableWindow} win\n\t* @param  {Object} delta Object with a width/height change.\n\t* @return {type}\n\t*/\n\tresizeByDelta(win, delta) {\n\t\tvar bounds = win.getBounds();\n\t\tbounds.width = BoxMath.scaleProportionately(win.width, delta.width);\n\t\tbounds.height = BoxMath.scaleProportionately(win.height, delta.height);\n\t\tif (win.resizeHandle.toLowerCase().includes(\"right\")) {\n\t\t\tbounds.right = bounds.left + bounds.width;\n\t\t}\n\t\tif (win.resizeHandle.toLowerCase().includes(\"bottom\")) {\n\n\t\t\tbounds.bottom = bounds.top + bounds.height;\n\t\t}\n\n\t\tif (win.resizeHandle.toLowerCase().includes(\"top\")) {\n\n\t\t\tbounds.top = bounds.bottom - bounds.height;\n\t\t}\n\n\t\tif (win.resizeHandle.toLowerCase().includes(\"left\")) {\n\n\t\t\tbounds.left = bounds.right - bounds.width;\n\t\t}\n\t\treturn bounds;\n\t}\n\n\tgetMovingDirection(bounds, win) {\n\t\tif (!win) {\n\t\t\twin = this.getWindow(bounds.name);\n\t\t}\n\t\tlet direction = \"\";\n\t\tif (win.left > bounds.left) {\n\t\t\tdirection = \"Left\";\n\t\t}\n\t\tif (win.left < bounds.left) {\n\t\t\tdirection += \"Right\";\n\t\t}\n\t\tif (win.top > bounds.top) {\n\t\t\tdirection += \"Top\";\n\t\t}\n\t\tif (win.top < bounds.top) {\n\t\t\tdirection += \"Bottom\";\n\t\t}\n\t\treturn direction;\n\t}\n\n\t/**\n\t* Does the dirty work of actually moving windows.\n\t* @todo, shortCircuit moves that try to squash windows beyond a minimum width/height.\n\t* @param  {moveRequest} bounds\n\t* @param  {function} callback\n\t*/\n\tmoveWindow(bounds, callback) {\n\t\t//if window resize causes ANY window to be smaller than the minimum_width, quit that shit.\n\t\tif (!bounds) {\n\t\t\tif (callback) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (!callback) {\n\t\t\tcallback = function noop() { };\n\t\t}\n\t\tvar win = this.getWindow(bounds.name);\n\t\tif (win) {\n\t\t\tbounds.persistBounds = false;\n\t\t\twin.setBounds(bounds, callback, setBoundsErrorCB);\n\t\t}\n\t}\n\n\n\t/**\n\t* Checks to see whether a window can be snapped to other windows/monitors.\n\t* @param  {moveRequest} bounds\n\t* @param  {function} callback\n\t */\n\tcheckBuffers(moveRequest, cb) {\n\t\tif (this.movingWindow && this.movingWindow.ignoreSnappingRequests) {\n\t\t\tmoveRequest.ignoreSnappingRequests = true;\n\t\t}\n\t\tvar snappableWindows = this.getSnappableWindows(moveRequest);\n\t\tvar snappableMonitors = this.getSnappableMonitors(moveRequest);\n\n\t\t//When a window is moved (ends up inside checkBuffers) and it is docked, we can safely assume the window is being undocked (why else would you move a window that takes up the width of the window (or height)?). Here, we set the new bounds of the move request and call to undock the window, which will propagate to all the necessary items changing (the window will shrink, undock, etc).\n\t\tlet dockableWin = this.movingWindow;\n\t\tif (dockableWin.isDocked) {\n\t\t\t//if the user tries to resize a docked component, ignore it.\n\t\t\tif (moveRequest.changeType !== 0) {\n\t\t\t\tlet req = this.movingWindow.getBounds();\n\t\t\t\treq.name = this.movingWindow.name;\n\t\t\t\treq.finished = true;\n\t\t\t\tthis.hideGroupMask();\n\t\t\t\treturn cb(req);\n\t\t\t}\n\n\t\t\tif (dockableWin.dockedPosition === dockableWin.monitorDockablePositions.TOP) {\n\t\t\t\tmoveRequest.top = dockableWin.top + (this.bufferSize * 2);\n\t\t\t\tmoveRequest.bottom = moveRequest.top + dockableWin.height;\n\t\t\t} else if (dockableWin.dockedPosition === dockableWin.monitorDockablePositions.BOTTOM) {\n\t\t\t\tmoveRequest.bottom = dockableWin.bottom - (this.bufferSize * 2);\n\t\t\t\tmoveRequest.top = moveRequest.bottom - dockableWin.height;\n\t\t\t}\n\t\t\tmoveRequest.height = dockableWin.undockedPosition.height;\n\t\t\tmoveRequest.width = dockableWin.undockedPosition.width;\n\n\t\t\tlet monitor = dockableWin.monitor;\n\t\t\tif (dockableWin.dockedMonitor) {\n\t\t\t\tmoveRequest.dockedMonitor = dockableWin.dockedMonitor;\n\t\t\t\tthis.movingWindow.dockedMonitor = null;\n\t\t\t}\n\t\t\tmonitor.undockWindowFromMonitor(moveRequest);\n\t\t\tthis.hideGroupMask();\n\n\n\t\t\t//Force exit\n\t\t\tdockableWin.snappedMonitor = null;\n\t\t\tsnappableWindows = [];\n\t\t\tsnappableMonitors = [];\n\t\t}\n\n\n\n\t\t//processSnaps was added for moving groups out of claimed space. When you snapped a window to a movable group, the movable group would snap to the top of the other window rather than being dumped below the claimed space. Basically the first request would shift it down 40px, but then it'd snap to the top of the other window. When we move windows out of claimed space, processSnaps is false.\n\t\tif (moveRequest.processSnaps === false || (!snappableWindows.length && !snappableMonitors.length) && cb) {\n\t\t\tmoveRequest.finished = true;\n\t\t\tthis.hideGroupMask();\n\t\t\tcb(moveRequest);\n\t\t\treturn;\n\t\t}\n\n\t\tvar modifiedRequest;\n\n\t\tfor (let i = 0, len = snappableMonitors.length; i < len; i++) {\n\t\t\tvar monitor = monitorPool.get(snappableMonitors[i]);\n\t\t\tlet snapRequest = monitor.snapWindow(moveRequest);\n\n\t\t\tif (dockableWin.isDockableComponent) {\n\t\t\t\t//If we've made it this far we're moving a dockable component and it isn't already docked (which means we're constantly checking for whether we need to dock). Here we do calculations to determine if a 'dockable mask' should be shown.\n\t\t\t\tdockableWin.snappedMonitor = monitor;\n\t\t\t\tlet clonedRequest = clone(snapRequest, Logger.system.error);\n\t\t\t\tsnapRequest.dockedMonitor = monitor.name;\n\t\t\t\tlet maskBounds = monitor.getSnappedEdge(clonedRequest);\n\t\t\t\tlet newBounds = monitor.getDockedPosition(maskBounds, clonedRequest);\n\t\t\t\tif (newBounds) {\n\t\t\t\t\tthis.showGroupMask({ bounds: newBounds });\n\t\t\t\t}\n\t\t\t\tsnappableWindows = []; //Force exit if window docks to monitor\n\t\t\t}\n\t\t\tif (snapRequest) {\n\t\t\t\tmoveRequest = snapRequest;\n\t\t\t}\n\n\t\t\tif (i === snappableMonitors.length - 1 && snappableWindows.length === 0) {\n\t\t\t\tmoveRequest.finished = true;\n\t\t\t\tcb(moveRequest);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0, len = snappableWindows.length; i < len; i++) {\n\t\t\tvar win = this.getWindow(snappableWindows[i]);\n\t\t\tthis.setStationaryWindow(win);\n\t\t\twin.setOpacity({ opacity: SNAPPING_OPACITY });\n\t\t\tmodifiedRequest = this.snapWindow(moveRequest);\n\t\t\t//The original request has been changed because of a snap to a straddler window. replace the reference so new comparisons are made against the newly snapped window.\n\t\t\tmoveRequest = modifiedRequest;\n\n\t\t\tmoveRequest.windowBoundingBox = BoxMath.getWindowBoundingBox(moveRequest);\n\t\t\tif (i === snappableWindows.length - 1) {\n\t\t\t\tmodifiedRequest.finished = true;\n\t\t\t}\n\n\t\t\tcb(modifiedRequest);\n\t\t}\n\t}\n\n\t/**\n\t* Spins through windows and fixes opacity. For onMouseMove, we skip any windows that could be snapped to the movingWindow. onMouseUp, everything gets hit.\n\t* @todo, see if I can keep a list of windows that are set to 0.5. I don't need to loop through all windows here. Only the ones that aren't set to 1.\n\t* @param  {object} params\n\t* @param  {object} params.checkForSnappability\n\t*/\n\tfixWindowOpacity(params) {\n\t\tvar dockingPoolIterator = this.dockingPool.iterator();\n\t\tfor (var win of dockingPoolIterator) {\n\t\t\tif (params.checkForSnappability) {\n\t\t\t\tif (win.canSnapToWindow(this.moveRequest)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparams.opacity = 1;\n\t\t\twin.setOpacity(params);\n\t\t}\n\t}\n\n\t/**\n\t * Happens when config is loaded from the configClient.\n\t */\n\tsetGlobalMinimums(serviceConfig) {\n\t\tMINIMUM_HEIGHT = serviceConfig.MINIMUM_HEIGHT;\n\t\tMINIMUM_WIDTH = serviceConfig.MINIMUM_WIDTH;\n\t\t//@todo, set minimums on all windows.\n\t\tthis.MINIMUM_HEIGHT = serviceConfig.MINIMUM_HEIGHT;\n\t\tthis.MINIMUM_WIDTH = serviceConfig.MINIMUM_WIDTH;\n\t\tlet groups = this.getGroupNames();\n\n\t\tgroups.forEach(name => {\n\t\t\tlet group = this.getGroup(name);\n\t\t\tgroup.setMinimums(serviceConfig);\n\t\t});\n\t}\n\n\t/****************************************\n\t *\t\t\tCalculators - general\t\t*\n\t****************************************/\n\t/**\n\t* Given an object, will set boundingboxes on it. If it's a dockableWindow, it'll let the window set itself up.\n\t* @param  {dockableWindow} win\n\t* @return {type}\n\t*/\n\tsetBoundingBoxes(win) {\n\n\t\tif (win.setBoundingBoxes) {\n\t\t\twin.setBoundingBoxes();\n\t\t} else {\n\t\t\twin.buffer = this.getBuffer(win);\n\t\t\twin.snappingRegions = BoxMath.getSnappingRegions(win, this.bufferSize);\n\t\t\twin.windowBoundingBox = BoxMath.getWindowBoundingBox(win);\n\t\t\twin.innerBuffer = this.getInnerBoundingBox(win);\n\t\t}\n\t\treturn win;\n\t}\n\n\t/**\n\t * Returns the difference between the movingWindow's location and the requested movement.\n\t* @param  {moveRequest} moveRequest\n\t* @return {type}\n\t*/\n\tgetMoveDelta(moveRequest, oldBounds) {\n\t\tvar movingWin = oldBounds || this.getWindow(moveRequest.name);\n\t\tvar delta = {\n\t\t\tx: moveRequest.left - movingWin.left,\n\t\t\ty: moveRequest.top - movingWin.top\n\t\t};\n\t\treturn delta;\n\t}\n\n\t/**\n\t* Returns the inner bounds. We use this to give the windows some internal stickiness.\n\t* @param  {type} bounds\n\t* @return {object}\n\t*/\n\tgetInnerBoundingBox(bounds) {\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: bounds.left + this.bufferSize,\n\t\t\t\ty: bounds.top + this.bufferSize\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: bounds.right - this.bufferSize,\n\t\t\t\ty: bounds.bottom - this.bufferSize\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t* Gets the snapping buffer of a request.\n\t* @param  {type} request\n\t* @return {type}\n\t*/\n\tgetBuffer(request) {\n\t\treturn {\n\t\t\tmin: {\n\t\t\t\tx: request.left - this.bufferSize,\n\t\t\t\ty: request.top - this.bufferSize\n\t\t\t},\n\t\t\tmax: {\n\t\t\t\tx: request.right + this.bufferSize,\n\t\t\t\ty: request.bottom + this.bufferSize\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t* Given a request, a window, and a region, it'll tell you whether they intersect. We use this to figure out which corner/edge to snap to.\n\t* @param  {moveRequest} moveRequest\n\t* @param  {dockableWindow} stationaryWindow\n\t* @param  {string} stationaryRegion\n\t* @return {object}\n\t*/\n\tgetIntersections(moveRequest, stationaryWindow, stationaryRegion) {\n\n\t\tvar movingBoundingBoxes = moveRequest.snappingRegions;\n\t\tvar stationaryBoundingBoxes = stationaryWindow.snappingRegions;\n\t\tvar intersections = [];\n\t\tfor (var movingRegion in movingBoundingBoxes) {\n\n\t\t\tif (movingRegion === \"inner\") { continue; }\n\t\t\tif (BoxMath.intersectBoundingBoxes(stationaryBoundingBoxes[stationaryRegion], movingBoundingBoxes[movingRegion])) {\n\t\t\t\tintersections.push(movingRegion);\n\t\t\t}\n\t\t}\n\t\treturn intersections;\n\t}\n\n\t/****************************************\n\t *\t\t\t\tIterators\t\t\t\t*\n\t****************************************/\n\t* groupWindowIterator(group, orderAnchor = this.movingWindow) { //TODO: move this into group so you can do group.windowIterator (also will help cleanup group.scale)\n\t\tlet windows = this.orderWindows(group.windows, orderAnchor);\n\t\t//preserves order..for .. in does not.\n\t\tfor (let i = 0; i < windows.length; i++) {\n\t\t\tyield windows[i];\n\t\t}\n\t}\n\n\tsetRouterClient(client) {\n\t\tthis.routerClient = client;\n\t}\n}\nexport default DockingCalculator;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockingCalculator.js","// Wanted to do ES6 export but that didn't work in current WP configurations, not sure why\nmodule.exports = {\n\tmouseDown,\n\tmousePosToBounds\n};\n// The following variables refers to last known state of\n// group mask, mouse down position and the resize object.\nlet oldBounds = null;\nlet resizeObject = null;\nlet mouseDownPosition = null;\n\n/**\n * Caches the passed 3 arguments which are the old and last known group mask bounds\n * the mouse down position and the resize object.\n * @param {object} initialBounds The current group mask bounds (width, height, top, left)\n * @param {object} mousePosition The onMouseDown mouse's position (top, left)\n * @param {object} resizeObj The resize object, we need from this object the movingEdges property\n * @returns {object}\n */\nfunction mouseDown(initialBounds, mousePosition, resizeObj) {\n\toldBounds = initialBounds;\n\tmouseDownPosition = mousePosition;\n\tresizeObject = resizeObj;\n\treturn {\n\t\toldBounds,\n\t\tmouseDownPosition,\n\t\tresizeObj\n\t};\n}\n/**\n * Takes the latest mouse position top and left and calculates where and how many pixels\n * should we shift the mask and return the newly calculated bounds as an object\n * @param {object} mousePosition The moveRequest's mousePosition (top and left)\n */\nfunction mousePosToBounds(mousePosition) {\n\t// We will use the next 2 variables to decide whether we are modifying the width\n\t// or height or both\n\tconst noHorResize = !resizeObject.movingEdges.left && !resizeObject.movingEdges.right;\n\tconst noVertResize = !resizeObject.movingEdges.top && !resizeObject.movingEdges.bottom;\n\tconst topPixels = mousePosition.y - mouseDownPosition.y;\n\tconst leftPixels = mousePosition.x - mouseDownPosition.x;\n\tconst bounds = {\n\t\twidth: oldBounds.width + (noHorResize ? 0 : leftPixels),\n\t\theight: oldBounds.height + (noVertResize ? 0 : topPixels),\n\t\ttop: oldBounds.top,\n\t\tleft: oldBounds.left,\n\t\tname: \"groupMask\"\n\t};\n\t// If we are changing the top position if the mask\n\t// we know this when movingEdges.top is true\n\tif(resizeObject.movingEdges.top) {\n\t\tbounds.top = bounds.top + topPixels;\n\t\tif(mousePosition.y > mouseDownPosition.y) {\n\t\t\t// If wondering why *2, its because we initially added those\n\t\t\t// pixels above, see const bounds = {}\n\t\t\tbounds.height = bounds.height - Math.abs(topPixels * 2);\n\t\t} else {\n\t\t\tbounds.height = bounds.height + Math.abs(topPixels * 2);\n\t\t}\n\t}\n\t// If we are changing the left position of the mask\n\t// we know this when movingEdges.left is true\n\tif(resizeObject.movingEdges.left) {\n\t\tbounds.left = bounds.left + leftPixels;\n\t\tif(mousePosition.x > mouseDownPosition.x) {\n\t\t\tbounds.width = bounds.width - Math.abs(leftPixels * 2);\n\t\t} else {\n\t\t\tbounds.width = bounds.width + Math.abs(leftPixels * 2);\n\t\t}\n\t}\n\t// Return newly calculated bounds\n\treturn bounds;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/maskBoundsCalculator.js","import { BaseService } from \"../baseService\";\nimport RouterClient from \"../../clients/routerClientInstance\";\nimport { series as asyncSeries } from \"async\";\nimport FSBLDepdendencyManager from \"../../common/dependencyManager\";\nimport DistributedStoreClient from \"../../clients/distributedStoreClient\";\nimport DockingMain from \"./Docking/dockingMain\";\nimport { Launcher } from \"./Launcher/launcher\";\nimport { ServiceEntryPoints as SetupAllEntryPoints } from \"./ServiceEntryPoints/setupAllEntryPoints\";\nimport StackedWindowManager from \"./StackedWindowManager/stackedWindowManager\";\n\nDistributedStoreClient.initialize();\n\nimport ConfigClient from \"../../clients/configClient\";\nConfigClient.initialize();\n\nimport Logger from \"../../clients/logger\";\nLogger.start();\n\nclass WindowService extends BaseService {\n\tconstructor(params) {\n\t\tparams.name = \"windowService\";\n\t\tsuper(params);\n\t\tthis.params = params;\n\t\tthis.doShutdown = this.doShutdown.bind(this);\n\t\tthis.onShutdown(this.doShutdown);\n\t}\n\n\tinitialize(manifest, callback) {\n\t\tLogger.system.debug(\"WindowService.initialize start\");\n\n\t\twindow.RouterClient = RouterClient;\n\n\t\twindow.stackedWindowManager = StackedWindowManager;\n\t\twindow.stackedWindowManager.initialize(manifest.finsemble); // pass in available config so stacked window has on startup (without having to query)\n\n\t\tlet dockingMain = new DockingMain(this.params, {\n\t\t\tLogger\n\t\t});\n\t\twindow.DockingMain = dockingMain;\n\n\t\tlet launcher = new Launcher(manifest, stackedWindowManager);\n\t\twindow.launcher = launcher;\n\n\t\t// setup external interfaces (i.e. the API supported by the window service)\n\t\tlet setupAllEntryPoints = new SetupAllEntryPoints(manifest, dockingMain, launcher, window.stackedWindowManager);\n\t\twindow.setupAllEntryPoints = setupAllEntryPoints;\n\n\t\t// an ordered initialization -- on completion the window service is ready\n\t\tasyncSeries([\n\t\t\t(done) => { dockingMain.initialize(done); },\n\t\t\t(done) => { launcher.initialize(done); },\n\t\t\t(done) => { setupAllEntryPoints.initialize(done); }\n\t\t], callback);\n\t}\n\n\t// This method handles the shutdown sequence for the launcherService. TODO: this currently doesn't finish preventing the service from shutting down\n\tdoShutdown() {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tasyncSeries([\n\t\t\t\t(done) => { window.setupAllEntryPoints.shutdown(done); },\n\t\t\t\t(done) => { window.launcher.shutdown(done); },\n\t\t\t\t(done) => { window.setupAllEntryPoints.shutdown(done); },\n\t\t\t\tresolve\n\t\t\t]);\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n}\n\nvar serviceInstance = new WindowService({\n\tname: \"windowService\",\n\tstartupDependencies: {\n\t\tservices: [],\n\t\tclients: [\"configClient\", \"distributedStoreClient\"]\n\t},\n\taddOFWrapper: false\n});\n\nserviceInstance.onBaseServiceReady(function (callback) {\n\tConfigClient.getValues(null, (err, manifest) => {\n\t\tserviceInstance.initialize(manifest, callback);\n\t});\n});\n\nwindow.WindowService = serviceInstance;\nserviceInstance.start();\n\nexport default serviceInstance;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/windowService.js","/**\n * The system needs to use certain functionality on windows that aren't managed by the window service. This code lives inside of the old 'docking' code, which operates on dockableWindows. For windows that aren't managed by the window service, we need to create a functional interface so that we don't have to rewrite all that code. This is used in getMonitorForWindow. Given an object with a name and some bounds, it'll create a dummy object that won't throw errors when we try to operate on it.\n */\nexport class MockDockableWindow {\n\tname: string;\n\tleft: number;\n\tright: number;\n\ttop: number;\n\tbottom: number;\n\twidth: number;\n\theight: number;\n\n\tconstructor(params) {\n\t\tif (!params || !params.name) throw new Error(\"No params passed to MockDockableWindow.\");\n\t\tthis.name = params.name;\n\t\tthis.left = params.left;\n\t\tthis.top = params.top;\n\t\tthis.right = params.right;\n\t\tthis.bottom = params.bottom;\n\t\tthis.width = params.width;\n\t\tthis.height = params.height;\n\t}\n\n\tgetBounds = () => {\n\t\treturn {\n\t\t\tleft: this.left,\n\t\t\ttop: this.top,\n\t\t\tright: this.right,\n\t\t\tbottom: this.bottom,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t};\n\t};\n}\n\n\n// WEBPACK FOOTER //\n// src/services/window/Common/MockDockableWindow.ts","import * as util from \"../../../common/util\";\nimport merge = require(\"deepmerge\");\nimport { WindowDescriptor } from \"./types\";\nimport Logger from \"../../../clients/logger\";\n\nexport default {\t/**\n\t* If the component has a security policy specified, we check to see that it exists.\n\t* If it does, we return that.\n\t* If not, we return the default security policy based on whether it's same or cross domain.\n\t* @param descriptor\n\t*/\n\tgetSecurityPolicy(descriptor: WindowDescriptor, finsembleConfig) {\n\t\tlet policyDefinedPermissions = null;\n\t\tif (descriptor.securityPolicy) {\n\t\t\tpolicyDefinedPermissions = finsembleConfig.securityPolicies[descriptor.securityPolicy];\n\t\t\tif (policyDefinedPermissions) {\n\t\t\t\treturn descriptor.securityPolicy;\n\t\t\t}\n\t\t}\n\n\t\t// If we make it down here, either the component doesn't have a security policy or\n\t\t// the policy that the component wants to use is not part of our config.\n\t\t// Below, we decide which policy we should apply for the component.\n\t\tconst isCrossDomain = util.crossDomain(descriptor.url);\n\t\tlet policy = finsembleConfig.securityPolicyRules.sameDomain;\n\t\tif (isCrossDomain) {\n\t\t\tpolicy = finsembleConfig.securityPolicyRules.crossDomain;\n\t\t}\n\n\t\t// Notify the dev that the policy that they want to use is undefined.\n\t\tif (!policyDefinedPermissions && descriptor.securityPolicy) {\n\t\t\tLogger.system.error(`Security policy ${descriptor.securityPolicy} not found. Defaulting to ${policy}`)\n\t\t}\n\t\treturn policy;\n\t},\n\n\t/**\n\t * Returns a permissions object with information expected in the e2o layer.\n\t * This will go grab the set of permissions defined by the security policy.\n\t * Afterwards, it will apply any specific permissions that the component has on it.\n\t * It will not allow _more permissive_ permissions to be set.\n\t *\n\t * If the policy says System.exist is not allowed, but the component says that it is,\n\t * this function will return a set of permissions where System.exit is false.\n\t * @param descriptor\n\t */\n\tgetPermissions(descriptor: WindowDescriptor, finsembleConfig) {\n\t\t// Default object with no permissions. If there's a security policy, we'll grab the permissions from config and feed them down to e2o.\n\t\tlet approvedPermissions = {\n\t\t\tSystem: {},\n\t\t\tWindow: {},\n\t\t\tApplication: {}\n\t\t};\n\t\tlet requestedPermissions = {};\n\n\t\t// If the dev has set up this component with explicit permissions, we assign those. Any permission that is\n\t\t// defined on the security policy will overwrite component-specific permissions.\n\t\ttry {\n\t\t\trequestedPermissions = JSON.parse(JSON.stringify(descriptor.permissions));\n\t\t} catch (e) {\n\t\t\trequestedPermissions = {};\n\t\t}\n\n\t\tapprovedPermissions = merge(approvedPermissions, requestedPermissions);\n\n\t\t// finsembleConfig.securityPolicies will always exist. Defaults are exported from finsemble core.\n\t\tconst securityPolicy = finsembleConfig.securityPolicies[descriptor.securityPolicy];\n\n\t\t// This should always be defined in the normal course of the program executing. Prior to calling getPermissions,\n\t\t// we call getSecurityPolicy. That method will assign a policy if the one that the dev supplies doesn't exist.\n\t\t// This check is here in case we do unit testing in the future.\n\t\tif (securityPolicy) {\n\t\t\t// this will be something like Application, Window, System.\n\t\t\tconst namespaces = Object.keys(securityPolicy);\n\n\t\t\t// go through the permissions enumerated in the security policy and apply what the component requests,\n\t\t\t// unless it conflicts with the default security policy for this component.\n\t\t\tfor (let i = 0; i < namespaces.length; i++) {\n\t\t\t\tconst namespace = namespaces[i];\n\t\t\t\tconst namespacePermissions = Object.keys(securityPolicy[namespace]);\n\t\t\t\t// Component permissions are a subset of system permissions. They do not have to specify anything for System, Window, or Application.\n\t\t\t\tif (!approvedPermissions[namespace]) approvedPermissions[namespace] = {};\n\n\t\t\t\tfor (let p = 0; p < namespacePermissions.length; p++) {\n\t\t\t\t\tconst permissionName = namespacePermissions[p];\n\t\t\t\t\tconst defaultPermission = securityPolicy[namespace][permissionName];\n\n\t\t\t\t\t// approvedPermissions is the merged object of defaults and what was requested by the component's config.\n\t\t\t\t\tlet assignedPermission = approvedPermissions[namespace][permissionName];\n\n\t\t\t\t\tif (assignedPermission) {\n\t\t\t\t\t\t// If the component wants to have access to something that the security policy says\n\t\t\t\t\t\t// that it can't, we deny access.\n\t\t\t\t\t\t// Component permissions can only be _more_ restrictive, not less.\n\t\t\t\t\t\t// @NOTE: Only did === false for clarity. Makes the chunk below much more clear.\n\t\t\t\t\t\tif (defaultPermission === false) {\n\t\t\t\t\t\t\tassignedPermission = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof assignedPermission === \"undefined\") {\n\t\t\t\t\t\t// if the component doesn't specify whether they want access, fall back to whatever the system says should happen.\n\t\t\t\t\t\tassignedPermission = defaultPermission;\n\t\t\t\t\t}\n\t\t\t\t\tapprovedPermissions[namespace][permissionName] = assignedPermission;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// The Window Service should not have a permission set to disable the ability to close windows.\n\t\t// If it does remove that permission, and log an error.\n\t\tconst closeDisallowed = approvedPermissions.Window[\"close\"] === false;\n\t\tif (descriptor.name === \"windowService\" && closeDisallowed) {\n\t\t\tLogger.system.error(\"Window Service cannot be restricted from closing windows, disabling restriction.\")\n\t\t\tapprovedPermissions.Window[\"close\"] = true;\n\t\t}\n\t\treturn approvedPermissions;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/Common/spawnUtils.ts","import { clone, checkIfBoundsAreEqual } from '../../../common/disentangledUtils';\nimport { isEqual as deepEqual } from \"lodash\";\nimport { adjustBoundsToBeOnMonitor } from \"../../../common/util\";\nimport Logger from \"../../../clients/logger\";\nLogger.start();\n\n\n/**\n * Monitors from the OS do not know about claimed space. Here, we add the unclaimedRect to the monitor.\n */\nexport function addUnclaimedRectToRawMonitor(newMonitors) {\n\tlet adjustedMonitors = [];\n\tfor (let i = 0; i < newMonitors.length; i++) {\n\t\tlet newMonitor = newMonitors[i];\n\t\tnewMonitor.unclaimedRect = clone(newMonitor.availableRect, Logger.system.error);\n\t\tadjustedMonitors.push(newMonitor);\n\t}\n\treturn adjustedMonitors;\n}\n\n/**\n * 1. Ask the system where the window is.\n * 2. Make sure that position is on a monitor.\n * 3. If the window has moved, return an object describing the new position for the window. Otherwise return null\n * @param params - Object containing a dockable window and a moveable Group for that window if it exists\n */\nexport function deriveWindowPosition(params) {\n\tconst { win, movableGroup } = params;\n\tlet retryCount = 0;\n\tconst retryLimit = 3;\n\tconst derivePositionFromBounds = (result) => {\n\t\tlet derivedPosition;\n\t\tlet bounds = result.data;\n\t\tlet oldBounds = win.getBounds();\n\t\t//Make sure the new bounds are on a monitor. The OS will normally move a window on monitor, but there are a few cases such as RDP where that doesn't always happen\n\t\tlet adjustedBounds = adjustBoundsToBeOnMonitor(bounds);\n\n\t\t//if the old position is the same as the new position, the window didn't move, no need to update.\n\t\t// Docked windows are an exception as we need to verify they are an an edge to a monitor and are claiming space properly\n\t\tif (checkIfBoundsAreEqual(oldBounds, adjustedBounds) && !win.isDocked) return null;\n\n\t\tLogger.system.verbose(`Monitors-changed: window ${win.name} old and new bounds don't match, will update bounds. New bounds: ${JSON.stringify(adjustedBounds)}, old bounds: ${JSON.stringify(oldBounds)}`);\n\n\t\t// If the window is dockable then the width and height should not change.\n\t\t// Currently only applies to the toolbar\n\t\tif (win.isDockableComponent) {\n\t\t\tderivedPosition = {\n\t\t\t\tname: win.name,\n\t\t\t\tisDockable: win.isDockableComponent,\n\t\t\t\tisDocked: win.isDocked,\n\t\t\t\tbounds: {\n\t\t\t\t\tleft: adjustedBounds.left,\n\t\t\t\t\ttop: adjustedBounds.top,\n\t\t\t\t\theight: win.height,\n\t\t\t\t\tbottom: adjustedBounds.top + win.height,\n\t\t\t\t\twidth: win.width\n\t\t\t\t},\n\t\t\t\tgroupName: null\n\t\t\t}\n\t\t\tLogger.system.verbose(`Monitors-changed: Setting bounds for dockable window, these bounds will get overwritten if the window is docked: ${win.name} Bounds: ${JSON.stringify(derivedPosition.bounds)}`);\n\t\t} else {\n\t\t\t// Create a move object with information for each non-dockable window containing: updated bounds from the system, group membership and docking status\n\t\t\t// This object will be used later to move the window\n\t\t\tderivedPosition = {\n\t\t\t\tname: win.name,\n\t\t\t\tbounds: { ...adjustedBounds },\n\t\t\t\tgroupName: movableGroup ? movableGroup.name : null,\n\t\t\t\tisDockable: false,\n\t\t\t\tisDocked: win.isDocked\n\t\t\t}\n\t\t\tif (derivedPosition.groupName) {\n\t\t\t\tLogger.system.verbose(`Monitors-changed: group move storing bounds for ${win.name} in group ${movableGroup.name}. ${derivedPosition}`);\n\t\t\t}\n\t\t}\t\n\t\treturn derivedPosition;\n\t};\n\n\t// Try to get valid bounds a few times. If valid bounds can't be returned, don't move this window.\n\t// Native windows will return an error if the bounds are requested when hidden or minimized. No hidden or minimized windows should make it to\n\t// this point; however, if they do we don't want to move any hidden windows.\n\tconst getBoundsAndRetry = (resolve, reject) => {\t\t\n\t\tif (retryCount >= retryLimit) {\n\t\t\tLogger.system.error(`Monitors-changed Failed to get valid bounds for ${win.name} after trying ${retryLimit} times. Window will not be moved`);\n\t\t\treturn resolve(null)\n\t\t}\n\t\twin.win._getBoundsFromSystem()\n\t\t\t.then((response) => {\n\t\t\t\tif (response.err) {\n\t\t\t\t\tretryCount++;\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tgetBoundsAndRetry(resolve, reject);\n\t\t\t\t\t}, retryCount * 100);\n\t\t\t\t} else {\n\t\t\t\t\treturn resolve(derivePositionFromBounds(response))\n\t\t\t\t}\n\t\t\t})\n\n\t}\n\treturn new Promise((resolve, reject) => {\n\t\tgetBoundsAndRetry(resolve, reject);\n\t})\n}\n/**\n * Given a list of moves, will return an object for groups, and an array for non group moves.\n * These are split out because groups are handled differently, and we want docked windows to\n * be moved last (to prevent claimed space conflicts).\n * @param moveList\n */\nexport function splitWindowMoves(moveList) {\n\tconst groupMoves = {};\n\tconst nonGroupMoves = [];\n\tmoveList\n\t\t// remove any null moves (e.g., windows whose position is unchanged).\n\t\t.filter(a => a)\n\t\t.forEach(boundsObject => {\n\t\t\t// Docked windows are handled elsewhere\n\t\t\tif (boundsObject.isDocked) { return; }\n\t\t\tconst { groupName } = boundsObject;\n\t\t\tif (groupName) {\n\t\t\t\t// if there are no moves cached for this group, make it an empty array\n\t\t\t\tif (!groupMoves[groupName]) groupMoves[groupName] = [];\n\t\t\t\tgroupMoves[groupName].push(boundsObject);\n\t\t\t} else {\n\t\t\t\tnonGroupMoves.push(boundsObject);\n\t\t\t}\n\t\t});\n\treturn { groupMoves, nonGroupMoves };\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/Docking/monitorUpdateHandler.ts","export default function LauncherDefaults() {\n\t// We must provide a clean slate of properties otherwise new windows will spawn with the same\n\t// properties as the main window (from the openfin manifest). Here we set reasonable defaults\n\t// for every window. We allow some properties to carry through from the manifest (such as cornerRounding).\n\t//\n\t// A developer can then override any of *these* values by specifying an \"options\" entry in the component\n\t// config, or by passing an \"options\" argument to spawn().\n\tthis.windowDescriptor = {\n\t\talias: \"\",\n\t\tpath: \"\",\n\t\targuments: \"\",\n\t\tautoShow: true,\n\t\tbackgroundColor: \"#151f28\",\n\t\talwaysOnTop: false,\n\t\tfixedPosition: false,\n\t\tframe: false,\n\t\tframeConnect: \"\",\n\t\thoverFocus: false,\n\t\tdefaultCentered: false,\n\t\tmaxHeight: -1,\n\t\tmaximizable: true,\n\t\tmaxWidth: -1,\n\t\tminHeight: 0,\n\t\tminimizable: true,\n\t\tminWidth: 0,\n\t\topacity: 1,\n\t\tresizable: true,\n\t\tcontextMenu: false,\n\t\tresizeRegion: {\n\t\t\tsize: 5,\n\t\t\tbottomCorner: 10\n\t\t},\n\t\tsaveWindowState: false,\n\t\tshowTaskbarIcon: true,\n\t\tstate: \"normal\",\n\t\twaitForPageLoad: false,\n\t\taccelerator: {\n\t\t\tdevtools: true,\n\t\t\treload: true,\n\t\t\tzoom: false,\n\t\t\treloadIgnoringCache: true\n\t\t},\n\t\t//so that child-apps inherit taskbar icon from the main application. This prevents apps (eg, symphony) from showing up as the taskbar icon.\n\t\ticon: null,\n\t\tcustomData: {\n\t\t\tcomponent: {\n\t\t\t\ttype: \"\",\n\t\t\t\tcanMinimize: true,\n\t\t\t\tcanMaximize: true\n\t\t\t},\n\t\t\tforeign: {\n\t\t\t\tservices: {\n\t\t\t\t\tdockingService: {\n\t\t\t\t\t\tisArrangable: false\n\t\t\t\t\t},\n\n\t\t\t\t\tlauncherService: {\n\t\t\t\t\t\tinject: false\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcomponents: {\n\t\t\t\t\t\"App Launcher\": {\n\t\t\t\t\t\tlaunchableByUser: true\n\t\t\t\t\t},\n\t\t\t\t\t\"Window Manager\": {\n\t\t\t\t\t\tpersistWindowState: true,\n\t\t\t\t\t\tFSBLHeader: true,\n\t\t\t\t\t\tshowLinker: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// A default manifest\n\tthis.componentDescriptor = {\n\t\t\"window\": {\n\t\t\t\"url\": \"about:blank\",\n\t\t\t\"frame\": false,\n\t\t\t\"resizable\": true,\n\t\t\t\"autoShow\": true,\n\t\t\t\"top\": \"center\",\n\t\t\t\"left\": \"center\",\n\t\t\t\"width\": 400,\n\t\t\t\"height\": 432,\n\t\t\t\"addToWorkspace\": true\n\t\t},\n\t\t\"component\": {\n\t\t\t\"inject\": false,\n\t\t\t\"spawnOnStartup\": false,\n\t\t},\n\t\t\"foreign\": {\n\t\t\t\"services\": {\n\t\t\t\t\"dockingService\": {\n\t\t\t\t\t\"canGroup\": true,\n\t\t\t\t\t\"isArrangable\": true\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"components\": {\n\t\t\t\t\"App Launcher\": {\n\t\t\t\t\t\"launchableByUser\": true\n\t\t\t\t},\n\t\t\t\t\"Window Manager\": {\n\t\t\t\t\t\"showLinker\": true,\n\t\t\t\t\t\"FSBLHeader\": true,\n\t\t\t\t\t\"persistWindowState\": true,\n\t\t\t\t\t\"title\": \"Welcome\"\n\t\t\t\t},\n\t\t\t\t\"Toolbar\": {\n\t\t\t\t\t\"iconClass\": \"ff-component\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\nexport const UNKNOWN_DEFAULT_CONFIG = {\n\twindow: {\n\t\turl: \"about:blank\",\n\t\tframe: false,\n\t\tresizable: true,\n\t\tautoShow: true,\n\t\ttop: \"center\",\n\t\tleft: \"center\",\n\t\twidth: 400,\n\t\theight: 432,\n\t\taddToWorkspace: false,\n\t},\n\tcomponent: {\n\t\tinject: false,\n\t\tspawnOnStartup: false,\n\t},\n\tforeign: {\n\t\tservices: {\n\t\t\tdockingService: {\n\t\t\t\tcanGroup: true,\n\t\t\t\tisArrangable: true\n\t\t\t}\n\t\t},\n\t\tcomponents: {\n\t\t\t\"App Launcher\": {\n\t\t\t\tlaunchableByUser: true\n\t\t\t},\n\t\t\t\"Window Manager\": {\n\t\t\t\tshowLinker: true,\n\t\t\t\tFSBLHeader: true,\n\t\t\t\tpersistWindowState: true,\n\t\t\t\ttitle: \"Welcome\"\n\t\t\t},\n\t\t\tToolbar: {\n\t\t\t\ticonClass: \"ff-component\"\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// WEBPACK FOOTER //\n// src/services/window/Launcher/LauncherDefaults.ts","import RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\n\nclass WrapManagerSingleton {\n\twraps: object;\n\n\tconstructor() {\n\t\tthis.wraps = {};\n\t}\n\tadd(params: { windowIdentifier: WindowIdentifier, windowDescriptor: any }) {\n\t\tlet { windowIdentifier, windowDescriptor } = params;\n\t\tif (!windowIdentifier.uuid && windowDescriptor.uuid) {\n\t\t\twindowIdentifier.uuid = windowDescriptor.uuid;\n\t\t}\n\t\tthis.wraps[windowIdentifier.windowName] = {\n\t\t\tidentifier: windowIdentifier,\n\t\t\tdescriptor: windowDescriptor,\n\t\t\towners: []\n\t\t};\n\t\tLogger.system.debug(\"WRAP. adding window\", windowIdentifier.windowName);\n\t\tRouterClient.publish(\"Finsemble.\" + windowIdentifier.windowName + \".wrapReady\", { name: windowIdentifier.windowName, state: \"open\" });\n\t}\n\n\tget(params: { windowName: string, requester: string }, cb: Function = Function.prototype) {\n\t\tlet { windowName, requester } = params;\n\t\tlet wrap = this.wraps[windowName];\n\t\tlet err = null;\n\t\tLogger.system.debug(\"WRAP. wrap requested from\", requester, \"for\", windowName);\n\t\tif (wrap) {\n\t\t\tif (!wrap.owners.includes(requester)) wrap.owners.push(requester);\n\t\t} else {\n\t\t\terr = `No wrap found for ${windowName}`;\n\t\t\tLogger.system.error(\"WRAPMANAGER.get Error\", err, requester, \"for\", windowName);\n\t\t}\n\t\tcb(err, wrap);\n\t\treturn Promise.resolve({ err, data: wrap });\n\t}\n\n\tremove(params: { identifier: WindowIdentifier }, cb) {\n\t\tlet { identifier } = params;\n\t\tlet requestCleanup = (owner, done) => {\n\t\t\tLogger.system.debug(\"WRAP. requesting cleanup from\", owner, \"for\", identifier.windowName);\n\t\t\t//shortcut. when a window closes we should remove it from any list where it's an owner.\n\t\t\t//can ignore all that aren't services once this work.\n\t\t\tRouterClient.publish(\"Finsemble.\" + identifier.windowName + \".wrapReady\", { name: identifier.windowName, state: \"closed\" });\n\n\t\t\treturn RouterClient.query(`${owner}.removeWrap.${identifier.windowName}`, { identifier }, () => {\n\t\t\t\tLogger.system.debug(\"WRAP. cleanup confirmed from\", owner, \"for\", identifier.windowName);\n\t\t\t\tdone();\n\t\t\t});\n\t\t};\n\t}\n\tsetUuid(name:string, uuid:string) {\n\t\tif (this.wraps[name]) {\n\t\t\tthis.wraps[name].identifier.uuid = uuid;\n\t\t\tthis.wraps[name].descriptor.uuid = uuid;\n\t\t} else {\n\t\t\tLogger.system.error(\"WrapManager.setUuid. Wrap not found for\", name);\n\t\t}\n\n\t}\n}\n\nexport let WrapManager: WrapManagerSingleton = new WrapManagerSingleton();\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/Launcher/WrapManager.ts","import RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\nimport { FinsembleWindowInternal } from \"../WindowAbstractions/FinsembleWindowInternal\";\n\nimport DistributedStoreClient from \"../../../clients/distributedStoreClient\";\nimport SplinterAgentPool from \"../Splintering/SplinterAgentPool\";\nimport { WrapManager as MyWrapManager } from \"./WrapManager\";\nimport { WindowPoolSingleton } from \"../Common/Pools/PoolSingletons\";\nimport { onSpawnRequest as SplinterAgentDoSpawnRequest } from \"../Splintering/SplinterAgentSlave\";\n\nimport { series as asyncSeries } from \"async\"\nimport * as util from \"../../../common/util\";\nimport { System } from \"../../../common/system\";\n\nexport class CreateSplinterAndInject {\n\tfinsembleConfig: any;\n\teventInterruptors: any;\n\tALLOW_SPLINTERING: boolean;\n\tmanifest: any;\n\tSplinterAgentPool: any;\n\twindowStore: any;\n\tstackedWindowManager: any;\n\n\tconstructor(manifest, stackedWindowManager) {\n\t\tthis.manifest = manifest;\n\t\tthis.stackedWindowManager = stackedWindowManager;\n\t\tthis.finsembleConfig = manifest.finsemble;\n\t\tthis.bindAllFunctions();\n\t\tthis.eventInterruptors = {};\n\t}\n\n\tinitialize(callback = Function.prototype) {\n\t\tconst initializePromiseResolver = async (resolve) => {\n\t\t\tawait this.processConfig();\n\t\t\tawait this.createStores();\n\t\t\tawait this.createSplinterAgentPool();\n\t\t\tresolve();\n\t\t\tcallback();\n\t\t}\n\t\treturn new Promise(initializePromiseResolver);\n\t}\n\n\twindowServiceChannelName(channelTopic) { return `WindowService-Request-${channelTopic}`; }\n\n\tbindAllFunctions() {\n\t\tlet self = this;\n\t\tfor (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {\n\t\t\tif (self[name] instanceof Function) {\n\t\t\t\tself[name] = self[name].bind(self); // only bind function properties\n\t\t\t}\n\t\t}\n\t}\n\n\t// invoked by serviceEntryPoint shutdown\n\tshutdown(done) {\n\t\tthis.shutdownSplinterAgentPool(done);\n\t}\n\n\tasync createWindow(params, callback = Function.prototype) {\n\t\tvar realWindowIdentifier;\n\t\tvar wrapState: WrapState;\n\n\t\tLogger.system.debug(`CreateSplinterAndInject.createWindow for ${params.windowDescriptor.name}`, params);\n\n\t\tlet { windowDescriptor } = params;\n\t\tif (!windowDescriptor) {\n\t\t\tLogger.system.error(`no windowDescriptor for WindowService-Request.createWindow`);\n\t\t}\n\n\t\tlet { err, windowIdentifier } = await this.doSpawn(windowDescriptor);\n\n\t\tif (err) {\n\t\t\tLogger.system.error(\"COMPONENT LIFECYCLE: createWindow error: \", err);\n\t\t\tcallback(err);\n\t\t} else {\n\t\t\trealWindowIdentifier = {\n\t\t\t\tname: windowIdentifier.name,\n\t\t\t\twindowName: windowIdentifier.windowName,\n\t\t\t\tuuid: windowIdentifier.uuid,\n\t\t\t}\n\n\t\t\twrapState = \"created\";\n\t\t\tLogger.system.log(\"COMPONENT LIFECYCLE: STATE CHANGE: \", wrapState, windowIdentifier.windowName);\n\t\t\tRouterClient.publish(\"Finsemble.Component.State.\" + windowIdentifier.windowName, { state: wrapState });\n\n\t\t\tlet { wrap } = await FinsembleWindowInternal.getInstance({ waitForReady: false, name: realWindowIdentifier.name || realWindowIdentifier.windowName });\n\t\t\tWindowPoolSingleton.add(windowIdentifier.name, wrap);\n\n\t\t\twrapState = \"ready\";\n\t\t\tLogger.system.log(\"COMPONENT LIFECYCLE: STATE CHANGE: \", wrapState, windowIdentifier.name);\n\t\t\tRouterClient.publish(\"Finsemble.Component.State.\" + windowIdentifier.name, { state: wrapState });\n\t\t}\n\t\tcallback(err, realWindowIdentifier);\n\t}\n\n\t// probably only a temporary routine -- currently supports public wrapper\n\tasync getWindowIdentifier(params, callback) {\n\t\tLogger.system.debug(`\"CreateSplinterAndInject.getWindowIdentifier for  ${params.windowName}`, params);\n\t\tlet { err, data } = await MyWrapManager.get(params);\n\t\tcallback(err, data);\n\t}\n\n\t// may replace with preload\n\tasync injectTitleBar(params, callback) {\n\t\tLogger.system.debug(`\"CreateSplinterAndInject.injectTitleBar ${params.config.name}`, params);\n\t\tthis.doTitleBarInjection(params, function (err, data) {\n\t\t\tcallback(err, data);\n\t\t});\n\t}\n\n\tdoTitleBarInjection(data, cb) {\n\t\tvar config = data.config.customData; //why?\n\t\tvar component = data.titleComponent;\n\t\tvar win: any = System.Window.wrap(data.config.uuid || data.config.windowIdentifier.uuid, data.config.name || data.config.windowIdentifier.name); //TODO: need to figure out why this differs\n\t\t//var baseURL = finsembleConfig.moduleRoot;\n\t\tvar request = new XMLHttpRequest();\n\t\tconst onReadyStateChange = function () {\n\t\t\tif (request.readyState === 4) {\n\t\t\t\tconst execJsSuccess = function () {\n\t\t\t\t\tLogger.system.debug(\"inject header successful\", component);\n\t\t\t\t\tcb();\n\t\t\t\t};\n\t\t\t\tconst execJsError = function (err) {\n\t\t\t\t\tvar errMsg = `inject header failed: ${err}  for ${component}`;\n\t\t\t\t\tLogger.system.error(errMsg);\n\t\t\t\t\tcb(errMsg);\n\t\t\t\t};\n\n\t\t\t\twin.executeJavaScript(request.responseText, execJsSuccess, execJsError);\n\t\t\t}\n\t\t};\n\n\t\tif (!config.window || !config.window.compound) { // why are we relying on the data for the config? we should already have the config here.\n\t\t\t// Inject the titlebar URL contents directly into the finWindow\n\t\t\t//request.open(\"GET\", Components[component].window.url, false);\n\t\t\tvar urlToInject = this.manifest.finsemble.components[component].window.url;\n\t\t\tLogger.system.debug(\"getting header to inject\", component, urlToInject);\n\t\t\trequest.open(\"GET\", urlToInject, false);\n\t\t\trequest.onreadystatechange = onReadyStateChange;\n\t\t\treturn request.send();\n\t\t}\n\t}\n\n\tasync processConfig() {\n\t\tLogger.system.debug(\"CreateSplinterAndInject.processConfig\");\n\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tvar splinteringConfig = this.finsembleConfig.splinteringConfig;\n\t\t\tlet { versionObject } = await util.getOpenfinVersion();\n\t\t\t//Due to a bug in chromium 53, we can't splinter _and_ spawn child windows (quickly) without crashing render processes. This was fixed somewhere between chromium 53 and 56, and the bug does not present in OF version 8.\n\t\t\tthis.ALLOW_SPLINTERING = versionObject.major > 7 && fin.container !== \"Electron\" && splinteringConfig.enabled;\n\t\t\tresolve();\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tcreateStores() { // TBD: is this store creation really needed?\n\t\tLogger.system.debug(\"CreateSplinterAndInject.createStores\");\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tLogger.system.debug(\"CreateSplinterAndInject: createGroupStore\");\n\t\t\tlet onStoreClientReady = async () => {\n\t\t\t\tconst { err: e2, data: windowStore } = await DistributedStoreClient.createStore({ store: \"Finsemble-Windows\", global: true });\n\t\t\t\tif (e2) return Logger.system.error(e2);\n\n\t\t\t\tthis.windowStore = windowStore;\n\t\t\t\tresolve();\n\t\t\t};\n\n\t\t\tDistributedStoreClient.onReady(onStoreClientReady);\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tdoSpawn(windowDescriptor: any): Promise<{ err: any, windowIdentifier: any }> {\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tconst window = windowDescriptor.customData.window;\n\t\t\tlet windowType = window.windowType;\n\n\t\t\t// Construct an object of values that may be used to calculate the windowType\n\t\t\tconst winConfig = {\n\t\t\t\twindowType: windowType,\n\t\t\t\tnative: window.native,\n\t\t\t\tcompound: window.compound,\n\t\t\t\ttype: windowDescriptor.type\n\t\t\t}\n\t\t\twindowType = util.getWindowType(winConfig);\n\t\t\tif (windowType == \"FinsembleNativeWindow\") {\n\t\t\t\twindowType = \"NativeWindow\";\n\t\t\t\twindowDescriptor.isWPF = true;\n\n\t\t\t\t// If running on Electron, Finsemble aware applications will need the IAC server address.\n\t\t\t\tconst iacConfig = this.finsembleConfig.IAC;\n\t\t\t\tif (iacConfig) {\n\t\t\t\t\t// If IAC config exists, pass it on to the window descriptor\n\t\t\t\t\twindowDescriptor.IAC = iacConfig;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twindowDescriptor.uuid = windowDescriptor.uuid || util.guuid(); // Temp fix for stackedWindow (whole section needs rework)\n\n\t\t\t// By default, any OpenFin windows that are opened cross-domain are opened as an \"application\" rather than a \"window\".\n\t\t\t// This forces OpenFin to recognize them as applications, and thus they will show up in process monitor.\n\t\t\t// If we don't do this, then chromium creates them as new applications under the sheets but they don't show up in process monitor.\n\t\t\t// A developer can set isolateCrossDomainComponents=false to override this behavior if for some reason they need to.\n\t\t\tvar dontIsolateCrossDomain = (this.finsembleConfig.isolateCrossDomainComponents === false);\n\t\t\tif (windowType === \"OpenFinWindow\" && !dontIsolateCrossDomain) {\n\t\t\t\t//Push cross domain windows into their own process.\n\t\t\t\tif (util.crossDomain(windowDescriptor.url)) {\n\t\t\t\t\twindowType = \"OpenFinApplication\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twindowDescriptor.windowType = windowType;\n\t\t\tLogger.system.debug(\"WindowService.doSpawn\", windowDescriptor, windowType);\n\t\t\t// Hack to get the wrap before it's ready. Added by ryan, commit d781a.\n\t\t\tlet result = {\n\t\t\t\twindowIdentifier: {\n\t\t\t\t\twindowName: windowDescriptor.name,\n\t\t\t\t\tuuid: windowDescriptor.uuid,\n\t\t\t\t\tcomponentType: windowDescriptor.componentType,\n\t\t\t\t\tmonitor: windowDescriptor.monitorInfo,\n\t\t\t\t\twindowType: windowDescriptor.windowType\n\t\t\t\t},\n\t\t\t\twindowDescriptor: windowDescriptor\n\t\t\t};\n\n\t\t\tMyWrapManager.add(result);\n\t\t\tLogger.system.debug(\"WindowService.doSpawn-time before\", windowType, windowDescriptor.name);\n\n\t\t\tswitch (windowType) {\n\t\t\t\tcase \"NativeWindow\":\n\t\t\t\t\tvar { data } = await this.spawnExternalWindow(windowDescriptor);\n\t\t\t\t\tMyWrapManager.setUuid(result.windowIdentifier.windowName, data.uuid);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"OpenFinWindow\":\n\t\t\t\t\tif (this.ALLOW_SPLINTERING) {\n\t\t\t\t\t\tLogger.system.debug(\"WindowService.doSpawn-time splinter\", windowType, windowDescriptor.name);\n\t\t\t\t\t\tvar { data } = await this.splinter(windowDescriptor);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar { data } = await this.spawnOpenFinWindow(windowDescriptor);\n\t\t\t\t\t}\n\t\t\t\t\tMyWrapManager.setUuid(result.windowIdentifier.windowName, data.uuid);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"OpenFinApplication\":\n\t\t\t\t\tvar { data } = await this.spawnOpenfinApplication(windowDescriptor);\n\t\t\t\t\tMyWrapManager.setUuid(result.windowIdentifier.windowName, data.uuid);\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"StackedWindow\":\n\t\t\t\t\tvar { data } = await this.spawnStackedWindow(windowDescriptor);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// makes sure both types of names are set -- will delete later after naming cleanup\n\t\t\tdata.name = data.name || data.windowName;\n\t\t\tdata.windowName = data.name;\n\n\t\t\tLogger.system.debug(\"WindowService.doSpawn-time end\", windowType, windowDescriptor.name, data);\n\n\t\t\tresolve({ err: null, windowIdentifier: data });\n\t\t}\n\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tspawnExternalWindow(windowDescriptor): Promise<{ err: any, data: any }> {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tfunction spawnedListener(err, response) {\n\t\t\t\tRouterClient.removeListener(windowDescriptor.name + \".onSpawned\", spawnedListener);\n\t\t\t\twindowDescriptor.uuid = response.data.uuid;\n\t\t\t\tlet fw = windowDescriptor;\n\t\t\t\t// @TODO, capture close event and remove from our activeWindows\n\t\t\t\tresolve({ err: null, data: fw });\n\t\t\t}\n\t\t\tRouterClient.addListener(windowDescriptor.name + \".onSpawned\", spawnedListener);\n\t\t\tRouterClient.query(\"Assimilation.spawnNative\", windowDescriptor, function() { });\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t// Spawns a java app.\n\tspawnNativeWindow(windowDescriptor): Promise<{ err: any, data: any }> {\n\t\tconst promiseResolver = (resolve) => {\n\n\t\t\tfunction spawnedListener(err, response) {\n\t\t\t\twindowDescriptor = Object.assign(windowDescriptor, response.data);\n\t\t\t\tRouterClient.removeListener(windowDescriptor.name + \".onSpawned\", spawnedListener);\n\t\t\t\t// @TODO, capture close event and remove from our activeWindows\n\t\t\t\tresolve({ err: null, data: windowDescriptor });\n\t\t\t}\n\n\t\t\tRouterClient.addListener(windowDescriptor.name + \".onSpawned\", spawnedListener);\n\t\t\tRouterClient.query(\"FinsembleNative.spawn\", windowDescriptor, (err, cb) => { });\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\n\t}\n\n\t// Spawns an OpenFin window\n\tspawnOpenFinWindow(windowDescriptor): Promise<{ err: any, data: any }> {\n\t\t// This will ensure that the window is actually opened before returning. Seemingly an OpenFin bug means we\n\t\t// can't rely on new System.Window callback. We believe this exhibits for cross-domain windows.\n\t\tconst promiseResolver = (resolve) => {\n\t\t\twindowDescriptor.taskbarIconGroup = windowDescriptor.external ? null : this.manifest.startup_app.uuid;\n\t\t\twindowDescriptor.icon = windowDescriptor.external ? null : this.manifest.startup_app.applicationIcon;\n\t\t\twindowDescriptor.uuid = windowDescriptor.uuid || System.Application.getCurrent().uuid;\n\t\t\tlet fw;\n\t\t\tlet spawnedListener = (err, response) => {\n\t\t\t\tif (!fw) {\n\t\t\t\t\tfw = System.Window.wrap(windowDescriptor.uuid, windowDescriptor.name);\n\t\t\t\t\tfw.addEventListener(\"closed\", () => {\n\t\t\t\t\t\tRouterClient.removeListener(windowDescriptor.name + \".onSpawned\", spawnedListener);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.injectMindControl(windowDescriptor, fw);\n\t\t\t\tresolve({ err: null, data: fw });\n\t\t\t}\n\n\t\t\tRouterClient.addListener(windowDescriptor.name + \".onSpawned\", spawnedListener);\n\t\t\tnew System.Window(windowDescriptor, function () { });\n\t\t};\n\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t// Spawns a new openfin application.\n\tspawnOpenfinApplication(componentConfig): Promise<{ err: any, data: any }> {\n\t\tlet descriptor = this.compileOpenfinApplicationDescriptor(componentConfig);\n\t\tconst self = this;\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tlet fw;\n\t\t\tconst onAppSpawned = () => {\n\t\t\t\tif (!fw) {\n\t\t\t\t\tfw = System.Window.wrap(descriptor.uuid, descriptor.name);\n\t\t\t\t\tfw.addEventListener(\"closed\", () => {\n\t\t\t\t\t\tRouterClient.removeListener(descriptor.name + \".onSpawned\", onAppSpawned);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tself.injectMindControl(descriptor, fw);\n\t\t\t\tresolve({ err: null, data: fw });\n\t\t\t};\n\n\t\t\tlet finApp = new System.Application(descriptor,\n\t\t\t\tfunction onAppCreated() {\n\t\t\t\t\tRouterClient.addListener(descriptor.name + \".onSpawned\", onAppSpawned);\n\t\t\t\t\t/** Because we mess with the `this` of System.Application,\n\t\t\t\t\t * the compiler gets confused, so we have to cast to the right thing.\n\t\t\t\t\t */\n\t\t\t\t\t(finApp as fin.OpenFinApplication).run();\n\t\t\t\t}, function createAppError(err) {\n\t\t\t\t\tLogger.system.error(\"Failed to create openfin Application\", err);\n\t\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tcompileOpenfinApplicationDescriptor(componentConfig) {\n\t\tcomponentConfig.uuid = componentConfig.name;\n\t\t// If a window is specified to have windowType 'application' or 'OpenfinApplication', it should be in an isolated\n\t\t// process. This means that it cannot have an affinity. If this line is removed, FEA thinks that the window is both\n\t\t// an application _and_ grouped with other windows in the same affinity. This causes all manner of strange bugs.\n\t\t// For example, if three components that are both windowType 'application', and in an affinity are spawned, and\n\t\t// one is closed, all 3 will be closed. Because each one _is_ the application...even though they're technically\n\t\t// _part_ of the application.\n\t\t// FEA has the same check in case someone circumvents the launcher API. But here, we delete affinity if it\n\t\t// exists to prevent these bugs from manifesting.\n\t\tif (componentConfig.affinity) {\n\t\t\tLogger.system.warn(\"Configuration Warning: Affinity will be ignored. Component was created with type 'application'.\")\n\t\t\tdelete componentConfig.affinity\n\t\t}\n\n\t\tlet descriptor = componentConfig;\n\t\tlet parentUUID = System.Application.getCurrent().uuid;\n\t\tif (!descriptor.customData) descriptor.customData = {};\n\t\tdescriptor.customData.parentUUID = parentUUID;\n\n\t\tdescriptor.parentUUID = parentUUID;\n\t\tif (descriptor.external) {\n\t\t\tdelete descriptor.preload;\n\t\t} else {\n\t\t\tdescriptor.taskbarIconGroup = this.manifest.startup_app.uuid;\n\t\t\t// descriptor.mainWindowOptions.preload = typeof descriptor.preload === 'undefined' ? finsembleConfig.finsembleLibraryPath : descriptor.preload;\n\t\t\tdescriptor.icon = this.manifest.startup_app.applicationIcon;\n\t\t}\n\t\treturn descriptor;\n\t}\n\n\t// Spawns a new StackedWindow (a virtual window holding \"tabbed\" windows)\n\tspawnStackedWindow(componentConfig, cb = Function.prototype): Promise<{ err: any, data: any }> {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\t//var stackedWindowIdentifer = { windowName: componentConfig.name, windowType: componentConfig.windowType, windowIdentifiers: componentConfig.windowIdentifiers || componentConfig.customData.spawnData.windowIdentifiers };\n\t\t\tLogger.system.debug(\"CreateSplinterAndInject.spawnStackedWindow\", componentConfig);\n\n\t\t\tthis.stackedWindowManager.createStackedWindow(componentConfig, (err, windowIdentifer) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.warn(\"StackedWindowManagerAPI.createStackedWindow: failed\", err);\n\t\t\t\t\tresolve({ err, data: null });\n\t\t\t\t\treturn cb(err, null);\n\t\t\t\t}\n\t\t\t\tLogger.system.debug(\"StackedWindowManagerAPI.createStackedWindow successful\", windowIdentifer);\n\t\t\t\tcb(err, windowIdentifer);\n\t\t\t\tresolve({ err, data: windowIdentifer });\n\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * The actual splinter method.\n\t * If a process is available and has room left for additional children, we request that the process fulfill the spawn request.\n\t * If there is no process available, we queue our spawn request. When the pool has created a new render process, we process the queue.\n\t */\n\tsplinter(windowDescriptor): Promise<{ err: any, data: any }> {\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\twindowDescriptor.taskbarIconGroup = windowDescriptor.external ? null : this.manifest.startup_app.uuid;\n\t\t\twindowDescriptor.icon = windowDescriptor.external ? null : this.manifest.startup_app.applicationIcon;\n\n\t\t\twindowDescriptor.uuid = windowDescriptor.uuid || System.Application.getCurrent().uuid;\n\t\t\tlet fw;\n\n\t\t\t// The onSpawned listener fires when the component is spawned and every time it navigates to a new page or reloads.\n\t\t\tlet spawnedListener = (err, response) => {\n\t\t\t\tif (!fw) {\n\t\t\t\t\tfw = System.Window.wrap(windowDescriptor.uuid, windowDescriptor.name);\n\t\t\t\t\tfw.addEventListener(\"closed\", () => {\n\t\t\t\t\t\tRouterClient.removeListener(windowDescriptor.name + \".onSpawned\", spawnedListener);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.injectMindControl(windowDescriptor, fw);\n\t\t\t\tresolve({ err: null, data: fw });\n\t\t\t}\n\n\t\t\tRouterClient.addListener(windowDescriptor.name + \".onSpawned\", spawnedListener);\n\n\t\t\t// In Electron environments, pool won't be defined.\n\t\t\tif (this.SplinterAgentPool) {\n\t\t\t\tthis.SplinterAgentPool.routeSpawnRequest(windowDescriptor); // sometimes fails here!!!!!!!!!!!!!!!\n\t\t\t} else {\n\t\t\t\t// Reassign manifest.finsemble to just a subset of its keys.\n\t\t\t\tconst { FinsembleUUID, applicationRoot, moduleRoot, router } = windowDescriptor.customData.manifest.finsemble;\n\t\t\t\twindowDescriptor.customData.manifest.finsemble = { FinsembleUUID, applicationRoot, moduleRoot, router };\n\n\t\t\t\t/** This method is borrowed from SplinterAgentSlave. It does some checks then calls new System.Window,\n\t\t\t\t * which calls through to the underlying container (OpenFin or Electron) to spawn the new window. */\n\t\t\t\tSplinterAgentDoSpawnRequest(null, { data: { windowDescriptor } }, this.manifest)\n\t\t\t}\n\n\t\t\t//this.injectMindControl(windowDescriptor, fw);\n\t\t\t//resolve({ err: null, data: fw });\n\t\t};\n\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t// This function is called when the LauncherService starts up. It pre-populates a single render process for each pool that's defined in the splinteringConfig.\n\tcreateSplinterAgentPool() {\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\t/** If we're running in Electron, splintering is not efficient, and is replaced instead with affinities, so\n\t\t\t * we short circuit splintering here.\n\t\t\t */\n\t\t\tif (fin.container === \"Electron\") {\n\t\t\t\tLogger.system.debug(\"CreateSplinterAndInject: Detected Electron environment. Short-circuiting splintering.\")\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar finsembleConfig = this.finsembleConfig;\n\t\t\tLogger.system.debug(\"CreateSplinterAndInject: createSplinterAgentPool\", finsembleConfig, this.ALLOW_SPLINTERING);\n\t\t\tif (this.ALLOW_SPLINTERING) {\n\t\t\t\tlet initialAgentList = finsembleConfig.splinteringConfig.splinterAgents.filter(agent => {\n\t\t\t\t\treturn agent.components && agent.components.length > 0;\n\t\t\t\t});\n\n\t\t\t\tlet poolConfig = {\n\t\t\t\t\tfinsembleConfig,\n\t\t\t\t\tagentList: initialAgentList,\n\t\t\t\t\tmanifest: this.manifest,\n\t\t\t\t\twindowStore: this.windowStore,\n\t\t\t\t\tmaxWindowsForDefaultAgent: finsembleConfig.splinteringConfig.maxWindowsForDefaultAgent,\n\t\t\t\t};\n\n\t\t\t\tthis.SplinterAgentPool = new SplinterAgentPool(poolConfig, resolve);\n\n\t\t\t\t// let onWindowRemoved = (descriptor) => {\n\t\t\t\t// \tself.remove(descriptor.name); //TBD\n\t\t\t\t// };\n\t\t\t\t// let onAddAgent = (agentName) => {\n\t\t\t\t// \tif (!self.agents) self.agents = {};\n\t\t\t\t// \tself.agents[agentName] = { lastHeartbeat: Date.now() };\n\t\t\t\t// };\n\n\t\t\t\t// let onAgentRemoved = (agentName) => {\n\t\t\t\t// \tdelete self.agents[agentName];\n\t\t\t\t// };\n\n\t\t\t\t//heartbeat listeners\n\t\t\t\t//this.SplinterAgentPool.on(\"windowRemoved\", onWindowRemoved);\n\t\t\t\t// this.SplinterAgentPool.on(\"addAgent\", onAddAgent);\n\t\t\t\t//this.SplinterAgentPool.on(\"processRemoved\", onAgentRemoved);\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tdoShutdown() {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tasyncSeries([\n\t\t\t\t(finish) => { this.shutdownSplinterAgentPool(finish); },\n\t\t\t\tresolve,\n\t\t\t]);\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tshutdownSplinterAgentPool(done) {\n\t\tif (this.SplinterAgentPool) {\n\t\t\tLogger.system.debug(\"shutdownSplinterAgentPoolFinished start SplinterAgentPool.shutdown\");\n\t\t\tthis.SplinterAgentPool.shutdown(() => {\n\t\t\t\tLogger.system.debug(\"shutdownSplinterAgentPoolFinished SplinterAgentPool.shutdown\");\n\t\t\t\tdone();\n\t\t\t});\n\t\t} else {\n\t\t\tdone();\n\t\t}\n\n\t}\n\n\t// Injects mind control scripts.\n\tinjectMindControl(data, win) {\n\t\tvar config = data.customData;\n\n\t\tif (config.component.inject) {\n\t\t\tvar inject = data.customData.component.inject;\n\t\t\tif (!Array.isArray(inject)) {\n\t\t\t\tinject = [inject];\n\t\t\t}\n\t\t\t//To allow for code splitting, we must also inject our vendor bundle.\n\t\t\tinject = [this.finsembleConfig.applicationRoot + \"/vendor.bundle.js\"].concat(inject);\n\t\t\tfor (let i = 0; i < inject.length; i++) {\n\t\t\t\tlet req = new XMLHttpRequest();\n\t\t\t\tconst onReadyStateChange = function () {\n\t\t\t\t\tif (req.readyState === 4) {\n\t\t\t\t\t\twin.executeJavaScript(req.responseText, function () {\n\t\t\t\t\t\t\tLogger.system.debug(inject + \" injected\");\n\t\t\t\t\t\t}, function () {\n\t\t\t\t\t\t\tLogger.system.error(data.customData.component.inject + \" injection failed\");\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttry {\n\t\t\t\t\tvar injectURL = new URL(inject[i]);\n\t\t\t\t\tinject[i] = injectURL.href;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tinject[i] = this.finsembleConfig.applicationRoot + \"/components/mindcontrol/\" + inject[i];\n\t\t\t\t}\n\t\t\t\treq.open(\"GET\", inject[i], false);\n\t\t\t\treq.onreadystatechange = onReadyStateChange;\n\t\t\t\ttry {\n\t\t\t\t\treq.send();// we were failing here which caused everything to fail.\n\t\t\t\t} catch (err) {\n\t\t\t\t\tLogger.system.error(\"Injecting mind control script failed:\", inject[i])\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/Launcher/createSplinterAndInject.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\nimport * as util from \"../../../common/util\";\nimport { isNumber } from '../../../common/disentangledUtils';\nimport { System } from \"../../../common/system\";\nimport Logger from \"../../../clients/logger\";\n\nimport ConfigClient from \"../../../clients/configClient\";\nimport { ConfigUtilInstance as ConfigUtil } from \"../../../common/configUtil\";\nimport WorkspaceClient from \"../../../clients/workspaceClient\";\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport DistributedStoreClient from \"../../../clients/distributedStoreClient\";\nimport { LauncherGroup as LauncherWindowGroup } from \"./launcherGroup\";\nimport { FinsembleWindowInternal } from \"../WindowAbstractions/FinsembleWindowInternal\";\nimport { CreateSplinterAndInject } from \"./createSplinterAndInject\";\nimport LauncherDefaults, { UNKNOWN_DEFAULT_CONFIG } from \"./LauncherDefaults\";\nimport {\n\tforEach as asyncForEach,\n\tparallel as asyncParallel,\n\tseries as asyncSeries,\n\tdoUntil as asyncDoUntil,\n\tsome as asyncSome,\n} from \"async\";\nimport _difference from \"lodash.difference\";\nimport { get, set } from \"lodash\";\nimport merge = require(\"deepmerge\");\nimport { FinsembleWindow } from \"../../../common/window/FinsembleWindow\";\nimport { WindowDescriptor } from \"../Common/types\";\n// For regression testing\nimport \"./_test\";\nimport { BaseWindow } from \"../WindowAbstractions/BaseWindow\";\nimport { IRouterClient } from \"../../../clients/IRouterClient\";\nimport { HEARTBEAT_TIMEOUT_CHANNEL, LAUNCHER_SERVICE, DELIVERY_MECHANISM } from \"../../../common/constants\";\nimport { getRandomWindowName } from \"../../../common/disentangledUtils\";\nimport { FinsembleWindowData } from \"../../../common/FinsembleWindowData\";\nimport SpawnUtils from \"../Common/spawnUtils\";\nconst clone = require(\"lodash.cloneDeep\");\nconst lodashGet = require(\"lodash.get\");\n\n/**\n * The internal representation of a Finsemble-controlled window.\n *\n * Daniel H. - 1/16/2019\n * I've done the bare minimum required to provide tight type safety\n * for this file. We really need to figure out which of these interfaces\n * is appropriate and pick that one, rather than this disjointed union.\n *\n * @TODO - Lift into separate interface file and refactor correctly.\n */\ntype FSBLWindow = BaseWindow & FinsembleWindow & {\n\twindowDescriptor: WindowDescriptor;\n\t/**\n\t * The name of the component in this window. E.g \"Welcome Component\", \"StackedWindow\", etc.\n\t *\n\t * Daniel H. - 1/16/2019\n\t * This appears to duplicated on the windowDescriptor itself.\n \t * @TODO - Pick one and stick with it.\n\t*/\n\tcomponentType: string;\n\tlastHeartbeat: number;\n\terrorSent: boolean;\n\twarningSent: boolean;\n\tnotRespondingSent: boolean;\n\tuuid: string;\n};\n\n/** Daniel H. - 1/16/2019\n * This is a stand-in for the real type.\n * @TODO - Refactor LauncherGroup to Typescript.\n*/\ninterface ILauncherGroup {\n\tgetWindows(): { [name: string]: FSBLWindow };\n\tgetWindow(name: string): FSBLWindow;\n\tfindAllByComponentType(componentType: string): FSBLWindow[];\n\tgetWindowNames(): string[];\n\taddWindow(window: FSBLWindow): void;\n\tremoveWindows(windowNames: string[], cb: () => void);\n\twindows: FSBLWindow[];\n};\n\nvar activeWindows: ILauncherGroup = new LauncherWindowGroup({\n\tname: \"LauncherService.allWindows\",\n}) as any;\n\ndeclare var window: any;\n/**\n * Daniel H. 1/2/19\n * Our use of `this` here causes every instance of Launcher\n * overwrite all the others.\n * @TODO Either not use this closure over `self`, or make Launcher an explicit singleton.\n*/\ndeclare var self: Launcher;\n\nconst NAME_STORAGE_KEY = \"finsemble.NameCountData\";\n\n/** All the possible window types, including their aliases used in config. */\ntype WindowTypes =\n\t\"OpenFinWindow\" | \"openfin\"\n\t| \"NativeWindow\" | \"assimilation\" | \"assimilated\"\n\t| \"native\" | \"FinsembleNativeWindow\"\n\t| \"application\" | \"OpenFinApplication\" | \"StackedWindow\";\n\n/** The parameters passed to Launcher.Spawn.\n *\n * For properties duplicated between the top-level\n * and `options`, `options` takes precedence.\n */\nexport type SpawnParams = {\n\t/**\n * Defaults to false. Whether to add the new component to the workspace.\n * Even when true, the window will still not be added to the workspace if addToWorkspace==false in components.json config for the component type.\n */\n\taddToWorkspace?: boolean;\n\t/**\n\t * Used when windowType is \"native\" or \"assimilation\". Specifies the alias of a bundled asset.\n\t */\n\talias?: string;\n\t/**\n\t * Set a process affinity flag. This allows windows to grouped together under a single process (a.k.a. Application). This flag is only available when your container is Electron.\n\t */\n\taffinity?: string;\n\n\t/**\n\t * Used when windowType is \"native\" or \"assimilation\". Specifies the arguments to be sent to the application. This is used in conjunction with path.\n\t * Arguments should be separated by spaces: `--arg1 foo --arg2 bar` except when `params.argumentsAsQueryString` is true, in which case set this parameter to be single string in URI format: `arg=1&arg=2`\"\n\t */\n\targuments?: any;\n\t/**\n\t * For native applications launched by URI: 1) the string is passed as the \"arguments\" parameter if appended as a query string; and 2) the automatically generated arguments described in \"path\" are appended to the query string\n\t */\n\targumentsAsQueryString?: boolean;\n\t/**\n\t * Whether the component can group with other windows.\n\t */\n\tcanGroup?: boolean;\n\t/**\n\t *  For use with permanent toolbars.\n\t * The available space for other components will be reduced by the amount of space covered by the newly spawned component.\n\t * This will be reflected in the `unclaimedRect` member from API calls that return monitorInfo. Users will be prevented\n\t * from moving windows to a position that covers the claimed space. See `position: 'unclaimed'`.\n\t */\n\tclaimMonitorSpace?: boolean;\n\t/**\n\t * Type of component to spawn.\n\t */\n\tcomponent?: any;\n\t/**\n\t * If true, will automatically dock the window with the \"relative\" window (dock to the parent window unless specified in params.relativeWindow).\n\t * Note that you must also position the window in a valid position for docking, for example, by setting the \"left\" or \"top\" parameters to \"adjacent\".\n\t */\n\tdockOnSpawn?: boolean;\n\t/**\n\t * An array of parts of the monitor that the component can dock to. Valid values are `top` and `bottom`.\n\t */\n\tdockable?: [\"top\", \"bottom\"] | [\"bottom\", \"top\"] | [\"top\"] | [\"bottom\"]\n\t/**\n\t * Which part of the monitor that the component will dock to on spawn. Valid options are `top` and `bottom`. Only valid if combined with the `dockable` property.\n\t */\n\tdocked?: \"top\" | \"bottom\";\n\t/**\n\t * Currently, components can only dock to the full width of the monitor. This parameter determines what height the component will be when docked to a monitor.\n\t */\n\tdockedHeight?: number;\n\t/**\n\t * Indicates that this window is ephemeral.\n\t * An ephemeral window is a dialog, menu, or other window that is temporarily displayed but usually hidden.\n\t * Ephemeral windows automatically have the following settings assigned: resizable: false, showTaskbarIcon: false, alwaysOnTop: true.\n\t * <b>Note</b>: Use `options:{autoShow: false}` to prevent an ephemeral widow from showing automatically.\n\t *\n\t */\n\tephemeral?: boolean;\n\n\t/**\n\t * If true, will attempt to make the window have no edges outside the monitor boundary.\n\t */\n\tforceOntoMonitor?: boolean;\n\t/**\n\t * Optional group name. Adds windows to a group (unrelated to docking or linking) that is used for window management functions. If the group does not exist it will be created.\n\t */\n\tgroupName?: string;\n\tgroupOnSpawn?: boolean;\n\t/**\n\t * Which monitor to place the new window.\n\t *\n\t * <b>\"mine\"</b> - Place the window on the same monitor as the calling window.\n\t *\n\t * Integer value from 0-n (0 being the primary monitor).\n\t *\n\t * <b>\"primary\"</b> indicates the user's primary monitor.\n\t *\n\t * <b>\"all\"</b> - Put a copy of the component on all monitors.\n\t *\n\t */\n\tmonitor?: number | \"mine\" | \"primary\" | \"next\" | \"previous\" | \"all\";\n\t/**\n\t * Name to give the component. If not provided, a random one will be generated. Name will be made unique (if not already).\n\t */\n\tname?: string;\n\t/**\n\t * @deprecated Please use windowType instead. Optional native application to launch with Assimilation service. Overrides what is passed in \"component\".\n\t */\n\tnative?: boolean;\n\t/**\n\t * Properties to merge with the default windowDescriptor.\n\t * Any value set here will be sent directly to the `OpenFin` window, and will override the effect of relevant parameters to spawn(). By default, all Finsemble windows are frameless.\n\t */\n\toptions?: any;\n\t/**\n\t * Used when windowType is \"native\" or \"assimilation\". Specifies the path to the application. The path can be:\n\t * The name of an exe that is on the system path (e.g., <i>notepad.exe</i>).\n\t * The full path to an executable on the user's machine (e.g., <i>C:\\Program Files\\app.exe</i>).\n\t * A system installed URI (e.g., <i>myuri://myapp</i>).\n\t *\n\t * When windowType is \"native\" then additional arguments will be automatically appended to the path or the URI. These arguments can be captured by the native application\n\t * in order to tie it to Finsemble's window tracking. When building an application with finsemble.dll, this is handled automatically. Those arguments are:\n\t *\n\t * **uuid** - A generated UUID that uniquely identifies this window.\n\t *\n\t * **left** - The x coordinate of the new window\n\t *\n\t * **top** - The y coordinate of the new window\n\t *\n\t * **width** - The width of the new window\n\t *\n\t * **height** - The height of the new window\n\t *\n\t * **openfinVersion** - The OpenFin version that Finsemble runs (necessary for native windows to connection on the OpenFin IAB)\n\t *\n\t * **openfinSocketPort** - The OpenFin socket used for the Inter-application Bus (IAB) (necessary for Java windows that wish to use the OpenFin IAB)\n\t *\n\t * **finsembleWindowName** - The name of the window in the Finsemble config\n\t *\n\t * **componentType** - The component type in the Finsemble config\n\t *\n\t * A common troublesome problem is when a native application needs to be launched from an intermediary application (such as a launcher or batch script). That intermediary\n\t * application can pass these parameters which will allow the final application to connect back to Finsemble.\n\t */\n\tpath?: string;\n\t/**\n\t * Defines a \"viewport\" for the spawn, with one of the following values:\n\t *\n\t * <b>\"unclaimed\"</b> (the default) Positioned based on the monitor space excluding space \"claimed\" by other components (such as toolbars).\n\t * For instance, `top:0` will place the new component directly below the toolbar.\n\t *\n\t * **\"available\"** Positioned according to the coordinates available on the monitor itself, less space claimed by the operating system (such as the windows toolbar).\n\t * For instance, `bottom:0` will place the new component with its bottom flush against the windows toolbar.\n\t *\n\t * **\"monitor\"** Positioned according to the absolute size of the monitor.\n\t * For instance, `top:0` will place the component overlapping the toolbar.\n\t *\n\t * **\"relative\"** Positioned relative to the relativeWindow.\n\t * For instance, `left:0;top:0` will join the top left corner of the new component with the top left corner of the relative window.\n\t *\n\t * **\"virtual\"** Positioned against coordinates on the virtual screen.\n\t * The virtual screen is the full viewing area of all monitors combined into a single theoretical monitor.\n\t */\n\tposition?: string;\n\t/**\n\t * Sets environment variables for a spawned native application. Create a map (JSON) object of names to values. This is only available when running assimilation and with the config assimilation.useOpenFinSpawn=false.\n\t */\n\tenv?: any;\n\t/**\n\t * The window to use when calculating any relative launches.\n\t * If not set then the window from which spawn() was called.\n\t */\n\trelativeWindow?: WindowIdentifier;\n\t/**\n\t * Optional url to launch. Overrides what is passed in \"component\".\n\t */\n\turl?: string;\n\t/**\n\t * Optional. Describes which type of component to spawn.\n\t *\n\t * <b>openfin</b> - A normal HTML window.\n\t *\n\t * **assimilation** - A window that is managed by the Finsemble assimilation process (usually a native window without source code access). Requires \"path\" to be specified, which may be the name of an executable on the system path, a system file path or system installed URI.\n\t *\n\t * **native** - A native window that has implemented finsemble.dll. Requires \"path\" to be specified.\n\t *\n\t * **application** - A standalone application. This launch a component in its own browser process (splintered, giving it dedicated CPU and memory).\n\t * This can also point to a standalone web application (such as from a third party).\n\t */\n\twindowType?: WindowTypes;\n\t/**\n\t * Built and passed internally. This is not a public api parameter, and cannot be\n\t * supplied by a user\n\t * @private\n\t */\n\twindowIdentifier?: WindowIdentifier;\n\t/**\n\t * If true then the new window will act as a slave to the relativeWindow (or the launching window if relativeWindow is not specified).\n\t * Slave windows will automatically close when their parent windows close.\n\t */\n\tslave?: boolean;\n\t/***\n\t * @private\n\t */\n\tspawnedByWorkspaceService?: boolean;\n\t/**\n\t * Number of pixels to stagger (default when neither left, right, top or bottom are set).\n\t */\n\tstaggerPixels?: number;\n\n\t/**\n\t * Where the spawn request is coming from.\n\t * @private\n\t */\n\tlaunchingWindow?: any;\n\t/**\n\t * Optional data to pass to the opening window.\n\t * If set, then the spawned window can use <a href=\"WindowClient.html#getSpawnData\">WindowClient#getSpawnData</a> to retrieve the data.\n\t */\n\tdata?: any,\n\t/**\n\t * A pixel value representing the distance from the left edge of the viewport as defined by \"position\".\n\t * A percentage value may also be used, representing the percentage distance from the left edge of the viewport relative to the viewport's width.\n\t *\n\t * <b>\"adjacent\"</b> will snap to the right edge of the spawning or relative window.\n\t *\n\t * <b>\"center\"</b> will center the window\n\t *\n\t * If neither left nor right are provided, then the default will be to stagger the window based on the last spawned window.\n\t *\n\t */\n\tleft?: number | string;\n\t/**\n\t * A pixel value representing the distance from the right edge of the viewport as defined by \"position\".\n\t * A percentage value may also be used, representing the percentage distance from the right edge of the viewport relative to the viewport's width.\n\t *\n  */\n\tright?: number | string;\n\t/**\n\t * A pixel value representing the distance from the right edge of the viewport as defined by \"position\".\n\t * A percentage value may also be used, representing the percentage distance from the bottom edge of the viewport relative to the viewport's width.\n\t *\n\t */\n\ttop?: number | string;\n\t/**\n\t * A pixel value representing the distance from the top edge of the viewport as defined by \"position\".\n\t * A percentage value may also be used, representing the percentage distance from the top edge of the viewport relative to the viewport's height.\n\t *\n\t */\n\tbottom?: number | string;\n\t/**\n\t *  A pixel or percentage value.\n\t */\n\twidth?: number | string;\n\t/**\n\t *  A pixel or percentage value.\n\t */\n\theight?: number | string;\n\t/**\n\t * Minimum width window can be resized to.\n\t */\n\tminWidth?: number;\n\t/**\n\t * Minimum height window can be resized to.\n\t */\n\tminHeight?: number;\n\t/**\n\t * Maximum height window can be resized to.\n\t */\n\tmaxHeight?: number;\n\t/**\n\t * Maximum width window can be resized to.\n\t */\n\tmaxWidth?: number;\n};\n\n\nvar Components = {};\nvar componentArray = [];\n\nDistributedStoreClient.initialize();\n\n/**\n * The Launcher Service receives calls from the launcherClient, and spawns windows.\n * @TODO, finish spawn (makeRoom, findEmptySpace, position=virtual, add abstraction for 0,0 by monitor, available, claimed)\n * @TODO, clean out old monitor routines from utils\n * @TODO, retrofit all code that appends customData to use \"data/spawnData\" instead\n * @constructor\n */\nexport class Launcher {\n\t/** @alias Launcher# */\n\tcreateSplinterAndInject: CreateSplinterAndInject;\n\twindowGroups: object;\n\tcssOverride: string;\n\tlastOpenedMap: object;\n\tlastAdjustedMap: object;\n\tpersistURL: boolean;\n\tpersistPath: boolean;\n\tshuttingDown: boolean;\n\tmonitors: any;\n\tshutdownList: any;\n\tRouterClient: IRouterClient;\n\tgroupStore: object;\n\twindowStore: object;\n\tfinsembleConfig: any;\n\tappConfig: any;\n\tpendingWindows: object;\n\trawManifest: object;\n\n\tconstructor(manifest, stackedWindowManager) {\n\t\tLogger.system.log(\"Starting Launcher\");\n\n\t\tthis.createSplinterAndInject = new CreateSplinterAndInject(manifest, stackedWindowManager);\n\t\tthis.finsembleConfig = manifest.finsemble;\n\t\tthis.appConfig = {};\n\t\tthis.pendingWindows = {}; // Note that pending windows only contains properties that are used, does not contain actual windows.\n\n\t\tself = this;\n\t\t//Window groups that are created via the launcher client.\n\t\tthis.windowGroups = {};\n\t\t//todo possibly remove this. We used to inject an overwrites file before we gave people the finsemble.css.\n\t\tthis.cssOverride = \"\";\n\t\t//Map of info about the last window that was opened.\n\t\tthis.lastOpenedMap = {};\n\t\tthis.lastAdjustedMap = {};\n\n\t\t//Whether to persist URL changes on the component.\n\t\tthis.persistURL = false;\n\t\t// Whether to persist the component's path (the path to the component in the OS). Default to true.\n\t\tthis.persistPath = true;\n\n\t\t//When we're shutting down, we ignore spawn requests. This gets set to true.\n\t\tthis.shuttingDown = false;\n\t\t//Local copy of monitors, this will prevent us from having to fetch them every time\n\t\tthis.monitors = null;\n\n\t\t/**\n\t\t * Namespace to prevent collisions.\n\t\t */\n\t\tthis.shutdownList = {};\n\t\t/**\n\t\t * This will be populated with the number of components that have told the Launcher whether they will require time to cleanup.\n\t\t */\n\t\tthis.shutdownList.componentsResponded = [];\n\t\t/**\n\t\t * This will be populated with the components who are doing some cleanup.\n\t\t */\n\t\tthis.shutdownList.waitFor = [];\n\n\t\tthis.shutdownList.componentsOpenAtShutdown = 0;\n\n\t\t//@todo remove globals\n\t\twindow.doingMonitorAdjustments = false;\n\t\twindow.activeWindows = activeWindows; // make it available for access to rawWindow\n\t\twindow.pendingWindows = this.pendingWindows;\n\t\twindow.windowGroups = this.windowGroups;\n\t\twindow.Launcher = this;\n\n\t\tthis.bringWindowsToFront = this.bringWindowsToFront.bind(this);\n\t\tthis.hyperFocus = this.hyperFocus.bind(this);\n\t\tthis.minimizeWindows = this.minimizeWindows.bind(this);\n\n\t\t//Removes sequential names queued up last time the app was open. We use local storage to remember how many toolbars we've spawned.\n\t\t//todo, why are we using local storage??\n\t\tthis.clearSequentialNames(); // invoke on startup\n\t}\n\n\t/**\n\t * Main function that starts everything up.\n\t * @param {*} callback\n\t */\n\tasync initialize(callback) {\n\t\tLogger.system.debug(\"Launcher.initialize\");\n\n\t\tthis.heartbeat();\n\t\t// When we wake from sleep, our heartbeats might be stale. Reset them.\n\t\tSystem.addEventListener(\"session-changed\", this.resetHeartbeats);\n\t\tutil.Monitors.on(\"monitors-changed\", this.doMonitorAdjustments.bind(this));\n\n\t\tawait this.createSplinterAndInject.initialize();\n\n\t\tasyncSeries([\n\t\t\tthis.getConfig.bind(this),\n\t\t\tthis.loadComponents.bind(this),//req config\n\t\t\tthis.getRawManifest,\n\t\t],\n\t\t\t() => {\n\t\t\t\tLogger.system.debug(\"Launcher ready\");\n\t\t\t\tcallback(); // essentially ready now\n\t\t\t\tthis.getMonitorInfoAll(function getMonitorInfoCallback(err, monitors) {\n\t\t\t\t\tLogger.system.debug(\"Launcher monitors\", monitors);\n\t\t\t\t\tRouterClient.addPubSubResponder(\"monitorInfo\", monitors); //@TODO, this should be prefixed Launcher.monitorInfo\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t/**\n\t * This method handles the shutdownList sequence for the Launcher.\n\t */\n\tshutdown(allDone) {\n\t\t//bool to prevent new components from being spawned.\n\t\tself.shuttingDown = true;\n\t\tconst smallTimeout = (callback) => {\n\t\t\t//I think I put this timeout in to allow the openfin IPC to catch up. It may not be necessary. Leaving it in until we have time to try pulling it out.\n\t\t\tsetTimeout(callback, 1);\n\t\t};\n\n\t\tconst promiseResolver = (resolve) => {\n\n\t\t\tasyncSeries([\n\t\t\t\tself.shutdownComponents.bind(this),\n\t\t\t\tsmallTimeout,\n\t\t\t], (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tLogger.system.error(\"shutdown error\", err);\n\t\t\t\t}\n\t\t\t\tallDone();\n\t\t\t\t//'resolve' will resolve the shutdownList, which then calls shutdownComplete in the baseService.\n\t\t\t\tresolve();\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t// returns list of known components\n\tgetComponents() {\n\t\treturn Components;\n\t}\n\n\t//Adds windows to several groups.\n\taddWindowsToGroups(params) {\n\t\tlet err = null;\n\t\tlet { groupName, windowList } = params;\n\t\tif (self.windowGroups[groupName]) {\n\t\t\tlet actualWindowList = self.getWindowsFromNamesOrIdentifiers(windowList);\n\t\t\tself.windowGroups[groupName].addWindows(actualWindowList);\n\t\t\tself.sendUpdatesToWindows(actualWindowList);\n\t\t} else {\n\t\t\terr = \"Group Does Not Exist\";\n\t\t}\n\t\treturn err;\n\t}\n\n\t// return list of window names for a give group name\n\tgetWindowsInGroup(groupName) {\n\t\tlet group = self.windowGroups[groupName];\n\t\tlet windowList = self.windowGroups[groupName];\n\t\treturn windowList;\n\t}\n\n\tremoveWindowsFromGroup(params) {\n\t\tlet err = null;\n\t\tlet { groupName, windowList } = params;\n\t\tif (self.windowGroups[groupName]) {\n\t\t\tself.windowGroups[groupName].removeWindows(windowList);\n\t\t\tlet actualWindowList = self.getWindowsFromNamesOrIdentifiers(windowList);\n\t\t\tself.sendUpdatesToWindows(actualWindowList);\n\t\t} else {\n\t\t\terr = \"Group Does Not Exist\";\n\t\t}\n\t\treturn err;\n\t}\n\n\t//Adds a window to several groups.\n\taddWindowToGroups(data) {\n\t\tLogger.system.debug(\"Add Window To Groups\", data.groupNames, data.windowIdentifier);\n\t\tvar win = activeWindows.getWindow(data.windowIdentifier);\n\t\tif (win) {\n\t\t\tfor (let g in data.groupNames) {\n\t\t\t\tlet groupName = data.groupNames[g];\n\t\t\t\tlet group = self.windowGroups[groupName];\n\t\t\t\tif (!group) {\n\t\t\t\t\tself.windowGroups[groupName] = new LauncherWindowGroup({\n\t\t\t\t\t\tname: groupName,\n\t\t\t\t\t});\n\t\t\t\t\tgroup = self.windowGroups[groupName];\n\t\t\t\t}\n\t\t\t\tgroup.addWindow(win);\n\t\t\t}\n\t\t\tself.sendUpdatesToWindows([win]);\n\t\t}\n\t}\n\n\t/**\n\t * \"StackedWindow\" is a special built-in component that the launcher uses internally. We need\n\t * to make sure that the StackedWindow is *always* in the component list.\n\t * @private\n\t * @param {Function} cb\n\t */\n\taddPredefinedComponents() {\n\t\tLogger.system.info(\"Launcher.AddPredefinedComponents\");\n\t\tComponents[\"StackedWindow\"] = {\n\t\t\twindow: {\n\t\t\t\twindowType: \"StackedWindow\",\n\t\t\t\taddToWorkspace: true\n\t\t\t},\n\t\t\tforeign: {\n\t\t\t\tservices: {\n\t\t\t\t\tdockingService: {\n\t\t\t\t\t\tisArrangeable: true\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcomponents: {\n\t\t\t\t\t\"App Launcher\": {\n\t\t\t\t\t\tlaunchableByUser: false\n\t\t\t\t\t},\n\t\t\t\t\t\"Window Manager\": {\n\t\t\t\t\t\tpersistWindowState: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tcomponent: {\n\t\t\t\ttype: \"StackedWindow\"\n\t\t\t}\n\t\t};\n\t\tthis.update();\n\t}\n\n\taddUnclaimedRectToMonitor(monitor) {\n\t\tif (!monitor) { return; }\n\t\t// Get the claims on space\n\t\tvar claimsOffset = self.getClaimsOffset(monitor);\n\t\t// Now we'll assemble an unclaimedRect in the same format as OpenFin's availableRect\n\t\tlet availableRect = monitor.availableRect;\n\t\tlet unclaimedRect = {\n\t\t\ttop: availableRect.top + claimsOffset.top,\n\t\t\tbottom: availableRect.bottom - claimsOffset.bottom,\n\t\t\tleft: availableRect.left + claimsOffset.left,\n\t\t\tright: availableRect.right - claimsOffset.right,\n\t\t\twidth: null,\n\t\t\theight: null\n\t\t};\n\t\tunclaimedRect.width = unclaimedRect.right - unclaimedRect.left;\n\t\tunclaimedRect.height = unclaimedRect.bottom - unclaimedRect.top;\n\n\t\t// Return the complete set of all three monitorRect, availableRect, unclaimedRect back to the client\n\t\tmonitor.unclaimedRect = unclaimedRect;\n\t}\n\n\t/**\n\t * This allows us to add a component that isn't in our list. We use the default manifest config so that our configs are the same across the board.\n\t * We also allow these components to be included in workspaces.\n\t * @param {*} message\n\t * @param {*} cb\n\t */\n\taddUserDefinedComponent(message, cb = Function.prototype) {\n\t\tvar name = message.data.name;\n\t\tlet config = new LauncherDefaults().componentDescriptor;\n\t\t//Add in our configs to the default config\n\t\tconfig.window.url = message.data.url;\n\t\tconfig.window.windowType = message.data.windowType;\n\t\t// This allows us to have an icon in our menus and pins\n\t\tconfig.foreign.components.Toolbar.iconURl = \"https://plus.google.com/_/favicon?domain_url=\" + message.data.url;\n\t\t// Sets the titlebar name to the user defined app name\n\t\tconfig.foreign.components[\"Window Manager\"].title = name;\n\t\t// Allows us to know how this component was created. Eventually, this should change when we add a source to our components\n\t\tconfig.component.isUserDefined = true;\n\t\tconfig.component.type = name;\n\n\t\tvar err = null;\n\t\tif (Components[name]) {\n\t\t\terr = \"Component of type \" + name + \" already exists.\";\n\t\t} else {\n\t\t\tComponents[name] = config;\n\t\t}\n\t\tthis.update();\n\t\tcb(err, null);\n\t}\n\n\t/**\n\t * Brings a list, group, componentType or all windows to front\n\t * @param {*} response.data.windowList list of window names or window identifiers.\n\t * @param {*} response.data.groupName group name\n\t * @param {*} response.data.componentType component type.\n\t */\n\tbringWindowsToFront(err, response, cb = Function.prototype) {\n\t\tif (!response) response = {};\n\t\tresponse.functionName = \"bringToFront\";\n\t\tthis.executeWindowGroupFunctionByListGroupOrType(response, cb);\n\t}\n\n\tcalculateBounds(foundMonitor, windowDescriptor: WindowDescriptor, launcherParams) {\n\t\tvar position = launcherParams.position;\n\n\t\tvar monitors = launcherParams.monitors;\n\t\tvar previousMonitor = launcherParams.previousMonitor;\n\n\t\tvar monitor = previousMonitor;\n\n\t\t// Client can optionally override by picking a monitor\n\t\tvar commandMonitor = launcherParams.monitor;\n\n\t\tif ((commandMonitor && commandMonitor !== \"mine\") || commandMonitor === 0) {\n\t\t\tmonitor = foundMonitor;\n\t\t}\n\n\t\tif (!monitor) monitor = foundMonitor;\n\n\t\t//If this is an ephemeral component don't update the lastOpenedMap\n\t\tlet shouldUpdateLastOpened = !launcherParams.ephemeral\n\n\t\t// Set monitorDimensions since other services reference this.\n\t\t// @TODO, get rid of this [Terry] Probably not a good idea, since monitor dimensions can change dynamically\n\t\t// better for any services to use the util functions on the fly when they need monitorDimensions\n\t\tif (!windowDescriptor.customData) { windowDescriptor.customData = {}; } // just in case we don't send an actual windowDescriptor in\n\t\twindowDescriptor.customData.monitorDimensions = monitor.availableRect;\n\n\t\tself.addUnclaimedRectToMonitor(monitor);\n\n\t\t/* Now that we know which monitor, set some variables to use in calculations\n\t\tvar monitorWidth = monitor.unclaimedRect.width, monitorHeight = monitor.unclaimedRect.height;\n\t\tvar monitorX = monitor.availableRect.left, monitorY = monitor.availableRect.top;*/\n\n\n\t\t// Set variables for calculations based on the dimensions of the opening window\n\t\tvar previousWindowBounds = launcherParams.previousWindowBounds;\n\t\tvar previousX = previousWindowBounds ? launcherParams.previousWindowBounds.left : monitor.availableRect.left;\n\t\tvar previousY = previousWindowBounds ? launcherParams.previousWindowBounds.top : monitor.availableRect.top;\n\t\tvar previousWidth = previousWindowBounds ? previousWindowBounds.width : launcherParams.width;\n\t\tvar previousHeight = previousWindowBounds ? previousWindowBounds.height : launcherParams.height;\n\t\tvar staggerPixels; //In order we will check the local launcherParams.staggerPixels. If that is undefined, we will\n\t\t//check the this.finsembleConfig, if _that_ is undefined, we default to 40. (This magic number was here previously.)\n\t\tif (launcherParams.hasOwnProperty(\"staggerPixels\") && Number(launcherParams.staggerPixels) !== NaN) { //eslint-disable-line\n\t\t\tstaggerPixels = launcherParams.staggerPixels;\n\t\t} else if (this.finsembleConfig.servicesConfig && this.finsembleConfig.servicesConfig.hasOwnProperty(\"launcher\") &&\n\t\t\tthis.finsembleConfig.servicesConfig.launcher.hasOwnProperty(\"staggerPixels\")) {\n\t\t\tstaggerPixels = this.finsembleConfig.servicesConfig.launcher.staggerPixels;\n\t\t} else {\n\t\t\tstaggerPixels = 40;\n\t\t}\n\n\t\t// The viewport is a box that is identified by coordinates in the virtual space (all monitors)\n\t\t// left, right, top, bottom calculations are done in that space\n\t\tvar viewport;\n\t\tif (position === \"available\") {\n\t\t\tviewport = monitor.availableRect;\n\t\t} else if (position === \"monitor\") {\n\t\t\tviewport = monitor.monitorRect;\n\t\t} else if (position === \"relative\") {\n\t\t\tviewport = {\n\t\t\t\tleft: previousX,\n\t\t\t\ttop: previousY,\n\t\t\t\tright: previousX + previousWidth,\n\t\t\t\tbottom: previousY + previousHeight,\n\t\t\t\twidth: previousWidth,\n\t\t\t\theight: previousHeight\n\t\t\t};\n\t\t} else if (position === \"virtual\") {\n\t\t\tlet virtualLeft = 0, virtualTop = 0, virtualWidth = 0, virtualHeight = 0;\n\t\t\tmonitors.forEach((monitor) => {\n\t\t\t\tlet dims = monitor.availableRect;\n\t\t\t\tvirtualWidth += Math.abs(dims.right - dims.left);\n\t\t\t\tvirtualHeight += Math.abs(dims.bottom - dims.top);\n\t\t\t\tif (dims.left < virtualLeft) {\n\t\t\t\t\tvirtualLeft = dims.left;\n\t\t\t\t}\n\t\t\t\tif (dims.top < virtualTop) {\n\t\t\t\t\tvirtualTop = dims.top;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tviewport = {\n\t\t\t\tleft: virtualLeft,\n\t\t\t\ttop: virtualTop,\n\t\t\t\twidth: virtualWidth,\n\t\t\t\theight: virtualHeight\n\t\t\t};\n\t\t} else {\n\t\t\tviewport = monitor.unclaimedRect;\n\t\t}\n\n\t\t// Width & height default to the component defaults, which is set earlier in the stack\n\t\tvar width = 800, height = 600;\n\n\t\tif (launcherParams.width || launcherParams.width === 0) {\n\t\t\tif (util.isPercentage(launcherParams.width)) {\n\t\t\t\twidth = viewport.width * parseFloat(launcherParams.width) / 100;\n\t\t\t} else {\n\t\t\t\twidth = parseFloat(launcherParams.width);\n\t\t\t}\n\t\t}\n\n\t\tif (launcherParams.height || launcherParams.height === 0) {\n\t\t\tif (util.isPercentage(launcherParams.height)) {\n\t\t\t\theight = viewport.height * parseFloat(launcherParams.height) / 100;\n\t\t\t} else {\n\t\t\t\theight = parseFloat(launcherParams.height);\n\t\t\t}\n\t\t}\n\n\n\t\t// Various x,y placement commands are possible.\n\t\tvar leftCommand = launcherParams.left, topCommand = launcherParams.top;\n\t\tvar rightCommand = launcherParams.right, bottomCommand = launcherParams.bottom;\n\n\t\t// Initialize the lastOpenedMap if not already. First window will open in top left corner of screen. This\n\t\t// only gets updated when a window is opened without any specific location. The entire thing resets if the user\n\t\t// hasn't opened a window in over a minute.\n\t\tlet resetStaggerTimer = 1000 * 60;\n\t\tlet lastOpened = self.lastOpenedMap[monitor.position];\n\t\tif (!lastOpened || (Date.now() - lastOpened.then) > resetStaggerTimer) {\n\t\t\tself.resetSpawnStagger({ monitorPosition: monitor.position });\n\t\t\tlastOpened = self.lastOpenedMap[monitor.position];\n\t\t}\n\n\t\t// For \"adjacent\" we want to automatically align the new component (unless specified otherwise by the developer)\n\t\tif (leftCommand === \"adjacent\" || rightCommand === \"adjacent\") {\n\t\t\tif (!topCommand && topCommand !== 0) {\n\t\t\t\ttopCommand = \"aligned\";\n\t\t\t}\n\t\t} else if (topCommand === \"adjacent\" || bottomCommand === \"adjacent\") {\n\t\t\tif (!leftCommand && leftCommand !== 0) {\n\t\t\t\tleftCommand = \"aligned\";\n\t\t\t}\n\t\t}\n\n\t\tvar left, right, top, bottom, updateX, updateY, lastY = lastOpened.y, lastX = lastOpened.x;\n\t\tif (leftCommand === \"center\") {\n\t\t\tlet center = viewport.left + (viewport.width / 2);\n\t\t\tleft = center - (width / 2);\n\t\t} else if (leftCommand === \"adjacent\") {\n\t\t\tleft = previousX + previousWidth;\n\t\t} else if (leftCommand === \"aligned\") {\n\t\t\tleft = previousX;\n\t\t} else if (leftCommand || leftCommand === 0) {\n\t\t\tif (util.isPercentage(leftCommand)) {\n\t\t\t\tleft = viewport.left + viewport.width * parseFloat(leftCommand) / 100;\n\t\t\t} else {\n\t\t\t\tleft = viewport.left + parseFloat(leftCommand);\n\t\t\t}\n\t\t} else if (!rightCommand && rightCommand !== 0) {\n\n\t\t\t//Make sure last opened window was on our viewport.\n\t\t\tif (!(lastX >= monitor.unclaimedRect.left && lastX <= monitor.unclaimedRect.right)) {\n\t\t\t\tlastX = monitor.unclaimedRect.left;\n\t\t\t\tlastY = monitor.unclaimedRect.top;\n\t\t\t}\n\t\t\tif (isNaN(lastX)) { lastX = null; }\n\t\t\t// stagger if neither left nor right commands\n\t\t\tif (launcherParams.relativeWindow) {\n\t\t\t\tlastOpened.x = previousX;\n\t\t\t} else if (lastX === null) { // start at 0\n\t\t\t\tlastX = monitor.unclaimedRect.left - staggerPixels;\n\t\t\t}\n\t\t\tleft = lastX + staggerPixels;\n\t\t\t// Make sure we don't go off right edge of monitor\n\t\t\tif (left + width > monitor.unclaimedRect.right) {\n\t\t\t\tleft = monitor.unclaimedRect.right - width;\n\t\t\t}\n\t\t\tupdateX = true;\n\t\t}\n\n\t\tif (rightCommand === \"adjacent\") {\n\t\t\tleft = previousX - width;\n\t\t} else if (rightCommand === \"aligned\") {\n\t\t\tleft = previousX + previousWidth - width;\n\t\t} else if (rightCommand || rightCommand === 0) {\n\t\t\tif (util.isPercentage(rightCommand)) {\n\t\t\t\tright = viewport.right - (viewport.width * parseFloat(rightCommand) / 100);\n\t\t\t} else {\n\t\t\t\tright = viewport.right - parseFloat(rightCommand);\n\t\t\t}\n\t\t\tif (left || left === 0) {\n\t\t\t\t// If we have a left command and right command, then set the width\n\t\t\t\twidth = right - left;\n\t\t\t} else {\n\t\t\t\t// If we only have a right command and a width, then we back into the left\n\t\t\t\tleft = right - width;\n\t\t\t}\n\t\t}\n\n\t\tif (topCommand === \"center\") {\n\t\t\tlet center = viewport.top + (viewport.height / 2);\n\t\t\ttop = center - (height / 2);\n\t\t} else if (topCommand === \"adjacent\") {\n\t\t\ttop = previousY + previousHeight;\n\t\t} else if (topCommand === \"aligned\") {\n\t\t\ttop = previousY;\n\t\t} else if (topCommand || topCommand === 0) {\n\t\t\tif (util.isPercentage(topCommand)) {\n\t\t\t\ttop = viewport.top + viewport.height * parseFloat(topCommand) / 100;\n\t\t\t} else {\n\t\t\t\ttop = viewport.top + parseFloat(topCommand);\n\t\t\t}\n\t\t} else if (!bottomCommand && bottomCommand !== 0) {\n\t\t\t//Make sure last opened window was on our viewport.\n\t\t\tif (!(lastY <= monitor.unclaimedRect.bottom && lastY >= monitor.unclaimedRect.top)) {\n\t\t\t\tlastY = monitor.unclaimedRect.top;\n\t\t\t\tlastX = monitor.unclaimedRect.left;\n\t\t\t}\n\t\t\tif (isNaN(lastY)) { lastY = null; }\n\t\t\t// stagger\n\t\t\tif (launcherParams.relativeWindow) {\n\t\t\t\tlastOpened.y = previousY;\n\t\t\t} else if (lastY === null) { // start at 0\n\t\t\t\tlastY = monitor.unclaimedRect.top - staggerPixels;\n\t\t\t}\n\t\t\ttop = lastY + staggerPixels;\n\t\t\t// Make sure we don't go off right edge of monitor\n\t\t\tif (top + height > monitor.unclaimedRect.bottom) {\n\t\t\t\ttop = monitor.unclaimedRect.bottom - height;\n\t\t\t}\n\t\t\tupdateY = true;\n\t\t}\n\n\t\tif (bottomCommand === \"adjacent\") {\n\t\t\ttop = previousY - height;\n\t\t} else if (bottomCommand === \"aligned\") {\n\t\t\ttop = previousY + previousHeight - height;\n\t\t} else if (bottomCommand || bottomCommand === 0) {\n\t\t\tif (util.isPercentage(bottomCommand)) {\n\t\t\t\tbottom = viewport.bottom - (viewport.height * parseFloat(bottomCommand) / 100);\n\t\t\t} else {\n\t\t\t\tbottom = viewport.bottom - parseFloat(bottomCommand);\n\t\t\t}\n\t\t\tif (top || top === 0) {\n\t\t\t\theight = bottom - top;\n\t\t\t} else {\n\t\t\t\ttop = bottom - height;\n\t\t\t}\n\t\t}\n\n\t\t// Make sure we have a right and a bottom\n\t\tif (!right && Number.isFinite(left)) { right = left + width; }\n\t\tif (!bottom && Number.isFinite(top)) { bottom = top + height; }\n\n\t\tconst shouldWindowBeForcedIntoView = launcherParams.hasOwnProperty('forceOntoMonitor') ? Boolean(launcherParams.forceOntoMonitor) : true;\n\n\t\t// Force to be on monitor\n\t\tif (shouldWindowBeForcedIntoView) {\n\t\t\tif (right > monitor.unclaimedRect.right) {\n\t\t\t\tleft = left - (right - monitor.unclaimedRect.right);\n\t\t\t\tright = monitor.unclaimedRect.right;\n\t\t\t}\n\n\t\t\tif (bottom > monitor.unclaimedRect.bottom) {\n\t\t\t\t//Before, the bottom of the window being shown would line up with the bottom of the monitor. If this was a menu, this was problematic because the menu would overlap the toolbar. Instead, we line up the bottom of the window with the top of the relative window.\n\t\t\t\tif (topCommand === \"adjacent\") {\n\t\t\t\t\tbottom = previousY;\n\t\t\t\t} else {\n\t\t\t\t\ttop = top - (bottom - monitor.unclaimedRect.bottom);\n\t\t\t\t}\n\t\t\t\ttop = bottom - height;\n\n\n\t\t\t}\n\n\t\t\t//left after right in case window bigger than viewport\n\t\t\tif (left < monitor.unclaimedRect.left) {\n\t\t\t\tleft = monitor.unclaimedRect.left;\n\t\t\t\tright = left + width;\n\t\t\t}\n\n\t\t\tif (top < monitor.unclaimedRect.top) {\n\t\t\t\ttop = monitor.unclaimedRect.top;\n\t\t\t\tbottom = top + height;\n\t\t\t}\n\t\t}\n\n\t\t// Only if both x and y were unassigned do we save the information so that we can stagger again later\n\t\tif (updateX && updateY) {\n\t\t\tif (launcherParams.options && typeof launcherParams.options.defaultLeft === \"undefined\") { // defaultLeft is set when being restored from workspace. We don't want those to affect the stagger algorithm.\n\t\t\t\tLogger.system.debug(\"lastOpened.x\", left, launcherParams);\n\t\t\t\tlastOpened.x = left;\n\t\t\t\tlastOpened.y = top;\n\t\t\t}\n\t\t\tlastOpened.then = Date.now();\n\t\t}\n\n\t\tif (left || left === 0) { windowDescriptor.defaultLeft = Math.round(left); }\n\t\tif (top || top === 0) { windowDescriptor.defaultTop = Math.round(top); }\n\t\tif (width || width === 0) { windowDescriptor.defaultWidth = Math.round(width); }\n\t\tif (height || height === 0) { windowDescriptor.defaultHeight = Math.round(height); }\n\t\twindowDescriptor.monitorInfo = monitor.position; //only this position is used elsewhere so stop putting the entire object in the windowDescriptor so as not to overload the store\n\n\t\tif (typeof (launcherParams.claimMonitorSpace) !== \"undefined\") {\n\t\t\twindowDescriptor.claimMonitorSpace = launcherParams.claimMonitorSpace;\n\t\t}\n\n\t\tif (shouldWindowBeForcedIntoView) {\n\t\t\twindowDescriptor = this.adjustWindowDescriptorBoundsToBeOnMonitor(windowDescriptor);\n\t\t}\n\n\t\t// If a leftCommand/rightCommand/topCommand/bottomCommand\n\t\t// or position other than 'virtual' is supplied then don't update the lastOpenedMap.\n\t\t// This can also be skipped if shouldUpdateLastOpened is already false\n\t\t// (like when the opening window is a menu)\n\t\t// NOTE: position virtual is an acceptable value to update the lastOpenedMap since its just the entire virtual usable space\n\t\tif (shouldUpdateLastOpened && (topCommand || bottomCommand || leftCommand || rightCommand) && (!position || position !== \"virtual\")) {\n\t\t\tshouldUpdateLastOpened = false;\n\t\t}\n\n\t\t//If the launching window is a menu we don't want to update this map, otherwise the next window will stagger will just open on top of the last window (since the menu's location won't change in most cases)\n\t\tif (shouldUpdateLastOpened) {\n\t\t\tthis.lastOpenedMap[monitor.position] = {\n\t\t\t\tx: windowDescriptor.defaultLeft,\n\t\t\t\ty: windowDescriptor.defaultTop,\n\t\t\t\tthen: lastOpened.then ? lastOpened.then : undefined\n\t\t\t}; //NOTE: 4/5/19 lastOpened.then was not being added to the lastOpenedMap, so the stagger timer was likely broken\n\t\t}\n\n\t\treturn Promise.resolve(windowDescriptor);\n\t}\n\n\n\t/**\n\t * Takes the window descriptor's bounds and makes sure it's on a monitor. If the window isn't on a monitor, we determine the closest monitor\n\t * based on the distance from the top-left corner of the window to the center of the monitor, and then pull the monitor along that line\n\t * until the window is on the edge of the monitor\n\t * @param {*} windowDescriptor Window descriptor, e.g. from a saved workspace\n\t * @param {*} previousWindowBounds not used, unfortunately\n\t * @returns windowDescriptor updated window descriptor\n\t */\n\tadjustWindowDescriptorBoundsToBeOnMonitor(windowDescriptor: WindowDescriptor): WindowDescriptor {\n\t\tif (windowDescriptor && windowDescriptor.customData && windowDescriptor.customData.window) {\n\t\t\tif (windowDescriptor.customData.window.allowToSpawnOffScreen) {\n\t\t\t\treturn windowDescriptor;\n\t\t\t}\n\t\t}\n\n\t\tlet bounds;\n\t\t/** Currently our bounds data (top, left, height, width, etc.) is duplicated in up to three places\n\t\t * in the WindowDescriptor object: as top level props (windowDescriptor.left), as top level\n\t\t * props with a \"default\" prefix (windowDescriptor.defaultLeft), and, in the case of StackedWindows\n\t\t * (and in this case only), within the \"bounds\" prop (windowDescriptor.bounds.left).\n\t\t *\n\t\t * @TODO Pick a place and stick with it. Refactor all the code touching WindowDescriptors to use\n\t\t * that new place. Either everyone should check \"bounds\", or no one should.\n\t\t */\n\t\tif (windowDescriptor.componentType === \"StackedWindow\") {\n\t\t\tbounds = {\n\t\t\t\tleft: windowDescriptor.left,\n\t\t\t\ttop: windowDescriptor.top,\n\t\t\t\theight: windowDescriptor.height,\n\t\t\t\twidth: windowDescriptor.width,\n\t\t\t\tright: null,\n\t\t\t\tbottom: null\n\t\t\t}\n\t\t} else {\n\t\t\tbounds = {\n\t\t\t\tleft: windowDescriptor.defaultLeft,\n\t\t\t\ttop: windowDescriptor.defaultTop,\n\t\t\t\theight: windowDescriptor.defaultHeight,\n\t\t\t\twidth: windowDescriptor.defaultWidth,\n\t\t\t\tright: null,\n\t\t\t\tbottom: null\n\t\t\t}\n\t\t};\n\n\t\tbounds.right = bounds.left + bounds.width;\n\t\tbounds.bottom = bounds.top + bounds.height;\n\n\t\tif (windowDescriptor.customData && windowDescriptor.customData.monitorDimensions) {\n\t\t\tlet newBounds = util.adjustBoundsToBeOnMonitor(bounds);\n\n\t\t\t// update windowDescriptor\n\t\t\twindowDescriptor.defaultLeft = newBounds.left;\n\t\t\twindowDescriptor.defaultTop = newBounds.top;\n\t\t\twindowDescriptor.left = newBounds.left;\n\t\t\twindowDescriptor.top = newBounds.top;\n\t\t\twindowDescriptor.height = newBounds.height;\n\t\t\twindowDescriptor.width = newBounds.width;\n\t\t\twindowDescriptor.right = newBounds.left + newBounds.width;\n\t\t\twindowDescriptor.bottom = newBounds.top + newBounds.height;\n\n\t\t\t/**\n\t\t\t * Daniel H. - 1/16/19\n\t\t\t * Needed in the case that  the windowDescriptor belongs to a StackedWindow.\n\t\t\t * See comments above.\n\t\t\t *\n\t\t\t * @TODO - Refactor this away.\n\t\t\t*/\n\t\t\tif (windowDescriptor.bounds) {\n\t\t\t\twindowDescriptor.bounds.left = newBounds.left;\n\t\t\t\twindowDescriptor.bounds.top = newBounds.top;\n\t\t\t\twindowDescriptor.bounds.height = newBounds.height;\n\t\t\t\twindowDescriptor.bounds.width = newBounds.width;\n\t\t\t\twindowDescriptor.bounds.right = newBounds.left + newBounds.width;\n\t\t\t\twindowDescriptor.bounds.bottom = newBounds.top + newBounds.height;\n\t\t\t}\n\t\t}\n\n\t\treturn windowDescriptor;\n\n\t}\n\n\t// clears counters from local storage -- counters will restart at 1 for new names\n\tclearSequentialNames() {\n\t\tlocalStorage.removeItem(NAME_STORAGE_KEY);\n\t}\n\n\t/**\n\t * @private\n\t */\n\tcompileWindowDescriptor(config, params, baseDescriptor: WindowDescriptor, resultFromDeriveBounds): WindowDescriptor {\n\t\tvar windowDescriptor = baseDescriptor;\n\n\t\t// Pushes affinity option further down callstack for eventual consumption by E2O.\n\t\tif (params.affinity) {\n\t\t\twindowDescriptor.affinity = params.affinity;\n\t\t}\n\n\t\t// Ephemeral windows, such as dialogs, menus, linker, etc\n\t\tif (params.ephemeral) {\n\t\t\twindowDescriptor.resizable = false;\n\t\t\twindowDescriptor.showTaskbarIcon = false;\n\t\t\twindowDescriptor.alwaysOnTop = true;\n\t\t\t// ephemeral objects shouldn't be added to the workspace, unless explicitly set in their config\n\t\t\t// @TODO, this should really look at foreign:services:workspaceService\n\t\t\tif (typeof config.window.addToWorkspace === \"undefined\") {\n\t\t\t\tconfig.window.addToWorkspace = false;\n\t\t\t}\n\t\t}\n\n\t\t// Make sure affinity gets passed down to the container\n\t\twindowDescriptor.affinity = params.affinity ? params.affinity : config.window.affinity;\n\n\t\t// Override all settings with any \"options\" from the config\n\t\tif (config.window.options) {\n\t\t\twindowDescriptor = merge(windowDescriptor, config.window.options);\n\t\t}\n\n\t\t//Merging first so that any params that the dev passes in overwrite what we calculate.\n\t\twindowDescriptor = merge(windowDescriptor, resultFromDeriveBounds);\n\n\t\t// Add the config entries into customData so that it's available to the new window\n\t\twindowDescriptor.customData = merge(windowDescriptor.customData, config);\n\t\t// Any data passed by argument is added to spawnData so that it's available to the new window\n\t\tif (params.data) {\n\t\t\twindowDescriptor.customData.spawnData = params.data;\n\t\t}\n\n\t\t// Final override of any \"options\" that were passed in as an argument\n\t\tif (params.options) {\n\t\t\twindowDescriptor = merge(windowDescriptor, params.options);\n\t\t\t// If the component is unknown, we must make sure it has the proper URL for the\n\t\t\t// unknown component. If the component is native, the url is removed by the merge from\n\t\t\t// params.options (params.options.window does not have a url...).\n\t\t\t// We delete the windowType on both objects so that WPF/Native applications\n\t\t\t// are spawned as unknown HTML5 applications. Otherwise, the spawn requests\n\t\t\t// go off into the ether and prevent workspaces from loading properly.\n\t\t\tif (config.component && config.component.isUnknownComponent) {\n\t\t\t\twindowDescriptor.url = config.window.url;\n\t\t\t\tdelete windowDescriptor.windowType;\n\t\t\t\tdelete windowDescriptor.customData.window.windowType;\n\t\t\t\t// Assimilated windows set this boolean. If this is true, all the work above (deleting windowType)\n\t\t\t\t// does not matter, and we will try to spawn something that isn't\n\t\t\t\t// the unknown component.\n\t\t\t\tdelete windowDescriptor.customData.window.native;\n\t\t\t}\n\t\t}\n\t\t// Bounds correction in case of OS display re-arrangements\n\t\tconst allowToSpawnOffScreen = lodashGet(\n\t\t\twindowDescriptor,\n\t\t\t'customData.window.allowToSpawnOffScreen')\n\t\tif (!allowToSpawnOffScreen && params.forceOntoMonitor !== false) {\n\t\t\twindowDescriptor = this.adjustWindowDescriptorBoundsToBeOnMonitor(windowDescriptor)\n\t\t}\n\t\t// the execJSWhitelist will be an array of windows allowed to call executeJavascript on the resultant window.\n\t\t// It will eventually include the windowService, and the Application or SplinterAgent that actually creates\n\t\t// the window, and the window that initiated the request to spawn the window. The caller of `spawn` is not in the list.\n\t\tif (!windowDescriptor.execJSWhitelist) windowDescriptor.execJSWhitelist = [];\n\t\twindowDescriptor.execJSWhitelist.push(System.Window.getCurrent().name);\n\n\t\twindowDescriptor.customData.manifest = this.rawManifest; // pass in custom data so router can use\n\t\tLogger.system.debug(\"Launcher.compileWindowDescriptor\", windowDescriptor);\n\n\t\twindowDescriptor.securityPolicy = SpawnUtils.getSecurityPolicy(windowDescriptor, this.finsembleConfig);\n\t\twindowDescriptor.permissions = SpawnUtils.getPermissions(windowDescriptor, this.finsembleConfig);\n\t\treturn windowDescriptor;\n\t}\n\n\t/**\n\t * Locates a window based on a componentType\n\t * @param {object} windowIdentifier The parameters\n\t * @param  {string}   windowIdentifier.componentType\t The type of component\n\t * @return {finWindow} Returns a finWindow for the component, or null if not found\n\t */\n\tcomponentFinder(windowIdentifier) {\n\t\tvar windowsOfComponentType = activeWindows.findAllByComponentType(windowIdentifier.componentType);\n\t\tif (windowsOfComponentType.length) {\n\t\t\treturn windowsOfComponentType[0];\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Create Window Group\n\t */\n\tcreateWindowGroup(err, message) {\n\t\tLogger.system.debug(\"Creating Group\", message);\n\t\tif (!message.data.groupName) {\n\t\t\treturn message.sendQueryResponse(\"No Group name Specified\");\n\t\t}\n\t\t// Build Window List from window names/identifiers\n\t\tvar actualWindowList = self.getWindowsFromNamesOrIdentifiers(message.data.windowList, true);\n\t\tself.windowGroups[message.data.groupName] = new LauncherWindowGroup({\n\t\t\tname: message.data.groupName,\n\t\t\twindows: actualWindowList\n\t\t});\n\n\t\tself.sendUpdatesToWindows(self.getWindowsFromNamesOrIdentifiers(message.data.windowList));\n\n\t\tif (message.sendQueryResponse) message.sendQueryResponse(null, \"Success\");\n\t}\n\n\tdeleteWindowGroup(err, message) {\n\t\tLogger.system.debug(\"Deleting Group\", message.data.groupName);\n\t\tif (!message.data.groupName) {\n\t\t\treturn message.sendQueryResponse(\"No Group name Specified\");\n\t\t}\n\t\tlet groupName = message.data.groupName;\n\t\tif (self.windowGroups[groupName]) {\n\t\t\tlet group = self.windowGroups[groupName];\n\t\t\tlet windowList = group.getWindows();\n\t\t\tgroup.destroy();\n\t\t\tdelete self.windowGroups[message.data.groupName];\n\t\t\tself.sendUpdatesToWindows(windowList);\n\t\t}\n\t\tmessage.sendQueryResponse(null, \"Success\");\n\t}\n\n\t/**\n\t * Sets the dimensions and placement of the window by translating the launcherParams\n\t * to the requires settings for an OpenFin windowDescriptor.\n\t *\n\t * @params\tobject\tlauncherParams Params from spawn()\n\t * @returns {Promise} A promise that resolves to a new windowDescriptor that describes the new window.\n\t * with defaultLeft, defaultTop, defaultWidth, defaultHeight, and claimMonitorSpace set.\n\t */\n\tderiveBounds(launcherParams: SpawnParams): Promise<WindowDescriptor> {\n\t\tlet windowDescriptor: WindowDescriptor = {};\n\t\t// Default to same monitor of the relativeWindow passed in (usually the window that launched us)\n\n\t\t// Get windowDescriptor for the previous window (the caller or relativeWindow)\n\t\tfunction addPreviousWindow(params) {\n\t\t\tasync function promiseResolver(resolve) {\n\t\t\t\tvar whichWindow = params.relativeWindow || params.launchingWindow;\n\t\t\t\tif (whichWindow) {\n\t\t\t\t\tparams.previousWindow = activeWindows.getWindow(whichWindow.windowName);\n\t\t\t\t\t// TBD Cleanup: this was wrapping windows before they were created -- not clear needed\n\t\t\t\t\t// if (!params.previousWindow) {\n\t\t\t\t\t// \tLogger.system.debug(\":wrap: deriveBounds addPreviousWindow\", whichWindow);\n\t\t\t\t\t// \tlet { wrap } = await FinsembleWindow.getInstance(whichWindow);\n\t\t\t\t\t// \tparams.previousWindow = wrap;\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t\tresolve(params);\n\t\t\t}\n\t\t\treturn new Promise(promiseResolver);\n\t\t}\n\n\t\t// Get all monitors\n\t\tfunction addAllMonitors(params) {\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tutil.getAllMonitors(function (monitors) {\n\t\t\t\t\tparams.monitors = monitors;\n\t\t\t\t\tresolve(params);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Get the monitor descriptor for that previous window\n\t\tfunction addPreviousMonitor(params) {\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tif (params.previousWindow) {\n\t\t\t\t\t// as is this code on startup tried to get bounds of Workspace Service (i.e. the previousWindow).  This is a flawed way to determine\n\t\t\t\t\t// which monitor to start up....for one the Workspace service doesn't have a bounds after wrapper cleanup.  Short-term solution is\n\t\t\t\t\t// on error then set monitor[0] as the previousMonitor.\n\t\t\t\t\tparams.previousWindow._getBounds((err, bounds) => {\n\t\t\t\t\t\t// bounds are undefined for Windowless WPF Components\n\t\t\t\t\t\tif (!err && bounds !== undefined) {\n\t\t\t\t\t\t\tparams.previousWindowBounds = bounds;\n\t\t\t\t\t\t\tutil.Monitors.getMonitorFromScaledXY(bounds.left, bounds.top, (monitor) => {\n\t\t\t\t\t\t\t\tparams.previousMonitor = monitor;\n\t\t\t\t\t\t\t\tresolve(params);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparams.previousMonitor = params.monitors[0];\n\t\t\t\t\t\t\tresolve(params);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresolve(params);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t//Gets the monitor for the window that we're about to spawn.\n\t\tfunction getWhichMonitor(params) {\n\t\t\treturn new Promise(function (resolve/*, reject*/) {\n\t\t\t\tvar getWhichMonitorParams = {\n\t\t\t\t\tcommandMonitor: params.monitor,\n\t\t\t\t\tmonitors: params.monitors,\n\t\t\t\t\tlaunchingMonitorPosition: params.position,\n\t\t\t\t\twindowIdentifier: params.relativeWindow || params.launchingWindow,\n\t\t\t\t\twindowDescriptor: windowDescriptor\n\t\t\t\t};\n\t\t\t\tutil.getWhichMonitor(getWhichMonitorParams, function (monitor) {\n\t\t\t\t\tresolve(monitor);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t//Add information to launcherParams (previous window, monitors, etc).\n\t\t//when all is collected, call calculateBounds() to finish the job.\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tlauncherParams = await addPreviousWindow(launcherParams);\n\t\t\tlauncherParams = await addAllMonitors(launcherParams);\n\t\t\tlauncherParams = await addPreviousMonitor(launcherParams);\n\t\t\tlet monitor = await getWhichMonitor(launcherParams);\n\n\t\t\t// If launcherParams supplied ephemeral no need to check, otherwise this request\n\t\t\t// may have come from 'showWindow' and need to get the components properties\n\t\t\t// from launcher. An 'ephemeral' window is most likely a menu and should\n\t\t\t// not update the lastOpenedMap\n\t\t\tif (!launcherParams.hasOwnProperty('ephemeral') && launcherParams.windowIdentifier && launcherParams.windowIdentifier.componentType) {\n\t\t\t\tlauncherParams.ephemeral = Components[launcherParams.windowIdentifier.componentType].window.ephemeral;\n\t\t\t}\n\n\t\t\tlet bounds = await this.calculateBounds(monitor, windowDescriptor, launcherParams);\n\t\t\tresolve(bounds);\n\t\t};\n\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * The basic algorithm for handling monitor adjustments is:\n\t * 1) Remove any orphaned components. These would be any spawnOnAllMonitor components that are now located\n\t * on a different monitor than they started. We simply compare their existing monitor with the one they were\n\t * spawned upon, and remove them if they aren't where they belong.\n\t *\n\t * 2) Add any motherless components. These would be any spawnOnAllMonitor components that are missing from a\n\t * particular monitor, presumably because the monitor just got added.\n\t *\n\t * 3) Adjust component dimensions. Since the monitor size may have changed we need to adjust any components\n\t * that had previously made assumptions about monitor size (such as a toolbar that is supposed to stretch across\n\t * the top of the screen). We cycle through any components that have made a \"claim\" on monitor space and then\n\t * simply call showWindow() with their original params in order to give them a chance to resettle.\n\t */\n\n\tdoMonitorAdjustments(changeData) {\n\t\tconst monitors = changeData.monitors;\n\t\t// Event fires multiple times for monitor changes - so stop things from happening too many times.\n\t\tif (window.doingMonitorAdjustments) return;\n\t\twindow.doingMonitorAdjustments = true;\n\t\tvar components = {};\n\t\tasyncSeries([\n\t\t\t(done) => {\n\t\t\t\tthis.monitorRemoveOrphans(monitors, components, done);\n\t\t\t},\n\t\t\t(done) => {\n\t\t\t\tthis.monitorAddMotherless(monitors, components, done);\n\t\t\t},\n\t\t\tthis.monitorAdjustDimensions\n\t\t], function () {\n\t\t\twindow.doingMonitorAdjustments = false;\n\t\t});\n\t}\n\n\t/**\n\t * Convenient way to execute stuff on a group or all windows\n\t */\n\texecuteWindowGroupFunctionByListGroupOrType(response, cb = Function.prototype) {\n\t\tlet windowGroup;\n\t\tif (!response.data) response.data = {};\n\t\tlet { groupName, windowList } = response.data;\n\n\t\t// If we have a groupName, use that otherwise use activeWindows\n\t\tif (groupName) {\n\t\t\twindowGroup = self.windowGroups[groupName];\n\t\t} else {\n\t\t\twindowGroup = activeWindows;\n\t\t}\n\n\t\tlet functionToCall = windowGroup[response.functionName].bind(windowGroup);\n\n\t\t// If we've been passed a list or a componentType, filter the group by the list or componentType\n\t\tif (windowList) {\n\t\t\tdelete response.data.componentType;\n\t\t}\n\n\t\tfunctionToCall(response.data, cb);\n\n\t}\n\t/**\n\t * Returns a list of window descriptors that includes each window that the launcher has spawned.\n\t */\n\tgetActiveDescriptors() {\n\t\tvar descriptors: { [k: string]: WindowDescriptor } = {};\n\t\tvar allActiveWindows = activeWindows.getWindows();\n\t\tfor (var name in allActiveWindows) {\n\t\t\tdescriptors[name] = allActiveWindows[name].windowDescriptor;\n\t\t}\n\t\treturn descriptors;\n\t}\n\t/**\n\t\t * Gets offsets to monitor dimensions based on any space permanently\n\t\t * claimed by other components such as toolbars.\n\t\t * @param  {object} myMonitor The monitor\n\t\t * @return {object}         An object containing offsets for top, bottom, left & right\n\t\t */\n\tgetClaimsOffset(myMonitor) {\n\t\tvar claimAdjusted = clone(myMonitor); // error when using util.clone\n\t\tvar availableRect = claimAdjusted.availableRect;\n\t\tvar monitorRect = myMonitor.monitorRect || myMonitor.availableRect; // TODO: Sidd - a customer on Win 7 had monitorRect undefined causing showWindow to fail on the non-floating toolbar. Fix that by falling back to availableRect.\n\t\tvar allActiveWindows = activeWindows.getWindows();\n\t\tfor (var name in allActiveWindows) {\n\t\t\tvar activeWindow = allActiveWindows[name];\n\t\t\tvar windowDescriptor = activeWindow.windowDescriptor;\n\t\t\tif (!windowDescriptor || !windowDescriptor.claimMonitorSpace) { continue; }\n\n\t\t\t// Got a window with claim. Is it on my monitor?\n\t\t\t// @TODO, technically defaultLeft and defaultTop might have changed since when we first\n\t\t\t// created the toolbar, say for instance if we designed toolbars that you could drag to\n\t\t\t// different edges of the monitor, so we should change this code to retrieve these values\n\t\t\t// asynchronously using getWindowDescriptor()\n\t\t\tvar x = windowDescriptor.defaultLeft, y = windowDescriptor.defaultTop;\n\t\t\tif (x < monitorRect.left || x >= monitorRect.right || y < monitorRect.top || y >= monitorRect.bottom) { continue; }\n\n\t\t\t// Yes, then let's adjust our available monitor dimensions\n\t\t\tvar h = windowDescriptor.defaultHeight, w = windowDescriptor.defaultWidth;\n\n\t\t\t// horizontal toolbars\n\t\t\tif (w > h) {\n\t\t\t\tvar bottom = y + h, top = y;\n\t\t\t\tif (top <= availableRect.top) {\n\t\t\t\t\tavailableRect.top = bottom;\n\t\t\t\t} else {\n\t\t\t\t\tavailableRect.bottom = top;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar left = x, right = x + w;\n\t\t\t\tif (left <= availableRect.left) {\n\t\t\t\t\tavailableRect.left = right;\n\t\t\t\t} else {\n\t\t\t\t\tavailableRect.right = left;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar returnObj = {\n\t\t\ttop: availableRect.top - myMonitor.availableRect.top,\n\t\t\tbottom: myMonitor.availableRect.bottom - availableRect.bottom,\n\t\t\tleft: availableRect.left - myMonitor.availableRect.left,\n\t\t\tright: myMonitor.availableRect.right - availableRect.right\n\t\t};\n\t\treturn returnObj;\n\t}\n\n\t/**\n\t * Returns an map of components that can receive specific data types based on \"advertiseReceivers\" in the component config\n\t *\n\t * @param {array} dataTypes A list of dataTypes (string)\n\t */\n\tgetComponentsThatCanReceiveDataTypes(dataTypes) {\n\t\tvar componentsThatCanReceiveDataTypes = {};\n\t\tfor (var c in Components) {\n\t\t\tvar component = Components[c];\n\t\t\tvar receivers = component.component.advertiseReceivers;\n\t\t\tif (!receivers) { continue; }\n\t\t\tif (!Array.isArray(receivers)) {\n\t\t\t\treceivers = [receivers];\n\t\t\t}\n\t\t\tvar commonDataTypes = receivers.filter(o => dataTypes.includes(o));\n\t\t\tfor (var i = 0; i < commonDataTypes.length; i++) {\n\t\t\t\tvar commonType = commonDataTypes[i];\n\t\t\t\tif (!componentsThatCanReceiveDataTypes[commonType]) {\n\t\t\t\t\tcomponentsThatCanReceiveDataTypes[commonType] = {\n\t\t\t\t\t\tcomponentTypes: [c],\n\t\t\t\t\t\tactiveComponents: []\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tcomponentsThatCanReceiveDataTypes[commonType].componentTypes.push(c);\n\t\t\t\t}\n\t\t\t\tvar allActiveWindows = activeWindows.getWindows();\n\t\t\t\tvar activeComponentNames = Object.keys(allActiveWindows).filter(name => {\n\t\t\t\t\treturn allActiveWindows[name].componentType === c;\n\t\t\t\t});\n\t\t\t\tfor (var j of activeComponentNames) { componentsThatCanReceiveDataTypes[commonType].activeComponents.push(j); }\n\t\t\t\t//componentsThatCanReceiveDataTypes[commonType].activeComponents = [...componentsThatCanReceiveDataTypes[commonType].activeComponents, ...activeComponents];\n\t\t\t}\n\t\t}\n\t\tfor (var dataType of dataTypes) {\n\t\t\tif (!componentsThatCanReceiveDataTypes[dataType]) {\n\t\t\t\tcomponentsThatCanReceiveDataTypes[dataType] = {\n\t\t\t\t\tcomponentTypes: [],\n\t\t\t\t\tactiveComponents: []\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn componentsThatCanReceiveDataTypes;\n\t}\n\n\t/*\n\tA helper for pulling out the default config for url persistence\n\t*/\n\t// @todo This code doesn't appear to be used. Consider deleting it.\n\tgetGlobalURLPersistence() {\n\t\treturn this.appConfig.finsemble.servicesConfig && this.appConfig.finsemble.servicesConfig.launcher &&\n\t\t\tthis.appConfig.finsemble.servicesConfig.launcher.hasOwnProperty(\"persistURL\") ?\n\t\t\tthis.appConfig.finsemble.servicesConfig.launcher.persistURL :\n\t\t\tfalse;\n\t}\n\n\tgetDefaultConfig(componentType) {\n\t\tlet defaultConfig = Components[componentType];\n\t\treturn defaultConfig || null;\n\t}\n\n\tgetComponentConfig(cb = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tConfigClient.getValue({ field: \"finsemble.components\" }, (err, componentConfig) => {\n\t\t\t\t//adding the value property to make the input on onComponentListChanged consistent with the listener functionality on the configClient.\n\t\t\t\tthis.onComponentListChanged(null, { value: componentConfig });\n\t\t\t\tif (cb) cb();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tonComponentListChanged(err, componentConfig) {\n\t\tLogger.system.debug(\"Launcher getConfig finsemble.components\", componentConfig);\n\t\tthis.finsembleConfig.components = componentConfig.value;\n\t\tComponents = componentConfig.value;\n\n\t\t//Make sure our stackedWindow gets into the Components object!\n\t\tthis.addPredefinedComponents();\n\t\tcomponentArray = [];\n\t\tObject.keys(Components).map(function (component) {\n\t\t\tif (!Components[component].component) Components[component].component = {};\n\t\t\tComponents[component].component.type = component;\n\t\t\tcomponentArray.push(Components[component]);\n\t\t});\n\t\tRouterClient.transmit(\"Launcher.update\", {\n\t\t\tcomponentList: Components\n\t\t});\n\t}\n\n\t/**\n\t * Gets the list of components, listens for changes on the components.\n\t * @param {*} cb\n\t */\n\tasync getConfig(cb = Function.prototype) {\n\t\tLogger.system.debug(\"LauncherStartup: getConfig\");\n\n\t\t//todo, investigate -- see if this is used anymore.\n\t\tconst onCSSOverridePathChanged = function (err, cssConfig) {\n\t\t\tthis.finsembleConfig.cssOverridePath = cssConfig.value;\n\t\t};\n\n\t\tConfigClient.addListener({ field: \"finsemble.components\" }, this.onComponentListChanged.bind(this));\n\t\tConfigClient.addListener({ field: \"finsemble.cssOverridePath\" }, onCSSOverridePathChanged);\n\t\tlet { data: config } = await ConfigClient.getValues(null) as { data: { finsemble: any } };\n\t\tthis.appConfig = config;\n\t\tthis.finsembleConfig = config.finsemble; // replace manifest version of finsemble with processed version\n\t\tthis.persistURL = ConfigUtil.getDefault(config.finsemble, \"finsemble.servicesConfig.workspace.persistURL\", false);\n\t\tcb();\n\t}\n\n\t/**\n\t *\n\t * @param {*} params\n\t * @param {string} params.windowIdentifier\n\t *\n\t */\n\tgetGroupsForWindow(params) {\n\t\tLogger.system.debug(\"Get Groups Window is in\", params.windowIdentifier);\n\t\tvar groups = [];\n\t\tfor (let g of Object.keys(self.windowGroups)) {\n\t\t\tif (self.windowGroups[g].getWindow(params.windowIdentifier)) {\n\t\t\t\tgroups.push(g);\n\t\t\t}\n\t\t}\n\t\treturn groups;\n\t}\n\n\t/**\n\t * Gets the proper monitor for a config.\n\t * @param {string|number} params.monitor Monitor description, eg, \"0\" or \"primary\" or \"mine\".\n\t * @param {*} cb\n\t */\n\tasync getMonitorInfo(params, cb) {\n\t\t// default to the monitor of the window that called getMonitorInfo.\n\t\t// Somehow this was not needed in openfin\n\t\tparams.monitor = params.monitor || \"mine\";\n\t\t// Collect some asynchronous information we need to make our calculations. First all monitors.\n\t\tfunction addMonitors() {\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tutil.getAllMonitors(function (monitors) {\n\t\t\t\t\tparams.monitors = monitors;\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// Next figure out which monitor is associated with the windowIdentifier that was passed in\n\t\tfunction addWIMonitorInfo() {\n\t\t\treturn new Promise(function (resolve) {\n\t\t\t\tutil.getMonitor(params.windowIdentifier, null).then(function (monitorInfo) {\n\t\t\t\t\tLogger.system.debug(\"add monitor info\", params.windowIdentifier.windowName, monitorInfo);\n\t\t\t\t\tparams.wiMonitorInfo = monitorInfo;\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tawait addMonitors();\n\t\tawait addWIMonitorInfo();\n\n\t\t// based on params.monitor and our wiMonitor, figure out which monitor we really want\n\t\tlet getWhichMonitorParams = {\n\t\t\tcommandMonitor: params.monitor,\n\t\t\tmonitors: params.monitors,\n\t\t\tlaunchingMonitorPosition: params.wiMonitorInfo.position,\n\t\t\twindowIdentifier: params.windowIdentifier\n\t\t};\n\t\tutil.getWhichMonitor(getWhichMonitorParams, function (myMonitor) {\n\t\t\tself.addUnclaimedRectToMonitor(myMonitor);\n\t\t\tcb(null, myMonitor);\n\t\t});\n\t}\n\n\t/**\n\t * Gets all monitors.\n\t * @param {*} cb\n\t */\n\tgetMonitorInfoAll(cb = Function.prototype) {\n\t\tvar self = this;\n\t\tRouterClient.query(\"DockingService.getMonitorsFromDocking\", {}, function (err, message) {\n\t\t\tif (err) return cb(err);\n\t\t\tlet { monitors } = message.data;\n\t\t\tself.monitors = monitors;\n\t\t\tcb(null, self.monitors);\n\t\t});\n\t}\n\n\t/**\n\t * Gets the manifest that's stashed on the window's customData.\n\t * @param {*} cb\n\t */\n\tgetRawManifest(cb = Function.prototype) {\n\t\tconst getOptionsSuccess = (opts) => {\n\t\t\tif (opts.customData && opts.customData.manifest) {\n\t\t\t\tself.rawManifest = opts.customData.manifest;\n\t\t\t} else {\n\t\t\t\tLogger.system.error(\"getRawManifest cannot find manifest in custom data\");\n\t\t\t}\n\t\t\tcb(null);\n\t\t};\n\t\tconst getOptionsError = function (err) {\n\t\t\tLogger.system.error(\"getRawManifest getOptions Error\", err);\n\t\t\tcb(err);\n\t\t};\n\t\tSystem.Window.getCurrent()\n\t\t\t.getOptions(getOptionsSuccess, getOptionsError);\n\t}\n\n\t// get a new name based on sequential counter for base name (repeatable on restart)\n\tgetSequentialName(name) {\n\t\tvar keyData = localStorage.getItem(NAME_STORAGE_KEY);\n\t\tvar storageData = {};\n\t\tif (keyData) {\n\t\t\tstorageData = JSON.parse(keyData);\n\t\t}\n\t\tif (storageData[name] !== undefined) {\n\t\t\tstorageData[name]++;\n\t\t} else {\n\t\t\tstorageData[name] = 1;\n\t\t}\n\t\tlocalStorage.setItem(NAME_STORAGE_KEY, JSON.stringify(storageData));\n\n\t\tvar newName = name + \"-\" + storageData[name] + \"-\" + this.appConfig.startup_app.uuid;;\n\t\tLogger.system.debug(\"getSequentialName\", name, newName);\n\t\treturn newName;\n\t}\n\n\t/**\n\t * convert a list of window names or identifiers to a list of window objects\n\t */\n\tgetWindowsFromNamesOrIdentifiers(windowList, outputAsObject = false) {\n\t\tif (!Array.isArray(windowList)) windowList = [windowList];\n\t\tlet actualWindowList;\n\t\tif (outputAsObject) {\n\t\t\tactualWindowList = {};\n\t\t} else {\n\t\t\tactualWindowList = [];\n\t\t}\n\t\tfor (let i = 0; i < windowList.length; i++) {\n\t\t\tlet w = activeWindows.getWindow(windowList[i]);\n\t\t\tif (w) {\n\t\t\t\tif (outputAsObject) {\n\t\t\t\t\tactualWindowList[w.name] = w;\n\t\t\t\t} else {\n\t\t\t\t\tactualWindowList.push(w);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn actualWindowList;\n\t}\n\n\t/**\n\t * When each component finishes shutting down, it reports back to the Launcher via this channel.\n\t */\n\thandleShutdownCompleted(err, response) {\n\t\tif (this.shutdownList.waitFor.includes(response.data.name)) {\n\t\t\tthis.shutdownList.waitFor.splice(this.shutdownList.waitFor.indexOf(response.data.name), 1);\n\t\t}\n\n\t\tlet STATUS_MESSAGE = \"Component shutdownList completed, waiting on the following components to respond to the launcher:\" +\n\t\t\t_difference(this.shutdownList.componentsOpenAtShutdown, this.shutdownList.componentsResponded).join(\",\") +\n\t\t\t\". Waiting for the following components to complete shutdownActions\" + this.shutdownList.waitFor;\n\t\tLogger.system.debug(STATUS_MESSAGE);\n\t\tconsole.debug(STATUS_MESSAGE);\n\t}\n\n\t/**\n\t * After being notified that it needs to shutdown, the component will respond to the launcher. This message will tell the Launcher whether it should wait for the component to do some cleanup methods.\n\t */\n\thandleShutdownResponse(err, response) {\n\t\tLogger.system.debug(\"handleShutdownResponse\", response.data.name);\n\t\tthis.shutdownList.componentsResponded.push(response.data.name);\n\t\tif (response.data.waitForMe) {\n\t\t\tLogger.system.debug(\"handleShutdownResponse push to wait\", response.data.name);\n\t\t\tthis.shutdownList.waitFor.push(response.data.name);\n\t\t\treturn;\n\t\t}\n\t}\n\t/**\n\t * Sends a heartbeat to all open windows to see if anything died.\n\t */\n\theartbeat() {\n\t\tconst internalHeartbeatConfig =\n\t\t\tthis.finsembleConfig.services.windowService.config.heartbeatResponseTimeoutDefaults\n\t\tconst config = ConfigUtil.getDefault(\n\t\t\tthis.finsembleConfig,\n\t\t\t\"serviceConfig.window.heartbeatResponseTimeoutDefaults\",\n\t\t\t{}\n\t\t);\n\n\t\tRouterClient.addListener(\"Finsemble.heartbeat\", self.heartbeatListener);\n\n\t\tconst fitInRange = (x, min = internalHeartbeatConfig.min, max = internalHeartbeatConfig.max) => {\n\t\t\tif (x < min) {\n\t\t\t\tconsole.warn(`Heartbeat timeout interval must be above the minimum value ${min}. Using ${min}.`);\n\t\t\t\treturn min;\n\t\t\t}\n\t\t\tif (x > max) {\n\t\t\t\tconsole.warn(`Heartbeat timeout interval must be below the maximum value ${min}. Using ${min}.`);\n\t\t\t\treturn max;\n\t\t\t}\n\t\t\treturn x;\n\t\t}\n\n\t\tconst crashed = fitInRange(config.crashed || internalHeartbeatConfig.crashed);\n\t\tconst possiblyCrashed = fitInRange(config.possiblyCrashed || internalHeartbeatConfig.possiblyCrashed);\n\t\tconst notResponding = fitInRange(config.notResponding || internalHeartbeatConfig.notResponding);\n\n\t\tconst handleTransmit = (name: string, type: string) => RouterClient.transmit(HEARTBEAT_TIMEOUT_CHANNEL, { type, window: name });\n\t\tsetInterval(() => {\n\t\t\tvar date = Date.now();\n\t\t\tfor (let name of activeWindows.getWindowNames()) {\n\t\t\t\tvar activeWindow = activeWindows.getWindow(name);\n\t\t\t\t// Stacked windows do not send heartbeats.\n\t\t\t\tif (activeWindow && activeWindow.windowType !== \"StackedWindow\") {\n\t\t\t\t\tif (!activeWindow.lastHeartbeat) {\n\t\t\t\t\t\tactiveWindow.lastHeartbeat = Date.now();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t/**\n\t\t\t\t\t * None of this should be hard coded. Clients should be able to set what\n\t\t\t\t\t * ever intervals they want.\n\t\t\t\t\t *\n\t\t\t\t\t * @TODO Refactor this to read the props from config and just iterate\n\t\t\t\t\t * through them.. */\n\n\t\t\t\t\tconst crashedState = (date - activeWindow.lastHeartbeat) > crashed && !activeWindow.errorSent;\n\t\t\t\t\tconst possiblyCrashedState = (date - activeWindow.lastHeartbeat) > possiblyCrashed && !activeWindow.warningSent;\n\t\t\t\t\tconst notRespondingState = date - activeWindow.lastHeartbeat > notResponding && !activeWindow.notRespondingSent;\n\t\t\t\t\tconst nowRespondingState = date - activeWindow.lastHeartbeat <= notResponding && (activeWindow.errorSent || activeWindow.warningSent || activeWindow.notRespondingSent);\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Windows will appear crashed upon wake from sleep. If we get a signal that a window has crashed,\n\t\t\t\t\t * we wait 50ms for any wake events to fire and check the status again.\n\t\t\t\t\t */\n\t\t\t\t\tif (crashedState === true) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tif ((Date.now() - activeWindow.lastHeartbeat) > crashed && !activeWindow.errorSent) {\n\t\t\t\t\t\t\t\tactiveWindow.errorSent = true;\n\t\t\t\t\t\t\t\thandleTransmit(name, \"crashed\");\n\t\t\t\t\t\t\t\tLogger.system.error(\"Heartbeat Status: Crashed Window\", name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 50);\n\t\t\t\t\t} else if (possiblyCrashedState === true) {\n\t\t\t\t\t\tactiveWindow.warningSent = true;\n\t\t\t\t\t\thandleTransmit(name, \"possiblyCrashed\");\n\t\t\t\t\t\tLogger.system.warn(\"Heartbeat Status: Possibly Crashed Window\", name);\n\t\t\t\t\t} else if (notRespondingState === true) {\n\t\t\t\t\t\tactiveWindow.notRespondingSent = true;\n\t\t\t\t\t\thandleTransmit(name, \"notResponding\");\n\t\t\t\t\t\tLogger.system.warn(\"Heartbeat Status: Unresponsive Window\", name);\n\t\t\t\t\t} else if (nowRespondingState === true) {\n\t\t\t\t\t\tLogger.system.info(\"Heartbeat Status: Window has returned to a responsive state\", name);\n\t\t\t\t\t\thandleTransmit(name, \"nowResponding\");\n\n\t\t\t\t\t\t//set all state variables to false now that the window is responding\n\t\t\t\t\t\tactiveWindow.warningSent = false;\n\t\t\t\t\t\tactiveWindow.errorSent = false;\n\t\t\t\t\t\tactiveWindow.notRespondingSent = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, 1000)\n\t}\n\n\theartbeatListener(err, response) {\n\t\tif (response.data.type == \"component\") {\n\t\t\tvar activeWindow = activeWindows.getWindow(response.data.windowName);\n\t\t\tif (activeWindow) {\n\t\t\t\tactiveWindow.lastHeartbeat = Date.now();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Reset all window heartbeats\n\tresetHeartbeats() {\n\t\tfor (let name of activeWindows.getWindowNames()) {\n\t\t\tlet activeWindow = activeWindows.getWindow(name);\n\t\t\tactiveWindow.lastHeartbeat = Date.now();\n\t\t}\n\t}\n\n\t/**\n\t * Hyperfocuses a list, group, componentType or all windows\n\t * @param {*} response.data.windowList list of window names or window identifiers\n\t * @param {*} response.data.groupName group name\n\t * @param {*} response.data.componentType component type\n\t */\n\thyperFocus(err, response) {\n\t\tlet windowGroup;\n\t\tif (response.data && response.data.groupName) {\n\t\t\twindowGroup = self.windowGroups[response.data.groupName];\n\t\t\tdelete response.data.groupName;\n\t\t} else {\n\t\t\twindowGroup = activeWindows;\n\t\t}\n\n\t\tif (response.data && response.data.componentType) {\n\t\t\tresponse.data.windowList = windowGroup.findAllByComponentType(response.data.componentType);\n\t\t\tdelete response.data.componentType;\n\t\t} else if (!response.data.windowList) {\n\t\t\tresponse.data.windowList = windowGroup.getWindowNames();\n\t\t}\n\t\tresponse.functionName = \"hyperFocus\";\n\t\tthis.executeWindowGroupFunctionByListGroupOrType(response);\n\t}\n\n\t// returns turn if window name is already in use by either active or pending-active window\n\tisWindowNameAlreadyUsed(windowName) {\n\t\tvar result1 = activeWindows.getWindow(windowName) ? true : false;\n\t\tvar result2 = this.pendingWindows.hasOwnProperty(windowName);\n\t\tLogger.system.debug(\"isWindowNameAlreadyUsed\", windowName, \"Result1\", result1, \"Result2\", result2, \"Pending\", this.pendingWindows);\n\t\treturn result1 || result2; // if active window or pending window\n\t}\n\n\t/**\n\t * Retrieves a list of components from the configService.\n\t * @param {function} cb callback.\n\t * @private\n\t */\n\tloadComponents(cb = Function.prototype) {\n\t\tLogger.system.log(\"LauncherStartup: loadComponents finsemble config\", self.finsembleConfig);\n\t\tComponents = {};\n\t\t// Mode allows us to optionally include a set of components. Normally, any component with component.mode set\n\t\t// in its config will be skipped. If the generalConfig.mode matches however then we allow it through.\n\t\tvar mode = self.finsembleConfig.mode;\n\t\tif (!Array.isArray(mode)) {\n\t\t\tmode = [mode];\n\t\t}\n\n\t\tObject.keys(self.finsembleConfig.components).forEach((componentType) => {\n\t\t\tvar config = self.finsembleConfig.components[componentType];\n\t\t\t//var componentMode = config.component ? config.component.mode : \"\";\n\n\t\t\t// If the component doesn't have a mode then it's safe, always allow in our list\n\t\t\t/*if (componentMode && componentMode !== \"\") {\n\t\t\t\t// component.mode can either be a string or an array of strings. So rationalize it to an array.\n\t\t\t\tif (componentMode.constructor !== Array) {\n\t\t\t\t\tcomponentMode = [componentMode];\n\t\t\t\t}\n\n\t\t\t\tcommonModes = componentMode.filter(function (n) {\n\t\t\t\t\treturn mode.indexOf(n) !== -1;\n\t\t\t\t});\n\n\n\t\t\t\t// If the current mode isn't in the list of modes for the component then don't include it in our list\n\t\t\t\tif (!commonModes.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}*/\n\t\t\tvar validUrl;\n\t\t\tLogger.system.debug(\"config.window.url\", config);\n\t\t\ttry {\n\t\t\t\tvalidUrl = new URL(config.window.url);\n\t\t\t\tconfig.window.url = validUrl.href;\n\t\t\t} catch (e) {\n\t\t\t\tif (config.window.url) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvalidUrl = new URL(self.finsembleConfig.moduleRoot + \"/\" + config.window.url);\n\t\t\t\t\t\tconfig.window.url = validUrl.href;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tLogger.system.error(\"Invalid URL\", config.window.url);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!config.foreign) {\n\t\t\t\tconfig.foreign = {};\n\t\t\t}\n\t\t\tif (!config.component) {\n\t\t\t\tconfig.component = {};\n\t\t\t}\n\t\t\tconfig.component.type = componentType;\n\t\t\tcomponentArray.push(config);\n\t\t\tComponents[componentType] = config;\n\t\t});\n\t\tthis.addPredefinedComponents();\n\t\tcb(null, Components);\n\t\treturn Components;\n\t}\n\n\t/**\n\t *\n\t * @param {*} response  - query responder response\n\t * @param {String} response.data.componentType - The component name\n\t * @param {Object} response.data.manifest - \"\"\n\t */\n\tregisterComponent(err, message) {\n\t\tif (!message.data) {\n\t\t\treturn message.sendQueryResponse(\"no data passed in\");\n\t\t}\n\t\tlet params = message.data;\n\t\tif (params.manifest && typeof params.manifest !== \"object\") {\n\t\t\tparams.manifest = new LauncherDefaults().componentDescriptor;\n\t\t} else {\n\t\t\t//fill in any information that we don't have on the manifest with our defaults.\n\t\t\t//If the user failed to provide a URL, they get an unknown component.\n\t\t\tlet defaultConfig = this.getDefaultConfig(this.getUnknownComponentName());\n\t\t\tif (defaultConfig) {\n\t\t\t\tdefaultConfig = JSON.parse(JSON.stringify(defaultConfig));\n\t\t\t\tparams.manifest = merge(defaultConfig, params.manifest);\n\t\t\t}\n\t\t}\n\t\tif (!params.componentType || !params.manifest) {\n\t\t\t//return error\n\t\t\treturn message.sendQueryResponse(\"missing required fields\");\n\t\t}\n\t\t//validate manifest....@todo we need a way to do this\n\t\tif (Components[params.componentType]) {\n\t\t\tLogger.error(\"Launcher Servers:\", params.componentType, \"Already registered\");\n\t\t\treturn message.sendQueryResponse(null, \"Component already registered\");\n\t\t}\n\t\tComponents[params.componentType] = params.manifest;\n\t\tthis.update();\n\t\tmessage.sendQueryResponse(null, \"success\");\n\t}\n\n\t/**\n\t *\n\t * @param {*} response\n\t * @param {String} response.data.componentType - The component name\n\t */\n\tunRegisterComponent(err, message) {\n\t\tif (!message.data) {\n\t\t\treturn message.sendQueryResponse(\"no data passed in\");\n\t\t}\n\t\tlet params = message.data;\n\t\tif (!params.componentType) {\n\t\t\t//return error\n\t\t\treturn message.sendQueryResponse(\"missing required fields\");\n\t\t}\n\t\tif (Components[params.componentType]) {\n\t\t\tdelete Components[params.componentType];\n\t\t}\n\t\tthis.update();\n\t\tmessage.sendQueryResponse(null, \"success\");\n\n\t}\n\n\t/**\n\t * Force-kill/close a window if it is in a pending state (i.e. spawn didn't complete); otherwise do nothing.\n\t * @param {*} windowIdentifier of window to force kill\n\t */\n\tforceKillWindowIfPending(windowIdentifier: any): Promise<{ err: string }> {\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\ttry {\n\t\t\t\tLogger.system.warn(\"forceKillWindowIfPending\", windowIdentifier.name, windowIdentifier);\n\n\t\t\t\t// if window is pending because spawn never completed, then remove it and continue;\n\t\t\t\tif (this.pendingWindows[windowIdentifier.name]) {\n\t\t\t\t\tLogger.system.warn(\"forceKillWindowIfPending removing from pending\", windowIdentifier.name);\n\t\t\t\t\tdelete this.pendingWindows[windowIdentifier.name];\n\n\t\t\t\t\t// the window might not be there so best effort only.\n\t\t\t\t\twindowIdentifier.waitForReady = false;\n\n\t\t\t\t\tconst { wrap: windowToKill } = await FinsembleWindowInternal.getInstance(windowIdentifier);\n\n\t\t\t\t\twindowToKill._close({ force: true }, (err, result) => {\n\t\t\t\t\t\tLogger.system.warn(\"forceKillWindowIfPending -- window closed\", windowIdentifier.name, err, result);\n\t\t\t\t\t\tresolve({ err });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.warn(\"forceKillWindowIfPending is not pending\", windowIdentifier.name);\n\t\t\t\t\tresolve({ err: \"window is not pending\" });\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconst errorMessage = `forceKillWindowIfPending caught error: ${err}`;\n\t\t\t\tLogger.system.warn(errorMessage);\n\t\t\t\tresolve({ err: errorMessage });\n\t\t\t}\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t *\n\t * @private\n\t */\n\tasync finishSpawn(defaultComponentConfig, windowDescriptor, params, objectReceivedOnSpawn) {\n\t\tlet component = defaultComponentConfig.component.type;\n\t\tif (params.slave) {\n\t\t\tconst slaveIdentifier = {\n\t\t\t\twindowName: windowDescriptor.name,\n\t\t\t\tuuid: windowDescriptor.uuid\n\t\t\t}\n\t\t\tutil.getFinWindow(slaveIdentifier, (finWindow) => {\n\t\t\t\tself.makeSlave(finWindow, {\n\t\t\t\t\twindowName: params.previousWindow.name,\n\t\t\t\t\tuuid: params.previousWindow.uuid\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\twindowDescriptor.uuid = windowDescriptor.uuid || util.guuid(); // Temp fix for stackedWindow (whole section needs rework)\n\n\t\tlet result = {\n\t\t\twindowIdentifier: {\n\t\t\t\twindowName: windowDescriptor.name,\n\t\t\t\tuuid: windowDescriptor.uuid,\n\t\t\t\tcomponentType: component,\n\t\t\t\tmonitor: windowDescriptor.monitorInfo,\n\t\t\t\twindowType: windowDescriptor.windowType\n\t\t\t},\n\t\t\twindowDescriptor: windowDescriptor\n\t\t};\n\n\n\n\t\t//Deprecated value: this.windowOptions.customData.component.canMinimize. New value: this.windowOptions.customData.foreign.services.windowService.allowMinimize\n\t\tlet service = windowDescriptor.customData.foreign.services && windowDescriptor.customData.foreign.services.windowService !== undefined ? \"windowService\" : \"dockingService\";\n\n\t\t//Look first in the new location.\n\t\tlet canMinimize = windowDescriptor.customData.foreign.services[service].allowMinimize;\n\t\tlet canMaximize = windowDescriptor.customData.foreign.services[service].allowMinimize;\n\n\t\t//If the new location isn't found, fall back to deprecated version\n\t\tif (canMinimize === undefined) {\n\t\t\tcanMinimize = windowDescriptor.customData.component.canMinimize;\n\t\t}\n\t\tif (canMaximize === undefined) {\n\t\t\tcanMaximize = windowDescriptor.customData.component.canMaximize;\n\t\t}\n\n\t\t// Store references to the actual window we've created. Clients can use LauncherClient.getRawWindow()\n\t\t// to get direct references for (god forbid) direct DOM manipulation\n\t\tvar activeWindowParams = {\n\t\t\tname: windowDescriptor.name,\n\t\t\tuuid: windowDescriptor.uuid,\n\t\t\t// If they left canMinimize un-configured, coerce undefined to be true, which is the default\n\t\t\tcanMinimize: canMinimize !== false,\n\t\t\tcanMaximize: canMaximize !== false,\n\t\t\twindowIdentifier: result.windowIdentifier,\n\t\t\twindowDescriptor: windowDescriptor,\n\t\t\tparams: params,\n\t\t\twindowType: windowDescriptor.windowType\n\t\t};\n\n\t\tif (windowDescriptor.windowType === \"FinsembleNativeWindow\" || windowDescriptor.windowType === \"StackedWindow\") { // Since objectReceivedOnSpawn is the only thing that doSpawn gets to send to finishSpawn, this is where everything that the wrap needs resides\n\t\t\t//@note objectReceivedOnSpawn used to be 'finWindow\n\t\t\t//@todo figure out why the hell we need this information to wrap the thing...should just need the name??\n\t\t\tactiveWindowParams = merge(objectReceivedOnSpawn, activeWindowParams);\n\t\t}\n\n\t\tLogger.system.debug(\":wrap: finishSpawn\", activeWindowParams);\n\t\tlet { wrap: activeWindow } = await FinsembleWindowInternal.getInstance(activeWindowParams);\n\t\tactiveWindow.wrapReady();\n\t\tactiveWindow.addEventListener(\"closed\", self.remove);\n\t\tactiveWindow.windowDescriptor = windowDescriptor; // background note: the windowDescriptor was on the public instance, but not the private, so adding it here.  Required elsewhere (e.g. getActiveDescriptors)\n\t\tactiveWindows.addWindow(activeWindow);\n\n\t\tdelete this.pendingWindows[windowDescriptor.name]; // active now so no long pending...can remove\n\n\t\t// Add window to a group if needed\n\t\tif (params.groupName) {\n\t\t\tif (!this.windowGroups[params.groupName]) {\n\t\t\t\tthis.createWindowGroup(null, {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tgroupName: params.groupName,\n\t\t\t\t\t\twindowList: [result.windowIdentifier]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet actualWindow = this.getWindowsFromNamesOrIdentifiers([result.windowIdentifier]);\n\t\t\t\tthis.windowGroups[params.groupName].addWindows(actualWindow);\n\t\t\t\tthis.sendUpdatesToWindows(actualWindow);\n\t\t\t}\n\t\t}\n\n\t\tLogger.perf.debug(\"Spawn\", \"stop\", component, \"from finishSpawn\");\n\n\t\treturn Promise.resolve({ err: null, data: result });\n\t}\n\n\t/**\n\t * Makes a slave window which will automatically close when the master closes.\n\t * @param  {finWindow} slave  An OpenFin window\n\t * @param  {LauncherClient~windowIdentifier} master The window identifier of the master\n\t */\n\tmakeSlave(slave, master) {\n\t\tutil.getFinWindow(master, function (masterWindow) {\n\t\t\tif (masterWindow) {\n\t\t\t\tmasterWindow.addEventListener(\"closed\", function () {\n\t\t\t\t\tLogger.system.debug(\"makeSlave close\", slave.name);\n\t\t\t\t\tslave.close();\n\t\t\t\t});\n\t\t\t\t//@TODO, add more. Linker blurs when you do anything\n\t\t\t\t//but other windows might want to reposition themselves\n\t\t\t\t//on move, maximize, minimize, etc\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Minimizes a list, group or all windows\n\t * @param {*} response.data.windowList list of window names or window identifiers\n\t * @param {*} response.data.groupName group name\n\t * @param {*} response.data.componentType component type\n\t */\n\tminimizeWindows(err, response) {\n\t\tif (!response) response = {};\n\t\tresponse.functionName = \"minimize\";\n\t\tthis.executeWindowGroupFunctionByListGroupOrType(response);\n\t}\n\n\t/**\n\t * See doMonitorAdjustments()\n\t * Adds any motherless components. These would be any spawnOnAllMonitor components that are missing from a\n\t * particular monitor, presumably because the monitor just got added.\n\t */\n\tmonitorAddMotherless(monitors, components, done) {\n\t\tlet howMany = 0;\n\t\tfor (let i = 0; i < monitors.length; i++) {\n\t\t\tfor (let c in components) {\n\t\t\t\tlet component = components[c];\n\t\t\t\thowMany++;\n\t\t\t\tif (!component[i]) {\n\t\t\t\t\tself.spawn({ component: c, monitor: i }, function (err, result) {\n\t\t\t\t\t\tresult.windowDescriptor.spawnOnAllMonitors = true; // WHY WHY WHY DO WE NOT DO THIS BEFORE HAND\n\t\t\t\t\t\thowMany--;\n\t\t\t\t\t\tif (!howMany) {\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout(function () { //prevent multiple events and showWindow stuff is handled by adjustMonitorDimensions\n\t\t\t\t\t\thowMany--;\n\t\t\t\t\t\tif (!howMany) {\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 50);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!howMany) {\n\t\t\tdone();\n\t\t}\n\t}\n\n\t/**\n\t * See doMonitorAdjustments()\n\t * Adjust component dimensions. Since the monitor size may have changed we need to adjust any components\n\t * that had previously made assumptions about monitor size (such as a toolbar that is supposed to stretch across\n\t * the top of the screen). We cycle through any components that have made a \"claim\" on monitor space and then\n\t * simply call showWindow() with their original params in order to give them a chance to resettle.\n\t */\n\tmonitorAdjustDimensions(done) {\n\t\tLogger.system.debug(\"monitorAdjustDimensions\");\n\t\tvar claims = {};\n\t\tvar allActiveWindows = activeWindows.getWindows();\n\t\tfor (let windowName in allActiveWindows) {\n\t\t\tlet entry = allActiveWindows[windowName];\n\t\t\tvar w = entry.windowDescriptor;\n\t\t\tif (!w) continue;\n\t\t\t// Create a stash of all claims, and then unclaim them to set our\n\t\t\t// algorithm back to square\n\t\t\tif (w.claimMonitorSpace) {\n\t\t\t\tclaims[windowName] = entry;\n\t\t\t\tdelete w.claimMonitorSpace;\n\t\t\t}\n\t\t}\n\n\t\t// Now we simply call showWindow for each item in our stash with the original\n\t\t// params. This will reset it back, and should cause it to adjust accordingly\n\t\t// to the monitor it is now sitting on.\n\t\tfor (let claimedName in claims) {\n\t\t\tlet entry = claims[claimedName];\n\t\t\tself.showWindow(entry.windowIdentifier, entry.params, function () {\n\t\t\t\tentry.windowDescriptor.claimMonitorSpace = true;\n\t\t\t});\n\t\t}\n\n\t\tdone();\n\t}\n\n\t/**\n\t * see doMonitorAdjustments()\n\t * Removes any orphaned components. These would be any spawnOnAllMonitor components that are now located\n\t * on a different monitor than they started. We simply compare their existing monitor with the one they were\n\t * spawned upon, and remove them if they aren't where they belong.\n\t */\n\tmonitorRemoveOrphans(monitors, components, done) { // All this stuff only works for OF Windows\n\t\tlet allActiveWindows = activeWindows.getWindows();\n\t\tlet howMany = 0;\n\t\tfor (let w in allActiveWindows) {\n\t\t\tlet win = allActiveWindows[w];\n\t\t\tlet windowDescriptor = win.windowDescriptor;\n\t\t\tif (windowDescriptor.customData.component.spawnOnAllMonitors) {\n\t\t\t\tlet componentType = windowDescriptor.customData.component.type;\n\t\t\t\tif (!components[componentType]) {\n\t\t\t\t\tcomponents[componentType] = [];\n\t\t\t\t}\n\t\t\t\tlet componentMonitor = windowDescriptor.monitorInfo;\n\t\t\t\tif (!monitors[componentMonitor]) { // remove window if no monitor - do we want to remove the window? might be better for performance if we let it stick around.\n\t\t\t\t\thowMany++;\n\t\t\t\t\twin.close(null, function () {\n\t\t\t\t\t\thowMany--;\n\t\t\t\t\t\tif (!howMany) {\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse components[componentType][windowDescriptor.monitorInfo] = win;\n\t\t\t}\n\t\t}\n\t\tif (!howMany) {\n\t\t\tdone();\n\t\t}\n\t}\n\n\t/**\n\t * Removes a component. This is called when a window receives a closed event.\n\t * If the window is still open then it is closed.\n\t *\n\t * @param  {string}   windowName Name of window that was closed\n\t */\n\tremove(event) {\n\t\tlet windowName;\n\t\tif (event.data) { // The stack close triggers a wrapper event. However, Openfin Close does not. Need to investigate.\n\t\t\twindowName = event.data.name;\n\t\t} else {\n\t\t\twindowName = event;\n\t\t}\n\n\t\tLogger.system.info(\"Launcher.remove: windowName\", windowName);\n\n\t\tif (!windowName) return;\n\t\t//this block is for legacy support. all calls to remove in the Launcher pass in the windowDescriptor. The old functionality was to pass in a window name.\n\t\tif (typeof windowName !== \"string\") {\n\t\t\tlet descriptor = JSON.parse(JSON.stringify(windowName));\n\t\t\twindowName = descriptor.name;\n\t\t}\n\t\tvar activeWindow = activeWindows.getWindow(windowName);\n\n\t\tif (!activeWindow) {\n\t\t\tLogger.system.warn(\"Launcher.remove: Active Window not found\", windowName);\n\t\t\treturn;\n\t\t}\n\t\t//This is the only place in the application where we remove close listeners. In versions of 8.X, Openfin had a bug where if you remove one closed listener, all closed listeners would be removed.\n\t\tactiveWindow.removeEventListener(\"closed\", self.remove);\n\t\tLogger.system.debug(\"Launcher.remove: this.remove\", activeWindow);\n\n\t\tif (activeWindow.windowDescriptor && activeWindow.windowDescriptor.claimMonitorSpace) { // stacked windows will have these properties\n\t\t\tself.getMonitorInfoAll(function (monitors) {\n\t\t\t\tRouterClient.publish(\"monitorInfo\", monitors);\n\t\t\t});\n\t\t}\n\n\t\t//remove the window from all groups\n\t\tif (self.windowGroups) {\n\t\t\tfor (let g of Object.keys(self.windowGroups)) {\n\t\t\t\tlet group = self.windowGroups[g];\n\t\t\t\tgroup.removeWindows([windowName]);\n\t\t\t\t//if group is empty delete it\n\t\t\t\tif (!Object.keys(group.getWindows()).length) {\n\t\t\t\t\tgroup.destroy();\n\t\t\t\t\tdelete self.windowGroups[g];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tactiveWindows.removeWindows([windowName], () => {\n\t\t\tLogger.system.debug(\"launcher.remove wrappers for window\", windowName);\n\t\t\t//MyWrapManager.remove({ identifier: { windowName: windowName } }, () => {\n\t\t\t//This is to prevent workspaces/stackManager from catching this event and removing the window. Might be better for the launcher to send out a note to everyone who cares \"Hey guys, I'm shutting down, go ahead and remove any listeners that you don't want to accidentally fire when these windows start closing\". This is the expedient fix. That would probably be better, but require more architectural changes and testing.\n\t\t\tif (self.shuttingDown) {\n\t\t\t\tLogger.system.log(\"Component removed.\", windowName, \"Not transmitting the windowClosed event because the application is shutting down\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//Given the context above, we use the router to transmit out an event instead of relying on openfin window events. The WorkspaceService is currently the only thing listening for this message, so it can know when to load the next workspace.\n\t\t\t// DH 2/27/2019 - This could easily be swapped out for a call to WorkspaceClient.removeWindow().\n\t\t\t// We should ensure no paying clients are listening for this transmission and just remove it.\n\t\t\tRouterClient.transmit(LAUNCHER_SERVICE.WINDOW_CLOSED, { uuid: activeWindow.uuid, name: windowName });\n\t\t\t//});\n\t\t});\n\t}\n\n\tremoveUserDefinedComponent(message, cb) {\n\t\tvar err = null;\n\t\tif (Components[message.data.name]) {\n\t\t\tdelete Components[message.data.name];\n\t\t} else {\n\t\t\terr = \"Could not find component of type \" + message.data.name;\n\t\t}\n\t\tthis.update();\n\t\tcb(err, null);\n\t}\n\n\t/**\n\t * Will reset the spawn stagger.\n\t * @param {object} [params]\n\t * @param {number} [params.monitorPosition] position of monitor to reset the stagger for\n\t * @callback {function} [cb] optional callback.\n\t */\n\tresetSpawnStagger(params, cb = Function.prototype) {\n\t\tconst EMPTY_STAGGER = { x: null, y: null };\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = merge({}, params);\n\t\t\tparams = null;\n\t\t}\n\n\t\tif (params && typeof params.monitorPosition !== \"undefined\") {\n\t\t\tthis.lastOpenedMap[params.monitorPosition] = EMPTY_STAGGER;\n\t\t\tthis.lastAdjustedMap[params.monitorPosition] = EMPTY_STAGGER;\n\n\t\t} else {\n\t\t\tfor (var monitorPosition in this.lastOpenedMap) {\n\t\t\t\tthis.lastOpenedMap[monitorPosition] = EMPTY_STAGGER;\n\t\t\t\tthis.lastAdjustedMap[monitorPosition] = EMPTY_STAGGER;\n\n\t\t\t}\n\t\t}\n\n\t\tcb();\n\n\t}\n\n\t/**\n\t * Whenever windows are added/removed from groups, send updates to existing windows with their group memberships.\n\t * @param {} windowList\n\t */\n\tsendUpdatesToWindows(windowList) {\n\t\tLogger.system.debug(\"List of Updated Windows\", windowList);\n\t\tif (!windowList) return;\n\t\tif (!Array.isArray(windowList)) {\n\t\t\twindowList = [windowList];\n\t\t}\n\t\tfor (let w in windowList) {\n\t\t\tlet win = windowList[w];\n\t\t\tlet groups = self.getGroupsForWindow({ windowIdentifier: win.windowIdentifier });\n\t\t\tif (!Array.isArray(groups)) groups = [];\n\t\t\tif (win) RouterClient.publish(\"Finsemble.LauncherService.updateGroups.\" + win.name, groups);\n\t\t}\n\t}\n\n\t/**\n\t * Given some bounds, returns the monitor that the window is on.\n\t * @param {} bounds\n\t */\n\tgetMonitorByBounds(bounds) {\n\t\treturn util.Monitors.getMonitorFromScaledXY(bounds.left, bounds.top);\n\t}\n\n\t/**\n\t * Shows and/or relocates a native window. Not implemented yet!\n\t * @param  {LauncherClient~windowIdentifier} windowIdentifier The window to show/move\n\t * @param\tobject params\tParameters, see spawn()\n\t * @param function cb Callback\n\t */\n\n\tshowNativeWindow(windowIdentifier, params, cb) {\n\t\tself.deriveBounds(params).then(function (newWindowDescriptor) {\n\t\t\t// send newWindowDescriptor to assimilation service\n\t\t\tlet result = {\n\t\t\t\twindowIdentifier: {\n\t\t\t\t\twindowName: newWindowDescriptor.name,\n\t\t\t\t\tuuid: newWindowDescriptor.uuid,\n\t\t\t\t\tcomponentType: windowIdentifier.componentType,\n\t\t\t\t\tmonitor: newWindowDescriptor.monitorInfo\n\t\t\t\t},\n\t\t\t\twindowDescriptor: newWindowDescriptor\n\t\t\t};\n\t\t\tcb(null, result);\n\t\t});\n\t}\n\n\t/**\n\t * Shows and/or relocates a component window\n\t * @param  {LauncherClient~windowIdentifier} windowIdentifier The window to show/move\n\t * @param\tobject params\tParameters, see spawn()\n\t * @param function cb Callback\n\t */\n\tasync showWindow(windowIdentifier, params, cb) {\n\t\tLogger.system.info(\"Launcher.ShowWindow.showAt Start\", windowIdentifier, params);\n\t\t// do we have a windowName?\n\t\tlet activeWindow;\n\t\tif (windowIdentifier.windowName) {\n\t\t\tactiveWindow = activeWindows.getWindow(windowIdentifier.windowName);\n\t\t} else if (windowIdentifier.componentType) {\n\t\t\tactiveWindow = self.componentFinder(windowIdentifier);\n\t\t}\n\n\t\tif (activeWindow) { //window was found\n\t\t\tlet { data: bounds } = await activeWindow._getBounds();\n\t\t\twindowIdentifier = activeWindow.windowIdentifier;\n\t\t\t// The next 3 lines are needed because the windowIdentifier coming in from the client API is not guaranteed to have all of the information that we need in order to identify the window.\n\t\t\t// All that's needed to retrieve a window is a name. We need to know the componentType to derive default configs for this component.\n\t\t\twindowIdentifier = activeWindow.windowIdentifier;\n\t\t\twindowIdentifier.componentType = activeWindow.componentType;\n\t\t\tparams.windowIdentifier = windowIdentifier;\n\t\t\t//By default, return the first monitor. This method will be overwritten if the call requires a specific monitor.\n\t\t\tlet monitorFinder = () => {\n\t\t\t\tconst promiseResolver = (resolve) => {\n\t\t\t\t\tutil.getAllMonitors(function (monitors) {\n\t\t\t\t\t\treturn resolve(monitors[0]);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\treturn new Promise(promiseResolver);\n\t\t\t};\n\t\t\tvar specificMonitorFinder = function () {\n\t\t\t\tconst promiseResolver = (resolve) => {\n\t\t\t\t\tutil.getAllMonitors(function (monitors) {\n\t\t\t\t\t\tfor (var i = 0; i < monitors.length; i++) {\n\t\t\t\t\t\t\tif (monitors[i].position === params.monitor) {\n\t\t\t\t\t\t\t\treturn resolve(monitors[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(null);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\treturn new Promise(promiseResolver);\n\t\t\t};\n\n\t\t\tvar relativeMonitorFinder = function () {\n\t\t\t\tlet relativeWindow = activeWindows.getWindow(params.relativeWindow.windowName);\n\t\t\t\tconst promiseResolver = (resolve) => {\n\t\t\t\t\trelativeWindow._getBounds({}, async (err, relativeBounds) => {\n\t\t\t\t\t\tif (!err) {\n\t\t\t\t\t\t\tutil.Monitors.getMonitorFromScaledXY(relativeBounds.left, relativeBounds.top, (monitor) => {\n\t\t\t\t\t\t\t\t//let monitor = window.DockingMain.getMonitorForWindow(window.DockingMain.getWindow(relativeWindow.name));\n\t\t\t\t\t\t\t\t// Once we get the monitor, overwrite 'mine' with its position to avoid further calls\n\t\t\t\t\t\t\t\tutil.getAllMonitors(function (monitors) {\n\t\t\t\t\t\t\t\t\tfor (var i = 0; i < monitors.length; i++) {\n\t\t\t\t\t\t\t\t\t\tif (monitors[i].name === monitor.name) {\n\t\t\t\t\t\t\t\t\t\t\tparams.monitor = monitors[i].position;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tresolve(monitor);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tutil.getAllMonitors(function (monitors) {\n\t\t\t\t\t\t\t\treturn resolve(monitors[0]);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\treturn new Promise(promiseResolver);\n\t\t\t};\n\n\t\t\t// When asking for relative positioning, we're implicitly wanting to use the same monitor as the relativeWindow\n\t\t\tif (!params.monitor && params.position === \"relative\") {\n\t\t\t\tmonitorFinder = relativeMonitorFinder;\n\t\t\t}\n\t\t\t// If params.monitor is specified, try to get and use that monitor.\n\t\t\tif (typeof params.monitor !== \"undefined\") {\n\t\t\t\tif (params.monitor.unclaimedRect) { //have whichMonitor and not a monitor object\n\t\t\t\t\tmonitorFinder = function () {\n\t\t\t\t\t\treturn Promise.resolve(params.monitor);\n\t\t\t\t\t};\n\t\t\t\t} else if (params.monitor === \"primary\" || Number.isInteger(params.monitor)) { // asked to spawn on specific monitor\n\t\t\t\t\tmonitorFinder = specificMonitorFinder;\n\t\t\t\t} else if (params.monitor === \"mine\") { // asked to spawn on same monitor as parent\n\t\t\t\t\tmonitorFinder = relativeMonitorFinder;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet monitor: any = await monitorFinder();\n\t\t\t// Adjust parameters to what deriveBounds expects\n\t\t\t// default to the monitor that the window already lives on\n\n\t\t\tvar viewport = monitor ? monitor.unclaimedRect : null;\n\n\t\t\t// self.addUnclaimedRectToMonitor(monitor);\n\t\t\tif (!params.monitor && params.monitor !== 0) {\n\t\t\t\tparams.monitor = monitor.position;\n\t\t\t} else {\n\t\t\t\tif (params.monitor.unclaimedRect) {\n\t\t\t\t\tviewport = params.monitor.unclaimedRect;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (params.position === \"monitor\") {\n\t\t\t\tviewport = monitor ? monitor.monitorRect : null;\n\t\t\t} else if (params.position === \"available\") {\n\t\t\t\tviewport = monitor ? monitor.availableRect : null;\n\t\t\t}\n\t\t\t// A developer can call showWindow with a combination of left, right or width (top, bottom or height).\n\t\t\t// This essentially means that a developer can be setting both position and dimension, just position, or just dimension.\n\t\t\t// Furthermore, they might set one or other position (left or right, top or bottom). The following logic is meant\n\t\t\t// to maintain the dimension or position where not overridden by the developer. This is done by rationalizing\n\t\t\t// the window location to just top,left,width,height.\n\t\t\tvar leftAndRight = (params.left || params.left === 0) && (params.right || params.right === 0);\n\t\t\tvar calculateWidth = params.width || params.width === 0;\n\t\t\tcalculateWidth = calculateWidth || leftAndRight;\n\t\t\tif (!calculateWidth) {\n\t\t\t\tparams.width = bounds.width;\n\t\t\t} else if (calculateWidth === true) {\n\t\t\t\tif (viewport) params.width = (viewport.right - params.right) - (params.left - viewport.left);\n\t\t\t}\n\n\t\t\tvar topAndBottom = (params.top || params.top === 0) && (params.bottom || params.bottom === 0);\n\t\t\tvar calculateHeight = params.height || params.height === 0;\n\t\t\tcalculateHeight = calculateHeight || topAndBottom;\n\t\t\tif (!calculateHeight) {\n\t\t\t\tparams.height = bounds.height;\n\t\t\t} else if (calculateHeight === true) {\n\t\t\t\t// TODO fix this in case people have a vertical toolbar or something. this has issues as is.\n\t\t\t\tif (viewport) params.height = (viewport.bottom - params.bottom) - (params.top - viewport.top);\n\t\t\t}\n\n\t\t\t// If right but no left, calculate the left position of the window relative to the viewport.\n\t\t\tif (params.position !== \"relative\" && (params.right || params.right === 0) && !params.left && params.left !== 0 && viewport) {\n\t\t\t\tparams.left = (viewport.right - params.right) - params.width - viewport.left;\n\t\t\t}\n\n\t\t\t// If bottom but no top\n\t\t\tif (params.position !== \"relative\" && (params.bottom || params.bottom === 0) && !params.top && params.top !== 0 && viewport) {\n\t\t\t\tparams.top = (viewport.bottom - params.bottom) - params.height - viewport.top;\n\t\t\t}\n\n\t\t\t// If neither left nor right are set then maintain it's left position\n\t\t\tif (!params.left && params.left !== 0 && !params.right && params.right !== 0 && params.top !== \"adjacent\" && params.bottom !== \"adjacent\") {\n\t\t\t\tparams.left = bounds.left;\n\t\t\t}\n\n\t\t\t// If neither top nor right are set then maintain it's top position\n\t\t\tif (!params.top && params.top !== 0 && !params.bottom && params.bottom !== 0 && params.left !== \"adjacent\" && params.right !== \"adjacent\") {\n\t\t\t\tparams.top = bounds.top;\n\t\t\t}\n\n\t\t\t// Since we've already calculated the absolute position, we need to make sure deriveBounds respects those coordinates\n\t\t\tif (![\"relative\", \"unclaimed\"].includes(params.position)) params.position = \"monitor\";\n\t\t\t//params.bottom = null;\n\t\t\t//params.right = null;\n\t\t\tfunction showIt() {\n\t\t\t\tlet result = {\n\t\t\t\t\twindowIdentifier: {\n\t\t\t\t\t\twindowName: activeWindow.name,\n\t\t\t\t\t\tuuid: activeWindow.uuid,\n\t\t\t\t\t\tcomponentType: windowIdentifier.componentType,\n\t\t\t\t\t\tmonitor: newWindowDescriptor.monitorInfo\n\t\t\t\t\t},\n\t\t\t\t\twindowDescriptor: newWindowDescriptor\n\t\t\t\t};\n\t\t\t\tactiveWindow._show({},\n\t\t\t\t\tfunction () {\n\t\t\t\t\t\tLogger.system.info(\"Launcher.ShowWindow.showAt finished\", activeWindow.name);\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * 7/8/19 Joe - Previously this was assigning newWindowDescriptor defaults.\n\t\t\t\t\t\t * With all of the logic above to ensure params has every type of bounds,\n\t\t\t\t\t\t * it seems params should be checked first and only fall back to defaults\n\t\t\t\t\t\t * if any are missing (which doesn't seem like it would ever be the case)\n\t\t\t\t\t\t */\n\t\t\t\t\t\tlet dockingDescriptor = {\n\t\t\t\t\t\t\tleft: params.left || newWindowDescriptor.defaultLeft,\n\t\t\t\t\t\t\ttop: params.top || newWindowDescriptor.defaultTop,\n\t\t\t\t\t\t\tright: params.right || (newWindowDescriptor.defaultLeft + newWindowDescriptor.defaultWidth),\n\t\t\t\t\t\t\tbottom: params.bottom || (newWindowDescriptor.defaultTop + newWindowDescriptor.defaultHeight),\n\t\t\t\t\t\t\twidth: params.width || newWindowDescriptor.defaultWidth,\n\t\t\t\t\t\t\theight: params.height || newWindowDescriptor.defaultHeight,\n\t\t\t\t\t\t\tname: activeWindow.name,\n\t\t\t\t\t\t\tchangeType: 1\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t//If the show call doesn't prohibit autofocus, focus it. Search does this when showing search results.\n\t\t\t\t\t\tif (params.autoFocus !== false) {\n\t\t\t\t\t\t\t//This is so that any click elsewhere will hide the window.\n\t\t\t\t\t\t\tactiveWindow.focus();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//@todo, when docking is rewritten and the window wraps get more love, put this functionality into a the wrappers. Right now they don't have the router and I'm unsure how things are working with multiple routers in the same window.\n\t\t\t\t\t\tRouterClient.transmit(\"DockingService.updateWindowLocation\", { windowName: windowIdentifier.windowName, location: dockingDescriptor });\n\t\t\t\t\t\tif (cb) {\n\t\t\t\t\t\t\tcb(null, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t//Evaluates a given params property. Returns true if the window to show is ephemeral/the given parameter is a string, or the value is missing, otherwise returns false\n\t\t\tconst paramMissingOrString = (prop) => {\n\t\t\t\tconst param = params[prop];\n\t\t\t\tif (params.ephemeral || isNumber(param) === false || typeof param === \"string\") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tlet newWindowDescriptor = await self.deriveBounds(params);\n\t\t\t//If the window is not ephemeral or the bounds contained in params aren't strings, use the passed values. Otherwise use the values calculated from 'deriveBounds'\n\t\t\tlet newBounds = {\n\t\t\t\tleft: paramMissingOrString(\"left\") ? newWindowDescriptor.defaultLeft : params.left,\n\t\t\t\ttop: paramMissingOrString(\"top\") ? newWindowDescriptor.defaultTop : params.top,\n\t\t\t\tright: paramMissingOrString(\"right\") ? (newWindowDescriptor.defaultLeft + newWindowDescriptor.defaultWidth) : params.right,\n\t\t\t\tbottom: paramMissingOrString(\"bottom\") ? (newWindowDescriptor.defaultTop + newWindowDescriptor.defaultHeight) : params.bottom,\n\t\t\t\twidth: paramMissingOrString(\"width\") ? newWindowDescriptor.defaultWidth : params.width,\n\t\t\t\theight: paramMissingOrString(\"height\") ? newWindowDescriptor.defaultHeight : params.height\n\t\t\t};\n\t\t\tactiveWindow._setBounds({ bounds: newBounds }, showIt);\n\n\t\t} else { //window not found\n\t\t\tif (params.spawnIfNotFound && windowIdentifier.componentType) {\n\t\t\t\tif (windowIdentifier.windowName) {\n\t\t\t\t\tparams.name = windowIdentifier.windowName;\n\t\t\t\t}\n\t\t\t\tparams.component = windowIdentifier.componentType;\n\t\t\t\tLogger.system.debug(\"Launcher.ShowWindow.show spawn\", windowIdentifier);\n\t\t\t\tself.spawn(params, (err, data) => {\n\t\t\t\t\tLogger.system.debug(\"Launcher.ShowWindow.show spawn complete\", windowIdentifier);\n\t\t\t\t\tcb(err, data);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcb(\"RouterService:showWindow. Requested window not found.\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Rewrite of shutdownComponents to call close on components.\n\t * @param {function} done\n\t */\n\tshutdownComponents(done) {\n\t\t// assume done if everybody doesn't close within alloted time so dependencies can close and shutdownList can continue.\n\t\tlet shutdownTimeout = this.finsembleConfig.shutdownTimeout ? this.finsembleConfig.shutdownTimeout - 2000 : 8000;\n\t\tshutdownTimeout = Math.max(shutdownTimeout, 0); // prevent this from going negative if someone sets a very low shutdownTimeout.\n\t\tvar myTimeout = setTimeout(() => {\n\t\t\tdone();\n\t\t}, shutdownTimeout);\n\n\t\tasyncForEach(activeWindows.windows, (win, callback) => {\n\t\t\t(win as BaseWindow).close({ removeFromWorkspace: false, ignoreParent: true }, callback);\n\t\t}, () => {\n\t\t\t// make sure done doesn't get called back twice\n\t\t\tclearTimeout(myTimeout);\n\t\t\tdone();\n\t\t});\n\t}\n\n\t/**\n\t * Removes disallowed parameters before we pass data into compileWindowDescriptor.\n\t * @param params SpawnParams\n\t */\n\t_removeDisallowedSpawnParams(params: SpawnParams) {\n\t\t// Delete securityPolicy and permissions properties\n\t\t// User may try to pass them to override our security settings\n\t\tif (params.options) {\n\t\t\tdelete params.options.securityPolicy;\n\t\t\tdelete params.options.permissions;\n\t\t}\n\n\t\t// params is of type spawnParams. SecurityPolicy is not a supported parameter, so we don't want to put it into the type definition and have it documented.\n\t\t// the (as any) cast is here so that typescript can build.\n\t\tdelete (params as any).securityPolicy;\n\t\tdelete (params as any).permissions;\n\t\treturn params;\n\t}\n\t/**\n\t* Launches a component.\n\t* @param {object} params See LauncherClient\n\t* @param {function} cb Callback\n\t*/\n\tasync spawn(params: SpawnParams, cb: StandardCallback) {\n\t\tlet errorString: any = null;\n\t\tlet descriptor: any = null;\n\n\t\tlet component = params.component;\n\t\t// This fixes a bug in our workspace save. We save everything and preload scripts in here overwrites what we actually want to use.\n\t\t//Loop through any preload scripts and remove FSBL\n\t\tif (params.options && params.options.preloadScripts) {\n\t\t\tif (Array.isArray(params.options.preloadScripts)) {\n\t\t\t\tfor (let i = 0; i < params.options.preloadScripts.length; i++) {\n\t\t\t\t\tlet preloadItem = params.options.preloadScripts[i];\n\t\t\t\t\tif (preloadItem && preloadItem.url) {\n\t\t\t\t\t\tif (preloadItem.url.indexOf(\".FSBL.js\")) {\n\t\t\t\t\t\t\tdelete params.options.preloadScripts[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tLogger.system.debug(\"Launcher.spawn\", component, params);\n\t\t//If the Launcher is shutting down, don't allow new components to come online. If the dev wants components to come up, they should spawn them prior to transmitting the shutdownList request.\n\t\tif (this.shuttingDown) {\n\t\t\tLogger.system.log(\"Dropping spawn request. Application is shutting down\", component, params);\n\t\t\treturn;\n\t\t}\n\t\tLogger.perf.debug(\"Spawn\", \"start\", component, params);\n\n\t\t// if component is not a string then we are trying to spawn multiple components (this is still experimental and not yet used - it is planned so that group launches get easier via pins etc.)\n\t\tif (component && !(typeof component === \"string\" || component instanceof String)) {\n\t\t\tthis.spawnGroup(component, params, cb);\n\t\t\treturn;\n\t\t}\n\t\t// @todo Terry, cleanup, the following code is not robust. It should be rewritten to ensure that config is set by\n\t\t// default, and then overridden by params.options.customData. I think that when this is restructured\n\t\t// to the point that we no longer need the isAd-hoc flag then we'll know it's robust.\n\t\tvar config = this.getDefaultConfig(component);\n\n\n\n\t\t//@todo ad-hoc components should use preferences to save themselves, and then this block of code would be unnecessary.\n\t\tLogger.system.debug(\"Launcher.spawn 2\", component, params);\n\t\tif (!config) {\n\t\t\tif (get(params, \"options.customData.component.isUserDefined\")) {\n\t\t\t\tconfig = params.options.customData;\n\t\t\t} else if (params.url) {\n\t\t\t\t// No config, but has as URL. Treat as an ad-hoc component. This path is hit when using using window.open\n\t\t\t\t// from nativeOverrides.js\n\n\t\t\t\t//System will bomb if a component name has periods, the distributed store does\n\t\t\t\t//some string splitting on periods because of internal identifiers. (e.g. [...].Finsemble.[...])\n\t\t\t\tcomponent = params.name ? params.name.replace(/\\./g, \"-\") : params.url.replace(/\\./g, \"-\");\n\t\t\t\tconfig = {\n\t\t\t\t\twindow: {},\n\t\t\t\t\tcomponent: {}\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// Use a config to drive what component is shown if we can't find one in our list\n\t\t\t\tconst unknownComponentName = this.getUnknownComponentName() || \"404\";\n\t\t\t\tconst unknownConfig = this.getDefaultConfig(unknownComponentName) || UNKNOWN_DEFAULT_CONFIG;\n\t\t\t\tconfig = {\n\t\t\t\t\twindow: unknownConfig.window,\n\t\t\t\t\tcomponent: {\n\t\t\t\t\t\ttype: component,\n\t\t\t\t\t\tisUnknownComponent: true,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tcomponent = params.name;\n\t\t\t\tset(params, \"options, url\", get(config.window, \"url\"));\n\t\t\t\tLogger.system.warn(`No config found for component \"${component}\". The URL for this component will be set to the unknown component URL. When the config is restored, the URL will be reset.`)\n\t\t\t}\n\t\t}\n\n\t\t// singleton windows - TODO - test this\n\t\tLogger.system.debug(\"Launcher.spawn 3\", component, params);\n\t\tif (component && config.component.singleton) {\n\t\t\tvar existingWindows = activeWindows.findAllByComponentType(component);\n\t\t\tif (existingWindows.length) {\n\t\t\t\t// Bring existing window(s) to front\n\t\t\t\texistingWindows.forEach(window => window.bringToFront());\n\t\t\t\treturn cb(`A window for this singleton component already exists: ${existingWindows[0].name}`);\n\t\t\t}\n\t\t\tfor (let p in this.pendingWindows) {\n\t\t\t\tlet pendingWindow = this.pendingWindows[p];\n\t\t\t\tif (pendingWindow.componentType === component) {\n\t\t\t\t\treturn cb(\"A window for this singleton component is in the process of being spawned: \" + p);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar requestedPositioning = {\n\t\t\tleft: params.left,\n\t\t\tright: params.right,\n\t\t\ttop: params.top,\n\t\t\tbottom: params.bottom\n\t\t};\n\n\n\t\tparams = this._removeDisallowedSpawnParams(params);\n\t\t// window config from json is the default. params argument overrides.\n\t\tparams = merge(config.window, params);\n\n\t\t//System will bomb if a component name has periods, the distributed store does\n\t\t//some string splitting on periods because of internal identifiers. (e.g. [...].Finsemble.[...])\n\t\tif (params.options && params.options.name) params.name = params.options.name.replace(/\\./g, \"-\");\n\t\tlet descriptorName;\n\n\t\tif (params.addToWorkspace) {\n\t\t\tdescriptorName = params.name ? params.name : getRandomWindowName(component, this.appConfig.startup_app.uuid);\n\t\t} else {\n\t\t\tdescriptorName = params.name ? params.name : this.getSequentialName(component);\n\t\t}\n\n\t\t// Add to the workspace *if* the caller wants it added (for instance from the app launcher)\n\t\t// but *also* if the defaultComponentConfig for the component allows it to be added to workspaces (defaults to true)\n\t\tif (params.addToWorkspace && config.window.addToWorkspace !== false) {\n\t\t\tWorkspaceClient.addWindow({ ...params, name: descriptorName } as FinsembleWindowData);\n\t\t}\n\n\t\tif (requestedPositioning.left || requestedPositioning.right || requestedPositioning.top || requestedPositioning.bottom) {\n\t\t\tparams.left = requestedPositioning.left;\n\t\t\tparams.right = requestedPositioning.right;\n\t\t\tparams.top = requestedPositioning.top;\n\t\t\tparams.bottom = requestedPositioning.bottom;\n\t\t}\n\n\t\t// If we're set to spawnOnAllMonitors then we're going to call spawn() recursively, but\n\t\t// setting the monitor for each one. Note that since this is re-entrant, we need to make\n\t\t// sure we don't create an infinite loop! If params.monitor is set to anything other than \"all\"\n\t\t// then we bypass this.\n\t\tif (params.monitor === \"all\" || (config.component.spawnOnAllMonitors && (typeof (params.monitor) === \"undefined\"))) {\n\t\t\tthis.spawnOnAllMonitors(component, params, cb);\n\t\t\treturn;\n\t\t}\n\n\t\t//get default OpenFin config.\n\t\tvar baseDescriptor = new LauncherDefaults().windowDescriptor;\n\t\tif (params.options) {\n\t\t\tbaseDescriptor = merge(baseDescriptor, params.options);\n\t\t}\n\n\t\tbaseDescriptor.name = descriptorName;\n\t\t//Logger.system.debug(\"ComponentName\", baseDescriptor.name);\n\t\tbaseDescriptor.componentType = component; //@TODO, remove?\n\t\tbaseDescriptor.customData.component.type = component;\n\t\tbaseDescriptor.customData.cssOverride = self.cssOverride;\n\n\t\tlet retryAttempt = 0;\n\t\tLogger.system.debug(\"Launcher.spawn 4\", component, params);\n\n\t\tlet interval = setInterval(function () {\n\t\t\tretryAttempt++;\n\t\t\t//if not in pending and not in active then the window was closed.\n\t\t\tif (this.pendingWindows[baseDescriptor.name] && !activeWindows.getWindow(baseDescriptor.name)) {\n\t\t\t\t//console.warn(\"Failed To Launch \" + baseDescriptor.name + \" \" + retryAttempt);\n\t\t\t\tif (retryAttempt > 2) {\n\t\t\t\t\t// This is where failed windows used to be force closed and a respawn attempted but on some systems windows take a long time to load and force closing them or retrying spawning was causing problems. For now, just warn if things are taking too long.\n\t\t\t\t\t// Attempting to wrap the window while loading here was also taking a really long time. Just letting things take their course seems to eventually work.\n\t\t\t\t\tconsole.warn(\"Window Taking Really Long to Load:\", baseDescriptor.name);\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t}\n\t\t}, 5000);\n\n\t\tif (this.finsembleConfig.system.finsembleLibraryPath) {\n\t\t\tbaseDescriptor.preloadScripts = [{ url: this.finsembleConfig.system.finsembleLibraryPath }];\n\t\t} else {\n\t\t\tbaseDescriptor.preloadScripts = [];\n\t\t}\n\n\t\tconst preload = config.component.preload;\n\t\tif (preload) {\n\t\t\tconst inject = (Array.isArray(preload) ? preload : [preload])\n\t\t\t\t.map(x => ({ url: this._generateURL(x) }));\n\t\t\tbaseDescriptor.preloadScripts = Array.from(new Set([...inject, ...baseDescriptor.preloadScripts]));\n\t\t}\n\n\t\tbaseDescriptor.preload = baseDescriptor.preloadScripts;// For backwards  compatibility. preload hasn't been used since OF 7\n\t\t// url overrides the default component url (and can also be used to simply spawn a url). Ignore if spawned by workspace otherwise it will overwrite the url from workspace. This is dealt with at a later point with a check for the persistURL config item.\n\t\tif (params.url && !params.spawnedByWorkspaceService) {\n\t\t\tbaseDescriptor.url = params.url;\n\t\t}\n\n\t\t// Construct an object of values that may be used to calculate the windowType\n\t\tconst winConfig = {\n\t\t\twindowType: params.windowType,\n\t\t\tnative: params.native,\n\t\t\tcompound: baseDescriptor.compound,\n\t\t\ttype: baseDescriptor.type\n\t\t}\n\t\t\n\t\tparams.windowType = (util.getWindowType(winConfig) as WindowTypes);\t\t\n\t\tbaseDescriptor.windowType = params.windowType;\n\n\t\tLogger.system.debug(\"Launcher.spawn 5\", component, params);\n\n\t\tif ([\"NativeWindow\", \"FinsembleNativeWindow\"].includes(params.windowType)) {\n\t\t\t//baseDescriptor.native = params.native;\n\t\t\tbaseDescriptor.alias = params.alias;\n\t\t\tbaseDescriptor.path = params.path;\n\t\t\tbaseDescriptor.env = params.env;\n\t\t\tbaseDescriptor.arguments = params.arguments;\n\t\t}\n\t\tlet newWindowDescriptor = await this.deriveBounds(params);\n\t\tlet windowDescriptor = self.compileWindowDescriptor(config, params, baseDescriptor, newWindowDescriptor);\n\n\t\t// Preload the titlebar if component supports FSBLHeader and\n\t\t// deliveryMechanism is set to \"preload\" under -\n\t\t// Window Manager entry in configs/config.json\n\t\t// Check for customData.window.compound\n\t\tconst isCompoundWindow = lodashGet(windowDescriptor, 'customData.window.compound', false);\n\t\t// Check for customData.Window Manager.FSBLHeader\n\t\tconst componentSupportsHeader = !isCompoundWindow && lodashGet(\n\t\t\twindowDescriptor, ['customData', 'foreign',\n\t\t\t\t'components', 'Window Manager', 'FSBLHeader'], false);\n\t\t// Get the delivery mechanism value from config\n\t\tconst deliveryMechanism = this.finsembleConfig['Window Manager'].deliveryMechanism;\n\t\t// Make sure that component supports header and the delivery mechanism is set to \"preload\"\n\t\tif (componentSupportsHeader && deliveryMechanism === DELIVERY_MECHANISM.PRELOAD) {\n\t\t\tlet url = this._generateURL(Components['windowTitleBar'].window.url);\n\t\t\t// push into the preloadScripts array\n\t\t\tif (windowDescriptor.preloadScripts.findIndex(obj => obj.url === url) === -1) {\n\t\t\t\twindowDescriptor.preloadScripts.push({ url: url });\n\t\t\t}\n\n\t\t\t// preload is a shallow copy of preloadScripts but when loaded from another workspace they can point to different addresses in memory\n\t\t\tif (windowDescriptor.preload.findIndex(obj => obj.url === url) === -1) {\n\t\t\t\twindowDescriptor.preload.push({ url: url });\n\t\t\t}\n\t\t}\n\t\t// TODO, [Terry] persistURL logic should be in the workspace-service, not in launcher service.\n\t\t//[Ryan] the logic should sit in the workspace client( although I think we actually do it in the window client right now)\n\t\tif (params.spawnedByWorkspaceService) {\n\t\t\tlet persistURL = ConfigUtil.getDefault(config.foreign, \"foreign.services.workspace.persistURL\", this.persistURL);\n\t\t\tlet persistPath = ConfigUtil.getDefault(config.foreign, \"foreign.services.workspace.persistPath\", this.persistPath);\n\n\t\t\t/** DH 3/11/2019\n\t\t\t * We store the fact that a component had its URL swapped with the unknown component URL\n\t\t\t * on the windowDescriptor itself. Therefore, if that prop is true, we need to swap the\n\t\t\t * current URL with the one found in config. This logic will likely need to remain here\n\t\t\t * (where we have access to the component's config), regardless of where the persistURL\n\t\t\t * logic lands.*/\n\t\t\tconst isUnknownComponent = get(params, \"options.customData.component.isUnknownComponent\");\n\t\t\tif (!persistURL || isUnknownComponent) {\n\t\t\t\twindowDescriptor.url = config.window.url;\n\t\t\t}\n\t\t\tif (!persistPath || isUnknownComponent) {\n\t\t\t\twindowDescriptor.path = config.window.path;\n\t\t\t}\n\t\t}\n\t\tif (self.isWindowNameAlreadyUsed(windowDescriptor.name)) {\n\t\t\terrorString = `Cannot spawn new window: windowDescriptor.name ${windowDescriptor.name} already used`;\n\t\t} else {\n\t\t\t// save window properties of pending windows that are used later (e.g. to check dupes or for singleton windows) (will be removed in finishSpawn)\n\t\t\tthis.pendingWindows[windowDescriptor.name] = {\n\t\t\t\tuuid: windowDescriptor.uuid || System.Application.getCurrent().uuid,\n\t\t\t\tcomponentType: baseDescriptor.componentType,\n\t\t\t};\n\t\t\tlet spawnResult = await self.doSpawn(windowDescriptor);\n\t\t\tlet { err, data: objectReceivedOnSpawn } = spawnResult;\n\t\t\tLogger.system.info(windowDescriptor.name, \"Inside LauncherService.spawn(), before \");\n\t\t\tif (err) {\n\t\t\t\terrorString = err;\n\t\t\t} else {\n\t\t\t\tlet { err, data } = await self.finishSpawn(config, windowDescriptor, params, objectReceivedOnSpawn);\n\t\t\t\tif (err) {\n\t\t\t\t\terrorString = err;\n\t\t\t\t} else {\n\t\t\t\t\tdescriptor = data;\n\t\t\t\t}\n\t\t\t\tLogger.system.info(windowDescriptor.name, \"Inside LauncherService.spawn(), after \");\n\t\t\t}\n\t\t}\n\n\t\tif (errorString) {\n\t\t\tLogger.system.error(errorString);\n\t\t}\n\n\t\tcb(errorString, descriptor);\n\t}\n\n\t/**\n\t * Takes a file path and converts it into preload URL, second argument makes it possible\n\t * to write test for this method in the future.\n\t * @param path The file path\n\t * @param applicationRoot Application root from finsemble config or specified one\n\t */\n\t_generateURL(path: string, applicationRoot?: string): string {\n\t\tconst appRoot = applicationRoot || this.finsembleConfig.applicationRoot\n\t\tlet url;\n\t\ttry {\n\t\t\turl = (new URL(path)).href;\n\t\t} catch (e) {\n\t\t\turl = `${appRoot}/components/mindcontrol/${path}`\n\t\t}\n\t\treturn url;\n\t}\n\n\tgetUnknownComponentName() {\n\t\treturn this.appConfig.finsemble.servicesConfig && this.appConfig.finsemble.servicesConfig.launcher &&\n\t\t\tthis.appConfig.finsemble.servicesConfig.launcher.hasOwnProperty(\"unknownComponent\") ?\n\t\t\tthis.appConfig.finsemble.servicesConfig.launcher.unknownComponent :\n\t\t\tnull;\n\t}\n\t/**\n\t* Launches a copy of the requested component on each of a user's monitors.\n\t* @param {string} component The type of the component to launch\n\t* @param {object} params See spawn.\n\t* @param {function} cb Callback\n\t* @todo use asyncLib for spawning here. Get rid of the `remaining` var.\n\t*/\n\tasync spawnOnAllMonitors(component, params, cb) {\n\t\t//Gets all monitors and pushes a spawn call for each monitor to an array of async functions.\n\t\tthis.getMonitorInfoAll((err, monitors) => {\n\t\t\tlet tasks = [];\n\t\t\tmonitors.forEach((monitor) => {\n\t\t\t\ttasks.push((done) => {\n\t\t\t\t\tvar paramCopy = JSON.parse(JSON.stringify(params));\n\t\t\t\t\tparamCopy.monitor = monitor.position;\n\t\t\t\t\tparamCopy.component = component;\n\t\t\t\t\tself.spawn(paramCopy, function (err, result) {\n\t\t\t\t\t\tif (!err) {\n\t\t\t\t\t\t\tresult.windowDescriptor.spawnOnAllMonitors = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\tasyncParallel(tasks, (err) => {\n\t\t\t\tcb(err);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Spawns an OF window, or sends a request to the native service to spawn a native window.\n\t * Callback returns a handle to the new window\n\t* @param {LauncherClient~windowDescriptor} windowDescriptor The descriptor to launch\n\t* @param {function} cb Callback\n\t*/\n\tdoSpawn(windowDescriptor: WindowDescriptor, cb = Function.prototype): Promise<{ err: any, data: any }> {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tthis.createSplinterAndInject.createWindow({ windowDescriptor }, (err, windowIdentifier) => {\n\t\t\t\tLogger.system.debug(\"doSpawn createWindow\", err, windowIdentifier, windowDescriptor);\n\t\t\t\tcb({ err, data: windowIdentifier });\n\t\t\t\tresolve({ err, data: windowIdentifier });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\n\t/**\n\t * Given an object where the keys are component names and the values are component configs, it spawns the list of components.\n\t * @private */\n\tspawnGroup(components, params, cb) {\n\t\tlet errors, responses = [];\n\t\tlet componentList = Object.keys(components);\n\t\tconst spawnComponent = (componentType, done) => {\n\t\t\tlet cloneParams = Object.assign({}, params);\n\t\t\tif (components[componentType].params) {\n\t\t\t\tcloneParams = Object.assign(params, components[componentType].params);\n\t\t\t}\n\t\t\tcloneParams.component = componentType;\n\t\t\tself.spawn(cloneParams, function (err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\terrors.push(err);\n\t\t\t\t} else {\n\t\t\t\t\tresponses.push(response);\n\t\t\t\t}\n\t\t\t\tdone(err);\n\t\t\t});\n\t\t};\n\t\tasyncForEach(componentList, spawnComponent, function () {\n\t\t\tcb(errors, responses);\n\t\t});\n\t}\n\n\t/**\n\t * Splintering.\n\t */\n\tupdate() {\n\t\t// @TODO, this should probably be pubsub (see startPubSubs below)\n\t\tRouterClient.transmit(\"Launcher.update\", {\n\t\t\tcomponentList: Components,\n\t\t});\n\t}\n}\nLogger.start();\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/Launcher/launcher.ts","import {\n  WindowCreationParams,\n} from \"./Interface_BasePrivateWindow\";\n\nimport {\n  Interface_Window,\n} from \"./Interface_Window\";\n\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\nimport { FinsembleWindowInternal } from \"../WindowAbstractions/FinsembleWindowInternal\";\n\nexport class LauncherEntry {\n  manifest: any;\n  launcher: any;\n\n  constructor(manifest, launcher) {\n    this.manifest = manifest;\n    this.launcher = launcher;\n    this.bindAllFunctions();\n    this.definePubicInterface();\n  }\n\n  async initialize(done) {\n    done();\n  }\n\n  windowServiceChannelName(channelTopic) { return `WindowService-Request-${channelTopic}`; }\n\n  bindAllFunctions() {\n    let self = this;\n    for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {\n      if (self[name] instanceof Function) {\n        self[name] = self[name].bind(self); // only bind function properties\n      }\n    }\n  }\n\n  // invoked by serviceEntryPoint shutdown\n  shutdown(done) {\n    done();\n  }\n\n  definePubicInterface() {\n    // Note: More Cleanup To Do: better to have all the router message handling done here, with pure calls into to the launcher (i.e. not passing in router message to launcher).\n    // So for now using the launcher code close to as-is, although had to do some refactoring for this interface\n\n    Logger.system.debug(`LauncherEntry.definePubicInterface`);\n\n    RouterClient.addPubSubResponder(\"Launcher.WindowList\", []);\n\n    RouterClient.addResponder(\"LauncherService.addWindowToGroups\", (err, message) => {\n      this.launcher.addWindowToGroups(message.data);\n      message.sendQueryResponse(null, \"success\");\n    });\n\n    RouterClient.addResponder(\"LauncherService.deleteWindowGroup\", this.launcher.deleteWindowGroup.bind(this));\n\n    RouterClient.addResponder(\"Launcher.componentList\", (err, message) => {\n      let components = this.launcher.getComponents();\n      message.sendQueryResponse(err, components);\n    });\n\n    RouterClient.addResponder(\"LauncherService.createWindowGroup\", this.launcher.createWindowGroup.bind(this));\n\n    RouterClient.addResponder(\"LauncherService.getGroupsForWindow\", (err, message) => {\n      message.sendQueryResponse(null, this.launcher.getGroupsForWindow(message.data));\n    });\n\n    RouterClient.addResponder(\"Launcher.getActiveDescriptors\", (err, message) => {\n      message.sendQueryResponse(null, this.launcher.getActiveDescriptors());\n    });\n\n    RouterClient.addResponder(\"LauncherService.getComponentsThatCanReceiveDataTypes\", (err, message) => {\n      message.sendQueryResponse(null, this.launcher.getComponentsThatCanReceiveDataTypes(message.data.dataTypes));\n\n    });\n\n    RouterClient.addResponder(\"Launcher.getMonitorInfo\", (err, message) => {\n      Logger.system.debug(\"LauncherEntry.getMonitorInfo request\" + JSON.stringify(message));\n      this.launcher.getMonitorInfo(message.data, function (err, response) {\n        message.sendQueryResponse(err, response);\n      });\n    });\n\n    RouterClient.addResponder(\"Launcher.getMonitorInfoAll\", (err, message) => {\n      Logger.system.debug(\"LauncherEntry.getMonitorInfoAll request\" + JSON.stringify(message));\n      this.launcher.getMonitorInfoAll((err, monitors) => {\n        message.sendQueryResponse(err, monitors);\n      });\n    });\n\n    RouterClient.addResponder(\"Launcher.removeComponent\", (err, message) => {\n      this.launcher.remove(message.data.name);\n      message.sendQueryResponse(err, message.data);\n    });\n\n    RouterClient.addResponder(\"Launcher.showWindow\", (err, message) => {\n      //@todo only return after the window is ready...if asked to\n      Logger.system.debug(\"LauncherEntry.showWindow request\" + JSON.stringify(message));\n      this.launcher.showWindow(message.data.windowIdentifier, message.data, function (err, descriptor) {\n        message.sendQueryResponse(err, descriptor);\n      });\n    });\n\n    RouterClient.addResponder(\"Launcher.spawn\", (err, message) => {\n      // The requester is the window name of whoever requested the spawn.\n      // That window is allowed to call executeJavaScript on the wrap.\n      if (!message.data.options) message.data.options = {};\n      message.data.options.execJSWhitelist = [message.header.origin.replace(\"RouterClient.\", \"\")];\n\n      this.launcher.spawn(message.data, function (error, descriptor) {\n        Logger.system.debug(\"LauncherEntry.Spawn done\", message);\n        message.sendQueryResponse(error, descriptor);\n      });\n    });\n    RouterClient.addResponder(\"Launcher.userDefinedComponentUpdate\", (err, message) => {\n      function respond(error, response) {\n        message.sendQueryResponse(error, response);\n      }\n      if (message.data.type === \"add\") {\n        this.launcher.addUserDefinedComponent(message, respond);\n      } else if (message.data.type === \"remove\") {\n        this.launcher.removeUserDefinedComponent(message, respond);\n      }\n    });\n\n    RouterClient.addResponder(\"LauncherService.addWindowsToGroup\", (err, message) => {\n      let errString = this.launcher.addWindowsToGroups(message.data);\n      if (errString) {\n        message.sendQueryResponse(errString);\n      } else {\n        message.sendQueryResponse(null, \"Success\");\n      }\n    });\n\n    RouterClient.addResponder(\"LauncherService.getWindowsInGroup\", (err, message) => {\n      let windowList = this.launcher.getWindowsInGroup(message.data.groupName);\n      message.sendQueryResponse(null, windowList);\n    });\n\n    RouterClient.addResponder(\"LauncherService.removeWindowsFromGroup\", (err, message) => {\n      let errString = this.launcher.removeWindowsFromGroup(message.data);\n      if (errString) {\n        message.sendQueryResponse(errString);\n      } else {\n        message.sendQueryResponse(null, \"Success\");\n      }\n    });\n\n    RouterClient.addResponder(\"LauncherService.bringWindowsToFront\", (err, message) => {\n      let errString = this.launcher.bringWindowsToFront(err, message);\n      if (errString) {\n        message.sendQueryResponse(errString);\n      } else {\n        message.sendQueryResponse(null, \"Success\");\n      }\n    });\n\n    RouterClient.addListener(\"LauncherService.hyperFocus\", this.launcher.hyperFocus.bind(this));\n\n    RouterClient.addListener(\"LauncherService.minimizeWindows\", this.launcher.minimizeWindows.bind(this));\n\n    RouterClient.addListener(\"LauncherService.restart\", this.launcher.restart);\n    RouterClient.addResponder(\"LauncherService.registerComponent\", this.launcher.registerComponent.bind(this.launcher));\n    RouterClient.addResponder(\"LauncherService.unRegisterComponent\", this.launcher.unRegisterComponent.bind(this.launcher));\n\n    RouterClient.addListener(\"Launcher.resetSpawnStagger\", (err, message) => {\n      this.launcher.resetSpawnStagger(message.data);\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/ServiceEntryPoints/launcherEntryPoints.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n// This file contains the service to manage all stacked windows.\n// The common/window/stackedWindow wrapper contains the primary interface. Also, common/TabbingEntry contains interface to createStackedWindow used by Launcher.\n\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\n\nexport class TabbingEntry {\n\tstackedWindowManager: any;\n\n\tconstructor(stackedWindowManager) {\n\t\tthis.stackedWindowManager = stackedWindowManager;\n\t\tthis.bindAllFunctions();\n\t}\n\n\tasync initialize(done) {\n\t\tLogger.system.debug(\"TabbingEntry.initialize\");\n\t\tconsole.debug(\"TabbingEntry.initialize\");\n\t\tthis.setupStackedWindowManagerListeners();\n\t\tdone();\n\t}\n\n\tshutdown(done) {\n\t\tdone();\n\t}\n\n\tbindAllFunctions() {\n\t\tlet self = this;\n\t\tfor (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {\n\t\t\tlet method = self[name];\n\t\t\t// skip constructor\n\t\t\tif (!(method instanceof Function) || method === TabbingEntry) continue;\n\t\t\tself[name] = self[name].bind(self);\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Setup router listeners to handing incoming service requests and events from child windows\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\tsetupInterfaceListener(methodName, methodFunction) {\n\t\tLogger.system.debug(`TabbingEntry.setupInterfaceListener for ${methodName}`);\n\t\tRouterClient.addResponder(`StackedWindow.${methodName}`, function (err, queryMessage) {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.error(`StackedWindow.${methodName} addResponder failed: ${err}`);\n\t\t\t} else {\n\t\t\t\t//@todo BAD BAD BAD. WE NEED TO BE CONSISTENT. //But it needs to work.\n\t\t\t\tif (queryMessage.data.windowIdentifier) {\n\t\t\t\t\tif (queryMessage.data.windowIdentifier.windowName) {\n\t\t\t\t\t\tqueryMessage.data.windowIdentifier.name = queryMessage.data.windowIdentifier.windowName;\n\t\t\t\t\t} else if (queryMessage.data.windowIdentifier.name) {\n\t\t\t\t\t\tqueryMessage.data.windowIdentifier.windowName = queryMessage.data.windowIdentifier.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet callback = function (err, response) {\n\t\t\t\t\tqueryMessage.sendQueryResponse(err, response);\n\t\t\t\t};\n\n\t\t\t\tmethodFunction(queryMessage.data, callback);\n\t\t\t}\n\t\t});\n\t}\n\n\tsetupStackedWindowManagerListeners() {\n\t\tthis.setupInterfaceListener(\"addWindow\", this.stackedWindowManager.addWindow);\n\t\tthis.setupInterfaceListener(\"removeWindow\", this.stackedWindowManager.removeWindow);\n\t\tthis.setupInterfaceListener(\"deleteWindow\", this.stackedWindowManager.deleteWindow);\n\t\tthis.setupInterfaceListener(\"setVisibleWindow\", this.stackedWindowManager.setVisibleWindow);\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/ServiceEntryPoints/tabbingEntryPoints.ts","import RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\nimport { Launcher } from \"../Launcher/launcher\"\n\nexport class WindowCreateEntry {\n\tfinsembleConfig: any;\n\tmanifest: any;\n\tlauncher: Launcher;\n\n\tconstructor(manifest, launcher) {\n\t\tthis.manifest = manifest;\n\t\tthis.launcher = launcher;\n\t\tthis.finsembleConfig = manifest.finsemble;\n\t\tthis.bindAllFunctions();\n\t\tthis.definePubicInterface_Window();\n\t}\n\n\tinitialize(done) {\n\t\tdone();\n\t}\n\n\twindowServiceChannelName(channelTopic) { return `WindowService-Request-${channelTopic}`; }\n\n\tbindAllFunctions() {\n\t\tlet self = this;\n\t\tfor (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {\n\t\t\tif (self[name] instanceof Function) {\n\t\t\t\tself[name] = self[name].bind(self); // only bind function properties\n\t\t\t}\n\t\t}\n\t}\n\n\t// invoked by serviceEntryPoint shutdown\n\tshutdown(done) {\n\t\tdone();\n\t}\n\n\tdefinePubicInterface_Window() {\n\t\t// entry points for public window functions\n\n\t\t// NOTE: createWindow is now internal to launcher (i.e. spawn invokes createWindow directly)\n\t\t// NOTE: after more window-service cleanup this file will likely be rolled into another, but for now keeping as is to reduce confusion as we evolve\n\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"getWindowIdentifier\"), this.getWindowIdentifier);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"injectTitleBar\"), this.injectTitleBar);\n\t}\n\n\t// probably only a temporary routine -- currently supports public wrapper\n\tasync getWindowIdentifier(queryError, queryMessage) {\n\t\tLogger.system.debug(`WindowService-Request-getWindowIdentifier for ${queryMessage.data.windowName}`, queryMessage.data);\n\t\tthis.launcher.createSplinterAndInject.getWindowIdentifier(queryMessage.data, (err, data) => {\n\t\t\tqueryMessage.sendQueryResponse(err, data);\n\t\t});\n\t}\n\n\t// may replace with preload\n\tasync injectTitleBar(queryError, queryMessage) {\n\t\tLogger.system.debug(`\"WindowService-Request-injectTitleBar for ${queryMessage.data.config.name}`, queryMessage.data);\n\n\t\tthis.launcher.createSplinterAndInject.injectTitleBar(queryMessage.data, (err, data) => {\n\t\t\tqueryMessage.sendQueryResponse(err, data);\n\t\t});\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/ServiceEntryPoints/windowCreateEntryPoints.ts","\nimport {\n\tWindowCreationParams,\n} from \"./Interface_BasePrivateWindow\";\n\nimport {\n\tInterface_Window,\n} from \"./Interface_Window\";\n\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\nimport { FinsembleWindowInternal } from \"../WindowAbstractions/FinsembleWindowInternal\";\nimport * as Constants from \"../../../common/constants\";\nimport { MockDockableWindow } from \"../Common/MockDockableWindow\";\nimport { WindowPoolSingleton } from \"../Common/Pools/PoolSingletons\";\nimport WorkspaceClient from \"../../../clients/workspaceClient\";\nimport { REMOTE_FOCUS } from \"../../../common/constants\";\nimport { BaseWindow } from \"../WindowAbstractions/BaseWindow\";\nimport { Launcher } from \"../Launcher/launcher\"\nimport DockingMain from \"../Docking/dockingMain\";\nimport { ResponderMessage } from \"../../../clients/IRouterClient\";\n\n\n\nexport class WindowPrimitives {\n\tdockingMain: DockingMain;\n\tlauncher: Launcher;\n\teventInterruptors: any;\n\n\tconstructor(dockingMain: DockingMain, launcher: Launcher) {\n\t\tthis.dockingMain = dockingMain;\n\t\tthis.launcher = launcher;\n\t\tthis.bindAllFunctions();\n\t\tthis.eventInterruptors = {};\n\t}\n\n\tinitialize(done) {\n\t\tthis.definePubicInterface_Window();\n\t\tdone();\n\t}\n\n\twindowServiceChannelName(channelTopic) { return `WindowService-Request-${channelTopic}`; }\n\n\tbindAllFunctions() {\n\t\tfor (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(this))) {\n\t\t\tif (this[name] instanceof Function) {\n\t\t\t\tthis[name] = this[name].bind(this); // only bind function properties\n\t\t\t}\n\t\t}\n\t}\n\n\t// invoked by serviceEntryPoint shutdown\n\tshutdown(done) {\n\t\tdone();\n\t}\n\n\n\tdefinePubicInterface_Window() {\n\t\tLogger.system.debug(\"definePubicInterface_Window\");\n\n\t\t// entry points for public window functions\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"addEventListener\"), this.addEventListenerHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"removeEventListener\"), this.removeEventListenerHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"registerInterruptibleEvent\"), this.registerInterruptibleEventHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"minimize\"), this.minimizeHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"maximize\"), this.maximizeHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"restore\"), this.restoreHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"focus\"), this.focusHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"blur\"), this.blurHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"bringToFront\"), this.bringToFrontHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"saveWindowOptions\"), this.saveWindowOptionsHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"setBounds\"), this.setBoundsHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"getBounds\"), this.getBoundsHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"getOptions\"), this.getOptionsHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"updateOptions\"), this.updateOptionsHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"hide\"), this.hideHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"show\"), this.showHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"showAt\"), this.showAtHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"alwaysOnTop\"), this.alwaysOnTopHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"setOpacity\"), this.setOpacityHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"close\"), this.closeHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"isShowing\"), this.isShowingHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"animate\"), this.animateHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"setComponentState\"), this.setComponentStateHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"removeComponentState\"), this.removeComponentStateHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"setWindowState\"), this.setWindowStateHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"saveCompleteWindowState\"), this.saveCompleteWindowStateHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"getWindowState\"), this.getWindowStateHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"getComponentState\"), this.getComponentStateHandler);\n\t\tRouterClient.addResponder(this.windowServiceChannelName(\"setParent\"), this.setParentHandler);\n\t\tRouterClient.addResponder(\"DockingService.getMonitorForWindow\", this.getMonitorForWindowHandler);\n\t\tRouterClient.addListener(REMOTE_FOCUS, this.handleRemoteFocus);\n\t}\n\n\t// housekeeping function used in each of the public window-wrapper handlers below\n\tpublicWindowHandlerPreface(method, queryError, queryMessage) {\n\t\tvar okay = true;\n\t\tlet params = queryMessage.data;\n\t\tlet { windowIdentifier, eventName, guid } = queryMessage.data;\n\n\t\tif (!windowIdentifier) {\n\t\t\tLogger.system.error(`no windowIdentifer for ${this.windowServiceChannelName(method)} handler`);\n\t\t}\n\n\t\tif (queryError) {\n\t\t\tLogger.system.error(`${this.windowServiceChannelName(method)} addResponder failed: ${queryError}`);\n\t\t\tokay = false;\n\t\t} else {\n\t\t\twindowIdentifier.windowName = windowIdentifier.windowName || windowIdentifier.name || \"unknown-name\";\n\t\t\twindowIdentifier.name = windowIdentifier.windowName;\n\t\t}\n\n\t\tLogger.system.debug(`WindowService-Request.${method} for ${windowIdentifier.windowName}`, queryMessage);\n\t\treturn ({ okay, windowIdentifier, eventName, guid });\n\t}\n\n\tasync registerInterruptibleEventHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier, eventName, guid } = this.publicWindowHandlerPreface(\"registerInterruptibleEventHandler\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\tif (wrap.wrapState === \"closing\" || wrap.wrapState === \"closed\") {\n\t\t\t\treturn callback(\"Window is being shut down. Failed to add listener.\");\n\t\t\t}\n\t\t\tif (Constants.INTERRUPTIBLE_EVENTS.includes(eventName)) {\n\t\t\t\t// keep track of all listeners\n\t\t\t\tif (!this.eventInterruptors[windowIdentifier.name]) {\n\t\t\t\t\tthis.eventInterruptors[windowIdentifier.name] = {};\n\t\t\t\t}\n\n\t\t\t\tif (!this.eventInterruptors[windowIdentifier.name][eventName]) {\n\t\t\t\t\tthis.eventInterruptors[windowIdentifier.name][eventName] = {};\n\t\t\t\t}\n\n\t\t\t\tthis.eventInterruptors[windowIdentifier.name][eventName][guid] = {\n\t\t\t\t\torigin: queryMessage.header.origin,\n\t\t\t\t\tstatus: \"created\"\n\t\t\t\t};\n\t\t\t\tLogger.system.debug(\"Add Interruptor\", windowIdentifier.name, queryMessage.header.origin, guid, this.eventInterruptors[windowIdentifier.name][eventName][guid]);\n\t\t\t}\n\t\t\tcallback();\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\t/** DH 6/15/2019\n\t * Because the OS and container keep their own\n\t * seperate records of which window has focus,\n\t * it's possible for the two to get out of sync.\n\t * To prevent that, we send messages from Assimilation\n\t * and Finsemble-DLL on every OS focus event and handle\n\t * them here. For every focus event coming from a window not\n\t * managed by Finsemble's container, we manually blur\n\t * whatever window had focus previously.\n\t *\n\t * If we can figure out a different way to synchronize\n\t * focus between container and OS, we can remove this ad hoc\n\t * and manual handling here.\n\t */\n\thandleRemoteFocus(queryError, queryMessage) {\n\t\tconst name = queryMessage.data.name;\n\n\t\t// DH 6/15/2019 - These types aren't right, but the best way to\n\t\t// fix would be to type the ObjectPools, which would require significant\n\t\t// refactoring.\n\t\tconst windows: any[] = Object.values(WindowPoolSingleton.getAll());\n\n\t\t\tconst focused: BaseWindow = windows\n\t\t\t\t.find((x: { focused: boolean }) => x.focused) as BaseWindow;\n\t\t\tif (focused && focused.name !== name) {\n\t\t\t\tfocused.eventManager.trigger(\"blurred\");\n\t\t\t}\n\t}\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// The following functions handler the public \"wrapper\" requests\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\tasync removeEventListenerHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier, eventName, guid } = this.publicWindowHandlerPreface(\"removeEventListener\", queryError, queryMessage);\n\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tif (Constants.INTERRUPTIBLE_EVENTS.includes(eventName)) {\n\t\t\t// keep track of all listeners\n\t\t\tif (!this.eventInterruptors[windowIdentifier.name]) {\n\t\t\t\tthis.eventInterruptors[windowIdentifier.name] = {};\n\t\t\t}\n\n\t\t\tif (!this.eventInterruptors[windowIdentifier.name][eventName]) {\n\t\t\t\tthis.eventInterruptors[windowIdentifier.name][eventName] = {};\n\t\t\t}\n\t\t\tif (this.eventInterruptors[windowIdentifier.name] && this.eventInterruptors[windowIdentifier.name][eventName] && this.eventInterruptors[windowIdentifier.name][eventName][guid]) {\n\t\t\t\tLogger.system.debug(\"Remove Interruptor\", windowIdentifier.name, this.eventInterruptors[windowIdentifier.name][eventName][guid], guid);\n\t\t\t\tdelete this.eventInterruptors[windowIdentifier.name][eventName][guid];\n\t\t\t}\n\t\t}\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\t// @todo callback is not the handler here, it's sendQueryResponse\n\t\t\t// when we add an event listener, there are two parameters: event name, and handler to be invoked when the event is thrown.\n\t\t\t// When we're removing listeners here, we're saying 'remove the listener for this event, the handler was 'callback'.\n\t\t\t// That's not true. In this case, callback is queryMessage.sendResponse.\n\t\t\t// The function below will never invoke the callback, it will simply search amongst the event handlers for\n\t\t\t// event 'whatever event' for a handler that === callback. It will never find that,\n\t\t\t// because we never added a listener with that handler.\n\t\t\t// - Brad\n\t\t\t// @todo make remove eventListener actually do something\n\t\t\twrap._removeEventListener(queryMessage.data, callback);\n\t\t\tcallback(null);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync addEventListenerHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier, eventName, guid } = this.publicWindowHandlerPreface(\"addEventListener\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\t\t//close-complete will never fire inside of that window.\n\n\t\tif (wrap) {\n\t\t\tif (wrap.wrapState === \"closing\" || wrap.wrapState === \"closed\") {\n\t\t\t\treturn callback(\"Window is being shut down. Failed to add listener.\");\n\t\t\t}\n\n\t\t\tif (Constants.INTERRUPTIBLE_EVENTS.includes(eventName)) {\n\t\t\t\t// keep track of all listeners\n\t\t\t\tif (!this.eventInterruptors[windowIdentifier.name]) {\n\t\t\t\t\tthis.eventInterruptors[windowIdentifier.name] = {};\n\t\t\t\t}\n\n\t\t\t\tif (!this.eventInterruptors[windowIdentifier.name][eventName]) {\n\t\t\t\t\tthis.eventInterruptors[windowIdentifier.name][eventName] = {};\n\t\t\t\t}\n\n\t\t\t\tLogger.system.debug(\"Add Interruptor\", windowIdentifier.name, guid);\n\t\t\t\tthis.eventInterruptors[windowIdentifier.name][eventName][guid] = {\n\t\t\t\t\torigin: queryMessage.header.origin,\n\t\t\t\t\tstatus: \"created\"\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// no hander is set up here, but the event manager is notified there is a remote listener\n\t\t\twrap._addEventListener(queryMessage.data);\n\t\t\tcallback();\n\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\t/**\n\t * Given a windowIdentifier, this function will find the dockableWindow or window instance, figure out which monitor the window is on, and return\n\t * it back to the caller (public FinsembleWindow).\n\t *\n\t * @param {*} queryError callback on error\n\t * @param {*} queryMessage message data and success callback\n\t * @returns Promise\n\t * @memberof WindowPrimitives\n\t */\n\tasync getMonitorForWindowHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = queryMessage.data;\n\t\tlet callback = queryMessage.sendQueryResponse;\n\t\tlet dockableWindow = this.dockingMain.getWindow(windowIdentifier.windowName, false);\n\t\tlet monitor;\n\t\tif (dockableWindow) {\n\t\t\tmonitor = this.dockingMain.getMonitorForWindow(dockableWindow);\n\t\t} else {\n\t\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.windowName);\n\t\t\tif (wrap) {\n\t\t\t\tlet { data: bounds } = await wrap._getBounds();\n\t\t\t\t//See documentation in MockDockableWindow for why this is necessary.\n\t\t\t\tlet mock = new MockDockableWindow({ name: wrap.name, ...bounds });\n\t\t\t\tmonitor = this.dockingMain.getMonitorForWindow(mock);\n\t\t\t} else {\n\t\t\t\treturn callback(`Could not find window for ${windowIdentifier.windowName}`, null);\n\t\t\t}\n\t\t}\n\n\t\tqueryMessage.sendQueryResponse(null, monitor.toJSON());\n\t}\n\n\tasync minimizeHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"minimize\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._minimize(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync maximizeHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"maximize\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._maximize(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync restoreHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"restore\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._restore(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync focusHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"focus\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._focus(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync blurHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"blur\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._blur(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync bringToFrontHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"bringToFront\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._bringToFront(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync isShowingHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"isShowing\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._isShowing(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync saveWindowOptionsHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"saveWindowOptions\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._saveWindowOptions(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync setBoundsHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"setBound\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\n\t\t//Generally getWindow is used inside of docking. We want errors if we can't find a window. Here, it's being used all throughout the system, including by windows whose movement isn't managed by docking. By passing false, we will eliminate unnecessary and confusing errors for the dev-user.\n\t\tlet dockableWindow = this.dockingMain.getWindow(windowIdentifier.name, false);\n\t\tif (dockableWindow) {\n\t\t\tdockableWindow.setBounds(queryMessage.data.bounds, callback);\n\t\t} else {\n\t\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\t\t\tif (wrap) {\n\t\t\t\twrap._setBounds(queryMessage.data, callback);\n\t\t\t} else {\n\t\t\t\tcallback(\"no dockable window\", null);\n\t\t\t}\n\t\t}\n\t}\n\tasync animateHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"animate\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\t\t//Generally getWindow is used inside of docking. We want errors if we can't find a window. Here, it's being used all throughout the system, including by windows whose movement isn't managed by docking. By passing false, we will eliminate unnecessary and confusing errors for the dev-user.\n\t\tlet dockableWindow = this.dockingMain.getWindow(windowIdentifier.name, false);\n\t\tif (dockableWindow) {\n\t\t\tdockableWindow.animate(queryMessage.data, callback);\n\t\t} else {\n\t\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\t\t\tif (wrap) {\n\t\t\t\twrap._animate(queryMessage.data, callback);\n\t\t\t} else {\n\t\t\t\tcallback(\"no dockable window\", null);\n\t\t\t}\n\t\t}\n\t}\n\tasync getBoundsHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"getBounds\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet dockableWindow = this.dockingMain.getWindow(windowIdentifier.name, false);\n\t\tif (dockableWindow) {\n\t\t\tlet bounds = dockableWindow.getBounds();\n\t\t\tcallback(null, bounds);\n\t\t} else {\n\t\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\t\t\tif (wrap) {\n\t\t\t\twrap._getBounds(queryMessage.data, (err, data) => {\n\t\t\t\t\tLogger.system.debug(`WindowService-Request.getBounds response`, queryMessage.data, data);\n\t\t\t\t\tcallback(err, data)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getOptionsHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"getOptions\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._getOptions(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync updateOptionsHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"updateOptions\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._updateOptions(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync hideHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"hide\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._hide(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync showHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"show\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._show(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\tasync showAtHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"showAt\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._showAt(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync alwaysOnTopHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"alwaysOnTop\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._alwaysOnTop(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync setOpacityHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"setOpacity\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap._setOpacity(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync setComponentStateHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"setComponentState\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap.setComponentState(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync removeComponentStateHandler(queryError, queryMessage) {\n\t\tconst { windowIdentifier } = this.publicWindowHandlerPreface(\"removeComponentState\", queryError, queryMessage);\n\t\tconst callback = queryMessage.sendQueryResponse;\n\n\t\tconst wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap.removeComponentState(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync setWindowStateHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"setWindowState\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap.setWindowState(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync saveCompleteWindowStateHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"saveCompleteWindowState\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap.saveCompleteWindowState(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync getWindowStateHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"getWindowState\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap.getWindowState(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync getComponentStateHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"getComponentState\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap.getComponentState(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync setParentHandler(queryError, queryMessage) {\n\t\tlet { windowIdentifier } = this.publicWindowHandlerPreface(\"setParent\", queryError, queryMessage);\n\t\tlet callback = queryMessage.sendQueryResponse;\n\n\t\tlet wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\t\t\twrap.setParent(queryMessage.data, callback);\n\t\t} else {\n\t\t\tcallback(`unidentified window name: ${windowIdentifier.name}`, null);\n\t\t}\n\t}\n\n\tasync closeHandler(queryError, queryMessage: ResponderMessage) {\n\n\t\tconst { windowIdentifier } = this.publicWindowHandlerPreface(\"close\", queryError, queryMessage)\n\n\t\tconst delayInterrupters = (eventName, afterSetup) => {\n\t\t\tconst delayers = {};\n\t\t\tlet listenerCount = 0;\n\t\t\tlet resolvePromise;\n\t\t\tlet promiseResolved = false;\n\n\t\t\tconst gotResponses = setTimeout(() => { // deal with dead windows and bad actors who do not act upon requested delays.\n\t\t\t\tfor (let guid in this.eventInterruptors[windowIdentifier.name][eventName]) {\n\t\t\t\t\tif (!delayers[guid]) {\n\t\t\t\t\t\tLogger.system.warn(windowIdentifier.name, \" had a bad wrap somewhere that did not publish or remove \", guid, \" listener for \", eventName, \". Details:\", this.eventInterruptors[windowIdentifier.name][eventName][guid]);\n\t\t\t\t\t\tdelete this.eventInterruptors[windowIdentifier.name][eventName][guid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this.eventInterruptors[windowIdentifier.name][eventName] || Object.keys(this.eventInterruptors[windowIdentifier.name][eventName]).length == 0) {\n\t\t\t\t\tpromiseResolved = true;\n\t\t\t\t\tresolvePromise();\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.debug(\"closeHandler: Waiting on \", delayers);\n\t\t\t\t}\n\t\t\t}, 1000);\n      const listener = (sid, eventGuid, response) => {\n\t\t\t\tif (promiseResolved) return;\n\t\t\t\tconst data = response.data;\n\t\t\t\tif (Object.keys(data).length > 0 && this.eventInterruptors[windowIdentifier.name][eventName][eventGuid]) { // if initial pubsub \"empty\" state without any key then ignore\n\t\t\t\t\tLogger.system.debug(\"Got Publish from intteruptor\", windowIdentifier.name, eventName, eventGuid, response);\n\t\t\t\t\tif (!data.delayed && !data.canceled) {\n\t\t\t\t\t\tRouterClient.unsubscribe(sid);\n\t\t\t\t\t\tlistenerCount--;\n\t\t\t\t\t\tLogger.system.debug(\"Listener fired for \", eventName, windowIdentifier.name, response.header.origin, data, \"Listeners remaining: \", JSON.stringify(listenerCount));\n\t\t\t\t\t\tLogger.system.debug(\"Remove interruptor\", windowIdentifier.name, eventGuid);\n\t\t\t\t\t\tdelete this.eventInterruptors[windowIdentifier.name][eventName][eventGuid];\n\t\t\t\t\t\tif (Object.keys(this.eventInterruptors[windowIdentifier.name][eventName]).length == 0) {\n\t\t\t\t\t\t\tLogger.system.debug(\"All listeners completed for \", eventName, windowIdentifier.name);\n\t\t\t\t\t\t\tpromiseResolved = true;\n\t\t\t\t\t\t\tresolvePromise();\n\t\t\t\t\t\t\tclearTimeout(gotResponses);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelayers[eventGuid] = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (Object.keys(this.eventInterruptors[windowIdentifier.name][eventName]).length == 0) {\n\t\t\t\t\tpromiseResolved = true;\n\t\t\t\t\tresolvePromise();\n\t\t\t\t\tclearTimeout(gotResponses);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst p = new Promise(function (resolve, reject) {\n\t\t\t\tresolvePromise = resolve;\n\t\t\t});\n\n\t\t\tconst eventInterruptors = this.eventInterruptors[windowIdentifier.name];\n\t\t\tif (eventInterruptors && eventInterruptors[eventName]) {\n\t\t\t\tfor (let eventGuid in eventInterruptors[eventName]) {\n\t\t\t\t\tlistenerCount++;\n\t\t\t\t\tLogger.system.debug(\"Adding Subscriber for intteruptor\", windowIdentifier.name, eventName, eventGuid, \" for origin \", eventInterruptors[eventName][eventGuid]);\n\t\t\t\t\tconst sid = RouterClient.subscribe(Constants.EVENT_INTERRUPT_CHANNEL + \".\" + eventGuid, (err, response) => {\n\t\t\t\t\t\tlistener(sid, eventGuid, response);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolvePromise();\n\t\t\t}\n\t\t\tafterSetup();\n\t\t\tLogger.system.debug(\"WRAP CLOSE. Waiting on\", listenerCount.toString(), \"listeners for \", eventName, windowIdentifier.name);\n\t\t\treturn p;\n\t\t}\n\n\t\tconst wrap = WindowPoolSingleton.get(windowIdentifier.name);\n\n\t\tif (wrap) {\n\n\t\t\tLogger.system.debug(\"WRAP CLOSE. starting in wrap\", windowIdentifier.name);\n\n      let wrapState = \"closing\";\n\t\t\t// we update wrapState over the router, but it's not always happening fast enough to prevent new listeners from being set up\n\t\t\twrap.wrapState = wrapState;\n\n\t\t\tLogger.system.debug(\"COMPONENT LIFECYCLE: STATE CHANGE: \", windowIdentifier.name, wrapState);\n\t\t\tRouterClient.publish(\"Finsemble.Component.State.\" + windowIdentifier.name, { state: wrapState });\n\n\t\t\t//After all listeners are set up, we trigger the event <- allow other windows to prevent closing\n\t\t\tawait delayInterrupters(\"close-requested\", () => {\n\t\t\t\twrap.eventManager.trigger(\"close-requested\");\n\t\t\t});\n\n\t\t\t// Since we don't even call close on the window until all close-requested handlers are done, this allows for things inside the window itself to prevent closing.\n\t\t\t// private wraps can listen for this event, trigger a close in the window and put a kibash on the close if needed.\n\t\t\t// Currently only used by .NET components.\n\t\t\tawait delayInterrupters(\"_container-close-handlers\", () => {\n\t\t\t\twrap.eventManager.trigger(\"_container-close-handlers\");\n\t\t\t});\n\n\t\t\t// This is an event for the wraps to delete themselves\n\t\t\tLogger.system.debug(\"WRAP CLOSE. Triggered close for\", windowIdentifier.name);\n\t\t\tawait delayInterrupters(\"closed\", () => {\n\t\t\t\twrap.eventManager.trigger(\"closed\", queryMessage.data);\n\t\t\t});\n\t\t\tLogger.system.debug(\"WRAP CLOSE. All closed events fired\", windowIdentifier.name);\n\n\t\t\t// Actually close the window\n\t\t\tif (queryMessage.data.removeFromWorkspace) {\n\t\t\t\tawait WorkspaceClient.removeWindow({ name: wrap.name });\n\t\t\t}\n\n\t\t\twrap._close(queryMessage.data, async () => {\n\t\t\t\tLogger.system.debug(\"WRAP CLOSE. Removing wrap.\", windowIdentifier.name);\n\t\t\t\twrap.handleWrapRemoveRequest();\n\t\t\t\tLogger.system.debug(\"WRAP CLOSED. Invoking callback.\", windowIdentifier.name);\n\t\t\t\t//Public wraps wait for this to clean themselves up. Can't wait on closed because our cleanup removes the wrap entirely. Other listeners might fail if our cleanup handler fires first.\n\t\t\t\tawait delayInterrupters(\"close-complete\", () => {\n\t\t\t\t\tLogger.system.debug(\"WRAP CLOSE. All close-complete events fired\", windowIdentifier.name);\n\t\t\t\t\twrap.eventManager.trigger(\"close-complete\");\n\t\t\t\t});\n\n\t\t\t\twrapState = \"closed\";\n\t\t\t\tLogger.system.debug(\"COMPONENT LIFECYCLE: STATE CHANGE: \", wrapState, windowIdentifier.name);\n\t\t\t\tRouterClient.publish(\"Finsemble.Component.State.\" + windowIdentifier.name, { state: wrapState });\n\n\t\t\t\tWindowPoolSingleton.remove(windowIdentifier.name);\n\t\t\t\tqueryMessage.sendQueryResponse(null, null);\n\t\t\t});\n\n\t\t// else if no wrap for the window being closed (might be an error or might be because window's spawn is still pending and it's wrap hasn't been saved yet)\n\t\t} else {\n\t\t\t// this section handles the specific case of trying to close a window that hasn't finished spawning yet, which happens when reloading a workspace (due to an OpenFin bug).\n\t\t\t// Since wrap couldn't be found in pool, it may be than the spawn window never completely finished and is now stuck in pendind; therefore attempt a force kill.\n\t\t\t// Must call the launcher to close/kill window because it has knowledge of whether or not a window spawn is pending.\n\t\t\tconst { err } = await this.launcher.forceKillWindowIfPending(windowIdentifier);\n\t\t\tif (err && !err.includes(\"not pending\"))\n\t\t\t\t// there was a pending window but err occurred trying to close it\n\t\t\t\tqueryMessage.sendQueryResponse(`${windowIdentifier.name} close error: ${err}`, null);\n\t\t\telse if (err && err.includes(\"not pending\")) {\n\t\t\t\t// there was no pending window therefore trying to close an unknown window\n\t\t\t\tqueryMessage.sendQueryResponse(`${windowIdentifier.name} is unknown`);\n\t\t\t} else {\n\t\t\t\t// the pending window was closed so okay\n\t\t\t\tqueryMessage.sendQueryResponse(null, null);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/ServiceEntryPoints/windowPrimitivesEntryPoints.ts","/*!\n* Copyright 2017 by ChartIQ, Inc.\n* All rights reserved.\n*/\n// This file contains the service to manage all stacked windows.\n// The common/window/stackedWindow wrapper contains the primary interface. Also, common/StackedWindowManager contains interface to createStackedWindow used by Launcher.\n\nimport {\n\tStackedWindowManagement\n} from \"./Interface.StackedWindowManager\";\n\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\nimport { FinsembleWindow } from \"../../../common/window/FinsembleWindow\";\nimport { BaseWindow } from \"../../window/WindowAbstractions/BaseWindow\";\nimport { FinsembleWindowInternal } from \"../../window/WindowAbstractions/FinsembleWindowInternal\";\nimport DistributedStoreClient from \"../../../clients/distributedStoreClient\";\nimport { ConfigUtilInstance as ConfigUtil } from \"../../../common/configUtil\";\n\nimport { each as asyncEach } from \"async\";\nimport _throttle = require(\"lodash.throttle\");\nimport * as constants from \"../../../common/constants\";\nimport { GroupPoolSingleton } from \"../Common/Pools/PoolSingletons\";\n\n/** FinsembleWindowInternal exports BaseWindow, but only after doing some side-effects.\n * Rather than having two references floating around, this way, there's only one.\n*/\n\n\n\ndeclare var window: any;\n\n/** @TODO - This should be unnecessary. DistributedStoreClient.initialize should be idempotent,\n * and then we can remove this odd shielding of it behind this \"if\" statement. */\nif (!window.DistributedStoreClient) {\n\twindow.DistributedStoreClient = DistributedStoreClient\n\twindow.DistributedStoreClient.initialize();\n}\n\n/**\n * Constructor for stackedWindow record -- this is what's saved in the store\n *\n * @param {any} stackedWindowIdentifier\n * @memberof StackedWindowManager\n * @private\n */\nclass WindowRecord {\n\tidentifier: any;\n\tchildWindowIdentifiers: any;\n\tvisibleWindowIdentifier: any;\n\tbounds: any;\n\tconstructor(stackedWindowIdentifier) {\n\t\tthis.identifier = stackedWindowIdentifier;\n\t\tthis.childWindowIdentifiers = [];\n\t\tthis.visibleWindowIdentifier = null;\n\t\tthis.bounds = null;\n\t}\n\n}\n\nclass StackedWindowManager implements StackedWindowManagement {\n\tparams: any;\n\tchildWindow: any;\n\tstoreCache: any;\n\tstackedWindowListeners: any;\n\tstackedWindowWrappers: any;\n\teventHandlerFunction: any;\n\tchildNameToSID: any;\n\tchildEventsToHandle: any;\n\tglobalStore: any;\n\taddReadyTimeout: any;\n\n\tconstructor(params) {\n\t\tthis.params = params; // keeps any params that ware passed in\n\t\tthis.childWindow = {}; // holds the wrapper for each child window\n\t\tthis.storeCache = {}; // maintains a local cache by window name of what what this service keeps in the global store; stays in sync because only this service writes to store\n\t\tthis.stackedWindowListeners = {}; // saves handles for listeners so can be removed (indexed by stacked window name)\n\t\tthis.stackedWindowWrappers = {}; // each stacked window has a wrapper so can invoke saveWindowOptions() to save workspace state\n\t\tthis.eventHandlerFunction = {}; // holds event handlers functions (needed to remove listeners)\n\t\tthis.childNameToSID = {}; // mapping from child window name to it parent stackedWindowIdentifier\n\n\t\t/**\n\t\t * The following events (and these only) should be propagated from the children to the stack.\n\t\t */\n\t\tthis.childEventsToHandle = [\n\t\t\t\"minimized\", \"restored\", \"shown\", \"hidden\", \"focused\",\n\t\t\t\"broughtToFront\", \"setBounds\", \"alwaysOnTop\", \"setOpacity\",\n\t\t\t\"bounds-change-request\", \"bounds-change-end\", \"bounds-changed\",\n\t\t\t\"system-maximized\", \"system-bounds-changed\", \"system-restored\"\n\t\t];\n\n\t\tthis.bindAllFunctions();\n\n\t\twindow.StackedWindowManager = this;\n\t}\n\n\tinitialize(finsembleConfig, callback = Function.prototype) {\n\n\t\t// addReadyTimeout default should be larger than the router failover time (i.e. when failover goes to cross-domain) -- default fail over time adds up to 6 seconds\n\t\tthis.addReadyTimeout = ConfigUtil.getDefault(finsembleConfig, \"finsembleConfig.stackedWindow.addReadyTimeout\", 6500);\n\t\tLogger.system.debug(`\"StackedWindowManager addReadyTimeout ${this.addReadyTimeout}`);\n\n\t\t// connect to the global window store; again only this service writes to the store for stacked windows\n\t\tDistributedStoreClient.onReady(() => {\n\t\t\tDistributedStoreClient.createStore({ store: \"Finsemble-Windows\", global: true }, (err, store) => {\n\t\t\t\tLogger.system.debug(\"StackedWindowManager getStore\", err, store);\n\t\t\t\tthis.globalStore = store;\n\t\t\t\tthis.setupStackedWindowServiceListeners();\n\t\t\t\tthis.listenForWorkspaceChanges();\n\t\t\t\tcallback();\n\t\t\t});\n\t\t});\n\t}\n\n\tbindAllFunctions() {\n\t\tlet self = this;\n\t\tfor (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {\n\t\t\tlet method = self[name];\n\t\t\t// skip constructor\n\t\t\tif (!(method instanceof Function) || method === StackedWindowManager) continue;\n\t\t\tself[name] = self[name].bind(self);\n\t\t}\n\t}\n\n\t//When the workspace is changed, we need to create a new queue. Without that, the system will wait until the old queue is complete (when it times out...).\n\tlistenForWorkspaceChanges() {\n\t\t// RouterClient.addListener(\"WorkspaceService.switch\", this.onWorkspaceChanging);\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// \"Hidden\" External Interfaces\n\t// \t\tRouterClient.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, { type: \"Added\", stackedWindowIdentifier });\n\t// \t\tRouterClient.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, { type: \"Remove\", stackedWindowIdentifier });\n\t//\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Utility Functions\n\t///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Saves in the global store the data from the storeCache for the specified stacked window\n\t *\n\t * @param {any} stackedWindowIdentifier\n\t * @param {any} closing\n\t * @memberof StackedWindowManager\n\t * @private\n\t */\n\tsaveStore(stackedWindowIdentifier, params: any = {}, cb = Function.prototype) {\n\n\t\tconst promiseResolver = (resolve) => {\n\n\t\t\tvar windowName = stackedWindowIdentifier.windowName;\n\t\t\tvar thisStackRecord = this.storeCache[windowName];\n\n\t\t\tif (thisStackRecord) {\n\t\t\t\tLogger.system.debug(\"StackedWindowManager saveStore\", windowName, thisStackRecord);\n\t\t\t\tthisStackRecord.customData.spawnData.windowIdentifiers = thisStackRecord.childWindowIdentifiers; // TODO: this is a hack. Lots of duplicate info in the descriptor\n\t\t\t\tthis.globalStore.setValue({ field: windowName, value: { identifier: stackedWindowIdentifier, descriptor: thisStackRecord } }, () => {\n\t\t\t\t\tif (!this.stackedWindowWrappers[windowName]) {\n\t\t\t\t\t\tFinsembleWindowInternal.getInstance({ stackedWindowManager: this, name: windowName }, (err, wrappedWindow) => {\n\t\t\t\t\t\t\tthis.stackedWindowWrappers[windowName] = wrappedWindow;\n\t\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager saveStore Saving Window State Stack while wrapping\", wrappedWindow.name, thisStackRecord);\n\t\t\t\t\t\t\tthis.saveWindowOptions(params, wrappedWindow, () => {\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager saveStore Saving Window State Stack already wrapped\", this.stackedWindowWrappers[windowName].name, thisStackRecord);\n\t\t\t\t\t\tthis.saveWindowOptions(params, this.stackedWindowWrappers[windowName], () => {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.globalStore.removeValue({ field: stackedWindowIdentifier.windowName });\n\t\t\t\tresolve();\n\t\t\t\tcb();\n\t\t\t}\n\n\t\t\tif (!params.noNotification) {\n\t\t\t\tLogger.system.debug(\"StackedWindowManager saveStore notification\", windowName, thisStackRecord);\n\t\t\t\tRouterClient.publish(`Finsemble.StackedWindow.${stackedWindowIdentifier.windowName}`, thisStackRecord);\n\t\t\t} else {\n\t\t\t\tLogger.system.debug(\"StackedWindowManager saveStore no notification\", windowName, thisStackRecord);\n\t\t\t}\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Return true if the specified window in specified stack is showing\n\t *\n\t * @param {any} params\n\t * @returns\n\t * @memberof StackedWindowManager\n\t * @private\n\t */\n\tisShowing(params) {\n\t\tvar { stackedWindowIdentifier, windowIdentifier } = params;\n\t\tvar thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];\n\t\t//\n\t\treturn (windowIdentifier && thisStackRecord.visibleWindowIdentifier && windowIdentifier.windowName === thisStackRecord.visibleWindowIdentifier.windowName); // returns true if window is visible in stack\n\t}\n\n\t/**\n\t * Return true if the specified window name is in the specified stack\n\t *\n\t * @param {any} params\n\t * @returns\n\t * @memberof StackedWindowManager\n\t * @private\n\t */\n\tifWindowInStack(params) {\n\t\tvar { thisStackRecord, windowName } = params;\n\t\tvar result = false;\n\n\t\tfor (let i = 0; i < thisStackRecord.childWindowIdentifiers.length; i++) {\n\t\t\tif (thisStackRecord.childWindowIdentifiers[i].name === windowName) {\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\n\t\treturn result; // true if the specified window name is in the stack\n\t}\n\n\t/**\n\t * Return true if the params indication the wrap operation was invoked directly on the window, as opposed to directly on the childWindow\n\t *\n\t * @param {any} params\n\t * @returns\n\t * @memberof StackedWindowManager\n\t * @private\n\t */\n\toperatingDirectlyOnStackedWindow(params) {\n\t\tvar result;\n\t\tvar { stackedWindowIdentifier, windowIdentifier } = params;\n\t\tstackedWindowIdentifier = stackedWindowIdentifier || {};\n\t\tif ((!windowIdentifier) || (stackedWindowIdentifier.windowName === windowIdentifier.windowName)) {\n\t\t\tresult = true; // must be a stacked window\n\t\t} else {\n\t\t\tresult = false; // must be operating on a child of a stacked window\n\t\t}\n\t\treturn result;\n\t}\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Setup router listeners to handing incoming service requests and events from child windows\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\teventChannelName(stackedWindowName, channelTopic) { return `StackedWindow-${stackedWindowName}-${channelTopic}`; }\n\n\tsetupInterfaceListener(methodName, methodFunction) {\n\t\tRouterClient.addResponder(`StackedWindow.${methodName}`, function (err, queryMessage) {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.error(`StackedWindow.${methodName} addResponder failed: ${err}`);\n\t\t\t} else {\n\t\t\t\t//@todo BAD BAD BAD. WE NEED TO BE CONSISTENT. //But it needs to work.\n\t\t\t\tif (queryMessage.data.windowIdentifier) {\n\t\t\t\t\tif (queryMessage.data.windowIdentifier.windowName) {\n\t\t\t\t\t\tqueryMessage.data.windowIdentifier.name = queryMessage.data.windowIdentifier.windowName;\n\t\t\t\t\t} else if (queryMessage.data.windowIdentifier.name) {\n\t\t\t\t\t\tqueryMessage.data.windowIdentifier.windowName = queryMessage.data.windowIdentifier.name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet callback = function (err, response) {\n\t\t\t\t\tqueryMessage.sendQueryResponse(err, response);\n\t\t\t\t};\n\n\t\t\t\tmethodFunction(queryMessage.data, callback);\n\n\t\t\t}\n\t\t});\n\t}\n\n\tsetupStackedWindowServiceListeners() {\n\t\t// window wrapper entry points\n\t\tthis.setupInterfaceListener(\"minimize\", this.minimize);\n\t\tthis.setupInterfaceListener(\"maximize\", this.maximize);\n\t\tthis.setupInterfaceListener(\"restore\", this.restore);\n\t\tthis.setupInterfaceListener(\"focus\", this.focus);\n\t\tthis.setupInterfaceListener(\"bringToFront\", this.bringToFront);\n\t\tthis.setupInterfaceListener(\"saveWindowOptions\", this.saveWindowStateToStore);\n\t\tthis.setupInterfaceListener(\"setBounds\", this.setBounds);\n\t\tthis.setupInterfaceListener(\"getBounds\", this.getBounds);\n\t\tthis.setupInterfaceListener(\"getBoundsFromSystem\", this.getBoundsFromSystem);\n\t\tthis.setupInterfaceListener(\"startMove\", this.startMove);\n\t\tthis.setupInterfaceListener(\"stopMove\", this.stopMove);\n\t\t// this.setupInterfaceListener(\"updateOptions\", this.updateOptions);\n\t\tthis.setupInterfaceListener(\"hide\", this.hide);\n\t\tthis.setupInterfaceListener(\"show\", this.show);\n\t\tthis.setupInterfaceListener(\"close\", this.close);\n\t\tthis.setupInterfaceListener(\"reorder\", this.reorder);\n\t\tthis.setupInterfaceListener(\"alwaysOnTop\", this.alwaysOnTop);\n\t\t// this.setupInterfaceListener(\"setOpacity\", this.setOpacity);\n\t\tRouterClient.addResponder(\"StackedWindow.setOpacity\", (err, queryMessage) => {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.error(`StackedWindow.setOpacity addResponder failed: ${err}`);\n\t\t\t} else {\n\t\t\t\tthis.setOpacity(queryMessage.data, function (err, response) {\n\t\t\t\t\tqueryMessage.sendQueryResponse(err, response);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tRouterClient.addResponder(\"StackedWindow.updateOptions\", (err, queryMessage) => {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.error(`StackedWindow.updateOptions addResponder failed: ${err}`);\n\t\t\t} else {\n\t\t\t\tthis.updateOptions(queryMessage.data, function (err, response) {\n\t\t\t\t\tqueryMessage.sendQueryResponse(err, response);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t}\n\n\tasync visibleChildEventHandler(stackedWindowName, stackWrap, eventObject) {\n\t\tlet event = eventObject.data;\n\t\tif (event.eventName === \"bounds-change-end\") {\n\t\t\tawait this.saveStore({\n\t\t\t\twindowName: stackedWindowName,\n\t\t\t\tname: stackedWindowName,\n\t\t\t\twindowType: \"StackedWindow\"\n\t\t\t}, { closing: false });\n\t\t}\n\n\t\tLogger.system.verbose(\"StackedWindowManager transmitting event\", event.eventName, this.eventChannelName(stackedWindowName, event.eventName), event);\n\n\t\tstackWrap.eventManager.trigger(event.eventName, event);\n\t};\n\n\n\taddChildEventListener(stackedWindowName, childName, childWrapper) {\n\t\tLogger.system.debug(\"StackedWindowManagerService.addChildEventListener\", stackedWindowName, childName);\n\t\tFinsembleWindowInternal.getInstance({ name: stackedWindowName }, (err, stackWrap) => {\n\t\t\tfor (let i = 0; i < this.childEventsToHandle.length; i++) {\n\t\t\t\tlet eventName = this.childEventsToHandle[i];\n\t\t\t\tlet eventHandler = (eventObject) => {\n\t\t\t\t\tthis.visibleChildEventHandler(stackedWindowName, stackWrap, eventObject);\n\t\t\t\t}\n\n\t\t\t\tif (eventName === \"bounds-change-request\") {\n\t\t\t\t\teventHandler = _throttle(eventHandler, 10);\n\t\t\t\t}\n\n\t\t\t\tif (!this.eventHandlerFunction[stackedWindowName]) this.eventHandlerFunction[stackedWindowName] = {};\n\n\t\t\t\tif (this.eventHandlerFunction[stackedWindowName][eventName]) {\n\t\t\t\t\tLogger.system.warn(\"Avoiding Registering the same Listener Twice.\");\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.debug(\"StackedWindowManager addChildEventListener\", eventName, childName);\n\t\t\t\t\tthis.eventHandlerFunction[stackedWindowName][eventName] = eventHandler;\n\t\t\t\t\tchildWrapper.addEventListener(eventName, eventHandler);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tremoveChildEventListener(stackedWindowName, childName, childWrapper) {\n\t\tLogger.system.debug(\"StackedWindowManager.removeChildEventListener\", stackedWindowName, childName);\n\t\t//We may try to remove listeners before adding them. If so, don't error out.\n\t\tif (!this.eventHandlerFunction[stackedWindowName]) this.eventHandlerFunction[stackedWindowName] = {};\n\t\tfor (let i = 0; i < this.childEventsToHandle.length; i++) {\n\t\t\tlet eventName = this.childEventsToHandle[i];\n\t\t\tlet handler = this.eventHandlerFunction[stackedWindowName][eventName];\n\t\t\tif (handler) {\n\t\t\t\tchildWrapper.removeEventListener(eventName, handler);\n\t\t\t\tdelete this.eventHandlerFunction[stackedWindowName][eventName];\n\t\t\t} else {\n\t\t\t\tLogger.system.debug(\"StackedWindowManager.removeChildEventListener before the listener was added.\");\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// The next section of functions are oriented to managing Stacked Windows throughout the system.\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t// returns true if all the groupWindows are in the array of child windows\n\tgroupWindowsContainedInStacked(groupWindows: any, childWindows: any) {\n\t\tvar matchCount = 0;\n\t\tvar groupWindowCount = 0;\n\t\tvar groupWindow: any;\n\t\tfor (groupWindow in groupWindows) {\n\t\t\tgroupWindowCount++; // count the number of group windows\n\t\t\tif (groupWindows.hasOwnProperty(groupWindow)) {\n\t\t\t\tfor (let childWindow of childWindows) {\n\t\t\t\t\tif (groupWindow === childWindow.name) {\n\t\t\t\t\t\tmatchCount++; // count the matches found in child windows\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (groupWindowCount === matchCount); // return true if all group windows found in child windows\n\t}\n\n\t// when a new child window is added to the stack, this function determines if the stacked window should join any of the children groups\n\tjoinGroups(groups, stackedWindowIdentifier) {\n\t\tvar thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];\n\t\tif (!thisStackRecord) {\n\t\t\tLogger.system.error(\"stackedWindowManager.joinGroups unidentified stacked window\", stackedWindowIdentifier);\n\t\t} else {\n\t\t\tif (groups) {\n\t\t\t\tfor (let group of groups) {\n\t\t\t\t\tvar oneGroup = GroupPoolSingleton.get(group);\n\t\t\t\t\tif (!this.groupWindowsContainedInStacked(oneGroup.windows, thisStackRecord.childWindowIdentifiers)) {\n\t\t\t\t\t\t// if the group exists outside the stacked window, then join the group\n\t\t\t\t\t\tRouterClient.transmit(\"DockingService.joinGroup\", { groupName: group, name: stackedWindowIdentifier.windowName });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetGroups(windowIdentifier) {\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tRouterClient.query(\"DockingService.getGroupsForWindow\", { name: windowIdentifier.name }, (err, response) => {\n\t\t\t\tresolve(response.data);\n\t\t\t});\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Creates a new StackedWindow, returning its stackWindowIdentifier in the callback. Optionally initializes stack with a set of child windows.\n\t *\n\t * Invoked by Launcher Service when spawning a stacked window (e.g. LauncherClient.spawn()). TODO: this all changed. Update\n\t *\n\t * @param {object} params Parameters\n\t * @param {array=} params.windowIdentifiers array of windowIdentifiers to add to stack on creation.\n\t * @param {boolean=} params.new if true then stacked window being defined for first time with no persistent state\n\t * @param {function=} callback function(err, stackedWindowIdentifier)\n\t * @memberof StackedWindowManager\n\t * @private\n\t */\n\tasync createStackedWindow(params, callback) {\n\t\tLogger.system.debug(\"StackedWindowManager.createStackedWindow\", params);\n\t\tif (params.customData) params.customData.manifest = {};\n\t\tvar stackedWindowIdentifier = { windowType: \"StackedWindow\", windowName: params.windowName || params.name };\n\t\tvar thisStackRecord;\n\n\t\t// TABBING TBD: need to finish before callback -- async\n\t\t//if (true || params.new) { // being created for the first time (not from workspace with persistent state)\n\t\tthisStackRecord = new WindowRecord(stackedWindowIdentifier); // blank initial record\n\t\tObject.assign(thisStackRecord, params); // merge windowDescriptor into stackRecord\n\t\tthisStackRecord.registeredWithDockingManager = false;\n\t\tlet windowIdentifiers = thisStackRecord.customData.spawnData.windowIdentifiers;\n\t\tthisStackRecord.childWindowIdentifiers = [];\n\t\t// below commented out because don't want to save until complete state\n\t\t// this.saveStore(stackedWindowIdentifier); // go ahead and save initial information before waiting on children\n\n\t\tLogger.system.debug(\"StackedWindowManager.createStackedWindow NewRecord\", thisStackRecord);\n\n\t\tthis.storeCache[stackedWindowIdentifier.windowName] = thisStackRecord; // cache the stacked window data\n\t\tif (windowIdentifiers) { // if a list of initial windows provides, then now add them as children\n\t\t\tparams.noSave = true; // input to addWindow -- don't save in add because will do it once here after all added\n\t\t\tparams.stackedWindowIdentifier = stackedWindowIdentifier;\n\n\t\t\tlet wrapReadyCallback = async (err, response) => {\n\t\t\t\tif (response.data && response.data.state === \"open\") {\n\t\t\t\t\tRouterClient.unsubscribe(subscribeID); // no longer need subscription\n\n\t\t\t\t\tfor (let i = 0; i < windowIdentifiers.length; i++) {\n\t\t\t\t\t\tlet p = Object.assign({}, params);\n\t\t\t\t\t\tp.windowIdentifier = windowIdentifiers[i];\n\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\tp.inheritGroups = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait this.addWindow(p).catch(error => Logger.system.error(\"StackedWindowManager.createStackedWindow add catch error: \", error));\n\t\t\t\t\t}\n\t\t\t\t\t// if not a newStack (i.e. spawned by workspace) the register here after children are added; otherwise for new stacks must dynamically register in addWindow.  TBD: need better model here\n\t\t\t\t\tif (!params.newStack) {\n\t\t\t\t\t\tawait this.registerWithDockingManager({ windowIdentifier: stackedWindowIdentifier });\n\t\t\t\t\t}\n\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.createStackedWindow all available windows added\");\n\n\t\t\t\t\t// if there is a visible window but the corresponding child window never became ready (for any reason) then set a new visible window\n\t\t\t\t\tif (thisStackRecord.visibleWindowIdentifier && !this.ifWindowInStack({ thisStackRecord, windowName: thisStackRecord.visibleWindowIdentifier.windowName })) {\n\t\t\t\t\t\t// if children then set the first child as the visible window\n\t\t\t\t\t\tif (thisStackRecord.childWindowIdentifiers.length) {\n\t\t\t\t\t\t\tLogger.system.error(\"StackedWindowManager.createStackedWindow resetting visible window to first child since previous visible window couldn't be added\");\n\t\t\t\t\t\t\tthis.setVisibleWindow({ stackedWindowIdentifier, windowIdentifier: thisStackRecord.childWindowIdentifiers[0] }); // make the first window visible by default\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!thisStackRecord.childWindowIdentifiers.length) {\n\t\t\t\t\t\t// TBD: this should essentially mean the stacked-window creation failed, but this has side-effect so just put out error for now. Revisit on cleanup.  But tested and roughly handled okay.\n\t\t\t\t\t\tLogger.system.error(\"StackedWindowManager.createStackedWindow: no children became ready\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// send notification to LauncherClient that the window has been created (otherwise LauncherClient hangs)\n\t\t\t\t\tRouterClient.publish(\"Finsemble.\" + stackedWindowIdentifier.windowName + \".componentReady\", {\n\t\t\t\t\t\tname: stackedWindowIdentifier.windowName\n\t\t\t\t\t});\n\n\t\t\t\t\t// note the LauncherService will add to the workspace after spawn completes (spawn is the main client of this function)\n\t\t\t\t\tawait this.saveStore(stackedWindowIdentifier); // save again now children added\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t//wait for the wrap to be available before adding windows.\n\t\t\tlet wrapReadyChannel = \"Finsemble.\" + stackedWindowIdentifier.windowName + \".wrapReady\";\n\t\t\tvar subscribeID = RouterClient.subscribe(wrapReadyChannel, wrapReadyCallback);\n\n\n\t\t\tcallback(null, stackedWindowIdentifier);\n\t\t}\n\t}\n\n\t/**\n\t * Adds window as a child to a stacked window.  Adds to the top of the stack, or if specified to a specific location in the stack;\n\t *\n\t * @param {object=} params Parameters\n\t * @param {object} params.stackedWindowIdentifier stacked window to operate on stacked window to operate on\n\t * @param {object} params.windowIdentifier window to add\n\t * @param {number=} params.position the location in the stack to push the window.  Location 0 is the bottom of the stack. Defaults to the top of stack.\n\t * @param {boolean=} params.noSave if true then don't save the store after updating it (will be saved by caller)\n\t * @param {boolean=} params.ignorePreviousState if true then ignore the previous state of the window being added (with in another stack and registered with docking handled elsewhere)\n\t * @param {boolean=} params.noVisibility if true don't automatically set visibility when first window added to the stack (needed for ordered startup)\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindowManager\n\t * @private\n\t */\n\taddWindow(params, callback = Function.prototype): any {\n\t\tconst promiseResolver = (resolve, reject) => {\n\n\t\t\t// this handles when a window being added never reaches the ready state -- set timer to catch these cases and reject on timeout\n\t\t\tvar readyTimedout = false;\n\t\t\tvar readyTimer = setTimeout(() => {\n\t\t\t\t// the window never became ready so reject its addition to the stacked window\n\t\t\t\tlet thisErr = `StackedWindowManager.addWindow error: child ${params.windowIdentifier.windowName} never became ready`;\n\t\t\t\treject(thisErr);\n\t\t\t\tcallback(thisErr);\n\t\t\t\treadyTimedout = true;\n\t\t\t}, this.addReadyTimeout);\n\n\t\t\tLogger.system.debug(\"StackedWindowManager.addWindow\", params);\n\t\t\tlet subscribeID = RouterClient.subscribe(\"Finsemble.\" + params.windowIdentifier.windowName + \".wrapReady\", (err, response) => {\n\t\t\t\tif (!(response.data && response.data.name === params.windowIdentifier.windowName && response.data.state === \"open\")) {\n\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.addWindow waiting\", params.windowIdentifier.windowName);\n\t\t\t\t} else if (readyTimedout) { // if timeout failure\n\t\t\t\t\t// if was rejected because of timeout, then don't accept it now -- window won't be part of stack because too slow become ready (in theory this shouldn't happen)\n\t\t\t\t\t// TBD -- although this case should not happen if timeouts are correct, if it doesn't should probably pull out of stacked window and make visible\n\t\t\t\t\tLogger.system.error(\"StackedWindowManager.addWindow already timed out before ready so not added\", params.windowIdentifier.windowName);\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.debug(\"StackedWindowManager wrapper state\", params.windowIdentifier.windowName, response.data.state);\n\t\t\t\t\tclearInterval(readyTimer); // kill the timer waiting for ready\n\t\t\t\t\tif (response.data.state === \"closed\") return;\n\t\t\t\t\tRouterClient.unsubscribe(subscribeID);\n\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.addWindow continuing\", params.windowIdentifier.windowName);\n\t\t\t\t\tvar { stackedWindowIdentifier, windowIdentifier, noSave, position } = params;\n\t\t\t\t\tvar thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];\n\n\t\t\t\t\t// set following \"if (false\" to \"if (true\" to enable testing a failed visible window\n\t\t\t\t\tif (false && thisStackRecord && thisStackRecord.visibleWindowIdentifier && thisStackRecord.visibleWindowIdentifier.windowName === windowIdentifier.windowName) {\n\t\t\t\t\t\treturn reject(\"testing failed visible window\");\n\t\t\t\t\t} else if (thisStackRecord) {\n\t\t\t\t\t\tposition = position || thisStackRecord.childWindowIdentifiers.length; // position to add the window\n\t\t\t\t\t\tthisStackRecord.childWindowIdentifiers.splice(position, 0, windowIdentifier); // add to the child array\n\t\t\t\t\t\tthis.childNameToSID[windowIdentifier.windowName] = stackedWindowIdentifier; // add mapping to parent stackedWindowIdentifier\n\t\t\t\t\t\tFinsembleWindowInternal.getInstance(windowIdentifier, async (err, wrappedWindow) => {\n\t\t\t\t\t\t\t//@todo failure point - no wrap callback.\n\n\t\t\t\t\t\t\tthis.childWindow[windowIdentifier.windowName] = wrappedWindow; // save the wrapper for quick use\n\n\t\t\t\t\t\t\t// if stacked window doesn't have a visible window, then make this window being added the visible window\n\t\t\t\t\t\t\tif (!thisStackRecord.visibleWindowIdentifier) {\n\t\t\t\t\t\t\t\tlet { err, data: bounds } = await wrappedWindow._getBounds();\n\n\t\t\t\t\t\t\t\t// get the window bounds and save as the stackedWindow bounds\n\t\t\t\t\t\t\t\t//@todo failure point - no bounds callback.\n\t\t\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.addWindow got bounds\", windowIdentifier, bounds);\n\t\t\t\t\t\t\t\tthis.mergeBounds(thisStackRecord, bounds);\n\t\t\t\t\t\t\t\tthisStackRecord.bounds = bounds;\n\t\t\t\t\t\t\t\tObject.assign(thisStackRecord, bounds);\n\t\t\t\t\t\t\t\tthis.setVisibleWindow({ stackedWindowIdentifier, windowIdentifier, noSave: params.noSave });\n\t\t\t\t\t\t\t\t// if stacked window has a predefined visibleWindow and it matches the window being added, then set this window to the visible window\n\t\t\t\t\t\t\t} else if (thisStackRecord.visibleWindowIdentifier && thisStackRecord.visibleWindowIdentifier.windowName === windowIdentifier.windowName) {\n\t\t\t\t\t\t\t\tthis.setVisibleWindow({ stackedWindowIdentifier, windowIdentifier, noSave: params.noSave });\n\n\t\t\t\t\t\t\t\t// if stacked window has a predefined visibleWindow and it does not match the window being added, then hide this window\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.addWindow hiding window\", windowIdentifier);\n\t\t\t\t\t\t\t\t// hide the window being added and set it bounds\n\t\t\t\t\t\t\t\twrappedWindow._hide({ invokedByParent: true }, () => {\n\t\t\t\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.addWindow setting bounds\", windowIdentifier, thisStackRecord.bounds);\n\t\t\t\t\t\t\t\t\twrappedWindow._setBounds({ bounds: thisStackRecord.bounds, invokedByParent: true });\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t\tif (!params.noRemove) { // if higher level (e.g. presentation components) isn't handling the previous state of the window\n\t\t\t\t\t\t\t\t// handling the previous state of the window being added\n\t\t\t\t\t\t\t\tlet parentWindow = wrappedWindow.parentWindow;\n\t\t\t\t\t\t\t\tif (parentWindow && parentWindow.name != thisStackRecord.name) {\n\t\t\t\t\t\t\t\t\t// if the window being added was already in a stackedWindow, remove it from that stacked window (the window is already unregistered with docking)\n\t\t\t\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.addWindow removing from previous parentWindow\", parentWindow.identifier);\n\t\t\t\t\t\t\t\t\t// if adding a window to this stack that needs to be removed from another stack,\n\t\t\t\t\t\t\t\t\t// then when removing don't automatically make the window visible; instead use normally visibility settings in new stacked window\n\t\t\t\t\t\t\t\t\tawait this.removeWindow({\n\t\t\t\t\t\t\t\t\t\tstackedWindowIdentifier: parentWindow.identifier,\n\t\t\t\t\t\t\t\t\t\twindowIdentifier: windowIdentifier,\n\t\t\t\t\t\t\t\t\t\tnoVisible: true,\n\t\t\t\t\t\t\t\t\t\tnoDocking: true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// else window is standalone and registered with docking, so deregister with docking (since only stacked window is registered)\n\t\t\t\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.addWindow unregistering from docking (case 1)\", windowIdentifier);\n\t\t\t\t\t\t\t\t\tif (params.inheritGroups && params.newStack) {\n\t\t\t\t\t\t\t\t\t\tawait this.registerWithDockingManager({ windowIdentifier: stackedWindowIdentifier });\n\t\t\t\t\t\t\t\t\t\tlet groups = await this.getGroups(windowIdentifier);\n\t\t\t\t\t\t\t\t\t\tthis.joinGroups(groups, stackedWindowIdentifier);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tthis.deregisterWithDockingManager({ windowIdentifier }); // docking manager manage the parentWindow stacked window (not the individual children)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!noSave) {\n\t\t\t\t\t\t\t\tawait this.saveStore(stackedWindowIdentifier); // update the cache and the global store\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Notify interested listeners (e.g. BaseWindow wrappers for added window) that window was added to the stack\n\t\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager publish parent notification\", windowIdentifier.windowName);\n\t\t\t\t\t\t\tRouterClient.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, { type: \"Added\", stackedWindowIdentifier });\n\t\t\t\t\t\t\t//Publish Exists event right after the Added event because windows use this event type to track parent state.\n\t\t\t\t\t\t\tRouterClient.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, { type: \"Exists\", stackedWindowIdentifier });\n\n\t\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t\t\terr ? reject(err) : resolve();\n\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\terr = \"StackedWindowManager.addWindow: unknown stackedWindowIdentifier\";\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}); // subscription handle\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\ttriggerEvent(params, cb) {\n\t\tFinsembleWindowInternal.getInstance({ stackedWindowManager: this, name: params.windowIdentifier.windowName }, (err, wrap) => {\n\t\t\twrap.eventManager.trigger(params.event);\n\t\t\tcb();\n\t\t});\n\t}\n\n\t/**\n\t * Closes and deletes a stacked window. If specified (see params) then children will be closed; otherwise children will be signals they are removed from the stacked window.\n\t *\n\t * @param {object} params Parameters\n\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {object=} params.closeChildren if true then also close all children\n\t * @param {object=} params.removeFromWorkspace if then remove stacked window and child windows from the workspace\n \t * @param {boolean=} params.waitChildClose if true then wait for child wrapper to close before returned (needed for cleanly switching workspaces)\n\t * @param {boolean=} params.noDocking if true then do not register removed window with docking (the workspace is unaffected)\n\t * @param {any} callback\n\t * @memberof StackedWindowManager\n\t */\n\tcloseStackedWindow(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.closeStackedWindow\", params.stackedWindowIdentifier.windowName, params);\n\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tvar { stackedWindowIdentifier, removeFromWorkspace, closeChildren } = params;\n\t\t\tif (!closeChildren && closeChildren !== false) {\n\t\t\t\tcloseChildren = removeFromWorkspace;\n\t\t\t}\n\t\t\t//this.deregisterWithDockingManager({ windowIdentifier: stackedWindowIdentifier, removeFromWorkspace });\n\n\t\t\tvar thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];\n\t\t\tLogger.system.debug(\"StackedWindowManager.closeStackedWindow saveStore done\", params.stackedWindowIdentifier.windowName);\n\n\t\t\tif (!thisStackRecord) {\n\t\t\t\tlet err = \"StackedWindowManager.closeStackedWindow: no stacked record\";\n\t\t\t\tLogger.system.error(err, params);\n\t\t\t\tresolve({ err });\n\t\t\t\tcallback(err);\n\t\t\t} else {\n\t\t\t\t// clear the pubsub state for the stacked window -- must set to empty (to match LaucherClient check)\n\t\t\t\tRouterClient.publish(\"Finsemble.\" + stackedWindowIdentifier.windowName + \".componentReady\", {});\n\n\t\t\t\tif (removeFromWorkspace) {\n\t\t\t\t\tif (closeChildren) {\n\t\t\t\t\t\twhile (thisStackRecord.childWindowIdentifiers.length > 0) {\n\t\t\t\t\t\t\t// the currently visible window is closed one at a time to support orderly close, which might require UI interaction\n\t\t\t\t\t\t\tawait this.deleteWindow({\n\t\t\t\t\t\t\t\tnoCloseStack: true,\n\t\t\t\t\t\t\t\twaitChildClose: params.waitChildClose,\n\t\t\t\t\t\t\t\tstackedWindowIdentifier,\n\t\t\t\t\t\t\t\twindowIdentifier: thisStackRecord.visibleWindowIdentifier,\n\t\t\t\t\t\t\t\tremoveFromWorkspace,\n\t\t\t\t\t\t\t\tfromSystem: params.fromSystem\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twhile (thisStackRecord.childWindowIdentifiers.length > 0) {\n\t\t\t\t\t\t\tawait this.removeWindow({\n\t\t\t\t\t\t\t\tnoCloseStack: true, waitChildClose: params.waitChildClose, stackedWindowIdentifier,\n\t\t\t\t\t\t\t\twindowIdentifier: thisStackRecord.visibleWindowIdentifier,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.deregisterWithDockingManager({ windowIdentifier: stackedWindowIdentifier, removeFromWorkspace });\n\t\t\t\t\tdelete this.storeCache[stackedWindowIdentifier.windowName]; // remove stacked window from cache\n\t\t\t\t\tthis.globalStore.removeValue({ field: stackedWindowIdentifier.windowName }); // remove stacked window from window global store\n\t\t\t\t\t//this.triggerEvent({ event: \"closed\", windowIdentifier: stackedWindowIdentifier }, () => {\n\t\t\t\t\tresolve(); callback();\n\t\t\t\t\t//});\n\t\t\t\t} else {\n\t\t\t\t\t// clear the pubsub parent state for each child window (if not done, children will for some cases incorrectly have a parent specified);\n\t\t\t\t\t// note removeWindow() will also clear this parent state, but this path doesn't invoke removeWindow\n\t\t\t\t\tfor (let i = 0; i < thisStackRecord.childWindowIdentifiers.length; i++) {\n\t\t\t\t\t\tlet childName = thisStackRecord.childWindowIdentifiers[i].name;\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.closeStackedWindow cleaning up parent state for child\", childName);\n\t\t\t\t\t\tRouterClient.publish(`Finsemble.parentChange.${childName}`, {});\n\t\t\t\t\t}\n\n\t\t\t\t\t// essentially shouldn't have to do anything else but cleanup local state -- workspace is closing children individually\n\t\t\t\t\tlet visibleChildWrapper = this.childWindow[thisStackRecord.visibleWindowIdentifier.windowName];\n\t\t\t\t\tthis.removeChildEventListener(stackedWindowIdentifier.windowName, thisStackRecord.visibleWindowIdentifier.windowName, visibleChildWrapper);\n\t\t\t\t\tdelete this.storeCache[stackedWindowIdentifier.windowName]; // remove stacked window from cache\n\t\t\t\t\tthis.globalStore.removeValue({ field: stackedWindowIdentifier.windowName }); // remove stacked window from window global store\n\t\t\t\t\t//this.triggerEvent({ event: \"closed\", windowIdentifier: stackedWindowIdentifier }, () => {\n\t\t\t\t\tresolve(); callback();\n\t\t\t\t\t//});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Removes a child window from a stacked window.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.\n\t *\n\t * @param {object} params Parameters\n\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {object} params.windowIdentifier window to remove\n\t * @param {boolean=} params.noDocking if true then do not register removed window with docking (the workspace is unaffected)\n\t * @param {boolean=} params.noVisible if true then do not make window visible when removing it\n\t * @param {boolean=} params.waitChildClose if true then wait for child wrapper to close before returned (needed for cleanly switching workspaces)\n\t * @param {boolean=false} params.closeWindow\n\t * @param {boolean=false} params.noCloseStack  if true don't close the stack window when only one child\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindowManager\n\t * @returns promise\n\t * @private\n\t */\n\tremoveWindow(params, callback = Function.prototype) {\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tvar { noVisible, noCloseStack, stackedWindowIdentifier, windowIdentifier, noDocking } = params;\n\t\t\tvar thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];\n\t\t\tLogger.system.debug(\"StackedWindowManager.removeWindow\", params, thisStackRecord);\n\n\t\t\tvar err = null;\n\n\t\t\tif (thisStackRecord) {\n\t\t\t\tthisStackRecord.childWindowIdentifiers = thisStackRecord.childWindowIdentifiers.filter(item => item.windowName !== windowIdentifier.windowName); // remove child window\n\t\t\t\tlet childWrapper = this.childWindow[windowIdentifier.windowName];\n\t\t\t\tchildWrapper.clearParent(); // remove parent setting from child being remove\n\t\t\t\tdelete this.childNameToSID[windowIdentifier.windowName]; // remove child's mapping to parent stackedWindowIdentifier\n\n\t\t\t\tif (thisStackRecord.visibleWindowIdentifier && thisStackRecord.visibleWindowIdentifier.windowName === windowIdentifier.windowName) {\n\t\t\t\t\tthis.removeChildEventListener(thisStackRecord.identifier.windowName, windowIdentifier.windowName, childWrapper);\n\t\t\t\t\tthisStackRecord.visibleWindowIdentifier = null;\n\t\t\t\t}\n\n\t\t\t\tif (!noDocking) { // unless specified otherwise, register the remove window with docking\n\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.removeWindow registering with docking\", stackedWindowIdentifier, windowIdentifier);\n\t\t\t\t\tthis.registerWithDockingManager({ windowIdentifier });\n\t\t\t\t}\n\n\t\t\t\t// go ahead and set visibility even if closing in order to finish this set of stackedWindow updates\n\t\t\t\tif (thisStackRecord.childWindowIdentifiers.length && !thisStackRecord.visibleWindowIdentifier) {\n\t\t\t\t\tthis.setVisibleWindow({ stackedWindowIdentifier, windowIdentifier: thisStackRecord.childWindowIdentifiers[0] }); // make the first window visible by default\n\t\t\t\t}\n\n\t\t\t\tif (!noVisible) { // unless specified otherwise, show the window being removed from the stacked window (it might not be visible)\n\t\t\t\t\tchildWrapper._show({ invokedByParent: true });\n\t\t\t\t}\n\n\t\t\t\tawait this.saveStore(params.stackedWindowIdentifier);\n\n\t\t\t\t// Notify interested listeners (e.g. BaseWindow wrappers of the removed window) that window was removed from the stack\n\t\t\t\tLogger.system.debug(\"StackedWindowManager.removeWindow parent notification\", windowIdentifier.windowName);\n\t\t\t\tRouterClient.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, { type: \"Removed\", stackedWindowIdentifier });\n\t\t\t\tRouterClient.publish(`Finsemble.parentChange.${windowIdentifier.windowName}`, {});\n\n\t\t\t\t// if only one child window now then unregister stacked window, pull child out, and close stackedWindow;\n\t\t\t\t// compare for <= 1 since might be concurrently removing multiple windows from stack for crashed components (i.e. this function is not fully reentrant yet)\n\t\t\t\tif (!noCloseStack && thisStackRecord.childWindowIdentifiers.length <= 1) {\n\t\t\t\t\t//@early-exit. If you uncomment this return statement, the callback will be invoked twice. That causes errors and looks bad\n\t\t\t\t\t//save the child value first because sometimes it's removed from the stackRecord before the query returns, but it still needs to be unregistered\n\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.removeWindowparent closing stacked window\", stackedWindowIdentifier);\n\t\t\t\t\tlet lastChild = thisStackRecord.childWindowIdentifiers[0];\n\t\t\t\t\treturn RouterClient.query(\"DockingService.getGroupsForWindow\", { name: thisStackRecord.name }, (err, response) => {\n\t\t\t\t\t\tthis.registerWithDockingManager({ windowIdentifier: lastChild }, async () => {\n\t\t\t\t\t\t\tlet groups = response.data;\n\t\t\t\t\t\t\tif (groups) {\n\t\t\t\t\t\t\t\tfor (let group of groups) {\n\t\t\t\t\t\t\t\t\tRouterClient.transmit(\"DockingService.joinGroup\", {\n\t\t\t\t\t\t\t\t\t\tgroupName: group,\n\t\t\t\t\t\t\t\t\t\tname: lastChild.windowName\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet childWrapper = this.childWindow[lastChild.windowName];\n\t\t\t\t\t\t\tchildWrapper._show({ invokedByParent: true });\n\n\t\t\t\t\t\t\tlet { wrap } = await FinsembleWindow.getInstance(params.stackedWindowIdentifier);\n\t\t\t\t\t\t\t// for now must call close on public wrapper to have wrapper cleanup happen correctly\n\t\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.removeWindowparent invoking public close\", stackedWindowIdentifier);\n\t\t\t\t\t\t\twrap.close({ closeChildren: false, stackedWindowIdentifier, removeFromWorkspace: true, invokedByParent: true, force: false }, (err) => {\n\t\t\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t\t\t\tresolve({ err });\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.removeWindowparent NOT closing stacked window\", noCloseStack, thisStackRecord);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\terr = \"StackedWindowManager.removeWindow unknown stackedWindowIdentifier\";\n\t\t\t\tLogger.system.warn(err, params);\n\t\t\t}\n\n\t\t\tif (params.waitChildClose) {\n\t\t\t\tlet subscribeID = RouterClient.subscribe(\"Finsemble.\" + params.windowIdentifier.windowName + \".wrapReady\", (err, response) => {\n\t\t\t\t\tif (!(response.data && response.data.name === params.windowIdentifier.windowName && response.data.state === \"closed\")) {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.removeWindow waiting\", params.windowIdentifier.windowName);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.removeWindow continuing\", params.windowIdentifier.windowName);\n\t\t\t\t\t\tRouterClient.unsubscribe(subscribeID);\n\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t\tresolve({ err });\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcallback(err);\n\t\t\t\tresolve({ err });\n\t\t\t}\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Removes a window from the stack then closes it.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.\n\t *\n\t * @param {object} params Parameters\n\t.* @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {object} params.windowIdentifier window to delete\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindowManager\n\t * @private\n\t */\n\tdeleteWindow(params, callback = Function.prototype) {\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tLogger.system.debug(\"StackedWindowManager.deleteWindow\", params);\n\t\t\tif (params.removeFromWorkspace === false) {\n\t\t\t\tcallback();\n\t\t\t\tresolve();\n\t\t\t} else {\n\t\t\t\tparams.noDocking = true;\n\t\t\t\tawait this.removeWindow(params);\n\t\t\t\tlet { wrap } = await FinsembleWindow.getInstance(params.windowIdentifier);\n\t\t\t\twrap.close({\n\t\t\t\t\t/*\n\t\t\t\t\t * If the close event is sent from the system (i.e. user is closing a stacked window from the taskbar), tell the wrapper to not show the error\n\t\t\t\t\t * when attempting to close that window (because the window is already closed from the system).\n\t\t\t\t\t * For now we're still calling this function even if it's a system close because we need some way to close a slacked window from the\n\t\t\t\t\t * taskbar. We can also change the event name we pass into \"this.setupSystemListener\" in case of a system close in the openfinWindowWrapper file from\n\t\t\t\t\t * 'closed' to 'system-closed' so we don't have to close twice. But we decided it's a big change and we should go with a less risky approach in this bug fixing PR.\n\t\t\t\t\t */\n\t\t\t\t\tsuppressError: params.fromSystem,\n\t\t\t\t\tinvokedByParent: true,\n\t\t\t\t\tforce: false,\n\t\t\t\t\tremoveFromWorkspace: true\n\t\t\t\t}, (err) => {\n\t\t\t\t\tcallback(err);\n\t\t\t\t\tresolve({ err });\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Sets the visible window within the stack.  The previously visible window in stack will be automatically hidden.\n\t *\n\t * @param {object} params Parameters\n\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {object} params.windowIdentifier\n\t * @param {object} params.force if force is true then reset visible even if it is already marked as visible in store (this is for startup)\n\t * @todo the force param needs to handle the code below around previouslyVisibleWindow. In that case, the previouslyVisible window may exist, but the listeners may not have been added yet.\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindowManager\n\t * @private\n\t */\n\tsetVisibleWindow(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.setVisibleWindow\", params);\n\t\tvar { force, stackedWindowIdentifier, windowIdentifier } = params;\n\t\tvar thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];\n\n\t\tvar err = null;\n\t\tif (thisStackRecord) {\n\t\t\t//if (force || !this.isShowing(params)) { // skip if window is already showing\n\t\t\tlet previouslyVisibleWindow;\n\t\t\tif (thisStackRecord.visibleWindowIdentifier) { // if previous visible window\n\t\t\t\tpreviouslyVisibleWindow = this.childWindow[thisStackRecord.visibleWindowIdentifier.windowName]; // will use below to hide previous after setting next\n\t\t\t\tif (previouslyVisibleWindow) {\n\t\t\t\t\tthis.removeChildEventListener(stackedWindowIdentifier.windowName, thisStackRecord.visibleWindowIdentifier.windowName, previouslyVisibleWindow);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthisStackRecord.visibleWindowIdentifier = windowIdentifier;\n\n\t\t\tthis.childWindow[windowIdentifier.windowName]._setBounds({ bounds: thisStackRecord.bounds, invokedByParent: true }); // set bounds on new visible window\n\t\t\tlet childWrapper = this.childWindow[windowIdentifier.windowName];\n\t\t\tif (childWrapper.disableFrame) childWrapper.disableFrame();\n\t\t\tthis.addChildEventListener(stackedWindowIdentifier.windowName, thisStackRecord.visibleWindowIdentifier.windowName, childWrapper);\n\t\t\tLogger.system.debug(\"StackedWindowManager.setVisibleWindow showing\", windowIdentifier, \"Cache equality\", this.childWindow[windowIdentifier.windowName] === window._FSBLCache.windows[windowIdentifier.windowName] ? \"equal\" : \"not-equal\");\n\t\t\tchildWrapper._bringToFront({ invokedByParent: true }); // make sure the window is in front (use case: adding tab to window that isn't in front)\n\t\t\tchildWrapper._show({ invokedByParent: true }, () => {  // make the window visible\n\t\t\t\tchildWrapper._focus({ invokedByParent: true });\n\t\t\t\tLogger.system.debug(\"StackedWindowManager.setVisibleWindow shown\", windowIdentifier);\n\t\t\t\t//Doing it this way so that the window in the back is visible when the one in the front hides. This reduces the flickering effect of switching tabs.\n\t\t\t\tif (previouslyVisibleWindow && previouslyVisibleWindow.windowName !== childWrapper.windowName) {\n\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.setVisibleWindow hiding previous\", previouslyVisibleWindow);\n\t\t\t\t\tpreviouslyVisibleWindow._hide({ invokedByParent: true });\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!params.noSave) {\n\t\t\t\tthis.saveStore(params.stackedWindowIdentifier);\n\t\t\t}\n\t\t\t//} //else {\n\t\t\t//Logger.system.debug(\"StackedWindowManager.setVisibleWindow window already showing\", params);\n\t\t\t//}\n\t\t} else {\n\t\t\terr = \"StackedWindowManager.setVisibleWindow unknown stackedWindowIdentifier\";\n\t\t\tLogger.system.warn(err, params);\n\t\t}\n\n\t\tif (callback) callback(err);\n\t}\n\n\t// temporary code to workaround tabbing/tiling problem that reshows window when tabs are reordered\n\thideInactiveChildren(thisStackRecord) {\n\t\tLogger.system.debug(\"StackedWindowManager.hideInactiveChildren\");\n\t\tthisStackRecord.childWindowIdentifiers.forEach(identifier => {\n\t\t\t// only rehide if not the the visible window\n\t\t\tif (thisStackRecord.visibleWindowIdentifier && identifier.windowName !== thisStackRecord.visibleWindowIdentifier.windowName) {\n\t\t\t\tlet wrap = this.childWindow[identifier.windowName];\n\t\t\t\twrap._hide({ invokedByParent: true });\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Reorders the stack, but odes not affect visibility\n\t *\n\t * @param {object} params Parameters\n\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {array} params.windowIdentifiers array of windowIdentifiers which provides the new order\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindowManager\n\t * @private\n\t */\n\treorder(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.reorder\", params);\n\t\tvar { stackedWindowIdentifier, windowIdentifiers } = params;\n\t\t// TBD: verify list of identifiers are the same and if not generate error\n\t\tvar thisStackRecord = this.storeCache[stackedWindowIdentifier.windowName];\n\t\tvar err = null;\n\n\t\tif (thisStackRecord) {\n\t\t\tthisStackRecord.childWindowIdentifiers = windowIdentifiers;\n\t\t\tthis.hideInactiveChildren(thisStackRecord); // this is to sidestep a bug in docking/tiling that reshows a moved tab\n\t\t\tthis.saveStore(stackedWindowIdentifier);\n\t\t} else {\n\t\t\terr = \"StackedWindowManager.reorder unknown stackedWindowIdentifier\";\n\t\t\tLogger.system.warn(err, params);\n\t\t}\n\n\t\tif (callback) callback(err);\n\t}\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// The next section of functions support stacked-window primitives throughout the system.\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t// stacked window minimize (invoked remotely through stacked window wrapper)\n\tminimize(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.minimize\", params);\n\n\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\t\tif (thisStackRecord) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\t\treturn callback(\"undefined window\");\n\t\t\t}\n\t\t}\n\n\t\tif (this.isShowing(params)) {\n\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\tvisibleWindow._minimize(params); // invoke function on active window's wrapper\n\t\t} else {\n\t\t\tLogger.system.error(`StackedWindowManager Warning: minimize received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t}\n\t\tcallback(null);\n\t}\n\n\t// stacked window maximize (invoked remotely through stacked window wrapper)\n\tmaximize(params, callback = Function.prototype) {\n\t\tvar self = this;\n\t\tLogger.system.debug(\"StackedWindowManager.maximize\", params);\n\n\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\t\tif (thisStackRecord) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\t\treturn callback(\"undefined window\");\n\t\t\t}\n\t\t}\n\n\t\tif (this.isShowing(params)) {\n\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\tvar self = this;\n\n\t\t\tRouterClient.query(\"DockingService.maximizeWindow\",\n\t\t\t\t{\n\t\t\t\t\tname: thisStackRecord.name,\n\t\t\t\t\twindowIdentifier: params.stackedWindowIdentifier\n\t\t\t\t}, function (err, response) {\n\t\t\t\t\tthisStackRecord.childWindowIdentifiers.map((childIdentifier) => {\n\t\t\t\t\t\tlet childWindow = self.childWindow[childIdentifier.windowName];\n\t\t\t\t\t\tif (childWindow && childWindow.windowState !== constants.WINDOWSTATE.MAXIMIZED) {\n\t\t\t\t\t\t\tchildWindow.saveWindowState(constants.WINDOWSTATE.MAXIMIZED);\n\t\t\t\t\t\t\tchildWindow.eventManager.trigger(\"maximized\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tcallback(null);\n\t\t\t\t});\n\n\t\t\t// invoke function on active window's wrapper\n\t\t} else {\n\t\t\tcallback(null);\n\n\t\t\tLogger.system.error(`StackedWindowManager Warning: maximize received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t}\n\t}\n\n\t// stacked window restore (invoked remotely through stacked window wrapper)\n\trestore(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.restore\", params);\n\t\tvar err = null;\n\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\tif (thisStackRecord) {\n\t\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t}\n\n\t\t\t// regarding \"true\" below.  For now don't check isShowing. Currently multi-window functions (like bringWindowsToFront) operates off all windows causes errors to be logged (not just visible windows).\n\t\t\tif (true || this.isShowing(params)) {\n\t\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\t\tvar self = this;\n\n\t\t\t\tFinsembleWindowInternal.getInstance({ stackedWindowManager: this, name: thisStackRecord.name }, (err, wrappedWindow) => {\n\t\t\t\t\tif (visibleWindow.windowState === BaseWindow.WINDOWSTATE.MINIMIZED) {\n\t\t\t\t\t\tparams.checkMinimize = false;\n\t\t\t\t\t\tvisibleWindow._restore(params, callback);\n\t\t\t\t\t} else if (visibleWindow.windowState === BaseWindow.WINDOWSTATE.MAXIMIZED) {\n\t\t\t\t\t\tRouterClient.query(\"DockingService.restoreFromMaximize\", {\n\t\t\t\t\t\t\tname: thisStackRecord.name,\n\t\t\t\t\t\t\twindowIdentifier: params.stackedWindowIdentifier\n\t\t\t\t\t\t}, function (err, response) {\n\t\t\t\t\t\t\tthisStackRecord.childWindowIdentifiers.map((childIdentifier) => {\n\t\t\t\t\t\t\t\tlet childWindow = self.childWindow[childIdentifier.windowName];\n\t\t\t\t\t\t\t\tif (childWindow) {\n\t\t\t\t\t\t\t\t\tchildWindow.saveWindowState(constants.WINDOWSTATE.NORMAL);\n\t\t\t\t\t\t\t\t\tchildWindow.eventManager.trigger(\"restored\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// If the window is neither minimized nor maximized, we don't need to do anything but still need to invoke the callback.\n\t\t\t\t\t\t// Otherwise bringToFront won't happen after restore.\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\tLogger.system.error(`StackedWindowManager Warning: restore received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t\t}\n\t\t} else { // else must be an outdated request from a closed stacked window\n\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\terr = \"undefined window\";\n\t\t\tcallback(err);\n\t\t}\n\t}\n\n\t// stacked window focus (invoked remotely through stacked window wrapper)\n\tfocus(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.focus\", params);\n\n\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\t\tif (thisStackRecord) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\t\treturn callback(\"undefined window\");\n\t\t\t}\n\t\t}\n\n\t\tif (this.isShowing(params)) {\n\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\tvisibleWindow._focus(params); // invoke function on active window's wrapper\n\t\t} else {\n\t\t\tLogger.system.error(`StackedWindowManager Warning: focus received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t}\n\t\tcallback(null);\n\t}\n\n\t// stacked window bringToFront (invoked remotely through stacked window wrapper)\n\tbringToFront(params, callback = Function.prototype) {\n\t\tparams = params || {};\n\t\tLogger.system.debug(\"StackedWindowManager.bringToFront\", params);\n\n\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\t\tif (thisStackRecord) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\t\treturn callback(\"undefined window\");\n\t\t\t}\n\t\t}\n\n\t\tif (this.isShowing(params)) {\n\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\tvisibleWindow._bringToFront(params); // invoke function on active window's wrapper\n\t\t} else {\n\t\t\tLogger.system.error(`StackedWindowManager Warning: bringToFront received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t}\n\t\tcallback(null);\n\t}\n\n\tsaveWindowStateToStore(params, callback = Function.prototype) {\n\t\tthis.saveStore(params.stackedWindowIdentifier, callback);\n\t}\n\n\tmergeBounds(stackRecord, bounds) {\n\t\tbounds.right = bounds.left + bounds.width;\n\n\t\tlet newBounds = { left: bounds.left, right: bounds.right, width: bounds.width, top: bounds.top, bottom: bounds.top + bounds.height, height: bounds.height };\n\t\tlet defaultBounds = { defaultLeft: bounds.left, defaultWidth: bounds.width, defaultTop: bounds.top, defaultHeight: bounds.height };\n\t\tObject.assign(stackRecord, newBounds);\n\t\tObject.assign(stackRecord, defaultBounds);\n\t\tstackRecord.bounds = newBounds;\n\t}\n\n\t// stacked window setBounds (invoked remotely through stacked window wrapper)\n\tsetBounds(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.setBounds\", params);\n\t\tvar err = null;\n\n\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\tif (!thisStackRecord) {\n\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\terr = \"undefined window\";\n\t\t} else {\n\t\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t}\n\n\t\t\tif (this.isShowing(params)) {\n\t\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\t\tthis.mergeBounds(thisStackRecord, params.bounds);\n\t\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\t\tvisibleWindow._setBounds(params); // invoke function on active window's wrapper\n\t\t\t} else if (params.windowIdentifier) {\n\t\t\t\tLogger.system.warn(`StackedWindowManager Warning: setBounds received for hidden window ${params.windowIdentifier}`);\n\t\t\t}\n\t\t}\n\n\t\tcallback(err);\n\t}\n\n\t// stacked window getBoundsFromSystem (invoked remotely through stacked window wrapper)\n\tgetBoundsFromSystem(params, callback = Function.prototype) {\t\t\n\t\tLogger.system.debug(\"StackedWindowManager.getBoundsFromSystem\", params);\n\t\tconst thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\t\n\t\t\tif (thisStackRecord) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\t\treturn callback(\"undefined window\");\n\t\t\t}\n\t\t}\n\n\t\tif (this.isShowing(params)) {\n\t\t\tconst visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\tif (!visibleWindow) {\n\t\t\t\tlet err = `stackedWindowManager: cannot find child window ${params.windowIdentifier.windowName}`;\n\t\t\t\tLogger.system.error(err);\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\tvisibleWindow._getBoundsFromSystem(params, (err, bounds) => { // invoke function on active window's wrapper\n\t\t\t\tif (err) {\n\t\t\t\t\tbounds = thisStackRecord.bounds;\n\t\t\t\t}\n\t\t\t\tcallback(err, bounds);\n\t\t\t});\n\t\t} else if (!this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tLogger.system.error(`StackedWindowManager Warning: getBoundsFromSystem received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t\tcallback(\"getBounds on hidden window\");\n\t\t}\n\t};\n\n\t// stacked window getBounds (invoked remotely through stacked window wrapper)\n\tgetBounds(params, callback = Function.prototype) {\n\t\tparams = params || {};\n\t\tLogger.system.debug(\"StackedWindowManager.getBounds\", params);\n\n\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\t\tif (thisStackRecord) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t\tLogger.system.debug(\"StackedWindowManager.getBounds\", params, thisStackRecord);\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\t\treturn callback(\"undefined window\");\n\t\t\t}\n\t\t}\n\n\t\tif (thisStackRecord.bounds) {\n\t\t\tcallback(null, thisStackRecord.bounds);\n\t\t} else if (!thisStackRecord.visibleWindowIdentifier) { // since no visible window use empty bounds; this is to handle an intermittent error that sometimes occurred when creating a stack\n\t\t\tlet emptyBounds = { left: 0, right: 0, width: 10, top: 0, bottom: 0, height: 10 };\n\t\t\tcallback(null, emptyBounds);\n\t\t} else if (this.isShowing(params)) {\n\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\tif (!visibleWindow) {\n\t\t\t\tlet err = `stackedWindowManager: cannot find child window ${params.windowIdentifier.windowName}`;\n\t\t\t\tLogger.system.error(err);\n\t\t\t\tcallback(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\tvisibleWindow._getBounds(params, (err, bounds) => { // invoke function on active window's wrapper\n\t\t\t\tif (err) {\n\t\t\t\t\tbounds = this.storeCache[params.stackedWindowIdentifier.windowName].bounds;\n\t\t\t\t}\n\t\t\t\tcallback(err, bounds);\n\t\t\t});\n\t\t} else if (!this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tLogger.system.error(`StackedWindowManager Warning: getBounds received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t\tcallback(\"getBounds on hidden window\");\n\t\t} else if (thisStackRecord && thisStackRecord.bounds) {\n\t\t\tcallback(null, thisStackRecord.bounds);\n\t\t} else {\n\t\t\tcallback(\"something went wrong\");\n\t\t}\n\t}\n\n\t// stacked window updateOptions (invoked remotely through stacked window wrapper)\n\tupdateOptions(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.updateOptions\", params);\n\t\tvar err = null;\n\n\t\t// TABBING TBD: put in a getter function for the stacked records to provide common error checking.  Docking might invoke for non-existent stacked window\n\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\tif (thisStackRecord) {\n\t\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t}\n\n\t\t\tif (this.isShowing(params)) {\n\t\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\t\tvisibleWindow._updateOptions(params); // invoke function on active window's wrapper\n\t\t\t\t// if (visibleWindow) { // update options is invoked during docking registration while stacked window is being created, so may not have visible window\n\t\t\t\t// \tvisibleWindow._updateOptions(params); // invoke function on active window's wrapper\n\t\t\t\t// }\n\t\t\t} else {\n\t\t\t\tLogger.system.error(`StackedWindowManager.updateOptions Warning: updateOptions received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t\t}\n\t\t} else { // else must be an outdated request from a closed stacked window\n\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\terr = \"undefined window\";\n\t\t}\n\n\t\tcallback(err);\n\t}\n\n\t// stacked window hide (invoked remotely through stacked window wrapper)\n\thide(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.hide\", params);\n\n\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\t\tif (thisStackRecord) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\t\treturn callback(\"undefined window\");\n\t\t\t}\n\t\t}\n\n\t\tif (this.isShowing(params)) {\n\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\tvisibleWindow._hide(params); // invoke function on active window's wrapper\n\t\t} else {\n\t\t\tLogger.system.error(`StackedWindowManager Warning: hide received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t}\n\t\tcallback(null);\n\t}\n\n\t// stacked window show (invoked remotely through stacked window wrapper)\n\tshow(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.show\", params);\n\n\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\t\tif (thisStackRecord) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\t\treturn callback(\"undefined window\");\n\t\t\t}\n\t\t}\n\n\t\tif (this.isShowing(params)) {\n\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\tvisibleWindow._show(params); // invoke function on active window's wrapper\n\t\t} else {\n\t\t\tLogger.system.error(`StackedWindowManager Warning: show received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t}\n\t\tcallback(null);\n\t}\n\n\t// this stacked window close applies to an individual child window (see closeStackedWindow for closing the complete stackedWindow)\n\tclose(params, callback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.close\", params);\n\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\tif (params.removeFromWorkspace || this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tthis.closeStackedWindow(params, callback);\n\t\t} else {\n\t\t\tthis.deleteWindow(params, callback);\n\t\t}\n\t}\n\n\t// stacked window alwaysOnTop (invoked remotely through stacked window wrapper)\n\talwaysOnTop(params, callback) {\n\t\tLogger.system.debug(\"StackedWindowManager.alwaysOnTop\", params);\n\n\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\t\tif (thisStackRecord) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t} else {\n\t\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\t\treturn callback(\"undefined window\");\n\t\t\t}\n\t\t}\n\n\t\tif (this.isShowing(params)) {\n\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\tif (visibleWindow._alwaysOnTop) {\n\t\t\t\tvisibleWindow._alwaysOnTop(params); // invoke function on active window's wrapper\n\t\t\t}\n\t\t} else {\n\t\t\tLogger.system.error(`StackedWindowManager Warning: alwaysOnTop received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t}\n\t\tcallback(null);\n\t}\n\n\t// stacked window setOpacity (invoked remotely through stacked window wrapper)\n\tsetOpacity(params, callback = Function.prototype) {\n\t\tvar err = null;\n\t\tLogger.system.debug(\"StackedWindowManager.setOpacity\", params);\n\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\tif (thisStackRecord) {\n\t\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\t\tif (!thisStackRecord.visibleWindowIdentifier) return; //there's no window to set opacity on.\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t}\n\n\t\t\tif (this.isShowing(params)) {\n\t\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\t\tparams.invokedByParent = true; // prevents wrapper function from recalling parent (causing a loop)\n\t\t\t\tvisibleWindow._setOpacity(params); // invoke function on active window's wrapper\n\t\t\t} else {\n\t\t\t\tLogger.system.error(`StackedWindowManager Warning: setOpacity received for hidden window ${params.windowIdentifier.windowName}`);\n\t\t\t}\n\t\t} else {\n\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\terr = \"undefined window\";\n\t\t}\n\t\tcallback(err);\n\t}\n\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// General functions support workspace and docking\n\t// TABBING TBD: NEED GENERAL PARAMETERIZED VERSIONS OF THE FUNCTIONS BELOW PULLED OUT OF THE WINDOW CLIENT AND PUT IN COMMON TO SHARE\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t// placeholder for workspace integration\n\tsaveWindowOptions(params, stackedWindow, maincallback = Function.prototype) {\n\t\tLogger.system.debug(\"StackedWindowManager.setComponentState\", stackedWindow.identifier);\n\n\t\tlet descriptor: any = {};\n\n\t\t// Only save required items to cache instead of saving everything.\n\t\tlet thingsToInclude = [\"name\", \"windowName\", \"childWindowIdentifiers\", \"top\", \"left\", \"height\", \"width\", \"bottom\", \"right\", \"windowType\", \"visibleWindowIdentifier\", \"customData\", \"bounds\"];\n\n\t\tfor (let k of Object.keys(stackedWindow)) {\n\t\t\t//Don't save any function, private thing, or the visible window (which is a wrapped window object)\n\t\t\tif (thingsToInclude.includes(k)) {\n\t\t\t\tdescriptor[k] = stackedWindow[k];\n\t\t\t}\n\t\t}\n\n\t\tlet thisStackRecord = this.storeCache[stackedWindow.identifier.windowName];\n\t\tif (!thisStackRecord) return maincallback(\"stack record not found\");\n\n\t\tfor (let k of Object.keys(thisStackRecord)) {\n\t\t\tif (thingsToInclude.includes(k)) {\n\t\t\t\tdescriptor[k] = thisStackRecord[k];\n\t\t\t}\n\t\t}\n\n\t\tif (descriptor.bounds && descriptor.bounds.persistBounds) {\n\t\t\tdelete descriptor.bounds.persistBounds;\n\t\t}\n\n\t\tstackedWindow.saveCompleteWindowState(descriptor, () => {\n\t\t\tvar saveChildBounds = (childIdentifier, done) => {\n\t\t\t\tLogger.system.debug(\"StackedWindowManager.saveWindowOptions saveCompleteWindowState child\", childIdentifier.windowName);\n\t\t\t\tlet bounds = thisStackRecord.bounds;\n\t\t\t\tbounds.persistBounds = true;\n\n\t\t\t\tlet wrap = this.childWindow[childIdentifier.windowName];\n\n\t\t\t\tif (wrap) {\n\t\t\t\t\twrap._setBounds({ bounds, invokedByParent: true }, done);\n\t\t\t\t} else {\n\t\t\t\t\tFinsembleWindowInternal.getInstance({ name: childIdentifier.windowName }, (err, wrappedWindow) => {\n\t\t\t\t\t\twrappedWindow._setBounds({ bounds, invokedByParent: true }, done);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tLogger.system.debug(\"StackedWindowManager.saveWindowOptions saveCompleteWindowState start\", stackedWindow.identifier.windowName, descriptor);\n\n\t\t\tif (!params.closing) {\n\t\t\t\tasyncEach(thisStackRecord.childWindowIdentifiers, saveChildBounds, () => {\n\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.saveWindowOptions saveCompleteWindowState done\");\n\t\t\t\t\tmaincallback();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tLogger.system.debug(\"StackedWindowManager.saveWindowOptions saveCompleteWindowState skipped\");\n\t\t\t\tmaincallback();\n\t\t\t}\n\n\t\t});\n\n\t}\n\n\t/**\n\t * Register a window with docking. It transmits a message to the LauncherService, which registers it as a dockable window.\n\t *\n\t * @param {object} params Parameters\n\t * @param {string} params.windowIdentifier the window to register (may be stacked window or child window)\n\t * @private\n\t */\n\tregisterWithDockingManager(params, cb = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tLogger.system.debug(\"StackedWindowManager.registerWithDockingManager\", params);\n\t\t\tvar windowName = params.windowIdentifier.windowName;\n\t\t\tparams.windowIdentifier.name = windowName;\n\t\t\t// var thisStackRecord = this.storeCache[windowName];\n\t\t\t// var bounds = thisStackRecord.bounds;\n\n\t\t\tRouterClient.query(\"DockingService.registerWindow\", Object.assign(params.windowIdentifier, params.windowType), function () {\n\t\t\t\tLogger.system.debug(\"StackedWindowManager Docking Registration complete.\", params);\n\t\t\t\tresolve();\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Unregister a window with docking.\n\t *\n\t * @param {object} params Parameters\n\t * @param {boolean} params.removeFromWorkspace true to remove from workspace\n\t * @param {string} params.windowIdentifier window to unregister\n\t * @private\n\t */\n\tderegisterWithDockingManager(params) {\n\t\tLogger.system.debug(\"StackedWindowManager.deregisterWithDockingManager\", params);\n\t\tRouterClient.transmit(\"DockingService.deregisterWindow\", {\n\t\t\tname: params.windowIdentifier.windowName,\n\t\t\tuserInitiated: params.removeFromWorkspace\n\t\t});\n\t}\n\n\tstartMove(params, callback = Function.prototype) {\n\t\t// stacked window setBounds (invoked remotely through stacked window wrapper)\n\t\tLogger.system.debug(\"StackedWindowManager.startMove\", params);\n\t\tvar err = null;\n\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\tif (!thisStackRecord) {\n\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\terr = \"undefined window\";\n\t\t} else {\n\t\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t}\n\t\t\tif (this.isShowing(params)) {\n\t\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\t\tvisibleWindow.startMove(); // invoke function on active window's wrapper\n\t\t\t} else {\n\t\t\t\tLogger.system.error(`StackedWindowManager Warning: startMove received for hidden window ${params.windowIdentifier}`);\n\t\t\t}\n\t\t}\n\n\t\tcallback(err);\n\t}\n\n\tstopMove(params, callback = Function.prototype) {\n\t\t// stacked window setBounds (invoked remotely through stacked window wrapper)\n\t\tLogger.system.debug(\"StackedWindowManager.stopMove\", params);\n\t\tvar err = null;\n\t\tvar thisStackRecord = this.storeCache[params.stackedWindowIdentifier.windowName];\n\t\tif (!thisStackRecord) {\n\t\t\tLogger.system.warn(\"ignoring command because StackedWindow undefined (probably okay due to its recent close)\", params);\n\t\t\terr = \"undefined window\";\n\t\t} else {\n\t\t\t// if operating on StackedWindow then operation should apply to the visible window\n\t\t\tif (this.operatingDirectlyOnStackedWindow(params)) {\n\t\t\t\tparams.windowIdentifier = thisStackRecord.visibleWindowIdentifier;\n\t\t\t}\n\t\t\tif (this.isShowing(params)) {\n\t\t\t\tvar visibleWindow = this.childWindow[params.windowIdentifier.windowName];\n\t\t\t\tvisibleWindow.stopMove(); // invoke function on active window's wrapper\n\t\t\t} else {\n\t\t\t\tLogger.system.error(`StackedWindowManager Warning: stopMove received for hidden window ${params.windowIdentifier}`);\n\t\t\t}\n\t\t}\n\n\t\tcallback(err);\n\t}\n}\n\nvar serviceInstance = new StackedWindowManager({});\n\nexport default serviceInstance;\n\n\n\n// WEBPACK FOOTER //\n// src/services/window/StackedWindowManager/stackedWindowManager.ts","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, false, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = clone;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.clone/index.js\n// module id = 127\n// module chunks = 0","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array ? array.length : 0;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\n/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  if (value !== value) {\n    return baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a cache value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values ? values.length : 0;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order of result values is determined by the\n * order they occur in the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nmodule.exports = difference;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/lodash.difference/index.js\n// module id = 128\n// module chunks = 0","// replace with import when ready\nwindow.methodCalls = {};\nimport FSBLDependencyManager from \"../../../common/dependencyManager\";\nimport * as util from \"../../../common/util\";\nimport async from \"async\";\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport DockingCalculator from \"./dockingCalculator\";\nimport { FinsembleWindowInternal } from \"../WindowAbstractions/FinsembleWindowInternal\";\nimport AutoArrange from \"../MultiWindowFeatures/autoArrange\";\nimport { System } from \"../../../common/system\";\nimport DockableWindow from \"./dockableWindow\";\nimport BoxMath from \"./boxMath\";\nimport LauncherClient from \"../../../clients/launcherClient\";\nLauncherClient.initialize();\nimport ConfigClient from \"../../../clients/configClient\";\nConfigClient.initialize();\nimport Logger from \"../../../clients/logger\";\nLogger.start();\nvar DockingMain_AUTO_ARRANGE_CHANNEL = \"DockingService.AutoarrangeStatus\";\nvar serviceConfig = {};\nvar groupData = {};\nimport * as constants from \"../../../common/constants\";\nimport { WindowGroup } from \"../../../common/window/windowGroup\";\nimport { isEqual as deepEqual } from \"lodash\";\nimport { addUnclaimedRectToRawMonitor, deriveWindowPosition, splitWindowMoves } from \"./monitorUpdateHandler\";\nconst APPLICATION_STATE_CHANNEL = constants.APPLICATION_STATE_CHANNEL;\n//Paste this into a toolbar's console.\n// [1,2,3,4,5].forEach(num => FSBL.Clients.LauncherClient.spawn(\"Welcome Component\", {name: \"window\" + num, addToWorkspace: true}))\n\n//const merge = require(\"deepmerge\");\nconst clone = function (obj) {\n\t//This has been tested a good amount. Previous to this commit we were using a mix of deepmerge and JSON.parse(JSON.stringify()).\n\t//Trying lodash.deepclone made my tests take 2-3s.\n\t//JSON.parse everywhere made them take ~ 1s.\n\t//Using JSON.parse on arrays and deep merge on objects makes them take 7-900ms.\n\tif (Array.isArray(obj)) {\n\t\treturn obj.slice();\n\t}\n\ttry {\n\t\treturn JSON.parse(JSON.stringify(obj));\n\t} catch (e) {\n\t\tLogger.system.error(\"clone error\", e);\n\t\treturn e;\n\t}\n\n};\nlet CALCULATOR = {};\n/**\n * The docking Service is great.\n * @constructor\n */\n\nclass DockingMain extends DockingCalculator {\n\t/** @alias DockingMain# */\n\n\tconstructor(params, dependencies) {\n\t\t/**\n\t\t * @param {object} params Config\n\t\t * @param {object} dependencies Dependency object that provides the System, and Logger.\n\t\t * @param {System} dependencies.System\n\t\t * @param {Logger} dependencies.Logger\n\t\t */\n\t\tsuper(params, dependencies);\n\n\t\t//We're doing this for hole-filling. need to remove the window so that while we're resizing windows, they're unphased by the windows that are resizing.\n\t\tCALCULATOR.addWindow = super.addWindow.bind(this);\n\t\tCALCULATOR.removeWindow = super.removeWindow.bind(this);\n\t\tCALCULATOR.getBoundsOfGroupWindows = super.getBoundsOfGroupWindows.bind(this);\n\t\tCALCULATOR.cleanupSharedEdges = super.cleanupSharedEdges.bind(this);\n\t\tthis.AutoArrange = new AutoArrange({\n\t\t\tDockingCalculator: this\n\t\t});\n\t\t//for reverting autoarrange\n\t\tthis.cachedPositions = {};\n\t\tthis.registrationPending = {}; // map of registrations that are pending, indexed by window name\n\t\tthis.deregistrationPending = {}; // map of deregistrations that are pending, indexed by window name\n\n\t\t//For disabling tabbing or tiling\n\t\tthis.tabbingEnabled = typeof params.tabbingEnabled !== undefined ? params.tabbingEnabled : false;\n\t\tthis.tilingEnabled = typeof params.tilingEnabled !== undefined ? params.tilingEnabled : false;\n\t\t//Determined by services config. Set when docking is constructed.\n\t\tthis.enableWindowsAeroSnap = false;\n\t\t//Default height and width for a dockableComponent. This comes from the main config with\n\t\t//docking options. These defaults are different from launchers defaults for a given window\n\t\tthis.defaultHeight = params.defaultHeight;\n\t\tthis.defaultWidth = params.defaultWidth;\n\n\t\tutil.Monitors.on(\"monitors-changed\", this.monitorsChanged.bind(this));\n\n\t\tthis.activeWorkspace = { name: \"\" };\n\t\tthis.bindAllFunctions();\n\t}\n\n\tbindAllFunctions() {\n\t\tlet self = this;\n\t\tfor (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {\n\t\t\tif (self[name] instanceof Function) {\n\t\t\t\tself[name] = self[name].bind(self); // only bind function properties\n\t\t\t}\n\t\t}\n\t}\n\n\twindowServiceChannelName(channelTopic) { return `WindowService-Request-${channelTopic}`; }\n\n\t/**\n\t * Function that sets wether tabbing or tiling is disabled for this instance of DockingMain\n\t *\n\t * @param {object} serviceConfig The service config\n\t */\n\tsetTilingOrTabbingEnabled(serviceConfig) {\n\t\tlet tabbing = true, tiling = true;\n\n\t\tif (serviceConfig.hasOwnProperty(\"tabbing\") && serviceConfig.tabbing.hasOwnProperty(\"enabled\")) {\n\t\t\tLogger.system.debug(\"Setting tabbing prop based on config state: \" + serviceConfig.tabbing.enabled);\n\t\t\ttabbing = serviceConfig.tabbing.enabled;\n\t\t}\n\n\t\tif (serviceConfig.hasOwnProperty(\"tiling\") && serviceConfig.tiling.hasOwnProperty(\"enabled\")) {\n\t\t\tLogger.system.debug(\"Setting tiling prop based on config state: \" + serviceConfig.tiling.enabled);\n\t\t\ttiling = serviceConfig.tiling.enabled;\n\t\t}\n\n\t\tthis.tabbingEnabled = tabbing;\n\t\tthis.tilingEnabled = tiling;\n\t}\n\n\t/**\n\t * Function that runs after a window has completed a move action\n\t *\n\t * @param {object} win The window object\n\t * @param {boolean} triggeredByAutoArrange True if the move was triggered by auto arrange. If the move was triggered by auto arrange, we don't want to delete cached window positions.\n\t */\n\tonMoveComplete(win, triggeredByAutoArrange) {\n\t\tlet { monitor } = win;\n\n\t\tif (!triggeredByAutoArrange && this.cachedPositions[monitor.name] && this.cachedPositions[monitor.name][win.name]) {\n\t\t\tdelete this.cachedPositions[monitor.name][win.name];\n\t\t}\n\n\t\tthis.tellWindowsToSaveLocation();\n\t\tthis.updateGroupData();\n\n\t\t//If an autoarrangeable window is moved, and the move isn't trigerred by auto arrange, we want to wipe the status\n\t\tif (!triggeredByAutoArrange && this.AutoArrange.isArranged[monitor.name] && this.getWindow(win.name).win.allowAutoArrange) {\n\t\t\tthis.AutoArrange.isArranged[monitor.name] = false;\n\t\t\tthis.cachedPositions[monitor.name] = {};\n\t\t\tthis.sendAutoArrangeStatusUpdate();\n\t\t}\n\t}\n\n\tupdateGroupData() {\n\t\tconst changed = this._updateGroupData();\n\t\tLogger.system.debug(\"Publishing Group Update: DockingCalc.updateGroupData\");\n\t\tif (changed) {\n\t\t\tthis.publishGroupUpdate();\n\t\t}\n\t}\n\n\t/**\n\t * move the specific window out of claimed space, considering all the dockable window across all monitors\n\t *\n\t * @param {object} nameOfWindowToMove the name of the window to move\n\t * @param {boolean} initializing indicates whether this window is still initializing.\n\t */\n\tmoveWindowOutOfClaimedSpaceByName(nameOfWindowToMove, initializing = false) {\n\t\tvar dockableWindows = [];\n\n\t\tlet serviceMonitors = this.getMonitors(); //All the monitors the docking service is tracking\n\t\tlet monitors = Object.keys(serviceMonitors).map((mon) => {\n\t\t\treturn serviceMonitors[mon];\n\t\t}); //convert object to array\n\n\t\tfor (let windowName of this.getWindowNames()) {\n\t\t\tlet dockableWin = this.getWindow(windowName);\n\t\t\tif (dockableWin && dockableWin.isDockableComponent) {\n\t\t\t\tdockableWindows.push(dockableWin);\n\t\t\t}\n\t\t}\n\n\t\t// by definition claimed space it what's occupied by the dockable windows (when they are docked) so invoke for each dockable window\n\t\tfor (let dockableWin of dockableWindows) {\n\t\t\tthis.moveWindowOutOfClaimedSpace(dockableWin, monitors, nameOfWindowToMove, initializing);\n\t\t}\n\t}\n\n\t/**\n\t * Handler for incoming docking deregistration request for specified window.\n\t * Invoked both by RouterClient.addListener(\"DockingService.registerWindow\") and RouterClient.addListener(\"DockingService.deregisterWindow\").\n\t * @private\n\t */\n\tderegisterWindow(self, err, response) {\n\n\t\tconst windowName = response.data.name;\n\n\t\t// if a registration pending for window, then can't deregister yet, so save deregister request here and process it when registration is complete\n\t\tif (self.registrationPending[windowName]) {\n\t\t\tlet deregisterArgs = { err, response }; // save original args to use when later unregistering\n\t\t\tself.deregistrationPending[windowName] = deregisterArgs;\n\t\t\tLogger.system.info(\"deregisterWindow: creating pending deregistration\", windowName);\n\n\t\t} else { // no registration pending so continue with deregistration\n\t\t\tlet registeredWindows = self.getWindowNames();\n\t\t\tLogger.system.info(\"Trying to deregisterWindow\", windowName);\n\t\t\tif (!registeredWindows.includes(windowName)) {\n\t\t\t\tLogger.system.debug(\"Window tried to deregister, but never registered\", windowName);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet win = self.getWindow(windowName);\n\n\t\t\tif (response.data.removeFromWorkspace) {\n\t\t\t\tlet bounds = win.getBounds();\n\t\t\t\tconst movableGroup = self.getMovableGroup(windowName);\n\t\t\t\tconst immobileGroup = self.getImmobileGroup(windowName);\n\t\t\t\tconst fillHoleInGroup = self.shouldFillHolesInGroups(movableGroup);\n\n\t\t\t\tself.removeWindowFromAllGroups(win);\n\t\t\t\tself.wipeSnapRelationships(windowName);\n\t\t\t\tself.removeWindow(windowName);\n\t\t\t\tif (movableGroup && fillHoleInGroup) {\n\t\t\t\t\tLogger.system.debug(\"docking.deregisterWindow\", windowName, movableGroup, fillHoleInGroup);\n\t\t\t\t\tconsole.debug(\"docking.deregisterWindow\", windowName, movableGroup, fillHoleInGroup);\n\t\t\t\t\tmovableGroup.fillHole(bounds);\n\t\t\t\t\tself.cleanupGroupGaps(movableGroup);\n\t\t\t\t\tself.buildSnapRelationshipsForGroup(movableGroup);\n\t\t\t\t} else {\n\t\t\t\t\tLogger.system.debug(\"docking.deregisterWindow fix option\", windowName, movableGroup, fillHoleInGroup);\n\t\t\t\t\tconsole.debug(\"docking.deregisterWindow fix option\", windowName, movableGroup, fillHoleInGroup);\n\t\t\t\t\t[movableGroup, immobileGroup].forEach(grp => grp && self.fixGroupMembership(grp));\n\t\t\t\t}\n\t\t\t\tif (immobileGroup) {\n\t\t\t\t\timmobileGroup.updateBounds();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// We're not removing the window from the workspace (i.e. deregisterWindow gets triggered by workspace reload or switching workspaces)\n\t\t\t\t// in which case we can skip rebuilding group relationships and just remove the window.\n\t\t\t\tself.removeWindow(windowName);\n\t\t\t}\n\n\t\t\t//will handle any group updates that need to be sent.\n\t\t\tif (self.onMoveComplete && response.data.userInitiated === true) {\n\t\t\t\tself.onMoveComplete(win);\n\t\t\t}\n\n\t\t\tLogger.system.info(\"deregisterWindow: complete\", windowName);\n\t\t\tLogger.system.debug(\"Docking: Registered Windows\", Object.keys(self.getWindows()));\n\t\t}\n\t}\n\n\t/**\n\t *  Helper function that determines whether a group should fill holes left by windows that leave it.\n\t * @params {dockableGroup} grp The group for which to fill holes (or not).\n\t */\n\tshouldFillHolesInGroups(grp) {\n\t\tlet fillHoleInGroup = this.groupMode.fillHolesOnUndock;\n\t\tif (fillHoleInGroup) {\n\t\t\tfillHoleInGroup = grp && grp.isARectangle();\n\t\t}\n\t\treturn fillHoleInGroup;\n\t}\n\t/**\n\t * When a window no longer delegates its movement to us (it closes or unregisters for some reason), we need to make sure we don't leave strange, disconnected groups out there.\n\t * If you imagine [A][B][C], and B is closed, this code will make sure that A & C don't remain grouped.\n\t * @param {*} grp\n\t */\n\tfixGroupMembership(grp) {\n\t\tthis.buildSnapRelationshipsForGroup(grp);\n\t\tlet windowsThatWereInGroup = grp.getWindowNames();\n\t\tlet wasMovable = grp.isMovable;\n\t\tthis.removeGroup(grp.name);\n\t\tfor (let name of windowsThatWereInGroup) {\n\t\t\tlet grp;\n\t\t\tif (wasMovable) {\n\t\t\t\tgrp = this.getMovableGroup(name);\n\t\t\t} else {\n\t\t\t\tgrp = this.getImmobileGroup(name);\n\t\t\t}\n\t\t\t// Prevent exponential group formation by not calling formGroup is the window is already in a group.\n\t\t\tif (!grp) {\n\t\t\t\tthis.formGroup(name, { isMovable: wasMovable, whitelist: windowsThatWereInGroup });\n\t\t\t}\n\t\t}\n\t}\n\n\t//If a window closes uncleanly, we will clean up docking.\n\tonWindowClosed(err, response) {\n\t\tthis.deregisterWindow(this, null, response);\n\t\tthis.updateGroupData();\n\t}\n\n\t/**\n\t * Creates router endpoints for all of our client APIs. Add servers or listeners for requests coming from your clients.\n\t * @private\n\t */\n\tcreateRouterEndpoints() {\n\t\tvar self = this;\n\t\tthis.dockableWindows = {};\n\t\tRouterClient.subscribe(constants.WORKSPACE.UPDATE_PUBSUB, function (err, response) {\n\t\t\tif (response.data.reason === \"workspace:load:dataRetrieved\"\n\t\t\t\t|| response.data.reason === \"workspace:load:finished\"\n\t\t\t\t|| response.data.reason === \"rename\") {\n\t\t\t\tself.handleWorkspaceUpdate(err, response);\n\t\t\t}\n\t\t});\n\n\t\tRouterClient.addListener(\"DockingService.showAtMousePosition\", (err, response) => {\n\t\t\tlet windowIdentifier = response.data;\n\t\t\tlet win = self.getWindow(windowIdentifier.windowName);\n\t\t\tfin.desktop.System.getMousePosition((position) => {\n\t\t\t\t//Here we generate a fake event to move the window where we want it to go. This will cause docking to go through its typical event loop, undock the window, and everything else the user expects.\n\t\t\t\tlet bounds = win.getBounds();\n\n\t\t\t\tif (!win.isDocked) {\n\t\t\t\t\tbounds.top = position.top - bounds.height + 10;\n\t\t\t\t\t//center the window over the mouse position. Feels better.\n\t\t\t\t\tbounds.left = position.left - (bounds.width / 2);\n\t\t\t\t\tbounds.right = bounds.left + bounds.width;\n\t\t\t\t\tbounds.bottom = bounds.top + bounds.height;\n\t\t\t\t}\n\n\t\t\t\twin.setBounds(bounds, () => {\n\t\t\t\t\twin.show();\n\t\t\t\t\tself.tellWindowsToSaveLocation();\n\t\t\t\t});\n\n\t\t\t});\n\t\t});\n\n\t\t//RouterClient.addListener(\"LauncherService.WindowClosed\", this.onWindowClosed);\n\n\t\t//RouterClient.addResponder(CHANNELS.register, this.addToRegistrationQueue);\n\n\t\t// Handler for incoming docking registration request for specified window.\n\t\tRouterClient.addResponder(\"DockingService.registerWindow\", function (err, message) {\n\t\t\tvar data = message.data;\n\t\t\tif (self.getWindow(data.name)) {\n\t\t\t\t//If the window has already registered with docking, it does not need to register again\n\t\t\t\treturn message.sendQueryResponse({\n\t\t\t\t\tcode: \"component_already_registered\",\n\t\t\t\t\tmessage: \"Component has already registered with WindowService.\"\n\t\t\t\t}, null);\n\t\t\t}\n\n\t\t\t// if a deregistration is pending (i.e. waiting on previous registration to complete), then this new registration and pending deregistration cancels each other\n\t\t\t// this case improbably case can only happen with a rapid series of a register followed by deregister and another register, all before the first register completes\n\t\t\tif (self.deregistrationPending[data.name]) {\n\t\t\t\tLogger.system.info(\"registerWindow: incoming registration cancelled by pending deregistration\", data.name);\n\t\t\t\tdelete self.deregistrationPending[data.name];\n\t\t\t} else {\n\t\t\t\tLogger.system.info(\"registerWindow: starting registration\", data.name);\n\t\t\t\tself.registrationPending[data.name] = true; // mark pending registration (needed to handle deregisterWindow because register is async, leaving a timing gap)\n\n\t\t\t\tif (!data.windowType) data.windowType = \"OpenFinWindow\";\n\t\t\t\tFinsembleWindowInternal.getInstance(data, (err, windowWrap) => {\n\t\t\t\t\tif (err || windowWrap === null) {\n\t\t\t\t\t\tLogger.system.error(\"Docking: registerWindow. addWindow err\", message.data.name, err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (message.data.options && message.data.options.canGroup === false) {\n\t\t\t\t\t\tself.addToGroupBlacklist(data.name);\n\t\t\t\t\t}\n\n\t\t\t\t\tLogger.system.info(\"Docking: registerWindow. addWindow\", message.data.name, message.data);\n\t\t\t\t\tlet dockingOptions = new DefaultDockingOptions(data, self.MINIMUM_HEIGHT, self.MINIMUM_WIDTH);\n\n\t\t\t\t\twindowWrap.dockingOptions = dockingOptions;\n\t\t\t\t\tif (data.options) {\n\t\t\t\t\t\twindowWrap.snapping = data.options.snapping;\n\t\t\t\t\t\twindowWrap.tiling = data.options.tiling;\n\t\t\t\t\t\twindowWrap.tabbing = data.options.tabbing;\n\t\t\t\t\t\twindowWrap.allowAutoArrange = data.options.allowAutoArrange;\n\t\t\t\t\t\tif (windowWrap.setMinimizeAbility) {\n\t\t\t\t\t\t\tconst canWindowMinimize = data.options.canMinimize !== false;\n\t\t\t\t\t\t\twindowWrap.setMinimizeAbility(canWindowMinimize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (windowWrap.setMaximizeAbility) {\n\t\t\t\t\t\t\tconst canWindowMaximize = data.options.canMaximize !== false;\n\t\t\t\t\t\t\twindowWrap.setMaximizeAbility(canWindowMaximize);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twindowWrap.enableWindowsAeroSnap = self.enableWindowsAeroSnap;\n\n\t\t\t\t\tself.addWindow(windowWrap).then(function () {\n\t\t\t\t\t\tself.checkIfWindowIsInGroup(data.name);\n\t\t\t\t\t\t//failure point, add window failed.\n\t\t\t\t\t\tmessage.sendQueryResponse(null, {\n\t\t\t\t\t\t\tstatus: \"finished\"\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tself.moveWindowOutOfClaimedSpaceByName(data.name, true);\n\n\t\t\t\t\t\tLogger.system.info(\"registerWindow: registration complete\", data.name);\n\t\t\t\t\t\tLogger.system.debug(\"Docking: Registered Windows\", Object.keys(self.getWindows()));\n\n\t\t\t\t\t\t// registration complete so can clear marker for pending registration; deregistrationWindow looks for this same marker\n\t\t\t\t\t\tdelete self.registrationPending[data.name];\n\n\t\t\t\t\t\t// if there is a deregister pending for the window (see deregisterWindow) can now process it since registration is complete\n\t\t\t\t\t\tif (self.deregistrationPending[data.name]) {\n\t\t\t\t\t\t\tlet deregisterArgs = self.deregistrationPending[data.name]; // get the original deregister arguments\n\t\t\t\t\t\t\tself.deregisterWindow(self, deregisterArgs.err, deregisterArgs.response); // process the pending deregister\n\t\t\t\t\t\t\tdelete self.deregistrationPending[data.name]; // pending deregistration has been processed so delete\n\t\t\t\t\t\t\tLogger.system.info(\"deregisterWindow: pending deregistration processed\", data.name);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t});\n\n\t\t/**\n\t\t * Not sure we'll need this any more since we have the wrappers. Leaving in until we can clarify.\n\t\t */\n\t\tRouterClient.addPubSubResponder(/WindowMove.*/, {});\n\n\t\t//Here we set the initial state of the two group topics (WORKSPACE_GROUP_UPDATE is the old/legacy one)\n\t\tRouterClient.addPubSubResponder(constants.DOCKING.GROUP_UPDATE, this.buildGroupUpdate());\n\t\tRouterClient.addPubSubResponder(constants.DOCKING.WORKSPACE_GROUP_UPDATE, this.buildWorkspaceGroupUpdate());\n\n\t\tRouterClient.addResponder(\"DockingService.moveWindow\", (err, message) => {\n\t\t\tif (Object.keys(message.data).length) {\n\t\t\t\t//don't throw an error if window isn't found.\n\t\t\t\tif (!self.getWindow(message.name, false)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar moveRequest = message.data;\n\t\t\t\tself.setMovingWindow(self.dockableWindows[message.name]);\n\t\t\t\tself.onWindowMove(moveRequest);\n\t\t\t}\n\t\t\tmessage.sendQueryResponse(null, null);\n\t\t});\n\n\t\t/**\n\t\t * When groupMode changes in a toolbar (or any component), it uses PubSub to publish a state change.\n\t\t */\n\t\tRouterClient.addPubSubResponder(\"DockingService.groupMode\", {});\n\n\t\tRouterClient.subscribe(\"WindowMoved\", (err, response) => {\n\t\t\t//this.onMouseUp();\n\t\t});\n\t\tRouterClient.subscribe(\"monitorInfo\", function (err, response) {\n\t\t\tself.updateMonitorInfo(response.data);\n\t\t});\n\t\tRouterClient.addResponder(\"DockingService.getGroupMode\", function (err, message) {\n\t\t\tmessage.sendQueryResponse(null, self.getGroupMode());\n\t\t});\n\n\t\tRouterClient.addResponder(\"DockingService.getBounds\", function (err, message) {\n\t\t\tself.getBounds(message.data, function (err, bounds) {\n\t\t\t\tmessage.sendQueryResponse(err, bounds);\n\t\t\t});\n\t\t});\n\n\t\tRouterClient.addListener(\"DockingService.toggleGroupMode\", function (err, message) {\n\t\t\tvar groupMode = self.getGroupMode();\n\t\t\tgroupMode.enabled = !groupMode.enabled;\n\t\t\tself.setGroupMode(groupMode);\n\t\t});\n\n\t\tRouterClient.addListener(\"DockingService.updateWindowLocation\", function (err, message) {\n\t\t\tvar updateWindow = self.getWindow(message.data.windowName, false);\n\t\t\t//we get updates for _every_ window when their location changes via launcherClient.showWindow. Even if they aren't registered with docking. This if statement prevents errors from showing up in the logger.\n\t\t\tif (updateWindow) {\n\t\t\t\tupdateWindow.setBounds(message.data.location);\n\t\t\t}\n\t\t});\n\t\tRouterClient.addListener(\"DockingService.hyperfocusGroup\", function (err, message) {\n\t\t\tDockingMain.hyperFocus(message.data);\n\t\t});\n\n\t\t/**\n\t\t * Auto-arrange doesn't throw disable-frame-bounds-changed events, since it uses `setBounds` under the hood. So this will just go through the windows and update their positions.\n\t\t */\n\t\tRouterClient.addListener(\"DockingService.updateWindowPositions\", function (err, response) {\n\t\t\tself.updateWindowPositions();\n\t\t});\n\t\tRouterClient.addListener(\"DockingService.formGroup\", function (err, response) {\n\t\t\tself.formGroup(response.data.windowName, { isMovable: true });\n\t\t\tself.updateGroupData();\n\t\t\t//Logger.system.debug(\"Publishing Group Update: FormGroup\");\n\t\t});\n\t\t/**\n\t\t * Called from the launcherClient after `spawn` is invoked. Will group two or more windows.\n\t\t */\n\t\tRouterClient.addResponder(\"DockingService.groupWindows\", function (err, message) {\n\t\t\tself.groupWindows(message.data, function (err) {\n\t\t\t\tself.updateGroupData();\n\t\t\t\t//Logger.system.debug(\"Publishing Group Update: GroupWindows\");\n\t\t\t\tmessage.sendQueryResponse({\n\t\t\t\t\terr: err,\n\t\t\t\t\tstatus: err ? \"failed\" : \"success\"\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\t//@todo put this in a real function...\n\t\tRouterClient.addResponder(\"DockingService.leaveGroup\", function (err, response) {\n\t\t\tlet windowName = response.data.name;\n\t\t\tlet movableGroup = self.getMovableGroup(windowName);\n\t\t\tlet immovableGroup = self.getImmobileGroup(windowName);\n\t\t\tlet leavingWindow = self.getWindow(windowName);\n\t\t\tif (!movableGroup) return;\n\t\t\tlet fillHoleInGroup = false;\n\t\t\tlet hole = self.getWindow(windowName).getBounds();\n\t\t\tif (self.groupMode.undockDisbandsEntireGroup) {\n\t\t\t\tself.removeGroup(movableGroup.name);\n\t\t\t} else {\n\t\t\t\tfillHoleInGroup = movableGroup.isARectangle();\n\t\t\t\tlet newBounds = leavingWindow.getBounds();\n\t\t\t\tnewBounds.left += 15;\n\t\t\t\tnewBounds.right += 15;\n\t\t\t\tnewBounds.bottom += 15;\n\t\t\t\tnewBounds.top += 15;\n\t\t\t\tleavingWindow.setBounds(newBounds);\n\t\t\t\t// removeWindowFromGroup(response.data, movableGroup.name);\n\t\t\t\tself.removeWindowFromAllGroups(leavingWindow);\n\t\t\t\t//Because ejecting the window was causing complications when filling holes.\n\t\t\t\tCALCULATOR.removeWindow(leavingWindow.name, false);\n\t\t\t}\n\t\t\tself.wipeSnapRelationships(leavingWindow.name);\n\n\n\n\t\t\tif (fillHoleInGroup) {\n\t\t\t\t//group gets reconstituted in the removeWIndowFromGroup function. So get the reference to the new group.\n\t\t\t\tmovableGroup.fillHole(hole);\n\t\t\t\tself.cleanupGroupGaps(movableGroup);\n\t\t\t\tself.buildSnapRelationshipsForGroup(movableGroup);\n\t\t\t} else {\n\t\t\t\t[movableGroup, immovableGroup].forEach(grp => {\n\t\t\t\t\tif (grp) {\n\t\t\t\t\t\tself.fixGroupMembership(grp);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!self.groupMode.undockDisbandsEntireGroup) {\n\t\t\t\tLogger.system.debug(\"LeaveGroup, adding window back to docking.\", leavingWindow.name);\n\t\t\t\tCALCULATOR.addWindow(leavingWindow.name, leavingWindow);\n\t\t\t}\n\n\t\t\tself.recalculateSnaps();\n\n\t\t\tvar groups = self.getGroups();\n\t\t\tvar groupList = {};\n\t\t\tfor (let group in groups) {\n\t\t\t\tgroupList[group] = groups[group].getWindowNames();\n\t\t\t}\n\n\t\t\tself.updateGroupData();\n\t\t\tleavingWindow.bringToFront();\n\t\t\tresponse.sendQueryResponse(null, groupList);\n\t\t});\n\n\t\tRouterClient.addResponder(\"DockingService.getWindowsInGroup\", function (err, response) {\n\t\t\tlet grp = self.getGroup(response.data.groupName);\n\t\t\tif (err) return response.sendQueryResponse(err, null);\n\n\t\t\tlet error = null, windowList = null;\n\t\t\tif (!grp) {\n\t\t\t\terr = \"Group not found.\";\n\t\t\t} else {\n\t\t\t\twindowList = grp.getWindowNames();\n\t\t\t}\n\t\t\tresponse.sendQueryResponse(error, windowList);\n\t\t});\n\n\t\tRouterClient.addResponder(\"DockingService.getGroupObjectsForWindow\", (err, response) => {\n\t\t\tlet win = self.getWindow(response.data.name || response.data.windowName);\n\t\t\tif (win) {\n\t\t\t\tlet responseObject = win.groupNames.map((groupName) => {\n\t\t\t\t\tlet grp = self.getGroup(groupName);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: groupName,\n\t\t\t\t\t\tisMovable: grp.isMovable\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\treturn response.sendQueryResponse(null, responseObject);\n\t\t\t}\n\t\t\tresponse.sendQueryResponse(\"window not found\");\n\t\t});\n\t\tRouterClient.addResponder(\"DockingService.getGroupsForWindow\", function (err, response) {\n\t\t\tlet win = self.getWindow(response.data.name || response.data.windowName);\n\t\t\tif (win) {\n\t\t\t\treturn response.sendQueryResponse(null, win.getGroupNames());\n\t\t\t}\n\t\t\tresponse.sendQueryResponse(\"window not found\");\n\t\t});\n\t\tRouterClient.addListener(\"DockingService.joinGroup\", function (err, response) {\n\t\t\tself.addWindowToGroup({\n\t\t\t\tgroupName: response.data.groupName,\n\t\t\t\twin: self.getWindow(response.data.name)\n\t\t\t});\n\t\t\tself.updateGroupData();\n\t\t});\n\n\t\tRouterClient.addListener(\"DockingService.requestGroupDataPublish\", function (error, response) {\n\t\t\tself.publishGroupUpdate();\n\t\t});\n\n\t\t/**\n\t\t * PassThrough\n\t\t */\n\n\t\t//RouterClient.addListener(CHANNELS.deregister, this.addToRegistrationQueue);\n\n\t\tRouterClient.addListener(\"DockingService.deregisterWindow\", function (err, response) {\n\t\t\tself.deregisterWindow(self, err, response);\n\t\t});\n\n\t\tRouterClient.addResponder(\"DockingService.maximizeWindow\", function (err, message) {\n\t\t\tself.maximizeWindow(message.data, function (bounds) {\n\t\t\t\tself.sendQueryResponse(message, bounds);\n\t\t\t});\n\t\t});\n\n\t\tRouterClient.addResponder(\"DockingService.restoreFromMaximize\", function (err, message) {\n\t\t\tif (self.getWindow(message.data.name)) {\n\t\t\t\tself.restoreFromMaximize(message.data, function () {\n\t\t\t\t\tself.sendQueryResponse(message);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmessage.sendQueryResponse(\"Window not registered with the DockingMain.\", null);\n\t\t\t}\n\n\t\t});\n\n\t\tRouterClient.addListener(\"DockingService.constituteGroups\", function () {\n\t\t\tself.constituteGroups();\n\t\t});\n\n\t\tRouterClient.addResponder(\"DockingService.autoArrange\", function (err, message) {\n\t\t\tif (!message.data.monitorDimensions.name) {\n\t\t\t\tmessage.sendQueryResponse(new Error(\"No monitor name supplied to autoArrange\"), null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet dimensions = self.prepMonitorDimensions(message.data.monitorDimensions.name);\n\n\t\t\tself.AutoArrange.arrange(dimensions, self.cachedPositions, function () {\n\t\t\t\tself.updateGroupData();\n\t\t\t\tmessage.sendQueryResponse(null, \"success\");\n\t\t\t});\n\t\t});\n\t\tRouterClient.addPubSubResponder(DockingMain_AUTO_ARRANGE_CHANNEL, {});\n\n\t\t/* Tabbing and Tiling */\n\t\tRouterClient.addListener(\"DockingService.startTilingOrTabbing\", this.startTilingOrTabbing);\n\n\t\tRouterClient.addResponder(\"DockingService.stopTilingOrTabbing\", (err, message) => {\n\t\t\tthis.stopTilingOrTabbing(err, message, () => {\n\t\t\t\tmessage.sendQueryResponse(true);\n\t\t\t});\n\t\t});\n\t\tRouterClient.addListener(\"DockingService.identifierForTilingOrTabbing\", this.identifierForTilingOrTabbing);\n\t\tRouterClient.addListener(\"DockingService.cancelTilingOrTabbing\", this.cancelTilingOrTabbing);\n\t\t/* End Tabbing and Tiling */\n\n\t\tRouterClient.subscribe(APPLICATION_STATE_CHANNEL, (err, response) => {\n\t\t\tthis.applicationState = response.data.state;\n\t\t});\n\n\t\t//Monitor information is now managed by docking (for simplicity of claiming/unclaiming space). This is just to get the information when it changes. getMonitorInfoAll in the launcher comes here now.\n\t\tvar self = this;\n\t\tRouterClient.addResponder(\"DockingService.getMonitorsFromDocking\", function (err, message) {\n\t\t\tlet monitors = self.getRawMonitors();\n\t\t\tmessage.sendQueryResponse(null, { monitors });\n\t\t});\n\t}\n\n\t//this is the old/legacy group update that is currently preserved for legacy reasons.  It does not have guid.\n\tbuildWorkspaceGroupUpdate() {\n\t\treturn {\n\t\t\tgroupName: \"Docking\",\n\t\t\tgroupData: groupData,\n\t\t\tworkspaceName: this.activeWorkspace.name\n\t\t};\n\t}\n\n\t//this is the current group update that has everything in the old one plus guid.\n\tbuildGroupUpdate() {\n\t\treturn {\n\t\t\tguid: this.activeWorkspace.guid,\n\t\t\t...this.buildWorkspaceGroupUpdate()\n\t\t};\n\t}\n\n\tsendQueryResponse(message, data) {\n\t\tmessage.sendQueryResponse(null, data);\n\t}\n\n\tprepMonitorDimensions(monitorName) {\n\t\tlet dimensions = {};\n\t\tlet serviceMonitors = this.getMonitors();\n\t\tlet monitors = Object.keys(serviceMonitors).map(mon => {\n\t\t\treturn serviceMonitors[mon];\n\t\t});\n\t\tlet monitor;\n\t\tfor (let i = 0; i < monitors.length; i++) {\n\t\t\tlet mon = monitors[i];\n\n\t\t\tif (mon.name === monitorName) {\n\t\t\t\tmonitor = mon;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (monitor) {\n\t\t\tdimensions = {\n\t\t\t\tleft: monitor.unclaimedRect.left,\n\t\t\t\tright: monitor.unclaimedRect.right,\n\t\t\t\ttop: monitor.unclaimedRect.top,\n\t\t\t\tbottom: monitor.unclaimedRect.bottom,\n\t\t\t\tname: monitor.name,\n\t\t\t\theight: monitor.unclaimedRect.height,\n\t\t\t\twidth: monitor.unclaimedRect.width\n\t\t\t};\n\t\t}\n\n\t\treturn dimensions;\n\t}\n\n\t/**\n\t * Called when monitors' state changes. Either a monitor has been added/removed or rearranged.\n\t * When a change occurs query the system for the new window position and update the bounds.\n\t * Groups need special treatment to ensure that they stay together.\n\t * The toolbar is also a special case because it needs to stay the same size and keep it's docking state\n\t * @param {object} monitors An object containing each monitor with monitor name as keys\n\t */\n\tasync monitorsChanged(eventData) {\n\t\tconst rawMonitors = eventData.monitors;\n\t\tLogger.system.debug(\"Monitors-changed: monitors-changed event received. Monitors from the event:\", rawMonitors);\n\t\tconst adjustedMonitors = addUnclaimedRectToRawMonitor(rawMonitors);\n\t\tconst adjustedBoundsPromiseList = [];\n\t\tconst dockedWindowBoundsPromiseList = [];\n\t\tconst windowNames = this.getWindowNames();\n\t\t// After building the current list of monitors, update the monitor status.\n\t\t// This must be called before requesting the updated window bounds from assimilation\n\t\tthis.updateMonitorInfo(adjustedMonitors);\n\n\t\t// Request the updated information in the format required for assimilation\n\t\tconst formattedMonitorInfo = await new Promise(resolve => {\n\t\t\tSystem.getMonitorInfo(resolve);\n\t\t});\n\n\t\t// Send the updated Monitor Info to Assimilation. It needs this information to calculate scaling\n\t\tconst { err } = await RouterClient.query(\"Assimilation.setMonitorInfo\", formattedMonitorInfo);\n\t\tif (err) {\n\t\t\tLogger.system.error(\"Error sending MonitorInfo to Assimilation\", err);\n\t\t}\n\n\t\t// Dock to the toolbar first so the unclaimedRect will be updated by the time the other windows get their bounds.\n\t\t// Due to timing problems the toolbar won't call the function to move a window out of claimed space. By updating the\n\t\t// unclaimedRect to include the docked toolbar's new location, windows should still be pushed out of this space\n\t\twindowNames.forEach(windowName => {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\tif (win.isDocked) {\n\t\t\t\tdockedWindowBoundsPromiseList.push(deriveWindowPosition({ win, moveableGroup: null }));\n\t\t\t}\n\t\t});\n\t\tlet dockedWindows = await Promise.all(dockedWindowBoundsPromiseList);\n\t\tdockedWindows.forEach(boundsObject => this.handleDockedWindow(boundsObject, rawMonitors));\n\n\t\t// Iterate through all the windows and get their bounds. If their bounds have changed they will be used to update the window position.\n\t\twindowNames.forEach(windowName => {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\t// The OS doesn't move minimized windows. They need to be handled on restore\n\t\t\tif (win.isMinimized) return;\n\t\t\t// Batch the resulting bounds for windows in a group. Groups bounds need to be sent all at once and windows can take different amounts of time to get their updated bounds\n\t\t\tconst movableGroup = this.getMovableGroup(win.name);\n\t\t\tadjustedBoundsPromiseList.push(deriveWindowPosition({ win, movableGroup }));\n\t\t});\n\n\t\t// Wait for updated bounds for all windows before performing any move actions\n\t\tlet adjustedBoundsList = await Promise.all(adjustedBoundsPromiseList);\n\n\t\t// Split the returned list by type into moved windows in a group and all other non-docked windows that should move\n\t\tconst { groupMoves, nonGroupMoves } = splitWindowMoves(adjustedBoundsList);\n\n\t\tconst groupNames = Object.keys(groupMoves);\n\t\t// Use the updated bounds for each window in the group to choose where to move the group\n\t\tgroupNames.forEach(groupName => {\n\t\t\tconst group = this.getGroup(groupName);\n\t\t\tgroup.performDeferredSystemMove(this, groupMoves[groupName]);\n\t\t});\n\n\t\t// For windows not in a group, update their bounds\n\t\tnonGroupMoves.forEach(move => {\n\t\t\tconst win = this.getWindow(move.name);\n\t\t\tlet bounds = move.bounds;\n\t\t\tif (win.isMaximized) {\n\t\t\t\twin.monitor = this.getUpdatedOrNewMonitor(win, rawMonitors);\n\t\t\t\tbounds = {\n\t\t\t\t\t...win.monitor.unclaimedRect\n\t\t\t\t};\n\t\t\t}\n\t\t\twin.setBounds(bounds);\n\t\t\twin.win.stopMove();\n\t\t\tif (move.isDockable) {\n\t\t\t\twin.saveDockableData();\n\t\t\t}\n\t\t});\n\n\t\t// Handles a bug where the OS doesn't repaint all windows after logging back into a machine after a remote\n\t\t// desktop session. Show all windows that Finsemble isn't hiding.\n\t\twindowNames.forEach(name => {\n\t\t\tconst win = this.getWindow(name);\n\t\t\t// Assimilated windows do not have the isShowing function.\n\t\t\t// Furthermore, we do not want to call show on minimized windows or they will restore whenever a monitor change occurs\n\t\t\tconst functionExists = typeof win.win.isShowing === \"function\";\n\t\t\tif (functionExists && !win.isMinimized) {\n\t\t\t\twin.win.isShowing((err, isShowing) => {\n\t\t\t\t\tif (isShowing) {\n\t\t\t\t\t\twin.win._show();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Checks if a monitor still exists\n\t * Used for adjusting window location after a monitor change were we want to prioritize the current monitor\n\t */\n\tgetUpdatedWindowMonitorIfItExists(dockableMonitor) {\n\t\tlet currentDockableMonitors = this.getMonitors();\n\t\tfor (const key of Object.keys(currentDockableMonitors)) {\n\t\t\tconst currentDockableMonitor = currentDockableMonitors[key];\n\t\t\tif (currentDockableMonitor.rawMonitor.deviceId === dockableMonitor.rawMonitor.deviceId) {\n\t\t\t\treturn currentDockableMonitor;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the updated monitor for a window or a new monitor\n\t * if the current one for the window no longer exists.\n\t * @param {FinsembleWindow} win Finsemble window\n\t * @param {*} systemMonitors System monitors\n\t */\n\tgetUpdatedOrNewMonitor(win, systemMonitors) {\n\t\tconst monitor = this.getUpdatedWindowMonitorIfItExists(win.monitor);\n\t\tif (monitor) {\n\t\t\tLogger.system.verbose(`Monitors-changed: The current monitor for the ${win.name} still exists.`);\n\t\t\treturn monitor;\n\t\t}\n\t\t// Chooses the monitor that the window shares the most bounds with. If there is a tie or the window is not on any monitor the last monitor in the array will be chosen\n\t\tconst newMonitor = this.getMonitorByMajority(win, systemMonitors);\n\t\tLogger.system.verbose(`Monitors-changed: window ${win.name}'s current monitor no longer present, new monitor is ${win.monitor}`);\n\t\t// Find the equivalent monitor from the list of current dockable monitors\n\t\treturn Object.values(this.getMonitors())\n\t\t\t.find(dockingMon => dockingMon.rawMonitor.deviceId === newMonitor.deviceId) || {};\n\t}\n\n\t/**\n\t * Handles the docked toolbar after a monitor change occurs.\n\t * Make sure it remains docked at the correct location and size\n\t * @param {} win - window that is docked, usually the toolbar\n\t * @param {*} systemMonitors - raw monitors as they come in from the system. Needed for getMonitorByMajority.\n\t */\n\thandleDockedWindow(boundsObject, systemMonitors) {\n\t\tconst win = this.getWindow(boundsObject.name);\n\t\t// Save these values for when the toolbar is undocked\n\t\tconst oldWidth = win.undockedPosition.width;\n\t\tconst oldHeight = win.undockedPosition.height;\n\n\t\t// Get the window's snapped edge based on its docked position\n\t\tconst keys = Object.keys(win.monitorDockablePositions);\n\t\tconst snappedEdge = keys.find(key => win.monitorDockablePositions[key] === win.dockedPosition).toLowerCase();\n\n\t\twin.monitor = this.getUpdatedOrNewMonitor(win, systemMonitors);\n\n\t\t// Values the window needs to dock properly.\n\t\twin.dockedHeight = win.height;\n\t\twin.snappedEdge = snappedEdge;\n\n\t\tlet dockedBounds, top, bottom;\n\n\t\t// We're not actually releasing claimed space here, as we only use the returned monitor object to calculate bounds\n\t\t// and don't use it to update monitor info. We need the unclaimedRect of the monitor without this window's current\n\t\t// claimed space in order to calculate it's new position.\n\t\t// However, we don't actually want to undock the window because it may still be undocked for the next monitor change event.\n\t\tlet adjustedMonitor = this.releaseClaimedSpace(win, win.monitor);\n\t\tlet unclaimedRect = adjustedMonitor.unclaimedRect;\n\n\t\t// Use the snapped edge to determine top and bottom bounds. The OS doesn't care if the docked window stays on the edge of the monitor and will also occasionally truncate a few pixels on the window\n\t\tif (win.snappedEdge === \"top\") {\n\t\t\ttop = unclaimedRect.top;\n\t\t\tbottom = top + win.height;\n\t\t} else if (win.snappedEdge === \"bottom\") {\n\t\t\tbottom = unclaimedRect.bottom;\n\t\t\ttop = bottom - win.height;\n\t\t}\n\n\t\t// Set the final docked toolbar bounds using the monitor size.\n\t\t// The OS will normally preserve the correct toolbar size, but there are some cases where it may not such as scaling changes, or using RDP.\n\t\tdockedBounds = {\n\t\t\tleft: unclaimedRect.left,\n\t\t\tright: unclaimedRect.right,\n\t\t\tbottom,\n\t\t\ttop,\n\t\t\twidth: unclaimedRect.width,\n\t\t\theight: win.height\n\t\t};\n\t\t// Update the bounds before we dock the window so it will dock to the correct place\n\t\tLogger.system.verbose(\"Monitors-changed: setting bounds for docked toolbar\", dockedBounds);\n\t\twin.setBounds(dockedBounds);\n\t\t// Remove the old claimed space for the window and dock it to the new position.\n\t\t// This function will perform both actions without setting isDocked to false. Setting isDocked to false\n\t\t// can cause subsequent monitor-change events to not enter this code block because the toolbar isn't done docking.\n\t\twin.monitor.redockWindowToMonitor(win, oldWidth, oldHeight);\n\t\twin.saveDockableData();\n\n\t}\n\n\t/**\n\t * Loops through DockableMonitor(s) and compares against a system monitor passed in.\n\t *\n\t * @param {*} mon A monitor representation\n\t * @returns A dockable monitor which contains the same deviceId as the monitor passed in\n\t */\n\tgetDockingMonitorFromSystemMonitor(mon) {\n\t\tlet resultingMonitor;\n\n\t\tconst idToCheck = mon.rawMonitor ? mon.rawMonitor.deviceId : mon.deviceId;\n\t\tconst dockingMonitors = this.getMonitors();\n\t\t//Update the window's reference to the monitor that it is on. The new reference has updated rects that reflect the change that came from the system.\n\t\tfor (let i = 0; i < Object.keys(dockingMonitors).length; i++) {\n\t\t\tconst dockingMon = dockingMonitors[Object.keys(dockingMonitors)[i]];\n\t\t\tif (dockingMon.rawMonitor.deviceId === idToCheck) {\n\t\t\t\tresultingMonitor = dockingMon;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn resultingMonitor;\n\t}\n\n\t/**\n\t * Updates monitor info with claim space changes (usually triggered by docking/undocking toolbar or adding/removing monitors)\n\t * @param {*} monitorUpdate The new monitor information\n\t * @param {boolean} isDockableWindowAction If this action is triggered by a dockable window, we don't want to wipe out auto arrange status\n\t */\n\tupdateMonitorInfo(monitorUpdate, isDockableWindowAction) {\n\t\tvar self = this;\n\t\t// @todo, handle this properly. When a user removes a monitor, we need to revert everything.\n\t\tlet monitors = self.getMonitors();\n\n\t\tif (!isDockableWindowAction) {\n\t\t\tObject.values(monitors).map(monitor => {\n\t\t\t\tthis.AutoArrange.isArranged[monitor.name] = false;\n\t\t\t});\n\t\t\tself.sendAutoArrangeStatusUpdate();\n\t\t}\n\t\tself.removeAllMonitors();\n\n\t\tmonitorUpdate.forEach(function (monitor) {\n\t\t\tself.addMonitor({\n\t\t\t\tname: monitor.name,\n\t\t\t\tleft: monitor.unclaimedRect.left,\n\t\t\t\ttop: monitor.unclaimedRect.top,\n\t\t\t\tright: monitor.unclaimedRect.right,\n\t\t\t\tbottom: monitor.unclaimedRect.bottom,\n\t\t\t\t_monitor: monitor\n\t\t\t}, isDockableWindowAction);\n\t\t});\n\n\t\tLogger.system.debug(\"MONITOR: Docking.monitorUpdate\", monitorUpdate);\n\t\tsuper.updateMonitorInfo(monitorUpdate);\n\t\tself.setBufferSize(serviceConfig.BUFFER_SIZE);\n\t}\n\n\t/**\n\t * This function will maximize a window.\n\t * @param {object} params\n\t * @param {object} params.windowIdentifier\n\t * @param {string} params.name\n\t */\n\tmaximizeWindow(params, cb) {\n\t\tvar win = this.getWindow(params.name);\n\t\t// If this window is being maximized from a normal state we want to\n\t\t// cache the bounds on the window so we have them to restore to later\n\t\tlet overwriteCachedBounds = true;\n\n\t\t// Return if window is already maximizing/maximized and isn't maximizing from a minimize\n\t\tif ((win.isMaximized || win.isMaximizing) && !win.isMinimized) { cb(); return; }\n\n\t\t/**\n\t\t* 5/17/19 Joe:\n\t\t* When a maximized window is minimized then restored, this function is entered\n\t\t* If this is the case we want to ensure any windows that were minimized\n\t\t* along side this window (grouped) will be restored. When this is the case\n\t    * isMinimized and isMaximized are both true\n\t\t*/\n\t\tif (win.isMinimized && win.isMaximized) {\n\t\t\twin.groupNames.forEach(groupName => {\n\t\t\t\tconst grp = this.getGroup(groupName);\n\t\t\t\tif (grp.isMovable) {\n\t\t\t\t\tgrp.restoreAll();\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Restoring the group restores all the windows in the group (including the window that should maximize here)\n\t\t\t// We want to prevent this overwrite as the currently cached bounds are already correct\n\t\t\toverwriteCachedBounds = false;\n\t\t}\n\t\twin.isMaximizing = true;\n\t\twin.bringToFront();\n\t\tif (overwriteCachedBounds) {\n\t\t\twin.cachedBounds = clone(win.getBounds());\n\t\t}\n\n\t\t//get updated monitor info to make sure we take into account any claimed space changes.\n\t\tconst monitor = this.getMonitorByMajority(win, this.getMonitorArray());\n\t\tconst monitorBounds = { left: monitor.left, right: monitor.right, top: monitor.top, bottom: monitor.bottom, width: monitor.width, height: monitor.height };\n\n\t\tif (!monitorBounds.width) {\n\t\t\tmonitorBounds.width = monitorBounds.right - monitorBounds.left;\n\t\t}\n\t\tif (!monitorBounds.height) {\n\t\t\tmonitorBounds.height = monitorBounds.bottom - monitorBounds.top;\n\t\t}\n\t\twin.win.startMove();\n\t\twin.setBounds(monitorBounds,\n\t\t\tfunction () {\n\t\t\t\twin.isMaximized = true;\n\t\t\t\twin.isMaximizing = false;\n\t\t\t\twin.win.stopMove();\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(monitorBounds);\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * The second setBounds below this giant comment block is because of a strange sequencing problem in electron.\n\t\t\t\t * When you double click on the titlebar of a component, the OS maximizes the window. We capture the event,\n\t\t\t\t * and then tell it to setBounds right below the toolbar.\n\t\t\t\t * When we call set bounds, it appears that windows is moving the window afterwards. My hypothesis is that by\n\t\t\t\t * calling setBounds, we're triggering the OS's restore behavior (when you move a window that's maximized, it\n\t\t\t\t * restores itself).\n\t\t\t\t *\n\t\t\t\t * The data below shows the sequencing problem. The logs come from FEA. 'Windows moved' logs come from the\n\t\t\t\t * Win32 API throwing 'move' events, which effectively means 'Hey, the OS completed drawing the window at\n\t\t\t\t * these bounds. 'Setting bounds for' are logs from the MainWindow calling setBounds on the Electron\n\t\t\t\t * BrowserWindow\n\t\t\t\t *\n\t\t\t\t * **The next line is the first event we get from the OS upon double clicking the window.**\n\t\t\t\t * Windows moved window Welcome Component-2-1861-Finsemble { x: -8, y: -8, width: 2576, height: 1416 }\n\t\t\t\t * **This is us setting bounds in reaction to the OS's maximize event.**\n\t\t\t\t * Setting bounds for  Welcome Component-2-1861-Finsemble { height: 1361, width: 2560, x: 0, y: 39 }\n\t\t\t\t * **This is windows' recognition that we've moved the window to the proper place.**\n\t\t\t\t * Windows moved window Welcome Component-2-1861-Finsemble { x: 0, y: 39, width: 2560, height: 1361 }\n\t\t\t\t * **This is the unexplained window move from windows**\n\t\t\t\t * Windows moved window Welcome Component-2-1861-Finsemble { x: 0, y: 56, width: 2560, height: 1361 }\n\t\t\t\t * **This is the 2nd set bounds below**\n\t\t\t\t * Setting bounds for  Welcome Component-2-1861-Finsemble { height: 1361, width: 2560, x: 0, y: 39 }\n\t\t\t\t * **This is windows' confirmation that we moved the window**\n\t\t\t\t * Windows moved window Welcome Component-2-1861-Finsemble { x: 0, y: 39, width: 2560, height: 1361 }\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\twin.setBounds(monitorBounds);\n\t\t\t},\n\t\t\tfunction (err) { Logger.system.error(err); }\n\t\t);\n\n\t}\n\n\t/**\n\t * This function will restore a maximized window.\n\t * @param {object} params\n\t * @param {string} params.name\n\t */\n\trestoreFromMaximize(params, cb) {\n\t\tvar win = this.getWindow(params.name);\n\t\twin.isMaximized = false;\n\t\tlet bounds = win.cachedBounds && Object.keys(win.cachedBounds).length ? win.cachedBounds : win.getBounds();\n\t\t// Only changes the window position if there has been a monitor change. We don't want the window to restore off monitor\n\t\tbounds = util.adjustBoundsToBeOnMonitor(bounds);\n\t\twin.win.startMove();\n\t\twin.setBounds(bounds,\n\t\t\tfunction () {\n\t\t\t\twin.cachedBounds = {};\n\t\t\t\twin.win.stopMove();\n\t\t\t\t/**\n\t\t\t\t * The second setBounds below this giant comment block is because of a strange sequencing problem in electron.\n\t\t\t\t * When you double click on the titlebar of a component, the OS maximizes the window. We capture the event,\n\t\t\t\t * and then tell it to setBounds right below the toolbar.\n\t\t\t\t * When we call set bounds, it appears that windows is moving the window afterwards. My hypothesis is that by\n\t\t\t\t * calling setBounds, we're triggering the OS's restore behavior (when you move a window that's maximized, it\n\t\t\t\t * restores itself).\n\t\t\t\t *\n\t\t\t\t * The data below shows the sequencing problem. The logs come from FEA. 'Windows moved' logs come from the\n\t\t\t\t * Win32 API throwing 'move' events, which effectively means 'Hey, the OS completed drawing the window at\n\t\t\t\t * these bounds. 'Setting bounds for' are logs from the MainWindow calling setBounds on the Electron\n\t\t\t\t * BrowserWindow\n\t\t\t\t *\n\t\t\t\t * **The next line is the first event we get from the OS upon double clicking the window.**\n\t\t\t\t * Windows moved window Welcome Component-2-1861-Finsemble { x: -8, y: -8, width: 2576, height: 1416 }\n\t\t\t\t * **This is us setting bounds in reaction to the OS's maximize event.**\n\t\t\t\t * Setting bounds for  Welcome Component-2-1861-Finsemble { height: 1361, width: 2560, x: 0, y: 39 }\n\t\t\t\t * **This is windows' recognition that we've moved the window to the proper place.**\n\t\t\t\t * Windows moved window Welcome Component-2-1861-Finsemble { x: 0, y: 39, width: 2560, height: 1361 }\n\t\t\t\t * **This is the unexplained window move from windows**\n\t\t\t\t * Windows moved window Welcome Component-2-1861-Finsemble { x: 0, y: 56, width: 2560, height: 1361 }\n\t\t\t\t * **This is the 2nd set bounds below**\n\t\t\t\t * Setting bounds for  Welcome Component-2-1861-Finsemble { height: 1361, width: 2560, x: 0, y: 39 }\n\t\t\t\t * **This is windows' confirmation that we moved the window**\n\t\t\t\t * Windows moved window Welcome Component-2-1861-Finsemble { x: 0, y: 39, width: 2560, height: 1361 }\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\twin.setBounds(bounds);\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb();\n\t\t\t\t}\n\t\t\t},\n\t\t\tfunction (err) { Logger.system.error(err); });\n\t}\n\n\tonWindowShown(event) {\n\t\tlet dockableWindow = this.getWindow(event.data.name);\n\t\t// need to set show state in dockable window, but cannot call show() or it will cause an infinite loop\n\t\tif (dockableWindow) {\n\t\t\tdockableWindow.setShown();\n\t\t}\n\t}\n\n\t//if a window is docked, and gets hidden, undock it.\n\t// NOTE: ******** This never fires since underlying bug for \"hidden\" *******\n\tonWindowHidden(event) {\n\t\tlet dockableWindow = this.getWindow(event.data.name);\n\t\t// need to set hide state in dockable window, but cannot call hide() or it will cause an infinite loop\n\t\tif (dockableWindow) {\n\t\t\tdockableWindow.setHidden();\n\t\t}\n\t}\n\n\tonWindowClosedHandler(event) {\n\t\tconst responseData = {\n\t\t\tname: event.data.name,\n\t\t\tremoveFromWorkspace: event.data.removeFromWorkspace,\n\t\t};\n\t\tif (this.applicationState !== \"closing\") {\n\t\t\tthis.onWindowClosed(null, { data: responseData });\n\t\t}\n\t}\n\n\t/**\n\t * Function that's called after a window is moved.\n\t */\n\n\t/**\n\t* Registers a window with the DockingCalculator.\n\t* @param  {dockableWindow} win\n\t* @return {Promise}\n\t*/\n\taddWindow(win) {\n\t\tlet self = this;\n\t\tlet calcAddWindow = super.addWindow.bind(this);\n\t\t//If a window reloads, it may try to add itself to the dockingCalc twice.\n\t\t//2nd param doesn't throw error if we can't find the window.\n\t\tif (this.getWindow(win.name, false)) {\n\t\t\tLogger.system.debug(\"Docking:addWindow reload immediate resolve\");\n\t\t\treturn Promise.resolve(self.getWindow(win.name));\n\t\t}\n\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\twin._getBounds({}, (err, bounds) => {\n\t\t\t\t//If addWindow is called multiple times in quick succession, check to see if it's been added before going through this entire process again. This was happening when tiling from a tabbed group.\n\t\t\t\tif (self.getWindow(win.name, false)) {\n\t\t\t\t\treturn Promise.resolve(self.getWindow(win.name));\n\t\t\t\t}\n\t\t\t\tif (!bounds) {\n\t\t\t\t\tPromise.reject(err);\n\t\t\t\t\treturn Logger.system.error(\"No bounds returned from wrap.getBounds\", win.name, err);\n\t\t\t\t}\n\t\t\t\t//@todo, why not get bounds inside of the constructor? Would at least get rid of one param.\n\n\t\t\t\tlet dockableWindow = new DockableWindow(win, bounds, {\n\t\t\t\t\tcalculator: self,\n\t\t\t\t\tLogger: Logger,\n\t\t\t\t\tSystem: System\n\t\t\t\t}, serviceConfig.assimilationEnabled);\n\n\t\t\t\tLogger.system.debug(\"Docking:calling addWindow on the calculator\", win.name, bounds);\n\t\t\t\t//@todo, why not get the name from the dockableWindow?\n\n\n\t\t\t\tdockableWindow.win.addEventListener(\"minimized\", self.setWindowMinimized);\n\t\t\t\tdockableWindow.win.addEventListener(\"restored\", self.setWindowRestored);\n\t\t\t\tdockableWindow.win.addEventListener(\"focused\", self.setWindowFocused);\n\t\t\t\tdockableWindow.win.addEventListener(\"shown\", self.bringGroupToFront);\n\t\t\t\tdockableWindow.win.addEventListener(\"hidden\", self.onWindowHidden);\n\t\t\t\tdockableWindow.win.addEventListener(\"shown\", self.onWindowShown);\n\t\t\t\t/**\n\t\t\t\t * Daniel Hines - 2/5/2019\n\t\t\t\t *\n\t\t\t\t * For reasons unknown to us, we HAVE to wrap `self.onWindowClosedHandler` in an\n\t\t\t\t * error function or it doesn't work. We haven't investigated this extensively.\n\t\t\t\t * We do know however that the method is in fact bound in `self.bindAllFunctions()`,\n\t\t\t\t * and that `this` in fact an instance of `DockingMain`.\n\t\t\t\t *\n\t\t\t\t * @TODO Investigate this further.\n\t\t\t\t */\n\t\t\t\tdockableWindow.win.addEventListener(\"closed\", e => self.onWindowClosedHandler(e));\n\n\t\t\t\tcalcAddWindow(win.name, dockableWindow);\n\t\t\t\tdockableWindow.win.addListener(\"alwaysOnTop\", self.setGroupAlwaysOnTop); // TODO: need to do something about somehow combining our event\n\t\t\t\tresolve(dockableWindow);\n\t\t\t});\n\t\t});\n\t}\n\n\t/* do not bind this function */\n\tsetGroupAlwaysOnTop(params) {\n\t\t// if there are no params, this is called from an event and the context is in \"this\".\n\t\tif (!params) params = {};\n\t\tif (!params.name) params.name = this.name;\n\t\tif (!params.uuid) params.uuid = this.uuid;\n\t\tlet dockableWindow = window.DockingMain.getWindow(params.name); // cannot bind this function and lose context. Using the global here.\n\t\tif (dockableWindow.isMinimized) return;\n\t\tdockableWindow.groupNames.forEach((groupName) => {\n\t\t\tlet grp = window.DockingMain.getGroup(groupName);\n\t\t\tif (grp.isMovable) {\n\t\t\t\tgrp.allAlwaysOnTop(params.alwaysOnTop);\n\t\t\t\twindow.DockingMain.updateGroupData();\n\t\t\t}\n\t\t});\n\t}\n\n\tsetWindowMinimized(event) {\n\t\tlet params = event.data;\n\t\tlet self = this;\n\t\tlet dockableWindow = self.getWindow(params.name);\n\t\tif (!dockableWindow) {\n\t\t\treturn Logger.system.warn(\"SetWindowMinimized called on window not registered for movement.\", params.name);\n\t\t}\n\t\tdockableWindow.isMinimized = true;\n\t\t// If Window is in group, minimize the group:\n\t\tdockableWindow.groupNames.forEach((groupName) => {\n\t\t\tlet grp = self.getGroup(groupName);\n\t\t\tif (grp.isMovable) {\n\t\t\t\tgrp.minimizeAll();\n\t\t\t}\n\t\t});\n\t}\n\n\tsetWindowRestored(event) {\n\t\tlet params = event.data;\n\t\tlet self = this;\n\t\tlet dockableWindow = self.getWindow(params.name);\n\t\tif (!dockableWindow) {\n\t\t\treturn Logger.system.warn(\"SetWindowRestored called on window not registered for movement.\", params.name);\n\t\t}\n\t\tdockableWindow.isMinimized = false;\n\t\t// If Window is in group, restore the group:\n\t\tdockableWindow.groupNames.forEach((groupName) => {\n\t\t\tlet grp = self.getGroup(groupName);\n\t\t\tif (grp.isMovable && grp.groupState !== grp.GROUPSTATES.RESTORING) {\n\t\t\t\tgrp.restoreAll();\n\n\t\t\t\t// After restoring all windows, loop through the group and check for a\n\t\t\t\t// maximized window. If there is one, bring that window to front\n\t\t\t\tObject.keys(grp.windows).map(groupWindowName => {\n\t\t\t\t\tconst groupWindow = grp.windows[groupWindowName];\n\t\t\t\t\tif (groupWindow.isMaximized) {\n\t\t\t\t\t\tgroupWindow.bringToFront();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\tsetWindowFocused(event) {\n\t\tlet params = event.data;\n\t\tlet self = this;\n\t\tlet dockableWindow = self.getWindow(params.name);\n\t\tif (!dockableWindow) return;\n\t\tsetTimeout(() => {\n\t\t\tif (dockableWindow.win.windowState !== FinsembleWindowInternal.WINDOWSTATE.NORMAL) return;\n\n\t\t\t//win.removeEventListener is async. When reloading a workspace, the window is closed, and un-registers with docking.\n\t\t\t//We remove the event listeners from the openfin windows for focus, shown, etc.\n\t\t\t//Then we re-spawn the same windows with the same uuid/name. Underneath the hood, openfin has yet to remove those event listeners. The new windows get focused, and get into this event handler. If we don't make the check below, the DockingCalculator throws errors saying \"Hey this window hasn't registered with me yet.\"\n\n\t\t\tif (self.getWindowNames().includes(params.name)) {\n\t\t\t\tself.bringGroupToFront(event);\n\t\t\t}\n\t\t}, 100);\n\t}\n\tbringGroupToFront(event) {\n\t\tlet params = event.data;\n\t\tif (typeof params === \"string\") {\n\t\t\tparams = { name: params };\n\t\t}\n\t\tif (!params) params = {}; // this gets called when focused happens and expects params when some windows dont do that\n\t\tif (!params.name) params.name = this.name;\n\t\tif (!params.uuid) params.uuid = this.uuid;\n\n\t\tlet dockableWindow = window.DockingMain.getWindow(params.name);\n\t\tif (!dockableWindow) return;\n\t\tdockableWindow.groupNames.forEach((groupName) => {\n\t\t\tlet grp = window.DockingMain.getGroup(groupName);\n\t\t\tif (grp.isMovable) {\n\t\t\t\tgrp.bringToFront({ restoreWindows: false }); // No need to restore windows since they are by default already un-minimized. Doing so can cause infinite loops with stackedWindows [Terry].\n\t\t\t}\n\t\t});\n\t}\n\n\thyperFocus(params) {\n\t\tlet dockableWindow = this.getWindow(params.windowName);\n\t\tdockableWindow.groupNames.forEach((groupName) => {\n\t\t\tlet grp = this.getGroup(groupName);\n\t\t\tif (grp.isMovable) {\n\t\t\t\tLauncherClient.hyperFocus({ windowList: grp.getWindowNames() });\n\t\t\t}\n\t\t});\n\t}\n\n\tcreateGroupMask() {\n\t\tlet self = this;\n\t\tLauncherClient.showWindow({ name: \"Docking Move Mask\", componentType: \"Docking Move Mask\" }, {\n\t\t\tname: \"Docking Move Mask\",\n\t\t\tspawnIfNotFound: true,\n\t\t\toptions: {\n\t\t\t\tautoShow: false\n\t\t\t}\n\t\t}, async function (err, response) {\n\t\t\tlet { wrap: groupMask } = await FinsembleWindowInternal.getInstance({ name: \"Docking Move Mask\", waitForReady: true });\n\t\t\tgroupMask._getBounds((err, bounds) => {\n\t\t\t\tvar mask = new DockableWindow(groupMask, bounds, {\n\t\t\t\t\tcalculator: self,\n\t\t\t\t\tLogger: Logger,\n\t\t\t\t\tSystem: System\n\t\t\t\t});\n\t\t\t\tmask.canGroup = false;\n\t\t\t\tself.groupMask = mask;\n\t\t\t});\n\t\t});\n\n\t\tLauncherClient.showWindow({ name: \"dialogModal\", componentType: \"dialogModal\" }, {\n\t\t\tname: \"dialogModal\",\n\t\t\tspawnIfNotFound: true,\n\t\t\toptions: {\n\t\t\t\tautoShow: false\n\t\t\t}\n\t\t}, async function (err, response) {\n\t\t\tLogger.system.debug(\"ModalScrim1: Getting Modal Scrim Wrap\");\n\t\t\tvar { wrap: modalScrim } = await FinsembleWindowInternal.getInstance({ name: \"dialogModal\", waitForReady: true });\n\t\t\tLogger.system.debug(\"ModalScrim2: Got Modal Scrim Wrap\");\n\t\t\tSystem.getMonitorInfo((info) => {\n\t\t\t\tLogger.system.debug(\"ModalScrim3: Monitor Info\");\n\t\t\t\tlet bounds = info.virtualScreen;\n\t\t\t\tbounds.width = bounds.right - bounds.left;\n\t\t\t\tbounds.height = bounds.bottom - bounds.top;\n\t\t\t\tlet initialBounds = {\n\t\t\t\t\tleft: bounds.left - 40,\n\t\t\t\t\ttop: bounds.top - 40,\n\t\t\t\t\twidth: 40,\n\t\t\t\t\theight: 40,\n\t\t\t\t\tright: bounds.left,\n\t\t\t\t\tbottom: bounds.top\n\t\t\t\t};\n\t\t\t\tmodalScrim._setBounds({ bounds: initialBounds }, () => {\n\t\t\t\t\tLogger.system.debug(\"ModalScrim4: Set bounds\");\n\t\t\t\t\tmodalScrim._show(() => { modalScrim._hide(); }); // This is to address an openfin bug related to flashing while showing the first time.\n\t\t\t\t\tmodalScrim._setBounds({ bounds }, () => {\n\t\t\t\t\t\tLogger.system.debug(\"ModalScrim5: assigning to this.modal scrim\");\n\t\t\t\t\t\tvar modal = new DockableWindow(modalScrim, bounds, {\n\t\t\t\t\t\t\tcalculator: self,\n\t\t\t\t\t\t\tLogger: Logger,\n\t\t\t\t\t\t\tSystem: System\n\t\t\t\t\t\t});\n\t\t\t\t\t\tmodal.canGroup = false;\n\t\t\t\t\t\tself.modalScrim = modal;\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t});\n\t\t});\n\n\t}\n\n\tremoveWindow(windowName) {\n\t\tlet self = this;\n\t\tlet dockableWindow = this.getWindow(windowName);\n\t\tdockableWindow.win.removeEventListener(\"minimized\", self.setWindowMinimized);\n\t\tdockableWindow.win.removeEventListener(\"restored\", self.setWindowRestored);\n\t\tdockableWindow.win.removeEventListener(\"focused\", self.bringGroupToFront);\n\t\tdockableWindow.win.removeEventListener(\"shown\", self.bringGroupToFront);\n\n\t\t//these two deal with undocking/setting the isHidden boolean (which causes docking to skip windows when figuring out whether to snap.\n\t\tdockableWindow.win.removeEventListener(\"hidden\", self.onWindowHidden);\n\t\tdockableWindow.win.removeEventListener(\"shown\", self.onWindowShown);\n\t\tdockableWindow.win.removeEventListener(\"closed\", self.onWindowClosedHandler);\n\n\t\tsuper.removeWindow(windowName);\n\t\tif (this.cachedPositions[dockableWindow.monitor.name][windowName]) {\n\t\t\tdelete this.cachedPositions[dockableWindow.monitor.name][windowName];\n\t\t}\n\t}\n\n\t/**\n\t * Sets the initial buffer size.\n\t */\n\tsetupDockingCalculator() {\n\t\tlet DEBUG = serviceConfig.DEBUG;\n\t\tif (typeof DEBUG === \"undefined\") {\n\t\t\tDEBUG = false;\n\t\t}\n\t\tLogger.system.log(\"Docking initialization\", serviceConfig);\n\t\tthis.setTilingOrTabbingEnabled(serviceConfig);\n\t\tthis.setWindowsAeroSnap(serviceConfig);\n\t\tthis.setAllowGroupsToSnap(serviceConfig.ALLOW_GROUPS_TO_SNAP);\n\t\tthis.setGroupMode(serviceConfig.GROUP_MODE);\n\t\tthis.setDebug(DEBUG);\n\t\tthis.setBufferSize(serviceConfig.BUFFER_SIZE);\n\t\tthis.setSnappingOpacity(serviceConfig.SNAPPING_OPACITY);\n\t\tthis.setResizeThrottlePeriod(serviceConfig.RESIZE_EVENT_THROTTLE_PERIOD);\n\t\tthis.setRouterClient(RouterClient);\n\t\tthis.setGlobalMinimums(serviceConfig);\n\t}\n\n\taddMonitor(monitor, isDockableWindowAction) {\n\t\tsuper.addMonitor(monitor, this.handleMonitorSpaceChanges);\n\t\tif (!isDockableWindowAction) {\n\t\t\tthis.AutoArrange.isArranged[monitor.name] = false;\n\t\t\tthis.cachedPositions[monitor.name] = {};\n\t\t}\n\t}\n\n\tsetGroupMode(groupMode) {\n\t\tsuper.setGroupMode(groupMode);\n\t\tRouterClient.publish(\"DockingService.groupMode\", groupMode);\n\t}\n\n\tsetWindowsAeroSnap(serviceConfig) {\n\t\tthis.enableWindowsAeroSnap = serviceConfig.enableWindowsAeroSnap || false;\n\t}\n\n\t/************************************************\n\t *\t\t\t\t\t\t\t\t\t\t\t\t*\n\t * \t\t\t\tDebugging Helpers\t\t\t\t*\n\t *\t\t\t\t\t\t\t\t\t\t\t\t*\n\t ************************************************/\n\t/**\n\t* For debugging.\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tgetGridWindows() {\n\t\tlet self = this;\n\t\t[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"].forEach((windowName) => {\n\t\t\twindow[windowName + windowName] = self.getWindow(windowName);\n\t\t});\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tresetGrid() {\n\t\tvar alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t\t//creates a 3x3 grid\n\t\tvar row = 0;\n\t\tvar column = 0;\n\t\tvar group1;\n\t\tfor (var i = 0; i < 9; i++) {\n\t\t\tvar windowName = alphabet[i];\n\n\t\t\twin = this.getWindow(windowName);\n\t\t\tif (!group1) {\n\t\t\t\tgroup1 = this.getGroup(win.groupName);\n\t\t\t}\n\t\t\tif (i > 1 && i % 3 === 0) {\n\t\t\t\trow++;\n\t\t\t\tcolumn = 0;\n\t\t\t}\n\t\t\twin._setBounds(\n\t\t\t\t{\n\t\t\t\t\tleft: 300 * column,\n\t\t\t\t\ttop: 300 * row,\n\t\t\t\t\twidth: 300,\n\t\t\t\t\theight: 300\n\t\t\t\t}\n\t\t\t);\n\t\t\tcolumn++;\n\t\t}\n\t\tgroup1.calculateOuterBounds();\n\t}\n\n\t/**\n\t* @function {function name}\n\t* @return {type} {description}\n\t*/\n\tlogger() {\n\t\tvar boundingBoxes = {};\n\t\tfor (var windowName in this.getWindows()) {\n\t\t\tvar win = this.getWindow(windowName);\n\t\t\tboundingBoxes[windowName] = JSON.stringify(win.windowBoundingBox);\n\t\t}\n\t\tvar box = \"\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|   \" + boundingBoxes[\"A\"] + \"          |    \" + boundingBoxes[\"B\"] + \"         |   \" + boundingBoxes[\"C\"] + \"         |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|   \" + boundingBoxes[\"D\"] + \"          |    \" + boundingBoxes[\"E\"] + \"         |   \" + boundingBoxes[\"F\"] + \"         |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|   \" + boundingBoxes[\"G\"] + \"          |    \" + boundingBoxes[\"H\"] + \"         |   \" + boundingBoxes[\"I\"] + \"         |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"|             |             |            |\\n\";\n\t\tbox += \"+----------------------------------------+\\n\";\n\t\tLogger.system.log(box);\n\t}\n\n\t/**\n\t * Sends a message asking windows to save their position.\n\t */\n\ttellWindowsToSaveLocation() {\n\t\tlet windowIter = this.dockingPool.iterator();\n\t\tfor (let win of windowIter) {\n\t\t\t//This is a hack until we have proper events in finsemble. We need to notify windows that aren't part of the workspace so that they can save their bounds.\n\t\t\tif (win.isDockableComponent) {\n\t\t\t\tlet bounds = win.getBounds();\n\t\t\t\t//Awful hack to get the toolbar _not_ to save it's state. This allows the toolbar to start docked when you restart the app.\n\t\t\t\twin.win.dockedPosition = win.dockedPosition;\n\t\t\t\t//Will trigger the bounds-change-end event.\n\t\t\t\twin.win.stopMove();\n\t\t\t\t//old code, for backwards compat. The toolbar uses this.\n\t\t\t\tRouterClient.transmit(win.name + \".bounds-change-end\", { bounds });\n\t\t\t}\n\t\t\t//win.win is the underlying wrapper. win is the dockableWindow. win.win is the openfinWindowWrapper\n\t\t\twin.win._saveWindowOptions();\n\t\t}\n\t}\n\t/**\n\t * Sends a message asking windows to update their position in memory but not save.\n\t */\n\ttellWindowsToUpdateLocation() {\n\t\tlet windowIter = this.dockingPool.iterator();\n\t\tfor (let win of windowIter) {\n\t\t\tRouterClient.transmit(\"DockingService.\" + win.name, { command: \"updateWindowLocation\", bounds: win.getBounds() });\n\t\t}\n\t}\n\n\t/**\n\t * Updates the groupData object, which is pushed out to components.\n\t * Returns true if the groupData has changed, else false.\n\t */\n\t_updateGroupData() {\n\t\tlet groups = this.getGroups();\n\t\tlet groupUpdate = {};\n\n\t\tfor (var groupName in groups) {\n\t\t\tlet group = groups[groupName],\n\t\t\t\twindowNames = group.getWindowNames(),\n\t\t\t\t//This shouldn't happen -- but just in case.\n\t\t\t\ttopRightWindow = windowNames.length ? group.getMoveAnchor(\"BottomLeft\").name : null;\n\n\t\t\tgroupUpdate[groupName] = {\n\t\t\t\twindowNames: windowNames,\n\t\t\t\tisMovable: group.isMovable,\n\t\t\t\tisAlwaysOnTop: group.isAlwaysOnTop,\n\t\t\t\ttopRightWindow: topRightWindow,\n\t\t\t\tisARectangle: group.isARectangle()\n\t\t\t};\n\t\t}\n\t\tconst changed = !deepEqual(groupUpdate, groupData);\n\t\tif (changed) {\n\t\t\tgroupData = groupUpdate;\n\t\t}\n\t\treturn changed;\n\t}\n\n\t/**\n\t * Sends the groupData object out to the rest of the application.\n\t */\n\tpublishGroupUpdate() {\n\t\tlet self = this;\n\t\tLogger.system.debug(\"Publishing Group Update:\", groupData);\n\t\t/**\n\t\t * DH 3/18/2019 - It's very strange that this workspace concern\n\t\t * is published from within docking; however, we have to keep it\n\t\t * for backwards compatability with previous seed branches (the UI\n\t\t * depends on this update). When we can afford a break, this should\n\t\t * go.\n\t\t */\n\t\tRouterClient.publish(constants.DOCKING.WORKSPACE_GROUP_UPDATE, self.buildWorkspaceGroupUpdate());\n\t\tRouterClient.publish(constants.DOCKING.GROUP_UPDATE, self.buildGroupUpdate());\n\t}\n\n\thandleWorkspaceUpdate(err, response) {\n\t\tlet self = this;\n\t\tLogger.system.debug(\"HANDLING WORKSPACE UPDATE\");\n\t\tvar data = response.data;\n\t\t// The first publish is empty.\n\t\tif (!data || !data.activeWorkspace) {\n\t\t\treturn;\n\t\t}\n\t\tthis.activeWorkspace = data.activeWorkspace;\n\t\tgroupData = data.activeWorkspace.groups || {};\n\t\tLogger.system.debug(\"Publishing Group Update: HandleWorkspaceUpdate\");\n\t\tself.publishGroupUpdate();\n\t\tself.moveCount = 0;\n\t}\n\n\t/**\n\t * Checks to see if a window belongs to any groups.\n\t */\n\tcheckIfWindowIsInGroup(name) {\n\t\tlet self = this;\n\t\tif (groupData) {\n\t\t\tfor (var groupName in groupData) {\n\t\t\t\tlet groupWindows = groupData[groupName].windowNames;\n\t\t\t\tif (groupWindows.includes(name)) {\n\t\t\t\t\tlet params = {\n\t\t\t\t\t\tgroupName: groupName,\n\t\t\t\t\t\twin: self.getWindow(name)\n\t\t\t\t\t};\n\t\t\t\t\tObject.assign(params, groupData[groupName]);\n\t\t\t\t\tself.addWindowToGroup(params);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sends the update to all toolbars.\n\t * @todo, this will eventually be monitor-specific.\n\t */\n\tsendAutoArrangeStatusUpdate() {\n\t\tRouterClient.publish(DockingMain_AUTO_ARRANGE_CHANNEL, {\n\t\t\tisAutoArranged: this.AutoArrange.isArranged\n\t\t});\n\t}\n\n\t/**\n\t * @private\n\t * @param {LauncherClient~windowDescriptor} windowDescriptor\n\t * @param {monitorDimensions} monitorDimensions\n\t * @returns {boolean} Whether window is on the current monitor.\n\t */\n\twindowOnMonitor(windowDescriptor, monitorDimensions) {\n\t\tif (!windowDescriptor.monitor) {\n\t\t\treturn false;\n\t\t}\n\t\t//if right or left edge is within the window's bounds.\n\t\treturn windowDescriptor.monitor.name === monitorDimensions.name;\n\t}\n\n\n\t/**\n\t * Get bounds for a window.\n\t */\n\tgetBounds(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\".getBounds\", params);\n\t\tlet win = this.getWindow(params.name);\n\t\tvar bounds = null;\n\t\tif (win) {\n\t\t\tbounds = win.getBounds();\n\t\t\tcb(null, bounds);\n\t\t} else {\n\t\t\tcb(\"Window is not registered with Docking. No bounds retrieved.\", null);\n\t\t}\n\n\t\tLogger.system.debug(\".getBounds return\", bounds);\n\t\treturn bounds;\n\t}\n\n\tderegisterAllWindows() {\n\t\tlet self = this;\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tlet windows = self.getWindows();\n\t\t\tfor (let windowName in windows) {\n\t\t\t\tself.removeWindow(windowName);\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t}\n\n\n\t/* Stuff for Tabbing and Tiling */\n\tgetMouseInGroups(mousePosition) {\n\t\tlet groups = this.getGroups();\n\t\tlet movableGroups = [];\n\t\tlet immobileGroups = [];\n\t\tfor (let g in groups) {\n\t\t\tlet group = groups[g];\n\t\t\tlet win = group.getWindow(group.getWindowNames()[0]);\n\t\t\tif (!win) continue;\n\t\t\tif (win.win.windowState === FinsembleWindowInternal.WINDOWSTATE.MINIMIZED) continue;\n\t\t\tif (BoxMath.isPointInBox(mousePosition, group.getBounds())) {\n\t\t\t\tif (group.isMovable) movableGroups.push(group);\n\t\t\t\telse immobileGroups.push(group);\n\t\t\t}\n\t\t}\n\t\t/*if (mouseGroups.length) {\n\t\t\tfor (let g of mouseGroups) {\n\t\t\t\tif (g.isMovable) return g;\n\t\t\t}\n\t\t\treturn mouseGroups[0];\n\t\t}*/\n\n\t\treturn { movableGroups, immobileGroups };\n\t}\n\n\tgetMouseInWindows(mousePosition) {\n\t\tlet windows = this.getWindows();\n\t\tlet mouseWindows = [];\n\t\tfor (var w in windows) {\n\t\t\tlet win = windows[w];\n\t\t\tif (win.win.windowState === FinsembleWindowInternal.WINDOWSTATE.MINIMIZED) continue;\n\t\t\tif (mousePosition && win && BoxMath.isPointInBox(mousePosition, win.getBounds())) {\n\t\t\t\tmouseWindows.push(win);\n\t\t\t}\n\t\t}\n\t\treturn mouseWindows;\n\t}\n\n\tstartTrackingMouse(interval, cb = Function.prototype) {\n\t\tif (this.mouseTracker) {\n\t\t\tclearInterval(this.mouseTracker.interval);\n\t\t\tthis.mouseTracker.callback && this.mouseTracker.callback(\"New tracker overrode this one\");\n\t\t} else {\n\t\t\tthis.mouseTracker = {};\n\t\t}\n\t\tthis.mouseTracking = true;\n\t\tthis.mouseTracker.callback = cb;\n\t\tthis.mouseTracker.interval = setInterval(() => {\n\t\t\tSystem.getMousePosition((err, mousePosition) => {\n\t\t\t\tif (!this.mouseTracker) this.mouseTracker = {};\n\t\t\t\tif (!err) this.mouseTracker.mousePosition = mousePosition;\n\t\t\t\tcb(err, mousePosition);\n\t\t\t});\n\t\t}, interval);\n\t}\n\n\tstopTrackingMouse(cb) {\n\t\tthis.mouseTracking = false;\n\t\tcb(null, this.mouseTracker.mousePosition);\n\t\tclearInterval(this.mouseTracker.interval);\n\t\tthis.mouseTracker = false;\n\t}\n\n\t/**\n\t * Check if we are near the edge of a rectangle within x% or xpx\n\t *\n\t * @param {any} position\n\t * @param {any} bounds\n\t * @param {any} tolerance\n\t * @param {string} [toleranceType=\"percent\"] percent or pixel\n\t * @returns\n\t * @memberof DockingMain\n\t */\n\tisPositionNearEdge(position, bounds, tolerance, toleranceType = \"percent\") {\n\t\t// inside box\n\t\tlet edge = {};\n\n\t\tif (position.x > bounds.left && position.x < bounds.right && position.y > bounds.top && position.y < bounds.bottom) {\n\t\t\tlet edgeToReturn = false;\n\t\t\tlet left = position.x - bounds.left;\n\t\t\tif (toleranceType == \"percent\") left = left / bounds.width;\n\t\t\tif (left < tolerance) {\n\t\t\t\tedge.left = left;\n\t\t\t\tedgeToReturn = \"left\";\n\t\t\t}\n\t\t\tlet right = bounds.right - position.x;\n\t\t\tif (toleranceType == \"percent\") right = right / bounds.width;\n\t\t\tif (right < tolerance) {\n\t\t\t\tedge.right = right;\n\t\t\t\tedgeToReturn = \"right\";\n\t\t\t}\n\t\t\tlet top = position.y - bounds.top;\n\t\t\tif (toleranceType == \"percent\") top = top / bounds.height;\n\t\t\tif (top < tolerance) {\n\t\t\t\tedge.top = top;\n\t\t\t\tedgeToReturn = \"top\";\n\t\t\t}\n\t\t\tlet bottom = bounds.bottom - position.y;\n\t\t\tif (toleranceType == \"percent\") bottom = bottom / bounds.height;\n\t\t\tif (bottom < tolerance) {\n\t\t\t\tedge.bottom = bottom;\n\t\t\t\tedgeToReturn = \"bottom\";\n\t\t\t}\n\t\t\tif (edge.left && edge.top) {\n\t\t\t\tif (left < top) return \"left\";\n\t\t\t\treturn \"top\";\n\t\t\t}\n\t\t\tif (edge.left && edge.bottom) {\n\t\t\t\tif (left < bottom) return \"left\";\n\t\t\t\treturn \"bottom\";\n\t\t\t}\n\t\t\tif (edge.right && edge.top) {\n\t\t\t\tif (left < top) return \"right\";\n\t\t\t\treturn \"top\";\n\t\t\t}\n\t\t\tif (edge.right && edge.bottom) {\n\t\t\t\tif (right < bottom) return \"right\";\n\t\t\t\treturn \"bottom\";\n\t\t\t}\n\t\t\treturn edgeToReturn;\n\t\t}\n\t\treturn false;\n\t}\n\n\tidentifierForTilingOrTabbing(err, response) {\n\t\tLogger.system.debug(\"identifierForTilingOrTabbing got identifier\", response.data.windowIdentifier);\n\t\tFinsembleWindowInternal.getInstance({ name: response.data.windowIdentifier.windowName }, (err, windowWrap) => {\n\t\t\tthis.tilingAndTabbingWindow = windowWrap;\n\t\t\tLogger.system.debug(\"identifierForTilingOrTabbing got wrap\", windowWrap.name);\n\t\t});\n\n\t}\n\n\tstartTilingOrTabbing(err, response, sourceWin, avoidOrigin) {\n\t\tthis.avoidOrigin = avoidOrigin || false;\n\t\tlet { windowIdentifier } = response.data;\n\t\t//Gotta make sure we always pass the right thing around.\n\t\tif (!windowIdentifier.windowName && windowIdentifier.name) windowIdentifier.windowName = windowIdentifier.name;\n\t\tif (!sourceWin && !response.data.waitForIdentifier) {\n\t\t\tlet sourceDockableWindow = this.getWindow(windowIdentifier.windowName);\n\t\t\tif (!sourceDockableWindow) {\n\t\t\t\tFinsembleWindowInternal.getInstance({ name: windowIdentifier.windowName }, (err, windowWrap) => {\n\t\t\t\t\treturn this.startTilingOrTabbing(err, response, windowWrap);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsourceWin = sourceDockableWindow.win;\n\n\t\t}\n\n\t\tif (!sourceWin && response.data.componentType && typeof avoidOrigin === \"undefined\") {\n\t\t\tif (!this.configCache) this.configCache = {};\n\t\t\tif (!this.configCache[response.data.componentType]) {\n\t\t\t\treturn ConfigClient.getValue({ field: \"finsemble.components.\" + response.data.componentType + \".window\" }, (err, config) => {\n\t\t\t\t\tthis.configCache[response.data.componentType] = {\n\t\t\t\t\t\twidth: config.width ? config.width : 800,\n\t\t\t\t\t\theight: config.height ? config.height : 600\n\t\t\t\t\t};\n\t\t\t\t\tFinsembleWindowInternal.getInstance({ name: response.header.origin.replace(\"RouterClient.\", \"\") }, (err, originWrap) => {\n\t\t\t\t\t\toriginWrap.getBounds((err, bounds) => {\n\t\t\t\t\t\t\tthis.avoidOrigin = true;\n\t\t\t\t\t\t\tthis.originBounds = bounds;\n\t\t\t\t\t\t\tthis.startTilingOrTabbing(err, response, null, true);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn FinsembleWindowInternal.getInstance({ name: response.header.origin.replace(\"RouterClient.\", \"\") }, (err, originWrap) => {\n\t\t\t\toriginWrap.getBounds((err, bounds) => {\n\t\t\t\t\tthis.avoidOrigin = true;\n\t\t\t\t\tthis.originBounds = bounds;\n\t\t\t\t\tthis.startTilingOrTabbing(err, response, null, true);\n\t\t\t\t});\n\t\t\t});\n\n\t\t}\n\n\t\tlet sourceParentWindow = sourceWin ? sourceWin.parentWindow : null;\n\t\tLogger.system.debug(\"StartTilingOrTabbing\");\n\t\tRouterClient.transmit(\"FinsembleTilingStart\");\n\t\t//this.showModalScrim();\n\t\tlet self = this;\n\t\t/**\n\t\t * Shows the scrim occupying half the of the group or window bounds specified in bounds on the side specified by edge.\n\t\t *\n\t\t * @param {any} edge\n\t\t * @param {any} bounds\n\t\t * @returns\n\t\t */\n\t\tfunction scrimShower(edge, bounds) {\n\t\t\tif (!self.mouseTracking) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet maskBounds = Object.assign({}, bounds);\n\t\t\tlet newWindowBounds = Object.assign({}, bounds);\n\t\t\tswitch (edge) {\n\t\t\t\tcase \"full\": // This is for swapping\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"top\":\n\t\t\t\t\tmaskBounds.height = Math.round(bounds.height / 2);\n\t\t\t\t\tmaskBounds.bottom = maskBounds.top + maskBounds.height;\n\t\t\t\t\tnewWindowBounds.top = maskBounds.bottom;\n\t\t\t\t\tnewWindowBounds.height = bounds.height - maskBounds.height;\n\t\t\t\t\t//Recalculate so it isn't affected by rounding errors.\n\t\t\t\t\tnewWindowBounds.bottom = newWindowBounds.top + newWindowBounds.height;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"left\":\n\t\t\t\t\tmaskBounds.width = Math.round(bounds.width / 2);\n\t\t\t\t\tmaskBounds.right = maskBounds.left + maskBounds.width;\n\t\t\t\t\tnewWindowBounds.left = maskBounds.right;\n\t\t\t\t\tnewWindowBounds.width = bounds.width - maskBounds.width;\n\t\t\t\t\t//Recalculate so it isn't affected by rounding errors.\n\t\t\t\t\tnewWindowBounds.right = newWindowBounds.left + newWindowBounds.width;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"bottom\":\n\t\t\t\t\tmaskBounds.height = Math.round(bounds.height / 2);\n\t\t\t\t\tmaskBounds.top = maskBounds.bottom - maskBounds.height;\n\t\t\t\t\tnewWindowBounds.bottom = maskBounds.top;\n\t\t\t\t\tnewWindowBounds.height = bounds.height - maskBounds.height;\n\t\t\t\t\t//Recalculate so it isn't affected by rounding errors.\n\t\t\t\t\tnewWindowBounds.top = newWindowBounds.bottom - newWindowBounds.height;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"right\":\n\t\t\t\t\tmaskBounds.width = Math.round(bounds.width / 2);\n\t\t\t\t\tmaskBounds.left = maskBounds.left + maskBounds.width;\n\t\t\t\t\tnewWindowBounds.right = maskBounds.left;\n\t\t\t\t\tnewWindowBounds.width = bounds.width - maskBounds.width;\n\t\t\t\t\t//Recalculate so it isn't affected by rounding errors.\n\t\t\t\t\tnewWindowBounds.left = newWindowBounds.right - newWindowBounds.width;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tself.showGroupMask({ bounds: maskBounds, opacity: 0.5 });\n\n\t\t\treturn {\n\t\t\t\tmaskBounds: maskBounds,\n\t\t\t\tnewWindowBounds: newWindowBounds\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Checks if mousePosition is in group or window\n\t\t *\n\t\t * @param {any} mpErr\n\t\t * @param {any} mousePosition\n\t\t */\n\t\tfunction boundsChecker(mpErr, mousePosition) {\n\t\t\tif (!sourceWin && self.tilingAndTabbingWindow) {\n\t\t\t\tsourceWin = self.tilingAndTabbingWindow;\n\t\t\t\tdelete self.tilingAndTabbingWindow;\n\t\t\t}\n\t\t\tif (!self.mouseTracking) {\n\t\t\t\tclearInterval(self.mouseTracker.interval);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet headerHeight = self.headerHeight;\n\t\t\tlet groups = self.getMouseInGroups(mousePosition).movableGroups;\n\t\t\tlet wins = self.getMouseInWindows(mousePosition);\n\n\t\t\tlet amITabbing = false;\n\t\t\tlet showScrim = false;\n\t\t\tlet bringToFront = false;\n\n\t\t\tlet sourceWindowName = sourceWin ? sourceWin.name : null;\n\n\t\t\tif (self.avoidOrigin && self.isPositionNearEdge(mousePosition, self.originBounds, 100, \"percent\")) {\n\t\t\t\tself.operation = {\n\t\t\t\t\tsourceWindow: sourceWin\n\t\t\t\t};\n\t\t\t\tself.hideGroupMask();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (let win of wins) {\n\t\t\t\tif (win.name == sourceWindowName || win.isMinimized) continue; // ignore if on self.\n\t\t\t\t// are we tabbing??\n\t\t\t\tlet actualWindowBounds = win.getBounds();\n\t\t\t\tlet edge = self.isPositionNearEdge(mousePosition, actualWindowBounds, headerHeight, \"pixel\");\n\t\t\t\tif (edge == \"top\") {\n\t\t\t\t\tif (!(self.operation && self.operation.window && self.operation.window.name == win.name)) {\n\t\t\t\t\t\twin.bringToFront();\n\t\t\t\t\t}\n\t\t\t\t\tself.operation = {\n\t\t\t\t\t\twindow: win\n\t\t\t\t\t};\n\t\t\t\t\tamITabbing = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tlet allowDetaching = true;\n\t\t\tlet sourceGroup = sourceWindowName ? self.getMovableGroup(sourceWindowName) : null;\n\t\t\tlet sourceParentGroup = sourceParentWindow ? self.getMovableGroup(sourceParentWindow.name) : null;\n\n\t\t\tif (!amITabbing) { // tabbing gets priority\n\t\t\t\tfor (let group of groups) { //group tile\n\t\t\t\t\tif (!group.isARectangle()) continue;\n\n\t\t\t\t\tlet actualGroupBounds = group.getBounds();\n\t\t\t\t\tlet groupBounds = Object.assign({}, actualGroupBounds);\n\t\t\t\t\tgroupBounds.top += headerHeight;\n\t\t\t\t\tgroupBounds.height -= headerHeight;\n\t\t\t\t\tlet edge = self.isPositionNearEdge(mousePosition, groupBounds, self.groupTileBuffer, \"pixel\");\n\t\t\t\t\tif (edge && self.tilingEnabled) {\n\t\t\t\t\t\tif (sourceGroup == group || sourceParentGroup == group) { // dont tile in own group.\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//show mask occupying proper half\n\t\t\t\t\t\tif (!(self.operation && self.operation.type == \"tiling\" && self.operation.tileWith == \"group\" && self.operation.group.name == group.name)) { // flashing from bringing to front fix\n\t\t\t\t\t\t\tbringToFront = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.operation = {\n\t\t\t\t\t\t\ttype: \"tiling\",\n\t\t\t\t\t\t\ttileWith: \"group\",\n\t\t\t\t\t\t\tgroup: group,\n\t\t\t\t\t\t\tedge: edge\n\t\t\t\t\t\t};\n\t\t\t\t\t\tshowScrim = true;\n\t\t\t\t\t\tif (bringToFront) {\n\t\t\t\t\t\t\t//Bring window to front, then bring mask to front\n\t\t\t\t\t\t\tgroup.bringToFront();\n\t\t\t\t\t\t\tself.groupMask.win._bringToFront();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tself.operation.newBounds = scrimShower(edge, actualGroupBounds);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!showScrim) { // did not find a group tile\n\t\t\t\t\tfor (let win of wins) {\n\t\t\t\t\t\tif (!win.allowTiling) continue;\n\t\t\t\t\t\tif (sourceWindowName === win.name || win.isMinimized) {\n\t\t\t\t\t\t\tallowDetaching = false;\n\t\t\t\t\t\t\tcontinue;// ignore if on self.\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet parentWindow = win.win.parentWindow;\n\t\t\t\t\t\tif (sourceParentWindow && win.name === sourceParentWindow.name) {\n\t\t\t\t\t\t\tallowDetaching = false;\n\t\t\t\t\t\t\tcontinue;// ignore if on self.\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (sourceParentWindow && parentWindow && sourceParentWindow.name == parentWindow.name) {\n\t\t\t\t\t\t\tallowDetaching = false;\n\t\t\t\t\t\t\tcontinue;// ignore if on self.\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet actualWindowBounds = win.getBounds();\n\t\t\t\t\t\tlet windowBounds = Object.assign({}, actualWindowBounds);\n\t\t\t\t\t\twindowBounds.top += headerHeight;\n\t\t\t\t\t\twindowBounds.height -= headerHeight;\n\n\t\t\t\t\t\t// check if window is in same group\n\t\t\t\t\t\tif (sourceGroup && sourceGroup == self.getMovableGroup(win.name) && self.tilingEnabled) { //swapping - swap within same group\n\t\t\t\t\t\t\tself.operation = {\n\t\t\t\t\t\t\t\ttype: \"swapping\",\n\t\t\t\t\t\t\t\twindow: win,\n\t\t\t\t\t\t\t\tgroup: sourceGroup\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tshowScrim = true;\n\t\t\t\t\t\t\tscrimShower(\"full\", actualWindowBounds);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (sourceParentWindow && sourceParentGroup && sourceParentGroup == self.getMovableGroup(win.name) && self.tilingEnabled) { // also swap tabbed windows\n\t\t\t\t\t\t\tself.operation = {\n\t\t\t\t\t\t\t\ttype: \"swapping\",\n\t\t\t\t\t\t\t\twindow: win,\n\t\t\t\t\t\t\t\tgroup: sourceParentGroup\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tshowScrim = true;\n\t\t\t\t\t\t\tscrimShower(\"full\", actualWindowBounds);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else { //tiling\n\t\t\t\t\t\t\tif (self.tilingEnabled && win.allowTiling) {\n\t\t\t\t\t\t\t\tif (!(self.operation && self.operation.type == \"tiling\" && self.operation.tileWith == \"window\" && self.operation.window.name == win.name)) { // flashing from bringing to front fix\n\t\t\t\t\t\t\t\t\tbringToFront = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet edge = self.isPositionNearEdge(mousePosition, windowBounds, 0.5);\n\t\t\t\t\t\t\t\tif ((edge == \"top\" || edge == \"bottom\") && actualWindowBounds.height < 2 * self.MINIMUM_HEIGHT) {\n\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ((edge == \"left\" || edge == \"right\") && actualWindowBounds.width < 2 * self.MINIMUM_WIDTH) {\n\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tself.operation = {\n\t\t\t\t\t\t\t\t\ttype: \"tiling\",\n\t\t\t\t\t\t\t\t\ttileWith: \"window\",\n\t\t\t\t\t\t\t\t\twindow: win,\n\t\t\t\t\t\t\t\t\tedge: edge\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tshowScrim = true;\n\t\t\t\t\t\t\t\tif (bringToFront) {\n\n\t\t\t\t\t\t\t\t\twin.bringToFront();\n\t\t\t\t\t\t\t\t\tself.groupMask.win._bringToFront();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tself.operation.newBounds = scrimShower(edge, actualWindowBounds);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if we are not tabbing or tiling, we are detaching\n\t\t\tif (!showScrim && !amITabbing && response.data.componentType) { // This means that we are trying to tab/tile with an as yet un-spawned window. Show a window sized scrim\n\t\t\t\tshowScrim = true;\n\t\t\t\tself.operation = {\n\t\t\t\t\ttype: \"detaching\"\n\t\t\t\t};\n\t\t\t\tscrimShower(\"full\", Object.assign(mousePosition, self.configCache[response.data.componentType]));\n\n\t\t\t}\n\n\t\t\tif (!showScrim) {\n\t\t\t\tself.hideGroupMask();\n\t\t\t\t// if we are not tabbing, we are detaching\n\t\t\t\tif (!amITabbing && allowDetaching) {\n\t\t\t\t\tself.operation = {\n\t\t\t\t\t\ttype: \"detaching\"\n\t\t\t\t\t};\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!self.operation) self.operation = {};\n\t\t\tself.operation.sourceWindowName = sourceWin ? sourceWin.name : null;\n\n\t\t}\n\t\tthis.startTrackingMouse(5, boundsChecker);\n\t}\n\n\tcancelTilingOrTabbing(err, response) {\n\t\tLogger.system.debug(\"CancelTilingOrTabbing\");\n\t\tthis.operation = null;\n\t\tthis.stopTrackingMouse((err, mousePosition) => { });\n\t}\n\n\tbuildSnapRelationshipsForGroup(group) {\n\t\tlet windows = group.getWindows();\n\t\tfor (var w in windows) {\n\t\t\tthis.buildSnapRelationships(windows[w]);\n\t\t}\n\t}\n\n\tverifyWindowsAndGroups() {\n\t\tlet groups = this.getGroups();\n\t\tfor (var g in groups) {\n\t\t\tlet group = groups[g];\n\n\t\t\tlet windows = group.getWindows();\n\t\t\tfor (let w in windows) {\n\t\t\t\tlet win = windows[w];\n\t\t\t\tif (!win.groupNames.includes(group.name)) {\n\t\t\t\t\tLogger.system.warn(\"Group thinks it has window. Window doesn't think so\", group.name, win.name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet windows = this.getWindows();\n\t\tfor (let w in windows) {\n\t\t\tlet win = windows[w];\n\t\t\tfor (let g in window.groupNames) {\n\t\t\t\tlet group = this.getGroup(g);\n\t\t\t\tif (!group.getWindow(win.name)) {\n\t\t\t\t\tLogger.system.warn(\"Window thinks it is group. Group doesn't think so\", group.name, win.name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tactualStopTilingOrTabbing(params, callback) {\n\t\tlet { err, mousePosition, operation } = params;\n\n\t\tlet sourceWindow;\n\t\t//This will only happen if you're dragging a pin or something from a menu --- the window hasn't been spawned yet.\n\t\tif (!operation.sourceWindowName) { //dragged a non-existent window. wait.\n\t\t\tif (this.tilingAndTabbingWindow) {\n\t\t\t\toperation.sourceWindowName = this.tilingAndTabbingWindow.name;\n\t\t\t\tthis.tilingAndTabbingWindow = null;\n\t\t\t} else {\n\t\t\t\treturn setTimeout(() => {\n\t\t\t\t\tLogger.system.debug(\"StopTilingOrTabbing.actualStopTilingOrTabbing waiting for window\");\n\t\t\t\t\tthis.actualStopTilingOrTabbing(params, callback);\n\t\t\t\t}, 100);\n\t\t\t}\n\t\t}\n\n\t\tsourceWindow = this.getWindow(operation.sourceWindowName);\n\n\t\t//take what the user sent on dragend\n\t\tLogger.system.debug(\"StopTilingOrTabbing.actualStopTilingOrTabbing\", operation.sourceWindowName, mousePosition);\n\n\t\tif (!sourceWindow) { //detaching from tabbing so window is not registered with docking\n\t\t\tFinsembleWindowInternal.getInstance({ name: operation.sourceWindowName }, (err, windowWrap) => {\n\t\t\t\tLogger.system.debug(\"StopTilingOrTabbing.no source window. Adding to docking.\", operation.sourceWindowName);\n\t\t\t\tthis.addWindow(windowWrap).then(() => {\n\t\t\t\t\tthis.checkIfWindowIsInGroup(windowWrap.name);\n\t\t\t\t\tLogger.system.debug(\"StopTilingOrTabbing.recursive call\");\n\t\t\t\t\tthis.actualStopTilingOrTabbing(params, callback);\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\t//Use the underlying wrapper.\n\t\tvar self = this;\n\t\tfunction fillHoles(group, bounds) {\n\t\t\tgroup.fillHole(bounds);\n\t\t\tself.cleanupGroupGaps(group);\n\t\t\tself.buildSnapRelationshipsForGroup(group);\n\t\t}\n\n\t\tvar oldBounds = sourceWindow.getBounds();\n\t\tvar fillHolesFor = [];\n\n\t\tvar sourceMoveRequest = {\n\t\t\tname: sourceWindow.name,\n\t\t\tchangeType: 0\n\t\t};\n\t\tif (sourceWindow.groupNames && sourceWindow.groupNames.length) { //check if we need to fill holes\n\t\t\tfor (let i = sourceWindow.groupNames.length - 1; i >= 0; i--) {\n\t\t\t\tlet g = sourceWindow.groupNames[i];\n\t\t\t\tlet group = this.getGroup(g);\n\t\t\t\tif (group.isARectangle() && group.isMovable) {\n\t\t\t\t\tfillHolesFor.push(group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//Make sure hidden tabs come back to life.\n\t\tsourceWindow.show({ saveState: true });\n\t\tself.hideGroupMask();\n\t\t//When we call request-move, docking will stp if the window is between two snapping regions. By temporarily reducing the buffer size, we prevent inadvertent snaps and move our window to where we calculated it should go.\n\t\tconst BUFFER = this.bufferSize;\n\t\tthis.setBufferSize(0);\n\t\tlet parent = sourceWindow.win.parentWindow;\n\t\tswitch (operation.type) {\n\t\t\tcase \"tiling\":\n\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing case Tiling\", err, operation);\n\n\t\t\t\tlet groupNames;\n\t\t\t\tlet placement = this.checkShortCircuits(operation.newBounds.maskBounds, operation.newBounds.maskBounds);\n\t\t\t\toperation.newBounds.newWindowBounds = this.checkShortCircuits(operation.newBounds.newWindowBounds, operation.newBounds.newWindowBounds);\n\n\t\t\t\t//let oldGroups = clone(sourceWindow.groupNames);\n\t\t\t\t//2nd param is 'deleteGroupsWith1Window'\n\t\t\t\tthis.removeWindowFromAllGroups(sourceWindow, false);\n\t\t\t\tif (parent) {\n\t\t\t\t\tparent._removeWindow({ windowIdentifier: sourceWindow.win.identifier });\n\t\t\t\t}\n\n\n\t\t\t\tswitch (operation.tileWith) {\n\t\t\t\t\tcase \"group\":\n\t\t\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing case GROUP\", \"removeWindow\", sourceWindow.name, err);\n\t\t\t\t\t\tCALCULATOR.removeWindow(sourceWindow.name, false);\n\t\t\t\t\t\t/*if (sourceWindow.groupNames.includes(operation.group.name)) { //remove window from group before scaling group\n\t\t\t\t\t\t\tthis.removeWindowFromGroup(sourceWindow.name, operation.group.name);\n\t\t\t\t\t\t\tlet group = this.getGroup(operation.group.name);\n\t\t\t\t\t\t\tthis.cleanupGroupGaps(group);\n\t\t\t\t\t\t\tthis.buildSnapRelationshipsForGroup(group);\n\t\t\t\t\t\t}*/\n\n\n\t\t\t\t\t\tif (fillHolesFor.some((grp) => operation.group.name === grp.name)) {\n\t\t\t\t\t\t\tfillHoles(operation.group, oldBounds);\n\t\t\t\t\t\t\tfillHolesFor = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//if (!(oldBounds.width === operation.group.width || oldBounds.height === operation.group.height) && operation.group.sharesAnEdgeWith(oldBounds)) {\n\t\t\t\t\t\toperation.group.scale(operation.newBounds.newWindowBounds, operation.edge, this);\n\t\t\t\t\t\toperation.group.resizeHandle = operation.edge;\n\t\t\t\t\t\toperation.group.updateBounds();\n\t\t\t\t\t\tlet groupBounds = operation.group.getBounds();\n\n\t\t\t\t\t\t//If the scale short circuits, we'll want to shift the window's placement to reflect the actual group bounds instead of what we planned for.\n\t\t\t\t\t\tswitch (operation.edge) {\n\t\t\t\t\t\t\tcase \"right\":\n\t\t\t\t\t\t\t\tplacement.left = groupBounds.right;\n\t\t\t\t\t\t\t\tplacement.right = placement.width + placement.left;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"left\":\n\t\t\t\t\t\t\t\tplacement.right = groupBounds.left;\n\t\t\t\t\t\t\t\tplacement.left = placement.right - placement.width;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"top\":\n\t\t\t\t\t\t\t\tplacement.bottom = groupBounds.top;\n\t\t\t\t\t\t\t\tplacement.top = placement.bottom - placement.height;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"bottom\":\n\t\t\t\t\t\t\t\tplacement.top = groupBounds.bottom;\n\t\t\t\t\t\t\t\tplacement.bottom = placement.top + placement.height;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgroupNames = [operation.group.name];\n\t\t\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing case GROUP\", \"addWindow\", sourceWindow.name);\n\t\t\t\t\t\tCALCULATOR.addWindow(sourceWindow.name, sourceWindow);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"window\":\n\t\t\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing case window\", \"removeWindow\", operation);\n\t\t\t\t\t\t//If the scale short circuits, we'll want to shift the window's placement to reflect the actual group bounds instead of what we planned for.\n\t\t\t\t\t\tswitch (operation.edge) {\n\t\t\t\t\t\t\tcase \"right\":\n\t\t\t\t\t\t\t\tplacement.left = operation.newBounds.newWindowBounds.right;\n\t\t\t\t\t\t\t\tplacement.right = placement.width + placement.left;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"left\":\n\t\t\t\t\t\t\t\tplacement.right = operation.newBounds.newWindowBounds.left;\n\t\t\t\t\t\t\t\tplacement.left = placement.right - placement.width;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"top\":\n\t\t\t\t\t\t\t\tplacement.bottom = operation.newBounds.newWindowBounds.top;\n\t\t\t\t\t\t\t\tplacement.top = placement.bottom - placement.height;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"bottom\":\n\t\t\t\t\t\t\t\tplacement.top = operation.newBounds.newWindowBounds.bottom;\n\t\t\t\t\t\t\t\tplacement.bottom = placement.top + placement.height;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toperation.window.setBounds(operation.newBounds.newWindowBounds);\n\t\t\t\t\t\toperation.window.win.stopMove();\n\t\t\t\t\t\tgroupNames = operation.window.groupNames;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\n\t\t\t\t//this.buildSnapRelationships(sourceWindow);\n\t\t\t\tObject.assign(sourceMoveRequest, placement);\n\n\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing requestMove 0\", sourceMoveRequest);\n\n\t\t\t\tif (groupNames && groupNames.length) { // If target is already part of a group or merging with a group\n\t\t\t\t\tthis.requestMove(sourceMoveRequest, (bounds) => {\n\t\t\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing requestMove 1\", bounds);\n\n\t\t\t\t\t\tif (bounds && !bounds.finished) return;\n\t\t\t\t\t\tfor (var g of groupNames) {\n\t\t\t\t\t\t\tlet group = this.addWindowToGroup({ groupName: g, win: sourceWindow });\n\t\t\t\t\t\t\tthis.cleanupGroupGaps(group);\n\t\t\t\t\t\t\tthis.buildSnapRelationshipsForGroup(group);\n\t\t\t\t\t\t\tgroup.updateBounds();\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.updateGroupData();\n\t\t\t\t\t\tthis.onMouseUp();\n\t\t\t\t\t\tif (fillHolesFor.length) {\n\t\t\t\t\t\t\tfor (let g of fillHolesFor) {\n\t\t\t\t\t\t\t\tfillHoles(g, oldBounds);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (groupNames.length == 1) { // this was a snapping group. Need to dock.\n\t\t\t\t\t\t\tthis.formGroup(sourceWindow.name, { isMovable: true });\n\t\t\t\t\t\t\tthis.updateGroupData();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else { // If target is not part of a group\n\t\t\t\t\tthis.requestMove(sourceMoveRequest, (bounds) => {\n\t\t\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing requestMove 2\", bounds);\n\t\t\t\t\t\tif (bounds && !bounds.finished) return;\n\t\t\t\t\t\tlet group = this.addWindowToGroup({\n\t\t\t\t\t\t\twin: operation.window,\n\t\t\t\t\t\t\tisMovable: true\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.addWindowToGroup({\n\t\t\t\t\t\t\twin: sourceWindow,\n\t\t\t\t\t\t\tgroupName: group.name\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.updateGroupData();\n\t\t\t\t\t\tthis.onMouseUp();\n\t\t\t\t\t\tif (fillHolesFor.length) {\n\t\t\t\t\t\t\tfor (let g of fillHolesFor) {\n\t\t\t\t\t\t\t\tfillHoles(g, oldBounds);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase \"swapping\":\n\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing case swapping\", operation);\n\t\t\t\tlet sourceWindowNewBounds = operation.window.getBounds();\n\t\t\t\tlet targetWindowNewBounds = sourceWindow.getBounds();\n\n\t\t\t\tsourceWindow.setBounds(sourceWindowNewBounds);\n\t\t\t\toperation.window.setBounds(targetWindowNewBounds);\n\t\t\t\tsourceWindow.win.stopMove();\n\t\t\t\toperation.window.win.stopMove();\n\n\n\t\t\t\tthis.buildSnapRelationships(sourceWindow);\n\t\t\t\tthis.buildSnapRelationships(operation.window);\n\n\t\t\t\tthis.buildSnapRelationshipsForGroup(operation.group);\n\t\t\t\tthis.updateGroupData();\n\t\t\t\tbreak;\n\n\t\t\tcase \"detaching\":\n\t\t\t\tlet newBounds = {\n\t\t\t\t\ttop: mousePosition.y,\n\t\t\t\t\tleft: mousePosition.x,\n\t\t\t\t\tright: sourceWindow.width + mousePosition.x,\n\t\t\t\t\tbottom: sourceWindow.height + mousePosition.y,\n\t\t\t\t\twidth: sourceWindow.width,\n\t\t\t\t\theight: sourceWindow.height\n\t\t\t\t};\n\n\t\t\t\tif (parent) { //detaching from tabs (TODO: detaching from tabbed window in docked group)\n\t\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing case detaching with parent\", operation, newBounds, parent.name);\n\n\t\t\t\t\t/*\n\t\t\t\t\t\tIf remove window breaks, try this code, which was from master. We couldn't figure out which to take.\n\t\t\t\t\tparent.removeWindow({ showWindow: true, windowIdentifier: sourceWindow.win.identifier }, () => {\n\t\t\t\t\t\t\t\t\t\t\t// TODO: this is dirty. this callback should not happen unless the window is actually removed.\n\t\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\t\tsourceWindow.show();\n\t\t\t\t\t\t\t\t\t\t\t\tsourceWindow.setBounds(newBounds);\n\t\t\t\t\t\t\t\t\t\t\t}, 100);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t*/\n\t\t\t\t\tparent._removeWindow({ showWindow: true, windowIdentifier: sourceWindow.win.identifier });\n\t\t\t\t\tsourceWindow.setBounds(newBounds);\n\t\t\t\t}\n\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing case detaching no parent\", operation, newBounds);\n\n\t\t\t\tthis.removeWindowFromAllGroups(sourceWindow, false);\n\n\t\t\t\tthis.updateGroupData();\n\t\t\t\tObject.assign(sourceMoveRequest, newBounds);\n\t\t\t\tthis.requestMove(sourceMoveRequest, (bounds) => {\n\t\t\t\t\tif (bounds && !bounds.finished) return;\n\t\t\t\t\tif (fillHolesFor.length) {\n\t\t\t\t\t\tfor (let g of fillHolesFor) {\n\t\t\t\t\t\t\tfillHoles(g, oldBounds);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.onMouseUp();\n\t\t\t\t});\n\t\t\t\t//this.buildSnapRelationships(sourceWindow);\n\t\t\t\tbreak;\n\t\t\tcase \"tabbing\":\n\t\t\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing case tabbing break\", operation ? operation.type : null);\n\t\t\t\t// If old window was in a group, fill holes for that group\n\t\t\t\tObject.assign(sourceMoveRequest, sourceWindow.getBounds());\n\t\t\t\t/** We want to remove the source window from all its groups.\n\t\t\t\t * We also want to disband any groups that, as a result of\n\t\t\t\t * that removal, only have 1 window in the group. That said,\n\t\t\t\t * if we remove the group before the call to fillHoles(),\n\t\t\t\t * the math won't be right, and we'll have a bug in some\n\t\t\t\t * edge cases. Ideally, calling this.updateGroupData() should\n\t\t\t\t * automatically disband any group with only 1 window, but, as\n\t\t\t\t * things are, there are timing issues that cause things to\n\t\t\t\t * break down with this approach.\n\t\t\t\t *\n\t\t\t\t * The current solution is to cache the groups sourceWindow\n\t\t\t\t * belongs to, remove the sourceWindow from all its groups\n\t\t\t\t * but DON'T disband any of them, call fillHole(),\n\t\t\t\t * then go back and remove any single-member groups if there\n\t\t\t\t * are any.\n\t\t\t\t *\n\t\t\t\t * @todo Make this sort of logic more centralized and automatic.\n\t\t\t\t */\n\t\t\t\tconst oldGroupNames = clone(sourceWindow.groupNames);\n\t\t\t\tthis.removeWindowFromAllGroups(sourceWindow, false);\n\t\t\t\tthis.removeWindow(sourceWindow.name);\n\t\t\t\tif (fillHolesFor.length) {\n\t\t\t\t\tfor (let g of fillHolesFor) {\n\t\t\t\t\t\tfillHoles(g, sourceWindow.getBounds());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// This loop checks for any newly created single-member groups and disbands them.\n\t\t\t\tfor (let groupName of oldGroupNames) {\n\t\t\t\t\tconst group = this.getGroup(groupName);\n\t\t\t\t\tif (!group) continue;\n\t\t\t\t\tconst groupWindowsNames = group.getWindowNames();\n\t\t\t\t\tif (groupWindowsNames.length !== 1) continue;\n\t\t\t\t\tthis.removeWindowFromGroup(groupWindowsNames[0], groupName, true);\n\t\t\t\t}\n\n\t\t\t\tthis.onMouseUp();\n\t\t\t\tthis.updateGroupData();\n\t\t}\n\t\tthis.setBufferSize(BUFFER);\n\t\tif (operation.group) {\n\t\t\toperation.group.resizeHandle = null;\n\t\t}\n\t\tcallback();\n\t}\n\n\tstopTilingOrTabbing(err, response, callback) {\n\t\tthis.hideModalScrim();\n\t\tLogger.system.debug(\"Docking:stopTilingOrTabbing start\", err, response, this.operation ? this.operation.type : null);\n\n\t\tif (!this.operation) return;\n\t\tlet op = this.operation;\n\t\tdelete this.operation;\n\t\tif (response.data.action) {\n\t\t\top.type = response.data.action;\n\t\t}\n\n\t\t/* Show Window at Last Scrim Position */\n\t\tLogger.system.debug(\"Stop tiling or tabbing\");\n\t\tthis.stopTrackingMouse((err, mousePosition) => {\n\t\t\tmousePosition = response.data.mousePosition || mousePosition;\n\t\t\tif (op.type === \"swapping\" && op.sourceWindowName) {\n\t\t\t\tFinsembleWindowInternal.getInstance({ name: op.sourceWindowName }, (err, windowWrap) => {\n\t\t\t\t\t//replace the sourceWindowName with the parent's name. This way the whole stacked group gets swapped instead of the individual tab.\n\t\t\t\t\tif (windowWrap.parentWindow) {\n\t\t\t\t\t\top.sourceWindowName = windowWrap.parentWindow.name;\n\t\t\t\t\t}\n\t\t\t\t\tthis.actualStopTilingOrTabbing({ err, mousePosition, operation: op }, callback);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.actualStopTilingOrTabbing({ err, mousePosition, operation: op }, callback);\n\t\t\t}\n\t\t});\n\n\t}\n\n\t/**\n\t * Performs all necessary propagation to docking functions for when a window docks or undocks.\n\t * This is the main point for docking/undocking. It calls the DockableWindow to dock/undock and set appropriate window options. It also calls to claim/unclaim space for a monitor.\n\t *\n\t * @param {object} params An object containing the properties for docking/undocking\n\t * @param {object} params.win The window requesting to dock/undock\n\t * @param {number} params.location An enum from DockableWindow. An integer which ties back to a dockable location\n\t * @param {object} params.oldBounds An object containing the width and height of a window before it was docked. This allows for the window to return to those dimensions when undocked. Null when undocking.\n\t * @param {boolean} params.unchangedDockState If true, the docked/undocked state wont be changed\n\t * @param {string} params.action Action supplied when the dock state is not being determined here\n\t */\n\thandleMonitorSpaceChanges(params) {\n\t\tlet { win, location, oldBounds, unchangedDockState, action } = params;\n\n\t\tlocation = location || \"top\";\n\t\tLogger.system.debug(\"dockingMain.handleMonitorSpaceChange HANDLE MONITOR SPACE CHANGES\", params);\n\n\t\tlocation = location.trim().toUpperCase(); //since \"top\" !== \"TOP\"\n\t\tlet dockableWin = this.getWindow(win.name);\n\t\tif (dockableWin.monitorDockablePositions[location] !== undefined || dockableWin.monitorDockablePositions[location] !== null) {\n\t\t\tlocation = dockableWin.monitorDockablePositions[location];\n\t\t} else {\n\t\t\t//if the location to dock to is not a valid location, just ignore the request\n\t\t\treturn false;\n\t\t}\n\t\tlet monitor = dockableWin.isDocked && win.dockedMonitor ? win.dockedMonitor : this.getMonitorForWindow(win);\n\t\tlet serviceMonitors = this.getMonitors(); //All the monitors the docking service is tracking\n\t\tlet monitors = Object.keys(serviceMonitors).map((mon) => {\n\t\t\treturn serviceMonitors[mon];\n\t\t}); //convert object to array\n\n\t\t//let action;\n\t\tlet dockableMonitor;\n\t\tlet monIndex = -1;\n\t\tfor (let i = 0; i < monitors.length; i++) {\n\t\t\tlet dockMonitorFromArray = monitors[i];\n\t\t\tif (dockMonitorFromArray.name === monitor.name) {\n\t\t\t\tdockableMonitor = dockMonitorFromArray;\n\t\t\t\tmonIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (dockableMonitor) {\n\t\t\t// Redock: Dock the window to the new location. No need to call undock first because it sets a few variables that are not needed in this case\n\t\t\t// adjustClaimedSpace deals with any actions needing to clean up a window's old position\n\t\t\tif (action === \"redock\") {\n\t\t\t\tdockableWin.dock(monitor, oldBounds, location);\n\t\t\t} else if (!unchangedDockState) {\n\t\t\t\tif (location !== dockableWin.monitorDockablePositions.NONE) {\n\t\t\t\t\tdockableWin.dock(monitor, oldBounds, location);\n\t\t\t\t\taction = \"dock\";\n\t\t\t\t} else {\n\t\t\t\t\tdockableWin.undock();\n\t\t\t\t\taction = \"undock\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet adjustedMonitor = this.adjustClaimedSpace({ action, dockableWin, dockableMonitor, location });\n\t\t\tLogger.debug(\"Replacing monitor at index: \", monIndex);\n\t\t\tLogger.debug(\"replacing: \", monitors[monIndex].unclaimedRect);\n\t\t\tLogger.debug(\"changing to: \", adjustedMonitor.unclaimedRect);\n\t\t\tmonitors.splice(monIndex, 1, adjustedMonitor);\n\t\t\tthis.updateMonitorInfo(monitors, true);\n\t\t\tif (action === \"dock\") this.moveAllWindowsOutOfClaimedSpace(dockableWin, monitors);\n\t\t}\n\t}\n\n\tinitialize(done) {\n\t\tvar self = this;\n\t\twindow.RouterClient = RouterClient;\n\t\tthis.createRouterEndpoints();\n\t\t//The launcherService waits for the windowService. We need to create our group mask, but not before we can route the request through LauncherService.spawn.\n\t\tLauncherClient.onReady(() => {\n\t\t\tthis.createGroupMask();\n\t\t});\n\t\tasync.parallel([\n\t\t\tfunction setupDockingCalculator(done) {\n\t\t\t\tConfigClient.getValue({ field: \"finsemble\" }, function (err, response) {\n\t\t\t\t\tserviceConfig = response.services.windowService.config || response.services.dockingService.config; //Finsemble config\n\t\t\t\t\t/* Assimilation config can come from the defaults (/finsemble/configs/core/services.json),\n\t\t\t\t\tclient-configured servicesConfig, or in betaFeatures config (deprecated).  */\n\t\t\t\t\tconst servicesConfigAssim = response.servicesConfig.assimilation;\n\t\t\t\t\tconst betaAssim = response.betaFeatures.assimilation;\n\t\t\t\t\tconst defaultAssim = response.services.assimilationService.config;\n\t\t\t\t\tserviceConfig.assimilationEnabled = Object.assign(defaultAssim, servicesConfigAssim || betaAssim);\n\t\t\t\t\tif (response.docking) {\n\t\t\t\t\t\tLogger.system.warn(\"Docking is no longer supported as a top level prop. Expected under serviceConfigs.\");\n\t\t\t\t\t} else if (response.betaFeatures.docking) {\n\t\t\t\t\t\tLogger.system.error(\"Docking is no longer a beta feature. A docking prop was expected under serviceConfigs.\");\n\t\t\t\t\t}\n\n\t\t\t\t\t//right place is servicesConfig, old place was top-level config. Otherwise we use an empty object that gets merged with finsemble defaults.\n\t\t\t\t\tlet docking;\n\t\t\t\t\tif (response.servicesConfig && response.servicesConfig.docking) {\n\t\t\t\t\t\tdocking = response.servicesConfig.docking;\n\t\t\t\t\t} else if (response.docking) {\n\t\t\t\t\t\tdocking = response.docking;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdocking = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Object.keys(docking).length > 0) {\n\t\t\t\t\t\tserviceConfig = Object.assign(serviceConfig, docking);\n\t\t\t\t\t}\n\t\t\t\t\t//todo why the hell is headerHeight in groupMode? FIX.\n\t\t\t\t\tserviceConfig.GROUP_MODE = {\n\t\t\t\t\t\tenabled: docking.enabled,\n\t\t\t\t\t\tbehavior: \"explicit\",\n\t\t\t\t\t\tgroupTileBuffer: docking.groupTileBuffer || 30,\n\t\t\t\t\t\theaderHeight: docking.headerHeight || 32,\n\t\t\t\t\t\trequireRectangularityForGroupResize: docking.requireRectangularityForGroupResize,\n\t\t\t\t\t\tfillHolesOnUndock: docking.fillHolesOnUndock,\n\t\t\t\t\t\tundockDisbandsEntireGroup: docking.undockDisbandsEntireGroup\n\t\t\t\t\t};\n\n\t\t\t\t\tself.setupDockingCalculator();\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t},\n\t\t\tfunction initializeMonitors(done) {\n\t\t\t\tutil.getAllMonitors((res) => {\n\t\t\t\t\t//Iterating through the product of util.getAllMonitors to set the unclaimedRect equal to availableRect. getAllMonitors returns openfinMonitors which do not contain unclaimedRect\n\t\t\t\t\tres = res.map((monitor) => {\n\t\t\t\t\t\tlet mon = monitor;\n\t\t\t\t\t\tmon.unclaimedRect = clone(mon.availableRect);\n\t\t\t\t\t\treturn mon;\n\t\t\t\t\t});\n\t\t\t\t\tself.updateMonitorInfo(res);\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t}\n\t\t], done);\n\t}\n}\n\nfunction DefaultDockingOptions(configData, MIN_HEIGHT, MIN_WIDTH) {\n\t//If no options, start with an empty object so that all the lines below don't cause catastrophic failures.\n\tif (!configData.options) configData.options = {};\n\tlet checkForTaskbarOptions = configData.options.hasOwnProperty(\"options\");\n\n\tthis.dockable = configData.options.dockable || false;\n\n\tthis.ephemeral = configData.options.ephemeral;\n\n\tthis.undockedParams = {\n\t\twidth: configData.options.width,\n\t\theight: configData.options.height\n\t};\n\tthis.dockedParams = {\n\t\twidth: configData.options.dockedWidth ? configData.options.dockedWidth : configData.options.width,\n\t\theight: configData.options.dockedHeight ? configData.options.dockedHeight : configData.options.height\n\t};\n\tthis.startsDocked;\n\n\tif (!this.dockable) {\n\t\tthis.startsDocked = false;\n\t} else {\n\t\tthis.startsDocked = configData.options.docked || \"top\";\n\t}\n\n\tthis.overwriteDockedOptions = configData.options.overwriteStartDocked || false;\n\tthis.ignoreSnappingRequests = typeof configData.options.snapping === \"undefined\" ? false : !configData.options.snapping; //If snapping is true, we don't want to ignoreSnappingRequests and vice versa\n\tthis.showTaskbarIcon = checkForTaskbarOptions ? configData.options.options.showTaskbarIcon : true;\n\tthis.minHeight = configData.options.minHeight || MIN_HEIGHT;\n\tthis.maxHeight = configData.options.maxHeight || Infinity;\n\tthis.minWidth = configData.options.minWidth || MIN_WIDTH;\n\tthis.maxWidth = configData.options.maxWidth || Infinity;\n}\n\n\nexport default DockingMain;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Docking/dockingMain.js","import LauncherClient from \"../../../clients/launcherClient\";\nimport { series as asyncSeries} from \"async\";\nfunction allChecksPass(checks) {\n\t//every check is true\n\treturn checks.every(check => check);\n}\nfunction getFailedChecks(checks) {\n\treturn checks.filter(check => !check);\n}\nclass TestLauncher {\n\tconstructor(componentType) {\n\t\tthis.componentType = componentType;\n\t\tthis.myWindowName = this.componentType + \" - Spawn Test\";\n\t\tthis.secondaryWindowName = this.myWindowName + \" - Secondary\";\n\t\tLauncherClient.initialize();\n\t}\n\t/**\n\t * Closes the windows we spawned earlier.\n\t * @param {*} cb\n\t */\n\tdestructor(cb = Function.prototype) {\n\t\tthis.myWindow._close({}, cb);\n\t\tthis.secondaryWindow._close({}, cb);\n\t\tthis.secondaryWindowIdentifier = null;\n\t\tthis.myWindowIdentifier = null;\n\t}\n\t/**\n\t * Gets all the monitors\n\t */\n\tgetMonitors() {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tLauncherClient.getMonitorInfoAll((err, monitors) => {\n\t\t\t\tthis.monitors = monitors;\n\t\t\t\tresolve(monitors);\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\t/**\n\t * Runs all of the tests for show window on each monitor.\n\t */\n\ttestShowWindow() {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t//Prep work is: spawn window 1, spawn relative window\n\t\t\tvar { err, response } = await LauncherClient.spawn(this.componentType, { name: this.myWindowName, left: \"center\", top: \"center\" });\n\t\t\tthis.myWindowIdentifier = response.windowIdentifier;\n\t\t\tthis.myWindow = activeWindows.getWindow(this.myWindowName);\n\n\t\t\tvar { err, response } = await LauncherClient.spawn(this.componentType, { name: this.secondaryWindowName });\n\t\t\tthis.secondaryWindow = activeWindows.getWindow(this.secondaryWindowName);\n\t\t\tthis.secondaryWindowIdentifier = response.windowIdentifier;\n\n\t\t\tawait this.getMonitors();\n\t\t\tlet tests = [];\n\t\t\t//Run each test on every monitor.\n\t\t\tthis.monitors.forEach(async (monitor) => {\n\t\t\t\ttests.push(async (done) => {\n\t\t\t\t\tawait this.showWindowCenteredOnMonitor(monitor);\n\t\t\t\t\tawait this.showUnclaimed(monitor);\n\t\t\t\t\tawait this.showAbsoluteMonitor(monitor);\n\t\t\t\t\tawait this.showWindowRelative(monitor);\n\t\t\t\t\tawait this.showWindowAdjacent(monitor);\n\t\t\t\t\t// await this.forceOntoMonitor(monitor);\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t});\n\t\t\tasyncSeries(tests, () => {\n\t\t\t\tthis.destructor();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\t/**\n\t * Private function to reduce some boilerplate for the tests.\n\t * @param {*} params\n\t * @param {*} cb\n\t */\n\tasync _showWindow(params, cb) {\n\t\tvar { data: initialBounds } = await this.myWindow._getBounds();\n\t\tvar { data: relativeWindowBounds } = await this.secondaryWindow._getBounds();\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tLauncherClient.showWindow(this.myWindowIdentifier, params, async () => {\n\t\t\t\tlet { data: newBounds } = await this.myWindow._getBounds();\n\t\t\t\tlet monitor = this.monitors[params.monitor];\n\t\t\t\tlet monitorBounds;\n\t\t\t\t//Return the proper monitor rect for comparisons.\n\t\t\t\tif (params.position === \"monitor\" || !params.position) {\n\t\t\t\t\tmonitorBounds = monitor.monitorRect;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"returning unclaimed monitor\");\n\t\t\t\t\tmonitorBounds = monitor.unclaimedRect;\n\t\t\t\t}\n\n\t\t\t\tresolve({ relativeWindowBounds, initialBounds, newBounds, monitorBounds });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\t/**\n\t * Tests 'adjacent' for top/left/right/bottom\n\t * @param {*} monitor\n\t */\n\tasync showWindowAdjacent(monitor) {\n\t\tvar self = this;\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tasyncSeries([\n\t\t\t\tasync function top(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"show adjacent top\");\n\t\t\t\t\tlet { initialBounds, newBounds, relativeWindowBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\ttop: \"adjacent\",\n\t\t\t\t\t\trelativeWindow: self.secondaryWindowIdentifier\n\t\t\t\t\t});\n\t\t\t\t\t//top: adjacent takes the window places the top of the window up against the bottom of the relative window\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tnewBounds.top === relativeWindowBounds.bottom,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"show adjacent top Success\", monitor.position, monitor.unclaimedRect.top, newBounds.top);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window adjacent top failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function left(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"show adjacent left\");\n\t\t\t\t\tlet { initialBounds, newBounds, relativeWindowBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tleft: \"adjacent\",\n\t\t\t\t\t\trelativeWindow: self.secondaryWindowIdentifier\n\t\t\t\t\t});\n\t\t\t\t\t//left: adjacent takes the window places the left edge up against the right edge of the relative window\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tnewBounds.left === relativeWindowBounds.right,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"show adjacent left Success\", monitor.position, monitor.unclaimedRect.left, newBounds.left);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window adjacent left failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function right(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"show adjacent right\");\n\t\t\t\t\tlet { initialBounds, newBounds, relativeWindowBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tright: \"adjacent\",\n\t\t\t\t\t\trelativeWindow: self.secondaryWindowIdentifier\n\t\t\t\t\t});\n\t\t\t\t\t//right: adjacent takes the window places it right edge against the left edge of the relative window\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tnewBounds.right === relativeWindowBounds.left,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tconsole.info(self.componentType, \"show adjacent right callback\", monitor.position, monitor.unclaimedRect.right, newBounds.right);\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"show adjacent right Success\", monitor.position, monitor.unclaimedRect.right, newBounds.right);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window adjacent right failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function bottom(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"show adjacent bottom\");\n\t\t\t\t\tlet { initialBounds, newBounds, relativeWindowBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tbottom: \"adjacent\",\n\t\t\t\t\t\trelativeWindow: self.secondaryWindowIdentifier\n\t\t\t\t\t});\n\t\t\t\t\t//bottom: adjacent places the window's bottom adjacent to the top of the relative window.\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tnewBounds.bottom === relativeWindowBounds.top,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tconsole.info(self.componentType, \"show adjacent bottom callback\", monitor.position, newBounds.bottom);\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"show adjacent bottom Success\", monitor.position, monitor.unclaimedRect.bottom, newBounds.bottom);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window adjacent bottom failed\", getFailedChecks(checks));\n\t\t\t\t}\n\t\t\t],\n\t\t\t\tresolve);\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\t/**\n\t * Tests top/left: center\n\t * @param {*} monitor\n\t */\n\tasync showWindowCenteredOnMonitor(monitor) {\n\t\tlet self = this;\n\t\tconst promiseResolver = async (resolve) => {\n\t\t\tconsole.info(self.componentType, \"showWindowCenteredOnAllMonitors\", monitor.position, monitor.unclaimedRect.left);\n\t\t\tlet { initialBounds, newBounds, monitorBounds } = await self._showWindow({\n\t\t\t\tmonitor: monitor.position,\n\t\t\t\tleft: \"center\",\n\t\t\t\ttop: \"center\"\n\t\t\t});\n\t\t\tconst checks = [\n\t\t\t\tnewBounds.top === (monitorBounds.top + (monitorBounds.height / 2) - (initialBounds.height / 2)),\n\t\t\t\tnewBounds.left === (monitorBounds.left + (monitorBounds.width / 2) - (initialBounds.width / 2)),\n\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t];\n\t\t\t//if all checks pass, resolve.\n\t\t\tif (allChecksPass(checks)) {\n\t\t\t\tconsole.info(self.componentType, \"showWindowCenteredOnAllMonitors Success\", monitor.position);\n\t\t\t\treturn resolve();\n\t\t\t}\n\t\t\tthrow new Error(\"Show window failed\", getFailedChecks(checks));\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\t/**\n\t * Tests position 'relative', which treats the relative window as thgouh it were a monitor. So top:10 puts the window's top 10px below the relative window's top.\n\t * @param {} monitor\n\t */\n\tasync showWindowRelative(monitor) {\n\t\tvar self = this;\n\t\tconst ADJUSTMENT = -30;\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tasyncSeries([\n\t\t\t\tasync function top(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"show relative top\");\n\t\t\t\t\tlet { initialBounds, newBounds, relativeWindowBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\ttop: ADJUSTMENT,\n\t\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\t\trelativeWindow: self.secondaryWindowIdentifier\n\t\t\t\t\t});\n\t\t\t\t\t//top: relative takes the window and butts the bottom of the relative window up against the top of the other one,\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tnewBounds.top === relativeWindowBounds.top + ADJUSTMENT,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"show relative top Success\", monitor.position, monitor.unclaimedRect.top, newBounds.top);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window relative top failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function left(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"show relative left\");\n\t\t\t\t\tlet { initialBounds, newBounds, relativeWindowBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tleft: ADJUSTMENT,\n\t\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\t\trelativeWindow: self.secondaryWindowIdentifier\n\t\t\t\t\t});\n\t\t\t\t\t//top: relative takes the window and butts the bottom of the relative window up against the top of the other one,\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tnewBounds.left === relativeWindowBounds.left + ADJUSTMENT,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"show relative left Success\", monitor.position, monitor.unclaimedRect.left, newBounds.left);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window relative left failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function right(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"show relative right\");\n\t\t\t\t\tlet { initialBounds, newBounds, relativeWindowBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tright: ADJUSTMENT,\n\t\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\t\trelativeWindow: self.secondaryWindowIdentifier\n\t\t\t\t\t});\n\t\t\t\t\t//top: relative takes the window and butts the bottom of the relative window up against the top of the other one,\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tnewBounds.right === relativeWindowBounds.right - ADJUSTMENT,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tconsole.info(self.componentType, \"show relative right callback\", monitor.position, relativeWindowBounds.right, newBounds.right);\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"show relative right Success\", monitor.position, monitor.unclaimedRect.right, newBounds.right);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window relative right failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function bottom(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"show relative bottom\");\n\t\t\t\t\tlet { initialBounds, newBounds, relativeWindowBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tbottom: ADJUSTMENT,\n\t\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\t\trelativeWindow: self.secondaryWindowIdentifier\n\t\t\t\t\t});\n\t\t\t\t\t//top: relative takes the window and butts the bottom of the relative window up against the top of the other one,\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tnewBounds.bottom === relativeWindowBounds.bottom - ADJUSTMENT,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tconsole.info(self.componentType, \"show relative bottom callback\", monitor.position, newBounds.bottom);\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"show relative bottom Success\", monitor.position, monitor.unclaimedRect.bottom, newBounds.bottom);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window relative bottom failed\", getFailedChecks(checks));\n\t\t\t\t}\n\t\t\t],\n\t\t\t\tresolve);\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\t/**\n\t * tests position: unclaimed. top:0 should be below the toolbar. monitorBounds come back as 'monitor.unclaimedRect'\n\t *  @param {*} monitor\n\t */\n\tasync showUnclaimed(monitor) {\n\t\tlet self = this;\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tasyncSeries([\n\t\t\t\tasync function top(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"showUnclaimed top\");\n\t\t\t\t\tlet { initialBounds, newBounds, monitorBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tleft: \"center\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tposition: \"unclaimed\"\n\t\t\t\t\t});\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tmonitorBounds.top === newBounds.top,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"showUnclaimed top Success\", monitor.position, monitor.unclaimedRect.top, newBounds.top);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window unclaimed top failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function left(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"showUnclaimed left\");\n\t\t\t\t\tlet { initialBounds, newBounds, monitorBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tposition: \"unclaimed\"\n\t\t\t\t\t});\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tmonitorBounds.left === newBounds.left,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"showUnclaimed left Success\", monitor.position, monitor.unclaimedRect.left, newBounds.left);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window unclaimed left failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function right(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"showUnclaimed right\");\n\t\t\t\t\tlet { initialBounds, newBounds, monitorBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\tposition: \"unclaimed\",\n\t\t\t\t\t\ttop: 50\n\t\t\t\t\t});\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tmonitorBounds.right === newBounds.right,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tconsole.info(self.componentType, \"showUnclaimed right callback\", monitor.position, monitor.unclaimedRect.right, newBounds.right);\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"showUnclaimed right Success\", monitor.position, monitor.unclaimedRect.right, newBounds.right);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window unclaimed right failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function bottom(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"showUnclaimed bottom\");\n\t\t\t\t\tlet { initialBounds, newBounds, monitorBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tposition: \"unclaimed\"\n\t\t\t\t\t});\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tmonitorBounds.bottom === newBounds.bottom,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tconsole.info(self.componentType, \"showUnclaimed bottom callback\", monitor.position, monitorBounds.bottom, newBounds.bottom);\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"showUnclaimed bottom Success\", monitor.position, monitor.unclaimedRect.bottom, newBounds.bottom);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window unclaimed bottom failed\", getFailedChecks(checks));\n\t\t\t\t}\n\t\t\t],\n\t\t\t\tresolve);\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\t/**\n\t * Tests position: \"monitor\", which should place windows without caring about claimed space.\n\t * @param {} monitor\n\t */\n\tasync showAbsoluteMonitor(monitor) {\n\t\tlet self = this;\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tasyncSeries([\n\t\t\t\tasync function top(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"showMonitor top\");\n\t\t\t\t\tlet { initialBounds, newBounds, monitorBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tleft: \"center\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tposition: \"monitor\"\n\t\t\t\t\t});\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tmonitorBounds.top === newBounds.top,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tconsole.info(self.componentType, \"showMonitor top callback\", monitor.position, monitorBounds.top, newBounds);\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"showAbsoluteMonitor top Success\", monitor.position, monitor.unclaimedRect.top, newBounds.top);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window absolute top failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function left(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"showMonitor left\");\n\t\t\t\t\tlet { initialBounds, newBounds, monitorBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tposition: \"monitor\"\n\t\t\t\t\t});\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tmonitorBounds.left === newBounds.left,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tconsole.info(self.componentType, \"showMonitor left callback\", monitor.position, monitorBounds.left, newBounds);\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"showMonitor left Success\", monitor.position, monitor.unclaimedRect.left, newBounds.left);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window monitor left failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function right(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"showMonitor right\");\n\t\t\t\t\tlet { initialBounds, newBounds, monitorBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tposition: \"monitor\"\n\t\t\t\t\t});\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tmonitorBounds.right === newBounds.right,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tconsole.info(self.componentType, \"showMonitor right callback\", monitor.position, monitorBounds.right, newBounds);\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"showMonitor right Success\", monitor.position, monitor.unclaimedRect.right, newBounds.right);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window monitor right failed\", getFailedChecks(checks));\n\t\t\t\t},\n\t\t\t\tasync function bottom(done) {\n\t\t\t\t\tconsole.info(self.componentType, \"showMonitor bottom\");\n\t\t\t\t\tlet { initialBounds, newBounds, monitorBounds } = await self._showWindow({\n\t\t\t\t\t\tmonitor: monitor.position,\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tposition: \"monitor\"\n\t\t\t\t\t});\n\t\t\t\t\tconst checks = [\n\t\t\t\t\t\tmonitorBounds.bottom === newBounds.bottom,\n\t\t\t\t\t\tinitialBounds.width === newBounds.width,\n\t\t\t\t\t\tinitialBounds.height === newBounds.height\n\t\t\t\t\t];\n\t\t\t\t\tconsole.info(self.componentType, \"showMonitor bottom callback\", monitor.position, monitorBounds.bottom, newBounds);\n\t\t\t\t\tif (allChecksPass(checks)) {\n\t\t\t\t\t\tconsole.info(self.componentType, \"showMonitor bottom Success\", monitor.position, monitor.unclaimedRect.bottom, newBounds.bottom);\n\t\t\t\t\t\treturn done();\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error(\"Show window monitor bottom failed\", getFailedChecks(checks));\n\t\t\t\t}\n\t\t\t],\n\t\t\t\tresolve);\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t//todo\n\tspawn() {\n\t\t//spawn specific\n\t\t// this.claimMonitorSpace();\n\t\t// this.dockOnSpawn();\n\t\t// this.addToWorkspace();\n\t\t// this.changeName();\n\t\t// this.spawnData();\n\t\t// this.options();\n\t}\n\n\tasync doTests() {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tawait this.testShowWindow();\n\t\t\tresolve();\n\t\t});\n\t}\n};\n\nwindow.Tester = {\n\trun: async () => {\n\t\tlet OF = new TestLauncher(\"Welcome Component\");\n\t\tawait OF.doTests();\n\n\t\tlet Native = new TestLauncher(\"Notepad\");\n\t\tawait Native.doTests();\n\n\t}\n};\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Launcher/_test.js","import { each as asyncEach, forEach as asyncForEach } from \"async\";\nimport Logger from \"../../../clients/logger\";\nimport { BaseWindow } from \"../../../services/window/WindowAbstractions/BaseWindow\";\nimport { WindowGroup } from \"../../../common/window/windowGroup\";\n\nconst groupStates = {\n\tNORMAL: 0,\n\tMINIMIZING: 1,\n\tMINIMIZED: 2,\n\tRESTORING: 3\n};\n\n\n// NOTE: this file provides a temporary solution for window groups that must operate off private wrappers (as opposed to public).\n// Otherwise, the code is the same as in WindowGroup.  TBD is to reevaluate WindowGroup and it's usage.\n\nexport class LauncherGroup extends WindowGroup {\n\tconstructor(params) {\n\t\tsuper(params, { Logger });\n\t\tthis.name = params.name;\n\t\tthis.groupState = groupStates.NORMAL;\n\t\tthis.GROUPSTATES = groupStates;\n\t\tthis.isAlwaysOnTop = false;\n\t\tif (params.windows) {\n\t\t\tthis.windows = params.windows;\n\t\t} else {\n\t\t\tthis.windows = {};\n\t\t}\n\t}\n\n\tminimizeAll() {\n\t\tif (this.groupState == groupStates.RESTORING) {\n\t\t\tthis.interruptRestore = true;\n\t\t\tthis.groupState = groupStates.NORMAL;\n\t\t}\n\t\tif (this.groupState !== groupStates.NORMAL) return;\n\t\tthis.groupState = groupStates.MINIMIZING;\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet win = this.windows[windowName];\n\t\t\tif (win.windowState != BaseWindow.WINDOWSTATE.MINIMIZED) win._minimize();\n\t\t}\n\t\tthis.groupState = groupStates.MINIMIZED;\n\t\tthis.interruptRestore = false;\n\t}\n\n\tminimize(params) {\n\t\tif (!params) { return this.minimizeAll(); }\n\t\tlet { windowList, componentType } = params;\n\t\tif (componentType) windowList = this.findAllByComponentType(componentType);\n\n\t\tif (windowList) {\n\t\t\tfor (let w of windowList) {\n\t\t\t\tlet win;\n\t\t\t\tif (!(typeof w === \"string\" || w instanceof String)) {\n\t\t\t\t\twin = this.getWindow(w.windowName || w.name);\n\t\t\t\t} else {\n\t\t\t\t\twin = this.getWindow(w);\n\t\t\t\t}\n\t\t\t\tif (win && win.windowState != BaseWindow.WINDOWSTATE.MINIMIZED) {\n\t\t\t\t\twin._minimize();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\trestoreAll(cb = Function.prototype) {\n\t\tif (this.groupState !== groupStates.MINIMIZED) return cb();\n\t\tvar self = this;\n\t\tthis.groupState = groupStates.RESTORING;\n\t\tfunction restoreWindow(windowName, done) {\n\t\t\tif (self.interruptRestore) return done(\"restore interrupted\");\n\t\t\tlet win = self.windows[windowName];\n\t\t\tif (win._restore) {\n\t\t\t\tif (win.windowState != BaseWindow.WINDOWSTATE.NORMAL) self.windows[windowName]._restore({}, done);\n\t\t\t\telse done();\n\t\t\t} else {\n\t\t\t\tLogger.system.error(windowName + \" does not implement restore\");\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\t\tasyncForEach(Object.keys(this.windows), restoreWindow, function (err, data) {\n\t\t\tself.interruptRestore = false;\n\t\t\tif (!err) {\n\t\t\t\tself.groupState = groupStates.NORMAL;\n\t\t\t}\n\t\t\tcb(err, data);\n\t\t});\n\t}\n\t//takes an array of window names.\n\trestore(params, cb) {\n\t\tlet { windowList } = params;\n\t\tvar self = this;\n\t\tfunction restoreWindow(windowName, done) {\n\t\t\tlet win = self.windows[windowName];\n\t\t\tif (win._restore) {\n\t\t\t\tself.windows[windowName]._restore({}, done);\n\t\t\t} else {\n\t\t\t\tLogger.system.error(windowName + \" does not implement restore\");\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\t\tasyncForEach(windowList, restoreWindow, cb);\n\t}\n\n\t// Bring all windows to top. Also sets the state of the group to always on top and new windows added to the group inherit the state of thw window\n\tallAlwaysOnTop(alwaysOnTop) {\n\t\tthis.isAlwaysOnTop = alwaysOnTop;\n\t\tthis.alwaysOnTop({ windowList: Object.keys(this.windows), restoreWindows: true, alwaysOnTop: alwaysOnTop });\n\t}\n\n\t// Set specific windows to top. Generally should call allAlwaysOnTop\n\talwaysOnTop(params) {\n\t\tif (!params || (params && Object.keys(params).length === 0)) {\n\t\t\tparams = { windowList: Object.keys(this.windows), restoreWindows: true };\n\t\t}\n\t\tlet { windowList, componentType } = params;\n\t\tif (windowList && typeof windowList[0] !== \"string\") {\n\t\t\twindowList = windowList.map(win => win.windowName);\n\t\t}\n\t\tif (componentType) windowList = this.findAllByComponentType(componentType);\n\t\tvar self = this;\n\t\tif (!windowList) windowList = Object.keys(this.windows);\n\t\tfor (let w in windowList) {\n\t\t\tlet win;\n\t\t\tif (Array.isArray(windowList)) w = windowList[w];\n\n\t\t\tif (!(typeof w === \"string\" || w instanceof String)) {\n\t\t\t\twin = self.getWindow(w.windowName || w.name);\n\t\t\t} else {\n\t\t\t\twin = self.getWindow(w);\n\t\t\t}\n\t\t\tif (win) {\n\t\t\t\twin.alwaysOnTop(params.alwaysOnTop);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Brings a group of windows to the front (BTF). In other words, puts those windows on top of any other windows so that they can be seen\n\t * @param {object} params\n\t * @param {bool=true} params.restoreWindows If true then windows will attempt to be restored (un-minimized) before being brought to front\n\t * @param {array} params.windowList The list of windows to BTF. Defaults to the windows that are in this window group. This can be a list of window names, or a list of actual window instances.\n\t * @param {string} params.componentType Optionally provide a componentType to BTF only those windows of that type in the list of windows.\n\t */\n\tbringToFront(params, cb = Function.prototype) {\n\t\tvar self = this;\n\t\tif (!params) params = {};\n\t\tif (typeof (params.restoreWindows) == \"undefined\") params.restoreWindows = true;\n\n\t\t// TODO, [terry] this \"windowList\" logic is copy and pasted many times in windowGroup.js. It should be in a helper function.\n\t\tlet { windowList, componentType } = params;\n\t\t// Determine if the windowList is a list of window names, or a list of actual windows (in which case we extract the name)\n\t\tif (windowList && typeof windowList[0] !== \"string\") {\n\t\t\twindowList = windowList.map(win => win.windowName);\n\t\t}\n\n\t\t// Get all windows *in this group* of this component type, then convert them into an array of strings to be passed into the other group functions.\n\t\tif (componentType) {\n\t\t\twindowList = [];\n\t\t\tlet windows = this.findAllByComponentType(componentType);\n\t\t\twindows.forEach(win => {\n\t\t\t\tif (win && win.name) {\n\t\t\t\t\twindowList.push(win.name);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Default to the windows in this group, actually the most common case\n\t\tif (!windowList) windowList = Object.keys(this.windows);\n\n\t\tfunction doBTF() {\n\t\t\t// TODO, [terry] this chunk of code is repeated three times in windowGroup.js. It should be abstracted away\n\t\t\t// TODO, [sidd] this code now uses async, previously was not using using the callback properly. Make all group functions do this\n\n\t\t\tasyncEach(windowList, (w, callback) => {\n\t\t\t\tlet win;\n\t\t\t\t//if (Array.isArray(windowList)) w = windowList[w];\n\n\t\t\t\tif (!(typeof w === \"string\" || w instanceof String)) {\n\t\t\t\t\twin = self.getWindow(w.windowName || w.name);\n\t\t\t\t} else {\n\t\t\t\t\twin = self.getWindow(w);\n\t\t\t\t}\n\t\t\t\tif (win) {\n\t\t\t\t\twin._bringToFront(callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}, () => { cb(); });\n\t\t}\n\n\t\tif (params.restoreWindows) {\n\t\t\tif (typeof windowList[0] !== \"string\") {\n\t\t\t\twindowList = Object.keys(windowList);\n\t\t\t}\n\t\t\tthis.restore({ windowList }, doBTF);\n\t\t} else {\n\t\t\tdoBTF();\n\t\t}\n\n\n\t}\n\n\thyperFocus(params) {\n\t\tlet windowList = params.windowList;\n\t\t// If we got a list of identifiers, convert to names\n\t\tfor (let w in windowList) {\n\t\t\tlet win = windowList[w];\n\t\t\tif (!(typeof win === \"string\" || win instanceof String)) {\n\t\t\t\twindowList[w] = win.windowName || win.name;\n\t\t\t}\n\t\t}\n\n\t\t// If we are trying to hyperfocus a stack make sure to also include the children\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet win = this.getWindow(windowName);\n\t\t\tlet parent = win.getParent();\n\t\t\t// If window is in a stack and the stack is in the windowList but this window is not, add it.\n\t\t\tif (parent && windowList.includes(parent.name) && !windowList.includes(windowName)) {\n\t\t\t\twindowList.push(windowName);\n\t\t\t}\n\t\t}\n\n\t\tfor (let windowName in this.windows) {\n\t\t\tif (!windowList.includes(windowName)) {\n\t\t\t\tthis.windows[windowName]._minimize();\n\t\t\t} else {\n\t\t\t\tthis.windows[windowName]._restore(() => {\n\t\t\t\t\tthis.windows[windowName]._bringToFront();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tfindAllByComponentType(componentType) {\n\t\tvar windowList = [];\n\t\tfor (let windowName in this.windows) {\n\t\t\tlet thisWindowComponentType = this.windows[windowName].componentType;\n\t\t\tif (componentType === thisWindowComponentType) { //TODO - figure out why this is different in some cases\n\t\t\t\twindowList.push(this.windows[windowName]);\n\t\t\t}\n\t\t}\n\t\treturn windowList;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Launcher/launcherGroup.js","import async from \"async\";\nimport { BaseWindow } from \"../WindowAbstractions/BaseWindow\";\nimport LauncherClient from \"../../../clients/launcherClient\";\nLauncherClient.initialize();\nimport Logger from \"../../../clients/logger\";\nimport workspaceClient from \"../../../clients/workspaceClient\";\nimport { WindowStorageManager } from \"../../../common/windowStorageManager\";\nimport { isStackedWindow } from \"../../../common/disentangledUtils\";\n\nLogger.start();\nclass AutoArrange {\n\tconstructor(params) {\n\t\tthis.isArranged = {};\n\t\tthis.DockingCalculator = params.DockingCalculator;\n\t}\n\n\t/**\n\t *\n\t * For more, see {@link https://medium.com/@jtreitz/the-algorithm-for-a-perfectly-balanced-photo-gallery-914c94a5d8af#.c09v4fn1e}. This is a javascript port of a python solution to the linear partition problem.\n\t * @param {Array} aspectRatios An array of numbers; in this case, aspect ratios.\n\t * @param {Number} rows Number of rows to distribute aspectRatios across.\n\t * @returns {Array} ans Returns an array of arrays. Each internal array represents a row.\n\t * @private\n\t */\n\tlinearPartition(aspectRatios, rows) {\n\t\tvar numWindows = aspectRatios.length;\n\n\t\tif (rows <= 0) {\n\t\t\treturn [];\n\t\t}\n\t\tif (rows > numWindows) {\n\t\t\treturn aspectRatios.map(function (x) { return [x]; });\n\t\t}\n\n\t\tvar table = [];\n\t\tvar solution = [];\n\n\t\tfor (var i = 0; i < numWindows; i++) {\n\t\t\tvar row = [];\n\t\t\tfor (var j = 0; j < rows; j++) {\n\t\t\t\trow.push(0);\n\t\t\t}\n\t\t\ttable.push(row);\n\t\t}\n\n\t\tfor (var i = 0; i < numWindows - 1; i++) {\n\t\t\tvar row = [];\n\t\t\tfor (var j = 0; j < rows - 1; j++) {\n\t\t\t\trow.push(0);\n\t\t\t}\n\t\t\tsolution.push(row);\n\t\t}\n\t\tfor (var i = 0; i < numWindows; i++) {\n\t\t\tif (i != 0) {\n\t\t\t\ttable[i][0] = aspectRatios[i].ar + table[i - 1][0];\n\t\t\t} else {\n\t\t\t\ttable[i][0] = aspectRatios[i].ar;\n\t\t\t}\n\t\t}\n\n\t\tfor (var j = 0; j < rows; j++) {\n\t\t\ttable[0][j] = aspectRatios[0].ar;\n\t\t}\n\n\t\tfor (var i = 1; i < numWindows; i++) {\n\t\t\tfor (var j = 1; j < rows; j++) {\n\t\t\t\tvar m = [];\n\t\t\t\tfor (var x = 0; x < i; x++) {\n\t\t\t\t\tvar list_of_pairs = [];\n\t\t\t\t\tvar list_of_maxes = [];\n\t\t\t\t\tfor (var x = 0; x < i; x++) {\n\t\t\t\t\t\tvar max = Math.max(table[x][j - 1], table[i][0] - table[x][0]);\n\t\t\t\t\t\tlist_of_pairs.push([max, x]);\n\t\t\t\t\t\tlist_of_maxes.push(max);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tm = list_of_pairs.reduce(function (previous, current) {\n\t\t\t\t\treturn current[0] < previous[0] ? current : previous;\n\t\t\t\t}, [Infinity]);\n\t\t\t\ttable[i][j] = m[0];\n\t\t\t\tsolution[i - 1][j - 1] = m[1];\n\t\t\t}\n\t\t}\n\n\t\tnumWindows = numWindows - 1;\n\t\trows = rows - 2;\n\t\tvar ans = [];\n\t\twhile (rows >= 0) {\n\t\t\tvar sub_list = [];\n\t\t\tfor (var i = solution[numWindows - 1][rows] + 1; i < numWindows + 1; i++) {\n\t\t\t\tsub_list.push(aspectRatios[i]);\n\t\t\t}\n\t\t\tans = [sub_list].concat(ans);\n\t\t\tnumWindows = solution[numWindows - 1][rows];\n\t\t\trows--;\n\t\t}\n\n\t\tvar beginning_list = [];\n\t\tfor (var i = 0; i < numWindows + 1; i++) {\n\t\t\tbeginning_list.push(aspectRatios[i]);\n\t\t}\n\t\tans = [beginning_list].concat(ans);\n\n\t\treturn ans;\n\t}\n\n\t/**\n\t * @private\n\t * @param {LauncherClient~windowDescriptor} windowDescriptor\n\t * @param {monitorDimensions} monitorDimensions\n\t * @returns {boolean} Whether window is on the current monitor.\n\t */\n\twindowOnMonitor(windowDescriptor, monitorDimensions) {\n\t\t//if right or left edge is within the window's bounds.\n\t\treturn windowDescriptor.monitor.name === monitorDimensions.name;\n\t}\n\n\tgetWindowsOnMonitor(windowDescriptorList, monitorDimensions) {\n\t\tlet self = this;\n\t\tlet descriptors = windowDescriptorList.filter((obj, ind) => {\n\t\t\tif (!obj) { // this should not be needed but temporary fix for cleanup\n\t\t\t\tLogger.system.warn(\"autoarrange.getWindowsOnMonitor: unexpected null object\");\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t//2nd param says to not throw the error if the window isn't found.\n\t\t\tlet win = self.DockingCalculator.getWindow(obj.name, false);\n\t\t\tif (!win) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (obj.windowType === \"OpenFinWindow\") {\n\t\t\t\ttry {\n\t\t\t\t\tlet isArrangeable = obj.customData.foreign.services.dockingService.isArrangeable;\n\t\t\t\t\tif (typeof obj.customData.foreign.services.dockingService.isArrangable !== \"undefined\") {\n\t\t\t\t\t\tLogger.system.warn(\"isArrangable was a typo. It will be deprecated in Finsemble 2.0 in favor of isArrangeable\");\n\t\t\t\t\t\tisArrangeable = obj.customData.foreign.services.dockingService.isArrangable;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isArrangeable) {\n\t\t\t\t\t\treturn self.windowOnMonitor(win, monitorDimensions);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn self.windowOnMonitor(win, monitorDimensions);\n\t\t});\n\n\t\tlet windowsOnMonitor = [];\n\t\tfor (let i = 0; i < descriptors.length; i++) {\n\t\t\tlet descriptor = descriptors[i];\n\t\t\tlet win = self.DockingCalculator.getWindow(descriptor.name);\n\t\t\twin.monitor = self.DockingCalculator.getMonitorForWindow(win);\n\t\t\tif (!self.DockingCalculator.cachedPositions[win.monitor.name][win.name]) {\n\t\t\t\tself.DockingCalculator.cachedPositions[win.monitor.name][win.name] = {\n\t\t\t\t\tuuid: win.uuid,\n\t\t\t\t\tleft: win.left,\n\t\t\t\t\tright: win.right,\n\t\t\t\t\tbottom: win.bottom,\n\t\t\t\t\ttop: win.top,\n\t\t\t\t\theight: win.height,\n\t\t\t\t\twidth: win.width\n\t\t\t\t};\n\t\t\t}\n\n\t\t\twindowsOnMonitor.push({\n\t\t\t\tname: win.name,\n\t\t\t\tar: win.width / win.height,\n\t\t\t\ttop: parseInt(win.top),\n\t\t\t\tbottom: parseInt(win.bottom),\n\t\t\t\tleft: parseInt(win.left),\n\t\t\t\tright: parseInt(win.right)\n\t\t\t});\n\t\t}\n\n\t\t// before arranging, sort window list based on location to influence final arrangement;\n\t\t// note the comparison function is not transitive, so results aren't always what expected;\n\t\t// however, they are usually intuitive when moving a single window.\n\t\twindowsOnMonitor.sort(function (a, b) {\n\t\t\tvar result;\n\t\t\tif ((a.top === b.top) && (a.left === b.left)) {\n\t\t\t\tresult = 0; // a == b\n\t\t\t} else if ((a.top < b.top) && (a.left < b.left)) {\n\t\t\t\tresult = -1; // a < b\n\t\t\t} else if ((a.top < b.bottom) && (a.left < b.left)) {\n\t\t\t\tresult = -1; // a < b\n\t\t\t} else {\n\t\t\t\tresult = 1; // a > b\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t\twindowsOnMonitor.forEach(function (finWin, windex) {\n\t\t\tlet wrap = self.DockingCalculator.getWindow(finWin.name);\n\t\t\t// only restore minimized windows\n\t\t\tif (wrap.win.windowState === BaseWindow.WINDOWSTATE.MINIMIZED) {\n\t\t\t\twrap.restore();\n\t\t\t\twrap.bringToFront();\n\t\t\t}\n\n\t\t});\n\t\treturn windowsOnMonitor;\n\t}\n\n\t/**\n\t * Arranges all windows in the current workspace that are visible on the current monitor. For more about the algorithm used to distribute windows across rows, see {@link https://medium.com/@jtreitz/the-algorithm-for-a-perfectly-balanced-photo-gallery-914c94a5d8af#.c09v4fn1e this post}. The algorithm chooses the number of rows by taking the square root of the number of windows on the monitor and rounding down. 3 windows results in 1 row. 4 windows results in 2 rows. 8 windows will be arranged across 2 rows. 9 windows will be arranged across 3 rows. Other breakpoints are 16, 25, and 36.\n\t * @param {Object} monitorDimensions Monitor dimensions of a given monitor. This value is passed\n\t * in from {@link util#getMonitorInfo}.\n\t */\n\tasync arrange(monitorDimensions, allMonitors, cb) {\n\t\tlet self = this;\n\t\tif (self.isArranged[monitorDimensions.name]) {\n\t\t\t/*\n\t\t\t\t11/7/19 JC - Previously this was toggling the status (!<currentStatus>). If we're reverting,\n\t\t\t\tthe status will always be false, if we're not reverting (below) then the status will be true.\n\t\t\t\tToggling leads to potential for internal state mismatch\n\t\t\t*/\n\t\t\tself.isArranged[monitorDimensions.name] = false;\n\t\t\t//Reverts windows and sends statusUpdate.\n\t\t\tself.revertArrangedWindows(monitorDimensions);\n\t\t\tself.DockingCalculator.sendAutoArrangeStatusUpdate();\n\t\t\treturn;\n\t\t}\n\n\t\tself.isArranged[monitorDimensions.name] = true;\n\t\tself.DockingCalculator.sendAutoArrangeStatusUpdate();\n\t\tvar resizeQueue = [];\n\n\t\t//Window list used to come from Launcher's activeWindow list.\n\t\t//The workspace should be the one reporting the windows in a workspace\n\t\t//that need to be auto arranged.\n\n\t\t//Workspace returns a list of windows, including StackedWindows.\n\t\t//This will have duplicates as each window in stack will also appear as\n\t\t//an individual window in the list\n\t\tconst windowNamesFromActiveWorkspace = (await workspaceClient.getActiveWorkspace()).data.windows;\n\t\tconst windowsFromActiveWorkspace = await WindowStorageManager.getManyStates(\"windowData\", windowNamesFromActiveWorkspace);\n\n\t\t//Keep track of a list of windows which are children to another window\n\t\tlet childrenWindows = [];\n\n\t\t//Start by getting all windows which are StackedWindow(s). While doing so, compile\n\t\t//a list of windows which are children to stacked windows\n\t\tconst windowsFromActiveWorkspaceFiltered = Object.values(windowsFromActiveWorkspace).filter(win => {\n\t\t\tif (isStackedWindow(win)) {\n\t\t\t\tconst currentWindowsChildren = win.childWindowIdentifiers.map(childWindowIdent => {\n\t\t\t\t\treturn childWindowIdent.name;\n\t\t\t\t});\n\t\t\t\tchildrenWindows = childrenWindows.concat(currentWindowsChildren);\n\t\t\t\treturn win;\n\t\t\t}\n\t\t});\n\n\t\t//Loop through the windows again, add any windows which are not StackedWindows\n\t\t//or children of another window\n\t\tObject.values(windowsFromActiveWorkspace).map(win => {\n\t\t\tif (!isStackedWindow(win) && !childrenWindows.includes(win.name)) {\n\t\t\t\twindowsFromActiveWorkspaceFiltered.push(win);\n\t\t\t}\n\t\t});\n\n\t\t//get groups of windows\n\t\tlet groupsFromWorkspace = self.DockingCalculator.getGroups();\n\t\t//get individual windows\n\t\tlet windowsOnMonitor = self.getWindowsOnMonitor(windowsFromActiveWorkspaceFiltered, monitorDimensions);\n\n\t\t//A concatenation of windows and groups built into singular objects\n\t\t//so they can be treated as 'boxes to rearrange' wrather than individual windows\n\t\tlet boxesToArrange = [];\n\n\t\t//This is an array of 'windows' that are actually a group of windows.\n\t\t//Built into a single object that looks like a 'window' by the arrangement code\n\t\tlet groupBoxes = [];\n\t\t//Map through each individual window to determine if it is part of a group\n\t\twindowsOnMonitor.map((win) => {\n\t\t\t//Uses lodash to search through the workspaces to see if this win\n\t\t\t//is contained in the group's 'windows' array\n\t\t\tlet currentWindowsGroupBoxName = _.findKey(groupsFromWorkspace, (thisGroup) => {\n\t\t\t\tif (!thisGroup.isMovable) return false;\n\t\t\t\treturn _.findKey(thisGroup.windows, (windowInsideGroup) => {\n\t\t\t\t\treturn windowInsideGroup.name === win.name;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t//See if a 'win' has already been built for this group. Retrieve it if so, otherwise\n\t\t\t//one will be created.\n\t\t\tlet groupBox = groupBoxes.length > 0 ? groupBoxes.find((thisGroupBox) => {\n\t\t\t\treturn thisGroupBox.name === currentWindowsGroupBoxName;\n\t\t\t}) : null;\n\n\t\t\tif (!currentWindowsGroupBoxName) {\n\t\t\t\t//There is no group that this win belongs to, add it to the final array\n\t\t\t\tboxesToArrange.push(win);\n\t\t\t} else {\n\t\t\t\tif (groupBox) {\n\t\t\t\t\t//There is already a 'win' for this group in windowsGroups, we need to\n\t\t\t\t\t//average the win aspect ratios. This may have to change\n\t\t\t\t\tlet groupIndex = groupBoxes.length > 0 ? groupBoxes.findIndex((thisGroupBox) => {\n\t\t\t\t\t\treturn thisGroupBox.name === groupsFromWorkspace[currentWindowsGroupBoxName].ar;\n\t\t\t\t\t}) : null;\n\t\t\t\t\tgroupBox.ar = groupsFromWorkspace[currentWindowsGroupBoxName].width / groupsFromWorkspace[currentWindowsGroupBoxName].height;\n\t\t\t\t\t//Add the new win to the groups windows array\n\t\t\t\t\tgroupBox.windows.push(win);\n\t\t\t\t\tif (groupIndex) {\n\t\t\t\t\t\tgroupBoxes.splice(groupIndex, 1);\n\t\t\t\t\t\tgroupBoxes.push(groupBox);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//There is no 'win' for this group. Creating one\n\t\t\t\t\tlet newGroupBox = {\n\t\t\t\t\t\tar: win.ar,\n\t\t\t\t\t\tbottom: groupsFromWorkspace[currentWindowsGroupBoxName].bottom,\n\t\t\t\t\t\tleft: groupsFromWorkspace[currentWindowsGroupBoxName].left,\n\t\t\t\t\t\tname: groupsFromWorkspace[currentWindowsGroupBoxName].name,\n\t\t\t\t\t\tright: groupsFromWorkspace[currentWindowsGroupBoxName].right,\n\t\t\t\t\t\ttop: groupsFromWorkspace[currentWindowsGroupBoxName].top,\n\t\t\t\t\t\twindows: [win],\n\t\t\t\t\t\tisGroup: true\n\t\t\t\t\t};\n\t\t\t\t\tgroupBoxes.push(newGroupBox);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t//Add the array of groupWindows to the array already containing loner windows\n\t\tboxesToArrange = boxesToArrange.concat(groupBoxes);\n\n\t\t// if we only have a single box to arrange, just send it a restore / maximize event\n\t\tif (boxesToArrange.length === 1) {\n\t\t\tconst win = self.DockingCalculator.getWindow(boxesToArrange[0].name);\n\t\t\t// let native windows autoarrange using the default code path using setBounds.\n\t\t\t// calling _maximize on a native window and then following up with a click of maximize\n\t\t\t// button results in the notepad maximizing fully over the toolbar.\n\t\t\tconst isNotNativeWindow = (win && win.win.windowType !== \"NativeWindow\");\n\t\t\tif (isNotNativeWindow) {\n\t\t\t\t// @early exit\n\t\t\t\t// if window is maximized, restore, otherwise, maximize\n\t\t\t\tif (win.win.getIsMaximized()) {\n\t\t\t\t\twin.win._restore();\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\t\t\t\twin.win._maximize();\n\t\t\t\treturn cb();\n\t\t\t}\n\t\t}\n\n\t\t//Number of rows is determined by the square root of the number of windows on the monitor.\n\t\t//This gives us a preference for N x N grids. If you have 9 windows, you get 3 rows.\n\t\t//If the aspect ratios are set correctly, you get 3x3.\n\t\tvar rowGroups = self.linearPartition(boxesToArrange, Math.floor(Math.sqrt(boxesToArrange.length)));\n\t\tvar height = Math.floor((monitorDimensions.height / rowGroups.length));\n\t\t//Iterates through the properly partitioned windows and queues up the movements.\n\t\trowGroups.forEach(function (windowsInGroup, groupIndex) {\n\t\t\tvar top = Math.round(monitorDimensions.top + (groupIndex * height));\n\t\t\tvar width = Math.round(monitorDimensions.width / windowsInGroup.length);\n\t\t\t//if we're on the last row and the number of rows is not divisible by the monitor's height,\n\t\t\t//we need to add the rounding error to the height so that there isn't a gap\n\t\t\t//between the taskbar and the bottom edge of our last row.\n\t\t\tvar rowHeightTotal = height * rowGroups.length;\n\t\t\tif (groupIndex === rowGroups.length - 1 &&\n\t\t\t\trowHeightTotal !== monitorDimensions.height) {\n\t\t\t\t//since we round down the initial height calculation, rowHeightTotal\n\t\t\t\t//will always be less than the monitor's height.\n\t\t\t\theight += monitorDimensions.height - rowHeightTotal;\n\t\t\t}\n\t\t\t//Now that the position is set, queue up the movement.\n\t\t\twindowsInGroup.forEach(function (dockableWin, windex) {\n\t\t\t\t//The 'windows' that are being looped through are are sometimes individual windows\n\t\t\t\t//and other times they are a group of windows. If its a group, we need to loop\n\t\t\t\t//through the group and add each window in the group. Fitting it into the space allotted for a single window\n\t\t\t\tif (dockableWin.isGroup) {\n\t\t\t\t\t//in this case dockableWin is actually a dockableGroup\n\t\t\t\t\tlet left = (width * windex) + monitorDimensions.left;\n\t\t\t\t\tlet group = self.DockingCalculator.getGroup(dockableWin.name);\n\t\t\t\t\tlet bounds = {\n\t\t\t\t\t\ttop,\n\t\t\t\t\t\tleft,\n\t\t\t\t\t\theight,\n\t\t\t\t\t\twidth\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t//TriggeredByAutoArrange will prevent the dockingService from deleting the windows\n\t\t\t\t\t//cahcedPositions. We want to maintain these so that when we revert, grouped windows\n\t\t\t\t\t//return to where they expect\n\t\t\t\t\tgroup.moveTo({\n\t\t\t\t\t\ttop: top,\n\t\t\t\t\t\tleft: left,\n\t\t\t\t\t\theight: height,\n\t\t\t\t\t\ttriggeredByAutoArrange: true\n\t\t\t\t\t}, () => {\n\t\t\t\t\t\tbounds.triggeredByAutoArrange = true;\n\t\t\t\t\t\t//We scale the group to the entire monitor. The 'anchor' here is basically \"from what side did it get resized?\".\n\t\t\t\t\t\t//Imagine the user grabbing the bottom right of the group and stretching it to fill the entire monitor. That's essentially what we're doing here.\n\t\t\t\t\t\tgroup.scale(bounds, \"bottomRight\", self.DockingCalculator, () => {\n\t\t\t\t\t\t\tgroup.stopMove();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresizeQueue.push({\n\t\t\t\t\t\tdockableWin: self.DockingCalculator.getWindow(dockableWin.name),\n\t\t\t\t\t\theight: height,\n\t\t\t\t\t\twidth: width,\n\t\t\t\t\t\ttop: top,\n\t\t\t\t\t\tleft: (width * windex) + monitorDimensions.left\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\t//animate each window. when they're all done, call the callback, form snapping relationships, and leave this function.\n\t\t\tif (resizeQueue && resizeQueue.length) {\n\t\t\t\tasync.each(resizeQueue, animateWindow, function () {\n\t\t\t\t\tself.DockingCalculator.formGroup(resizeQueue[0].dockableWin.name, { isMovable: false });\n\t\t\t\t\tself.isArranged[monitorDimensions.name] = true;\n\t\t\t\t\tif (cb) {\n\t\t\t\t\t\tcb();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (cb) cb();\n\t\t\t}\n\t\t});\n\n\t\tfunction animateWindow(request, done) {\n\t\t\tlet { height, width, top, left, dockableWin } = request;\n\t\t\tlet bounds = {\n\t\t\t\theight: height,\n\t\t\t\twidth: width,\n\t\t\t\ttop: top,\n\t\t\t\tleft: left\n\t\t\t};\n\t\t\tdockableWin.animatePositionAndHeight(bounds, function () {\n\t\t\t\tself.DockingCalculator.buildSnapRelationships(dockableWin);\n\t\t\t\tdockableWin.win.stopMove();\n\t\t\t\tRouterClient.transmit(\"DockingService.\" + dockableWin.name, {\n\t\t\t\t\tcommand: \"saveWindowLocation\",\n\t\t\t\t\tbounds: bounds\n\t\t\t\t});\n\t\t\t\tdone();\n\t\t\t});\n\t\t}\n\t}\n\n\n\t/**\n\t * Returns windows to where they were before an auto-arrange occurred.\n\t */\n\trevertArrangedWindows(monitorDimensions, cb = Function.prototype) {\n\t\tlet self = this;\n\t\tconst windowObjectsToRevert = self.DockingCalculator.cachedPositions[monitorDimensions.name];\n\t\tconst namesOfWindowsToRevert = Object.keys(windowObjectsToRevert);\n\n\t\t// if we only have a single window to revert, just use restore / maximize logic\n\t\tif (namesOfWindowsToRevert.length === 1) {\n\t\t\tconst win = self.DockingCalculator.getWindow(namesOfWindowsToRevert[0]);\n\t\t\t// let native windows autoarrange using the default code path using setBounds.\n\t\t\t// calling _maximize on a native window and then following up with a click of maximize\n\t\t\t// button results in the notepad maximizing fully over the toolbar.\n\t\t\tconst isNotNativeWindow = (win && win.win.windowType !== \"NativeWindow\");\n\t\t\tif (isNotNativeWindow) {\n\t\t\t\t// @early exit\n\t\t\t\tif (win.win.getIsMaximized()) {\n\t\t\t\t\t// if we are maximized, restore to maintain a predictable user experience.\n\t\t\t\t\t// this is an inversion of the typical auto arrange / revert logic to maintain UX.\n\t\t\t\t\t// without this, a user can maximize, and click auto arrange twice, the second arrange\n\t\t\t\t\t// will have no effect. This prevents that possibility.\n\t\t\t\t\twin.win._restore();\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\t\t\t\twin.win._maximize();\n\t\t\t\treturn cb();\n\t\t\t}\n\t\t}\n\n\t\tasync.each(namesOfWindowsToRevert, revertWindow, onLocationReverted);\n\n\t\tfunction revertWindow(windowName, done) {\n\t\t\tconst bounds = windowObjectsToRevert[windowName];\n\t\t\tif (!bounds.uuid) {\n\t\t\t\treturn done();\n\t\t\t}\n\n\t\t\tconst dockableWindow = self.DockingCalculator.getWindow(windowName);\n\t\t\tdelete windowObjectsToRevert[windowName];\n\n\t\t\tdockableWindow.animatePositionAndHeight({\n\t\t\t\theight: bounds.height,\n\t\t\t\twidth: bounds.width,\n\t\t\t\ttop: bounds.top,\n\t\t\t\tleft: bounds.left,\n\t\t\t\tduration: 250\n\t\t\t}, function () {\n\t\t\t\tRouterClient.transmit(\"DockingService.\" + dockableWindow.name, {\n\t\t\t\t\tcommand: \"saveWindowLocation\",\n\t\t\t\t\tbounds: bounds\n\t\t\t\t});\n\t\t\t\tdone();\n\t\t\t});\n\t\t}\n\n\t\tfunction onLocationReverted() {\n\t\t\tnamesOfWindowsToRevert.map(windowName => {\n\t\t\t\tconst dockableWindow = self.DockingCalculator.getWindow(windowName);\n\t\t\t\tself.DockingCalculator.buildSnapRelationships(dockableWindow);\n\t\t\t\tself.DockingCalculator.checkGroupMembership(dockableWindow);\n\t\t\t\tdockableWindow.win.stopMove();\n\t\t\t});\n\n\t\t\tself.DockingCalculator.updateGroupData();\n\t\t\tLogger.system.debug(\"Publishing Group Update: Revert Autoarrange\");\n\t\t\tself.DockingCalculator.publishGroupUpdate();\n\t\t}\n\n\t\tself.DockingCalculator.sendAutoArrangeStatusUpdate();\n\t}\n}\n\nexport default AutoArrange;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/MultiWindowFeatures/autoArrange.js","import Logger from \"../../../clients/logger\";\n\nimport { WindowPrimitives as FinsembleWindowPrimitivesEntry } from \"./windowPrimitivesEntryPoints\";\nimport { WindowCreateEntry as FinsembleWindowCreateEntry } from \"./windowCreateEntryPoints\";\nimport { TabbingEntry as FinsembleTabbingEntry } from \"./tabbingEntryPoints\";\nimport { LauncherEntry as FinsembleLauncherEntry } from \"./launcherEntryPoints\";\nimport { series as asyncSeries } from \"async\";\n\nexport class ServiceEntryPoints {\n\tconstructor(manifest, dockingMain, launcher, stackedWindowManager) {\n\t\tthis.finsembleLauncherEntry = new FinsembleLauncherEntry(manifest, launcher);\n\t\tthis.finsembleWindowPrimitivesEntry = new FinsembleWindowPrimitivesEntry(dockingMain, launcher);\n\t\tthis.finsembleWindowCreateEntry = new FinsembleWindowCreateEntry(manifest, launcher);\n\t\tthis.finsembleTabbingEntry = new FinsembleTabbingEntry(stackedWindowManager);\n\t\tthis.bindFunctions();\n\t}\n\n\tbindFunctions() {\n\t\tthis.initialize = this.initialize.bind(this);\n\t\tthis.shutdown = this.shutdown.bind(this);\n\t}\n\n\tinitialize(done) {\n\t\tLogger.system.debug(\"ServiceEntryPoints.initialize start\");\n\t\tasyncSeries([\n\t\t\t(finish) => { this.finsembleLauncherEntry.initialize(finish); },\n\t\t\t(finish) => { this.finsembleWindowPrimitivesEntry.initialize(finish); },\n\t\t\t(finish) => { this.finsembleWindowCreateEntry.initialize(finish); },\n\t\t\t(finish) => { this.finsembleTabbingEntry.initialize(finish); }\n\t\t], () => {\n\t\t\tLogger.system.debug(\"ServiceEntryPoints.initialize done\");\n\t\t\tdone();\n\t\t});\n\t}\n\n\tshutdown(done) {\n\t\tasyncSeries([\n\t\t\t(finish) => { this.finsembleLauncherEntry.shutdown(finish); },\n\t\t\t(finish) => { this.finsembleWindowPrimitivesEntry.shutdown(finish); },\n\t\t\t(finish) => { this.finsembleWindowCreateEntry.shutdown(finish); },\n\t\t\t(finish) => { this.finsembleTabbingEntry.shutdown(finish); }\n\t\t], () => {\n\t\t\tLogger.system.debug(\"ServiceEntryPoints.shutdown done\");\n\t\t\tdone();\n\t\t});\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/ServiceEntryPoints/setupAllEntryPoints.js","import events from \"events\";\nimport Logger from \"../../../clients/logger\";\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport { System } from \"../../../common/system\";\nimport { FinsembleWindow } from \"../../../common/window/FinsembleWindow\";\n\n/**\n *\n * The SplinterAgent is basically a go-between for the SplinterAgentPool and the SplinterAgentSlave. Because the LauncherService cannot spawn windows for other Openfin applications, the pool uses these Agents to communicate with sibling openfin Applications (the SplinterAgentSlave). The primary responsibilities of the SplinterAgent are to:\n * 1. Send messages to its SplinterAgentSlave, asking it to spawn child windows.\n * 2. Keep track of the number of windows that the slave is managing.\n * 3. Notify the pool if it's maxed out or empty.\n *\n * @class SplinterAgent\n * @extends {events.EventEmitter}\n */\nclass SplinterAgent extends events.EventEmitter {\n\t/**\n\t * Sets up the object.\n\t * @param {object} config\n\t * @memberof SplinterAgent\n\t */\n\tconstructor(config) {\n\t\tsuper();\n\t\tLogger.system.debug(\"SplinterAgent constructor\", config);\n\t\tthis.spawnsAnything = config.spawnsAnything;\n\t\tthis.windows = [];\n\t\tthis.windowStore = config.windowStore;\n\t\tthis.uuid = config.app.uuid;\n\t\tthis.componentsICanSpawn = config.components || [];\n\t\tthis.servicesICanSpawn = config.services || [];\n\t\tthis.maxWindowsPerAgent = config.maxWindowsPerAgent;\n\t\tthis.app = config.app;\n\t\tthis.config = config;\n\t\tthis.isMaxed = false;\n\n\t\tthis.addListeners();\n\t}\n\t/**\n\t * Invoked by the SplinterAgentPool. It returns a boolean, whether it's capable of spawning a given item.\n\t * @param {any} str\n\t * @returns {boolean}\n\t * @memberof SplinterAgent\n\t */\n\tcanSpawn(str) {\n\t\tLogger.system.debug(`SplinterAgent.canSpawn: My uuid: ${this.app.uuid}. Checking on: ${str}`);\n\t\treturn this.componentsICanSpawn.includes(str) || this.servicesICanSpawn.includes(str);\n\t}\n\t/**\n\t * Sets the title of the Slave. This is only so that finding the window in localhost:9090 is easy. It outputs something like:\n\t * Splinter Agent | Open Windows: 4 | Components: Advanced Chart, Simple Chart | Services: N/A\n\t *\n\t * @memberof SplinterAgent\n\t */\n\tsetSlaveTitle() {\n\t\tlet title = `Splinter Agent | Open Windows: ${this.windows.length} | Components:${this.componentsICanSpawn.toString() || \"N/A\"}, Services: ${this.servicesICanSpawn.toString() || \"N/A\"}`;\n\t\tLogger.system.debug(`SplinterAgent.setSlaveTitle: ${title}`);\n\t\tRouterClient.transmit(`${this.app.uuid}.setTitle`, { title: title });\n\t}\n\n\t/**\n\t * When a window is added or removed, check to see if we've exceeded our maximum. When a window closes, make sure to remove it locally.\n\t *\n\t * @memberof SplinterAgent\n\t */\n\taddListeners() {\n\t\tLogger.system.debug(\"SplinterAgent.addListeners\");\n\t\tthis.app.addEventListener(\"window-closed\", this.removeWindow.bind(this));\n\t\tthis.app.addEventListener(\"window-crashed\", (e) => {// if a window crashes we need to remove references to is.\n\t\t\tFinsembleWindow.getInstance(e, (err, response) => {// get the reference to the window\n\t\t\t\tif (err){\n\t\t\t\t\tLogger.system.error(\"Window crash getInstance error\",err);\n\t\t\t\t}else{\n\t\t\t\t\tresponse.close();//close the window\n\t\t\t\t}\n\n\t\t\t\tthis.removeWindow(e);\n\t\t\t\tLogger.system.error(\"Agent child crashed\", e);\n\t\t\t});\n\t\t});\n\t\tthis.app.addEventListener(\"window-out-of-memory\", (e) => {\n\t\t\tthis.removeWindow(e);\n\t\t\tLogger.system.error(\"Agent child out of memory\", e);\n\t\t});\n\t\tthis.app.addEventListener(\"closed\", (e) => {\n\t\t\tthis.shutdown();\n\t\t\tthis.emit(\"agent-closed\");\n\t\t\tLogger.system.log(\"Agent closed\", e);\n\t\t});\n\t\tthis.app.addEventListener(\"crashed\", (e) => {\n\t\t\tthis.shutdown();\n\t\t\tthis.emit(\"agent-crashed\");\n\t\t\tLogger.system.error(\"Agent crashed\", e);\n\t\t});\n\t\tthis.app.addEventListener(\"out-of-memory\", (e) => {\n\t\t\tthis.shutdown();\n\t\t\tthis.emit(\"agent-crashed\");\n\t\t\tLogger.system.error(\"Agent out of memory\", e);\n\t\t});\n\t\tthis.app.addEventListener(\"not-responding\", (e) => {\n\t\t\tthis.shutdown();\n\t\t\tthis.emit(\"agent-crashed\");\n\t\t\tLogger.system.error(\"Agent not responding\", e);\n\t\t});\n\t}\n\n\t/**\n\t * Adds a window to the agent.\n\t *\n\t * @param {windowDescriptor} windowDescriptor\n\t * @memberof SplinterAgent\n\t */\n\taddWindow(windowDescriptor) {\n\t\tLogger.system.info(\"SplinterAgent.addWindow\", windowDescriptor);\n\t\tthis.windows.push(windowDescriptor);\n\t\tthis.setSlaveTitle();\n\t\tthis.checkMaximum();\n\t}\n\t/**\n\t * If we have reached the maximum number of windows per process, we emit an event telling the LauncherService to spawn off a new renderer.\n\t *\n\t * @returns\n\t * @memberof SplinterAgent\n\t */\n\tcheckMaximum() {\n\t\tLogger.system.debug(\"SplinterAgent.checkMaximum\");\n\t\tthis.isMaxed = this.windows.length === this.maxWindowsPerAgent;\n\t\tLogger.system.debug(`SplinterAgent.checkMaximum. numWindows: ${this.windows.length}. maxWindows: ${this.maxWindowsPerAgent}. isMaxed:${this.isMaxed}`);\n\n\t\tif (this.isMaxed) {\n\t\t\tthis.emit(\"windowMaximumReached\");\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\t * Sends a message to its Slave asking it to spawn a child window.\n\t * @param {windowDescriptor} params.windowDescriptor WindowDescriptor.\n\t * @callback {function} cb\n\t */\n\n\trequestSpawn(windowDescriptor, cb) {\n\t\tLogger.system.debug(\"SplinterAgent.requestSpawn\");\n\t\tLogger.system.debug(\"SplinterAgent.requestSpawn arguments:\", windowDescriptor);\n\t\tlet self = this;\n\t\twindowDescriptor.uuid = this.app.uuid;\n\t\tif (window.pendingWindowNames) {\n\t\t\twindow.pendingWindowNames[windowDescriptor.name] = windowDescriptor.uuid;\n\t\t}\n\t\tthis.addWindow(windowDescriptor);\n\t\tvar onSpawnedChannel = windowDescriptor.name + \".onSpawned\";\n\t\tvar onWindowSpawned = function () {\n\t\t\tlet fw = System.Window.wrap(windowDescriptor.uuid, windowDescriptor.name);\n\t\t\t/**\n\t\t\t * When the window is closed, the agent notices, checks its quota, and notifies the Pool if it is empty.\n\t\t\t *\n\t\t\t */\n\t\t\tfunction onWindowClosed(e) {\n\n\t\t\t\tRouterClient.removeListener(onSpawnedChannel, onWindowSpawned);\n\t\t\t\tLogger.system.info(`SplinterAgent.noticed window closed: ${e.name}`);\n\t\t\t\tself.removeWindow({ name: e.name });\n\t\t\t\t//Removing until OF can fix a bug that removes all listeners.\n\t\t\t\t// fw.removeEventListener('closed', onWindowClosed);\n\t\t\t}\n\t\t\tfw.addEventListener(\"closed\", onWindowClosed);\n\t\t\tfw.addEventListener(\"crashed\", onWindowClosed);\n\n\n\t\t\tif (self.windowStore) { // launcher's windowStore is passed through in the constructor. We need to check for it because it does not exist for agents created by pools for services.\n\t\t\t\tLogger.system.info(`Window spawned and connected to the agent. Adding window to global store. ${windowDescriptor.name}`);\n\n\t\t\t\t// This is where spawned windows get initially added to the global window store used for wrapping windows\n\t\t\t\tlet identifier = { name: windowDescriptor.name, uuid: windowDescriptor.uuid, windowType: \"OpenFinWindow\" }; // this is the minimum set of information required to build a window wrapper\n\t\t\t\t//windowDescriptor.identifier = identifier;\n\n\t\t\t\t// minimize the footprint of stuff in the store - this is the only thing needed from the manifest (used in asyncConnectToEventRouter in the routerClient)\n\t\t\t\tlet finConfig = windowDescriptor.customData.manifest.finsemble;\n\t\t\t\twindowDescriptor.customData.manifest = {\n\t\t\t\t\tfinsemble: {\n\t\t\t\t\t\tFinsembleUUID: finConfig.FinsembleUUID,\n\t\t\t\t\t\tapplicationRoot: finConfig.applicationRoot,\n\t\t\t\t\t\trouterDomainRoot: finConfig.moduleRoot,\n\t\t\t\t\t\trouter: finConfig.router\n\t\t\t\t\t}\n\t\t\t\t};\n\n\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb(fw);\n\t\t\t\t}\n\n\n\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (cb) {\n\t\t\t\tLogger.system.info(`Window spawned and connected to the agent. Did not add window to global store. Invoking callback.${windowDescriptor.name}`);\n\t\t\t\tcb(fw);\n\t\t\t}\n\t\t};\n\t\tRouterClient.addListener(onSpawnedChannel, onWindowSpawned);\n\t\tRouterClient.transmit(`${this.app.uuid}.spawn`, { windowDescriptor: windowDescriptor });\n\t}\n\t/**\n\t * Removes a window from the agent.\n\t *\n\t * @param {windowDescriptor} windowDescriptor\n\t * @memberof SplinterAgent\n\t */\n\tremoveWindow(windowDescriptor) {\n\t\tLogger.system.debug(`SplinterAgent.removeWindow. window name: ${windowDescriptor.name}`);\n\t\tfor (let i = 0; i < this.windows.length; i++) {\n\t\t\tlet descriptor = this.windows[i];\n\t\t\tif (descriptor.name === windowDescriptor.name) {\n\t\t\t\tthis.windows.splice(i, 1);\n\t\t\t\tthis.emit(\"windowRemoved\", windowDescriptor);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (this.windows.length === 0) {\n\t\t\tLogger.system.debug(`Agent empty ${this.app.uuid}`);\n\t\t\tthis.emit(\"empty\");\n\t\t}\n\t\tthis.setSlaveTitle();\n\t\tthis.checkMaximum();\n\t}\n\n\tasync shutdown(cb = Function.prototype) {\n\t\tthis.removeListener(\"empty\", this.shutdown);\n\t\tawait System.closeApplication(this.app);\n\t}\n\n}\n\nexport default SplinterAgent;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Splintering/SplinterAgent.js","import events from \"events\";\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\nimport SplinterAgent from \"./SplinterAgent\";\nimport { getRandomWindowName } from \"../../../common/disentangledUtils\";\nimport clone from \"lodash.clone\";\nimport async from \"async\";\nimport { System } from \"../../../common/system\";\n\n/**\n * The `SplinterAgentPool` manages and routes spawn requests from the `LauncherService` to the appropriate `SplinterAgent`s. For more, seed the overview in this folder (`Splintering.md`).\n * @class SplinterAgentPool\n * @extends {events.EventEmitter}\n */\nclass SplinterAgentPool extends events.EventEmitter {\n\t/**\n\t * Creates an instance of SplinterAgentPool, given an object from `configs/processConfig.json`.\n\t * @param {any} pool\n\t * @memberof SplinterAgentPool\n\t */\n\tconstructor(config, callback = Function.prototype) {\n\t\tsuper();\n\t\tLogger.system.debug(\"SplinterAgentPool constructor\", config);\n\t\tthis.finsembleConfig = config.finsembleConfig;\n\t\tthis.manifest = config.manifest;\n\t\t/**\n\t\t * @property {string='requestedNewAgent', 'ready'} Before requesting a new process, the pool changes its status to \"requestedNewAgent\". When the new agent is added to the pool, the status is set to \"ready\".\n\t\t */\n\t\tthis.status = \"requestedNewAgent\";\n\t\tthis.spawnQueue = [];\n\t\tthis.agents = [];\n\t\tthis.defaultAgentLabel = config.defaultAgentLabel || \"defaultAgent\";\n\t\tthis.shuttingDown = false;\n\t\tthis.windowStore = config.windowStore;\n\t\tthis.shutdown = this.shutdown.bind(this);\n\t\tthis.removeAgent = this.removeAgent.bind(this);\n\t\tconst defaultAgentConfig = { agentLabel: this.defaultAgentLabel, spawnsAnything: true, maxWindowsPerAgent: config.maxWindowsForDefaultAgent || Infinity };\n\t\tconfig.agentList = config.agentList.concat([defaultAgentConfig]);\n\t\tLogger.system.debug(\"Spawning initial agent list\", config.agentList);\n\t\tthis.spawnSplinterAgent = this.spawnSplinterAgent.bind(this);\n\t\tthis.poolReady = false;\n\t\tasync.each(config.agentList, this.spawnSplinterAgent, () => {\n\t\t\tthis.poolReady = true;\n\t\t\tthis.flushSpawnQueue();\n\t\t\tcallback();\n\t\t});\n\t}\n\n\n\t// return the number of available agents for a given agentLabel.  An agent is available if it can handle another childWindow (i.e. its max hasn't been reached)\n\tavailableAgentCount(agentLabel) {\n\t\tvar count = 0;\n\t\tfor (let i = 0; i < this.agents.length; i++) {\n\t\t\tlet agent = this.agents[i];\n\t\t\t// if agent for this label\n\t\t\tif (agent.config.agentLabel === agentLabel) {\n\t\t\t\t// if there is a max but the max hasn't been reached yet\n\t\t\t\tif (!agent.maxWindowsPerAgent || agent.windows.length < agent.maxWindowsPerAgent) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * Add a agent to the pool and required listeners to the agent and its application. When ready is\n\t *\n\t * @param {any} agent\n\t * @memberof SplinterAgentPool\n\t */\n\taddAgent(agent) {\n\t\tlet self = this;\n\t\tLogger.system.debug(`Agent added to pool. Agent UUID: ${agent.app.uuid}`);\n\n\t\t// this handler is triggered when this instance of an agent reaches it maximum allowable children\n\t\tvar onAgentMaxed = () => {\n\t\t\t// if no other agents for this agentLabel are available for when the next time another childWindow is created, then go ahead and spawn one now\n\t\t\tif (this.availableAgentCount(agent.config.agentLabel) === 0) {\n\t\t\t\tself.spawnSplinterAgent(agent.config);\n\t\t\t}\n\t\t};\n\t\tvar onAgentEmpty = () => {\n\t\t\tself.onAgentEmpty(agent);\n\t\t};\n\t\tvar onWindowRemoved = (descriptor) => {\n\t\t\tself.emit(\"windowRemoved\", descriptor);\n\t\t};\n\t\tif (agent.spawnsAnything) {\n\t\t\t//We don't want to ever get into a situation where there's no default agent. If our last agent is closed via the process monitor, crashes, or for some unforseen reason else, we need to create another one. As long as we're not shutting down the application.\n\t\t\tlet onDefaultAgentClosed = () => {\n\t\t\t\tlet flexibleAgents = self.getFlexibleAgents();\n\t\t\t\tif (!self.shuttingDown && flexibleAgents.length === 0) self.spawnSplinterAgent(agent.config);\n\t\t\t\tagent.removeListener(\"agent-closed\", onDefaultAgentClosed);\n\t\t\t\tagent.removeListener(\"agent-crashed\", onDefaultAgentClosed);\n\t\t\t};\n\t\t\tagent.addListener(\"agent-closed\", onDefaultAgentClosed);\n\t\t\tagent.addListener(\"agent-crashed\", onDefaultAgentClosed);\n\t\t}\n\n\t\tagent.addListener(\"windowRemoved\", onWindowRemoved);\n\t\tagent.addListener(\"windowMaximumReached\", onAgentMaxed);\n\t\tagent.addListener(\"empty\", onAgentEmpty);\n\t\tLogger.system.debug(`addAgent pushed: ${agent.app.uuid}`);\n\t\tthis.agents.push(agent);\n\t\tthis.status = \"ready\";\n\t\tthis.flushSpawnQueue();\n\t}\n\t/**\n\t * Retrieves agents that can spawn any kind of component/service. This is analogous to the old concept of a 'defaultAgent'. Essentially a dumpster that any unloved components get thrown into.\n\t */\n\tgetFlexibleAgents() {\n\t\treturn this.agents.filter(agent => agent.spawnsAnything);\n\t}\n\t/**\n\t * Adds a spawn request (and its callback) to a queue that is processed once a free render agent opens up.\n\t * @param {windowDescriptor} windowDescriptor\n\t * @callback {function} cb\n\t * @memberof SplinterAgentPool\n\t */\n\tqueueSpawn(windowDescriptor, cb) {\n\t\tLogger.system.debug(\"SplinterAgentPool Queueing Spawn.\", windowDescriptor);\n\t\tlet args = { windowDescriptor, cb };\n\t\tthis.spawnQueue.push(args);\n\t}\n\t/**\n\t * Iterates through the queue and tries spawning each request.\n\t *\n\t * @memberof SplinterAgentPool\n\t */\n\tflushSpawnQueue() {\n\t\t//Clone here so that we can empty the original object. This way we can spawn windows until our agent fills up.\n\t\tlet queue = clone(this.spawnQueue);\n\t\tLogger.system.debug(\"SplinterAgentPool flushing spawn queue\", queue);\n\n\t\tthis.spawnQueue = [];\n\t\tfor (let i = 0; i < queue.length; i++) {\n\t\t\tlet args = queue[i];\n\t\t\tthis.routeSpawnRequest(args.windowDescriptor, args.cb);\n\t\t}\n\t}\n\t/**\n\t *\n\t * If there is an available splinterAgent, we ask it to spawn the window. Otherwise we queue the spawn request. If we have not yet requested a new splinterAgent, we spawn a new one.\n\t * @param {windowDescriptor} windowDescriptor\n\t * @callback {function} cb\n\t * @memberof SplinterAgentPool\n\t */\n\trouteSpawnRequest(windowDescriptor, cb = Function.prototype) {\n\t\tLogger.system.debug(\"SplinterAgentPool routingSpawnRequest\", windowDescriptor);\n\t\tconst promiseResolver = (resolve) => {\n\t\t\t//callback and resolve.\n\t\t\t//todo make service manager use async/await. remove cb.\n\t\t\tlet afterSpawn = (fw) => {\n\t\t\t\tcb(fw);\n\t\t\t\tresolve(fw);\n\t\t\t};\n\t\t\tlet agent = this.retrieveAvailableAgent(windowDescriptor.componentType);\n\t\t\t//there are no agents that can fulfill this spawn request. New ones are spawned as the agents are maxed out.\n\t\t\t//When a new one comes online, the queue will be processed.\n\t\t\tif (agent) {\n\t\t\t\tagent.requestSpawn(windowDescriptor, afterSpawn);\n\t\t\t} else {\n\t\t\t\tthis.queueSpawn(windowDescriptor, afterSpawn);\n\t\t\t}\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Spawns a new agent manager.  When it comes online, we add it to our list of available agents and flush the queue.\n\t * @callback cb {function}\n\t */\n\tspawnSplinterAgent(agentConfig, cb) {\n\t\tLogger.system.debug(\"SplinterAgentPool spawning new Agent\", agentConfig);\n\t\tlet self = this;\n\t\tagentConfig.windowStore = this.windowStore;\n\t\tthis.status = \"requestedNewAgent\";\n\t\tlet name = getRandomWindowName(agentConfig.agentLabel, this.manifest.startup_app.uuid);\n\t\tlet agentDescriptor = {\n\t\t\turl: `${this.finsembleConfig.moduleRoot}/services/window/Splintering/SplinterAgentSlave.html`,\n\t\t\tuuid: name,\n\t\t\tname: name,\n\t\t\tmainWindowOptions: {\n\t\t\t\tcustomData: {\n\t\t\t\t\tmanifest: { finsemble: this.finsembleConfig }\n\t\t\t\t}\n\t\t\t},\n\t\t\tplugins: true\n\t\t};\n\n\t\t//Spawn new application; when it comes online, it'll send off an 'onSpawned' message. At that point we add the agent to our pool and flush the queue.\n\t\tlet finApp = new System.Application(agentDescriptor, () => {\n\t\t\tRouterClient.addListener(agentDescriptor.name + \".onSpawned\", () => {\n\t\t\t\tLogger.system.debug(\"Agent spawned and connected to the pool.\", agentDescriptor.name);\n\t\t\t\tagentConfig.app = finApp;\n\t\t\t\tlet agent = new SplinterAgent(agentConfig);\n\t\t\t\tself.addAgent(agent);\n\t\t\t\tself.emit(\"addAgent\", agentDescriptor.name);\n\n\t\t\t\tif (cb) {\n\t\t\t\t\tcb();\n\t\t\t\t}\n\t\t\t});\n\t\t\tfinApp.run();\n\t\t}, (err) => {\n\t\t\tLogger.system.error(\"Failed to create Agent\", err);\n\t\t});\n\t}\n\t/**\n\t * Gets rid of the agent from the pool.\n\t * @param {any} uuid\n\t * @returns\n\t * @memberof SplinterAgentPool\n\t */\n\tremoveAgent(uuid) {\n\t\tLogger.system.debug(\"SplinterAgentPool removeAgent\", uuid, this.agents);\n\t\tfor (let i = 0; i < this.agents.length; i++) {\n\t\t\tlet agent = this.agents[i];\n\t\t\tif (agent.uuid === uuid) {\n\t\t\t\tthis.agents.splice(i, 1);\n\t\t\t\tthis.emit(\"processRemoved\", agent.name);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the first open agent that is not maxed out.\n\t *\n\t * @returns\n\t * @memberof SplinterAgentPool\n\t */\n\tretrieveAvailableAgent(componentType) {\n\t\tLogger.system.debug(`SplinterAgentPool.retrieveAvailableAgent for: ${componentType}`);\n\t\tfor (let i = 0; i < this.agents.length; i++) {\n\t\t\tlet agent = this.agents[i];\n\t\t\tif (agent.canSpawn(componentType)) {\n\t\t\t\tif (agent.isMaxed) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tLogger.system.debug(`SplinterAgentPool.retrieveAvailableAgent: agent found (${agent.app.uuid})`);\n\t\t\t\treturn agent;\n\t\t\t}\n\t\t}\n\n\t\t//Find a flexibleAgent and place the component in it.\n\t\tlet flexibleAgents = this.getFlexibleAgents();\n\t\tfor (let i = 0; i < flexibleAgents.length; i++) {\n\t\t\tlet agent = flexibleAgents[i];\n\t\t\tif (agent.isMaxed) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tLogger.system.debug(`SplinterAgentPool.retrieveAvailableAgent: agent found (${agent.app.uuid})`);\n\t\t\treturn agent;\n\t\t}\n\t\tLogger.system.debug(\"No agent available.\");\n\t\t//Return null. if nothing is available, launcherService queues spawns.\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * Handler for when last windowChild managed by agent closes.\n\t */\n\tonAgentEmpty(agent) {\n\t\tlet self = this;\n\t\tLogger.system.debug(`SplinterAgentPool.onAgentEmpty. ${agent.app.uuid} is empty.`, this.shuttingDown);\n\t\t// If we're shutting down, then kill this empty agent.\n\t\t// Or if not shutting down but their are multiple instances of the agent available, then kill this empty agent (only need to keep one around for each agentLabel)\n\t\tif (this.shuttingDown || this.availableAgentCount(agent.config.agentLabel) > 1) {\n\t\t\tself.removeAgent(agent.app.uuid);\n\t\t\tagent.shutdown();\n\t\t}\n\t}\n\n\t/**\n\t * Terminates all of the agents. This happens when the launcher receives word that all components have shutdown properly.\n\t * @memberof SplinterAgentPool\n\t */\n\tshutdown(cb) {\n\t\tLogger.system.debug(\"SplinterAgentPool.shutdown.\", this.agents);\n\t\tlet self = this;\n\t\tself.shuttingDown = true;\n\t\tasync function shutdownAgent(agentDescriptor, done) {\n\t\t\tlet agent = System.Application.wrap(agentDescriptor.uuid);\n\t\t\tawait System.closeApplication(agent);\n\t\t\tself.removeAgent(agentDescriptor.uuid);\n\t\t\tLogger.system.verbose(`shutdown sync close, ${agentDescriptor.uuid}`);\n\t\t\tdone();\n\t\t}\n\n\t\t//Async.whilst will try the 2nd function until the result of the first function returns true. When that happens, the 3rd function is invoked. In this case, when all of the agents are closed down, we invoke the shutdown callback, which tells the launcherService to move on.\n\n\t\t//The rationale for this is that if components are spawned during the shutdown process, additional agents could be added to the pool.This should only run once, but it closes a potential timing gap that could leave hanging applications.\n\t\tasync.whilst(\n\t\t\tfunction agentsAreAlive() {\n\t\t\t\treturn self.agents.length;\n\t\t\t},\n\t\t\tfunction killLivingAgents(finished) {\n\t\t\t\t//@todo, try this with Object.assign\n\t\t\t\tlet agentList = JSON.parse(JSON.stringify(self.agents));\n\t\t\t\tasync.each(agentList, shutdownAgent, finished);\n\t\t\t},\n\t\t\tcb\n\t\t);\n\t}\n}\n\nexport default SplinterAgentPool;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/Splintering/SplinterAgentPool.js","\n\nconst BOUNDS_CHANGING = \"bounds-change-request\";\nconst BOUNDS_CHANGED = \"bounds-changed\";\nimport Logger from \"../../../clients/logger\";\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport WorkspaceClient from \"../../../clients/workspaceClient\";\nimport { BaseWindow } from \"./BaseWindow\";\nimport * as utils from \"../../../common/util\";\nimport { MOVE_REASON } from \"../../../common/constants\";\n\nvar mouseLocation = {\n\tx: 0,\n\ty: 0\n};\n\n/**\n * NativeWindow\n */\nclass NativeWindow extends BaseWindow {\n\t/**\n\t * @param {*} params\n\t * @param {string} [params.uuid]\n\t * @param {object} [params.location]\n\t * @param {string} [params.launchedByApp]\n\t *\n\t */\n\tconstructor(params) {\n\t\tif (!params.windowType) {\n\t\t\tif (params.params) {\n\t\t\t\tparams = Object.assign(params, params.params);\n\t\t\t}\n\t\t\tparams.windowType = null;\n\t\t}\n\t\tsuper(params);\n\t\tthis.loggerChannel = `ExternalWindowWrapper.${this.windowName}`;\n\t\tthis.type = \"external\";\n\t\tthis.windowType = \"NativeWindow\";\n\t\tthis.location = params.windowMsg ? params.windowMsg.location : null;\n\t\tthis.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\tthis.isMaximized = false;\n\t\tthis.key = params.windowMsg ? params.windowMsg.uuid : params.uuid;\n\t\tthis.saveOnBoundsChanged = this.launchedByApp;\n\t\tthis.movements = [];\n\t\tthis.lastLocation = this.location;\n\t\tthis.events = {};\n\t\tthis.lastMinimized = 0;\n\t\tthis.lastRestored = 0;\n\t\tthis.executablePath = null;\n\t\tthis.descriptor = null;\n\t\tthis.spawnedByOpenFin = false;\n\t\tthis.maximizing = false;\n\t\tthis.restoreBounds = null;\n\t\t//Saves the initial data into the workspace.\n\t\tRouterClient.transmit(\"Assimilation.saveWindow\", { key: this.key });\n\t\tthis.bindFunctions();\n\n\t}\n\n\tbindFunctions() {\n\t\tthis._setBounds = this._setBounds.bind(this);\n\t\tthis.listenForBoundsChanging = this.listenForBoundsChanging.bind(this);\n\t\tthis.receiveMoveRequestEvent = this.receiveMoveRequestEvent.bind(this);\n\t\tthis.endMovementHandler = this.endMovementHandler.bind(this);\n\t\tthis._getBoundsFromSystem = this._getBoundsFromSystem.bind(this);\n\t}\n\n\t/**\n\t * Sends a request to assimilation for the system bounds. Waits and returns the response\n\t * @param {*} params \n\t * @param {*} cb \n\t */\n\t_getBoundsFromSystem(params, cb = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tconst guid = utils.guuid();\n\n\t\t\t//Gets the response and converts the bounds object\n\t\t\tlet boundsUpdateResponse = (err, msg) => {\n\t\t\t\tif (msg.data.error) { return resolve({err: msg.data.error}); };\n\t\t\t\tconst bounds = {\n\t\t\t\t\tleft: msg.data.left,\n\t\t\t\t\tright: msg.data.right,\n\t\t\t\t\ttop: msg.data.top,\n\t\t\t\t\tbottom: msg.data.bottom,\n\t\t\t\t\theight: msg.data.height,\n\t\t\t\t\twidth: msg.data.width\n\t\t\t\t};\n\t\t\t\tLogger.system.verbose(`externalWindowWrapper._getBoundsFromSystem response: Window id ${this.key}, guid: ${guid}, bounds: ${JSON.stringify(bounds)}`);\n\t\t\t\tRouterClient.removeListener(`${guid}-Assimilation.boundsUpdate`, boundsUpdateResponse);\n\t\t\t\tcb(err, bounds);\n\t\t\t\treturn resolve({ err, data: bounds });\n\t\t\t};\n\t\t\t// Log the request so that it can be compared to the response from assimilation above\n\t\t\tLogger.system.verbose(\"externalWindowWrapper._getBoundsFromSystem: requesting updated bounds from assimilation\", this.key, guid);\n\t\t\t//Send a request for updated bounds. Assign a unique guid to the request so we listen to the correct response.\n\t\t\tRouterClient.addListener(`${guid}-Assimilation.boundsUpdate`, boundsUpdateResponse);\n\t\t\tRouterClient.transmit(\"Assimilation.getWinBounds\", { \"uuid\": this.key, \"ref\": guid });\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tendMovementHandler(err, message) {\n\t\tif (err) {\n\t\t\treturn Logger.system.error(err);\n\t\t}\n\t\t// Logger.system.log(\"end sent\");\n\t\tif (!message || !message.data || !message.data.location) { return; }\n\n\t\tthis.location = message.data.location;\n\t\tthis.eventManager.trigger(BOUNDS_CHANGED, this.location);\n\t}\n\n\t_addEventListener(params, cb = Function.prototype) {\n\t\tlet { eventName } = params;\n\t\tthis.addEventListener(eventName);\n\t\tcb();\n\t}\n\n\taddEventListener(event, handler = Function.prototype) {\n\t\tsuper.addEventListener(event, handler);\n\t\t//this event will come in from assimilation. when it does, we trigger the bounds-changed event, which throws bounds-change-end to the rest of the system.\n\t\tswitch (event) {\n\t\t\tcase \"bounds-changed\":\n\t\t\t\tRouterClient.addListener(this.name + \".endMovement\", this.endMovementHandler);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t_removeEventListener(params, cb = Function.prototype) {\n\t\tlet { eventName } = params;\n\t\tthis.removeEventListener(eventName);\n\t\tcb();\n\t}\n\n\tremoveEventListener(event, handler = Function.prototype) {\n\t\tsuper.removeEventListener(event, handler);\n\t\t//this event will come in from assimilation. when it does, we trigger the bounds-changed event, which throws bounds-change-end to the rest of the system.\n\t\tswitch (event) {\n\t\t\tcase \"bounds-changed\":\n\t\t\t\tRouterClient.removeListener(this.name + \".endMovement\", this.endMovementHandler);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * hack to limit move events being sent---not a fan\n\t */\n\tlistenForBoundsChanging() {\n\t\tthis.eventManager.listenForRemoteEvent(\"bounds-change-request\", this.receiveMoveRequestEvent);\n\t}\n\n\t/**\n\t *This will emit the bounds changing event to any window that has turned on the listener. Currently, only used by docking\n\t *\n\t * @param {Object} err\n\t * @param {Object} response\n\t * @memberof NativeWindow\n\t */\n\treceiveMoveRequestEvent(err, response) {\n\t\tLogger.system.info(this.loggerChannel + \".receiveMoveRequestEvent\", response.data);\n\t\tresponse.data.name = this.windowName;//Docking requires the window name here\n\t\tthis.emit(BOUNDS_CHANGING, response.data);\n\t}\n\n\t/**\n\t *\n\t * @param {Object} params\n\t * @param {Object} params.location -The location the window the trying to go to\n\t */\n\tmove(params) {\n\t\tLogger.system.info(this.loggerChannel + \".move\", this.getChannel(BOUNDS_CHANGING), params);\n\t\tif (!params.location) { return; }// We must have a location to move a window\n\t\tRouterClient.transmit(this.getChannel(BOUNDS_CHANGING), params.location);\n\t}\n\n\t/** DH 5/21/2019\n\t * Every other kind of window has listeners for bounds change end that then save\n\t * the window's new state. Because assimilated windows don't, we must override\n\t * this function and call the custom save function.\n\t *\n\t * @TODO Make API's consistent between BaseWindow, externalWindowWrapper, and\n\t * stackedWindowWrapper\n\t */\n\tstopMove() {\n\t\tsuper.stopMove();\n\t\tthis._saveWindowOptions();\n\t}\n\n\t_setBounds(params, cb = Function.prototype) {\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\n\t\tconst bounds = params.bounds;\n\t\tconst self = this;\n\t\tconst newLocationUnrounded = {\n\t\t\tleft: Number(bounds.left),\n\t\t\ttop: Number(bounds.top),\n\t\t\twidth: bounds.width ? Number(bounds.width) : Number(bounds.right) - Number(bounds.left),\n\t\t\theight: bounds.height ? Number(bounds.height) : Number(bounds.bottom) - Number(bounds.top),\n\t\t\tright: bounds.right ? Number(bounds.right) : Number(bounds.left) + Number(bounds.width),\n\t\t\tbottom: bounds.bottom ? Number(bounds.bottom) : Number(bounds.top) + Number(bounds.height)\n\t\t};\n\t\tconst newLocation = {};\n\t\tconst addRoundedEntryToLocation = ([key, value]) => {\n\t\t\tnewLocation[key] = Math.round(value);\n\t\t};\n\t\tObject.entries(newLocationUnrounded).forEach(addRoundedEntryToLocation);\n\n\t\tLogger.system.verbose(\"send move \", self);\n\n\t\tthis.lastLocation = newLocation;\n\t\tthis.location = newLocation;\n\t\tthis.mergeBounds(bounds);\n\t\tsuper._setBounds(params);\n\t\t//if the _setBounds function was async, can't use super...\n\t\tlet asyncHack = async () => {\n\t\t\tawait RouterClient.query(\"Assimilation.moveWindow\", { name: this.windowName, key: self.key, location: newLocation });\n\t\t\tthis.eventManager.trigger(\"bounds-changing\", {\n\t\t\t\t...newLocation\n\t\t\t});\n\t\t\tcb();\n\t\t};\n\t\tasyncHack();\n\t}\n\n\t_hide(params, cb = Function.prototype) {\n\t\tlet self = this;\n\t\tsuper._hide(params, async (err, response) => {\n\t\t\t//@note, there's no params.fromAssimilation here because hidden isn't an event caught from the OS.\n\t\t\tif (response.shouldContinue) {\n\t\t\t\tawait RouterClient.query(\"Assimilation.hideWindow\", { name: self.windowName, key: self.key, location: self.location });\n\t\t\t\tself.eventManager.trigger(\"hidden\");\n\t\t\t\tRouterClient.transmit(\"Assimilation.saveWindow\", { key: self.key, autoShow: false });\n\t\t\t}\n\t\t\tcb();\n\t\t});\n\t}\n\n\t_focus(params, cb = Function.prototype) {\n\t\tlet self = this;\n\t\tsuper._focus(params, async (err, response) => {\n\t\t\tif (response.shouldContinue && params.fromAssimilation) {\n\t\t\t\tself.eventManager.trigger(\"focused\");\n\t\t\t}\n\t\t\tcb();\n\t\t});\n\t}\n\n\t_minimize(params, cb = Function.prototype) {\n\t\tif (Date.now() - this.lastRestored < 50) return cb();\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = {};\n\t\t}\n\t\tif (!params) params = {};\n\t\tlet self = this;\n\t\tsuper._minimize(params, async () => {\n\t\t\tif (self.windowState === BaseWindow.WINDOWSTATE.MAXIMIZED) {\n\t\t\t\tself.cachedState = BaseWindow.WINDOWSTATE.MAXIMIZED;\n\t\t\t}\n\n\t\t\tif (params.fromAssimilation) {\n\t\t\t\tself.windowState = BaseWindow.WINDOWSTATE.MINIMIZED;\n\t\t\t\tself.eventManager.trigger(\"minimized\");\n\t\t\t} else {\n\t\t\t\tawait RouterClient.query(\"Assimilation.minimizeWindow\", { name: self.windowName, key: self.key, location: self.location });\n\t\t\t}\n\n\t\t\tcb();\n\t\t});\n\t}\n\n\tgetIsMaximized() {\n\t\treturn this.windowState === BaseWindow.WINDOWSTATE.MAXIMIZED;\n\t}\n\n\t_maximize(params, cb = Function.prototype) {\n\t\tlet self = this;\n\t\tsuper._maximize(params, async (err, response) => {\n\n\t\t\tif (self.windowState != BaseWindow.WINDOWSTATE.MAXIMIZED) {\n\t\t\t\t//self.emit(\"maximized\", { name: self.windowName });\n\t\t\t\tif (self.windowState !== BaseWindow.MINIMIZED) {\n\t\t\t\t\tself.maximizing = true;\n\t\t\t\t\tself.restoreBounds = self.location;\n\t\t\t\t}\n\t\t\t\tawait RouterClient.query(\"DockingService.maximizeWindow\",\n\t\t\t\t\t{\n\t\t\t\t\t\tname: self.windowName,\n\t\t\t\t\t\twindowIdentifier: self.windowIdentifier\n\t\t\t\t\t});\n\t\t\t\tself.eventManager.trigger(\"maximized\");\n\t\t\t\tself.windowState = BaseWindow.WINDOWSTATE.MAXIMIZED;\n\t\t\t}\n\n\t\t\tcb();\n\t\t});\n\t}\n\n\t_restore(params, cb = Function.prototype) {\n\t\tlet self = this;\n\t\tparams = params || {};\n\t\tsuper._restore(params, async (err, response) => {\n\t\t\tif (response.shouldContinue) {\n\t\t\t\tif (self.cachedState && self.cachedState === BaseWindow.WINDOWSTATE.MAXIMIZED) {// self is a check of we minimize from being maximized\n\t\t\t\t\tself.cachedState = null;\n\t\t\t\t\t//@note, early return\n\t\t\t\t\treturn self._maximize(params, () => {\n\t\t\t\t\t\tself.eventManager.trigger(\"restored\");\n\t\t\t\t\t\tcb();\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// if we restore from a minimized state set the state to normal\n\t\t\t\tif (self.windowState === BaseWindow.WINDOWSTATE.MINIMIZED) {\n\t\t\t\t\tif (params.fromAssimilation) {\n\t\t\t\t\t\t// Window restored from outside of Finsemble. If the monitor configuration has changed since the window was minimized, assimilation\n\t\t\t\t\t\t// will have moved the window's restore position. Use these bounds to tell Finsemble the new location.\n\t\t\t\t\t\tconst onBoundsReceivedAfterRestore = (updatedBounds) => {\n\t\t\t\t\t\t\t// Assimilation corrects the windows position on restore, but html windows do not. \n\t\t\t\t\t\t\t// Due to this difference we need to tell finsemble to force the bounds update\n\t\t\t\t\t\t\t// or Finsemble will have the wrong bounds for this window. Only checking top and left\n\t\t\t\t\t\t\t// because the updated bound are coming in with 7 pixels of extra height even when no monitor change has occurred.\n\t\t\t\t\t\t\tif (self.location.top !== updatedBounds.top || self.location.left !== updatedBounds.left) {\n\t\t\t\t\t\t\t\tupdatedBounds.force = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Triggers an event that specified that the window was restored from the system\n\t\t\t\t\t\t\tupdatedBounds.action = MOVE_REASON.SYSTEM_RESTORED;\n\t\t\t\t\t\t\tself.eventManager.trigger(\"system-bounds-changed\", {\n\t\t\t\t\t\t\t\t...updatedBounds\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst retryLimit = 3;\n\t\t\t\t\t\tlet retryCount = 0;\n\t\t\t\t\t\t// The bounds request will return an error if the window is minimized or hidden. This can happen if the window\n\t\t\t\t\t\t// is not done restoring when we request the updated bounds. By retrying on error, we can give the OS more time to restore the window\n\t\t\t\t\t\t// Finally default to the previous location (adjusted to be on a monitor if necessary) if we can't updated bounds.\n\t\t\t\t\t\tconst getBoundsAndRetry = () => {\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (retryCount >= retryLimit) {\n\t\t\t\t\t\t\t\tLogger.system.error(`externalWindowWrapper._restore: Failed to get valid bounds for ${self.windowName} after trying ${retryLimit} times. Defaulting to previous location`);\n\t\t\t\t\t\t\t\tonBoundsReceivedAfterRestore(self.location);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tself._getBoundsFromSystem()\n\t\t\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\t\t\tif (response.err) {\n\t\t\t\t\t\t\t\t\t\tretryCount++;\n\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\t\tgetBoundsAndRetry();\n\t\t\t\t\t\t\t\t\t\t}, retryCount * 100);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tonBoundsReceivedAfterRestore(response.data);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\t\t\t\t\t\tgetBoundsAndRetry();\n\t\t\t\t\t\tself.eventManager.trigger(\"restored\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Restore action was triggered from Finsemble. Make sure the window is restored on monitor.\n\t\t\t\t\t\tconst bounds = utils.adjustBoundsToBeOnMonitor(self.location);\n\t\t\t\t\t\tawait RouterClient.query(\"Assimilation.restoreWindow\", { name: self.windowName, key: self.key, location: bounds }, params, function () { });\n\t\t\t\t\t\tself.eventManager.trigger(\"restored\");\n\t\t\t\t\t}\n\t\t\t\t\tself.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\t\t\t}\n\n\t\t\t\t// if we restore from a max state tell docking so we can reset the position\n\t\t\t\tif (self.windowState === BaseWindow.WINDOWSTATE.MAXIMIZED) {\n\t\t\t\t\tself.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\t\t\t\tawait RouterClient.query(\"DockingService.restoreFromMaximize\", {\n\t\t\t\t\t\tname: self.windowName,\n\t\t\t\t\t\twindowIdentifier: self.identifier\n\t\t\t\t\t});\n\t\t\t\t\tself.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\t\t\t\tself.maximizing = false;\n\t\t\t\t\tself.eventManager.trigger(\"restored\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcb();\n\t\t});\n\t}\n\n\t_close(params, cb = Function.prototype) {\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = {};\n\t\t}\n\n\t\tif (!params) params = {};\n\t\tlet self = this;\n\t\tsuper._close(params, async (err, response) => {\n\t\t\tif (response.shouldContinue) {\n\t\t\t\tif (params.removeFromWorkspace) WorkspaceClient.removeWindow({ name: self.windowName });\n\t\t\t\t// TODO -> No idea what this closing event does. There is no other mention of a closing event in the entire system.\n\t\t\t\tself.eventManager.trigger(\"closing\");\n\t\t\t\t// Tell assimilation to close the window.\n\t\t\t\tRouterClient.query(\"Assimilation.closeWindow\", { name: self.windowName, key: self.key, location: self.location, ...params }, cb);\n\t\t\t}\n\t\t});\n\n\t}\n\n\t_show(params, cb = Function.prototype) {\n\t\tlet self = this;\n\t\tsuper._show(params, async (err, response) => {\n\t\t\tif (response.shouldContinue) {\n\t\t\t\tawait RouterClient.query(\"Assimilation.showWindow\", { name: self.windowName, key: self.key, location: self.location });\n\t\t\t\tself.eventManager.trigger(\"shown\");\n\t\t\t\tRouterClient.transmit(\"Assimilation.saveWindow\", { key: self.key, autoShow: true });\n\t\t\t}\n\t\t\tcb();\n\n\t\t});\n\t}\n\n\t_bringToFront(params, cb = Function.prototype) {\n\t\tsuper._bringToFront(params, async (err, response) => {\n\t\t\tif (response.shouldContinue) {\n\t\t\t\tawait RouterClient.query(\"Assimilation.bringToFront\", { name: this.windowName });\n\t\t\t\tthis.eventManager.trigger(\"broughtToFront\");\n\t\t\t}\n\t\t\tcb();\n\t\t});\n\n\t}\n\n\t_setOpacity(params, cb = Function.prototype) {\n\t\tthis.opacity = params.opacity;\n\t\tcb();\n\t}\n\n\tasync _alwaysOnTop(params, cb = Function.prototype) {\n\t\tif (this.alwaysOnTop == params.alwaysOnTop) return;\n\t\tthis.alwaysOnTop = params.alwaysOnTop;\n\t\tawait RouterClient.query(\"Assimilation.alwaysOnTop\", { key: this.key, alwaysOnTop: params.alwaysOnTop });\n\t\tcb();\n\t}\n\n\tdisableFrame(cb = Function.prototype) {\n\t\tthis.frame = false;//paint\n\t\tcb();\n\t}\n\n\tgetMousePosition(cb = Function.prototype) {\n\t\tcb(null, mouseLocation);\n\t}\n\n\t_saveWindowOptions() {\n\t\tRouterClient.transmit(\"Assimilation.saveWindow\", { key: this.key, location: this.location });\n\t}\n\n\t_getBounds(params, cb = Function.prototype) {\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = {};\n\t\t}\n\t\tif (this.maximizing) {\n\t\t\tcb(null, this.restoreBounds);\n\t\t\treturn Promise.resolve({ err: null, data: this.restoreBounds });\n\t\t}\n\t\t//if (!this.location) {\n\t\tvar self = this;\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"Assimilation.getWindowLocation\", { windowName: this.windowName, uuid: this.uuid }, function (err, message) {\n\t\t\t\tif (err) {\n\t\t\t\t\tcb(err);\n\t\t\t\t\treturn resolve({ err, data: null });\n\t\t\t\t}\n\t\t\t\tif (!message.data.location) {\n\t\t\t\t\tcb(null);\n\t\t\t\t\treturn resolve({ err: null, data: null });\n\t\t\t\t}\n\t\t\t\tself.location = {\n\t\t\t\t\ttop: message.data.location.top,\n\t\t\t\t\tleft: message.data.location.left,\n\t\t\t\t\tright: message.data.location.right,\n\t\t\t\t\tbottom: message.data.location.bottom,\n\t\t\t\t\theight: message.data.location.bottom - message.data.location.top,\n\t\t\t\t\twidth: message.data.location.right - message.data.location.left\n\t\t\t\t};\n\t\t\t\t// TODO: why does this need to be done here?\n\t\t\t\tif (!self.location.height) {\n\t\t\t\t\tself.location.height = self.location.bottom - self.location.top;\n\t\t\t\t}\n\t\t\t\tif (!self.location.width) {\n\t\t\t\t\tself.location.width = self.location.right - self.location.left;\n\t\t\t\t}\n\t\t\t\tcb(null, self.location);\n\t\t\t\treturn resolve({ err: null, data: self.location });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_updateOptions(params, cb = Function.prototype) {\n\t\tlet windowOptions = {\n\t\t\tkey: this.key\n\t\t};\n\n\t\tif (params && typeof params === \"object\") {\n\t\t\tObject.keys(params).map(key => {\n\t\t\t\tif (!windowOptions[key]) {\n\t\t\t\t\twindowOptions[key] = params[key];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tRouterClient.transmit(\"Assimilation.saveWindow\", windowOptions);\n\t}\n}\n\nexport default NativeWindow;\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/WindowAbstractions/externalWindowWrapper.js","import { BaseWindow } from \"./BaseWindow\";\nimport RouterClient from \"../../../clients/routerClientInstance\";\nimport ConfigClient from \"../../../clients/configClient\";\nConfigClient.initialize();\nimport { ConfigUtilInstance as ConfigUtil } from \"../../../common/configUtil\";\nimport UserNotification from \"../../../common/userNotification\";\nimport Logger from \"../../../clients/logger\";\nconst BOUNDS_SET = \"bounds-set\";\nimport { System } from \"../../../common/system\";\nimport { MOVE_REASON } from \"../../../common/constants\";\n\nfunction isNumeric(n) {\n\treturn !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * OpenFinWindow\n */\nclass OpenFinWindow extends BaseWindow {\n\t/**\n\t *\n\t * @param {*} params\n\t * @param {finWindow} [params.finWindow] If not provided, must provide uuid\n\t * @param {string} [params.uuid] If not provided, must provide finWindow\n\t * @param {string} [params.name]\n\t */\n\tconstructor(params) {\n\t\tsuper(params);\n\t\tthis.name = params.name || params.windowName;\n\t\tthis.uuid = params.uuid;\n\t\tthis.focused = false;\n\n\t\tif (params.finWindow) {\n\t\t\tthis.finWindow = params.finWindow;\n\t\t\tthis.uuid = this.finWindow.uuid;\n\t\t\tif (!this.name) this.name = this.finWindow.name;\n\t\t}\n\n\t\tif (!this.finWindow && this.uuid) {\n\t\t\tthis.uuid = params.uuid;\n\t\t\tthis.finWindow = System.Window.wrap(params.uuid, this.name);\n\t\t}\n\t\tthis._listeners = {};\n\t\t//whether to notify the user that we failed to close the window if it times out.\n\t\tthis.throwNotificationOnFailedClose = false;\n\t\tthis.windowIdentifier = { windowName: this.name, uuid: this.uuid };\n\t\tthis.wrapFunctions();\n\t\tthis.windowOptions = {};\n\t\tthis.setMyOptions = this.setMyOptions.bind(this);\n\t\tthis.setCloseTimeout = this.setCloseTimeout.bind(this);\n\t\tthis.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\tthis.eventChannelName = this.eventChannelName.bind(this);\n\t\tthis.handleBoundsSet = this.handleBoundsSet.bind(this);\n\t\tthis.setupSystemBoundsChangedEvent = this.setupSystemBoundsChangedEvent.bind(this);\n\t\tthis.windowsKeyAction = this.windowsKeyAction.bind(this);\n\t\tthis._restore = this._restore.bind(this);\n\t\tthis.setParent = super.setParent.bind(this);\n\t\tthis.getParent = super.getParent.bind(this);\n\t\tthis.canMinimize = true;\n\t\tthis.canMaximize = true;\n\t\tthis.setMinimizeAbility = this.setMinimizeAbility.bind(this);\n\t\tthis.setMaximizeAbility = this.setMaximizeAbility.bind(this);\n\t\t//On destruct, we'll go through all the listeners that we've added to the router and remove them\n\t\t//@todo investigate a routerClient for each wrapper, so on destruct we can just RouterClient.disconnectALl without removing everything from the physical tab/browser window it's running in\n\t\tthis.RouterHandlers = {};\n\t\tthis.addListeners = this.addListeners.bind(this);\n\t\tthis.removeListeners = this.removeListeners.bind(this);\n\t\tthis.listeningFor = []; // keeps track of Finsemble window event listeners and prevents duplicates\n\t\tthis.addedSystemListeners = {}; // keeps track of the system event listeners that the Finsemble event listeners translate to and makes sure there are no duplicates\n\t\tthis._systemClosed = this._systemClosed.bind(this);\n\t\tthis._systemMaximized = this._systemMaximized.bind(this);\n\t\tthis._systemRestored = this._systemRestored.bind(this);\n\t\tthis._getBoundsFromSystem = this._getBoundsFromSystem.bind(this);\n\t\t//This boolean is set to true when the window is closed by the operating system (outside of finsemble).\n\t\tthis.closing = false;\n\n\t\tthis.setBoundsFromFinsemble = false;\n\t\tthis.windowsKeyDown = false; //Tracks wether the windows key is being held down. When the windows key is pressed inside a window a router message is dispatched to change this prop. Only when the opposite action fires from the router will this value change back.\n\t\tthis.lastWindowsKeyUp = 0;\n\t\tthis._isMaximized = false;\n\t\tthis.addListeners();\n\t}\n\n\tsetIsMaximized(value) {\n\t\tif (typeof value !== \"boolean\") {\n\t\t\tLogger.system.error(\"Cannot set isMaximized to a non-boolean value. Assuming false\");\n\t\t\tvalue = false;\n\t\t}\n\n\t\tif (this.parentWindow) {\n\t\t\tthis.parentWindow.isMaximized = value;\n\t\t}\n\n\t\tthis._isMaximized = value;\n\t}\n\n\tgetIsMaximized() {\n\t\tif (this.parentWindow) {\n\t\t\treturn this.parentWindow.isMaximized;\n\t\t}\n\n\t\treturn this._isMaximized;\n\t}\n\n\t_addEventListener(params, handler = Function.prototype) {\n\t\tlet { eventName } = params;\n\t\tthis.addEventListener(eventName, handler);\n\t}\n\n\t_removeEventListener(params, handler = Function.prototype) {\n\t\tlet { eventName } = params;\n\t\tthis.removeEventListener(eventName, handler);\n\t}\n\n\tremoveEventListener(params, handler = Function.prototype) {\n\t\tsuper.removeEventListener(params.eventName || params, handler);\n\n\t\t// TODO: Need to modify so that we keep track of all added listeners and remove them cleanly. Not sure how addEVentListener even does anything.\n\t}\n\n\t/**\n\t * Make sure that only one event is added for system listeners that someone requests. These events are cleaned up when \"addedSystemListeners\" are removed.\n\t * @param {string} systemEvent\n\t * @param {Function} handler\n\t */\n\tsetupSystemListener(systemEvent, handler) {\n\t\tif (!this.addedSystemListeners[systemEvent]) {\n\t\t\tthis.addedSystemListeners[systemEvent] = handler;\n\t\t\tthis.finWindow.addEventListener(systemEvent, handler);\n\t\t}\n\t}\n\n\taddEventListener(event, handler = Function.prototype) {\n\t\t// This makes sure that the handlers are triggered for each event and get removed when someone removes the handler\n\t\tsuper.addEventListener(event, handler);\n\n\t\t// For some events, add listeners in the finWindow so that we can then propagate the event to the rest of the system. These are only added one time.\n\t\tif (!this.listeningFor.includes(event)) {\n\t\t\tthis.listeningFor.push(event);\n\t\t\tswitch (event) {\n\t\t\t\tcase \"bounds-change-request\":\n\t\t\t\t\t//translate disabled-frame-bounds-changing into a bounds-change-request event expected by the rest of the system.\n\t\t\t\t\tthis.setupSystemListener(\"disabled-frame-bounds-changing\", this.onDisabledFrameBoundsChanging.bind(this));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"bounds-changed\":\n\t\t\t\t\tthis.setupSystemListener(\"disabled-frame-bounds-changed\", this.onDisabledFrameBoundsChanged.bind(this));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"system-bounds-changed\":\n\t\t\t\t\tthis.setupSystemListener(\"bounds-changed\", this.setupSystemBoundsChangedEvent.bind(this));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"system-maximized\":\n\t\t\t\t\tthis.setupSystemListener(\"maximized\", () => this.eventManager.trigger(\"system-maximized\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"system-restored\":\n\t\t\t\t\tthis.setupSystemListener(\"restored\", () => this.eventManager.trigger(\"system-restored\"));\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"blurred\":\n\t\t\t\tcase \"focused\":\n\t\t\t\tcase \"hidden\":\n\t\t\t\tcase \"shown\":\n\t\t\t\tcase \"minimized\":\n\t\t\t\t// case \"close-requested\": <- using our custom close-requested event.\n\t\t\t\t// case \"closed\": <- using custom close-event.\n\t\t\t\tcase \"crashed\":\n\t\t\t\t\t//keep track of events we're listening for so we don't add multiple listeners on the openfin window. don't want to trigger more than a single remote event per single local event. Said differently, if we add this generic handler N times, the event will be triggered N times.\n\n\t\t\t\t\t//`super.addEventListener` will make sure that any events emitted by this wrapper are caught. However, we won't emit any events that we aren't listening to on the primitive window (in this case, the underlying finWindow).\n\t\t\t\t\t//So, when someone adds a listener(e.g., focus), we listen for the primitive to emit the event. At that point, the derived class will emit, and the handler will be fired.\n\t\t\t\t\tthis.setupSystemListener(event, this.onNativeEvent.bind(this, event));\n\t\t\t\t\tbreak;\n\t\t\t\t//'system-closed' is a made up event. It means 'a closed event was emitted on the underlying window primitive that we weren't expecting'.\n\t\t\t\t//This will happen when the user closes via the taskbar or via alt + f4.\n\t\t\t\tcase \"system-closed\":\n\t\t\t\t\tthis.setupSystemListener(\"closed\", () => this.eventManager.trigger(\"system-closed\"));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tLogger.system.debug(\"Listener added to openfin wrap, Handler not passed to primitive. Using finsemble event instead.\", event);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tcheckIfBoundsAreTheSame(bounds1, bounds2) {\n\t\tif (bounds1 && bounds2) {\n\t\t\treturn (bounds1.top === bounds2.top && bounds1.left === bounds2.left && bounds1.height === bounds2.height && bounds1.width === bounds2.width);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets up listeners for system-bounds-changed events. Currently only responds to aero snap moves\n\t */\n\tasync setupSystemBoundsChangedEvent(evt) {\n\t\tLogger.system.verbose(\"bounds-changed event\", evt);\n\t\t// If a setBounds call was made by Finsemble, do not trigger this event. The intent of this is to catch things like moves made by windows keyboard shortcuts or direct calls from OF.\n\t\t// dockableWindow deals with these. For stacks, this event is propagated to the stack.\n\t\tif (this.setBoundsFromFinsemble && this.checkIfBoundsAreTheSame(evt, this.requestedBounds)) {\n\t\t\tthis.setBoundsFromFinsemble = false;\n\t\t\treturn;\n\t\t}\n\t\tif (!this.finishedMove) return;\n\t\tif (this.windowsKeyDown) {\n\t\t\t// If windows key is down, user is using shortcuts to position windows. Delay triggering the event until keyup.\n\t\t\tthis.windowsKeyUpHandler = () => {\n\t\t\t\tif (this.windowState === BaseWindow.WINDOWSTATE.MAXIMIZED) {\n\t\t\t\t\tthis.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\t\t\t\tthis.eventManager.trigger(\"restored\");\n\t\t\t\t}\n\t\t\t\tevt.action = MOVE_REASON.AERO_KEY;\n\t\t\t\tthis.eventManager.trigger(\"system-bounds-changed\", {\n\t\t\t\t\t...evt\n\t\t\t\t});\n\t\t\t\t// We set a global flag here that is available to all windowWrappers and docking. Aerosnapped windows fire a lot of spurious move events that need to be caught.\n\t\t\t\t// TODO - it maybe possible that a static method might be able to deal with this instead.\n\t\t\t\twindow.aeroMode = true;\n\t\t\t};\n\t\t} else if (window.aeroMode) { // this is for a window that is chosen from preview and is the only case except the initial aerosnap that needs to be dealt with.\n\t\t\tif (this.windowState === BaseWindow.WINDOWSTATE.MAXIMIZED) {\n\t\t\t\tthis.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\t\t\tthis.eventManager.trigger(\"restored\");\n\t\t\t}\n\t\t\tevt.action = MOVE_REASON.AERO_KEY;\n\t\t\tthis.eventManager.trigger(\"system-bounds-changed\", {\n\t\t\t\t...evt\n\t\t\t});\n\t\t\twindow.aeroMode = false;\n\t\t}\n\t}\n\n\t/** Some windows should never be allowed to maximize (e.g, the toolbar).\n\t * However, until we have a way of preventing the maximize event at the\n\t * OS level, the event will still happen. When this occurs our solution\n\t * is to immediately restore it again.\n\t*/\n\t_systemMaximized() {\n\t\tlet win = this;\n\t\tif (win.canMaximize === false) {\n\t\t\twin._restore({ checkMaximize: false, checkMinimize: false });\n\t\t\treturn;\n\t\t}\n\t\t// Finsemble maximize is different from OF maximize.\n\t\t// If a window gets maximized by the system (double click taskbar), we should make Finsemble maximize happen\n\t\t// If we are already maximized (finsemble maximized, not OF maximized), we are restoring.\n\t\tif (this.parentWindow) {\n\t\t\twin = this.parentWindow;\n\t\t}\n\t\tif (win.windowState === BaseWindow.WINDOWSTATE.MAXIMIZED) {\n\t\t\twin._restore();\n\t\t} else {\n\t\t\twin._maximize();\n\t\t}\n\t}\n\n\t// When a native OpenFin event fires:\n\tasync _systemRestored() {\n\t\tlet win = this;\n\t\t// Maximize happens we resize the window under the titlebar, which causes restore to fire.\n\t\t// We only want to actually deal with restore when the window is minimized previously\n\t\tif (this.parentWindow) win = this.parentWindow;\n\n\t\tif (win.windowState !== BaseWindow.WINDOWSTATE.MINIMIZED) {\n\t\t\treturn;\n\t\t}\n\t\tif (win.getIsMaximized() === true) {\n\t\t\twin._maximize();\n\t\t\treturn;\n\t\t}\n\n\t\tlet { data: bounds } = await win._getBounds();\n\t\t// Triggers an event that specified that the window was restored from the system\n\t\tbounds.action = MOVE_REASON.SYSTEM_RESTORED;\n\t\tthis.eventManager.trigger(\"system-bounds-changed\", {\n\t\t\t...bounds\n\t\t});\n\t\n\t\twin.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\twin.setIsMaximized(false);\n\t\twin.eventManager.trigger(\"restored\");\n\t}\n\n\t// When a native OpenFin event fires:\n\tonNativeEvent(eventName) {\n\t\tthis.eventManager.trigger(eventName);\n\t}\n\n\taddListeners() {\n\t\tthis.addEventListener(\"minimized\", () => {\n\t\t\tthis.windowState = BaseWindow.WINDOWSTATE.MINIMIZED;\n\t\t});\n\t\tthis.addEventListener(\"restored\", () => {\n\t\t\tthis.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\t});\n\t\tthis.addEventListener(\"maximized\", () => {\n\t\t\tthis.windowState = BaseWindow.WINDOWSTATE.MAXIMIZED;\n\t\t});\n\t\tthis.addEventListener(\"system-maximized\", this._systemMaximized);\n\t\tthis.addEventListener(\"system-restored\", this._systemRestored);\n\t\tthis.addEventListener(\"system-closed\", this._systemClosed);\n\t\tconst UPDATE_OPTIONS_CHANNEL = this.name + \".updateOptions\";\n\t\tconst onUpdateOptions = (err, response) => {\n\t\t\tfor (let o in response.data) {\n\t\t\t\tif (this.windowOptions[o] == response.data[o]) return;\n\t\t\t\tthis.windowOptions[o] = response.data[o];\n\t\t\t\tlet dataToEmit = {\n\t\t\t\t\twindowName: this.name\n\t\t\t\t};\n\t\t\t\tdataToEmit[o] = response.data[o];\n\t\t\t\tthis.emit(o, response.data);\n\t\t\t}\n\t\t};\n\t\tthis.RouterHandlers[UPDATE_OPTIONS_CHANNEL] = onUpdateOptions;\n\t\t// Fire events when options are updated. e.g. alwaysOnTop\n\t\tRouterClient.addListener(UPDATE_OPTIONS_CHANNEL, onUpdateOptions);\n\n\t\t// When window key is pressed, we delay the system-set-bounds event trigger to after the key goes up.\n\t\tRouterClient.addListener(\"Finsemble.WindowService.WindowsKey\", this.windowsKeyAction);\n\t\t/** DH 6/15/2019 - The OS and container maintain seperate records of\n\t\t * which window is in focus, which can get out of sync;\n\t\t * therefore, we have to maintain a seperate state here.\n\t\t * Ideally this wouldn't be necessary and OS events would\n\t\t * always bubble up to the container.\n\t\t */\n\t\tthis.addEventListener(\"focused\", () => {\n\t\t\tthis.focused = true;\n\t\t});\n\t\tthis.addEventListener(\"blurred\", () => {\n\t\t\tthis.focused = false;\n\t\t});\n\t}\n\tonDisabledFrameBoundsChanged(evt) {\n\t\tthis.eventManager.trigger(\"bounds-changed\", {\n\t\t\t...evt\n\t\t});\n\t}\n\tonDisabledFrameBoundsChanging(evt) {\n\t\tthis.eventManager.trigger(\"bounds-change-request\", {\n\t\t\t...evt\n\t\t});\n\t}\n\t//removed because it causes an explosion of router traffic if the default is to listen for this event. If someone needs this incredibly frequently updated object, they can listen.\n\tlistenForBoundsSet() {\n\t\tthis.RouterHandlers[this.eventChannelName(BOUNDS_SET)] = this.handleBoundsSet;\n\t\tRouterClient.addListener(this.eventChannelName(BOUNDS_SET), this.handleBoundsSet);\n\t}\n\thandleBoundsSet(err, response) {\n\t\tif (response.data && response.data.bounds) {\n\t\t\tthis.mergeBounds(response.data.bounds);\n\t\t}\n\t\tthis.emit(BOUNDS_SET, response.data);\n\t}\n\t/**\n\t * @param params.property property to pull from 'finsemble' and from componentConfig.\n\t * @param params.componentType which component to grab local config from.\n\t */\n\tgetGlobalAndLocalComponentConfig(params) {\n\t\tlet { property, componentType } = params;\n\n\n\t\tconst promiseResolver = (resolve, reject) => {\n\t\t\tif (typeof componentType === \"undefined\") {\n\t\t\t\treject(\"params.componentType must be defined.\");\n\t\t\t}\n\t\t\tif (typeof property === \"undefined\") {\n\t\t\t\treject(\"params.property is required\");\n\t\t\t}\n\t\t\t//In case config isn't initialized when this method is called.\n\t\t\tconst getConfig = (cb) => {\n\t\t\t\tConfigClient.getValue({ field: \"finsemble\" }, (err, allConfig) => {\n\t\t\t\t\tif (err) return reject(err);\n\t\t\t\t\tlet globalConfig = allConfig[property];\n\t\t\t\t\tlet componentConfig = allConfig.components[componentType];\n\t\t\t\t\t//If we have the component config, return the property saved on that component. if not, return undefined.\n\t\t\t\t\tlet localConfig = componentConfig && componentConfig.foreign && componentConfig.foreign.components ?\n\t\t\t\t\t\tcomponentConfig.foreign.components[property] : undefined;\n\t\t\t\t\tresolve({ localConfig, globalConfig, allConfig });\n\t\t\t\t});\n\t\t\t};\n\t\t\tConfigClient.onReady(getConfig);\n\t\t};\n\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tsetCloseTimeout() {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tlet componentType;\n\t\t\t//Have to make sure options are set. Sometimes wraps are created and then just used to close windows. Need options to know which kind of component it is..\n\t\t\tthis.setMyOptions(async () => {\n\t\t\t\tif (this.windowOptions && this.windowOptions.customData && this.windowOptions.customData.component) {\n\t\t\t\t\tcomponentType = this.windowOptions.customData.component.type;\n\t\t\t\t}\n\n\t\t\t\t//Get the global timeout and the component-specific timeout. If the component-specific exists, use it. If it doesn't, try global. If global doesn't exist, use 5000ms.\n\t\t\t\tlet { localConfig, globalConfig, allConfig } = await this.getGlobalAndLocalComponentConfig({\n\t\t\t\t\tproperty: \"Window Manager\",\n\t\t\t\t\tcomponentType\n\t\t\t\t});\n\n\t\t\t\tlet globalTimeout = globalConfig ? globalConfig.componentCloseTimeout : undefined;\n\t\t\t\tlet componentTimeout = localConfig ? localConfig.componentCloseTimeout : undefined;\n\t\t\t\tif (typeof componentTimeout !== \"undefined\") {\n\t\t\t\t\tthis.closeTimeout = componentTimeout;\n\t\t\t\t} else if (typeof globalTimeout !== \"undefined\") {\n\t\t\t\t\tthis.closeTimeout = globalTimeout;\n\t\t\t\t} else {\n\t\t\t\t\tthis.closeTimeout = 5000;\n\t\t\t\t}\n\n\t\t\t\tthis.throwNotificationOnFailedClose = allConfig.failedComponentCloseNotification;\n\t\t\t\tLogger.system.info(\"Close timeout set for\", this.name, JSON.stringify(this.closeTimeout));\n\t\t\t\tresolve();\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\tsetMyOptions(cb) {\n\t\tthis.finWindow.getOptions((opts) => {\n\t\t\tthis.windowOptions = Object.assign(opts, this.windowOptions);\n\t\t\tif (!this.windowOptions) {\n\t\t\t\tLogger.system.error(\"window options is null\");\n\t\t\t}\n\t\t\tif (cb) cb();\n\t\t});\n\t}\n\n\tsetMinimizeAbility(canMinimize) {\n\t\tif (typeof canMinimize !== \"boolean\") {\n\t\t\tLogger.system.error(\"Ability to minimize cannot be a non-boolean value. Assuming true\");\n\t\t\tcanMinimize = true;\n\t\t}\n\n\t\tthis.canMinimize = canMinimize;\n\t}\n\n\tsetMaximizeAbility(canMaximize) {\n\t\tif (typeof canMaximize !== \"boolean\") {\n\t\t\tthrow new Error(\"Ability to maximize cannot be a non-boolean value\");\n\t\t}\n\n\t\tthis.canMaximize = canMaximize;\n\t}\n\n\t_updateOptions(params = {}, cb = Function.prototype) {\n\n\t\tif (!params) params = {};\n\t\tparams = params.options || params; // TODO: This function is used differently all over the place.\n\t\t// Permissions and security policies are protected options. They cannot be modified. Overwrite them as long as they've been set on the window.\n\t\t// @note window options aren't set on instantiation. New functionality needs to be added to set the options on creation.\n\t\tif (this.windowOptions && this.windowOptions.securityPolicy) {\n\t\t\tparams.permissions = this.windowOptions.permissions;\n\t\t\tparams.securityPolicy = this.windowOptions.securityPolicy;\n\t\t}\n\n\t\tthis.callOpenFinWindowFunction(\"updateOptions\", params, () => {\n\t\t\tthis._saveWindowOptions();\n\t\t\tcb();\n\t\t});\n\n\t}\n\n\t//Had to move this because jScrambler was screwing up when we obfuscated.\n\twrapFunctions() {\n\t\t//let self = this;\n\t\tvar openFinWindowFunctionsWithoutParams = [\"disableFrame\", \"isShowing\", \"getState\"];\n\t\topenFinWindowFunctionsWithoutParams.forEach((f) => {\n\t\t\tthis[f] = (params, cb) => {\n\t\t\t\tif (typeof params === \"function\") {\n\t\t\t\t\tcb = params;\n\t\t\t\t\tparams = null;\n\t\t\t\t}\n\t\t\t\tthis.callOpenFinWindowFunction(f, false, cb);\n\t\t\t};\n\t\t});\n\n\t\tvar openFinWindowFunctionsWithoutParamsToBeWrappedInIsShowing = [\"focus\"];\n\t\topenFinWindowFunctionsWithoutParamsToBeWrappedInIsShowing.forEach((f) => {\n\t\t\tthis[f] = (cb = Function.prototype) => {\n\t\t\t\tif ([\"minimize\", \"maximize\"].includes(f) && this.windowDescriptor && !this.windowDescriptor.resizable) {\n\t\t\t\t\tif (cb) { return cb(\"Cannot Perform this action on non-resizable windows\"); }\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.finWindow.isShowing((isShowing) => {\n\t\t\t\t\tif (isShowing) {\n\t\t\t\t\t\t//If the method is defined on the BaseWindow, call it.\n\t\t\t\t\t\tif (super[f]) {\n\t\t\t\t\t\t\tsuper[f]({}, (err, response) => {\n\t\t\t\t\t\t\t\t//if BaseWindow says it's okay for us the method to trickle down to the wrapper, great. otherwise cb.\n\t\t\t\t\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\t\t\t\t\tthis.callOpenFinWindowFunction(f, false, cb);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.callOpenFinWindowFunction(f, false, cb);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cb) { cb(\"This Window is hidden\"); }\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Called when a router message is received saying a windows key was pressed/released.\n\t * @param {*} err Error from the router\n\t * @param {*} response The response containing information about what keys were pressed\n\t */\n\twindowsKeyAction(err, response) {\n\t\tlet timeout;\n\t\tlet setWindowKeyDownFalse = () => {\n\t\t\tthis.windowsKeyDown = false;\n\t\t\tthis.lastWindowsKeyUp = Date.now();\n\t\t\tif (this.windowsKeyUpHandler) this.windowsKeyUpHandler();\n\t\t\tthis.windowsKeyUpHandler = null;\n\t\t\tclearTimeout(timeout);\n\t\t};\n\t\tif (response.data === \"down\") {\n\t\t\tthis.windowsKeyDown = true;\n\t\t\t// In case we never get a key up.\n\t\t\ttimeout = setTimeout(setWindowKeyDownFalse, 30000);\n\t\t} else if (response.data === \"up\") {\n\t\t\tsetWindowKeyDownFalse();\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {*} functionName Name of the openFin window function to call\n\t * @param {*} params  The parameters to the function (except callbacks) as an array\n\t * @param {*} cb The callback to be called. This is in the format function (err, response) {} and errors will be in err unlike Openfin which requires two callbacks.\n\t */\n\tcallOpenFinWindowFunction(functionName, params, cb = Function.prototype) {\n\t\t//If this.closing is true, the window was closed by the operating system. When that happens, the window receives focus. If that window is part of a group, this can trigger calls to bring to front, update options, etc. These function calls will error out at the openfin level because the window has already been closed.\n\t\tif (this.closing) return cb({\n\t\t\tcode: \"function_dropped_window_closing\",\n\t\t\tmessage: `Window ${this.name} was closed by the operating system. Skipping call to ${functionName}`\n\t\t});\n\t\tif (params) {\n\t\t\tif (!Array.isArray(params)) params = [params];\n\t\t\t// add success callback to params\n\t\t\tparams.push((...args) => {\n\t\t\t\t// fire event for updateOptions\n\t\t\t\tif (functionName == \"updateOptions\") {\n\t\t\t\t\tLogger.system.debug(\"callOpenFinWindowFunction.updateOptions\", params);\n\t\t\t\t\tif (!params[0].dontFireEvents) {\n\t\t\t\t\t\tRouterClient.transmit(this.name + \".updateOptions\", params[0]);\n\n\t\t\t\t\t\tfor (let o in params[0]) {\n\t\t\t\t\t\t\t// in some cases (such as our bringToFront hack we dont want to fire spurious events). Also dont fire events if the option doesn't change\n\t\t\t\t\t\t\tif (o == \"dontFireEvents\" || this.windowOptions[o] == params[0][o]) continue;\n\t\t\t\t\t\t\tif (this.windowOptions[o] && typeof this.windowOptions[o] == \"object\" && params[0][o] && typeof params[0][o] == \"object\") {\n\t\t\t\t\t\t\t\tObject.assign(this.windowOptions[o], params[0][o]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.windowOptions[o] = params[0][o];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!params[0].dontFireEvents) {\n\t\t\t\t\t\t\t\tthis.emit(o, {\n\t\t\t\t\t\t\t\t\twindowName: this.name,\n\t\t\t\t\t\t\t\t\to: params[0][o]\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// call the actual callback\n\t\t\t\tif (cb) { cb(null, args); }\n\t\t\t});\n\n\t\t\t// add error callback to params\n\t\t\tparams.push((err) => {\n\t\t\t\tif (cb) {\n\t\t\t\t\terr = `OpenFin Error for ${this.name} from method ${functionName}: ` + err;\n\t\t\t\t\tLogger.system.error(\"Error in openfinWindowWrapper method\", functionName, err);\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tcb(err);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// call the openfin function\n\t\t\tLogger.system.debug(\"xyx callOpenFinWindowFunction\", functionName, params);\n\t\t\tthis.finWindow[functionName](...params);\n\t\t} else {\n\t\t\tthis.finWindow[functionName]((retval) => {\n\t\t\t\tthis;\n\t\t\t\tcb(null, retval);\n\t\t\t}, (err) => {\n\t\t\t\tthis;\n\t\t\t\tif (cb) {\n\t\t\t\t\tLogger.system.debug(\"Error in openfinWindowWrapper method\", functionName, err);\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tcb(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Gets the bounds directly from Electron or Openfin. The existing getbounds function tries it's best to pass in the bounds as Finsemble knows them instead of bounds\n\t * sent up from the system.\n\t * This is called in cases where the OS has moved a window. In these cases we need the updated bounds from the system to update the Finsemble bounds\n\t * @param {*} params \n\t * @param {*} cb \n\t */\n\t_getBoundsFromSystem(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._getBoundsFromSystem\", this.name, params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\t// To avoid breaking current functionality or changing the api of a shared function Fea has a special function to query bounds from the system.\n\t\t\tif (System.isElectron()) {\n\t\t\t\tthis.callOpenFinWindowFunction(\"getBoundsFromSystem\", null, (err, bounds) => {\n\t\t\t\t\tcb(err, bounds);\n\t\t\t\t\treturn resolve({ err, data: bounds });\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t// openfin\n\t\t\t\tthis.callOpenFinWindowFunction(\"getBounds\", null, (err, bounds) => {\n\t\t\t\t\tcb(err, bounds);\n\t\t\t\t\treturn resolve({ err, data: bounds });\n\t\t\t\t});\n\t\t\t};\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_getBounds(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._getBounds\", this.name, params);\n\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\t//OPENFIN BOUNDS ARE WRONG! SERIOUSLY THEY REALLY ARE WRONG! AND THIS BREAKS STACKED WINDOWS IN DOCKED GROUPS BADLY!\n\t\t\t//SO PLEASE do not remove this code. it wasted a whole 4 hours figuring out why group rectangularity problems were back in cleanup.\n\t\t\t//return cached bounds if we have them\n\t\t\t//WE HAVE TO CACHE THEM BECAUSE WINDOWS IN STACKS ARE DEREGISTERED FROM DOCKING. AND DOCKING DOESN'T GET BOUNDS FOR THOSE WHICH IS A PROBLEM FOR STACKS. Do not eliminate this cache.\n\t\t\tif (this.windowOptions && this.windowOptions.bounds) {\n\t\t\t\tcb(null, this.windowOptions.bounds);\n\t\t\t\treturn resolve({ err: null, data: this.windowOptions.bounds });\n\t\t\t} else if (\n\t\t\t\tisNumeric(this.windowOptions.defaultLeft) &&\n\t\t\t\tisNumeric(this.windowOptions.defaultTop) &&\n\t\t\t\tisNumeric(this.windowOptions.defaultHeight) &&\n\t\t\t\tisNumeric(this.windowOptions.defaultWidth)\n\t\t\t) {\n\t\t\t\tlet bounds = {\n\t\t\t\t\ttop: this.windowOptions.defaultTop,\n\t\t\t\t\tleft: this.windowOptions.defaultLeft,\n\t\t\t\t\theight: this.windowOptions.defaultHeight,\n\t\t\t\t\twidth: this.windowOptions.defaultWidth,\n\t\t\t\t};\n\t\t\t\tbounds.right = bounds.left + bounds.width;\n\t\t\t\tbounds.bottom = bounds.top + bounds.height;\n\t\t\t\tthis.windowOptions.bounds = bounds;\n\t\t\t\tcb(null, this.windowOptions.bounds);\n\t\t\t\treturn resolve({ err: null, data: this.windowOptions.bounds });\n\t\t\t}\n\n\t\t\t// openfin bounds are often different from what is expected by a couple of pixels. use as last resort\n\t\t\tthis.callOpenFinWindowFunction(\"getBounds\", null, (err, bounds) => {\n\t\t\t\tcb(err, bounds);\n\t\t\t\treturn resolve({ err, data: bounds });\n\t\t\t});\n\t\t};\n\t\t// get bounds from docking if not\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_getOptions(params, cb) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._getOptions\", this.name, \"UUID\", this.uuid, params);\n\t\tthis.callOpenFinWindowFunction(\"getOptions\", null, (err, opts) => {\n\t\t\tif (err) {\n\t\t\t\tLogger.system.warn(\"getOptions\", err, params, opts);\n\t\t\t}\n\t\t\tif (opts && Object.keys(this.windowOptions).length) {\n\t\t\t\topts = Object.assign(opts, this.windowOptions);\n\t\t\t} else {\n\t\t\t\topts = {};\n\t\t\t}\n\t\t\tcb(err, opts);\n\t\t});\n\t}\n\n\t_hide(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._hide\", this.name, params);\n\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tif (params && params.invokedByParent) {\n\t\t\tthis.callOpenFinWindowFunction(\"updateOptions\", { autoShow: false }, () => {\n\t\t\t\tthis._saveWindowOptions();\n\t\t\t});\n\t\t}\n\t\tthis.callOpenFinWindowFunction(\"hide\", null, cb);\n\t}\n\n\t_show(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._show\", this.name, params);\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tif (params && (params.invokedByParent || params.saveState)) {\n\t\t\tthis.callOpenFinWindowFunction(\"updateOptions\", { autoShow: true }, () => {\n\t\t\t\tthis._saveWindowOptions();\n\t\t\t});\n\t\t}\n\t\tthis.callOpenFinWindowFunction(\"show\", null, cb);\n\t}\n\n\t// TABBING NOTE: Example case below showing how the parent (through the base class) can optionally inject it's behavior. Exactly where and where this is done is still TBD.\n\t_minimize(params = { notifyDocking: true }) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._minimize\", this.name, params);\n\t\t// When we receive a minimize command, we first pass the command to the parent window. The parent window may decide to supersede. In its response, it will then set the flag \"shouldContinue\" to false if we shouldn't actually perform the minimizing function.\n\t\tlet self = this;\n\t\t//Some windows cannot minimize, e.g., (toolbars);\n\t\tif (this.canMinimize === false) return;\n\t\tfunction doMinimize() {\n\t\t\tself.windowState = BaseWindow.WINDOWSTATE.MINIMIZED;\n\t\t\tself.finWindow.minimize();\n\t\t}\n\n\t\tthis.finWindow.isShowing((isShowing) => {\n\t\t\tif (isShowing) {\n\t\t\t\t//todo shouldn't be necessary in the future...\n\t\t\t\tRouterClient.query(\"DockingService.windowMinimized\", this.name, () => {\n\t\t\t\t\tdoMinimize();\n\t\t\t\t});\n\n\t\t\t}\n\t\t});\n\t}\n\n\t_maximize(params = { notifyDocking: true }) {\n\t\t// If windows key is down, user is using hotkeys to maximize and could potentially cancel the maximize event. So delay doing anything until the key is up.\n\t\tif (this.windowsKeyDown) {\n\t\t\tthis.windowsKeyUpHandler = () => {\n\t\t\t\tthis._maximize(params);\n\t\t\t};\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.isMaximizing || this.windowState === BaseWindow.WINDOWSTATE.MAXIMIZED) return;\n\t\tthis.isMaximizing = true;\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._maximize\", this.name, params);\n\t\t//Some windows cannot maximize, e.g., (toolbars);\n\t\tif (this.canMaximize === false) return;\n\t\t// When we receive a minimize command, we first pass the command to the parent window. The parent window may decide to supersede. In its response, it will then set the flag \"shouldContinue\" to false if we shouldn't actually perform the minimizing function.\n\t\tconst doMaximize = () => {\n\t\t\tthis.windowState = BaseWindow.WINDOWSTATE.MAXIMIZED;\n\t\t\tthis.setIsMaximized(true);\n\t\t\tthis.eventManager.trigger(\"maximized\");\n\t\t\tthis.isMaximizing = false;\n\t\t};\n\n\t\tif (params && params.invokedByParent) {\n\t\t\tthis.isMaximizing = false;\n\t\t} else {\n\t\t\tsuper._maximize(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\tthis.finWindow.isShowing((isShowing) => {\n\t\t\t\t\t\tif (isShowing) {\n\t\t\t\t\t\t\tRouterClient.query(\"DockingService.maximizeWindow\", { name: this.name }, () => {\n\t\t\t\t\t\t\t\tdoMaximize();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.isMaximizing = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.isMaximizing = false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t// TABBING NOTE: Example case below showing how the parent (through the base class) can optionally inject it's behavior.\n\t// ** Exactly where and where this for each derived window wrapper is still TBD, but easy to do/tweak. **\n\t_restore(params = { checkMinimize: true, checkMaximize: true }, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._restore\", this.name, params);\n\t\tlet self = this;\n\t\tconst DEFAULT_PARAMS = { checkMinimize: true, checkMaximize: true };\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = DEFAULT_PARAMS;\n\t\t}\n\n\t\tparams = Object.assign(DEFAULT_PARAMS, params);\n\n\t\tconst iAmMaximized = this.windowState === BaseWindow.WINDOWSTATE.MAXIMIZED;\n\t\tconst iAmMinimized = this.windowState === BaseWindow.WINDOWSTATE.MINIMIZED;\n\t\tconst iAmNotMaximized = this.windowState !== BaseWindow.WINDOWSTATE.MAXIMIZED;\n\t\t//If either of the param values are undefined, default to true\n\t\tconst restrictToMinimized = params.checkMinimize || true;\n\t\tconst restrictToMaximized = params.checkMaximized || true;\n\n\n\t\tsuper._restore(params, (err, response) => {\n\t\t\tif (err || !response.shouldContinue) return cb(err);\n\n\t\t\t// checkMinimize and checkMaximize are not mutually exclusive. Because a window could go down more than one of these paths, its callback could be executed twice. We don't want that, so we keep track of its invokation and only call the callback if it's not been invoked already.\n\t\t\tlet callbackInvoked = false;\n\t\t\tconst success = () => {\n\t\t\t\tself.eventManager.trigger(\"restored\");\n\t\t\t\tif (!callbackInvoked) {\n\t\t\t\t\tcallbackInvoked = true;\n\t\t\t\t\tcb();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// If we should restore minimized windows and the window is minimized, restore it.\n\t\t\tif (restrictToMinimized && iAmMinimized) {\n\t\t\t\treturn this.finWindow.restore(success, (err) => console.error(err));\n\t\t\t\t// If we should restore windows with any min/max state, and the window isn't maximized, we can restore this window. If the window is maximized, it has to go through a different restore flow.\n\t\t\t} else if (!restrictToMinimized && iAmNotMaximized) {\n\t\t\t\treturn this.finWindow.restore(success, (err) => console.error(err));\n\t\t\t}\n\n\t\t\tif (restrictToMaximized && iAmMaximized) {\n\t\t\t\tthis.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\t\t\tthis.setIsMaximized(false);\n\t\t\t\tRouterClient.query(\"DockingService.restoreFromMaximize\", {\n\t\t\t\t\tname: this.name,\n\t\t\t\t\twindowIdentifier: this.identifier\n\t\t\t\t}, (err, response) => {\n\t\t\t\t\t/**\n\t\t\t\t\t * 5/20/19 Joe: Previously success was called regardless of error/success\n\t\t\t\t\t * Added a logging message, but success will still be called either way\n\t\t\t\t\t */\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tLogger.system.error(\"Error querying router service for maximize restore\", err);\n\t\t\t\t\t}\n\t\t\t\t\tsuccess();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (!callbackInvoked) {\n\t\t\t\t\tcallbackInvoked = true;\n\t\t\t\t\tcb();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t_bringToFront(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._bringToFront\", this.name, params);\n\t\tlet defaults = { restoreWindows: false };\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = defaults;\n\t\t}\n\t\tlet doBringToFront = () => {\n\t\t\tif (this.windowOptions.alwaysOnTop) return cb();\n\t\t\t//let previousAOT = this.windowOptions.alwaysOnTop;\n\t\t\tlet callback = (err) => {\n\t\t\t\tthis._updateOptions({ alwaysOnTop: false, dontFireEvents: true }, (err2) => { cb(err2 || err); });\n\t\t\t};\n\t\t\tthis.eventManager.trigger(\"broughtToFront\");\n\t\t\tthis._updateOptions({ alwaysOnTop: true, dontFireEvents: true }, callback);\n\t\t};\n\t\t//If for some reason there's no windowOptions, go ahead and set them, then bring to front. I never saw this happen, but you know, just in case.\n\t\tif (!this.windowOptions) {\n\t\t\tthis.setMyOptions(doBringToFront);\n\t\t}\n\t\tdoBringToFront();\n\t}\n\n\t_isShowing(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._isShowing\", this.name, params);\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tif (params && (params.invokedByParent || params.saveState)) {\n\t\t\tthis.callOpenFinWindowFunction(\"updateOptions\", { autoShow: true }, () => {\n\n\t\t\t});\n\t\t}\n\t\tthis.callOpenFinWindowFunction(\"isShowing\", null, cb);\n\t}\n\n\t_setOpacity(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._setOpacity\", this.name, params);\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tthis.callOpenFinWindowFunction(\"updateOptions\", { opacity: params.opacity, dontFireEvents: true }, () => {\n\t\t\t//SetOpacity is called a lot (e.g., while moving a window). On mouse up, docking sends in params to tell the value to persist. This is so the window is restored with the proper opacity.\n\t\t\tif (params && params.persist) {\n\n\t\t\t}\n\t\t\tcb();\n\t\t});\n\t}\n\n\t_alwaysOnTop(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._alwaysOnTop\", this.name, params);\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tif (this.windowOptions.alwaysOnTop == params.alwaysOnTop) return;\n\t\tthis.windowOptions.alwaysOnTop = params.alwaysOnTop;\n\t\tthis.callOpenFinWindowFunction(\"updateOptions\", { alwaysOnTop: params.alwaysOnTop }, cb);\n\t}\n\n\tsetTaskbarIconGroup(taskbarIconGroup, params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper.setTaskbarIconGroup\", this.name, taskbarIconGroup, params);\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tthis.callOpenFinWindowFunction(\"updateOptions\", { taskbarIconGroup: taskbarIconGroup }, cb);\n\t}\n\n\t_saveWindowOptions() {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._saveWindowOptions\", this.name, this.windowOptions.bounds);\n\t\tif (this.windowOptions.name) {\n\t\t\tthis.saveCompleteWindowState(this.windowOptions);\n\t\t} else {\n\t\t\tthis.setMyOptions(() => {\n\t\t\t\tthis.saveCompleteWindowState(this.windowOptions);\n\t\t\t});\n\t\t} // only save if we have the full descriptor\n\t}\n\n\t_setBounds(params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._setBounds\", this.name, params);\n\t\t//if (this.name.includes(\"Welcome\")) console.info(this.name, params.bounds);\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tparams = params || {};\n\t\tlet bounds = params.bounds;\n\t\tsuper._setBounds(params);\n\t\tlet ofParams = [bounds.left, bounds.top, bounds.width, bounds.height];\n\t\t// if (!Object.keys(this.windowOptions).length || !this.windowOptions.name) bounds.persistBounds = false;\n\t\tthis.mergeBounds(bounds);\n\n\t\tif (bounds.persistBounds !== false) {\n\t\t\tthis._saveWindowOptions();\n\t\t}\n\n\t\tLogger.system.verbose(\"OpenFinWindow.setBounds\", ofParams, bounds);\n\t\tthis.eventManager.trigger(\"bounds-changing\", {\n\t\t\t...this.windowOptions.bounds\n\t\t});\n\t\t// this is to make sure we dont fire system change events when we are triggering them.\n\t\tthis.requestedBounds = bounds;\n\t\tthis.setBoundsFromFinsemble = true;\n\t\t// sometimes the OF setBounds results in no events being fired. So clear this flag just to be safe.\n\t\tif (this.timeout) clearTimeout(this.timeout);\n\t\tthis.timeout = setTimeout(() => { this.setBoundsFromFinsemble = false; }, 100);\n\t\tthis.callOpenFinWindowFunction(\"setBounds\", ofParams, cb);\n\t}\n\n\t_animate(animateParams, params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper.animate\", this.name, animateParams, params);\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tthis.finWindow.animate(animateParams.transitions, animateParams.options, () => {\n\t\t\tthis.getBounds({}, (err, bounds) => {\n\t\t\t\tif (animateParams.transitions.size) {\n\t\t\t\t\tif (animateParams.transitions.size.width) {\n\t\t\t\t\t\tbounds.width = animateParams.transitions.size.width;\n\t\t\t\t\t\tbounds.right = bounds.left + bounds.width;\n\t\t\t\t\t}\n\t\t\t\t\tif (animateParams.transitions.size.height) {\n\t\t\t\t\t\tbounds.height = animateParams.transitions.size.height;\n\t\t\t\t\t\tbounds.bottom = bounds.top + bounds.height;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbounds.persistBounds = params.persistBounds;\n\t\t\t\tthis._setBounds({ bounds }, cb);\n\t\t\t});\n\t\t}, function (error) {\n\t\t\tif (cb) cb(error);\n\t\t});\n\t}\n\n\tgetMousePosition(params, cb = Function.prototype) {\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tSystem.getMousePosition(cb);\n\t}\n\n\n\tcacheHandlerForRemoval(event, handler) {\n\t\tif (!this._listeners[event]) {\n\t\t\tthis._listeners[event] = [];\n\t\t}\n\n\t\tthis._listeners[event].push(handler);\n\t}\n\n\n\n\t_showAt(position, params, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._showAt\", this.name, position, params);\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\t\tthis.callOpenFinWindowFunction(\"showAt\", [position.left, position.top, position.force], cb);\n\t}\n\n\tthrowFailedCloseNotification(failureMessage) {\n\t\tConfigClient.getValue({ field: \"finsemble\" }, (err, finConfig) => {\n\t\t\tlet notificationURL = ConfigUtil.getDefault(finConfig, \"finConfig.notificationURL\", finConfig.moduleRoot + \"/components/system/notification/notification.html\");\n\t\t\tUserNotification.alert(\"dev\",\n\t\t\t\t\"ONCE-SINCE-STARTUP\",\n\t\t\t\t\"Window close timed out\",\n\t\t\t\tfailureMessage,\n\t\t\t\t{ url: notificationURL });\n\t\t});\n\t}\n\t_blur(params = {}, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._blur\", this.name, params);\n\t\tthis.focused = false;\n\t\tthis.callOpenFinWindowFunction(\"blur\", null, cb);\n\t}\n\n\t_focus(params = {}, cb = Function.prototype) {\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._focus\", this.name, params);\n\t\tthis.focused = true;\n\t\tthis.callOpenFinWindowFunction(\"focus\", null, cb);\n\t}\n\t//Invoked when out-of-bounds closes are detected. This might be an alt+f4, a close from the task bar, etc. Only happens when openfin or electron emit a closed event for the window. When we close our windows, we suppress that event.\n\t_systemClosed(params = {}, cb = Function.prototype) {\n\t\t//If we're closing, we shouldn't call focus/btf/update_options, etc. Doing so can cause errors down in openfin.\n\t\tthis.closing = true;\n\t\tparams.fromSystem = true;\n\t\tparams.removeFromWorkspace = true;\n\t\tsuper.close(params, async (err, response) => {\n\t\t\tcb();\n\t\t});\n\t}\n\t_close(params, cb = Function.prototype) { //merging all params because otherwise the params dont pass properly and remove from workspace fails\n\t\tthis.removeEventListener(\"system-closed\", this._systemClosed);\n\t\tLogger.system.debug(\"OpenFinWindowWrapper._close\", this.name, params);\n\t\tif (typeof params === \"function\") {\n\t\t\tcb = params;\n\t\t\tparams = null;\n\t\t}\n\n\t\tlet self = this;\n\t\t// When we receive a close command, we first pass the command to the parent window. The parent window may decide to supersede. In its response, it will then set the flag \"shouldContinue\" to false if we shouldn't actually perform the close function.\n\t\tsuper._close(params, async (err, response) => {\n\t\t\tif (response.shouldContinue) {\n\t\t\t\t//If the window is an application call closeApplication instead of finWindow.close\n\t\t\t\tif (self.finWindow.uuid === self.finWindow.name) {\n\t\t\t\t\tlet openFinApplication = System.Application.wrap(self.finWindow.uuid);\n\t\t\t\t\tSystem.closeApplication(openFinApplication, cb);\n\t\t\t\t} else if (params.fromSystem) {\n\t\t\t\t\t// Just call the callback - window is destroyed already because the system closed it\n\t\t\t\t\tcb();\n\t\t\t\t} else {\n\t\t\t\t\tself.finWindow.close(true, () => {\n\t\t\t\t\t\tcb();\n\t\t\t\t\t}, (err1) => {\n\t\t\t\t\t\tif (!params.suppressError) {\n\t\t\t\t\t\t\tLogger.system.error(\"ERROR CLOSING WINDOW\", err1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcb();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tRouterClient.transmit(`${this.windowIdentifier.windowName}.close`, params, { suppressWarnings: true });\n\t\t\t} else {\n\t\t\t\tcb();\n\t\t\t}\n\t\t});\n\t}\n\t//window client adds a callback here. This way, whenever close is called _anywhere_ in the system, it's passed down to the window client and cleanup can happen in the component.\n\tlistenForClose(cb) {\n\t\tlet listener = (err, response) => {\n\t\t\tdelete window._FSBLCache.windows[this.name];\n\t\t\tdelete window._FSBLCache.windowAttempts[this.name];\n\t\t\t//If the window that the wrap belongs to is the one calling close, just call the openfin method. Otherwise, some other window is trying to close it - so we send a message to that window, which will eventually close itself.\n\t\t\tRouterClient.removeListener(`${this.windowIdentifier.windowName}.close`, listener);\n\t\t\tcb(response.data);\n\t\t};\n\t\tRouterClient.addListener(`${this.windowIdentifier.windowName}.close`, listener);\n\t}\n\n\t//Called on destruct so that we don't leave trash in the router or on the openfin window.\n\tremoveListeners() {\n\t\tlet channels = Object.keys(this.RouterHandlers);\n\t\tLogger.system.debug(\"WRAP Removing Listeners\", channels);\n\t\tfor (let key in channels) {\n\t\t\tRouterClient.removeListener(key, this.RouterHandlers[key]);\n\t\t}\n\n\t\t//These are listeners added directly to the wrapped openfin window.\n\t\tlet events = Object.keys(this._listeners);\n\t\tif (events.length) {\n\t\t\tevents.forEach(eventName => {\n\t\t\t\tthis._listeners[eventName].forEach(handler => {\n\t\t\t\t\tthis.removeEventListener(eventName, handler);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// Remove all specialty listeners added to the openfin window\n\t\tfor (let event in this.addedSystemListeners) {\n\t\t\tthis.finWindow.removeEventListener(event, this.addedSystemListeners[event]);\n\t\t}\n\t}\n}\n\nexport default OpenFinWindow;\n\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/WindowAbstractions/openfinWindowWrapper.js","import RouterClient from \"../../../clients/routerClientInstance\";\nimport Logger from \"../../../clients/logger\";\nimport * as util from \"../../../common/util\";\nimport { BaseWindow } from \"./BaseWindow\";\n\nclass StackedWindow extends BaseWindow {\n\tconstructor(params) {\n\t\tsuper(params);\n\t\tthis.params = params;\n\t\tthis.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\tthis._listeners = {};\n\t\tthis._isMaximized = false;\n\t\tthis.bindAllFunctions();\n\t\tthis.addListeners();\n\t}\n\n\tisCurrentlyMinimized() {\n\t\treturn this.windowState === BaseWindow.WINDOWSTATE.MINIMIZED;\n\t}\n\n\tsetIsMaximized(value) {\n\t\tif (typeof value !== \"boolean\") {\n\t\t\tlogger.system.error(\"Cannot set isMaximized to a non-boolean value. Assuming false\");\n\t\t\tvalue = false;\n\t\t}\n\n\t\tthis._isMaximized = value;\n\t}\n\n\tgetIsMaximized() {\n\t\treturn this._isMaximized;\n\t}\n\n\taddListeners() {\n\t\tthis.addEventListener(\"minimized\", () => {\n\t\t\tthis.windowState = BaseWindow.WINDOWSTATE.MINIMIZED;\n\t\t});\n\t\tthis.addEventListener(\"restored\", () => {\n\t\t\tthis.windowState = BaseWindow.WINDOWSTATE.NORMAL;\n\t\t});\n\t\tthis.addEventListener(\"maximized\", () => {\n\t\t\tthis.windowState = BaseWindow.WINDOWSTATE.MAXIMIZED;\n\t\t});\n\t}\n\n\t_addEventListener(params, handler = Function.prototype) {\n\t\tlet { eventName } = params;\n\t\tthis.addEventListener(eventName, handler);\n\t}\n\n\taddEventListener(event, handler = Function.prototype) {\n\t\tsuper.addEventListener(event, handler);\n\t\t//..need to add a listener on the child window...\n\t}\n\n\t_removeEventListener(params, handler = Function.prototype) {\n\t\tlet { eventName } = params;\n\t\tthis.removeEventListener(eventName, handler);\n\t}\n\n\tremoveEventListener(event, handler = Function.prototype) {\n\t\tsuper.removeEventListener(event, handler);\n\t\t//..need to add a listener on the child window...\n\t}\n\n\teventChannelName(channelTopic) { return `StackedWindow-${this.name}-${channelTopic}`; }\n\n\tbindAllFunctions() {\n\t\tlet self = this;\n\t\tfor (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(self))) {\n\t\t\tif (self[name] instanceof Function) {\n\t\t\t\tself[name] = self[name].bind(self); // only bind function properties\n\t\t\t}\n\t\t}\n\t}\n\n\t// wrapper function to listen to bounds changing, but need a better/generalized solution\n\tlistenForBoundsChanging() {\n\t\tlet eventHandler = (err, message) => {\n\t\t\tLogger.system.debug(\"StackedWindow incoming transmit\", this.eventChannelName(\"bounds-change-request\"), message.data);\n\t\t\t//bounds changing will come in from the child window. We need to overwrite the name so that docking thinks it's the stack being moved, not the child.\n\t\t\tmessage.data.name = this.name;\n\t\t\tthis.eventManager.trigger(\"bounds-change-request\", message.data);\n\t\t};\n\t\tRouterClient.addListener(this.eventChannelName(\"bounds-change-request\"), eventHandler);\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Housekeeping function for private window methods\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Handles common housekeeping checks and modifications on params at the beginning of each private window function\n\t *\n\t * @param {string} methodName method name (e.g. \"minimize\", \"maximize\")\n\t * @param {object} params\n\t * @memberof StackedWindow\n\t * @private\n\t */\n\t_privatePreface(methodName, params, callback) {\n\t\tif (!window.stackedWindowManager) {\n\t\t\tLogger.system.error(\"StackedWindow wrapper's private functions can only be invoked in the WindowService\");\n\t\t}\n\n\t\tif (typeof params === \"function\") { // if function then assume callback was passed in with no params\n\t\t\tparams = {};\n\t\t}\n\t\tparams = params || {};\n\n\t\tparams = util.clone(params); // clone so params from calling function won't be modified (and cause other problems)\n\n\t\tparams.stackedWindowIdentifier = { windowName: this.identifier.windowName, windowType: this.identifier.windowType }; // add this window's identifier\n\t\tLogger.system.debug(`StackedWindow.${methodName} _privatePreface`, params);\n\n\t\tvar eventBlackList = [\"_saveWindowOptions\", \"_setBounds\"];\n\t\tif (eventBlackList.includes(methodName)) { // if method in event blacklist, then set parameter to skip sending event\n\t\t\tparams.doNotTransmitEvent = true;\n\t\t}\n\n\t\treturn params;\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Private window functions, fulfilled through requests to \"super\" and Stacked Window Manager Module\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t_minimize(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_minimize\", params);\n\t\t\tsuper._minimize(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.minimize(params, (err, response) => {\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_maximize(params, callback = Function.prototype) {\n\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\tif (this.isMaximizing || this.windowState === BaseWindow.WINDOWSTATE.MAXIMIZED) {\n\t\t\tcallback();\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tthis.isMaximizing = true;\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tparams = this._privatePreface(\"_maximize\", params);\n\t\t\tlet self = this;\n\t\t\tsuper._maximize(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.maximize(params, (err, response) => {\n\t\t\t\t\t\tself.setIsMaximized(true);\n\t\t\t\t\t\tself.eventManager.trigger(\"maximized\");\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t\tthis.isMaximizing = false;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\tthis.isMaximizing = false;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_restore(params, callback = Function.prototype) {\n\t\tif (\n\t\t\tthis.getIsMaximized() === true &&\n\t\t\tthis.isCurrentlyMinimized() === true\n\t\t) {\n\t\t\treturn this._maximize(params, callback);\n\t\t}\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_restore\", params);\n\t\t\tlet self = this;\n\t\t\tsuper._restore(params, (err, response) => {\n\t\t\t\tthis.setIsMaximized(false);\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.restore(params, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.restore callback\", err, response);\n\t\t\t\t\t\tself.eventManager.trigger(\"restored\");\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tself.eventManager.trigger(\"restored\");\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_focus(params = {}, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_focus\", params);\n\t\t\tsuper._focus(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.focus(params, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.focus callback\", err, response);\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_bringToFront(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_bringToFront\", params);\n\t\t\tsuper._bringToFront(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.bringToFront(params, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.bringToFront callback\", err, response);\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_saveWindowOptions(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_saveWindowOptions\", params);\n\t\t\tsuper._saveWindowOptions(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.saveWindowOptions({}, this, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.saveWindowOptions callback\", err, response);\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_setBounds(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_setBounds\", params);\n\t\t\tsuper._setBounds(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.setBounds(params, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.setBounds callback\", err, response);\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_getBoundsFromSystem(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_getBoundsFromSystem\", params);\n\t\t\tsuper._getBoundsFromSystem(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.getBoundsFromSystem(params, (innerErr, innerResponse) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.getBoundsFromSystem callback\", innerErr, innerResponse);\n\t\t\t\t\t\tcallback(innerErr, innerResponse);\n\t\t\t\t\t\tresolve({ innerErr, data: innerResponse });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_getBounds(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_getBounds\", params);\n\t\t\tsuper._getBounds(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.getBounds(params, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.getBounds callback\", err, response);\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_updateOptions(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_updateOptions\", params);\n\t\t\tsuper._updateOptions(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.updateOptions(params, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.updateOptions callback\", err, response);\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_hide(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_hide\", params);\n\t\t\tsuper._hide(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.hide(params, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.hide callback\", err, response);\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_show(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_show\", params);\n\t\t\tsuper._show(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.show(params, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.show callback\", err, response);\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t_close(params = {}, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_close\", params);\n\t\t\tsuper._close(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.close(params, (err, response = {}) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.close callback\", err, response);\n\t\t\t\t\t\tcallback(err, { shouldContinue: response.shouldContinue || false });\n\t\t\t\t\t\tresolve({ err, data: { shouldContinue: response.shouldContinue || false } });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, { shouldContinue: false });\n\t\t\t\t\tresolve({ err, data: { shouldContinue: false } });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\n\t_alwaysOnTop(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_alwaysOnTop\", params);\n\t\t\tsuper._alwaysOnTop(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.alwaysOnTop(params, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.alwaysOnTop callback\", err, response);\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\n\t_setOpacity(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._privatePreface(\"_setOpacity\", params);\n\t\t\tsuper._setOpacity(params, (err, response) => {\n\t\t\t\tif (!err && response.shouldContinue) {\n\t\t\t\t\twindow.stackedWindowManager.setOpacity(params, (err, response) => {\n\t\t\t\t\t\tLogger.system.debug(\"StackedWindowManager.setOpacity callback\", err, response);\n\t\t\t\t\t\tcallback(err, response);\n\t\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, response);\n\t\t\t\t\tresolve({ err, data: response });\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\n\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// CLEANUP NOTE:\n\t//\n\t// WHEN NEW TABBING INTERFACE IS PROVIDED TO PRESENTATION COMPONENTS, THEN ALL THE BELOW FUNCTIONS WILL BE REMOVED - THEY BECOME INTERNAL TO WINDOW SERVICE\n\t//\n\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Housekeeping function for window management methods\n\t//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Handles common housekeeping checks and modifications on params at the beginning of each private window-management function\n\t *\n\t * @param {string} methodName method name (e.g. \"minimize\", \"maximize\")\n\t * @param {object} params\n\t * @memberof StackedWindow\n\t * @private\n\t */\n\t_privateManagementPreface(methodName, params, callback) {\n\t\tif (typeof params === \"function\") {\n\t\t\tLogger.system.error(\"StackedWindowWrapper.wrapPreface bad params\", params);\n\t\t}\n\t\tparams = params || {};\n\t\tparams.stackedWindowIdentifier = { windowName: this.identifier.windowName, windowType: this.identifier.windowType }; // add this window's identifier\n\t\tLogger.system.debug(`StackedWindow.${methodName}  _privateManagementPreface`, params);\n\n\t\treturn params;\n\t}\n\n\t/**\n\t * Temporary function until more cleanup done. Handles common housekeeping checks and modifications on params at the beginning of each private window-management function\n\t *\n\t * @param {string} methodName method name (e.g. \"minimize\", \"maximize\")\n\t * @param {object} params\n\t * @memberof StackedWindow\n\t * @private\n\t */\n\t_newPrivateManagementPreface(methodName, params, callback) {\n\t\tif (typeof params === \"function\") {\n\t\t\tLogger.system.error(\"StackedWindowWrapper.wrapPreface bad params\", params);\n\t\t}\n\t\tparams = params || {};\n\t\tparams.stackedWindowIdentifier = { windowName: this.identifier.windowName, windowType: this.identifier.windowType }; // add this window's identifier\n\t\tLogger.system.debug(`StackedWindow.${methodName}  _newPrivateManagementPreface`, params);\n\n\t\treturn params;\n\t}\n\n\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\t// Below are the stackedWindow management functions (again fulfilled through requests to the Stacked Window Manager\n\t////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t// temporarily need to support both private and public management function -- later only window service will invoke (i.e. no public interfaces)\n\n\t_removeWindow(params, callback = Function.prototype) {\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tcallback = (typeof params === \"function\") ? params : callback; // if callback is the only argument\n\t\t\tparams = this._newPrivateManagementPreface(\"_removeWindow\", params);\n\t\t\twindow.stackedWindowManager.removeWindow(params, (err, response) => {\n\t\t\t\tLogger.system.debug(\"StackedWindowManager.removeWindow callback\", err, response);\n\t\t\t\tcallback(err, response);\n\t\t\t\tresolve({ err, data: response });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Adds window as a child to a stacked window.  Adds to the top of the stack, or if specified to a specific location in the stack;\n\t *\n\t * @param {object=} params\n \t * @param {object} params.stackedWindowIdentifier stacked window to operate on stacked window to operate on\n \t * @param {object} params.windowIdentifier window to add\n \t * @param {number=} params.position the location in the stack to push the window.  Location 0 is the bottom of the stack. Defaults to the top of stack.\n \t * @param {boolean=} params.noSave if true then don't save the store after updating it (will be saved by caller)\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\taddWindow(params, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"addWindow\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.addWindow\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.addWindow callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Removes a child window from a stacked window.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.\n\t *\n \t * @param {object} params\n.\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {object} params.windowIdentifier window to remove\n\t * @param {boolean=} params.noDocking if true then do not register removed window with docking (the workspace is unaffected)\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\tremoveWindow(params, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"removeWindow\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.removeWindow\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.removeWindow callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Removes a window from the stack then closes it.  If removed window was visible, then the bottom child window (position 0) in stack will be made visible.\n\t *\n \t * @param {object} params\n.\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {object} params.windowIdentifier window to delete\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\tdeleteWindow(params, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"deleteWindow\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.deleteWindow\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.deleteWindow callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Sets the visible window within the stack.  The previously visible window in stack will be automatically hidden.\n\t *\n \t * @param {object} params\n.\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {object} params.windowIdentifier\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\tsetVisibleWindow(params, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"setVisibleWindow\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.setVisibleWindow\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.setVisibleWindow callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\n\t/**\n\t * Reorders the stack, but odes not affect visibility\n\t *\n \t * @param {object} params\n.\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {array} params.windowIdentifiers array of windowIdentifiers which provides the new order\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\treorder(params, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"reorder\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.reorder\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.reorder callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\t/**\n\t * Reorders the stack, but odes not affect visibility\n\t *\n \t * @param {object} params\n.\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n\t * @param {array} params.windowIdentifiers array of windowIdentifiers which provides the new order\n\t * @param {function=} callback function(err)\n\t * @memberof StackedWindow\n\t */\n\tstopMove(params = {}, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"stopMove\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.stopMove\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.stopMove callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\t/**\n * Reorders the stack, but odes not affect visibility\n *\n\t * @param {object} params\n.\t * @param {object} params.stackedWindowIdentifier stacked window to operate on\n * @param {array} params.windowIdentifiers array of windowIdentifiers which provides the new order\n * @param {function=} callback function(err)\n * @memberof StackedWindow\n */\n\tstartMove(params = {}, callback = Function.prototype) {\n\t\tparams = this._privateManagementPreface(\"startMove\", params);\n\n\t\tconst promiseResolver = (resolve) => {\n\t\t\tRouterClient.query(\"StackedWindow.startMove\", params, (err, queryResponseMessage) => {\n\t\t\t\tLogger.system.debug(\"StackedWindow.startMove callback\", err, queryResponseMessage);\n\t\t\t\tcallback(err, queryResponseMessage.data);\n\t\t\t\tresolve({ err, data: queryResponseMessage.data });\n\t\t\t});\n\t\t};\n\t\treturn new Promise(promiseResolver);\n\t}\n\t/**\n\t * Returns store for stacked window.  Example usage below.\n\t *\n\t * @memberof StackedWindow\n\t *\n\t * @example\n\t * \t\t// get the state for one stacked window from the store\n\t * \t\tgetStore().getValue({ field: stackedWindowIdentifier.name, function (err, stackedWindowState) {}\n\t *\t\t\twhere stackedWindowState is an object with the following properties\n\t *\t\t\t\t{\n\t *\t\t\t\t\tstackedWindowIdentifier: the stacked window identifier\n\t *\t\t\t\t\tchildWindowIdentifiers: the window identifiers for all children in the stacked window\n\t *\t\t\t\t\tvisibleWindowIdentifier: the window identifier for the currently visible window\n\t *\t\t\t\t\tbounds: the current window bounds/coordinates for the stacked window (i.e. the current bounds of the visible window)\n\t *\t\t\t\t}\n\t */\n\tgetStore(callback = Function.prototype) {\n\t\treturn this.getWindowStore(callback);\n\t}\n\n\tsetupStoreListener() {\n\t\t// listen on store and update stackedWindow data\n\t\t// since this data will be cache provide hook to get it\n\n\t\tthis.getStore().addListener(function () {\n\t\t\tLogger.system.debug(\"StackedWindow listeners\", this.windowIdentifer.name);\n\t\t});\n\n\t\tthis.getStore().addListener({ field: this.windowIdentifer.name }, function () {\n\t\t\tLogger.system.debug(\"StackedWindow listeners\", this.windowIdentifer.name);\n\t\t});\n\t}\n}\n\nexport default StackedWindow;\n\n\n// WEBPACK FOOTER //\n// ./src/services/window/WindowAbstractions/stackedWindowWrapper.js"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChEA;;;AAGA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;;;;;ACvvvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AClBA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAxIA;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACpBA;;;AAGA;;AAkBA;AACA;AACA;AACA;;;;;AAKA;AAEA;;;AAGA;AACA;AACA;AAEA;;;;;;;;ACtCA;AAAA;AAAA;;;;AAIA;AACA;AACA;;;;;;AAMA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC5JA;;;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;AA6BA;AA5BA;AACA;AAGA;AACA;AACA;AAQA;AACA;AACA;AACA;AAKA;AACA;AAmBA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAAA;AACA;AAlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAuEA;AAjHA;AAmHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AACA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;;;AC1UA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;;;;;;AAMA;AACA;AACA;AAIA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AAdA;AAgxqKA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;ACzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;AC7ZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACrBA;AACA;AACA;AACA;AAMA;;;;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAUA;;AAEA;AACA;AANA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;AAKA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;AAKA;AACA;AACA;;;;;;;;AClfA;;;AAGA;AAEA;;AA0BA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;AAaA;AACA;AAGA;AACA;AAHA;AA6JA;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsLA;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAoDA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA9bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;AASA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAgBA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC3nBA;;;AAGA;;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AApBA;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AArBA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACnIA;;;AAGA;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;AAYA;AACA;AAAA;;AAmPA;AACA;AAiBA;AApQA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;AAIA;AACA;AACA;AACA;AAKA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AArQA;AAqQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AChTA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAdA;AAcA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AANA;AAMA;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAIA;AAEA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AALA;AAOA;;;;;;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAVA;;;;;;;ACntblvzDA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AA7BA;AA8BA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;;;;;AAQA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAvBA;AA+BA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAlWA;AAoWA;AACA;;;;;;;;;AC3WA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvIA;AACA;AAyIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACjiBA;;;AAGA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AAekBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;ACrzCA;;;;;AAKA;;;;;;AAMA;;;;;AAKA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9DA;;;AAGA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvOA;AAyOA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;AC3SA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AAEA;AACA;AAiHA;;AAEA;AACA;AACA;AACA;AArHA;AACA;AACA;AAGA;;;;;;;;;;;AAWA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAIA;;;;;;;;;;;;;;;AAeA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;;;;;;;;;;;AAWA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AASA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;ACvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvthBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAmCA;AATA;AA0hBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/hyEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AAEA;AAGA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAGA;;;;;;;;;;;AAWA;AACA;AAKA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;;;;;AAKA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1kCA;AACA;AACA;AACA;AACA;AACA;AAsFA;AACA;AACA;AACA;;;;;AAKA;AACA;AA4GA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAtbA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACntfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACPA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAOA;;;;;;;;;AASA;AAEA;;;;;;;;;AASA;AAEA;;;;;;;;;AASA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;AAYA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;AAeA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAcA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;;;;;;;AASA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;AASA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;AASA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;AAQA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;AAQA;AACA;AAGA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;ACz8BA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAiBA;AASA;AACA;AAPA;AACA;AAEA;AACA;AAkBA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AA2aA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA3dA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AA4BA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;AASA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;AAQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;AAOA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;AC/gBA;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAyCA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;AAcA;AACA;AAmBA;AACA;AACA;AAs0CA;;AAEA;AACA;AACA;AACA;AAz0CA;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AAYA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;;;;;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;;;;;;;AAmBA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;AAaA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;;;;;;;;;;;AAWA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;;;AAGA;AACA;AACA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AAWA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;AAIA;AACA;AAGA;AACA;AACA;AAAA;AAEA;;;;AAIA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;;;;AAIA;AACA;AAGA;AACA;AACA;AAAA;AAEA;;;;;;;;AAQA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAQA;;;;;;;;AAQA;AACA;AAQA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AC35DA;;;AAGA;;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAsBA;AACA;AA+JA;;;;AAIA;AACA;AACA;AACA;AArKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;;;AAGA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AC7WA;;;;;;;;;ACCA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AAEA;;AAEA;AACA;AAQA;AACA;AARA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;ACvEA;AACA;AACA;AA0GA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AA9KA;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACntDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AA1HA;AAqIA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAngBA;AAqgBA;AACA;;;;;;;;;;ACxgBA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;;;;AAeA;AACA;AAaA;AACA;AAbA;;;AAGA;AACA;AAmPA;AACA;AAoRA;;AAEA;AACA;AA2BA;AAyBA;AAkCA;AAvlBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;AAUA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;AAaA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AAgBA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;;;;;;;;;AAUA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;AAQA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;AAYA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;;;AAGA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AC3qBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AA+BA;AACA;AARA;AAiWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0BA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;;;;;;;;;AASA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAt2CA;AAkIA;AACA;AACA;AACA;;;;AAIA;AACA;AAyHA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArVA;;;;;;;;ACxDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAEA;AArjBA;AAujBA;AACA;;;;;;;;;;;ACzjBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAQA;AAPA;AASA;AARA;AACA;AAMA;AAJA;AACA;AAKA;;;;;;;;;;;ACjBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AACA;;;;;;;;;;;;ACjBA;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApxXA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAlVA;AAAA;AAAA;AACA;;;;;;;;;;;ACbA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAeA;;;;AAIA;AACA;AAWA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAIA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AAIA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;;AAzJA;;;;;AAKA;AACA;AAEA;AATA;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;ACVA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAxBA;AA0BA;;;;AAIA;AACA;AAAA;;;;;;;;;;;;AC3EA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AA7CA;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;;;AAOA;;;;;;;;;;AAUA;;;;;AAKA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AApoCA;AACA;AAsoCA;AACA;AACA;;;;;;;;;ACpqCA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AA/BA;AA0CA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;;;;AAMA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;ACtVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;;;;;;;;;AASA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAEA;AACA;AArFA;AAAA;AAAA;AAAA;AAsFA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;;;AAKA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjEA;AAkEA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AA8DA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgrCA;AAsCA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;;;;;;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAOA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AANA;AADA;AAcA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAxvCA;AA0vCA;AACA;;;;;;;;;ACtyCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAVA;AACA;AAWA;AACA;AACA;AACA;AAFA;AAbA;AAAA;AACA;AAmBA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AACA;AAyBA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAVA;AAYA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;AAKA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApFA;AACA;AAsFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAsCA;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzHA;AA2HA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;AAIA;AACA;AAGA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7lIA;AA+lIA;AACA;;;;;;;;AC7qIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAhDA;AACA;AAkDA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACxFA;;AAEA;AACA;AASA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AA9BA;;;;;;;;;;ACHA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACnHA;AAEA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3EA;AA4EA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnBA;;;;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjHA;AAmHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACzJA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;AC/DA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AA3iBA;;;;;;;;;;ACdA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAyCA;AAEA;AACA;AACA;AAWA;AAqRA;AACA;AAEA;AAEA;;;;;;AAMA;AACA;AAoBA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;AAaA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;;;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5oFA;AA6oFA;;;;;;;;;;ACrgGA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA/JA;;;;;;;;;ACZA;;;AAGA;AACA;AACA;;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AA/DA;;;;;;;;;;ACVA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AA5DA;;;;;;;;;;ACKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AAauBA;;;;;;;;;ACxBA;;;AAGA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;;;;;;;;;;;;;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;;;;;;;;AChkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3tjpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxFA;AAyFA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AAAA;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AACA;AACA;AACA;AADA;AAHA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAxCA;AAAA;AAAA;AAAA;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAoCA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AACA;AAkBA;AACA;AACA;AACA;AAtEA;AACA;AAyEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AAAA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApPA;AAsPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAjhFA;AACA;AAmhFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;AC5mFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AASA;AACA;AAXA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AA6BA;AACA;;;;;AAKA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAoBA;AACA;;;;AAIA;AAAA;AACA;AADA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAwCA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA4DA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/EA;AAAA;AAAA;AACA;AADA;AAAA;AAiFA;AACA;AArFA;AAsFA;AACA;;;;AAIA;AAAA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAoBA;AAtBA;AAuBA;AACA;;;;AAIA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA0CA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9DA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA+DA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnFA;AAAA;AAAA;AACA;AADA;AAAA;AAqFA;AACA;AA1FA;AA2FA;AACA;;;;AAIA;AAAA;AACA;AADA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAwCA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA4DA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/EA;AAAA;AAAA;AACA;AADA;AAAA;AAiFA;AACA;AArFA;AAsFA;AACA;;;;AAIA;AAAA;AACA;AADA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA0CA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA8DA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjFA;AAAA;AAAA;AACA;AADA;AAAA;AAmFA;AACA;AAvFA;AAwFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AADA;AAKA;AAzfA;AACA;AA2fA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AARA;AAAA;AAAA;AAAA;AADA;AACA;;;;;;;;;ACtgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnOA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACjrOA;AAsOA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArfA;AACA;AAufA;AACA;;;;;;;;;ACngBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AArCA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AACA;AASA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;AA1NA;AACA;AA4NA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AAfA;AACA;AACA;AAYA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AApSA;AACA;AAsSA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACpTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;;;AAGA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjFA;AAAA;AAAA;AAAA;AAieA;AACA;AAgfA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAwCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAlCA;AAmCA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAvBA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5kCA;AACA;AA8kCA;AACA;;;;;;;;;AClmgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzrBA;AACA;AA2rBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}